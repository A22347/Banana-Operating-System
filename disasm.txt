
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d9 10 02 00       	call   c00210fe <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 1d 02 c0       	mov    ebx,0xc0021d82
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 1d 02 c0    	cmp    ebx,0xc0021d90
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 5d 02 c0       	mov    eax,0xc0025d98
c0000049:	3d 98 5d 02 c0       	cmp    eax,0xc0025d98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 5d 02 c0       	push   0xc0025d98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 5d 02 c0       	mov    eax,0xc0025d98
c0000075:	2d 98 5d 02 c0       	sub    eax,0xc0025d98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 5d 02 c0       	push   0xc0025d98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025f20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 1d 02 c0       	mov    ebx,0xc0021d98
c00000bb:	81 eb 94 1d 02 c0    	sub    ebx,0xc0021d94
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 1d 02 c0       	mov    esi,0xc0021d94
c00000ca:	a1 24 5f 02 c0       	mov    eax,ds:0xc0025f24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 5f 02 c0       	mov    ds:0xc0025f24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 5f 02 c0       	mov    eax,ds:0xc0025f24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 5d 02 c0       	push   0xc0025d98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 5f 02 c0       	push   0xc0025f28
c000012c:	68 98 5d 02 c0       	push   0xc0025d98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 90 74 01 00       	call   c0017768 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 a5 c4 00 00       	call   c000c795 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 6e 74 01 00       	call   c0017768 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 37 79 01 00       	call   c0017c50 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 7a 7f 01 00       	call   c001829c <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 70 63 02 c0 	lgdtd  ds:0xc0026370
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 32 e2 00 00       	call   c000e749 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 40 5f 02 c0       	mov    ds:0xc0025f40,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 40 5f 02 c0    	mov    DWORD PTR ds:0xc0025f40,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 40 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025f40
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 1d 02 c0 02 	test   BYTE PTR [edx-0x3ffde260],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde260],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 1d 02 c0 08 	test   BYTE PTR [edx-0x3ffde260],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 1d 02 c0 04 	test   BYTE PTR [ebx-0x3ffde260],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde260],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 60 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025f60
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 60 5f 02 c0    	mov    DWORD PTR ds:0xc0025f60,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 64 5f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda09c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 64 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda09c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 60 5f 02 c0    	mov    DWORD PTR ds:0xc0025f60,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 8c 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f8c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 9c 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025f9c
c0000d6c:	c7 42 0c 94 5f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025f94
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 9c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f9c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 60 5f 02 c0 02 	test   BYTE PTR ds:0xc0025f60,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 60 5f 02 c0    	mov    edi,DWORD PTR ds:0xc0025f60
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 64 5f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda09c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 64 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda09c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 94 5f 02 c0 	lea    edx,[eax*8-0x3ffda06c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d a0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fa0
c00010ee:	81 fb 94 5f 02 c0    	cmp    ebx,0xc0025f94
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 94 5f 02 c0       	cmp    eax,0xc0025f94
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 90 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f90,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 9c 5f 02 c0       	mov    ds:0xc0025f9c,eax
c000112a:	a3 a0 5f 02 c0       	mov    ds:0xc0025fa0,eax
c000112f:	a3 90 5f 02 c0       	mov    ds:0xc0025f90,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 94 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025f94
c000113d:	c7 40 0c 94 5f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025f94
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 a0 5f 02 c0       	mov    ds:0xc0025fa0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 94 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025f94
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 58 5f 02 c0 	lea    ebp,[edx*4-0x3ffda0a8]
c000118e:	8b 14 95 60 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda0a0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 60 5f 02 c0 	lea    ecx,[edx*4-0x3ffda0a0]
c00011a9:	8b 14 95 60 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda0a0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 94 62 02 c0 	or     DWORD PTR [edi*4-0x3ffd9d6c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 94 5f 02 c0 	lea    eax,[eax*8-0x3ffda06c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 9c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f9c,ecx
c0001263:	89 0d a0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa0,ecx
c0001269:	c7 41 08 94 5f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025f94
c0001270:	c7 41 0c 94 5f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025f94
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 8c 5f 02 c0 	lea    edx,[ecx*8-0x3ffda074]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 94 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9d6c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 94 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9d6c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 8c 5f 02 c0 	lea    edx,[eax*4-0x3ffda074]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 94 62 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9d6c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 9c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f9c,edi
c0001336:	89 3d a0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa0,edi
c000133c:	c7 47 08 94 5f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025f94
c0001343:	c7 47 0c 94 5f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025f94
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 60 5f 02 c0       	mov    edx,0xc0025f60
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 60 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f60,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d b4 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 b4 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262b4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d b4 62 02 c0    	mov    DWORD PTR ds:0xc00262b4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 8c 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f8c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 60 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f60,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 bc 62 02 c0    	push   DWORD PTR ds:0xc00262bc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 60 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f60,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 bc 62 02 c0       	mov    eax,ds:0xc00262bc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 8c 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f8c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 64 5f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda09c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 94 5f 02 c0       	mov    eax,0xc0025f94
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 8c 62 02 c0       	cmp    eax,0xc002628c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 b0 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262b0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 c4 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262c4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 d4 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262d4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 1e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde15c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 60 5f 02 c0       	mov    eax,ds:0xc0025f60
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 60 5f 02 c0       	mov    ds:0xc0025f60,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d a4 62 02 c0    	mov    DWORD PTR ds:0xc00262a4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d a8 62 02 c0    	mov    DWORD PTR ds:0xc00262a8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ac 62 02 c0    	mov    DWORD PTR ds:0xc00262ac,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 b4 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262b4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 00 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8600]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 7a 94 01 00       	jmp    c001afa0 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 00 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8600]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 ac 94 01 00       	jmp    c001afe8 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 00 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8600]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 d5 94 01 00       	jmp    c001b030 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 a6 f0 01 00       	call   c0020ee4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 1f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde040]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 1f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde040]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 1f 02 c0       	mov    edx,0xc0021fe0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 84 4a 02 c0       	mov    edx,0xc0024a84
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 1f 02 c0       	mov    edx,0xc0021fec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 1f 02 c0       	mov    edx,0xc0021fd0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 00 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9d00]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 e0 62 02 c0    	mov    ax,ds:0xc00262e0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 e0 62 02 c0    	mov    ds:0xc00262e0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 a3 de 01 00       	call   c0020ee4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 1f 02 c0       	mov    eax,0xc0021ff2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde0c0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 1f 02 c0       	mov    eax,0xc0021ffb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde040]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 6e c8 01 00       	call   c0020ee4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 1f 02 c0       	mov    edx,0xc0021fd0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 00 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9d00]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 00 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9d00],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 35 b2 01 00       	call   c0020ee4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 1b b2 01 00       	call   c0020ee4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 1f 02 c0       	mov    eax,0xc0021f17
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 1f 02 c0       	mov    eax,0xc0021f10
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 b4 9d 01 00       	call   c0020ee4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 00 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9d00]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 1f 02 c0       	mov    esi,0xc0021f00
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 28 97 01 00       	call   c0020ee4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 1f 02 c0       	mov    edx,0xc0021fe0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 1e 02 c0       	mov    edx,0xc0021ef0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 20 02 c0       	mov    edx,0xc0022002
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 20 02 c0       	mov    edx,0xc002200e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 20 02 c0       	mov    edx,0xc0022022
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 40 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022340
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 40 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022340
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 40 21 02 c0       	mov    eax,0xc0022140
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 80 20 02 c0       	mov    eax,0xc0022080
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 40 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddfc0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000888b:	48                   	dec    eax
c000888c:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00088a2:	48                   	dec    eax
c00088a3:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00088b3:	ff 05 64 78 02 c0    	inc    DWORD PTR ds:0xc0027864
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00088c2:	48                   	dec    eax
c00088c3:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 60 78 02 c0 00 	cmp    DWORD PTR ds:0xc0027860,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c00088dd:	e8 da f5 00 00       	call   c0017ebc <schedule()>
c00088e2:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00088e7:	48                   	dec    eax
c00088e8:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 d0 64 02 c0       	mov    eax,ds:0xc00264d0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 40 24 02 c0       	push   0xc0022440
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 68 63 02 c0       	mov    eax,0xc0026368
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 49 24 02 c0       	push   0xc0022449
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 e4 0e 02 c0       	mov    eax,0xc0020ee4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 53 24 02 c0       	push   0xc0022453
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 18 0c 02 c0       	mov    eax,0xc0020c18
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 5c 24 02 c0       	push   0xc002245c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 e4 0f 02 c0       	mov    eax,0xc0020fe4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 66 24 02 c0       	push   0xc0022466
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 64 0d 02 c0       	mov    eax,0xc0020d64
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 6f 24 02 c0       	push   0xc002246f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 6c 63 02 c0       	mov    eax,0xc002636c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 7c 24 02 c0       	push   0xc002247c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 6d 63 02 c0       	mov    eax,0xc002636d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 b3 55 00 00       	call   c000dff8 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 89 24 02 c0       	push   0xc0022489
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 a0 24 02 c0 	mov    DWORD PTR [esp],0xc00224a0
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0008aa2:	68 b9 24 02 c0       	push   0xc00224b9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 e9 ef 00 00       	call   c0017a98 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 dc f1 00 00       	call   c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 e4 86 01 c0       	push   0xc00186e4
c0008acd:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0008ad3:	e8 c8 f1 00 00       	call   c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 48 78 02 c0       	mov    ds:0xc0027848,eax
c0008ae0:	68 60 26 02 c0       	push   0xc0022660
c0008ae5:	c6 05 6d 63 02 c0 01 	mov    BYTE PTR ds:0xc002636d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 c9 ff 00 00       	call   c0018abf <Vm::initialise8086()>
c0008af6:	e8 c3 42 00 00       	call   c000cdbe <Fs::initVFS()>
c0008afb:	c7 04 24 c6 24 02 c0 	mov    DWORD PTR [esp],0xc00224c6
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 60 26 02 c0       	push   0xc0022660
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 d6 d7 00 00       	call   c0016306 <Sys::loadSyscalls()>
c0008b30:	e8 ab b6 00 00       	call   c00141e0 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 e0 24 02 c0       	push   0xc00224e0
c0008b3f:	68 e9 24 02 c0       	push   0xc00224e9
c0008b44:	e8 80 c5 00 00       	call   c00150c9 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 5f 4d 00 00       	call   c000d8b0 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 84 26 02 c0 	mov    DWORD PTR [esp],0xc0022684
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 4a 54 00 00       	call   c000dfb8 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 f1 24 02 c0 	mov    DWORD PTR [esp],0xc00224f1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 c9 b1 00 00       	call   c0013d48 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 0b 25 02 c0 	mov    DWORD PTR [esp],0xc002250b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 1c 25 02 c0       	push   0xc002251c
c0008b9a:	e8 37 e9 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 5f eb 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 ff f4 00 00       	call   c00180b4 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 38 25 02 c0       	push   0xc0022538
c0008bc9:	50                   	push   eax
c0008bca:	e8 a3 54 00 00       	call   c000e072 <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 34 27 02 c0       	mov    edx,0xc0022734
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 81 63 02 c0 04 	test   BYTE PTR ds:0xc0026381,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 43 7e 01 00       	call   c0020ba6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 ac 9e 00 00       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 85 9e 00 00       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 63 9e 00 00       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 41 9e 00 00       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 80 63 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026380,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 4f 9d 00 00       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 2a 9d 00 00       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 ad 7c 01 00       	call   c0020b60 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 6a 7c 01 00       	call   c0020b40 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 46 9d 00 00       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 41 25 02 c0       	push   0xc0022541
c0008f46:	e8 9e b3 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 47 25 02 c0       	push   0xc0022547
c0008f7e:	e8 66 b3 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 a4 26 02 c0       	push   0xc00226a4
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 80 63 02 c0 04 	test   BYTE PTR ds:0xc0026380,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 40 57 02 c0 	sete   BYTE PTR ds:0xc0025740
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 4d 25 02 c0       	push   0xc002254d
c0008ff3:	e8 30 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 63 25 02 c0       	push   0xc0022563
c0009004:	e8 1f 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 77 25 02 c0       	push   0xc0022577
c0009012:	e8 11 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 8a 25 02 c0       	push   0xc002258a
c0009023:	e8 00 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 a1 25 02 c0       	push   0xc00225a1
c0009031:	e8 f2 39 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 b7 25 02 c0 	mov    DWORD PTR [esp],0xc00225b7
c000903d:	e8 e6 39 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 c9 25 02 c0 	mov    DWORD PTR [esp],0xc00225c9
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 58 8d 00 00       	call   c0011dbc <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 e3 25 02 c0 	mov    DWORD PTR [esp],0xc00225e3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 ea 4d 00 00       	call   c000de6e <Device::addChild(Device*)>
c0009084:	c7 04 24 c8 26 02 c0 	mov    DWORD PTR [esp],0xc00226c8
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 e8 26 02 c0 	mov    DWORD PTR [esp],0xc00226e8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 fd 25 02 c0 	mov    DWORD PTR [esp],0xc00225fd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 f1 24 02 c0 	mov    DWORD PTR [esp],0xc00224f1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 26 9c 00 00       	call   c0012d02 <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 83 4d 00 00       	call   c000de6e <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 08 27 02 c0       	push   0xc0022708
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 f9 52 00 00       	call   c000e40a <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 46 4d 00 00       	call   c000de6e <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 0e 26 02 c0       	push   0xc002260e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 5e ec 00 00       	call   c0017db4 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 29 26 02 c0       	push   0xc0022629
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 83 38 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 3a 26 02 c0       	push   0xc002263a
c00091c2:	e8 22 b1 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 47 26 02 c0       	push   0xc0022647
c00091d7:	e8 0d b1 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 51 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022651
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 f6 b0 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 72 63 02 c0       	mov    ds:0xc0026372,eax
c00092af:	66 89 15 70 63 02 c0 	mov    WORD PTR ds:0xc0026370,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00093c6:	48                   	dec    eax
c00093c7:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 49 7d 01 00       	call   c0021166 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 40 7d 01 00       	call   c0021166 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 78 63 02 c0 ff 07 	mov    WORD PTR ds:0xc0026378,0x7ff
c0009519:	a3 7a 63 02 c0       	mov    ds:0xc002637a,eax
c000951e:	0f 01 1d 78 63 02 c0 	lidtd  ds:0xc0026378
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c0009810:	e8 e1 25 00 00       	call   c000bdf6 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 5d 17 00 00       	call   c000af90 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 92 17 00 00       	call   c000afd4 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 58 27 02 c0       	push   0xc0022758
c000989d:	e8 86 31 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 cc 55 02 c0       	mov    eax,ds:0xc00255cc
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 d0 64 02 c0    	mov    esi,DWORD PTR ds:0xc00264d0
c00098cc:	8b 3d cc 55 02 c0    	mov    edi,DWORD PTR ds:0xc00255cc
c00098d2:	e8 e8 04 00 00       	call   c0009dbf <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 10 24 00 00       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 cc 55 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00255cc,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 cc 55 02 c0       	mov    eax,ds:0xc00255cc
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 84 27 02 c0       	push   0xc0022784
c0009918:	e8 0b 31 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 76 27 02 c0       	push   0xc0022776
c0009937:	e8 ad a9 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 7b 27 02 c0       	push   0xc002277b
c000994d:	e8 97 a9 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000996d:	48                   	dec    eax
c000996e:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c000998b:	e8 66 24 00 00       	call   c000bdf6 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c00099a1:	e8 fa 20 00 00       	call   c000baa0 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 b4 27 02 c0       	push   0xc00227b4
c0009ace:	e8 55 2f 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 b8 09 00 00       	call   c000a490 <installVgaTextImplementation()>
c0009ad8:	0f b6 05 e0 55 02 c0 	movzx  eax,BYTE PTR ds:0xc00255e0
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 e0 55 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdaa20]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 16 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda9ea],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 15 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda9eb]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 e0 55 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdaa20]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 cc 27 02 c0       	push   0xc00227cc
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 80 63 02 c0       	mov    ds:0xc0026380,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 cb 03 00 00       	call   c0009f4b <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 87 1c 00 00       	call   c000b80c <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 38 1d 00 00       	call   c000b8c8 <VAS::VAS()>
c0009b90:	89 1d d0 64 02 c0    	mov    DWORD PTR ds:0xc00264d0,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 68 63 02 c0    	mov    DWORD PTR ds:0xc0026368,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 ac 1f 00 00       	call   c000bb78 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 18             	sub    esp,0x18
c0009bde:	68 eb 27 02 c0       	push   0xc00227eb
c0009be3:	e8 40 2e 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bec:	31 d2                	xor    edx,edx
c0009bee:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0009bf4:	83 c4 10             	add    esp,0x10
c0009bf7:	c1 ee 0c             	shr    esi,0xc
c0009bfa:	31 c9                	xor    ecx,ecx
c0009bfc:	eb 17                	jmp    c0009c15 <Phys::allocateDMA(unsigned long)+0x42>
c0009bfe:	85 c9                	test   ecx,ecx
c0009c00:	75 04                	jne    c0009c06 <Phys::allocateDMA(unsigned long)+0x33>
c0009c02:	89 d5                	mov    ebp,edx
c0009c04:	89 d3                	mov    ebx,edx
c0009c06:	8d 41 01             	lea    eax,[ecx+0x1]
c0009c09:	39 c6                	cmp    esi,eax
c0009c0b:	74 23                	je     c0009c30 <Phys::allocateDMA(unsigned long)+0x5d>
c0009c0d:	42                   	inc    edx
c0009c0e:	89 c1                	mov    ecx,eax
c0009c10:	83 fa 2f             	cmp    edx,0x2f
c0009c13:	7f 11                	jg     c0009c26 <Phys::allocateDMA(unsigned long)+0x53>
c0009c15:	80 ba c0 63 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9c40],0x0
c0009c1c:	74 e0                	je     c0009bfe <Phys::allocateDMA(unsigned long)+0x2b>
c0009c1e:	31 c9                	xor    ecx,ecx
c0009c20:	42                   	inc    edx
c0009c21:	83 fa 2f             	cmp    edx,0x2f
c0009c24:	7e ef                	jle    c0009c15 <Phys::allocateDMA(unsigned long)+0x42>
c0009c26:	83 c4 0c             	add    esp,0xc
c0009c29:	31 c0                	xor    eax,eax
c0009c2b:	5b                   	pop    ebx
c0009c2c:	5e                   	pop    esi
c0009c2d:	5f                   	pop    edi
c0009c2e:	5d                   	pop    ebp
c0009c2f:	c3                   	ret    
c0009c30:	8d 14 33             	lea    edx,[ebx+esi*1]
c0009c33:	89 d7                	mov    edi,edx
c0009c35:	4f                   	dec    edi
c0009c36:	79 03                	jns    c0009c3b <Phys::allocateDMA(unsigned long)+0x68>
c0009c38:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c3b:	c1 ff 04             	sar    edi,0x4
c0009c3e:	89 da                	mov    edx,ebx
c0009c40:	c1 fa 04             	sar    edx,0x4
c0009c43:	39 fa                	cmp    edx,edi
c0009c45:	75 43                	jne    c0009c8a <Phys::allocateDMA(unsigned long)+0xb7>
c0009c47:	85 c0                	test   eax,eax
c0009c49:	74 1a                	je     c0009c65 <Phys::allocateDMA(unsigned long)+0x92>
c0009c4b:	be c0 63 02 c0       	mov    esi,0xc00263c0
c0009c50:	8d 93 c0 63 02 c0    	lea    edx,[ebx-0x3ffd9c40]
c0009c56:	f7 d6                	not    esi
c0009c58:	29 de                	sub    esi,ebx
c0009c5a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c5d:	42                   	inc    edx
c0009c5e:	8d 04 16             	lea    eax,[esi+edx*1]
c0009c61:	39 c1                	cmp    ecx,eax
c0009c63:	7f f5                	jg     c0009c5a <Phys::allocateDMA(unsigned long)+0x87>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	68 04 28 02 c0       	push   0xc0022804
c0009c6d:	e8 b6 2d 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	85 ff                	test   edi,edi
c0009c77:	74 17                	je     c0009c90 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c79:	83 c4 0c             	add    esp,0xc
c0009c7c:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c82:	5b                   	pop    ebx
c0009c83:	c1 e0 0c             	shl    eax,0xc
c0009c86:	5e                   	pop    esi
c0009c87:	5f                   	pop    edi
c0009c88:	5d                   	pop    ebp
c0009c89:	c3                   	ret    
c0009c8a:	89 ea                	mov    edx,ebp
c0009c8c:	31 c9                	xor    ecx,ecx
c0009c8e:	eb 90                	jmp    c0009c20 <Phys::allocateDMA(unsigned long)+0x4d>
c0009c90:	83 c4 0c             	add    esp,0xc
c0009c93:	c1 e3 0c             	shl    ebx,0xc
c0009c96:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009c9c:	5b                   	pop    ebx
c0009c9d:	5e                   	pop    esi
c0009c9e:	5f                   	pop    edi
c0009c9f:	5d                   	pop    ebp
c0009ca0:	c3                   	ret    

c0009ca1 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ca1:	83 ec 18             	sub    esp,0x18
c0009ca4:	68 1b 28 02 c0       	push   0xc002281b
c0009ca9:	e8 7a 2d 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009cae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cb2:	83 c4 10             	add    esp,0x10
c0009cb5:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c1 e9 0c             	shr    ecx,0xc
c0009cc2:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009cca:	76 29                	jbe    c0009cf5 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c0009ccc:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cd2:	c1 ea 0c             	shr    edx,0xc
c0009cd5:	83 c2 10             	add    edx,0x10
c0009cd8:	85 c9                	test   ecx,ecx
c0009cda:	74 15                	je     c0009cf1 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c0009cdc:	8d 82 c0 63 02 c0    	lea    eax,[edx-0x3ffd9c40]
c0009ce2:	8d 94 11 c0 63 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9c40]
c0009ce9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cec:	40                   	inc    eax
c0009ced:	39 d0                	cmp    eax,edx
c0009cef:	75 f8                	jne    c0009ce9 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c0009cf1:	83 c4 0c             	add    esp,0xc
c0009cf4:	c3                   	ret    
c0009cf5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009cfb:	c1 ea 0c             	shr    edx,0xc
c0009cfe:	eb d8                	jmp    c0009cd8 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c0009d00 <Phys::setPageState(unsigned long, bool)>:
c0009d00:	56                   	push   esi
c0009d01:	ba 01 00 00 00       	mov    edx,0x1
c0009d06:	53                   	push   ebx
c0009d07:	8b 35 24 57 02 c0    	mov    esi,DWORD PTR ds:0xc0025724
c0009d0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d15:	89 c8                	mov    eax,ecx
c0009d17:	83 e1 07             	and    ecx,0x7
c0009d1a:	c1 e8 03             	shr    eax,0x3
c0009d1d:	d3 e3                	shl    ebx,cl
c0009d1f:	01 c6                	add    esi,eax
c0009d21:	d3 e2                	shl    edx,cl
c0009d23:	f7 d2                	not    edx
c0009d25:	20 16                	and    BYTE PTR [esi],dl
c0009d27:	03 05 24 57 02 c0    	add    eax,DWORD PTR ds:0xc0025724
c0009d2d:	08 18                	or     BYTE PTR [eax],bl
c0009d2f:	5b                   	pop    ebx
c0009d30:	5e                   	pop    esi
c0009d31:	c3                   	ret    

c0009d32 <Phys::getPageState(unsigned long)>:
c0009d32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d36:	8b 15 24 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025724
c0009d3c:	89 c8                	mov    eax,ecx
c0009d3e:	83 e1 07             	and    ecx,0x7
c0009d41:	c1 e8 03             	shr    eax,0x3
c0009d44:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d48:	d3 f8                	sar    eax,cl
c0009d4a:	83 e0 01             	and    eax,0x1
c0009d4d:	c3                   	ret    

c0009d4e <Phys::freePage(unsigned long)>:
c0009d4e:	53                   	push   ebx
c0009d4f:	83 ec 10             	sub    esp,0x10
c0009d52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d56:	53                   	push   ebx
c0009d57:	68 31 28 02 c0       	push   0xc0022831
c0009d5c:	e8 c7 2c 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009d61:	83 c4 10             	add    esp,0x10
c0009d64:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c0009d6a:	76 3d                	jbe    c0009da9 <Phys::freePage(unsigned long)+0x5b>
c0009d6c:	83 ec 0c             	sub    esp,0xc
c0009d6f:	c1 eb 0c             	shr    ebx,0xc
c0009d72:	53                   	push   ebx
c0009d73:	e8 ba ff ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009d78:	83 c4 10             	add    esp,0x10
c0009d7b:	84 c0                	test   al,al
c0009d7d:	74 19                	je     c0009d98 <Phys::freePage(unsigned long)+0x4a>
c0009d7f:	83 ec 08             	sub    esp,0x8
c0009d82:	ff 0d b0 63 02 c0    	dec    DWORD PTR ds:0xc00263b0
c0009d88:	6a 00                	push   0x0
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 70 ff ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009d90:	83 c4 10             	add    esp,0x10
c0009d93:	83 c4 08             	add    esp,0x8
c0009d96:	5b                   	pop    ebx
c0009d97:	c3                   	ret    
c0009d98:	c7 44 24 10 44 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022844
c0009da0:	83 c4 08             	add    esp,0x8
c0009da3:	5b                   	pop    ebx
c0009da4:	e9 40 a5 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c0009da9:	83 ec 08             	sub    esp,0x8
c0009dac:	68 00 10 00 00       	push   0x1000
c0009db1:	53                   	push   ebx
c0009db2:	e8 ea fe ff ff       	call   c0009ca1 <Phys::freeDMA(unsigned long, unsigned long)>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	83 c4 08             	add    esp,0x8
c0009dbd:	5b                   	pop    ebx
c0009dbe:	c3                   	ret    

c0009dbf <Phys::allocatePage()>:
c0009dbf:	56                   	push   esi
c0009dc0:	53                   	push   ebx
c0009dc1:	83 ec 14             	sub    esp,0x14
c0009dc4:	8b 35 a4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263a4
c0009dca:	89 f3                	mov    ebx,esi
c0009dcc:	eb 0a                	jmp    c0009dd8 <Phys::allocatePage()+0x19>
c0009dce:	89 1d a4 63 02 c0    	mov    DWORD PTR ds:0xc00263a4,ebx
c0009dd4:	39 de                	cmp    esi,ebx
c0009dd6:	74 24                	je     c0009dfc <Phys::allocatePage()+0x3d>
c0009dd8:	53                   	push   ebx
c0009dd9:	e8 54 ff ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009dde:	5a                   	pop    edx
c0009ddf:	84 c0                	test   al,al
c0009de1:	74 76                	je     c0009e59 <Phys::allocatePage()+0x9a>
c0009de3:	43                   	inc    ebx
c0009de4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009dea:	75 e2                	jne    c0009dce <Phys::allocatePage()+0xf>
c0009dec:	31 db                	xor    ebx,ebx
c0009dee:	c7 05 a4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263a4,0x0
c0009df8:	39 de                	cmp    esi,ebx
c0009dfa:	75 dc                	jne    c0009dd8 <Phys::allocatePage()+0x19>
c0009dfc:	83 ec 0c             	sub    esp,0xc
c0009dff:	68 78 28 02 c0       	push   0xc0022878
c0009e04:	e8 1f 2c 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009e09:	58                   	pop    eax
c0009e0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e12:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e18:	e8 91 28 00 00       	call   c000c6ae <VAS::scanForEviction()>
c0009e1d:	83 c4 10             	add    esp,0x10
c0009e20:	85 c0                	test   eax,eax
c0009e22:	75 76                	jne    c0009e9a <Phys::allocatePage()+0xdb>
c0009e24:	83 ec 0c             	sub    esp,0xc
c0009e27:	68 00 10 00 00       	push   0x1000
c0009e2c:	e8 a2 fd ff ff       	call   c0009bd3 <Phys::allocateDMA(unsigned long)>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	85 c0                	test   eax,eax
c0009e36:	75 5c                	jne    c0009e94 <Phys::allocatePage()+0xd5>
c0009e38:	83 ec 0c             	sub    esp,0xc
c0009e3b:	68 90 28 02 c0       	push   0xc0022890
c0009e40:	e8 a4 a4 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	8b 1d a4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263a4
c0009e4e:	53                   	push   ebx
c0009e4f:	e8 de fe ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009e54:	5a                   	pop    edx
c0009e55:	84 c0                	test   al,al
c0009e57:	75 8a                	jne    c0009de3 <Phys::allocatePage()+0x24>
c0009e59:	6a 01                	push   0x1
c0009e5b:	53                   	push   ebx
c0009e5c:	e8 9f fe ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009e61:	5a                   	pop    edx
c0009e62:	a1 b0 63 02 c0       	mov    eax,ds:0xc00263b0
c0009e67:	59                   	pop    ecx
c0009e68:	40                   	inc    eax
c0009e69:	8b 15 a4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263a4
c0009e6f:	a3 b0 63 02 c0       	mov    ds:0xc00263b0,eax
c0009e74:	c1 e2 0c             	shl    edx,0xc
c0009e77:	52                   	push   edx
c0009e78:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c0009e7e:	50                   	push   eax
c0009e7f:	68 5a 28 02 c0       	push   0xc002285a
c0009e84:	e8 9f 2b 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009e89:	a1 a4 63 02 c0       	mov    eax,ds:0xc00263a4
c0009e8e:	83 c4 10             	add    esp,0x10
c0009e91:	c1 e0 0c             	shl    eax,0xc
c0009e94:	83 c4 14             	add    esp,0x14
c0009e97:	5b                   	pop    ebx
c0009e98:	5e                   	pop    esi
c0009e99:	c3                   	ret    
c0009e9a:	83 ec 08             	sub    esp,0x8
c0009e9d:	89 c2                	mov    edx,eax
c0009e9f:	6a 01                	push   0x1
c0009ea1:	c1 ea 0c             	shr    edx,0xc
c0009ea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ea8:	52                   	push   edx
c0009ea9:	e8 52 fe ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009eae:	83 c4 10             	add    esp,0x10
c0009eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eb5:	eb dd                	jmp    c0009e94 <Phys::allocatePage()+0xd5>

c0009eb7 <Phys::allocateContiguousPages(int)>:
c0009eb7:	57                   	push   edi
c0009eb8:	56                   	push   esi
c0009eb9:	53                   	push   ebx
c0009eba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ebe:	fa                   	cli    
c0009ebf:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0009ec5:	31 db                	xor    ebx,ebx
c0009ec7:	85 db                	test   ebx,ebx
c0009ec9:	75 11                	jne    c0009edc <Phys::allocateContiguousPages(int)+0x25>
c0009ecb:	e8 ef fe ff ff       	call   c0009dbf <Phys::allocatePage()>
c0009ed0:	83 fe 01             	cmp    esi,0x1
c0009ed3:	89 c7                	mov    edi,eax
c0009ed5:	74 21                	je     c0009ef8 <Phys::allocateContiguousPages(int)+0x41>
c0009ed7:	bb 01 00 00 00       	mov    ebx,0x1
c0009edc:	e8 de fe ff ff       	call   c0009dbf <Phys::allocatePage()>
c0009ee1:	89 da                	mov    edx,ebx
c0009ee3:	c1 e2 0c             	shl    edx,0xc
c0009ee6:	01 fa                	add    edx,edi
c0009ee8:	39 c2                	cmp    edx,eax
c0009eea:	74 20                	je     c0009f0c <Phys::allocateContiguousPages(int)+0x55>
c0009eec:	bb 01 00 00 00       	mov    ebx,0x1
c0009ef1:	89 c7                	mov    edi,eax
c0009ef3:	83 fe 01             	cmp    esi,0x1
c0009ef6:	75 e4                	jne    c0009edc <Phys::allocateContiguousPages(int)+0x25>
c0009ef8:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0009efd:	48                   	dec    eax
c0009efe:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0009f03:	75 01                	jne    c0009f06 <Phys::allocateContiguousPages(int)+0x4f>
c0009f05:	fb                   	sti    
c0009f06:	89 f8                	mov    eax,edi
c0009f08:	5b                   	pop    ebx
c0009f09:	5e                   	pop    esi
c0009f0a:	5f                   	pop    edi
c0009f0b:	c3                   	ret    
c0009f0c:	43                   	inc    ebx
c0009f0d:	39 f3                	cmp    ebx,esi
c0009f0f:	75 b6                	jne    c0009ec7 <Phys::allocateContiguousPages(int)+0x10>
c0009f11:	eb e5                	jmp    c0009ef8 <Phys::allocateContiguousPages(int)+0x41>

c0009f13 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f13:	56                   	push   esi
c0009f14:	53                   	push   ebx
c0009f15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f19:	39 1d a8 63 02 c0    	cmp    DWORD PTR ds:0xc00263a8,ebx
c0009f1f:	73 06                	jae    c0009f27 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f21:	89 1d a8 63 02 c0    	mov    DWORD PTR ds:0xc00263a8,ebx
c0009f27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f2b:	c1 eb 0c             	shr    ebx,0xc
c0009f2e:	c1 e8 0c             	shr    eax,0xc
c0009f31:	39 d8                	cmp    eax,ebx
c0009f33:	73 13                	jae    c0009f48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f35:	6a 00                	push   0x0
c0009f37:	8d 70 01             	lea    esi,[eax+0x1]
c0009f3a:	50                   	push   eax
c0009f3b:	e8 c0 fd ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009f40:	5a                   	pop    edx
c0009f41:	89 f0                	mov    eax,esi
c0009f43:	59                   	pop    ecx
c0009f44:	39 f3                	cmp    ebx,esi
c0009f46:	75 ed                	jne    c0009f35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f48:	5b                   	pop    ebx
c0009f49:	5e                   	pop    esi
c0009f4a:	c3                   	ret    

c0009f4b <Phys::physicalMemorySetup(unsigned int)>:
c0009f4b:	55                   	push   ebp
c0009f4c:	57                   	push   edi
c0009f4d:	56                   	push   esi
c0009f4e:	53                   	push   ebx
c0009f4f:	83 ec 40             	sub    esp,0x40
c0009f52:	6a 30                	push   0x30
c0009f54:	6a 00                	push   0x0
c0009f56:	68 c0 63 02 c0       	push   0xc00263c0
c0009f5b:	e8 24 67 ff ff       	call   c0000684 <memset>
c0009f60:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f69:	05 00 10 00 00       	add    eax,0x1000
c0009f6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009f72:	5b                   	pop    ebx
c0009f73:	31 db                	xor    ebx,ebx
c0009f75:	5e                   	pop    esi
c0009f76:	50                   	push   eax
c0009f77:	68 9e 28 02 c0       	push   0xc002289e
c0009f7c:	e8 a7 2a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	83 ec 08             	sub    esp,0x8
c0009f87:	6a 01                	push   0x1
c0009f89:	53                   	push   ebx
c0009f8a:	43                   	inc    ebx
c0009f8b:	e8 70 fd ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009f90:	83 c4 10             	add    esp,0x10
c0009f93:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009f99:	75 e9                	jne    c0009f84 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009f9b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fa2:	66 85 c0             	test   ax,ax
c0009fa5:	0f 84 8e 01 00 00    	je     c000a139 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009faf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fbb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fc0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fc4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009fcc:	eb 15                	jmp    c0009fe3 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009fce:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fd2:	83 c3 18             	add    ebx,0x18
c0009fd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009fd9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009fdd:	0f 84 66 01 00 00    	je     c000a149 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009fe3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009fe6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009fe9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009fec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff4:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009ff6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009ff9:	01 f0                	add    eax,esi
c0009ffb:	55                   	push   ebp
c0009ffc:	11 fa                	adc    edx,edi
c0009ffe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a002:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a006:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a00a:	56                   	push   esi
c000a00b:	68 e0 28 02 c0       	push   0xc00228e0
c000a010:	e8 13 2a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000a015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a019:	83 c4 10             	add    esp,0x10
c000a01c:	09 f8                	or     eax,edi
c000a01e:	0f 85 25 01 00 00    	jne    c000a149 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a024:	4d                   	dec    ebp
c000a025:	75 a7                	jne    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a027:	ba 00 00 08 00       	mov    edx,0x80000
c000a02c:	89 c1                	mov    ecx,eax
c000a02e:	39 f2                	cmp    edx,esi
c000a030:	19 f9                	sbb    ecx,edi
c000a032:	0f 82 a7 00 00 00    	jb     c000a0df <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a038:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a03c:	89 c1                	mov    ecx,eax
c000a03e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a042:	0f 83 97 00 00 00    	jae    c000a0df <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a048:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a04d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a051:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a055:	39 fa                	cmp    edx,edi
c000a057:	19 e8                	sbb    eax,ebp
c000a059:	0f 82 14 01 00 00    	jb     c000a173 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000a05f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a063:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a067:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a06d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a072:	83 d5 ff             	adc    ebp,0xffffffff
c000a075:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a079:	31 c0                	xor    eax,eax
c000a07b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a07f:	39 fa                	cmp    edx,edi
c000a081:	89 c1                	mov    ecx,eax
c000a083:	19 e9                	sbb    ecx,ebp
c000a085:	0f 83 43 ff ff ff    	jae    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a08b:	be 00 00 08 00       	mov    esi,0x80000
c000a090:	50                   	push   eax
c000a091:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a095:	57                   	push   edi
c000a096:	56                   	push   esi
c000a097:	68 04 29 02 c0       	push   0xc0022904
c000a09c:	e8 87 29 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000a0a1:	5a                   	pop    edx
c000a0a2:	59                   	pop    ecx
c000a0a3:	57                   	push   edi
c000a0a4:	56                   	push   esi
c000a0a5:	e8 69 fe ff ff       	call   c0009f13 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0b2:	83 c4 0c             	add    esp,0xc
c000a0b5:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0b9:	03 05 b4 63 02 c0    	add    eax,DWORD PTR ds:0xc00263b4
c000a0bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0c6:	a3 b4 63 02 c0       	mov    ds:0xc00263b4,eax
c000a0cb:	52                   	push   edx
c000a0cc:	50                   	push   eax
c000a0cd:	68 c4 28 02 c0       	push   0xc00228c4
c000a0d2:	e8 51 29 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000a0d7:	83 c4 10             	add    esp,0x10
c000a0da:	e9 ef fe ff ff       	jmp    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0df:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a0e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a0eb:	39 ea                	cmp    edx,ebp
c000a0ed:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a0f1:	0f 82 d7 fe ff ff    	jb     c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0f7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0fc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a100:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a104:	0f 83 c4 fe ff ff    	jae    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a10a:	39 ee                	cmp    esi,ebp
c000a10c:	89 f8                	mov    eax,edi
c000a10e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a112:	0f 83 78 ff ff ff    	jae    c000a090 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a11c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a120:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a124:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a128:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a12c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a130:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a134:	e9 57 ff ff ff       	jmp    c000a090 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a139:	83 ec 0c             	sub    esp,0xc
c000a13c:	68 b6 28 02 c0       	push   0xc00228b6
c000a141:	e8 a3 a1 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000a146:	83 c4 10             	add    esp,0x10
c000a149:	bb 40 01 00 00       	mov    ebx,0x140
c000a14e:	83 ec 08             	sub    esp,0x8
c000a151:	6a 00                	push   0x0
c000a153:	53                   	push   ebx
c000a154:	43                   	inc    ebx
c000a155:	e8 a6 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a15a:	ff 05 b4 63 02 c0    	inc    DWORD PTR ds:0xc00263b4
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a169:	75 e3                	jne    c000a14e <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a16b:	83 c4 3c             	add    esp,0x3c
c000a16e:	5b                   	pop    ebx
c000a16f:	5e                   	pop    esi
c000a170:	5f                   	pop    edi
c000a171:	5d                   	pop    ebp
c000a172:	c3                   	ret    
c000a173:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a17b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a183:	e9 d7 fe ff ff       	jmp    c000a05f <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a188 <Pipe::isAtty()>:
c000a188:	31 c0                	xor    eax,eax
c000a18a:	c3                   	ret    
c000a18b:	90                   	nop

c000a18c <Pipe::~Pipe()>:
c000a18c:	83 ec 0c             	sub    esp,0xc
c000a18f:	ba 70 29 02 c0       	mov    edx,0xc0022970
c000a194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a198:	89 10                	mov    DWORD PTR [eax],edx
c000a19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a19e:	83 ec 0c             	sub    esp,0xc
c000a1a1:	50                   	push   eax
c000a1a2:	e8 45 12 00 00       	call   c000b3ec <UnixFile::~UnixFile()>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	90                   	nop
c000a1ab:	83 c4 0c             	add    esp,0xc
c000a1ae:	c3                   	ret    
c000a1af:	90                   	nop

c000a1b0 <Pipe::~Pipe()>:
c000a1b0:	83 ec 0c             	sub    esp,0xc
c000a1b3:	83 ec 0c             	sub    esp,0xc
c000a1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ba:	e8 cd ff ff ff       	call   c000a18c <Pipe::~Pipe()>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	83 ec 08             	sub    esp,0x8
c000a1c5:	6a 20                	push   0x20
c000a1c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1cb:	e8 77 27 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000a1d0:	83 c4 10             	add    esp,0x10
c000a1d3:	83 c4 0c             	add    esp,0xc
c000a1d6:	c3                   	ret    
c000a1d7:	90                   	nop

c000a1d8 <Pipe::read(unsigned long long, void*, int*)>:
c000a1d8:	55                   	push   ebp
c000a1d9:	57                   	push   edi
c000a1da:	56                   	push   esi
c000a1db:	53                   	push   ebx
c000a1dc:	83 ec 1c             	sub    esp,0x1c
c000a1df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a1e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a1e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a1eb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a1ee:	89 c8                	mov    eax,ecx
c000a1f0:	99                   	cdq    
c000a1f1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a1f5:	74 24                	je     c000a21b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a1f7:	39 f9                	cmp    ecx,edi
c000a1f9:	89 d1                	mov    ecx,edx
c000a1fb:	19 f1                	sbb    ecx,esi
c000a1fd:	73 1c                	jae    c000a21b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a1ff:	fa                   	cli    
c000a200:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c000a206:	e8 b1 dc 00 00       	call   c0017ebc <schedule()>
c000a20b:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000a210:	48                   	dec    eax
c000a211:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000a216:	75 d3                	jne    c000a1eb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a218:	fb                   	sti    
c000a219:	eb d0                	jmp    c000a1eb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a21b:	39 f8                	cmp    eax,edi
c000a21d:	89 d1                	mov    ecx,edx
c000a21f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a222:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a226:	19 f1                	sbb    ecx,esi
c000a228:	73 07                	jae    c000a231 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a22a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a22d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a231:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a234:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a237:	29 f7                	sub    edi,esi
c000a239:	89 f8                	mov    eax,edi
c000a23b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a23f:	99                   	cdq    
c000a240:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a247:	19 d0                	sbb    eax,edx
c000a249:	73 07                	jae    c000a252 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a24b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a24e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a252:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a255:	89 ea                	mov    edx,ebp
c000a257:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a25b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a260:	74 0d                	je     c000a26f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a262:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a265:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a269:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a26d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a26f:	85 d2                	test   edx,edx
c000a271:	74 11                	je     c000a284 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a277:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a27a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a27e:	89 d1                	mov    ecx,edx
c000a280:	89 c7                	mov    edi,eax
c000a282:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a284:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a287:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a28a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a28d:	99                   	cdq    
c000a28e:	89 f7                	mov    edi,esi
c000a290:	03 04 24             	add    eax,DWORD PTR [esp]
c000a293:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a297:	c1 ff 1f             	sar    edi,0x1f
c000a29a:	57                   	push   edi
c000a29b:	56                   	push   esi
c000a29c:	52                   	push   edx
c000a29d:	50                   	push   eax
c000a29e:	e8 41 6d 01 00       	call   c0020fe4 <__umoddi3>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a2a9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a2ae:	75 10                	jne    c000a2c0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a2b0:	83 ec 0c             	sub    esp,0xc
c000a2b3:	68 2d 29 02 c0       	push   0xc002292d
c000a2b8:	e8 2c a0 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000a2bd:	83 c4 10             	add    esp,0x10
c000a2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a2c4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a2c7:	89 10                	mov    DWORD PTR [eax],edx
c000a2c9:	83 c4 1c             	add    esp,0x1c
c000a2cc:	31 c0                	xor    eax,eax
c000a2ce:	5b                   	pop    ebx
c000a2cf:	5e                   	pop    esi
c000a2d0:	5f                   	pop    edi
c000a2d1:	5d                   	pop    ebp
c000a2d2:	c3                   	ret    
c000a2d3:	90                   	nop

c000a2d4 <Pipe::write(unsigned long long, void*, int*)>:
c000a2d4:	55                   	push   ebp
c000a2d5:	57                   	push   edi
c000a2d6:	56                   	push   esi
c000a2d7:	53                   	push   ebx
c000a2d8:	83 ec 1c             	sub    esp,0x1c
c000a2db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a2df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2e3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a2e6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a2ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2f1:	89 d8                	mov    eax,ebx
c000a2f3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a2f6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2fa:	89 d6                	mov    esi,edx
c000a2fc:	89 d7                	mov    edi,edx
c000a2fe:	c1 ff 1f             	sar    edi,0x1f
c000a301:	03 34 24             	add    esi,DWORD PTR [esp]
c000a304:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a308:	c1 f8 1f             	sar    eax,0x1f
c000a30b:	39 f3                	cmp    ebx,esi
c000a30d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a315:	19 f8                	sbb    eax,edi
c000a317:	b8 01 00 00 00       	mov    eax,0x1
c000a31c:	72 6e                	jb     c000a38c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a31e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a321:	01 d0                	add    eax,edx
c000a323:	99                   	cdq    
c000a324:	f7 fb                	idiv   ebx
c000a326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a32a:	29 d3                	sub    ebx,edx
c000a32c:	89 d7                	mov    edi,edx
c000a32e:	89 de                	mov    esi,ebx
c000a330:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a333:	c1 fb 1f             	sar    ebx,0x1f
c000a336:	39 f2                	cmp    edx,esi
c000a338:	19 d8                	sbb    eax,ebx
c000a33a:	b8 00 00 00 00       	mov    eax,0x0
c000a33f:	72 04                	jb     c000a345 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a341:	89 d0                	mov    eax,edx
c000a343:	29 f0                	sub    eax,esi
c000a345:	89 d3                	mov    ebx,edx
c000a347:	29 c3                	sub    ebx,eax
c000a349:	74 0b                	je     c000a356 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a34b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a34e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a352:	89 d9                	mov    ecx,ebx
c000a354:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a356:	85 c0                	test   eax,eax
c000a358:	74 0d                	je     c000a367 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a35a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a35e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a361:	89 de                	mov    esi,ebx
c000a363:	89 c1                	mov    ecx,eax
c000a365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a367:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a36a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a36f:	75 10                	jne    c000a381 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a371:	83 ec 0c             	sub    esp,0xc
c000a374:	68 49 29 02 c0       	push   0xc0022949
c000a379:	e8 6b 9f 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000a37e:	83 c4 10             	add    esp,0x10
c000a381:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a385:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a388:	89 08                	mov    DWORD PTR [eax],ecx
c000a38a:	31 c0                	xor    eax,eax
c000a38c:	83 c4 1c             	add    esp,0x1c
c000a38f:	5b                   	pop    ebx
c000a390:	5e                   	pop    esi
c000a391:	5f                   	pop    edi
c000a392:	5d                   	pop    ebp
c000a393:	c3                   	ret    

c000a394 <Pipe::Pipe(int)>:
c000a394:	83 ec 0c             	sub    esp,0xc
c000a397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39b:	83 ec 08             	sub    esp,0x8
c000a39e:	6a 00                	push   0x0
c000a3a0:	50                   	push   eax
c000a3a1:	e8 64 0e 00 00       	call   c000b20a <UnixFile::UnixFile(int)>
c000a3a6:	83 c4 10             	add    esp,0x10
c000a3a9:	ba 70 29 02 c0       	mov    edx,0xc0022970
c000a3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3b2:	89 10                	mov    DWORD PTR [eax],edx
c000a3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a3bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a3d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a3d9:	83 ec 0c             	sub    esp,0xc
c000a3dc:	50                   	push   eax
c000a3dd:	e8 e1 f5 ff ff       	call   c00099c3 <malloc>
c000a3e2:	83 c4 10             	add    esp,0x10
c000a3e5:	89 c2                	mov    edx,eax
c000a3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a3f6:	90                   	nop
c000a3f7:	83 c4 0c             	add    esp,0xc
c000a3fa:	c3                   	ret    
c000a3fb:	90                   	nop

c000a3fc <VgaText::isAtty()>:
c000a3fc:	b0 01                	mov    al,0x1
c000a3fe:	c3                   	ret    
c000a3ff:	90                   	nop

c000a400 <VgaText::~VgaText()>:
c000a400:	83 ec 0c             	sub    esp,0xc
c000a403:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000a408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40c:	89 10                	mov    DWORD PTR [eax],edx
c000a40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a412:	83 ec 0c             	sub    esp,0xc
c000a415:	50                   	push   eax
c000a416:	e8 d1 0f 00 00       	call   c000b3ec <UnixFile::~UnixFile()>
c000a41b:	83 c4 10             	add    esp,0x10
c000a41e:	90                   	nop
c000a41f:	83 c4 0c             	add    esp,0xc
c000a422:	c3                   	ret    
c000a423:	90                   	nop

c000a424 <VgaText::~VgaText()>:
c000a424:	83 ec 0c             	sub    esp,0xc
c000a427:	83 ec 0c             	sub    esp,0xc
c000a42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42e:	e8 cd ff ff ff       	call   c000a400 <VgaText::~VgaText()>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	83 ec 08             	sub    esp,0x8
c000a439:	68 c4 02 00 00       	push   0x2c4
c000a43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a442:	e8 00 25 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000a447:	83 c4 10             	add    esp,0x10
c000a44a:	83 c4 0c             	add    esp,0xc
c000a44d:	c3                   	ret    

c000a44e <VgaText::read(unsigned long long, void*, int*)>:
c000a44e:	83 ec 10             	sub    esp,0x10
c000a451:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a45d:	e8 54 58 00 00       	call   c000fcb6 <readKeyboard(VgaText*, char*, unsigned long)>
c000a462:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a466:	89 02                	mov    DWORD PTR [edx],eax
c000a468:	31 c0                	xor    eax,eax
c000a46a:	83 c4 1c             	add    esp,0x1c
c000a46d:	c3                   	ret    

c000a46e <setTerminalScrollLock(bool)>:
c000a46e:	c3                   	ret    

c000a46f <addToTerminalCycle(VgaText*)>:
c000a46f:	8b 15 20 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026420
c000a475:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a479:	85 d2                	test   edx,edx
c000a47b:	75 09                	jne    c000a486 <addToTerminalCycle(VgaText*)+0x17>
c000a47d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a480:	a3 20 64 02 c0       	mov    ds:0xc0026420,eax
c000a485:	c3                   	ret    
c000a486:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a489:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a48c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a48f:	c3                   	ret    

c000a490 <installVgaTextImplementation()>:
c000a490:	83 ec 10             	sub    esp,0x10
c000a493:	6a 20                	push   0x20
c000a495:	6a 00                	push   0x0
c000a497:	68 00 64 02 c0       	push   0xc0026400
c000a49c:	e8 e3 61 ff ff       	call   c0000684 <memset>
c000a4a1:	83 c4 1c             	add    esp,0x1c
c000a4a4:	c3                   	ret    

c000a4a5 <scrollTerminalScrollLock(int)>:
c000a4a5:	c3                   	ret    

c000a4a6 <VgaText::updateTitle()>:
c000a4a6:	53                   	push   ebx
c000a4a7:	31 c0                	xor    eax,eax
c000a4a9:	83 ec 58             	sub    esp,0x58
c000a4ac:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a4b0:	89 e1                	mov    ecx,esp
c000a4b2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a4b6:	40                   	inc    eax
c000a4b7:	83 f8 50             	cmp    eax,0x50
c000a4ba:	75 f6                	jne    c000a4b2 <VgaText::updateTitle()+0xc>
c000a4bc:	31 c0                	xor    eax,eax
c000a4be:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a4c5:	84 db                	test   bl,bl
c000a4c7:	74 06                	je     c000a4cf <VgaText::updateTitle()+0x29>
c000a4c9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a4cc:	40                   	inc    eax
c000a4cd:	eb ef                	jmp    c000a4be <VgaText::updateTitle()+0x18>
c000a4cf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a4d2:	85 c0                	test   eax,eax
c000a4d4:	74 09                	je     c000a4df <VgaText::updateTitle()+0x39>
c000a4d6:	53                   	push   ebx
c000a4d7:	53                   	push   ebx
c000a4d8:	51                   	push   ecx
c000a4d9:	52                   	push   edx
c000a4da:	ff d0                	call   eax
c000a4dc:	83 c4 10             	add    esp,0x10
c000a4df:	83 c4 58             	add    esp,0x58
c000a4e2:	5b                   	pop    ebx
c000a4e3:	c3                   	ret    

c000a4e4 <VgaText::load()>:
c000a4e4:	53                   	push   ebx
c000a4e5:	31 c0                	xor    eax,eax
c000a4e7:	83 ec 58             	sub    esp,0x58
c000a4ea:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a4ee:	89 e2                	mov    edx,esp
c000a4f0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a4f4:	40                   	inc    eax
c000a4f5:	83 f8 50             	cmp    eax,0x50
c000a4f8:	75 f6                	jne    c000a4f0 <VgaText::load()+0xc>
c000a4fa:	31 c0                	xor    eax,eax
c000a4fc:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a503:	84 c9                	test   cl,cl
c000a505:	74 06                	je     c000a50d <VgaText::load()+0x29>
c000a507:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a50a:	40                   	inc    eax
c000a50b:	eb ef                	jmp    c000a4fc <VgaText::load()+0x18>
c000a50d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a510:	85 c0                	test   eax,eax
c000a512:	74 09                	je     c000a51d <VgaText::load()+0x39>
c000a514:	51                   	push   ecx
c000a515:	51                   	push   ecx
c000a516:	52                   	push   edx
c000a517:	53                   	push   ebx
c000a518:	ff d0                	call   eax
c000a51a:	83 c4 10             	add    esp,0x10
c000a51d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a520:	85 c0                	test   eax,eax
c000a522:	74 09                	je     c000a52d <VgaText::load()+0x49>
c000a524:	83 ec 0c             	sub    esp,0xc
c000a527:	53                   	push   ebx
c000a528:	ff d0                	call   eax
c000a52a:	83 c4 10             	add    esp,0x10
c000a52d:	83 c4 58             	add    esp,0x58
c000a530:	5b                   	pop    ebx
c000a531:	c3                   	ret    

c000a532 <VgaText::updateCursor()>:
c000a532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a536:	39 05 24 64 02 c0    	cmp    DWORD PTR ds:0xc0026424,eax
c000a53c:	75 09                	jne    c000a547 <VgaText::updateCursor()+0x15>
c000a53e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a541:	85 c0                	test   eax,eax
c000a543:	74 02                	je     c000a547 <VgaText::updateCursor()+0x15>
c000a545:	ff e0                	jmp    eax
c000a547:	c3                   	ret    

c000a548 <VgaText::doANSI_SGR(int)>:
c000a548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a550:	85 d2                	test   edx,edx
c000a552:	75 0b                	jne    c000a55f <VgaText::doANSI_SGR(int)+0x17>
c000a554:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a557:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a55a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a55d:	eb 59                	jmp    c000a5b8 <VgaText::doANSI_SGR(int)+0x70>
c000a55f:	83 fa 07             	cmp    edx,0x7
c000a562:	75 0b                	jne    c000a56f <VgaText::doANSI_SGR(int)+0x27>
c000a564:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a567:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a56a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a56d:	eb 49                	jmp    c000a5b8 <VgaText::doANSI_SGR(int)+0x70>
c000a56f:	83 fa 1b             	cmp    edx,0x1b
c000a572:	74 e0                	je     c000a554 <VgaText::doANSI_SGR(int)+0xc>
c000a574:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a577:	83 f9 07             	cmp    ecx,0x7
c000a57a:	77 09                	ja     c000a585 <VgaText::doANSI_SGR(int)+0x3d>
c000a57c:	8b 14 8d 60 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda8a0]
c000a583:	eb 20                	jmp    c000a5a5 <VgaText::doANSI_SGR(int)+0x5d>
c000a585:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a588:	83 f9 07             	cmp    ecx,0x7
c000a58b:	77 09                	ja     c000a596 <VgaText::doANSI_SGR(int)+0x4e>
c000a58d:	8b 14 8d 60 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda8a0]
c000a594:	eb 22                	jmp    c000a5b8 <VgaText::doANSI_SGR(int)+0x70>
c000a596:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a599:	83 f9 07             	cmp    ecx,0x7
c000a59c:	77 0b                	ja     c000a5a9 <VgaText::doANSI_SGR(int)+0x61>
c000a59e:	8b 14 95 18 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda9e8]
c000a5a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5a8:	c3                   	ret    
c000a5a9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a5ac:	83 f9 07             	cmp    ecx,0x7
c000a5af:	77 0a                	ja     c000a5bb <VgaText::doANSI_SGR(int)+0x73>
c000a5b1:	8b 14 95 f0 55 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaa10]
c000a5b8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a5bb:	c3                   	ret    

c000a5bc <VgaText::setDefaultBgColour(VgaColour)>:
c000a5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a5c7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a5ca:	c3                   	ret    
c000a5cb:	90                   	nop

c000a5cc <VgaText::setDefaultFgColour(VgaColour)>:
c000a5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5d4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a5d7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5da:	c3                   	ret    
c000a5db:	90                   	nop

c000a5dc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a5dc:	53                   	push   ebx
c000a5dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a5e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a5e9:	51                   	push   ecx
c000a5ea:	e8 cd ff ff ff       	call   c000a5bc <VgaText::setDefaultBgColour(VgaColour)>
c000a5ef:	58                   	pop    eax
c000a5f0:	5a                   	pop    edx
c000a5f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a5f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a5f9:	5b                   	pop    ebx
c000a5fa:	eb d0                	jmp    c000a5cc <VgaText::setDefaultFgColour(VgaColour)>

c000a5fc <VgaText::setTitleTextColour(VgaColour)>:
c000a5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a604:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a607:	e9 9a fe ff ff       	jmp    c000a4a6 <VgaText::updateTitle()>

c000a60c <VgaText::setTitleColour(VgaColour)>:
c000a60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a614:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a617:	e9 8a fe ff ff       	jmp    c000a4a6 <VgaText::updateTitle()>

c000a61c <VgaText::setTitle(char*)>:
c000a61c:	53                   	push   ebx
c000a61d:	83 ec 10             	sub    esp,0x10
c000a620:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a628:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a62e:	50                   	push   eax
c000a62f:	e8 0c 61 ff ff       	call   c0000740 <strcpy>
c000a634:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a638:	83 c4 18             	add    esp,0x18
c000a63b:	5b                   	pop    ebx
c000a63c:	e9 65 fe ff ff       	jmp    c000a4a6 <VgaText::updateTitle()>
c000a641:	90                   	nop

c000a642 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a642:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a646:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a64b:	83 e0 0f             	and    eax,0xf
c000a64e:	c1 e2 04             	shl    edx,0x4
c000a651:	09 d0                	or     eax,edx
c000a653:	c3                   	ret    

c000a654 <VgaText::scrollScreen()>:
c000a654:	55                   	push   ebp
c000a655:	b9 01 00 00 00       	mov    ecx,0x1
c000a65a:	57                   	push   edi
c000a65b:	56                   	push   esi
c000a65c:	53                   	push   ebx
c000a65d:	83 ec 0c             	sub    esp,0xc
c000a660:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a664:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a66a:	31 ff                	xor    edi,edi
c000a66c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a66f:	83 f9 17             	cmp    ecx,0x17
c000a672:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a675:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a67c:	75 27                	jne    c000a6a5 <VgaText::scrollScreen()+0x51>
c000a67e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a681:	01 f5                	add    ebp,esi
c000a683:	f7 c7 01 00 00 00    	test   edi,0x1
c000a689:	74 16                	je     c000a6a1 <VgaText::scrollScreen()+0x4d>
c000a68b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a68f:	50                   	push   eax
c000a690:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a694:	50                   	push   eax
c000a695:	e8 a8 ff ff ff       	call   c000a642 <VgaText::combineColours(unsigned char, unsigned char)>
c000a69a:	5a                   	pop    edx
c000a69b:	5a                   	pop    edx
c000a69c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a69f:	eb 04                	jmp    c000a6a5 <VgaText::scrollScreen()+0x51>
c000a6a1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a6a5:	47                   	inc    edi
c000a6a6:	46                   	inc    esi
c000a6a7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a6ad:	75 bd                	jne    c000a66c <VgaText::scrollScreen()+0x18>
c000a6af:	41                   	inc    ecx
c000a6b0:	83 f9 18             	cmp    ecx,0x18
c000a6b3:	75 af                	jne    c000a664 <VgaText::scrollScreen()+0x10>
c000a6b5:	39 1d 24 64 02 c0    	cmp    DWORD PTR ds:0xc0026424,ebx
c000a6bb:	75 1b                	jne    c000a6d8 <VgaText::scrollScreen()+0x84>
c000a6bd:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a6c1:	74 05                	je     c000a6c8 <VgaText::scrollScreen()+0x74>
c000a6c3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a6c6:	eb 10                	jmp    c000a6d8 <VgaText::scrollScreen()+0x84>
c000a6c8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a6cb:	85 c0                	test   eax,eax
c000a6cd:	74 09                	je     c000a6d8 <VgaText::scrollScreen()+0x84>
c000a6cf:	83 ec 0c             	sub    esp,0xc
c000a6d2:	53                   	push   ebx
c000a6d3:	ff d0                	call   eax
c000a6d5:	83 c4 10             	add    esp,0x10
c000a6d8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6dc:	83 c4 0c             	add    esp,0xc
c000a6df:	5b                   	pop    ebx
c000a6e0:	5e                   	pop    esi
c000a6e1:	5f                   	pop    edi
c000a6e2:	5d                   	pop    ebp
c000a6e3:	e9 4a fe ff ff       	jmp    c000a532 <VgaText::updateCursor()>

c000a6e8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a6e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a6ed:	c1 e0 08             	shl    eax,0x8
c000a6f0:	89 c2                	mov    edx,eax
c000a6f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a6f7:	09 d0                	or     eax,edx
c000a6f9:	c3                   	ret    

c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a6fa:	56                   	push   esi
c000a6fb:	53                   	push   ebx
c000a6fc:	51                   	push   ecx
c000a6fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a701:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a706:	50                   	push   eax
c000a707:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 30 ff ff ff       	call   c000a642 <VgaText::combineColours(unsigned char, unsigned char)>
c000a712:	5b                   	pop    ebx
c000a713:	0f b6 c0             	movzx  eax,al
c000a716:	5e                   	pop    esi
c000a717:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a71c:	50                   	push   eax
c000a71d:	53                   	push   ebx
c000a71e:	e8 c5 ff ff ff       	call   c000a6e8 <VgaText::combineCharAndColour(char, unsigned char)>
c000a723:	5a                   	pop    edx
c000a724:	5e                   	pop    esi
c000a725:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a728:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a72e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a732:	0f b7 d2             	movzx  edx,dx
c000a735:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a739:	39 0d 24 64 02 c0    	cmp    DWORD PTR ds:0xc0026424,ecx
c000a73f:	75 10                	jne    c000a751 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a741:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a744:	85 c0                	test   eax,eax
c000a746:	74 09                	je     c000a751 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a748:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a74c:	5a                   	pop    edx
c000a74d:	5b                   	pop    ebx
c000a74e:	5e                   	pop    esi
c000a74f:	ff e0                	jmp    eax
c000a751:	58                   	pop    eax
c000a752:	5b                   	pop    ebx
c000a753:	5e                   	pop    esi
c000a754:	c3                   	ret    
c000a755:	90                   	nop

c000a756 <VgaText::getCursorX()>:
c000a756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a75a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a75d:	c3                   	ret    

c000a75e <VgaText::getCursorY()>:
c000a75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a762:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a765:	c3                   	ret    

c000a766 <VgaText::setCursor(int, int)>:
c000a766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a76a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a76e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a775:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a778:	e9 b5 fd ff ff       	jmp    c000a532 <VgaText::updateCursor()>

c000a77d <setActiveTerminal(VgaText*)>:
c000a77d:	53                   	push   ebx
c000a77e:	83 ec 08             	sub    esp,0x8
c000a781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a785:	85 db                	test   ebx,ebx
c000a787:	75 11                	jne    c000a79a <setActiveTerminal(VgaText*)+0x1d>
c000a789:	c7 44 24 10 84 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022984
c000a791:	83 c4 08             	add    esp,0x8
c000a794:	5b                   	pop    ebx
c000a795:	e9 4f 9b 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c000a79a:	a1 24 64 02 c0       	mov    eax,ds:0xc0026424
c000a79f:	85 c0                	test   eax,eax
c000a7a1:	74 0c                	je     c000a7af <setActiveTerminal(VgaText*)+0x32>
c000a7a3:	83 ec 0c             	sub    esp,0xc
c000a7a6:	50                   	push   eax
c000a7a7:	e8 86 fd ff ff       	call   c000a532 <VgaText::updateCursor()>
c000a7ac:	83 c4 10             	add    esp,0x10
c000a7af:	89 1d 24 64 02 c0    	mov    DWORD PTR ds:0xc0026424,ebx
c000a7b5:	51                   	push   ecx
c000a7b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a7b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a7bc:	53                   	push   ebx
c000a7bd:	e8 a4 ff ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a7c9:	75 07                	jne    c000a7d2 <setActiveTerminal(VgaText*)+0x55>
c000a7cb:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a7d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d6:	83 c4 08             	add    esp,0x8
c000a7d9:	5b                   	pop    ebx
c000a7da:	e9 05 fd ff ff       	jmp    c000a4e4 <VgaText::load()>

c000a7df <doTerminalCycle()>:
c000a7df:	83 ec 18             	sub    esp,0x18
c000a7e2:	a1 20 64 02 c0       	mov    eax,ds:0xc0026420
c000a7e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a7ea:	50                   	push   eax
c000a7eb:	a3 20 64 02 c0       	mov    ds:0xc0026420,eax
c000a7f0:	e8 88 ff ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c000a7f5:	83 c4 1c             	add    esp,0x1c
c000a7f8:	c3                   	ret    
c000a7f9:	90                   	nop

c000a7fa <VgaText::setCursorX(int)>:
c000a7fa:	83 ec 10             	sub    esp,0x10
c000a7fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a801:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	50                   	push   eax
c000a809:	e8 58 ff ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000a80e:	83 c4 1c             	add    esp,0x1c
c000a811:	c3                   	ret    

c000a812 <VgaText::setCursorY(int)>:
c000a812:	83 ec 10             	sub    esp,0x10
c000a815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a81d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a820:	50                   	push   eax
c000a821:	e8 40 ff ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000a826:	83 c4 1c             	add    esp,0x1c
c000a829:	c3                   	ret    

c000a82a <VgaText::incrementCursor(bool)>:
c000a82a:	56                   	push   esi
c000a82b:	53                   	push   ebx
c000a82c:	51                   	push   ecx
c000a82d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a835:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a838:	40                   	inc    eax
c000a839:	83 f8 50             	cmp    eax,0x50
c000a83c:	74 05                	je     c000a843 <VgaText::incrementCursor(bool)+0x19>
c000a83e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a841:	eb 24                	jmp    c000a867 <VgaText::incrementCursor(bool)+0x3d>
c000a843:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a846:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a84d:	8d 50 01             	lea    edx,[eax+0x1]
c000a850:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a853:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a856:	75 0f                	jne    c000a867 <VgaText::incrementCursor(bool)+0x3d>
c000a858:	83 ec 0c             	sub    esp,0xc
c000a85b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a85e:	53                   	push   ebx
c000a85f:	e8 f0 fd ff ff       	call   c000a654 <VgaText::scrollScreen()>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 f0                	mov    eax,esi
c000a869:	84 c0                	test   al,al
c000a86b:	74 0c                	je     c000a879 <VgaText::incrementCursor(bool)+0x4f>
c000a86d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a871:	5a                   	pop    edx
c000a872:	5b                   	pop    ebx
c000a873:	5e                   	pop    esi
c000a874:	e9 b9 fc ff ff       	jmp    c000a532 <VgaText::updateCursor()>
c000a879:	58                   	pop    eax
c000a87a:	5b                   	pop    ebx
c000a87b:	5e                   	pop    esi
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <VgaText::decrementCursor(bool)>:
c000a87e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a886:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a889:	85 c0                	test   eax,eax
c000a88b:	74 04                	je     c000a891 <VgaText::decrementCursor(bool)+0x13>
c000a88d:	48                   	dec    eax
c000a88e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a891:	84 c9                	test   cl,cl
c000a893:	74 09                	je     c000a89e <VgaText::decrementCursor(bool)+0x20>
c000a895:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a899:	e9 94 fc ff ff       	jmp    c000a532 <VgaText::updateCursor()>
c000a89e:	c3                   	ret    
c000a89f:	90                   	nop

c000a8a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	83 ec 08             	sub    esp,0x8
c000a8a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a8b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a8b4:	3c 07                	cmp    al,0x7
c000a8b6:	75 2a                	jne    c000a8e2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a8b8:	a1 d8 64 02 c0       	mov    eax,ds:0xc00264d8
c000a8bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a8c5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a8cd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a8d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d9:	83 c4 08             	add    esp,0x8
c000a8dc:	5b                   	pop    ebx
c000a8dd:	e9 60 2f 00 00       	jmp    c000d842 <Buzzer::beep(int, int, bool)>
c000a8e2:	3c 0d                	cmp    al,0xd
c000a8e4:	75 09                	jne    c000a8ef <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a8e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8ed:	eb 2c                	jmp    c000a91b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a8ef:	3c 0a                	cmp    al,0xa
c000a8f1:	75 31                	jne    c000a924 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a8f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8fd:	8d 50 01             	lea    edx,[eax+0x1]
c000a900:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a903:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a906:	75 0f                	jne    c000a917 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a908:	83 ec 0c             	sub    esp,0xc
c000a90b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a90e:	53                   	push   ebx
c000a90f:	e8 40 fd ff ff       	call   c000a654 <VgaText::scrollScreen()>
c000a914:	83 c4 10             	add    esp,0x10
c000a917:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a91b:	83 c4 08             	add    esp,0x8
c000a91e:	5b                   	pop    ebx
c000a91f:	e9 0e fc ff ff       	jmp    c000a532 <VgaText::updateCursor()>
c000a924:	3c 08                	cmp    al,0x8
c000a926:	75 25                	jne    c000a94d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a928:	50                   	push   eax
c000a929:	50                   	push   eax
c000a92a:	6a 01                	push   0x1
c000a92c:	53                   	push   ebx
c000a92d:	e8 4c ff ff ff       	call   c000a87e <VgaText::decrementCursor(bool)>
c000a932:	5a                   	pop    edx
c000a933:	59                   	pop    ecx
c000a934:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a937:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a93a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a93d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a940:	6a 20                	push   0x20
c000a942:	53                   	push   ebx
c000a943:	e8 b2 fd ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a948:	83 c4 28             	add    esp,0x28
c000a94b:	5b                   	pop    ebx
c000a94c:	c3                   	ret    
c000a94d:	83 ec 08             	sub    esp,0x8
c000a950:	0f be c0             	movsx  eax,al
c000a953:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a956:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a959:	51                   	push   ecx
c000a95a:	52                   	push   edx
c000a95b:	50                   	push   eax
c000a95c:	53                   	push   ebx
c000a95d:	e8 98 fd ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a962:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a966:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a96e:	83 c4 28             	add    esp,0x28
c000a971:	5b                   	pop    ebx
c000a972:	e9 b3 fe ff ff       	jmp    c000a82a <VgaText::incrementCursor(bool)>
c000a977:	90                   	nop

c000a978 <VgaText::doUpdate()>:
c000a978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a97c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a97f:	85 c0                	test   eax,eax
c000a981:	74 02                	je     c000a985 <VgaText::doUpdate()+0xd>
c000a983:	ff e0                	jmp    eax
c000a985:	c3                   	ret    

c000a986 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a986:	55                   	push   ebp
c000a987:	31 ed                	xor    ebp,ebp
c000a989:	57                   	push   edi
c000a98a:	56                   	push   esi
c000a98b:	53                   	push   ebx
c000a98c:	83 ec 1c             	sub    esp,0x1c
c000a98f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a993:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a998:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a99f:	50                   	push   eax
c000a9a0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 97 fc ff ff       	call   c000a642 <VgaText::combineColours(unsigned char, unsigned char)>
c000a9ab:	59                   	pop    ecx
c000a9ac:	0f b6 c0             	movzx  eax,al
c000a9af:	5e                   	pop    esi
c000a9b0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9b5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a9b9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9c0:	0f b7 f6             	movzx  esi,si
c000a9c3:	01 f6                	add    esi,esi
c000a9c5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9c8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a9cb:	84 c0                	test   al,al
c000a9cd:	0f 84 fd 00 00 00    	je     c000aad0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000a9d3:	3c 0d                	cmp    al,0xd
c000a9d5:	75 0c                	jne    c000a9e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000a9d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9de:	e9 e7 00 00 00       	jmp    c000aaca <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000a9e3:	3c 0a                	cmp    al,0xa
c000a9e5:	75 47                	jne    c000aa2e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000a9e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9f1:	8d 48 01             	lea    ecx,[eax+0x1]
c000a9f4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a9f7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a9fa:	75 0f                	jne    c000aa0b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000a9fc:	83 ec 0c             	sub    esp,0xc
c000a9ff:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa02:	53                   	push   ebx
c000aa03:	e8 4c fc ff ff       	call   c000a654 <VgaText::scrollScreen()>
c000aa08:	83 c4 10             	add    esp,0x10
c000aa0b:	83 ec 0c             	sub    esp,0xc
c000aa0e:	31 ed                	xor    ebp,ebp
c000aa10:	53                   	push   ebx
c000aa11:	e8 1c fb ff ff       	call   c000a532 <VgaText::updateCursor()>
c000aa16:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa1b:	83 c4 10             	add    esp,0x10
c000aa1e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa21:	0f b7 f6             	movzx  esi,si
c000aa24:	01 f6                	add    esi,esi
c000aa26:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa29:	e9 9c 00 00 00       	jmp    c000aaca <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa2e:	3c 08                	cmp    al,0x8
c000aa30:	75 35                	jne    c000aa67 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa32:	56                   	push   esi
c000aa33:	56                   	push   esi
c000aa34:	6a 01                	push   0x1
c000aa36:	53                   	push   ebx
c000aa37:	e8 42 fe ff ff       	call   c000a87e <VgaText::decrementCursor(bool)>
c000aa3c:	58                   	pop    eax
c000aa3d:	5a                   	pop    edx
c000aa3e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa44:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa47:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa4a:	6a 20                	push   0x20
c000aa4c:	53                   	push   ebx
c000aa4d:	e8 a8 fc ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa57:	83 c4 20             	add    esp,0x20
c000aa5a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa5d:	0f b7 f6             	movzx  esi,si
c000aa60:	01 f6                	add    esi,esi
c000aa62:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa65:	eb 63                	jmp    c000aaca <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa67:	51                   	push   ecx
c000aa68:	51                   	push   ecx
c000aa69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6d:	50                   	push   eax
c000aa6e:	e8 75 fc ff ff       	call   c000a6e8 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	66 89 06             	mov    WORD PTR [esi],ax
c000aa79:	39 1d 24 64 02 c0    	cmp    DWORD PTR ds:0xc0026424,ebx
c000aa7f:	75 21                	jne    c000aaa2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aa81:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 1a                	je     c000aaa2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aa88:	52                   	push   edx
c000aa89:	52                   	push   edx
c000aa8a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa8d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa98:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aa9b:	51                   	push   ecx
c000aa9c:	53                   	push   ebx
c000aa9d:	ff d0                	call   eax
c000aa9f:	83 c4 20             	add    esp,0x20
c000aaa2:	83 c6 02             	add    esi,0x2
c000aaa5:	50                   	push   eax
c000aaa6:	50                   	push   eax
c000aaa7:	6a 00                	push   0x0
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 7b fd ff ff       	call   c000a82a <VgaText::incrementCursor(bool)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aab6:	75 0d                	jne    c000aac5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000aab8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aabd:	0f b7 f6             	movzx  esi,si
c000aac0:	01 f6                	add    esi,esi
c000aac2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aac5:	bd 01 00 00 00       	mov    ebp,0x1
c000aaca:	47                   	inc    edi
c000aacb:	e9 f8 fe ff ff       	jmp    c000a9c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000aad0:	83 ec 0c             	sub    esp,0xc
c000aad3:	53                   	push   ebx
c000aad4:	e8 59 fa ff ff       	call   c000a532 <VgaText::updateCursor()>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	89 e8                	mov    eax,ebp
c000aade:	84 c0                	test   al,al
c000aae0:	74 0c                	je     c000aaee <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000aae2:	83 ec 0c             	sub    esp,0xc
c000aae5:	53                   	push   ebx
c000aae6:	e8 8d fe ff ff       	call   c000a978 <VgaText::doUpdate()>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aaf5:	83 c4 1c             	add    esp,0x1c
c000aaf8:	5b                   	pop    ebx
c000aaf9:	5e                   	pop    esi
c000aafa:	5f                   	pop    edi
c000aafb:	5d                   	pop    ebp
c000aafc:	c3                   	ret    
c000aafd:	90                   	nop

c000aafe <VgaText::clearScreen()>:
c000aafe:	57                   	push   edi
c000aaff:	56                   	push   esi
c000ab00:	31 f6                	xor    esi,esi
c000ab02:	53                   	push   ebx
c000ab03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab07:	52                   	push   edx
c000ab08:	6a 00                	push   0x0
c000ab0a:	6a 00                	push   0x0
c000ab0c:	53                   	push   ebx
c000ab0d:	e8 54 fc ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000ab12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ab19:	83 c4 10             	add    esp,0x10
c000ab1c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ab1f:	7e 20                	jle    c000ab41 <VgaText::clearScreen()+0x43>
c000ab21:	31 ff                	xor    edi,edi
c000ab23:	50                   	push   eax
c000ab24:	50                   	push   eax
c000ab25:	56                   	push   esi
c000ab26:	57                   	push   edi
c000ab27:	47                   	inc    edi
c000ab28:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab2e:	6a 20                	push   0x20
c000ab30:	53                   	push   ebx
c000ab31:	e8 c4 fb ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab36:	83 c4 20             	add    esp,0x20
c000ab39:	83 ff 50             	cmp    edi,0x50
c000ab3c:	75 e5                	jne    c000ab23 <VgaText::clearScreen()+0x25>
c000ab3e:	46                   	inc    esi
c000ab3f:	eb db                	jmp    c000ab1c <VgaText::clearScreen()+0x1e>
c000ab41:	83 ec 0c             	sub    esp,0xc
c000ab44:	53                   	push   ebx
c000ab45:	e8 2e fe ff ff       	call   c000a978 <VgaText::doUpdate()>
c000ab4a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	5b                   	pop    ebx
c000ab55:	5e                   	pop    esi
c000ab56:	5f                   	pop    edi
c000ab57:	c3                   	ret    

c000ab58 <VgaText::putchar(char)>:
c000ab58:	56                   	push   esi
c000ab59:	53                   	push   ebx
c000ab5a:	83 ec 14             	sub    esp,0x14
c000ab5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ab61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ab65:	3c 5b                	cmp    al,0x5b
c000ab67:	75 18                	jne    c000ab81 <VgaText::putchar(char)+0x29>
c000ab69:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ab6d:	74 1f                	je     c000ab8e <VgaText::putchar(char)+0x36>
c000ab6f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ab75:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ab7c:	e9 bd 00 00 00       	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ab81:	3c 1b                	cmp    al,0x1b
c000ab83:	75 09                	jne    c000ab8e <VgaText::putchar(char)+0x36>
c000ab85:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ab89:	e9 b0 00 00 00       	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ab8e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ab91:	84 c9                	test   cl,cl
c000ab93:	0f 84 92 00 00 00    	je     c000ac2b <VgaText::putchar(char)+0xd3>
c000ab99:	8d 50 c0             	lea    edx,[eax-0x40]
c000ab9c:	80 fa 3e             	cmp    dl,0x3e
c000ab9f:	77 76                	ja     c000ac17 <VgaText::putchar(char)+0xbf>
c000aba1:	3c 6d                	cmp    al,0x6d
c000aba3:	75 47                	jne    c000abec <VgaText::putchar(char)+0x94>
c000aba5:	31 f6                	xor    esi,esi
c000aba7:	31 d2                	xor    edx,edx
c000aba9:	31 c0                	xor    eax,eax
c000abab:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000abae:	7e 2d                	jle    c000abdd <VgaText::putchar(char)+0x85>
c000abb0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000abb5:	80 fa 3b             	cmp    dl,0x3b
c000abb8:	75 17                	jne    c000abd1 <VgaText::putchar(char)+0x79>
c000abba:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000abbe:	50                   	push   eax
c000abbf:	53                   	push   ebx
c000abc0:	e8 83 f9 ff ff       	call   c000a548 <VgaText::doANSI_SGR(int)>
c000abc5:	59                   	pop    ecx
c000abc6:	31 d2                	xor    edx,edx
c000abc8:	58                   	pop    eax
c000abc9:	31 c0                	xor    eax,eax
c000abcb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000abcf:	eb 09                	jmp    c000abda <VgaText::putchar(char)+0x82>
c000abd1:	6b c0 0a             	imul   eax,eax,0xa
c000abd4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000abd8:	88 ca                	mov    dl,cl
c000abda:	46                   	inc    esi
c000abdb:	eb ce                	jmp    c000abab <VgaText::putchar(char)+0x53>
c000abdd:	84 d2                	test   dl,dl
c000abdf:	74 2e                	je     c000ac0f <VgaText::putchar(char)+0xb7>
c000abe1:	50                   	push   eax
c000abe2:	53                   	push   ebx
c000abe3:	e8 60 f9 ff ff       	call   c000a548 <VgaText::doANSI_SGR(int)>
c000abe8:	58                   	pop    eax
c000abe9:	5a                   	pop    edx
c000abea:	eb 23                	jmp    c000ac0f <VgaText::putchar(char)+0xb7>
c000abec:	3c 4a                	cmp    al,0x4a
c000abee:	75 1f                	jne    c000ac0f <VgaText::putchar(char)+0xb7>
c000abf0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000abf4:	75 19                	jne    c000ac0f <VgaText::putchar(char)+0xb7>
c000abf6:	83 ec 0c             	sub    esp,0xc
c000abf9:	53                   	push   ebx
c000abfa:	e8 ff fe ff ff       	call   c000aafe <VgaText::clearScreen()>
c000abff:	83 c4 0c             	add    esp,0xc
c000ac02:	6a 00                	push   0x0
c000ac04:	6a 00                	push   0x0
c000ac06:	53                   	push   ebx
c000ac07:	e8 5a fb ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ac15:	eb 27                	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ac17:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ac1a:	83 fa 0e             	cmp    edx,0xe
c000ac1d:	7f 1f                	jg     c000ac3e <VgaText::putchar(char)+0xe6>
c000ac1f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac22:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac25:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac29:	eb 13                	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ac2b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac2e:	0f be c0             	movsx  eax,al
c000ac31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac34:	50                   	push   eax
c000ac35:	53                   	push   ebx
c000ac36:	e8 65 fc ff ff       	call   c000a8a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac3b:	83 c4 10             	add    esp,0x10
c000ac3e:	83 c4 14             	add    esp,0x14
c000ac41:	5b                   	pop    ebx
c000ac42:	5e                   	pop    esi
c000ac43:	c3                   	ret    

c000ac44 <VgaText::putx(unsigned int)>:
c000ac44:	57                   	push   edi
c000ac45:	b9 11 00 00 00       	mov    ecx,0x11
c000ac4a:	56                   	push   esi
c000ac4b:	be 92 29 02 c0       	mov    esi,0xc0022992
c000ac50:	53                   	push   ebx
c000ac51:	83 ec 20             	sub    esp,0x20
c000ac54:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ac58:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ac5c:	fc                   	cld    
c000ac5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac5f:	be 08 00 00 00       	mov    esi,0x8
c000ac64:	50                   	push   eax
c000ac65:	50                   	push   eax
c000ac66:	89 d8                	mov    eax,ebx
c000ac68:	c1 e3 04             	shl    ebx,0x4
c000ac6b:	c1 e8 1c             	shr    eax,0x1c
c000ac6e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ac73:	50                   	push   eax
c000ac74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac78:	e8 db fe ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000ac7d:	83 c4 10             	add    esp,0x10
c000ac80:	4e                   	dec    esi
c000ac81:	75 e1                	jne    c000ac64 <VgaText::putx(unsigned int)+0x20>
c000ac83:	83 c4 20             	add    esp,0x20
c000ac86:	5b                   	pop    ebx
c000ac87:	5e                   	pop    esi
c000ac88:	5f                   	pop    edi
c000ac89:	c3                   	ret    

c000ac8a <VgaText::puts(char const*)>:
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 08             	sub    esp,0x8
c000ac8e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ac92:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac95:	84 c0                	test   al,al
c000ac97:	74 12                	je     c000acab <VgaText::puts(char const*)+0x21>
c000ac99:	43                   	inc    ebx
c000ac9a:	51                   	push   ecx
c000ac9b:	51                   	push   ecx
c000ac9c:	50                   	push   eax
c000ac9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca1:	e8 b2 fe ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000aca6:	83 c4 10             	add    esp,0x10
c000aca9:	eb e7                	jmp    c000ac92 <VgaText::puts(char const*)+0x8>
c000acab:	83 c4 08             	add    esp,0x8
c000acae:	5b                   	pop    ebx
c000acaf:	c3                   	ret    

c000acb0 <VgaText::VgaText(char const*)>:
c000acb0:	57                   	push   edi
c000acb1:	56                   	push   esi
c000acb2:	53                   	push   ebx
c000acb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acb7:	83 ec 08             	sub    esp,0x8
c000acba:	6a 00                	push   0x0
c000acbc:	50                   	push   eax
c000acbd:	e8 48 05 00 00       	call   c000b20a <UnixFile::UnixFile(int)>
c000acc2:	83 c4 10             	add    esp,0x10
c000acc5:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000acca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acce:	89 10                	mov    DWORD PTR [eax],edx
c000acd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000acdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acdf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ace6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acea:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000acee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000acf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acfa:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad05:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ad0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad10:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ad17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad26:	8d 50 60             	lea    edx,[eax+0x60]
c000ad29:	bb 00 64 02 c0       	mov    ebx,0xc0026400
c000ad2e:	b8 08 00 00 00       	mov    eax,0x8
c000ad33:	fc                   	cld    
c000ad34:	89 d7                	mov    edi,edx
c000ad36:	89 de                	mov    esi,ebx
c000ad38:	89 c1                	mov    ecx,eax
c000ad3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad40:	05 82 00 00 00       	add    eax,0x82
c000ad45:	83 ec 08             	sub    esp,0x8
c000ad48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad4c:	50                   	push   eax
c000ad4d:	e8 ee 59 ff ff       	call   c0000740 <strcpy>
c000ad52:	83 c4 10             	add    esp,0x10
c000ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad59:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ad60:	83 ec 0c             	sub    esp,0xc
c000ad63:	6a 01                	push   0x1
c000ad65:	e8 e3 08 00 00       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000ad6a:	83 c4 10             	add    esp,0x10
c000ad6d:	89 c2                	mov    edx,eax
c000ad6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad76:	8b 1d d0 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d0
c000ad7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad83:	89 c6                	mov    esi,eax
c000ad85:	e8 35 f0 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000ad8a:	68 05 0c 00 00       	push   0xc05
c000ad8f:	56                   	push   esi
c000ad90:	50                   	push   eax
c000ad91:	53                   	push   ebx
c000ad92:	e8 5d 0f 00 00       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ada1:	83 ec 04             	sub    esp,0x4
c000ada4:	68 00 0f 00 00       	push   0xf00
c000ada9:	6a 00                	push   0x0
c000adab:	50                   	push   eax
c000adac:	e8 d3 58 ff ff       	call   c0000684 <memset>
c000adb1:	83 c4 10             	add    esp,0x10
c000adb4:	83 ec 04             	sub    esp,0x4
c000adb7:	6a 00                	push   0x0
c000adb9:	6a 07                	push   0x7
c000adbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adbf:	e8 18 f8 ff ff       	call   c000a5dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000adc4:	83 c4 10             	add    esp,0x10
c000adc7:	83 ec 04             	sub    esp,0x4
c000adca:	6a 00                	push   0x0
c000adcc:	6a 00                	push   0x0
c000adce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000add2:	e8 8f f9 ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	83 ec 0c             	sub    esp,0xc
c000addd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ade1:	e8 18 fd ff ff       	call   c000aafe <VgaText::clearScreen()>
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aded:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000adf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf5:	05 02 01 00 00       	add    eax,0x102
c000adfa:	83 ec 04             	sub    esp,0x4
c000adfd:	68 96 00 00 00       	push   0x96
c000ae02:	6a 00                	push   0x0
c000ae04:	50                   	push   eax
c000ae05:	e8 7a 58 ff ff       	call   c0000684 <memset>
c000ae0a:	83 c4 10             	add    esp,0x10
c000ae0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae11:	05 98 01 00 00       	add    eax,0x198
c000ae16:	83 ec 04             	sub    esp,0x4
c000ae19:	68 2c 01 00 00       	push   0x12c
c000ae1e:	6a 00                	push   0x0
c000ae20:	50                   	push   eax
c000ae21:	e8 5e 58 ff ff       	call   c0000684 <memset>
c000ae26:	83 c4 10             	add    esp,0x10
c000ae29:	90                   	nop
c000ae2a:	5b                   	pop    ebx
c000ae2b:	5e                   	pop    esi
c000ae2c:	5f                   	pop    edi
c000ae2d:	c3                   	ret    

c000ae2e <VgaText::receiveKey(unsigned char)>:
c000ae2e:	55                   	push   ebp
c000ae2f:	57                   	push   edi
c000ae30:	56                   	push   esi
c000ae31:	53                   	push   ebx
c000ae32:	83 ec 1c             	sub    esp,0x1c
c000ae35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae3d:	84 db                	test   bl,bl
c000ae3f:	0f 84 c9 00 00 00    	je     c000af0e <VgaText::receiveKey(unsigned char)+0xe0>
c000ae45:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae4b:	80 fb 08             	cmp    bl,0x8
c000ae4e:	75 2c                	jne    c000ae7c <VgaText::receiveKey(unsigned char)+0x4e>
c000ae50:	83 ec 0c             	sub    esp,0xc
c000ae53:	57                   	push   edi
c000ae54:	e8 47 58 ff ff       	call   c00006a0 <strlen>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	85 c0                	test   eax,eax
c000ae5e:	74 41                	je     c000aea1 <VgaText::receiveKey(unsigned char)+0x73>
c000ae60:	50                   	push   eax
c000ae61:	50                   	push   eax
c000ae62:	6a 08                	push   0x8
c000ae64:	56                   	push   esi
c000ae65:	e8 ee fc ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000ae6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ae6d:	e8 2e 58 ff ff       	call   c00006a0 <strlen>
c000ae72:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000ae7a:	eb 22                	jmp    c000ae9e <VgaText::receiveKey(unsigned char)+0x70>
c000ae7c:	0f be c3             	movsx  eax,bl
c000ae7f:	52                   	push   edx
c000ae80:	52                   	push   edx
c000ae81:	50                   	push   eax
c000ae82:	56                   	push   esi
c000ae83:	e8 d0 fc ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000ae88:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ae8c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae91:	59                   	pop    ecx
c000ae92:	5d                   	pop    ebp
c000ae93:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ae97:	50                   	push   eax
c000ae98:	57                   	push   edi
c000ae99:	e8 e2 59 ff ff       	call   c0000880 <strcat>
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000aea8:	75 05                	jne    c000aeaf <VgaText::receiveKey(unsigned char)+0x81>
c000aeaa:	80 fb 0a             	cmp    bl,0xa
c000aead:	75 53                	jne    c000af02 <VgaText::receiveKey(unsigned char)+0xd4>
c000aeaf:	83 ec 0c             	sub    esp,0xc
c000aeb2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000aeb8:	53                   	push   ebx
c000aeb9:	e8 e2 57 ff ff       	call   c00006a0 <strlen>
c000aebe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aec1:	89 c5                	mov    ebp,eax
c000aec3:	e8 d8 57 ff ff       	call   c00006a0 <strlen>
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000aecf:	3d 2c 01 00 00       	cmp    eax,0x12c
c000aed4:	76 10                	jbe    c000aee6 <VgaText::receiveKey(unsigned char)+0xb8>
c000aed6:	83 ec 0c             	sub    esp,0xc
c000aed9:	68 a3 29 02 c0       	push   0xc00229a3
c000aede:	e8 06 94 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	50                   	push   eax
c000aee7:	50                   	push   eax
c000aee8:	57                   	push   edi
c000aee9:	53                   	push   ebx
c000aeea:	e8 91 59 ff ff       	call   c0000880 <strcat>
c000aeef:	83 c4 0c             	add    esp,0xc
c000aef2:	68 96 00 00 00       	push   0x96
c000aef7:	6a 00                	push   0x0
c000aef9:	57                   	push   edi
c000aefa:	e8 85 57 ff ff       	call   c0000684 <memset>
c000aeff:	83 c4 10             	add    esp,0x10
c000af02:	83 ec 0c             	sub    esp,0xc
c000af05:	56                   	push   esi
c000af06:	e8 6d fa ff ff       	call   c000a978 <VgaText::doUpdate()>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 c4 1c             	add    esp,0x1c
c000af11:	5b                   	pop    ebx
c000af12:	5e                   	pop    esi
c000af13:	5f                   	pop    edi
c000af14:	5d                   	pop    ebp
c000af15:	c3                   	ret    

c000af16 <VgaText::write(unsigned long long, void*, int*)>:
c000af16:	55                   	push   ebp
c000af17:	57                   	push   edi
c000af18:	56                   	push   esi
c000af19:	53                   	push   ebx
c000af1a:	83 ec 0c             	sub    esp,0xc
c000af1d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af21:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af29:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af30:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af33:	39 eb                	cmp    ebx,ebp
c000af35:	74 13                	je     c000af4a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af37:	43                   	inc    ebx
c000af38:	50                   	push   eax
c000af39:	50                   	push   eax
c000af3a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af3e:	50                   	push   eax
c000af3f:	56                   	push   esi
c000af40:	e8 13 fc ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000af45:	83 c4 10             	add    esp,0x10
c000af48:	eb e9                	jmp    c000af33 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af4a:	83 ec 0c             	sub    esp,0xc
c000af4d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000af54:	56                   	push   esi
c000af55:	e8 1e fa ff ff       	call   c000a978 <VgaText::doUpdate()>
c000af5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af5e:	89 38                	mov    DWORD PTR [eax],edi
c000af60:	83 c4 1c             	add    esp,0x1c
c000af63:	31 c0                	xor    eax,eax
c000af65:	5b                   	pop    ebx
c000af66:	5e                   	pop    esi
c000af67:	5f                   	pop    edi
c000af68:	5d                   	pop    ebp
c000af69:	c3                   	ret    

c000af6a <newTerminal(char*)>:
c000af6a:	83 ec 28             	sub    esp,0x28
c000af6d:	68 c4 02 00 00       	push   0x2c4
c000af72:	e8 4c ea ff ff       	call   c00099c3 <malloc>
c000af77:	5a                   	pop    edx
c000af78:	59                   	pop    ecx
c000af79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000af7d:	50                   	push   eax
c000af7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af82:	e8 29 fd ff ff       	call   c000acb0 <VgaText::VgaText(char const*)>
c000af87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af8b:	83 c4 2c             	add    esp,0x2c
c000af8e:	c3                   	ret    
c000af8f:	90                   	nop

c000af90 <TSS::TSS()>:
c000af90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af9b:	90                   	nop
c000af9c:	c3                   	ret    
c000af9d:	90                   	nop
c000af9e:	66 90                	xchg   ax,ax

c000afa0 <TSS::setESP(unsigned long)>:
c000afa0:	55                   	push   ebp
c000afa1:	89 e5                	mov    ebp,esp
c000afa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000afa9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000afac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000afaf:	90                   	nop
c000afb0:	5d                   	pop    ebp
c000afb1:	c3                   	ret    
c000afb2:	66 90                	xchg   ax,ax

c000afb4 <TSS::flush()>:
c000afb4:	55                   	push   ebp
c000afb5:	89 e5                	mov    ebp,esp
c000afb7:	83 ec 10             	sub    esp,0x10
c000afba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000afbf:	83 c8 03             	or     eax,0x3
c000afc2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000afc6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000afca:	66 89 d0             	mov    ax,dx
c000afcd:	0f 00 d8             	ltr    ax
c000afd0:	90                   	nop
c000afd1:	c9                   	leave  
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <TSS::setup(unsigned long, unsigned long)>:
c000afd4:	55                   	push   ebp
c000afd5:	89 e5                	mov    ebp,esp
c000afd7:	83 ec 18             	sub    esp,0x18
c000afda:	83 ec 0c             	sub    esp,0xc
c000afdd:	6a 68                	push   0x68
c000afdf:	e8 df e9 ff ff       	call   c00099c3 <malloc>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	89 c2                	mov    edx,eax
c000afe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000afef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aff5:	83 ec 04             	sub    esp,0x4
c000aff8:	6a 68                	push   0x68
c000affa:	6a 00                	push   0x0
c000affc:	50                   	push   eax
c000affd:	e8 82 56 ff ff       	call   c0000684 <memset>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b00b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b017:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b01d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b023:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b026:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b02c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b02f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b03b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b047:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b053:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b05f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b077:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b07a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b083:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b086:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b099:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09c:	0f 20 da             	mov    edx,cr3
c000b09f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b0a2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b0a5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b0a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ae:	83 ec 08             	sub    esp,0x8
c000b0b1:	50                   	push   eax
c000b0b2:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0b5:	50                   	push   eax
c000b0b6:	e8 65 e1 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b0bb:	83 c4 10             	add    esp,0x10
c000b0be:	83 ec 08             	sub    esp,0x8
c000b0c1:	6a 68                	push   0x68
c000b0c3:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0c6:	50                   	push   eax
c000b0c7:	e8 70 e1 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b0d3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b0d6:	83 e0 0f             	and    eax,0xf
c000b0d9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b0dc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b0df:	83 c8 40             	or     eax,0x40
c000b0e2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b0e5:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000b0ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b0f0:	05 78 01 00 00       	add    eax,0x178
c000b0f5:	83 ec 04             	sub    esp,0x4
c000b0f8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b0fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b0fe:	50                   	push   eax
c000b0ff:	e8 6c e1 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	89 c2                	mov    edx,eax
c000b109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10c:	89 10                	mov    DWORD PTR [eax],edx
c000b10e:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000b113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b119:	05 78 01 00 00       	add    eax,0x178
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	50                   	push   eax
c000b122:	e8 73 e1 ff ff       	call   c000929a <GDT::flush()>
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b12d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b12f:	c9                   	leave  
c000b130:	c3                   	ret    
c000b131:	90                   	nop

c000b132 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b13a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b142:	75 08                	jne    c000b14c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b144:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b14a:	eb 38                	jmp    c000b184 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b14c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b151:	75 17                	jne    c000b16a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b158:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b15b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b161:	8b 10                	mov    edx,DWORD PTR [eax]
c000b163:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b167:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b16a:	89 c1                	mov    ecx,eax
c000b16c:	83 e1 fd             	and    ecx,0xfffffffd
c000b16f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b175:	74 cd                	je     c000b144 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b177:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b17c:	83 e0 ef             	and    eax,0xffffffef
c000b17f:	83 f8 08             	cmp    eax,0x8
c000b182:	76 c0                	jbe    c000b144 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b184:	31 c0                	xor    eax,eax
c000b186:	c3                   	ret    
c000b187:	90                   	nop

c000b188 <ReservedFilename::isAtty()>:
c000b188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b18c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b18f:	31 c0                	xor    eax,eax
c000b191:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b197:	74 09                	je     c000b1a2 <ReservedFilename::isAtty()+0x1a>
c000b199:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b19f:	0f 94 c0             	sete   al
c000b1a2:	c3                   	ret    
c000b1a3:	90                   	nop

c000b1a4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b1a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1b3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b1b8:	75 08                	jne    c000b1c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b1ba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b1c0:	eb 3d                	jmp    c000b1ff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b1c2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1c7:	75 17                	jne    c000b1e0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b1c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b1d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1dd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b1e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b1e5:	75 04                	jne    c000b1eb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b1e7:	89 0a                	mov    DWORD PTR [edx],ecx
c000b1e9:	eb 14                	jmp    c000b1ff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b1eb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b1f0:	74 c8                	je     c000b1ba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b1f2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1f7:	83 e0 ef             	and    eax,0xffffffef
c000b1fa:	83 f8 08             	cmp    eax,0x8
c000b1fd:	76 bb                	jbe    c000b1ba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b1ff:	31 c0                	xor    eax,eax
c000b201:	c3                   	ret    

c000b202 <UnixFile::getFileDescriptor()>:
c000b202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b209:	c3                   	ret    

c000b20a <UnixFile::UnixFile(int)>:
c000b20a:	53                   	push   ebx
c000b20b:	83 ec 28             	sub    esp,0x28
c000b20e:	ba c0 2a 02 c0       	mov    edx,0xc0022ac0
c000b213:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b217:	89 10                	mov    DWORD PTR [eax],edx
c000b219:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b221:	0f 8f 8c 01 00 00    	jg     c000b3b3 <UnixFile::UnixFile(int)+0x1a9>
c000b227:	a1 a0 57 02 c0       	mov    eax,ds:0xc00257a0
c000b22c:	8d 50 01             	lea    edx,[eax+0x1]
c000b22f:	89 15 a0 57 02 c0    	mov    DWORD PTR ds:0xc00257a0,edx
c000b235:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b239:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b23c:	83 ec 08             	sub    esp,0x8
c000b23f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b243:	68 b8 64 02 c0       	push   0xc00264b8
c000b248:	e8 7f 5f 01 00       	call   c00211cc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	a0 b4 64 02 c0       	mov    al,ds:0xc00264b4
c000b255:	83 f0 01             	xor    eax,0x1
c000b258:	84 c0                	test   al,al
c000b25a:	0f 84 54 01 00 00    	je     c000b3b4 <UnixFile::UnixFile(int)+0x1aa>
c000b260:	c6 05 b4 64 02 c0 01 	mov    BYTE PTR ds:0xc00264b4,0x1
c000b267:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b276:	e8 48 e7 ff ff       	call   c00099c3 <malloc>
c000b27b:	83 c4 10             	add    esp,0x10
c000b27e:	89 c3                	mov    ebx,eax
c000b280:	83 ec 08             	sub    esp,0x8
c000b283:	68 03 ff ff 0f       	push   0xfffff03
c000b288:	53                   	push   ebx
c000b289:	e8 2c 01 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b28e:	83 c4 10             	add    esp,0x10
c000b291:	89 1d ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,ebx
c000b297:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b29f:	83 ec 0c             	sub    esp,0xc
c000b2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2a6:	e8 18 e7 ff ff       	call   c00099c3 <malloc>
c000b2ab:	83 c4 10             	add    esp,0x10
c000b2ae:	89 c3                	mov    ebx,eax
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	68 01 ff ff 0f       	push   0xfffff01
c000b2b8:	53                   	push   ebx
c000b2b9:	e8 fc 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 1d b0 64 02 c0    	mov    DWORD PTR ds:0xc00264b0,ebx
c000b2c7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b2d6:	e8 e8 e6 ff ff       	call   c00099c3 <malloc>
c000b2db:	83 c4 10             	add    esp,0x10
c000b2de:	89 c3                	mov    ebx,eax
c000b2e0:	83 ec 08             	sub    esp,0x8
c000b2e3:	68 00 ff ff 0f       	push   0xfffff00
c000b2e8:	53                   	push   ebx
c000b2e9:	e8 cc 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b2ee:	83 c4 10             	add    esp,0x10
c000b2f1:	89 1d a4 64 02 c0    	mov    DWORD PTR ds:0xc00264a4,ebx
c000b2f7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b2ff:	83 ec 0c             	sub    esp,0xc
c000b302:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b306:	e8 b8 e6 ff ff       	call   c00099c3 <malloc>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	89 c3                	mov    ebx,eax
c000b310:	83 ec 08             	sub    esp,0x8
c000b313:	68 02 ff ff 0f       	push   0xfffff02
c000b318:	53                   	push   ebx
c000b319:	e8 9c 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 1d a8 64 02 c0    	mov    DWORD PTR ds:0xc00264a8,ebx
c000b327:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b32f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b334:	7f 7e                	jg     c000b3b4 <UnixFile::UnixFile(int)+0x1aa>
c000b336:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b33e:	83 ec 0c             	sub    esp,0xc
c000b341:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b345:	e8 79 e6 ff ff       	call   c00099c3 <malloc>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	89 c3                	mov    ebx,eax
c000b34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b353:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b358:	83 ec 08             	sub    esp,0x8
c000b35b:	50                   	push   eax
c000b35c:	53                   	push   ebx
c000b35d:	e8 58 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b369:	89 1c 85 80 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b80],ebx
c000b370:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b378:	83 ec 0c             	sub    esp,0xc
c000b37b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b37f:	e8 3f e6 ff ff       	call   c00099c3 <malloc>
c000b384:	83 c4 10             	add    esp,0x10
c000b387:	89 c3                	mov    ebx,eax
c000b389:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b38d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b392:	83 ec 08             	sub    esp,0x8
c000b395:	50                   	push   eax
c000b396:	53                   	push   ebx
c000b397:	e8 1e 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3a3:	89 1c 85 40 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9bc0],ebx
c000b3aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b3ae:	e9 7c ff ff ff       	jmp    c000b32f <UnixFile::UnixFile(int)+0x125>
c000b3b3:	90                   	nop
c000b3b4:	83 c4 28             	add    esp,0x28
c000b3b7:	5b                   	pop    ebx
c000b3b8:	c3                   	ret    
c000b3b9:	90                   	nop

c000b3ba <ReservedFilename::ReservedFilename(int)>:
c000b3ba:	83 ec 0c             	sub    esp,0xc
c000b3bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c1:	83 ec 08             	sub    esp,0x8
c000b3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3c8:	50                   	push   eax
c000b3c9:	e8 3c fe ff ff       	call   c000b20a <UnixFile::UnixFile(int)>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	ba dc 2a 02 c0       	mov    edx,0xc0022adc
c000b3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3da:	89 10                	mov    DWORD PTR [eax],edx
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b3e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3e7:	90                   	nop
c000b3e8:	83 c4 0c             	add    esp,0xc
c000b3eb:	c3                   	ret    

c000b3ec <UnixFile::~UnixFile()>:
c000b3ec:	83 ec 1c             	sub    esp,0x1c
c000b3ef:	ba c0 2a 02 c0       	mov    edx,0xc0022ac0
c000b3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f8:	89 10                	mov    DWORD PTR [eax],edx
c000b3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b401:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b406:	7f 73                	jg     c000b47b <UnixFile::~UnixFile()+0x8f>
c000b408:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	68 b8 64 02 c0       	push   0xc00264b8
c000b418:	e8 83 5e 01 00       	call   c00212a0 <LinkedList<UnixFile>::getFirstElement()>
c000b41d:	83 c4 10             	add    esp,0x10
c000b420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b424:	83 ec 0c             	sub    esp,0xc
c000b427:	68 b8 64 02 c0       	push   0xc00264b8
c000b42c:	e8 77 5e 01 00       	call   c00212a8 <LinkedList<UnixFile>::removeFirst()>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b438:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b43c:	74 40                	je     c000b47e <UnixFile::~UnixFile()+0x92>
c000b43e:	83 ec 08             	sub    esp,0x8
c000b441:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b445:	68 b8 64 02 c0       	push   0xc00264b8
c000b44a:	e8 7d 5d 01 00       	call   c00211cc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b456:	8d 50 01             	lea    edx,[eax+0x1]
c000b459:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b45d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b462:	0f 94 c0             	sete   al
c000b465:	84 c0                	test   al,al
c000b467:	74 a7                	je     c000b410 <UnixFile::~UnixFile()+0x24>
c000b469:	83 ec 0c             	sub    esp,0xc
c000b46c:	68 98 2a 02 c0       	push   0xc0022a98
c000b471:	e8 73 8e 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000b476:	83 c4 10             	add    esp,0x10
c000b479:	eb 95                	jmp    c000b410 <UnixFile::~UnixFile()+0x24>
c000b47b:	90                   	nop
c000b47c:	eb 01                	jmp    c000b47f <UnixFile::~UnixFile()+0x93>
c000b47e:	90                   	nop
c000b47f:	90                   	nop
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	c3                   	ret    

c000b484 <UnixFile::~UnixFile()>:
c000b484:	83 ec 0c             	sub    esp,0xc
c000b487:	83 ec 0c             	sub    esp,0xc
c000b48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48e:	e8 59 ff ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	83 ec 08             	sub    esp,0x8
c000b499:	6a 0c                	push   0xc
c000b49b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49f:	e8 a3 14 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000b4a4:	83 c4 10             	add    esp,0x10
c000b4a7:	83 c4 0c             	add    esp,0xc
c000b4aa:	c3                   	ret    
c000b4ab:	90                   	nop

c000b4ac <ReservedFilename::~ReservedFilename()>:
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	ba dc 2a 02 c0       	mov    edx,0xc0022adc
c000b4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b8:	89 10                	mov    DWORD PTR [eax],edx
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	83 ec 0c             	sub    esp,0xc
c000b4c1:	50                   	push   eax
c000b4c2:	e8 25 ff ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	90                   	nop
c000b4cb:	83 c4 0c             	add    esp,0xc
c000b4ce:	c3                   	ret    
c000b4cf:	90                   	nop

c000b4d0 <ReservedFilename::~ReservedFilename()>:
c000b4d0:	83 ec 0c             	sub    esp,0xc
c000b4d3:	83 ec 0c             	sub    esp,0xc
c000b4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4da:	e8 cd ff ff ff       	call   c000b4ac <ReservedFilename::~ReservedFilename()>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	6a 0c                	push   0xc
c000b4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4eb:	e8 57 14 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000b4f0:	83 c4 10             	add    esp,0x10
c000b4f3:	83 c4 0c             	add    esp,0xc
c000b4f6:	c3                   	ret    

c000b4f7 <getFromFileDescriptor(int)>:
c000b4f7:	53                   	push   ebx
c000b4f8:	83 ec 08             	sub    esp,0x8
c000b4fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4ff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b505:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b50b:	7f 2c                	jg     c000b539 <getFromFileDescriptor(int)+0x42>
c000b50d:	83 ec 0c             	sub    esp,0xc
c000b510:	68 b8 64 02 c0       	push   0xc00264b8
c000b515:	e8 86 5d 01 00       	call   c00212a0 <LinkedList<UnixFile>::getFirstElement()>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	85 c0                	test   eax,eax
c000b51f:	75 04                	jne    c000b525 <getFromFileDescriptor(int)+0x2e>
c000b521:	31 c0                	xor    eax,eax
c000b523:	eb 6e                	jmp    c000b593 <getFromFileDescriptor(int)+0x9c>
c000b525:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b528:	74 69                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b52a:	52                   	push   edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	68 b8 64 02 c0       	push   0xc00264b8
c000b532:	e8 13 5e 01 00       	call   c002134a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b537:	eb e1                	jmp    c000b51a <getFromFileDescriptor(int)+0x23>
c000b539:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000b53e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b544:	74 4d                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b546:	a1 b0 64 02 c0       	mov    eax,ds:0xc00264b0
c000b54b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b551:	74 40                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b553:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000b558:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b55e:	74 33                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b560:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000b565:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b56b:	74 26                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b56d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b573:	83 f8 08             	cmp    eax,0x8
c000b576:	77 09                	ja     c000b581 <getFromFileDescriptor(int)+0x8a>
c000b578:	8b 04 85 80 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b80]
c000b57f:	eb 12                	jmp    c000b593 <getFromFileDescriptor(int)+0x9c>
c000b581:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b587:	83 fb 08             	cmp    ebx,0x8
c000b58a:	77 95                	ja     c000b521 <getFromFileDescriptor(int)+0x2a>
c000b58c:	8b 04 9d 40 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9bc0]
c000b593:	83 c4 08             	add    esp,0x8
c000b596:	5b                   	pop    ebx
c000b597:	c3                   	ret    

c000b598 <__static_initialization_and_destruction_0(int, int)>:
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b5a0:	75 34                	jne    c000b5d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b5aa:	75 2a                	jne    c000b5d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	68 b8 64 02 c0       	push   0xc00264b8
c000b5b4:	e8 d1 5b 01 00       	call   c002118a <LinkedList<UnixFile>::LinkedList()>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	83 ec 04             	sub    esp,0x4
c000b5bf:	68 c8 55 02 c0       	push   0xc00255c8
c000b5c4:	68 b8 64 02 c0       	push   0xc00264b8
c000b5c9:	68 88 11 02 c0       	push   0xc0021188
c000b5ce:	e8 ee 12 00 00       	call   c000c8c1 <__cxa_atexit>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	90                   	nop
c000b5d7:	83 c4 0c             	add    esp,0xc
c000b5da:	c3                   	ret    

c000b5db <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b5db:	83 ec 0c             	sub    esp,0xc
c000b5de:	83 ec 08             	sub    esp,0x8
c000b5e1:	68 ff ff 00 00       	push   0xffff
c000b5e6:	6a 01                	push   0x1
c000b5e8:	e8 ab ff ff ff       	call   c000b598 <__static_initialization_and_destruction_0(int, int)>
c000b5ed:	83 c4 10             	add    esp,0x10
c000b5f0:	83 c4 0c             	add    esp,0xc
c000b5f3:	c3                   	ret    

c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b5f4:	53                   	push   ebx
c000b5f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b603:	89 c8                	mov    eax,ecx
c000b605:	d1 e8                	shr    eax,1
c000b607:	03 05 a8 57 02 c0    	add    eax,DWORD PTR ds:0xc00257a8
c000b60d:	83 e1 01             	and    ecx,0x1
c000b610:	8a 10                	mov    dl,BYTE PTR [eax]
c000b612:	75 09                	jne    c000b61d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b614:	83 e2 f0             	and    edx,0xfffffff0
c000b617:	09 da                	or     edx,ebx
c000b619:	88 10                	mov    BYTE PTR [eax],dl
c000b61b:	5b                   	pop    ebx
c000b61c:	c3                   	ret    
c000b61d:	c1 e3 04             	shl    ebx,0x4
c000b620:	83 e2 0f             	and    edx,0xf
c000b623:	09 da                	or     edx,ebx
c000b625:	88 10                	mov    BYTE PTR [eax],dl
c000b627:	5b                   	pop    ebx
c000b628:	c3                   	ret    

c000b629 <Virt::getPageState(unsigned long)>:
c000b629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b62d:	8b 0d a8 57 02 c0    	mov    ecx,DWORD PTR ds:0xc00257a8
c000b633:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b639:	89 d0                	mov    eax,edx
c000b63b:	d1 e8                	shr    eax,1
c000b63d:	83 e2 01             	and    edx,0x1
c000b640:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b643:	75 04                	jne    c000b649 <Virt::getPageState(unsigned long)+0x20>
c000b645:	83 e0 0f             	and    eax,0xf
c000b648:	c3                   	ret    
c000b649:	c0 e8 04             	shr    al,0x4
c000b64c:	c3                   	ret    

c000b64d <Virt::allocateKernelVirtualPages(int)>:
c000b64d:	55                   	push   ebp
c000b64e:	31 ed                	xor    ebp,ebp
c000b650:	57                   	push   edi
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	31 db                	xor    ebx,ebx
c000b655:	83 ec 1c             	sub    esp,0x1c
c000b658:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b65c:	8b 3d a4 57 02 c0    	mov    edi,DWORD PTR ds:0xc00257a4
c000b662:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b667:	57                   	push   edi
c000b668:	e8 bc ff ff ff       	call   c000b629 <Virt::getPageState(unsigned long)>
c000b66d:	5a                   	pop    edx
c000b66e:	84 c0                	test   al,al
c000b670:	75 3a                	jne    c000b6ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b672:	85 db                	test   ebx,ebx
c000b674:	75 02                	jne    c000b678 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b676:	89 fd                	mov    ebp,edi
c000b678:	43                   	inc    ebx
c000b679:	39 f3                	cmp    ebx,esi
c000b67b:	74 5a                	je     c000b6d7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b67d:	47                   	inc    edi
c000b67e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b684:	76 31                	jbe    c000b6b7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b686:	c7 05 a4 57 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00257a4,0xc8000
c000b690:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b695:	75 28                	jne    c000b6bf <Virt::allocateKernelVirtualPages(int)+0x72>
c000b697:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b69c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b6a1:	57                   	push   edi
c000b6a2:	e8 82 ff ff ff       	call   c000b629 <Virt::getPageState(unsigned long)>
c000b6a7:	5a                   	pop    edx
c000b6a8:	84 c0                	test   al,al
c000b6aa:	74 c6                	je     c000b672 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b6ac:	31 db                	xor    ebx,ebx
c000b6ae:	47                   	inc    edi
c000b6af:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6b5:	77 cf                	ja     c000b686 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b6b7:	89 3d a4 57 02 c0    	mov    DWORD PTR ds:0xc00257a4,edi
c000b6bd:	eb a8                	jmp    c000b667 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b6bf:	83 ec 0c             	sub    esp,0xc
c000b6c2:	68 f0 2a 02 c0       	push   0xc0022af0
c000b6c7:	e8 1d 8c 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000b6cc:	8b 3d a4 57 02 c0    	mov    edi,DWORD PTR ds:0xc00257a4
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	eb 90                	jmp    c000b667 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b6d7:	89 2d a4 57 02 c0    	mov    DWORD PTR ds:0xc00257a4,ebp
c000b6dd:	4b                   	dec    ebx
c000b6de:	74 5f                	je     c000b73f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b6e0:	85 f6                	test   esi,esi
c000b6e2:	74 3d                	je     c000b721 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b6e4:	89 e8                	mov    eax,ebp
c000b6e6:	31 db                	xor    ebx,ebx
c000b6e8:	8d 7e ff             	lea    edi,[esi-0x1]
c000b6eb:	eb 14                	jmp    c000b701 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b6ed:	6a 01                	push   0x1
c000b6ef:	43                   	inc    ebx
c000b6f0:	50                   	push   eax
c000b6f1:	e8 fe fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b6f6:	58                   	pop    eax
c000b6f7:	39 f3                	cmp    ebx,esi
c000b6f9:	5a                   	pop    edx
c000b6fa:	74 25                	je     c000b721 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b6fc:	a1 a4 57 02 c0       	mov    eax,ds:0xc00257a4
c000b701:	8d 50 01             	lea    edx,[eax+0x1]
c000b704:	85 db                	test   ebx,ebx
c000b706:	89 15 a4 57 02 c0    	mov    DWORD PTR ds:0xc00257a4,edx
c000b70c:	74 20                	je     c000b72e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b70e:	39 df                	cmp    edi,ebx
c000b710:	75 db                	jne    c000b6ed <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b712:	6a 03                	push   0x3
c000b714:	43                   	inc    ebx
c000b715:	50                   	push   eax
c000b716:	e8 d9 fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b71b:	59                   	pop    ecx
c000b71c:	39 f3                	cmp    ebx,esi
c000b71e:	58                   	pop    eax
c000b71f:	75 db                	jne    c000b6fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b721:	83 c4 1c             	add    esp,0x1c
c000b724:	89 e8                	mov    eax,ebp
c000b726:	5b                   	pop    ebx
c000b727:	c1 e0 0c             	shl    eax,0xc
c000b72a:	5e                   	pop    esi
c000b72b:	5f                   	pop    edi
c000b72c:	5d                   	pop    ebp
c000b72d:	c3                   	ret    
c000b72e:	6a 02                	push   0x2
c000b730:	bb 01 00 00 00       	mov    ebx,0x1
c000b735:	50                   	push   eax
c000b736:	e8 b9 fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b73b:	58                   	pop    eax
c000b73c:	5a                   	pop    edx
c000b73d:	eb bd                	jmp    c000b6fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b73f:	6a 04                	push   0x4
c000b741:	8d 45 01             	lea    eax,[ebp+0x1]
c000b744:	55                   	push   ebp
c000b745:	a3 a4 57 02 c0       	mov    ds:0xc00257a4,eax
c000b74a:	e8 a5 fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b74f:	59                   	pop    ecx
c000b750:	89 e8                	mov    eax,ebp
c000b752:	5b                   	pop    ebx
c000b753:	c1 e0 0c             	shl    eax,0xc
c000b756:	83 c4 1c             	add    esp,0x1c
c000b759:	5b                   	pop    ebx
c000b75a:	5e                   	pop    esi
c000b75b:	5f                   	pop    edi
c000b75c:	5d                   	pop    ebp
c000b75d:	c3                   	ret    

c000b75e <Virt::freeSwapfilePage(unsigned long)>:
c000b75e:	53                   	push   ebx
c000b75f:	8b 15 cc 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264cc
c000b765:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b769:	b8 01 00 00 00       	mov    eax,0x1
c000b76e:	89 cb                	mov    ebx,ecx
c000b770:	d3 e0                	shl    eax,cl
c000b772:	c1 eb 05             	shr    ebx,0x5
c000b775:	f7 d0                	not    eax
c000b777:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b77a:	5b                   	pop    ebx
c000b77b:	c3                   	ret    

c000b77c <Virt::swapIDToSector(unsigned long)>:
c000b77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b780:	0f af 05 ac 57 02 c0 	imul   eax,DWORD PTR ds:0xc00257ac
c000b787:	03 05 b4 57 02 c0    	add    eax,DWORD PTR ds:0xc00257b4
c000b78d:	c3                   	ret    

c000b78e <Virt::allocateSwapfilePage()>:
c000b78e:	55                   	push   ebp
c000b78f:	31 d2                	xor    edx,edx
c000b791:	57                   	push   edi
c000b792:	56                   	push   esi
c000b793:	53                   	push   ebx
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	8b 0d ac 57 02 c0    	mov    ecx,DWORD PTR ds:0xc00257ac
c000b79d:	a1 b0 57 02 c0       	mov    eax,ds:0xc00257b0
c000b7a2:	f7 f1                	div    ecx
c000b7a4:	39 0d b0 57 02 c0    	cmp    DWORD PTR ds:0xc00257b0,ecx
c000b7aa:	72 2d                	jb     c000b7d9 <Virt::allocateSwapfilePage()+0x4b>
c000b7ac:	8b 35 cc 64 02 c0    	mov    esi,DWORD PTR ds:0xc00264cc
c000b7b2:	8b 16                	mov    edx,DWORD PTR [esi]
c000b7b4:	f6 c2 01             	test   dl,0x1
c000b7b7:	74 3c                	je     c000b7f5 <Virt::allocateSwapfilePage()+0x67>
c000b7b9:	31 c9                	xor    ecx,ecx
c000b7bb:	bf 01 00 00 00       	mov    edi,0x1
c000b7c0:	eb 12                	jmp    c000b7d4 <Virt::allocateSwapfilePage()+0x46>
c000b7c2:	89 fd                	mov    ebp,edi
c000b7c4:	89 ca                	mov    edx,ecx
c000b7c6:	d3 e5                	shl    ebp,cl
c000b7c8:	c1 ea 05             	shr    edx,0x5
c000b7cb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b7ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b7d0:	85 ea                	test   edx,ebp
c000b7d2:	74 2a                	je     c000b7fe <Virt::allocateSwapfilePage()+0x70>
c000b7d4:	41                   	inc    ecx
c000b7d5:	39 c8                	cmp    eax,ecx
c000b7d7:	77 e9                	ja     c000b7c2 <Virt::allocateSwapfilePage()+0x34>
c000b7d9:	83 ec 0c             	sub    esp,0xc
c000b7dc:	68 d0 2c 02 c0       	push   0xc0022cd0
c000b7e1:	e8 03 8b 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000b7e6:	83 c4 10             	add    esp,0x10
c000b7e9:	31 c9                	xor    ecx,ecx
c000b7eb:	83 c4 0c             	add    esp,0xc
c000b7ee:	89 c8                	mov    eax,ecx
c000b7f0:	5b                   	pop    ebx
c000b7f1:	5e                   	pop    esi
c000b7f2:	5f                   	pop    edi
c000b7f3:	5d                   	pop    ebp
c000b7f4:	c3                   	ret    
c000b7f5:	89 f3                	mov    ebx,esi
c000b7f7:	bd 01 00 00 00       	mov    ebp,0x1
c000b7fc:	31 c9                	xor    ecx,ecx
c000b7fe:	09 ea                	or     edx,ebp
c000b800:	89 c8                	mov    eax,ecx
c000b802:	89 13                	mov    DWORD PTR [ebx],edx
c000b804:	83 c4 0c             	add    esp,0xc
c000b807:	5b                   	pop    ebx
c000b808:	5e                   	pop    esi
c000b809:	5f                   	pop    edi
c000b80a:	5d                   	pop    ebp
c000b80b:	c3                   	ret    

c000b80c <Virt::virtualMemorySetup()>:
c000b80c:	53                   	push   ebx
c000b80d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b812:	6a 0f                	push   0xf
c000b814:	53                   	push   ebx
c000b815:	43                   	inc    ebx
c000b816:	e8 d9 fd ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b81b:	58                   	pop    eax
c000b81c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b822:	5a                   	pop    edx
c000b823:	75 ed                	jne    c000b812 <Virt::virtualMemorySetup()+0x6>
c000b825:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b82a:	6a 00                	push   0x0
c000b82c:	53                   	push   ebx
c000b82d:	43                   	inc    ebx
c000b82e:	e8 c1 fd ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b833:	59                   	pop    ecx
c000b834:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b83a:	58                   	pop    eax
c000b83b:	75 ed                	jne    c000b82a <Virt::virtualMemorySetup()+0x1e>
c000b83d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b842:	6a 0f                	push   0xf
c000b844:	53                   	push   ebx
c000b845:	43                   	inc    ebx
c000b846:	e8 a9 fd ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b84b:	58                   	pop    eax
c000b84c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b852:	5a                   	pop    edx
c000b853:	75 ed                	jne    c000b842 <Virt::virtualMemorySetup()+0x36>
c000b855:	5b                   	pop    ebx
c000b856:	c3                   	ret    

c000b857 <Virt::setupPageSwapping(int)>:
c000b857:	53                   	push   ebx
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b85f:	a1 68 69 02 c0       	mov    eax,ds:0xc0026968
c000b864:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b86a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b86c:	53                   	push   ebx
c000b86d:	c1 e3 0b             	shl    ebx,0xb
c000b870:	68 e7 2c 02 c0       	push   0xc0022ce7
c000b875:	50                   	push   eax
c000b876:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b879:	89 1d b0 57 02 c0    	mov    DWORD PTR ds:0xc00257b0,ebx
c000b87f:	c6 05 b8 57 02 c0 43 	mov    BYTE PTR ds:0xc00257b8,0x43
c000b886:	c1 eb 08             	shr    ebx,0x8
c000b889:	a3 b4 57 02 c0       	mov    ds:0xc00257b4,eax
c000b88e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b891:	c7 05 ac 57 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00257ac,0x8
c000b89b:	e8 23 e1 ff ff       	call   c00099c3 <malloc>
c000b8a0:	83 c4 0c             	add    esp,0xc
c000b8a3:	89 c1                	mov    ecx,eax
c000b8a5:	a3 cc 64 02 c0       	mov    ds:0xc00264cc,eax
c000b8aa:	31 d2                	xor    edx,edx
c000b8ac:	a1 b0 57 02 c0       	mov    eax,ds:0xc00257b0
c000b8b1:	f7 35 ac 57 02 c0    	div    DWORD PTR ds:0xc00257ac
c000b8b7:	c1 e8 05             	shr    eax,0x5
c000b8ba:	50                   	push   eax
c000b8bb:	6a 00                	push   0x0
c000b8bd:	51                   	push   ecx
c000b8be:	e8 c1 4d ff ff       	call   c0000684 <memset>
c000b8c3:	83 c4 18             	add    esp,0x18
c000b8c6:	5b                   	pop    ebx
c000b8c7:	c3                   	ret    

c000b8c8 <VAS::VAS()>:
c000b8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e2:	a3 d0 64 02 c0       	mov    ds:0xc00264d0,eax
c000b8e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8eb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b8ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fa:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b901:	90                   	nop
c000b902:	c3                   	ret    
c000b903:	90                   	nop

c000b904 <VAS::VAS(VAS*)>:
c000b904:	83 ec 0c             	sub    esp,0xc
c000b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b90b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b916:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b91d:	83 ec 0c             	sub    esp,0xc
c000b920:	68 10 2b 02 c0       	push   0xc0022b10
c000b925:	e8 bf 89 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000b92a:	83 c4 10             	add    esp,0x10
c000b92d:	90                   	nop
c000b92e:	83 c4 0c             	add    esp,0xc
c000b931:	c3                   	ret    

c000b932 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b936:	89 c2                	mov    edx,eax
c000b938:	c1 e8 0a             	shr    eax,0xa
c000b93b:	c1 ea 16             	shr    edx,0x16
c000b93e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b943:	19 c9                	sbb    ecx,ecx
c000b945:	c1 e2 0c             	shl    edx,0xc
c000b948:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b94e:	25 fc 0f 00 00       	and    eax,0xffc
c000b953:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b95a:	01 d0                	add    eax,edx
c000b95c:	c3                   	ret    
c000b95d:	90                   	nop

c000b95e <VAS::getPageTableEntry(unsigned long)>:
c000b95e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b962:	89 ca                	mov    edx,ecx
c000b964:	c1 e9 0a             	shr    ecx,0xa
c000b967:	c1 ea 16             	shr    edx,0x16
c000b96a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b970:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b976:	c1 e0 0c             	shl    eax,0xc
c000b979:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b97c:	c3                   	ret    

c000b97d <Virt::freeKernelVirtualPages(unsigned long)>:
c000b97d:	57                   	push   edi
c000b97e:	56                   	push   esi
c000b97f:	be 01 00 00 00       	mov    esi,0x1
c000b984:	53                   	push   ebx
c000b985:	83 ec 10             	sub    esp,0x10
c000b988:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b98c:	c1 eb 0c             	shr    ebx,0xc
c000b98f:	eb 3f                	jmp    c000b9d0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b991:	83 ec 08             	sub    esp,0x8
c000b994:	57                   	push   edi
c000b995:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c000b99b:	e8 be ff ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9a9:	f6 c4 04             	test   ah,0x4
c000b9ac:	75 5f                	jne    c000ba0d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b9ae:	80 fa 04             	cmp    dl,0x4
c000b9b1:	74 78                	je     c000ba2b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b9b3:	80 fa 02             	cmp    dl,0x2
c000b9b6:	0f 84 88 00 00 00    	je     c000ba44 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b9bc:	80 fa 03             	cmp    dl,0x3
c000b9bf:	0f 84 ad 00 00 00    	je     c000ba72 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b9c5:	fe ca                	dec    dl
c000b9c7:	0f 84 92 00 00 00    	je     c000ba5f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b9cd:	43                   	inc    ebx
c000b9ce:	31 f6                	xor    esi,esi
c000b9d0:	53                   	push   ebx
c000b9d1:	89 df                	mov    edi,ebx
c000b9d3:	e8 51 fc ff ff       	call   c000b629 <Virt::getPageState(unsigned long)>
c000b9d8:	c1 e7 0c             	shl    edi,0xc
c000b9db:	59                   	pop    ecx
c000b9dc:	84 c0                	test   al,al
c000b9de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b9e2:	75 ad                	jne    c000b991 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b9e4:	83 ec 0c             	sub    esp,0xc
c000b9e7:	68 fe 2c 02 c0       	push   0xc0022cfe
c000b9ec:	e8 f8 88 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000b9f1:	58                   	pop    eax
c000b9f2:	5a                   	pop    edx
c000b9f3:	57                   	push   edi
c000b9f4:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c000b9fa:	e8 5f ff ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba04:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba08:	f6 c4 04             	test   ah,0x4
c000ba0b:	74 c0                	je     c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba0d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000ba11:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 2f e3 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba26:	80 fa 04             	cmp    dl,0x4
c000ba29:	75 88                	jne    c000b9b3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba2b:	89 f0                	mov    eax,esi
c000ba2d:	84 c0                	test   al,al
c000ba2f:	75 47                	jne    c000ba78 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba31:	c7 44 24 20 34 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022b34
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	5b                   	pop    ebx
c000ba3d:	5e                   	pop    esi
c000ba3e:	5f                   	pop    edi
c000ba3f:	e9 a5 88 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c000ba44:	89 f0                	mov    eax,esi
c000ba46:	84 c0                	test   al,al
c000ba48:	75 15                	jne    c000ba5f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	68 1a 2d 02 c0       	push   0xc0022d1a
c000ba52:	e8 92 88 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000ba57:	83 c4 10             	add    esp,0x10
c000ba5a:	e9 6e ff ff ff       	jmp    c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba5f:	83 ec 08             	sub    esp,0x8
c000ba62:	6a 00                	push   0x0
c000ba64:	53                   	push   ebx
c000ba65:	e8 8a fb ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	e9 5b ff ff ff       	jmp    c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba72:	89 f0                	mov    eax,esi
c000ba74:	84 c0                	test   al,al
c000ba76:	75 15                	jne    c000ba8d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000ba78:	83 ec 08             	sub    esp,0x8
c000ba7b:	6a 00                	push   0x0
c000ba7d:	53                   	push   ebx
c000ba7e:	e8 71 fb ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	5b                   	pop    ebx
c000ba8a:	5e                   	pop    esi
c000ba8b:	5f                   	pop    edi
c000ba8c:	c3                   	ret    
c000ba8d:	c7 44 24 20 36 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d36
c000ba95:	83 c4 10             	add    esp,0x10
c000ba98:	5b                   	pop    ebx
c000ba99:	5e                   	pop    esi
c000ba9a:	5f                   	pop    edi
c000ba9b:	e9 49 88 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>

c000baa0 <VAS::freeAllocatedPages(unsigned long)>:
c000baa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000baa8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000baac:	74 09                	je     c000bab7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000baae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bab2:	e9 c6 fe ff ff       	jmp    c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000bab7:	c7 44 24 04 58 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b58
c000babf:	e9 64 0f 00 00       	jmp    c000ca28 <Dbg::kprintf(char const*, ...)>

c000bac4 <VAS::virtualToPhysical(unsigned long)>:
c000bac4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bac8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bacc:	e8 8d fe ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000bad1:	5a                   	pop    edx
c000bad2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bad4:	59                   	pop    ecx
c000bad5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bada:	c3                   	ret    
c000badb:	90                   	nop

c000badc <VAS::reflagRange(unsigned long, int, int, int)>:
c000badc:	55                   	push   ebp
c000badd:	57                   	push   edi
c000bade:	56                   	push   esi
c000badf:	53                   	push   ebx
c000bae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bae4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bae8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000baec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000baf0:	85 db                	test   ebx,ebx
c000baf2:	7e 22                	jle    c000bb16 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000baf4:	c1 e3 0c             	shl    ebx,0xc
c000baf7:	01 f3                	add    ebx,esi
c000baf9:	56                   	push   esi
c000bafa:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb00:	55                   	push   ebp
c000bb01:	e8 58 fe ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000bb06:	5a                   	pop    edx
c000bb07:	59                   	pop    ecx
c000bb08:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb0a:	21 f9                	and    ecx,edi
c000bb0c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bb10:	39 f3                	cmp    ebx,esi
c000bb12:	89 08                	mov    DWORD PTR [eax],ecx
c000bb14:	75 e3                	jne    c000baf9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bb16:	5b                   	pop    ebx
c000bb17:	5e                   	pop    esi
c000bb18:	5f                   	pop    edi
c000bb19:	5d                   	pop    ebp
c000bb1a:	c3                   	ret    
c000bb1b:	90                   	nop

c000bb1c <VAS::setToWriteCombining(unsigned long, int)>:
c000bb1c:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000bb21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb27:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb2e:	75 01                	jne    c000bb31 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb30:	c3                   	ret    
c000bb31:	68 80 00 00 00       	push   0x80
c000bb36:	6a ff                	push   0xffffffff
c000bb38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb44:	e8 93 ff ff ff       	call   c000badc <VAS::reflagRange(unsigned long, int, int, int)>
c000bb49:	83 c4 14             	add    esp,0x14
c000bb4c:	c3                   	ret    
c000bb4d:	90                   	nop

c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>:
c000bb4e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bb53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb57:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb5e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bb61:	19 c0                	sbb    eax,eax
c000bb63:	83 ca 03             	or     edx,0x3
c000bb66:	83 e0 fc             	and    eax,0xfffffffc
c000bb69:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bb70:	0f 20 d8             	mov    eax,cr3
c000bb73:	0f 22 d8             	mov    cr3,eax
c000bb76:	c3                   	ret    
c000bb77:	90                   	nop

c000bb78 <VAS::~VAS()>:
c000bb78:	83 ec 2c             	sub    esp,0x2c
c000bb7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bb83:	fa                   	cli    
c000bb84:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000bb89:	40                   	inc    eax
c000bb8a:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000bb8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bb99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bb9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bba3:	6a 01                	push   0x1
c000bba5:	50                   	push   eax
c000bba6:	e8 a3 ff ff ff       	call   c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>
c000bbab:	83 c4 0c             	add    esp,0xc
c000bbae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bbb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bbbe:	0f 8f d4 00 00 00    	jg     c000bc98 <VAS::~VAS()+0x120>
c000bbc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bbc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bbcf:	c1 e2 02             	shl    edx,0x2
c000bbd2:	01 d0                	add    eax,edx
c000bbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbde:	83 e0 01             	and    eax,0x1
c000bbe1:	0f 84 a8 00 00 00    	je     c000bc8f <VAS::~VAS()+0x117>
c000bbe7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bbef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bbf7:	7f 72                	jg     c000bc6b <VAS::~VAS()+0xf3>
c000bbf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bbfd:	c1 e0 0a             	shl    eax,0xa
c000bc00:	89 c2                	mov    edx,eax
c000bc02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc06:	01 d0                	add    eax,edx
c000bc08:	c1 e0 0c             	shl    eax,0xc
c000bc0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc14:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc23:	6a 01                	push   0x1
c000bc25:	50                   	push   eax
c000bc26:	e8 07 fd ff ff       	call   c000b932 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc2b:	83 c4 0c             	add    esp,0xc
c000bc2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc36:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc40:	25 01 04 00 00       	and    eax,0x401
c000bc45:	3d 01 04 00 00       	cmp    eax,0x401
c000bc4a:	75 19                	jne    c000bc65 <VAS::~VAS()+0xed>
c000bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc50:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc55:	83 ec 0c             	sub    esp,0xc
c000bc58:	50                   	push   eax
c000bc59:	e8 f0 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bc5e:	83 c4 10             	add    esp,0x10
c000bc61:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc65:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bc69:	eb 84                	jmp    c000bbef <VAS::~VAS()+0x77>
c000bc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6f:	25 00 04 00 00       	and    eax,0x400
c000bc74:	74 19                	je     c000bc8f <VAS::~VAS()+0x117>
c000bc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc7f:	83 ec 0c             	sub    esp,0xc
c000bc82:	50                   	push   eax
c000bc83:	e8 c6 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bc88:	83 c4 10             	add    esp,0x10
c000bc8b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc8f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bc93:	e9 1e ff ff ff       	jmp    c000bbb6 <VAS::~VAS()+0x3e>
c000bc98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc9f:	83 ec 0c             	sub    esp,0xc
c000bca2:	50                   	push   eax
c000bca3:	e8 d5 fc ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000bca8:	83 c4 10             	add    esp,0x10
c000bcab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcaf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bcb2:	83 ec 0c             	sub    esp,0xc
c000bcb5:	50                   	push   eax
c000bcb6:	e8 93 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bcbb:	83 c4 10             	add    esp,0x10
c000bcbe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bcc6:	c1 e0 02             	shl    eax,0x2
c000bcc9:	83 ec 08             	sub    esp,0x8
c000bccc:	50                   	push   eax
c000bccd:	68 7c 2b 02 c0       	push   0xc0022b7c
c000bcd2:	e8 51 0d 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000bcdf:	48                   	dec    eax
c000bce0:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000bce5:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000bcea:	85 c0                	test   eax,eax
c000bcec:	75 01                	jne    c000bcef <VAS::~VAS()+0x177>
c000bcee:	fb                   	sti    
c000bcef:	90                   	nop
c000bcf0:	83 c4 2c             	add    esp,0x2c
c000bcf3:	c3                   	ret    

c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bcf4:	55                   	push   ebp
c000bcf5:	57                   	push   edi
c000bcf6:	56                   	push   esi
c000bcf7:	53                   	push   ebx
c000bcf8:	83 ec 1c             	sub    esp,0x1c
c000bcfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bcff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd03:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd09:	77 08                	ja     c000bd13 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bd0b:	0f 20 d8             	mov    eax,cr3
c000bd0e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bd11:	75 47                	jne    c000bd5a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bd13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd17:	09 d8                	or     eax,ebx
c000bd19:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd1e:	75 57                	jne    c000bd77 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bd20:	89 de                	mov    esi,ebx
c000bd22:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd25:	c1 ee 16             	shr    esi,0x16
c000bd28:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd2f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd33:	74 54                	je     c000bd89 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd39:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd3f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd43:	c1 e6 0c             	shl    esi,0xc
c000bd46:	c1 eb 0a             	shr    ebx,0xa
c000bd49:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bd4f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bd52:	83 c4 1c             	add    esp,0x1c
c000bd55:	5b                   	pop    ebx
c000bd56:	5e                   	pop    esi
c000bd57:	5f                   	pop    edi
c000bd58:	5d                   	pop    ebp
c000bd59:	c3                   	ret    
c000bd5a:	83 ec 0c             	sub    esp,0xc
c000bd5d:	68 9c 2b 02 c0       	push   0xc0022b9c
c000bd62:	e8 c1 0c 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000bd67:	83 c4 10             	add    esp,0x10
c000bd6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd6e:	09 d8                	or     eax,ebx
c000bd70:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd75:	74 a9                	je     c000bd20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bd77:	83 ec 0c             	sub    esp,0xc
c000bd7a:	68 04 2c 02 c0       	push   0xc0022c04
c000bd7f:	e8 65 85 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000bd84:	83 c4 10             	add    esp,0x10
c000bd87:	eb 97                	jmp    c000bd20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bd89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd8d:	e8 2d e0 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000bd92:	83 ec 0c             	sub    esp,0xc
c000bd95:	89 c5                	mov    ebp,eax
c000bd97:	8b 0d d0 64 02 c0    	mov    ecx,DWORD PTR ds:0xc00264d0
c000bd9d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bda1:	6a 01                	push   0x1
c000bda3:	e8 a5 f8 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000bda8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bdaf:	6a 01                	push   0x1
c000bdb1:	50                   	push   eax
c000bdb2:	55                   	push   ebp
c000bdb3:	81 cd 07 04 00 00    	or     ebp,0x407
c000bdb9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bdbd:	51                   	push   ecx
c000bdbe:	e8 27 02 00 00       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bdc3:	83 c4 1c             	add    esp,0x1c
c000bdc6:	68 00 10 00 00       	push   0x1000
c000bdcb:	6a 00                	push   0x0
c000bdcd:	50                   	push   eax
c000bdce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdd2:	e8 ad 48 ff ff       	call   c0000684 <memset>
c000bdd7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bddb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bdde:	e8 9a fb ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000bde3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bde7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bdf0:	e9 40 ff ff ff       	jmp    c000bd35 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000bdf5:	90                   	nop

c000bdf6 <VAS::allocatePages(int, int)>:
c000bdf6:	55                   	push   ebp
c000bdf7:	57                   	push   edi
c000bdf8:	56                   	push   esi
c000bdf9:	53                   	push   ebx
c000bdfa:	83 ec 1c             	sub    esp,0x1c
c000bdfd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be01:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000be06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be0c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be12:	83 e0 01             	and    eax,0x1
c000be15:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000be19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000be1d:	0f 85 cc 00 00 00    	jne    c000beef <VAS::allocatePages(int, int)+0xf9>
c000be23:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be2a:	85 c0                	test   eax,eax
c000be2c:	0f 84 a1 00 00 00    	je     c000bed3 <VAS::allocatePages(int, int)+0xdd>
c000be32:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be3a:	c1 e6 0c             	shl    esi,0xc
c000be3d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be41:	85 c0                	test   eax,eax
c000be43:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be46:	7e 33                	jle    c000be7b <VAS::allocatePages(int, int)+0x85>
c000be48:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be50:	81 cd 00 04 00 00    	or     ebp,0x400
c000be56:	e8 64 df ff ff       	call   c0009dbf <Phys::allocatePage()>
c000be5b:	55                   	push   ebp
c000be5c:	53                   	push   ebx
c000be5d:	50                   	push   eax
c000be5e:	57                   	push   edi
c000be5f:	e8 90 fe ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000be64:	83 c4 10             	add    esp,0x10
c000be67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000be6c:	74 03                	je     c000be71 <VAS::allocatePages(int, int)+0x7b>
c000be6e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be71:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be77:	39 de                	cmp    esi,ebx
c000be79:	75 db                	jne    c000be56 <VAS::allocatePages(int, int)+0x60>
c000be7b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000be80:	75 12                	jne    c000be94 <VAS::allocatePages(int, int)+0x9e>
c000be82:	0f 20 d8             	mov    eax,cr3
c000be85:	0f 22 d8             	mov    cr3,eax
c000be88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8c:	83 c4 1c             	add    esp,0x1c
c000be8f:	5b                   	pop    ebx
c000be90:	5e                   	pop    esi
c000be91:	5f                   	pop    edi
c000be92:	5d                   	pop    ebp
c000be93:	c3                   	ret    
c000be94:	c1 ee 0a             	shr    esi,0xa
c000be97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be9b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bea1:	c1 eb 0a             	shr    ebx,0xa
c000bea4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000beaa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000beb0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000beb6:	39 c3                	cmp    ebx,eax
c000beb8:	77 ce                	ja     c000be88 <VAS::allocatePages(int, int)+0x92>
c000beba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bebd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bec3:	39 d8                	cmp    eax,ebx
c000bec5:	73 f3                	jae    c000beba <VAS::allocatePages(int, int)+0xc4>
c000bec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000becb:	83 c4 1c             	add    esp,0x1c
c000bece:	5b                   	pop    ebx
c000becf:	5e                   	pop    esi
c000bed0:	5f                   	pop    edi
c000bed1:	5d                   	pop    ebp
c000bed2:	c3                   	ret    
c000bed3:	83 ec 0c             	sub    esp,0xc
c000bed6:	68 28 2c 02 c0       	push   0xc0022c28
c000bedb:	e8 09 84 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000bee0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bee3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	e9 43 ff ff ff       	jmp    c000be32 <VAS::allocatePages(int, int)+0x3c>
c000beef:	83 ec 0c             	sub    esp,0xc
c000bef2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bef6:	e8 52 f7 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000befb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000beff:	83 c4 10             	add    esp,0x10
c000bf02:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf07:	0f 87 9b 00 00 00    	ja     c000bfa8 <VAS::allocatePages(int, int)+0x1b2>
c000bf0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bf11:	85 d2                	test   edx,edx
c000bf13:	7e 3c                	jle    c000bf51 <VAS::allocatePages(int, int)+0x15b>
c000bf15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bf19:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf21:	c1 e5 0c             	shl    ebp,0xc
c000bf24:	81 ce 00 04 00 00    	or     esi,0x400
c000bf2a:	01 dd                	add    ebp,ebx
c000bf2c:	e8 8e de ff ff       	call   c0009dbf <Phys::allocatePage()>
c000bf31:	56                   	push   esi
c000bf32:	53                   	push   ebx
c000bf33:	50                   	push   eax
c000bf34:	57                   	push   edi
c000bf35:	e8 ba fd ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf42:	74 03                	je     c000bf47 <VAS::allocatePages(int, int)+0x151>
c000bf44:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf47:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf4d:	39 dd                	cmp    ebp,ebx
c000bf4f:	75 db                	jne    c000bf2c <VAS::allocatePages(int, int)+0x136>
c000bf51:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf56:	0f 84 26 ff ff ff    	je     c000be82 <VAS::allocatePages(int, int)+0x8c>
c000bf5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf64:	89 d3                	mov    ebx,edx
c000bf66:	c1 e0 0c             	shl    eax,0xc
c000bf69:	c1 eb 0a             	shr    ebx,0xa
c000bf6c:	01 d0                	add    eax,edx
c000bf6e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf74:	c1 e8 0a             	shr    eax,0xa
c000bf77:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf82:	2d 00 00 40 00       	sub    eax,0x400000
c000bf87:	39 c3                	cmp    ebx,eax
c000bf89:	0f 87 f9 fe ff ff    	ja     c000be88 <VAS::allocatePages(int, int)+0x92>
c000bf8f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf92:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf98:	39 d8                	cmp    eax,ebx
c000bf9a:	73 f3                	jae    c000bf8f <VAS::allocatePages(int, int)+0x199>
c000bf9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfa0:	83 c4 1c             	add    esp,0x1c
c000bfa3:	5b                   	pop    ebx
c000bfa4:	5e                   	pop    esi
c000bfa5:	5f                   	pop    edi
c000bfa6:	5d                   	pop    ebp
c000bfa7:	c3                   	ret    
c000bfa8:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000bfad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfb3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000bfba:	0f 84 4d ff ff ff    	je     c000bf0d <VAS::allocatePages(int, int)+0x117>
c000bfc0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bfc8:	e9 40 ff ff ff       	jmp    c000bf0d <VAS::allocatePages(int, int)+0x117>
c000bfcd:	90                   	nop

c000bfce <VAS::setCPUSpecific(unsigned long)>:
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	6a 05                	push   0x5
c000bfd3:	68 00 00 40 c2       	push   0xc2400000
c000bfd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe0:	e8 0f fd ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bfe5:	83 c4 1c             	add    esp,0x1c
c000bfe8:	c3                   	ret    
c000bfe9:	90                   	nop

c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bfea:	55                   	push   ebp
c000bfeb:	57                   	push   edi
c000bfec:	56                   	push   esi
c000bfed:	53                   	push   ebx
c000bfee:	83 ec 1c             	sub    esp,0x1c
c000bff1:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000bff6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bffa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c000:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c004:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c00a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c00e:	83 e0 01             	and    eax,0x1
c000c011:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c015:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c019:	85 c0                	test   eax,eax
c000c01b:	7e 39                	jle    c000c056 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c01d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c021:	89 f3                	mov    ebx,esi
c000c023:	c1 e0 0c             	shl    eax,0xc
c000c026:	01 f0                	add    eax,esi
c000c028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c02c:	55                   	push   ebp
c000c02d:	53                   	push   ebx
c000c02e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c032:	29 f0                	sub    eax,esi
c000c034:	01 d8                	add    eax,ebx
c000c036:	50                   	push   eax
c000c037:	57                   	push   edi
c000c038:	e8 b7 fc ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c03d:	83 c4 10             	add    esp,0x10
c000c040:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c045:	74 03                	je     c000c04a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c047:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c04a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c050:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c054:	75 d6                	jne    c000c02c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c056:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c05b:	75 10                	jne    c000c06d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c05d:	0f 20 d8             	mov    eax,cr3
c000c060:	0f 22 d8             	mov    cr3,eax
c000c063:	83 c4 1c             	add    esp,0x1c
c000c066:	89 f0                	mov    eax,esi
c000c068:	5b                   	pop    ebx
c000c069:	5e                   	pop    esi
c000c06a:	5f                   	pop    edi
c000c06b:	5d                   	pop    ebp
c000c06c:	c3                   	ret    
c000c06d:	89 f3                	mov    ebx,esi
c000c06f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c073:	c1 eb 0a             	shr    ebx,0xa
c000c076:	c1 e0 0c             	shl    eax,0xc
c000c079:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c07f:	01 f0                	add    eax,esi
c000c081:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c087:	c1 e8 0a             	shr    eax,0xa
c000c08a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c08f:	2d 00 00 40 00       	sub    eax,0x400000
c000c094:	39 c3                	cmp    ebx,eax
c000c096:	77 cb                	ja     c000c063 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c098:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c09b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0a1:	39 d8                	cmp    eax,ebx
c000c0a3:	73 f3                	jae    c000c098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c0a5:	83 c4 1c             	add    esp,0x1c
c000c0a8:	89 f0                	mov    eax,esi
c000c0aa:	5b                   	pop    ebx
c000c0ab:	5e                   	pop    esi
c000c0ac:	5f                   	pop    edi
c000c0ad:	5d                   	pop    ebp
c000c0ae:	c3                   	ret    
c000c0af:	90                   	nop

c000c0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c0b0:	55                   	push   ebp
c000c0b1:	57                   	push   edi
c000c0b2:	56                   	push   esi
c000c0b3:	53                   	push   ebx
c000c0b4:	83 ec 1c             	sub    esp,0x1c
c000c0b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c0bf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c0c3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c0c7:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0cc:	75 4a                	jne    c000c118 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c0ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c0d2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0d5:	c1 eb 16             	shr    ebx,0x16
c000c0d8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c0df:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c0e3:	74 4d                	je     c000c132 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c0ed:	c1 e8 0a             	shr    eax,0xa
c000c0f0:	80 fa 01             	cmp    dl,0x1
c000c0f3:	19 d2                	sbb    edx,edx
c000c0f5:	c1 e3 0c             	shl    ebx,0xc
c000c0f8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c0fc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c102:	25 fc 0f 00 00       	and    eax,0xffc
c000c107:	01 d8                	add    eax,ebx
c000c109:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c110:	83 c4 1c             	add    esp,0x1c
c000c113:	5b                   	pop    ebx
c000c114:	5e                   	pop    esi
c000c115:	5f                   	pop    edi
c000c116:	5d                   	pop    ebp
c000c117:	c3                   	ret    
c000c118:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c11c:	83 ec 0c             	sub    esp,0xc
c000c11f:	68 54 2c 02 c0       	push   0xc0022c54
c000c124:	e8 c0 81 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000c129:	83 c4 10             	add    esp,0x10
c000c12c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c130:	eb 9c                	jmp    c000c0ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c132:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c136:	e8 84 dc ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c13b:	83 ec 0c             	sub    esp,0xc
c000c13e:	89 c5                	mov    ebp,eax
c000c140:	8b 0d d0 64 02 c0    	mov    ecx,DWORD PTR ds:0xc00264d0
c000c146:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c14a:	6a 01                	push   0x1
c000c14c:	e8 fc f4 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000c151:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c158:	6a 01                	push   0x1
c000c15a:	50                   	push   eax
c000c15b:	55                   	push   ebp
c000c15c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c162:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c166:	51                   	push   ecx
c000c167:	e8 7e fe ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c16c:	83 c4 1c             	add    esp,0x1c
c000c16f:	68 00 10 00 00       	push   0x1000
c000c174:	6a 00                	push   0x0
c000c176:	50                   	push   eax
c000c177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c17b:	e8 04 45 ff ff       	call   c0000684 <memset>
c000c180:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c184:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c187:	e8 f1 f7 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000c18c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c18f:	83 c4 10             	add    esp,0x10
c000c192:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c195:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c199:	e9 47 ff ff ff       	jmp    c000c0e5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c19e <VAS::VAS(bool)>:
c000c19e:	53                   	push   ebx
c000c19f:	83 ec 28             	sub    esp,0x28
c000c1a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c1aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1c4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c1c8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c1cb:	e8 ef db ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c1d0:	89 c2                	mov    edx,eax
c000c1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1d6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c1d9:	8b 1d d0 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d0
c000c1df:	83 ec 0c             	sub    esp,0xc
c000c1e2:	6a 01                	push   0x1
c000c1e4:	e8 64 f4 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 c2                	mov    edx,eax
c000c1ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c1f5:	83 ec 0c             	sub    esp,0xc
c000c1f8:	6a 03                	push   0x3
c000c1fa:	6a 01                	push   0x1
c000c1fc:	52                   	push   edx
c000c1fd:	50                   	push   eax
c000c1fe:	53                   	push   ebx
c000c1ff:	e8 e6 fd ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c204:	83 c4 20             	add    esp,0x20
c000c207:	89 c2                	mov    edx,eax
c000c209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c20d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c210:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c218:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c220:	7f 1c                	jg     c000c23e <VAS::VAS(bool)+0xa0>
c000c222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c226:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c229:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c22d:	c1 e2 02             	shl    edx,0x2
c000c230:	01 d0                	add    eax,edx
c000c232:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c238:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c23c:	eb da                	jmp    c000c218 <VAS::VAS(bool)+0x7a>
c000c23e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c246:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c24e:	7f 7a                	jg     c000c2ca <VAS::VAS(bool)+0x12c>
c000c250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c254:	2d 00 02 00 00       	sub    eax,0x200
c000c259:	c1 e0 0c             	shl    eax,0xc
c000c25c:	83 c8 03             	or     eax,0x3
c000c25f:	89 c2                	mov    edx,eax
c000c261:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c266:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c26c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c272:	83 e0 10             	and    eax,0x10
c000c275:	84 c0                	test   al,al
c000c277:	74 07                	je     c000c280 <VAS::VAS(bool)+0xe2>
c000c279:	b8 00 01 00 00       	mov    eax,0x100
c000c27e:	eb 05                	jmp    c000c285 <VAS::VAS(bool)+0xe7>
c000c280:	b8 00 00 00 00       	mov    eax,0x0
c000c285:	09 d0                	or     eax,edx
c000c287:	89 c1                	mov    ecx,eax
c000c289:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c290:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c294:	c1 e2 02             	shl    edx,0x2
c000c297:	01 d0                	add    eax,edx
c000c299:	89 ca                	mov    edx,ecx
c000c29b:	89 10                	mov    DWORD PTR [eax],edx
c000c29d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2a1:	2d 40 03 00 00       	sub    eax,0x340
c000c2a6:	83 f8 7f             	cmp    eax,0x7f
c000c2a9:	77 16                	ja     c000c2c1 <VAS::VAS(bool)+0x123>
c000c2ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2b6:	c1 e2 02             	shl    edx,0x2
c000c2b9:	01 d0                	add    eax,edx
c000c2bb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2c1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c2c5:	e9 7c ff ff ff       	jmp    c000c246 <VAS::VAS(bool)+0xa8>
c000c2ca:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c2cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2d5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2db:	83 e0 10             	and    eax,0x10
c000c2de:	84 c0                	test   al,al
c000c2e0:	74 07                	je     c000c2e9 <VAS::VAS(bool)+0x14b>
c000c2e2:	b8 03 41 00 00       	mov    eax,0x4103
c000c2e7:	eb 05                	jmp    c000c2ee <VAS::VAS(bool)+0x150>
c000c2e9:	b8 03 40 00 00       	mov    eax,0x4003
c000c2ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c2f2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c2f5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c2fb:	89 02                	mov    DWORD PTR [edx],eax
c000c2fd:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c308:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c30e:	83 ec 08             	sub    esp,0x8
c000c311:	50                   	push   eax
c000c312:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c316:	e8 b3 fc ff ff       	call   c000bfce <VAS::setCPUSpecific(unsigned long)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c322:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c325:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c32a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c330:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c336:	83 e0 10             	and    eax,0x10
c000c339:	84 c0                	test   al,al
c000c33b:	74 07                	je     c000c344 <VAS::VAS(bool)+0x1a6>
c000c33d:	b8 00 01 00 00       	mov    eax,0x100
c000c342:	eb 05                	jmp    c000c349 <VAS::VAS(bool)+0x1ab>
c000c344:	b8 00 00 00 00       	mov    eax,0x0
c000c349:	09 c2                	or     edx,eax
c000c34b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c34f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c352:	05 fc 0f 00 00       	add    eax,0xffc
c000c357:	83 ca 03             	or     edx,0x3
c000c35a:	89 10                	mov    DWORD PTR [eax],edx
c000c35c:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c361:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c367:	83 ec 0c             	sub    esp,0xc
c000c36a:	50                   	push   eax
c000c36b:	e8 fe 1d 00 00       	call   c000e16e <Device::getName()>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	83 ec 08             	sub    esp,0x8
c000c376:	68 50 2d 02 c0       	push   0xc0022d50
c000c37b:	50                   	push   eax
c000c37c:	e8 4b 44 ff ff       	call   c00007cc <strcmp>
c000c381:	83 c4 10             	add    esp,0x10
c000c384:	85 c0                	test   eax,eax
c000c386:	0f 94 c0             	sete   al
c000c389:	84 c0                	test   al,al
c000c38b:	0f 84 87 00 00 00    	je     c000c418 <VAS::VAS(bool)+0x27a>
c000c391:	fa                   	cli    
c000c392:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000c397:	40                   	inc    eax
c000c398:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000c39d:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c3a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3a8:	05 7c 09 00 00       	add    eax,0x97c
c000c3ad:	83 ec 0c             	sub    esp,0xc
c000c3b0:	50                   	push   eax
c000c3b1:	e8 fc d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3b6:	83 c4 10             	add    esp,0x10
c000c3b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3be:	89 c3                	mov    ebx,eax
c000c3c0:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000c3c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3cb:	05 7c 09 00 00       	add    eax,0x97c
c000c3d0:	83 ec 0c             	sub    esp,0xc
c000c3d3:	50                   	push   eax
c000c3d4:	e8 d9 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	83 ec 08             	sub    esp,0x8
c000c3df:	50                   	push   eax
c000c3e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3e4:	e8 75 f5 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c3e9:	83 c4 10             	add    esp,0x10
c000c3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3f3:	6a 11                	push   0x11
c000c3f5:	53                   	push   ebx
c000c3f6:	50                   	push   eax
c000c3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fb:	e8 f4 f8 ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000c408:	48                   	dec    eax
c000c409:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000c40e:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000c413:	85 c0                	test   eax,eax
c000c415:	75 01                	jne    c000c418 <VAS::VAS(bool)+0x27a>
c000c417:	fb                   	sti    
c000c418:	90                   	nop
c000c419:	83 c4 28             	add    esp,0x28
c000c41c:	5b                   	pop    ebx
c000c41d:	c3                   	ret    

c000c41e <VAS::evict(unsigned long)>:
c000c41e:	55                   	push   ebp
c000c41f:	57                   	push   edi
c000c420:	56                   	push   esi
c000c421:	53                   	push   ebx
c000c422:	83 ec 28             	sub    esp,0x28
c000c425:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c429:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c42d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c431:	68 5e 2d 02 c0       	push   0xc0022d5e
c000c436:	e8 ed 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c43b:	e8 4e f3 ff ff       	call   c000b78e <Virt::allocateSwapfilePage()>
c000c440:	5a                   	pop    edx
c000c441:	89 c7                	mov    edi,eax
c000c443:	59                   	pop    ecx
c000c444:	50                   	push   eax
c000c445:	68 7b 2d 02 c0       	push   0xc0022d7b
c000c44a:	e8 d9 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	8b 1d ac 57 02 c0    	mov    ebx,DWORD PTR ds:0xc00257ac
c000c458:	85 db                	test   ebx,ebx
c000c45a:	7e 3d                	jle    c000c499 <VAS::evict(unsigned long)+0x7b>
c000c45c:	89 ee                	mov    esi,ebp
c000c45e:	31 db                	xor    ebx,ebx
c000c460:	83 ec 0c             	sub    esp,0xc
c000c463:	57                   	push   edi
c000c464:	e8 13 f3 ff ff       	call   c000b77c <Virt::swapIDToSector(unsigned long)>
c000c469:	89 34 24             	mov    DWORD PTR [esp],esi
c000c46c:	01 d8                	add    eax,ebx
c000c46e:	6a 01                	push   0x1
c000c470:	31 d2                	xor    edx,edx
c000c472:	43                   	inc    ebx
c000c473:	52                   	push   edx
c000c474:	81 c6 00 02 00 00    	add    esi,0x200
c000c47a:	50                   	push   eax
c000c47b:	0f be 05 b8 57 02 c0 	movsx  eax,BYTE PTR ds:0xc00257b8
c000c482:	ff 34 85 5c 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd97a4]
c000c489:	e8 22 3d 00 00       	call   c00101b0 <LogicalDisk::write(unsigned long long, int, void*)>
c000c48e:	83 c4 20             	add    esp,0x20
c000c491:	39 1d ac 57 02 c0    	cmp    DWORD PTR ds:0xc00257ac,ebx
c000c497:	7f c7                	jg     c000c460 <VAS::evict(unsigned long)+0x42>
c000c499:	83 ec 08             	sub    esp,0x8
c000c49c:	c1 e7 0b             	shl    edi,0xb
c000c49f:	55                   	push   ebp
c000c4a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4a4:	e8 b5 f4 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c4a9:	5a                   	pop    edx
c000c4aa:	89 c6                	mov    esi,eax
c000c4ac:	59                   	pop    ecx
c000c4ad:	ff 30                	push   DWORD PTR [eax]
c000c4af:	68 8b 2d 02 c0       	push   0xc0022d8b
c000c4b4:	e8 6f 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c4b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000c4bb:	89 d3                	mov    ebx,edx
c000c4bd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c4c3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c4c9:	09 d7                	or     edi,edx
c000c4cb:	89 3e                	mov    DWORD PTR [esi],edi
c000c4cd:	5e                   	pop    esi
c000c4ce:	58                   	pop    eax
c000c4cf:	57                   	push   edi
c000c4d0:	68 a4 2d 02 c0       	push   0xc0022da4
c000c4d5:	e8 4e 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c4da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4dd:	ff 05 c8 64 02 c0    	inc    DWORD PTR ds:0xc00264c8
c000c4e3:	e8 66 d8 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000c4e8:	0f 20 d8             	mov    eax,cr3
c000c4eb:	0f 22 d8             	mov    cr3,eax
c000c4ee:	ff 35 c8 64 02 c0    	push   DWORD PTR ds:0xc00264c8
c000c4f4:	55                   	push   ebp
c000c4f5:	53                   	push   ebx
c000c4f6:	68 78 2c 02 c0       	push   0xc0022c78
c000c4fb:	e8 28 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c500:	a1 c4 64 02 c0       	mov    eax,ds:0xc00264c4
c000c505:	c7 44 24 50 bd 2d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022dbd
c000c50d:	8d 50 01             	lea    edx,[eax+0x1]
c000c510:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c514:	89 15 c4 64 02 c0    	mov    DWORD PTR ds:0xc00264c4,edx
c000c51a:	83 c4 3c             	add    esp,0x3c
c000c51d:	5b                   	pop    ebx
c000c51e:	5e                   	pop    esi
c000c51f:	5f                   	pop    edi
c000c520:	5d                   	pop    ebp
c000c521:	e9 02 05 00 00       	jmp    c000ca28 <Dbg::kprintf(char const*, ...)>

c000c526 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c526:	55                   	push   ebp
c000c527:	57                   	push   edi
c000c528:	56                   	push   esi
c000c529:	53                   	push   ebx
c000c52a:	83 ec 24             	sub    esp,0x24
c000c52d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c535:	68 ce 2d 02 c0       	push   0xc0022dce
c000c53a:	e8 e9 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c53f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c543:	58                   	pop    eax
c000c544:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c54a:	5a                   	pop    edx
c000c54b:	57                   	push   edi
c000c54c:	53                   	push   ebx
c000c54d:	e8 0c f4 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c552:	59                   	pop    ecx
c000c553:	5e                   	pop    esi
c000c554:	89 c6                	mov    esi,eax
c000c556:	ff 30                	push   DWORD PTR [eax]
c000c558:	68 e1 2d 02 c0       	push   0xc0022de1
c000c55d:	e8 c6 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	85 ff                	test   edi,edi
c000c567:	74 0a                	je     c000c573 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c569:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c56b:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c571:	74 0a                	je     c000c57d <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c573:	83 c4 1c             	add    esp,0x1c
c000c576:	31 c0                	xor    eax,eax
c000c578:	5b                   	pop    ebx
c000c579:	5e                   	pop    esi
c000c57a:	5f                   	pop    edi
c000c57b:	5d                   	pop    ebp
c000c57c:	c3                   	ret    
c000c57d:	83 ec 08             	sub    esp,0x8
c000c580:	c1 ed 0b             	shr    ebp,0xb
c000c583:	55                   	push   ebp
c000c584:	68 ef 2d 02 c0       	push   0xc0022def
c000c589:	e8 9a 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c58e:	e8 2c d8 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c593:	59                   	pop    ecx
c000c594:	5a                   	pop    edx
c000c595:	50                   	push   eax
c000c596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c59a:	68 fa 2d 02 c0       	push   0xc0022dfa
c000c59f:	e8 84 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5a8:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5aa:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c5b0:	09 d0                	or     eax,edx
c000c5b2:	0d 01 08 00 00       	or     eax,0x801
c000c5b7:	89 06                	mov    DWORD PTR [esi],eax
c000c5b9:	59                   	pop    ecx
c000c5ba:	5e                   	pop    esi
c000c5bb:	50                   	push   eax
c000c5bc:	68 0f 2e 02 c0       	push   0xc0022e0f
c000c5c1:	e8 62 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5c6:	0f 20 d8             	mov    eax,cr3
c000c5c9:	83 c4 0c             	add    esp,0xc
c000c5cc:	53                   	push   ebx
c000c5cd:	50                   	push   eax
c000c5ce:	68 27 2e 02 c0       	push   0xc0022e27
c000c5d3:	e8 50 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5d8:	c7 04 24 3f 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e3f
c000c5df:	e8 44 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5e4:	83 c4 10             	add    esp,0x10
c000c5e7:	a1 ac 57 02 c0       	mov    eax,ds:0xc00257ac
c000c5ec:	85 c0                	test   eax,eax
c000c5ee:	7e 3d                	jle    c000c62d <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c5f0:	89 fe                	mov    esi,edi
c000c5f2:	31 db                	xor    ebx,ebx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	55                   	push   ebp
c000c5f8:	e8 7f f1 ff ff       	call   c000b77c <Virt::swapIDToSector(unsigned long)>
c000c5fd:	89 34 24             	mov    DWORD PTR [esp],esi
c000c600:	01 d8                	add    eax,ebx
c000c602:	6a 01                	push   0x1
c000c604:	31 d2                	xor    edx,edx
c000c606:	43                   	inc    ebx
c000c607:	52                   	push   edx
c000c608:	81 c6 00 02 00 00    	add    esi,0x200
c000c60e:	50                   	push   eax
c000c60f:	0f be 05 b8 57 02 c0 	movsx  eax,BYTE PTR ds:0xc00257b8
c000c616:	ff 34 85 5c 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd97a4]
c000c61d:	e8 22 3b 00 00       	call   c0010144 <LogicalDisk::read(unsigned long long, int, void*)>
c000c622:	83 c4 20             	add    esp,0x20
c000c625:	39 1d ac 57 02 c0    	cmp    DWORD PTR ds:0xc00257ac,ebx
c000c62b:	7f c7                	jg     c000c5f4 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c62d:	a1 c8 64 02 c0       	mov    eax,ds:0xc00264c8
c000c632:	48                   	dec    eax
c000c633:	52                   	push   edx
c000c634:	a3 c8 64 02 c0       	mov    ds:0xc00264c8,eax
c000c639:	50                   	push   eax
c000c63a:	57                   	push   edi
c000c63b:	68 4f 2e 02 c0       	push   0xc0022e4f
c000c640:	e8 e3 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c645:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c648:	e8 11 f1 ff ff       	call   c000b75e <Virt::freeSwapfilePage(unsigned long)>
c000c64d:	c7 04 24 64 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e64
c000c654:	e8 cf 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c659:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000c65e:	83 c4 10             	add    esp,0x10
c000c661:	48                   	dec    eax
c000c662:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000c667:	85 c0                	test   eax,eax
c000c669:	75 01                	jne    c000c66c <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c66b:	fb                   	sti    
c000c66c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c670:	25 ff 0f 00 00       	and    eax,0xfff
c000c675:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c67a:	77 20                	ja     c000c69c <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c67c:	0f 20 d8             	mov    eax,cr3
c000c67f:	0f 22 d8             	mov    cr3,eax
c000c682:	83 ec 0c             	sub    esp,0xc
c000c685:	68 8a 2e 02 c0       	push   0xc0022e8a
c000c68a:	e8 99 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c68f:	83 c4 10             	add    esp,0x10
c000c692:	b0 01                	mov    al,0x1
c000c694:	83 c4 1c             	add    esp,0x1c
c000c697:	5b                   	pop    ebx
c000c698:	5e                   	pop    esi
c000c699:	5f                   	pop    edi
c000c69a:	5d                   	pop    ebp
c000c69b:	c3                   	ret    
c000c69c:	83 ec 0c             	sub    esp,0xc
c000c69f:	68 7a 2e 02 c0       	push   0xc0022e7a
c000c6a4:	e8 7f 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c6a9:	83 c4 10             	add    esp,0x10
c000c6ac:	eb ce                	jmp    c000c67c <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c6ae <VAS::scanForEviction()>:
c000c6ae:	55                   	push   ebp
c000c6af:	31 ed                	xor    ebp,ebp
c000c6b1:	57                   	push   edi
c000c6b2:	56                   	push   esi
c000c6b3:	53                   	push   ebx
c000c6b4:	83 ec 0c             	sub    esp,0xc
c000c6b7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c6bb:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c6be:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c6c4:	75 0e                	jne    c000c6d4 <VAS::scanForEviction()+0x26>
c000c6c6:	89 da                	mov    edx,ebx
c000c6c8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c6cb:	c1 ea 16             	shr    edx,0x16
c000c6ce:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c6d2:	74 4e                	je     c000c722 <VAS::scanForEviction()+0x74>
c000c6d4:	53                   	push   ebx
c000c6d5:	56                   	push   esi
c000c6d6:	e8 83 f2 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c6db:	5f                   	pop    edi
c000c6dc:	8b 38                	mov    edi,DWORD PTR [eax]
c000c6de:	5a                   	pop    edx
c000c6df:	89 fa                	mov    edx,edi
c000c6e1:	81 e2 01 08 00 00    	and    edx,0x801
c000c6e7:	81 fa 01 08 00 00    	cmp    edx,0x801
c000c6ed:	74 3e                	je     c000c72d <VAS::scanForEviction()+0x7f>
c000c6ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6f5:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c6fb:	76 2b                	jbe    c000c728 <VAS::scanForEviction()+0x7a>
c000c6fd:	45                   	inc    ebp
c000c6fe:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c705:	83 fd 04             	cmp    ebp,0x4
c000c708:	74 35                	je     c000c73f <VAS::scanForEviction()+0x91>
c000c70a:	31 db                	xor    ebx,ebx
c000c70c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c712:	75 c0                	jne    c000c6d4 <VAS::scanForEviction()+0x26>
c000c714:	89 da                	mov    edx,ebx
c000c716:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c719:	c1 ea 16             	shr    edx,0x16
c000c71c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c720:	75 b2                	jne    c000c6d4 <VAS::scanForEviction()+0x26>
c000c722:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c728:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c72b:	eb 91                	jmp    c000c6be <VAS::scanForEviction()+0x10>
c000c72d:	f7 c7 20 00 00 00    	test   edi,0x20
c000c733:	74 22                	je     c000c757 <VAS::scanForEviction()+0xa9>
c000c735:	83 e7 df             	and    edi,0xffffffdf
c000c738:	89 38                	mov    DWORD PTR [eax],edi
c000c73a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c73d:	eb b0                	jmp    c000c6ef <VAS::scanForEviction()+0x41>
c000c73f:	83 ec 0c             	sub    esp,0xc
c000c742:	68 a8 2c 02 c0       	push   0xc0022ca8
c000c747:	e8 9d 7b 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000c74c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c74f:	83 c4 10             	add    esp,0x10
c000c752:	e9 67 ff ff ff       	jmp    c000c6be <VAS::scanForEviction()+0x10>
c000c757:	83 ec 08             	sub    esp,0x8
c000c75a:	53                   	push   ebx
c000c75b:	68 98 2e 02 c0       	push   0xc0022e98
c000c760:	e8 c3 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c765:	58                   	pop    eax
c000c766:	5a                   	pop    edx
c000c767:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c76a:	56                   	push   esi
c000c76b:	e8 ae fc ff ff       	call   c000c41e <VAS::evict(unsigned long)>
c000c770:	59                   	pop    ecx
c000c771:	5b                   	pop    ebx
c000c772:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c775:	68 ac 2e 02 c0       	push   0xc0022eac
c000c77a:	e8 a9 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c77f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c786:	89 f8                	mov    eax,edi
c000c788:	83 c4 1c             	add    esp,0x1c
c000c78b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c790:	5b                   	pop    ebx
c000c791:	5e                   	pop    esi
c000c792:	5f                   	pop    edi
c000c793:	5d                   	pop    ebp
c000c794:	c3                   	ret    

c000c795 <mapVASFirstTime>:
c000c795:	55                   	push   ebp
c000c796:	57                   	push   edi
c000c797:	56                   	push   esi
c000c798:	53                   	push   ebx
c000c799:	83 ec 0c             	sub    esp,0xc
c000c79c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7a1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7a4:	4a                   	dec    edx
c000c7a5:	0f 84 fe 00 00 00    	je     c000c8a9 <mapVASFirstTime+0x114>
c000c7ab:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7ae:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7b1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7b6:	c1 e5 15             	shl    ebp,0x15
c000c7b9:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c7be:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c7c4:	29 eb                	sub    ebx,ebp
c000c7c6:	29 ef                	sub    edi,ebp
c000c7c8:	83 ec 08             	sub    esp,0x8
c000c7cb:	53                   	push   ebx
c000c7cc:	68 d8 2e 02 c0       	push   0xc0022ed8
c000c7d1:	e8 52 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c7d6:	e8 e4 d5 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c7db:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c7e2:	6a 01                	push   0x1
c000c7e4:	53                   	push   ebx
c000c7e5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c7eb:	50                   	push   eax
c000c7ec:	56                   	push   esi
c000c7ed:	e8 f8 f7 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7f2:	83 c4 20             	add    esp,0x20
c000c7f5:	39 fb                	cmp    ebx,edi
c000c7f7:	75 cf                	jne    c000c7c8 <mapVASFirstTime+0x33>
c000c7f9:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c7fe:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c803:	29 eb                	sub    ebx,ebp
c000c805:	29 ef                	sub    edi,ebp
c000c807:	83 ec 08             	sub    esp,0x8
c000c80a:	53                   	push   ebx
c000c80b:	68 f4 2e 02 c0       	push   0xc0022ef4
c000c810:	e8 13 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c815:	58                   	pop    eax
c000c816:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c81a:	5a                   	pop    edx
c000c81b:	19 c0                	sbb    eax,eax
c000c81d:	83 e0 04             	and    eax,0x4
c000c820:	05 03 04 00 00       	add    eax,0x403
c000c825:	50                   	push   eax
c000c826:	68 19 2e 02 c0       	push   0xc0022e19
c000c82b:	e8 f8 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c830:	e8 8a d5 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c835:	59                   	pop    ecx
c000c836:	89 c5                	mov    ebp,eax
c000c838:	58                   	pop    eax
c000c839:	55                   	push   ebp
c000c83a:	68 08 2f 02 c0       	push   0xc0022f08
c000c83f:	e8 e4 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c844:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c848:	19 d2                	sbb    edx,edx
c000c84a:	83 e2 04             	and    edx,0x4
c000c84d:	81 c2 03 04 00 00    	add    edx,0x403
c000c853:	89 14 24             	mov    DWORD PTR [esp],edx
c000c856:	6a 01                	push   0x1
c000c858:	53                   	push   ebx
c000c859:	55                   	push   ebp
c000c85a:	56                   	push   esi
c000c85b:	e8 8a f7 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c860:	83 c4 18             	add    esp,0x18
c000c863:	53                   	push   ebx
c000c864:	56                   	push   esi
c000c865:	e8 f4 f0 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c86a:	5a                   	pop    edx
c000c86b:	59                   	pop    ecx
c000c86c:	ff 30                	push   DWORD PTR [eax]
c000c86e:	68 24 2f 02 c0       	push   0xc0022f24
c000c873:	e8 b0 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c878:	0f 20 d8             	mov    eax,cr3
c000c87b:	83 c4 0c             	add    esp,0xc
c000c87e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c884:	56                   	push   esi
c000c885:	50                   	push   eax
c000c886:	68 27 2e 02 c0       	push   0xc0022e27
c000c88b:	e8 98 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	39 df                	cmp    edi,ebx
c000c895:	0f 85 6c ff ff ff    	jne    c000c807 <mapVASFirstTime+0x72>
c000c89b:	0f 20 d8             	mov    eax,cr3
c000c89e:	0f 22 d8             	mov    cr3,eax
c000c8a1:	83 c4 0c             	add    esp,0xc
c000c8a4:	5b                   	pop    ebx
c000c8a5:	5e                   	pop    esi
c000c8a6:	5f                   	pop    edi
c000c8a7:	5d                   	pop    ebp
c000c8a8:	c3                   	ret    
c000c8a9:	83 ec 0c             	sub    esp,0xc
c000c8ac:	68 bf 2e 02 c0       	push   0xc0022ebf
c000c8b1:	e8 72 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	83 c4 0c             	add    esp,0xc
c000c8bc:	5b                   	pop    ebx
c000c8bd:	5e                   	pop    esi
c000c8be:	5f                   	pop    edi
c000c8bf:	5d                   	pop    ebp
c000c8c0:	c3                   	ret    

c000c8c1 <__cxa_atexit>:
c000c8c1:	31 c0                	xor    eax,eax
c000c8c3:	c3                   	ret    

c000c8c4 <__cxa_finalize>:
c000c8c4:	c3                   	ret    

c000c8c5 <__stack_chk_fail>:
c000c8c5:	55                   	push   ebp
c000c8c6:	89 e5                	mov    ebp,esp
c000c8c8:	83 ec 14             	sub    esp,0x14
c000c8cb:	68 2f 2f 02 c0       	push   0xc0022f2f
c000c8d0:	e8 53 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8d5:	58                   	pop    eax
c000c8d6:	5a                   	pop    edx
c000c8d7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c8da:	68 7f 2f 02 c0       	push   0xc0022f7f
c000c8df:	e8 44 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8e4:	59                   	pop    ecx
c000c8e5:	58                   	pop    eax
c000c8e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c8ec:	68 7f 2f 02 c0       	push   0xc0022f7f
c000c8f1:	e8 32 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8f6:	5a                   	pop    edx
c000c8f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8fa:	59                   	pop    ecx
c000c8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8fd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c900:	68 7f 2f 02 c0       	push   0xc0022f7f
c000c905:	e8 1e 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c90a:	5a                   	pop    edx
c000c90b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c90e:	59                   	pop    ecx
c000c90f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c911:	8b 00                	mov    eax,DWORD PTR [eax]
c000c913:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c916:	68 7f 2f 02 c0       	push   0xc0022f7f
c000c91b:	e8 08 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c920:	c7 04 24 87 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f87
c000c927:	e8 bd 79 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000c92c:	83 c4 10             	add    esp,0x10
c000c92f:	c9                   	leave  
c000c930:	c3                   	ret    

c000c931 <__cxa_pure_virtual>:
c000c931:	83 ec 18             	sub    esp,0x18
c000c934:	68 9f 2f 02 c0       	push   0xc0022f9f
c000c939:	e8 ab 79 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000c93e:	83 c4 1c             	add    esp,0x1c
c000c941:	c3                   	ret    

c000c942 <operator new[](unsigned long)>:
c000c942:	e9 7c d0 ff ff       	jmp    c00099c3 <malloc>

c000c947 <operator delete(void*, unsigned long)>:
c000c947:	e9 97 d0 ff ff       	jmp    c00099e3 <rfree>

c000c94c <operator delete[](void*)>:
c000c94c:	e9 92 d0 ff ff       	jmp    c00099e3 <rfree>

c000c951 <operator delete[](void*, unsigned long)>:
c000c951:	e9 8d d0 ff ff       	jmp    c00099e3 <rfree>

c000c956 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c956:	55                   	push   ebp
c000c957:	b9 11 00 00 00       	mov    ecx,0x11
c000c95c:	57                   	push   edi
c000c95d:	56                   	push   esi
c000c95e:	be 92 29 02 c0       	mov    esi,0xc0022992
c000c963:	53                   	push   ebx
c000c964:	83 ec 20             	sub    esp,0x20
c000c967:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c96b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c96f:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c973:	fc                   	cld    
c000c974:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c976:	89 ee                	mov    esi,ebp
c000c978:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c97c:	eb 02                	jmp    c000c980 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c97e:	89 c6                	mov    esi,eax
c000c980:	31 d2                	xor    edx,edx
c000c982:	41                   	inc    ecx
c000c983:	89 f0                	mov    eax,esi
c000c985:	f7 f3                	div    ebx
c000c987:	39 de                	cmp    esi,ebx
c000c989:	73 f3                	jae    c000c97e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c98b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c98e:	eb 02                	jmp    c000c992 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c990:	89 c5                	mov    ebp,eax
c000c992:	31 d2                	xor    edx,edx
c000c994:	49                   	dec    ecx
c000c995:	89 e8                	mov    eax,ebp
c000c997:	f7 f3                	div    ebx
c000c999:	39 dd                	cmp    ebp,ebx
c000c99b:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c99f:	88 11                	mov    BYTE PTR [ecx],dl
c000c9a1:	73 ed                	jae    c000c990 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9a7:	83 c4 20             	add    esp,0x20
c000c9aa:	5b                   	pop    ebx
c000c9ab:	5e                   	pop    esi
c000c9ac:	5f                   	pop    edi
c000c9ad:	5d                   	pop    ebp
c000c9ae:	c3                   	ret    

c000c9af <Dbg::logc(char)>:
c000c9af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9b3:	f6 05 80 63 02 c0 10 	test   BYTE PTR ds:0xc0026380,0x10
c000c9ba:	75 12                	jne    c000c9ce <Dbg::logc(char)+0x1f>
c000c9bc:	ba fd 03 00 00       	mov    edx,0x3fd
c000c9c1:	ec                   	in     al,dx
c000c9c2:	a8 20                	test   al,0x20
c000c9c4:	74 fb                	je     c000c9c1 <Dbg::logc(char)+0x12>
c000c9c6:	ba f8 03 00 00       	mov    edx,0x3f8
c000c9cb:	88 c8                	mov    al,cl
c000c9cd:	ee                   	out    dx,al
c000c9ce:	c3                   	ret    

c000c9cf <Dbg::logs(char*)>:
c000c9cf:	53                   	push   ebx
c000c9d0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c9d4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c9d7:	84 c0                	test   al,al
c000c9d9:	74 0f                	je     c000c9ea <Dbg::logs(char*)+0x1b>
c000c9db:	50                   	push   eax
c000c9dc:	43                   	inc    ebx
c000c9dd:	e8 cd ff ff ff       	call   c000c9af <Dbg::logc(char)>
c000c9e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c9e5:	5a                   	pop    edx
c000c9e6:	84 c0                	test   al,al
c000c9e8:	75 f1                	jne    c000c9db <Dbg::logs(char*)+0xc>
c000c9ea:	5b                   	pop    ebx
c000c9eb:	c3                   	ret    

c000c9ec <Dbg::logWriteInt(unsigned int)>:
c000c9ec:	83 ec 10             	sub    esp,0x10
c000c9ef:	6a 0a                	push   0xa
c000c9f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c9f5:	50                   	push   eax
c000c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9fa:	e8 57 ff ff ff       	call   c000c956 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c9ff:	50                   	push   eax
c000ca00:	e8 ca ff ff ff       	call   c000c9cf <Dbg::logs(char*)>
c000ca05:	83 c4 20             	add    esp,0x20
c000ca08:	c3                   	ret    

c000ca09 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca09:	83 ec 10             	sub    esp,0x10
c000ca0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca10:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca14:	50                   	push   eax
c000ca15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca19:	e8 38 ff ff ff       	call   c000c956 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca1e:	50                   	push   eax
c000ca1f:	e8 ab ff ff ff       	call   c000c9cf <Dbg::logs(char*)>
c000ca24:	83 c4 20             	add    esp,0x20
c000ca27:	c3                   	ret    

c000ca28 <Dbg::kprintf(char const*, ...)>:
c000ca28:	55                   	push   ebp
c000ca29:	57                   	push   edi
c000ca2a:	56                   	push   esi
c000ca2b:	53                   	push   ebx
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca33:	f6 05 80 63 02 c0 10 	test   BYTE PTR ds:0xc0026380,0x10
c000ca3a:	74 08                	je     c000ca44 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca3c:	83 c4 0c             	add    esp,0xc
c000ca3f:	5b                   	pop    ebx
c000ca40:	5e                   	pop    esi
c000ca41:	5f                   	pop    edi
c000ca42:	5d                   	pop    ebp
c000ca43:	c3                   	ret    
c000ca44:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca48:	31 db                	xor    ebx,ebx
c000ca4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca4e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca51:	84 c0                	test   al,al
c000ca53:	74 e7                	je     c000ca3c <Dbg::kprintf(char const*, ...)+0x14>
c000ca55:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca58:	3c 25                	cmp    al,0x25
c000ca5a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca5d:	75 44                	jne    c000caa3 <Dbg::kprintf(char const*, ...)+0x7b>
c000ca5f:	83 c3 02             	add    ebx,0x2
c000ca62:	8a 07                	mov    al,BYTE PTR [edi]
c000ca64:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ca67:	83 e8 25             	sub    eax,0x25
c000ca6a:	3c 53                	cmp    al,0x53
c000ca6c:	0f 87 c9 00 00 00    	ja     c000cb3b <Dbg::kprintf(char const*, ...)+0x113>
c000ca72:	0f b6 c0             	movzx  eax,al
c000ca75:	ff 24 85 b4 2f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd04c]
c000ca7c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca80:	89 c8                	mov    eax,ecx
c000ca82:	83 c1 04             	add    ecx,0x4
c000ca85:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ca89:	ff 30                	push   DWORD PTR [eax]
c000ca8b:	e8 5c ff ff ff       	call   c000c9ec <Dbg::logWriteInt(unsigned int)>
c000ca90:	5f                   	pop    edi
c000ca91:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ca95:	84 c0                	test   al,al
c000ca97:	74 a3                	je     c000ca3c <Dbg::kprintf(char const*, ...)+0x14>
c000ca99:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca9c:	3c 25                	cmp    al,0x25
c000ca9e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caa1:	74 bc                	je     c000ca5f <Dbg::kprintf(char const*, ...)+0x37>
c000caa3:	50                   	push   eax
c000caa4:	89 eb                	mov    ebx,ebp
c000caa6:	e8 04 ff ff ff       	call   c000c9af <Dbg::logc(char)>
c000caab:	89 fd                	mov    ebp,edi
c000caad:	58                   	pop    eax
c000caae:	eb e1                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cab0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cab4:	89 c8                	mov    eax,ecx
c000cab6:	83 c1 04             	add    ecx,0x4
c000cab9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cabd:	ff 30                	push   DWORD PTR [eax]
c000cabf:	e8 0b ff ff ff       	call   c000c9cf <Dbg::logs(char*)>
c000cac4:	58                   	pop    eax
c000cac5:	eb ca                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cac7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cacb:	89 d0                	mov    eax,edx
c000cacd:	83 c2 04             	add    edx,0x4
c000cad0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cad4:	ff 30                	push   DWORD PTR [eax]
c000cad6:	e8 11 ff ff ff       	call   c000c9ec <Dbg::logWriteInt(unsigned int)>
c000cadb:	58                   	pop    eax
c000cadc:	eb b3                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cae2:	89 d0                	mov    eax,edx
c000cae4:	83 c2 04             	add    edx,0x4
c000cae7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000caea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000caee:	50                   	push   eax
c000caef:	e8 bb fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000caf4:	58                   	pop    eax
c000caf5:	eb 9a                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000caf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cafb:	89 c8                	mov    eax,ecx
c000cafd:	83 c1 04             	add    ecx,0x4
c000cb00:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb04:	6a 10                	push   0x10
c000cb06:	ff 30                	push   DWORD PTR [eax]
c000cb08:	e8 fc fe ff ff       	call   c000ca09 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb0d:	59                   	pop    ecx
c000cb0e:	5f                   	pop    edi
c000cb0f:	eb 80                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cb11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb15:	89 d0                	mov    eax,edx
c000cb17:	83 c2 08             	add    edx,0x8
c000cb1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb1e:	6a 10                	push   0x10
c000cb20:	ff 30                	push   DWORD PTR [eax]
c000cb22:	e8 e2 fe ff ff       	call   c000ca09 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb27:	58                   	pop    eax
c000cb28:	5a                   	pop    edx
c000cb29:	e9 63 ff ff ff       	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cb2e:	6a 25                	push   0x25
c000cb30:	e8 7a fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000cb35:	58                   	pop    eax
c000cb36:	e9 56 ff ff ff       	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cb3b:	6a 25                	push   0x25
c000cb3d:	e8 6d fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000cb42:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb45:	50                   	push   eax
c000cb46:	e8 64 fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000cb4b:	5a                   	pop    edx
c000cb4c:	59                   	pop    ecx
c000cb4d:	e9 3f ff ff ff       	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>

c000cb52 <File::read(unsigned long long, void*, int*)>:
c000cb52:	53                   	push   ebx
c000cb53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb5b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cb62:	3c 19                	cmp    al,0x19
c000cb64:	77 35                	ja     c000cb9b <File::read(unsigned long long, void*, int*)+0x49>
c000cb66:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c000cb6d:	85 c0                	test   eax,eax
c000cb6f:	74 2a                	je     c000cb9b <File::read(unsigned long long, void*, int*)+0x49>
c000cb71:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cb77:	85 c0                	test   eax,eax
c000cb79:	74 20                	je     c000cb9b <File::read(unsigned long long, void*, int*)+0x49>
c000cb7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cb7f:	74 21                	je     c000cba2 <File::read(unsigned long long, void*, int*)+0x50>
c000cb81:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cb83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb87:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cb8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb95:	5b                   	pop    ebx
c000cb96:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cb99:	ff e0                	jmp    eax
c000cb9b:	b8 0b 00 00 00       	mov    eax,0xb
c000cba0:	eb 05                	jmp    c000cba7 <File::read(unsigned long long, void*, int*)+0x55>
c000cba2:	b8 05 00 00 00       	mov    eax,0x5
c000cba7:	5b                   	pop    ebx
c000cba8:	c3                   	ret    
c000cba9:	90                   	nop

c000cbaa <File::write(unsigned long long, void*, int*)>:
c000cbaa:	53                   	push   ebx
c000cbab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbb3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbba:	3c 19                	cmp    al,0x19
c000cbbc:	77 35                	ja     c000cbf3 <File::write(unsigned long long, void*, int*)+0x49>
c000cbbe:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c000cbc5:	85 c0                	test   eax,eax
c000cbc7:	74 2a                	je     c000cbf3 <File::write(unsigned long long, void*, int*)+0x49>
c000cbc9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbcf:	85 c0                	test   eax,eax
c000cbd1:	74 20                	je     c000cbf3 <File::write(unsigned long long, void*, int*)+0x49>
c000cbd3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbd7:	74 21                	je     c000cbfa <File::write(unsigned long long, void*, int*)+0x50>
c000cbd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbdb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbdf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbed:	5b                   	pop    ebx
c000cbee:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cbf1:	ff e0                	jmp    eax
c000cbf3:	b8 0b 00 00 00       	mov    eax,0xb
c000cbf8:	eb 05                	jmp    c000cbff <File::write(unsigned long long, void*, int*)+0x55>
c000cbfa:	b8 05 00 00 00       	mov    eax,0x5
c000cbff:	5b                   	pop    ebx
c000cc00:	c3                   	ret    
c000cc01:	90                   	nop

c000cc02 <Directory::read(unsigned long long, void*, int*)>:
c000cc02:	53                   	push   ebx
c000cc03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc07:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc0b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc12:	3c 19                	cmp    al,0x19
c000cc14:	77 35                	ja     c000cc4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc16:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	74 2a                	je     c000cc4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc21:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc27:	85 c0                	test   eax,eax
c000cc29:	74 20                	je     c000cc4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc2f:	74 21                	je     c000cc52 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc31:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc37:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc45:	5b                   	pop    ebx
c000cc46:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc49:	ff e0                	jmp    eax
c000cc4b:	b8 0b 00 00 00       	mov    eax,0xb
c000cc50:	eb 05                	jmp    c000cc57 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc52:	b8 05 00 00 00       	mov    eax,0x5
c000cc57:	5b                   	pop    ebx
c000cc58:	c3                   	ret    
c000cc59:	90                   	nop

c000cc5a <Directory::write(unsigned long long, void*, int*)>:
c000cc5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cc65:	b8 0b 00 00 00       	mov    eax,0xb
c000cc6a:	80 fa 19             	cmp    dl,0x19
c000cc6d:	77 18                	ja     c000cc87 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cc6f:	8b 14 95 60 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96a0]
c000cc76:	85 d2                	test   edx,edx
c000cc78:	74 0d                	je     c000cc87 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cc7a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cc81:	19 c0                	sbb    eax,eax
c000cc83:	83 e0 0a             	and    eax,0xa
c000cc86:	40                   	inc    eax
c000cc87:	c3                   	ret    

c000cc88 <File::isAtty()>:
c000cc88:	31 c0                	xor    eax,eax
c000cc8a:	c3                   	ret    
c000cc8b:	90                   	nop

c000cc8c <Directory::isAtty()>:
c000cc8c:	31 c0                	xor    eax,eax
c000cc8e:	c3                   	ret    
c000cc8f:	90                   	nop

c000cc90 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cc90:	b8 0a 00 00 00       	mov    eax,0xa
c000cc95:	c3                   	ret    

c000cc96 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cc96:	b8 0a 00 00 00       	mov    eax,0xa
c000cc9b:	c3                   	ret    

c000cc9c <Filesystem::allocateSwapfile(char const*, int)>:
c000cc9c:	31 c0                	xor    eax,eax
c000cc9e:	31 d2                	xor    edx,edx
c000cca0:	c3                   	ret    
c000cca1:	90                   	nop

c000cca2 <File::~File()>:
c000cca2:	83 ec 0c             	sub    esp,0xc
c000cca5:	ba 74 31 02 c0       	mov    edx,0xc0023174
c000ccaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccae:	89 10                	mov    DWORD PTR [eax],edx
c000ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb4:	83 ec 0c             	sub    esp,0xc
c000ccb7:	50                   	push   eax
c000ccb8:	e8 2f e7 ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000ccbd:	83 c4 10             	add    esp,0x10
c000ccc0:	90                   	nop
c000ccc1:	83 c4 0c             	add    esp,0xc
c000ccc4:	c3                   	ret    
c000ccc5:	90                   	nop

c000ccc6 <File::~File()>:
c000ccc6:	83 ec 0c             	sub    esp,0xc
c000ccc9:	83 ec 0c             	sub    esp,0xc
c000cccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd0:	e8 cd ff ff ff       	call   c000cca2 <File::~File()>
c000ccd5:	83 c4 10             	add    esp,0x10
c000ccd8:	83 ec 08             	sub    esp,0x8
c000ccdb:	68 14 01 00 00       	push   0x114
c000cce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce4:	e8 5e fc ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000cce9:	83 c4 10             	add    esp,0x10
c000ccec:	83 c4 0c             	add    esp,0xc
c000ccef:	c3                   	ret    

c000ccf0 <Directory::~Directory()>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	ba 90 31 02 c0       	mov    edx,0xc0023190
c000ccf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfc:	89 10                	mov    DWORD PTR [eax],edx
c000ccfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd02:	83 ec 0c             	sub    esp,0xc
c000cd05:	50                   	push   eax
c000cd06:	e8 e1 e6 ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	90                   	nop
c000cd0f:	83 c4 0c             	add    esp,0xc
c000cd12:	c3                   	ret    
c000cd13:	90                   	nop

c000cd14 <Directory::~Directory()>:
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	83 ec 0c             	sub    esp,0xc
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	e8 cd ff ff ff       	call   c000ccf0 <Directory::~Directory()>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	83 ec 08             	sub    esp,0x8
c000cd29:	68 14 01 00 00       	push   0x114
c000cd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd32:	e8 10 fc ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	83 c4 0c             	add    esp,0xc
c000cd3d:	c3                   	ret    

c000cd3e <Filesystem::Filesystem()>:
c000cd3e:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c000cd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd47:	89 10                	mov    DWORD PTR [eax],edx
c000cd49:	8b 15 d4 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264d4
c000cd4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd5a:	a3 d4 64 02 c0       	mov    ds:0xc00264d4,eax
c000cd5f:	90                   	nop
c000cd60:	c3                   	ret    
c000cd61:	90                   	nop

c000cd62 <Filesystem::~Filesystem()>:
c000cd62:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c000cd67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6b:	89 10                	mov    DWORD PTR [eax],edx
c000cd6d:	90                   	nop
c000cd6e:	c3                   	ret    
c000cd6f:	90                   	nop

c000cd70 <Filesystem::~Filesystem()>:
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd77:	e8 e6 ff ff ff       	call   c000cd62 <Filesystem::~Filesystem()>
c000cd7c:	83 c4 04             	add    esp,0x4
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	6a 08                	push   0x8
c000cd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd88:	e8 ba fb ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000cd8d:	83 c4 10             	add    esp,0x10
c000cd90:	83 c4 0c             	add    esp,0xc
c000cd93:	c3                   	ret    

c000cd94 <Fs::getcwd(Process*, char*, int)>:
c000cd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd98:	31 c0                	xor    eax,eax
c000cd9a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cd9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cda1:	7d 15                	jge    c000cdb8 <Fs::getcwd(Process*, char*, int)+0x24>
c000cda3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cda7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdae:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cdb1:	84 c9                	test   cl,cl
c000cdb3:	74 06                	je     c000cdbb <Fs::getcwd(Process*, char*, int)+0x27>
c000cdb5:	40                   	inc    eax
c000cdb6:	eb e2                	jmp    c000cd9a <Fs::getcwd(Process*, char*, int)+0x6>
c000cdb8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdbb:	31 c0                	xor    eax,eax
c000cdbd:	c3                   	ret    

c000cdbe <Fs::initVFS()>:
c000cdbe:	83 ec 18             	sub    esp,0x18
c000cdc1:	6a 08                	push   0x8
c000cdc3:	e8 fb cb ff ff       	call   c00099c3 <malloc>
c000cdc8:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdcb:	e8 70 e3 00 00       	call   c001b140 <FAT::FAT()>
c000cdd0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cdd7:	e8 e7 cb ff ff       	call   c00099c3 <malloc>
c000cddc:	89 04 24             	mov    DWORD PTR [esp],eax
c000cddf:	e8 ba f5 00 00       	call   c001c39e <ISO9660::ISO9660()>
c000cde4:	83 c4 1c             	add    esp,0x1c
c000cde7:	c3                   	ret    

c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000cde8:	55                   	push   ebp
c000cde9:	57                   	push   edi
c000cdea:	56                   	push   esi
c000cdeb:	53                   	push   ebx
c000cdec:	81 ec 10 04 00 00    	sub    esp,0x410
c000cdf2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000cdf9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce00:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce07:	68 00 04 00 00       	push   0x400
c000ce0c:	6a 00                	push   0x0
c000ce0e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce12:	56                   	push   esi
c000ce13:	e8 6c 38 ff ff       	call   c0000684 <memset>
c000ce18:	83 c4 10             	add    esp,0x10
c000ce1b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce1f:	75 0b                	jne    c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce21:	50                   	push   eax
c000ce22:	50                   	push   eax
c000ce23:	57                   	push   edi
c000ce24:	56                   	push   esi
c000ce25:	e8 16 39 ff ff       	call   c0000740 <strcpy>
c000ce2a:	eb 41                	jmp    c000ce6d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce2c:	8a 07                	mov    al,BYTE PTR [edi]
c000ce2e:	3c 5c                	cmp    al,0x5c
c000ce30:	74 04                	je     c000ce36 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce32:	3c 2f                	cmp    al,0x2f
c000ce34:	75 18                	jne    c000ce4e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce36:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce39:	3c 60                	cmp    al,0x60
c000ce3b:	7e 03                	jle    c000ce40 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce3d:	83 e8 20             	sub    eax,0x20
c000ce40:	88 04 24             	mov    BYTE PTR [esp],al
c000ce43:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce4a:	50                   	push   eax
c000ce4b:	50                   	push   eax
c000ce4c:	eb 18                	jmp    c000ce66 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce4e:	50                   	push   eax
c000ce4f:	50                   	push   eax
c000ce50:	55                   	push   ebp
c000ce51:	56                   	push   esi
c000ce52:	e8 e9 38 ff ff       	call   c0000740 <strcpy>
c000ce57:	5a                   	pop    edx
c000ce58:	59                   	pop    ecx
c000ce59:	68 9a 47 02 c0       	push   0xc002479a
c000ce5e:	56                   	push   esi
c000ce5f:	e8 1c 3a ff ff       	call   c0000880 <strcat>
c000ce64:	5d                   	pop    ebp
c000ce65:	58                   	pop    eax
c000ce66:	57                   	push   edi
c000ce67:	56                   	push   esi
c000ce68:	e8 13 3a ff ff       	call   c0000880 <strcat>
c000ce6d:	83 c4 10             	add    esp,0x10
c000ce70:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ce73:	3c 60                	cmp    al,0x60
c000ce75:	7e 03                	jle    c000ce7a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ce77:	83 e8 20             	sub    eax,0x20
c000ce7a:	88 04 24             	mov    BYTE PTR [esp],al
c000ce7d:	88 03                	mov    BYTE PTR [ebx],al
c000ce7f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce86:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ce8c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ce90:	bf 03 00 00 00       	mov    edi,0x3
c000ce95:	b8 03 00 00 00       	mov    eax,0x3
c000ce9a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ce9d:	84 d2                	test   dl,dl
c000ce9f:	0f 84 91 00 00 00    	je     c000cf36 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cea5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cea8:	80 fa 5c             	cmp    dl,0x5c
c000ceab:	74 05                	je     c000ceb2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cead:	80 fa 2f             	cmp    dl,0x2f
c000ceb0:	75 12                	jne    c000cec4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ceb2:	89 c5                	mov    ebp,eax
c000ceb4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ceb9:	74 09                	je     c000cec4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cebb:	40                   	inc    eax
c000cebc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cec0:	89 cf                	mov    edi,ecx
c000cec2:	eb d6                	jmp    c000ce9a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cec4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cec9:	75 5b                	jne    c000cf26 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cecb:	80 fa 2e             	cmp    dl,0x2e
c000cece:	75 56                	jne    c000cf26 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ced0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ced4:	74 19                	je     c000ceef <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ced6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cedb:	74 53                	je     c000cf30 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cedd:	89 f9                	mov    ecx,edi
c000cedf:	41                   	inc    ecx
c000cee0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cee3:	80 fa 2f             	cmp    dl,0x2f
c000cee6:	74 f7                	je     c000cedf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cee8:	80 fa 5c             	cmp    dl,0x5c
c000ceeb:	74 f2                	je     c000cedf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ceed:	eb d1                	jmp    c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ceef:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cef4:	74 3a                	je     c000cf30 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cef6:	83 f8 03             	cmp    eax,0x3
c000cef9:	74 c5                	je     c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cefb:	41                   	inc    ecx
c000cefc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ceff:	80 fa 2f             	cmp    dl,0x2f
c000cf02:	74 f7                	je     c000cefb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf04:	80 fa 5c             	cmp    dl,0x5c
c000cf07:	74 f2                	je     c000cefb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf09:	48                   	dec    eax
c000cf0a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf0e:	75 06                	jne    c000cf16 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf10:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf14:	eb f3                	jmp    c000cf09 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf16:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf1a:	74 07                	je     c000cf23 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf20:	48                   	dec    eax
c000cf21:	eb f3                	jmp    c000cf16 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf23:	40                   	inc    eax
c000cf24:	eb 9a                	jmp    c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf26:	80 fa 2f             	cmp    dl,0x2f
c000cf29:	74 95                	je     c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf2b:	80 fa 5c             	cmp    dl,0x5c
c000cf2e:	74 90                	je     c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf30:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf33:	40                   	inc    eax
c000cf34:	eb 8a                	jmp    c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf36:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf3a:	83 ec 0c             	sub    esp,0xc
c000cf3d:	53                   	push   ebx
c000cf3e:	e8 5d 37 ff ff       	call   c00006a0 <strlen>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf4b:	75 26                	jne    c000cf73 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf4d:	83 ec 0c             	sub    esp,0xc
c000cf50:	53                   	push   ebx
c000cf51:	e8 4a 37 ff ff       	call   c00006a0 <strlen>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cf5e:	74 26                	je     c000cf86 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	53                   	push   ebx
c000cf64:	e8 37 37 ff ff       	call   c00006a0 <strlen>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cf71:	eb c7                	jmp    c000cf3a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cf73:	83 ec 0c             	sub    esp,0xc
c000cf76:	53                   	push   ebx
c000cf77:	e8 24 37 ff ff       	call   c00006a0 <strlen>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf84:	74 c7                	je     c000cf4d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cf86:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cf8c:	5b                   	pop    ebx
c000cf8d:	5e                   	pop    esi
c000cf8e:	5f                   	pop    edi
c000cf8f:	5d                   	pop    ebp
c000cf90:	c3                   	ret    
c000cf91:	90                   	nop

c000cf92 <File::File(char const*, Process*)>:
c000cf92:	83 ec 0c             	sub    esp,0xc
c000cf95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf99:	83 ec 08             	sub    esp,0x8
c000cf9c:	6a 00                	push   0x0
c000cf9e:	50                   	push   eax
c000cf9f:	e8 66 e2 ff ff       	call   c000b20a <UnixFile::UnixFile(int)>
c000cfa4:	83 c4 10             	add    esp,0x10
c000cfa7:	ba 74 31 02 c0       	mov    edx,0xc0023174
c000cfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfb0:	89 10                	mov    DWORD PTR [eax],edx
c000cfb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfb6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc0:	83 c0 0d             	add    eax,0xd
c000cfc3:	83 ec 04             	sub    esp,0x4
c000cfc6:	52                   	push   edx
c000cfc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcb:	50                   	push   eax
c000cfcc:	e8 17 fe ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000cfd1:	83 c4 10             	add    esp,0x10
c000cfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cfdb:	8d 50 bf             	lea    edx,[eax-0x41]
c000cfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000cff0:	90                   	nop
c000cff1:	83 c4 0c             	add    esp,0xc
c000cff4:	c3                   	ret    
c000cff5:	90                   	nop

c000cff6 <File::open(FileOpenMode)>:
c000cff6:	53                   	push   ebx
c000cff7:	b8 0b 00 00 00       	mov    eax,0xb
c000cffc:	83 ec 08             	sub    esp,0x8
c000cfff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d003:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d00a:	80 fa 19             	cmp    dl,0x19
c000d00d:	77 40                	ja     c000d04f <File::open(FileOpenMode)+0x59>
c000d00f:	8b 14 95 60 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96a0]
c000d016:	85 d2                	test   edx,edx
c000d018:	74 35                	je     c000d04f <File::open(FileOpenMode)+0x59>
c000d01a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d020:	85 d2                	test   edx,edx
c000d022:	74 2b                	je     c000d04f <File::open(FileOpenMode)+0x59>
c000d024:	b8 06 00 00 00       	mov    eax,0x6
c000d029:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d02d:	75 20                	jne    c000d04f <File::open(FileOpenMode)+0x59>
c000d02f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d031:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03b:	51                   	push   ecx
c000d03c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d03f:	51                   	push   ecx
c000d040:	52                   	push   edx
c000d041:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	85 c0                	test   eax,eax
c000d049:	75 04                	jne    c000d04f <File::open(FileOpenMode)+0x59>
c000d04b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d04f:	83 c4 08             	add    esp,0x8
c000d052:	5b                   	pop    ebx
c000d053:	c3                   	ret    

c000d054 <File::close()>:
c000d054:	53                   	push   ebx
c000d055:	b8 0b 00 00 00       	mov    eax,0xb
c000d05a:	83 ec 08             	sub    esp,0x8
c000d05d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d061:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d068:	80 fa 19             	cmp    dl,0x19
c000d06b:	77 41                	ja     c000d0ae <File::close()+0x5a>
c000d06d:	8b 1c 95 60 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd96a0]
c000d074:	85 db                	test   ebx,ebx
c000d076:	74 36                	je     c000d0ae <File::close()+0x5a>
c000d078:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d07f:	74 2d                	je     c000d0ae <File::close()+0x5a>
c000d081:	b8 05 00 00 00       	mov    eax,0x5
c000d086:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d08a:	74 22                	je     c000d0ae <File::close()+0x5a>
c000d08c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d090:	8b 04 95 60 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd96a0]
c000d097:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d09d:	53                   	push   ebx
c000d09e:	53                   	push   ebx
c000d09f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0a1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0a7:	50                   	push   eax
c000d0a8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	83 c4 08             	add    esp,0x8
c000d0b1:	5b                   	pop    ebx
c000d0b2:	c3                   	ret    
c000d0b3:	90                   	nop

c000d0b4 <File::seek(unsigned long long)>:
c000d0b4:	56                   	push   esi
c000d0b5:	53                   	push   ebx
c000d0b6:	b8 0b 00 00 00       	mov    eax,0xb
c000d0bb:	51                   	push   ecx
c000d0bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d0c4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d0cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d0cf:	80 fa 19             	cmp    dl,0x19
c000d0d2:	77 31                	ja     c000d105 <File::seek(unsigned long long)+0x51>
c000d0d4:	8b 14 95 60 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96a0]
c000d0db:	85 d2                	test   edx,edx
c000d0dd:	74 26                	je     c000d105 <File::seek(unsigned long long)+0x51>
c000d0df:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0e5:	85 d2                	test   edx,edx
c000d0e7:	74 1c                	je     c000d105 <File::seek(unsigned long long)+0x51>
c000d0e9:	b8 05 00 00 00       	mov    eax,0x5
c000d0ee:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d0f2:	74 11                	je     c000d105 <File::seek(unsigned long long)+0x51>
c000d0f4:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0f6:	53                   	push   ebx
c000d0f7:	51                   	push   ecx
c000d0f8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d0fe:	52                   	push   edx
c000d0ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	5a                   	pop    edx
c000d106:	5b                   	pop    ebx
c000d107:	5e                   	pop    esi
c000d108:	c3                   	ret    
c000d109:	90                   	nop

c000d10a <File::tell(unsigned long long*)>:
c000d10a:	83 ec 0c             	sub    esp,0xc
c000d10d:	b8 0b 00 00 00       	mov    eax,0xb
c000d112:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d116:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d11d:	80 fa 19             	cmp    dl,0x19
c000d120:	77 34                	ja     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d122:	8b 14 95 60 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96a0]
c000d129:	85 d2                	test   edx,edx
c000d12b:	74 29                	je     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d12d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d133:	85 d2                	test   edx,edx
c000d135:	74 1f                	je     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d137:	b8 05 00 00 00       	mov    eax,0x5
c000d13c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d140:	74 14                	je     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d142:	50                   	push   eax
c000d143:	8b 02                	mov    eax,DWORD PTR [edx]
c000d145:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d149:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d14f:	52                   	push   edx
c000d150:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d153:	83 c4 10             	add    esp,0x10
c000d156:	83 c4 0c             	add    esp,0xc
c000d159:	c3                   	ret    

c000d15a <File::rewind()>:
c000d15a:	83 ec 10             	sub    esp,0x10
c000d15d:	6a 00                	push   0x0
c000d15f:	6a 00                	push   0x0
c000d161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d165:	e8 4a ff ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c000d16a:	83 c4 1c             	add    esp,0x1c
c000d16d:	c3                   	ret    

c000d16e <File::unlink()>:
c000d16e:	83 ec 0c             	sub    esp,0xc
c000d171:	b8 0b 00 00 00       	mov    eax,0xb
c000d176:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d17a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d181:	80 f9 19             	cmp    cl,0x19
c000d184:	77 2f                	ja     c000d1b5 <File::unlink()+0x47>
c000d186:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d18d:	85 c9                	test   ecx,ecx
c000d18f:	74 24                	je     c000d1b5 <File::unlink()+0x47>
c000d191:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d197:	85 c9                	test   ecx,ecx
c000d199:	74 1a                	je     c000d1b5 <File::unlink()+0x47>
c000d19b:	b8 06 00 00 00       	mov    eax,0x6
c000d1a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1a4:	75 0f                	jne    c000d1b5 <File::unlink()+0x47>
c000d1a6:	83 c2 0d             	add    edx,0xd
c000d1a9:	50                   	push   eax
c000d1aa:	50                   	push   eax
c000d1ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1ad:	52                   	push   edx
c000d1ae:	51                   	push   ecx
c000d1af:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	83 c4 0c             	add    esp,0xc
c000d1b8:	c3                   	ret    
c000d1b9:	90                   	nop

c000d1ba <File::rename(char const*)>:
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1cd:	80 f9 19             	cmp    cl,0x19
c000d1d0:	77 32                	ja     c000d204 <File::rename(char const*)+0x4a>
c000d1d2:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d1d9:	85 c9                	test   ecx,ecx
c000d1db:	74 27                	je     c000d204 <File::rename(char const*)+0x4a>
c000d1dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1e3:	85 c9                	test   ecx,ecx
c000d1e5:	74 1d                	je     c000d204 <File::rename(char const*)+0x4a>
c000d1e7:	b8 06 00 00 00       	mov    eax,0x6
c000d1ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1f0:	75 12                	jne    c000d204 <File::rename(char const*)+0x4a>
c000d1f2:	83 c2 0d             	add    edx,0xd
c000d1f5:	50                   	push   eax
c000d1f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1fc:	52                   	push   edx
c000d1fd:	51                   	push   ecx
c000d1fe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d201:	83 c4 10             	add    esp,0x10
c000d204:	83 c4 0c             	add    esp,0xc
c000d207:	c3                   	ret    

c000d208 <File::chfatattr(unsigned char, unsigned char)>:
c000d208:	57                   	push   edi
c000d209:	b8 0b 00 00 00       	mov    eax,0xb
c000d20e:	56                   	push   esi
c000d20f:	53                   	push   ebx
c000d210:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d214:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d218:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d21f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d223:	80 f9 19             	cmp    cl,0x19
c000d226:	77 37                	ja     c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d228:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d22f:	85 c9                	test   ecx,ecx
c000d231:	74 2c                	je     c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d233:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d239:	85 c9                	test   ecx,ecx
c000d23b:	74 22                	je     c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d23d:	b8 06 00 00 00       	mov    eax,0x6
c000d242:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d246:	75 17                	jne    c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d248:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d24a:	89 f0                	mov    eax,esi
c000d24c:	83 c2 0d             	add    edx,0xd
c000d24f:	0f b6 f0             	movzx  esi,al
c000d252:	0f b6 db             	movzx  ebx,bl
c000d255:	56                   	push   esi
c000d256:	53                   	push   ebx
c000d257:	52                   	push   edx
c000d258:	51                   	push   ecx
c000d259:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	5b                   	pop    ebx
c000d260:	5e                   	pop    esi
c000d261:	5f                   	pop    edi
c000d262:	c3                   	ret    
c000d263:	90                   	nop

c000d264 <File::exists()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	31 c0                	xor    eax,eax
c000d269:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d26d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d274:	80 f9 19             	cmp    cl,0x19
c000d277:	77 24                	ja     c000d29d <File::exists()+0x39>
c000d279:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d280:	85 c9                	test   ecx,ecx
c000d282:	74 19                	je     c000d29d <File::exists()+0x39>
c000d284:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d28a:	85 c9                	test   ecx,ecx
c000d28c:	74 0f                	je     c000d29d <File::exists()+0x39>
c000d28e:	83 c2 0d             	add    edx,0xd
c000d291:	50                   	push   eax
c000d292:	50                   	push   eax
c000d293:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d295:	52                   	push   edx
c000d296:	51                   	push   ecx
c000d297:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d29a:	83 c4 10             	add    esp,0x10
c000d29d:	83 c4 0c             	add    esp,0xc
c000d2a0:	c3                   	ret    
c000d2a1:	90                   	nop

c000d2a2 <File::stat(unsigned long long*, bool*)>:
c000d2a2:	56                   	push   esi
c000d2a3:	53                   	push   ebx
c000d2a4:	50                   	push   eax
c000d2a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d2aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2bd:	80 f9 19             	cmp    cl,0x19
c000d2c0:	77 3d                	ja     c000d2ff <File::stat(unsigned long long*, bool*)+0x5d>
c000d2c2:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d2c9:	85 c9                	test   ecx,ecx
c000d2cb:	74 32                	je     c000d2ff <File::stat(unsigned long long*, bool*)+0x5d>
c000d2cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2d3:	85 c9                	test   ecx,ecx
c000d2d5:	74 28                	je     c000d2ff <File::stat(unsigned long long*, bool*)+0x5d>
c000d2d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2dd:	74 13                	je     c000d2f2 <File::stat(unsigned long long*, bool*)+0x50>
c000d2df:	83 ec 04             	sub    esp,0x4
c000d2e2:	56                   	push   esi
c000d2e3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d2e9:	51                   	push   ecx
c000d2ea:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d2ed:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d2f0:	eb 0a                	jmp    c000d2fc <File::stat(unsigned long long*, bool*)+0x5a>
c000d2f2:	53                   	push   ebx
c000d2f3:	83 c2 0d             	add    edx,0xd
c000d2f6:	56                   	push   esi
c000d2f7:	52                   	push   edx
c000d2f8:	51                   	push   ecx
c000d2f9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d2fc:	83 c4 10             	add    esp,0x10
c000d2ff:	5a                   	pop    edx
c000d300:	5b                   	pop    ebx
c000d301:	5e                   	pop    esi
c000d302:	c3                   	ret    

c000d303 <Fs::setcwd(Process*, char*)>:
c000d303:	55                   	push   ebp
c000d304:	57                   	push   edi
c000d305:	56                   	push   esi
c000d306:	53                   	push   ebx
c000d307:	81 ec 20 02 00 00    	sub    esp,0x220
c000d30d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d314:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d31a:	57                   	push   edi
c000d31b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d322:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d326:	56                   	push   esi
c000d327:	e8 bc fa ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d32c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d32f:	e8 6c 33 ff ff       	call   c00006a0 <strlen>
c000d334:	83 c4 10             	add    esp,0x10
c000d337:	83 f8 02             	cmp    eax,0x2
c000d33a:	77 17                	ja     c000d353 <Fs::setcwd(Process*, char*)+0x50>
c000d33c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d341:	83 e8 41             	sub    eax,0x41
c000d344:	83 f8 19             	cmp    eax,0x19
c000d347:	76 24                	jbe    c000d36d <Fs::setcwd(Process*, char*)+0x6a>
c000d349:	b8 03 00 00 00       	mov    eax,0x3
c000d34e:	e9 e0 00 00 00       	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d353:	83 ec 0c             	sub    esp,0xc
c000d356:	56                   	push   esi
c000d357:	e8 44 33 ff ff       	call   c00006a0 <strlen>
c000d35c:	83 c4 10             	add    esp,0x10
c000d35f:	83 f8 03             	cmp    eax,0x3
c000d362:	75 34                	jne    c000d398 <Fs::setcwd(Process*, char*)+0x95>
c000d364:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d369:	75 2d                	jne    c000d398 <Fs::setcwd(Process*, char*)+0x95>
c000d36b:	eb cf                	jmp    c000d33c <Fs::setcwd(Process*, char*)+0x39>
c000d36d:	8b 14 85 60 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd96a0]
c000d374:	b8 05 00 00 00       	mov    eax,0x5
c000d379:	85 d2                	test   edx,edx
c000d37b:	0f 84 b2 00 00 00    	je     c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d381:	b8 06 00 00 00       	mov    eax,0x6
c000d386:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d38d:	0f 85 92 00 00 00    	jne    c000d425 <Fs::setcwd(Process*, char*)+0x122>
c000d393:	e9 9b 00 00 00       	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	68 14 01 00 00       	push   0x114
c000d3a0:	e8 1e c6 ff ff       	call   c00099c3 <malloc>
c000d3a5:	83 c4 0c             	add    esp,0xc
c000d3a8:	89 c3                	mov    ebx,eax
c000d3aa:	55                   	push   ebp
c000d3ab:	56                   	push   esi
c000d3ac:	50                   	push   eax
c000d3ad:	e8 e0 fb ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c000d3b2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3b7:	83 c4 0c             	add    esp,0xc
c000d3ba:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d3be:	50                   	push   eax
c000d3bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3c3:	50                   	push   eax
c000d3c4:	53                   	push   ebx
c000d3c5:	e8 d8 fe ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	83 f8 02             	cmp    eax,0x2
c000d3d0:	74 04                	je     c000d3d6 <Fs::setcwd(Process*, char*)+0xd3>
c000d3d2:	85 c0                	test   eax,eax
c000d3d4:	74 1c                	je     c000d3f2 <Fs::setcwd(Process*, char*)+0xef>
c000d3d6:	b8 01 00 00 00       	mov    eax,0x1
c000d3db:	85 db                	test   ebx,ebx
c000d3dd:	74 54                	je     c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d3df:	83 ec 0c             	sub    esp,0xc
c000d3e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3e4:	53                   	push   ebx
c000d3e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3e8:	83 c4 10             	add    esp,0x10
c000d3eb:	b8 01 00 00 00       	mov    eax,0x1
c000d3f0:	eb 41                	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d3f2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3f7:	75 1c                	jne    c000d415 <Fs::setcwd(Process*, char*)+0x112>
c000d3f9:	b8 02 00 00 00       	mov    eax,0x2
c000d3fe:	85 db                	test   ebx,ebx
c000d400:	74 31                	je     c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d402:	83 ec 0c             	sub    esp,0xc
c000d405:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d407:	53                   	push   ebx
c000d408:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	b8 02 00 00 00       	mov    eax,0x2
c000d413:	eb 1e                	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d415:	85 db                	test   ebx,ebx
c000d417:	74 0c                	je     c000d425 <Fs::setcwd(Process*, char*)+0x122>
c000d419:	83 ec 0c             	sub    esp,0xc
c000d41c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d41e:	53                   	push   ebx
c000d41f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d422:	83 c4 10             	add    esp,0x10
c000d425:	50                   	push   eax
c000d426:	50                   	push   eax
c000d427:	56                   	push   esi
c000d428:	57                   	push   edi
c000d429:	e8 12 33 ff ff       	call   c0000740 <strcpy>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	31 c0                	xor    eax,eax
c000d433:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d439:	5b                   	pop    ebx
c000d43a:	5e                   	pop    esi
c000d43b:	5f                   	pop    edi
c000d43c:	5d                   	pop    ebp
c000d43d:	c3                   	ret    

c000d43e <Directory::Directory(char const*, Process*)>:
c000d43e:	83 ec 0c             	sub    esp,0xc
c000d441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d445:	83 ec 08             	sub    esp,0x8
c000d448:	6a 00                	push   0x0
c000d44a:	50                   	push   eax
c000d44b:	e8 ba dd ff ff       	call   c000b20a <UnixFile::UnixFile(int)>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	ba 90 31 02 c0       	mov    edx,0xc0023190
c000d458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d45c:	89 10                	mov    DWORD PTR [eax],edx
c000d45e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d462:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d46c:	83 c0 0d             	add    eax,0xd
c000d46f:	83 ec 04             	sub    esp,0x4
c000d472:	52                   	push   edx
c000d473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d477:	50                   	push   eax
c000d478:	e8 6b f9 ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d484:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d487:	8d 50 bf             	lea    edx,[eax-0x41]
c000d48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d48e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d498:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d49c:	90                   	nop
c000d49d:	83 c4 0c             	add    esp,0xc
c000d4a0:	c3                   	ret    
c000d4a1:	90                   	nop

c000d4a2 <Directory::open()>:
c000d4a2:	53                   	push   ebx
c000d4a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4a8:	83 ec 08             	sub    esp,0x8
c000d4ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4af:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4b6:	80 fa 19             	cmp    dl,0x19
c000d4b9:	77 3d                	ja     c000d4f8 <Directory::open()+0x56>
c000d4bb:	8b 14 95 60 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96a0]
c000d4c2:	85 d2                	test   edx,edx
c000d4c4:	74 32                	je     c000d4f8 <Directory::open()+0x56>
c000d4c6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d4cc:	85 d2                	test   edx,edx
c000d4ce:	74 28                	je     c000d4f8 <Directory::open()+0x56>
c000d4d0:	b8 06 00 00 00       	mov    eax,0x6
c000d4d5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d4d9:	75 1d                	jne    c000d4f8 <Directory::open()+0x56>
c000d4db:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d4e1:	50                   	push   eax
c000d4e2:	8b 02                	mov    eax,DWORD PTR [edx]
c000d4e4:	51                   	push   ecx
c000d4e5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d4e8:	51                   	push   ecx
c000d4e9:	52                   	push   edx
c000d4ea:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d4ed:	83 c4 10             	add    esp,0x10
c000d4f0:	85 c0                	test   eax,eax
c000d4f2:	75 04                	jne    c000d4f8 <Directory::open()+0x56>
c000d4f4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d4f8:	83 c4 08             	add    esp,0x8
c000d4fb:	5b                   	pop    ebx
c000d4fc:	c3                   	ret    
c000d4fd:	90                   	nop

c000d4fe <Directory::close()>:
c000d4fe:	53                   	push   ebx
c000d4ff:	b8 0b 00 00 00       	mov    eax,0xb
c000d504:	83 ec 08             	sub    esp,0x8
c000d507:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d50b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d512:	80 fa 19             	cmp    dl,0x19
c000d515:	77 41                	ja     c000d558 <Directory::close()+0x5a>
c000d517:	8b 1c 95 60 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd96a0]
c000d51e:	85 db                	test   ebx,ebx
c000d520:	74 36                	je     c000d558 <Directory::close()+0x5a>
c000d522:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d529:	74 2d                	je     c000d558 <Directory::close()+0x5a>
c000d52b:	b8 05 00 00 00       	mov    eax,0x5
c000d530:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d534:	74 22                	je     c000d558 <Directory::close()+0x5a>
c000d536:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d53a:	8b 04 95 60 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd96a0]
c000d541:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d547:	53                   	push   ebx
c000d548:	53                   	push   ebx
c000d549:	8b 10                	mov    edx,DWORD PTR [eax]
c000d54b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d551:	50                   	push   eax
c000d552:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d555:	83 c4 10             	add    esp,0x10
c000d558:	83 c4 08             	add    esp,0x8
c000d55b:	5b                   	pop    ebx
c000d55c:	c3                   	ret    
c000d55d:	90                   	nop

c000d55e <Directory::unlink()>:
c000d55e:	83 ec 0c             	sub    esp,0xc
c000d561:	b8 0b 00 00 00       	mov    eax,0xb
c000d566:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d56a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d571:	80 f9 19             	cmp    cl,0x19
c000d574:	77 2f                	ja     c000d5a5 <Directory::unlink()+0x47>
c000d576:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d57d:	85 c9                	test   ecx,ecx
c000d57f:	74 24                	je     c000d5a5 <Directory::unlink()+0x47>
c000d581:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d587:	85 c9                	test   ecx,ecx
c000d589:	74 1a                	je     c000d5a5 <Directory::unlink()+0x47>
c000d58b:	b8 06 00 00 00       	mov    eax,0x6
c000d590:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d594:	75 0f                	jne    c000d5a5 <Directory::unlink()+0x47>
c000d596:	83 c2 0d             	add    edx,0xd
c000d599:	50                   	push   eax
c000d59a:	50                   	push   eax
c000d59b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d59d:	52                   	push   edx
c000d59e:	51                   	push   ecx
c000d59f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	83 c4 0c             	add    esp,0xc
c000d5a8:	c3                   	ret    
c000d5a9:	90                   	nop

c000d5aa <Directory::rename(char const*)>:
c000d5aa:	83 ec 0c             	sub    esp,0xc
c000d5ad:	b8 0b 00 00 00       	mov    eax,0xb
c000d5b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5bd:	80 f9 19             	cmp    cl,0x19
c000d5c0:	77 32                	ja     c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5c2:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d5c9:	85 c9                	test   ecx,ecx
c000d5cb:	74 27                	je     c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5d3:	85 c9                	test   ecx,ecx
c000d5d5:	74 1d                	je     c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5d7:	b8 06 00 00 00       	mov    eax,0x6
c000d5dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5e0:	75 12                	jne    c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5e2:	83 c2 0d             	add    edx,0xd
c000d5e5:	50                   	push   eax
c000d5e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5ec:	52                   	push   edx
c000d5ed:	51                   	push   ecx
c000d5ee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 c4 0c             	add    esp,0xc
c000d5f7:	c3                   	ret    

c000d5f8 <Directory::exists()>:
c000d5f8:	83 ec 0c             	sub    esp,0xc
c000d5fb:	31 c0                	xor    eax,eax
c000d5fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d601:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d608:	80 f9 19             	cmp    cl,0x19
c000d60b:	77 24                	ja     c000d631 <Directory::exists()+0x39>
c000d60d:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d614:	85 c9                	test   ecx,ecx
c000d616:	74 19                	je     c000d631 <Directory::exists()+0x39>
c000d618:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61e:	85 c9                	test   ecx,ecx
c000d620:	74 0f                	je     c000d631 <Directory::exists()+0x39>
c000d622:	83 c2 0d             	add    edx,0xd
c000d625:	50                   	push   eax
c000d626:	50                   	push   eax
c000d627:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d629:	52                   	push   edx
c000d62a:	51                   	push   ecx
c000d62b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d62e:	83 c4 10             	add    esp,0x10
c000d631:	83 c4 0c             	add    esp,0xc
c000d634:	c3                   	ret    
c000d635:	90                   	nop

c000d636 <Directory::read(dirent*)>:
c000d636:	83 ec 1c             	sub    esp,0x1c
c000d639:	b8 0b 00 00 00       	mov    eax,0xb
c000d63e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d642:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d649:	80 fa 19             	cmp    dl,0x19
c000d64c:	77 30                	ja     c000d67e <Directory::read(dirent*)+0x48>
c000d64e:	8b 14 95 60 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96a0]
c000d655:	85 d2                	test   edx,edx
c000d657:	74 25                	je     c000d67e <Directory::read(dirent*)+0x48>
c000d659:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d660:	74 1c                	je     c000d67e <Directory::read(dirent*)+0x48>
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d667:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d66b:	52                   	push   edx
c000d66c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d670:	6a 00                	push   0x0
c000d672:	68 10 01 00 00       	push   0x110
c000d677:	51                   	push   ecx
c000d678:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d67b:	83 c4 20             	add    esp,0x20
c000d67e:	83 c4 1c             	add    esp,0x1c
c000d681:	c3                   	ret    

c000d682 <Directory::create()>:
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	b8 0b 00 00 00       	mov    eax,0xb
c000d68a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d68e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d695:	80 f9 19             	cmp    cl,0x19
c000d698:	77 2f                	ja     c000d6c9 <Directory::create()+0x47>
c000d69a:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c000d6a1:	85 c9                	test   ecx,ecx
c000d6a3:	74 24                	je     c000d6c9 <Directory::create()+0x47>
c000d6a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6ab:	85 c9                	test   ecx,ecx
c000d6ad:	74 1a                	je     c000d6c9 <Directory::create()+0x47>
c000d6af:	b8 06 00 00 00       	mov    eax,0x6
c000d6b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6b8:	75 0f                	jne    c000d6c9 <Directory::create()+0x47>
c000d6ba:	83 c2 0d             	add    edx,0xd
c000d6bd:	50                   	push   eax
c000d6be:	50                   	push   eax
c000d6bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6c1:	52                   	push   edx
c000d6c2:	51                   	push   ecx
c000d6c3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	83 c4 0c             	add    esp,0xc
c000d6cc:	c3                   	ret    
c000d6cd:	90                   	nop

c000d6ce <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d6ce:	b8 0a 00 00 00       	mov    eax,0xa
c000d6d3:	c3                   	ret    

c000d6d4 <Bus::Bus(char const*)>:
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6db:	83 ec 08             	sub    esp,0x8
c000d6de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e2:	50                   	push   eax
c000d6e3:	e8 8a 09 00 00       	call   c000e072 <Device::Device(char const*)>
c000d6e8:	83 c4 10             	add    esp,0x10
c000d6eb:	ba ac 31 02 c0       	mov    edx,0xc00231ac
c000d6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f4:	89 10                	mov    DWORD PTR [eax],edx
c000d6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d704:	90                   	nop
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	c3                   	ret    
c000d709:	90                   	nop
c000d70a:	66 90                	xchg   ax,ax

c000d70c <Bus::~Bus()>:
c000d70c:	83 ec 0c             	sub    esp,0xc
c000d70f:	ba ac 31 02 c0       	mov    edx,0xc00231ac
c000d714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d718:	89 10                	mov    DWORD PTR [eax],edx
c000d71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	50                   	push   eax
c000d722:	e8 15 06 00 00       	call   c000dd3c <Device::~Device()>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	90                   	nop
c000d72b:	83 c4 0c             	add    esp,0xc
c000d72e:	c3                   	ret    
c000d72f:	90                   	nop

c000d730 <Bus::~Bus()>:
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	83 ec 0c             	sub    esp,0xc
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	e8 cd ff ff ff       	call   c000d70c <Bus::~Bus()>
c000d73f:	83 c4 10             	add    esp,0x10
c000d742:	83 ec 08             	sub    esp,0x8
c000d745:	68 58 01 00 00       	push   0x158
c000d74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74e:	e8 f4 f1 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	83 c4 0c             	add    esp,0xc
c000d759:	c3                   	ret    
c000d75a:	66 90                	xchg   ax,ax

c000d75c <Buzzer::Buzzer(char const*)>:
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d763:	83 ec 08             	sub    esp,0x8
c000d766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76a:	50                   	push   eax
c000d76b:	e8 02 09 00 00       	call   c000e072 <Device::Device(char const*)>
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	ba d8 31 02 c0       	mov    edx,0xc00231d8
c000d778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77c:	89 10                	mov    DWORD PTR [eax],edx
c000d77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d782:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d79a:	90                   	nop
c000d79b:	83 c4 0c             	add    esp,0xc
c000d79e:	c3                   	ret    
c000d79f:	90                   	nop

c000d7a0 <Buzzer::~Buzzer()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba d8 31 02 c0       	mov    edx,0xc00231d8
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 81 05 00 00       	call   c000dd3c <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Buzzer::~Buzzer()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Buzzer::~Buzzer()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 5c 01 00 00       	push   0x15c
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 60 f1 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    

c000d7ee <Buzzer::stop()>:
c000d7ee:	83 ec 14             	sub    esp,0x14
c000d7f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7f7:	6a 00                	push   0x0
c000d7f9:	50                   	push   eax
c000d7fa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d7fd:	83 c4 1c             	add    esp,0x1c
c000d800:	c3                   	ret    

c000d801 <beepThread(void*)>:
c000d801:	53                   	push   ebx
c000d802:	83 ec 08             	sub    esp,0x8
c000d805:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000d80a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d80e:	48                   	dec    eax
c000d80f:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000d814:	75 02                	jne    c000d818 <beepThread(void*)+0x17>
c000d816:	fb                   	sti    
c000d817:	90                   	nop
c000d818:	83 ec 0c             	sub    esp,0xc
c000d81b:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d822:	50                   	push   eax
c000d823:	e8 8c a9 00 00       	call   c00181b4 <milliTenthSleep(unsigned int)>
c000d828:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d82b:	e8 be ff ff ff       	call   c000d7ee <Buzzer::stop()>
c000d830:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d838:	83 c4 18             	add    esp,0x18
c000d83b:	5b                   	pop    ebx
c000d83c:	e9 73 a8 00 00       	jmp    c00180b4 <blockTask(TaskState)>
c000d841:	90                   	nop

c000d842 <Buzzer::beep(int, int, bool)>:
c000d842:	57                   	push   edi
c000d843:	56                   	push   esi
c000d844:	53                   	push   ebx
c000d845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d849:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d84d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d851:	50                   	push   eax
c000d852:	50                   	push   eax
c000d853:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	53                   	push   ebx
c000d85a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	89 f8                	mov    eax,edi
c000d862:	84 c0                	test   al,al
c000d864:	74 1e                	je     c000d884 <Buzzer::beep(int, int, bool)+0x42>
c000d866:	83 ec 0c             	sub    esp,0xc
c000d869:	6b f6 0a             	imul   esi,esi,0xa
c000d86c:	56                   	push   esi
c000d86d:	e8 42 a9 00 00       	call   c00181b4 <milliTenthSleep(unsigned int)>
c000d872:	83 c4 10             	add    esp,0x10
c000d875:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d879:	5b                   	pop    ebx
c000d87a:	5e                   	pop    esi
c000d87b:	5f                   	pop    edi
c000d87c:	e9 6d ff ff ff       	jmp    c000d7ee <Buzzer::stop()>
c000d881:	8d 76 00             	lea    esi,[esi+0x0]
c000d884:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d88a:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000d88f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d897:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d89b:	c7 44 24 14 01 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d801
c000d8a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8a7:	5b                   	pop    ebx
c000d8a8:	5e                   	pop    esi
c000d8a9:	5f                   	pop    edi
c000d8aa:	e9 f1 a3 00 00       	jmp    c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c000d8af:	90                   	nop

c000d8b0 <User::loadClockSettings(int)>:
c000d8b0:	53                   	push   ebx
c000d8b1:	83 ec 14             	sub    esp,0x14
c000d8b4:	68 14 01 00 00       	push   0x114
c000d8b9:	e8 05 c1 ff ff       	call   c00099c3 <malloc>
c000d8be:	83 c4 0c             	add    esp,0xc
c000d8c1:	89 c3                	mov    ebx,eax
c000d8c3:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c000d8c9:	68 00 32 02 c0       	push   0xc0023200
c000d8ce:	50                   	push   eax
c000d8cf:	e8 be f6 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c000d8d4:	58                   	pop    eax
c000d8d5:	5a                   	pop    edx
c000d8d6:	6a 01                	push   0x1
c000d8d8:	53                   	push   ebx
c000d8d9:	e8 18 f7 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c000d8de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8e1:	e8 6e f7 ff ff       	call   c000d054 <File::close()>
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	85 db                	test   ebx,ebx
c000d8eb:	74 0f                	je     c000d8fc <User::loadClockSettings(int)+0x4c>
c000d8ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d8f6:	83 c4 08             	add    esp,0x8
c000d8f9:	5b                   	pop    ebx
c000d8fa:	ff e0                	jmp    eax
c000d8fc:	83 c4 08             	add    esp,0x8
c000d8ff:	5b                   	pop    ebx
c000d900:	c3                   	ret    
c000d901:	90                   	nop

c000d902 <Clock::Clock(char const*)>:
c000d902:	83 ec 0c             	sub    esp,0xc
c000d905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d909:	83 ec 08             	sub    esp,0x8
c000d90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d910:	50                   	push   eax
c000d911:	e8 5c 07 00 00       	call   c000e072 <Device::Device(char const*)>
c000d916:	83 c4 10             	add    esp,0x10
c000d919:	ba 28 32 02 c0       	mov    edx,0xc0023228
c000d91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d922:	89 10                	mov    DWORD PTR [eax],edx
c000d924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d928:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d932:	90                   	nop
c000d933:	83 c4 0c             	add    esp,0xc
c000d936:	c3                   	ret    
c000d937:	90                   	nop

c000d938 <Clock::~Clock()>:
c000d938:	83 ec 0c             	sub    esp,0xc
c000d93b:	ba 28 32 02 c0       	mov    edx,0xc0023228
c000d940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d944:	89 10                	mov    DWORD PTR [eax],edx
c000d946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94a:	83 ec 0c             	sub    esp,0xc
c000d94d:	50                   	push   eax
c000d94e:	e8 e9 03 00 00       	call   c000dd3c <Device::~Device()>
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	90                   	nop
c000d957:	83 c4 0c             	add    esp,0xc
c000d95a:	c3                   	ret    
c000d95b:	90                   	nop

c000d95c <Clock::~Clock()>:
c000d95c:	83 ec 0c             	sub    esp,0xc
c000d95f:	83 ec 0c             	sub    esp,0xc
c000d962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d966:	e8 cd ff ff ff       	call   c000d938 <Clock::~Clock()>
c000d96b:	83 c4 10             	add    esp,0x10
c000d96e:	83 ec 08             	sub    esp,0x8
c000d971:	68 58 01 00 00       	push   0x158
c000d976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97a:	e8 c8 ef ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000d97f:	83 c4 10             	add    esp,0x10
c000d982:	83 c4 0c             	add    esp,0xc
c000d985:	c3                   	ret    

c000d986 <Clock::timeInSecondsLocal()>:
c000d986:	53                   	push   ebx
c000d987:	83 ec 14             	sub    esp,0x14
c000d98a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d98e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d990:	50                   	push   eax
c000d991:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d994:	0f b6 0d dc 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc00264dc
c000d99b:	03 0d e0 64 02 c0    	add    ecx,DWORD PTR ds:0xc00264e0
c000d9a1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9a7:	89 cb                	mov    ebx,ecx
c000d9a9:	c1 fb 1f             	sar    ebx,0x1f
c000d9ac:	01 c8                	add    eax,ecx
c000d9ae:	11 da                	adc    edx,ebx
c000d9b0:	83 c4 10             	add    esp,0x10
c000d9b3:	31 c9                	xor    ecx,ecx
c000d9b5:	80 3d dd 64 02 c0 00 	cmp    BYTE PTR ds:0xc00264dd,0x0
c000d9bc:	74 05                	je     c000d9c3 <Clock::timeInSecondsLocal()+0x3d>
c000d9be:	b9 08 07 00 00       	mov    ecx,0x708
c000d9c3:	31 db                	xor    ebx,ebx
c000d9c5:	01 c8                	add    eax,ecx
c000d9c7:	11 da                	adc    edx,ebx
c000d9c9:	83 c4 08             	add    esp,0x8
c000d9cc:	5b                   	pop    ebx
c000d9cd:	c3                   	ret    

c000d9ce <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d9ce:	57                   	push   edi
c000d9cf:	56                   	push   esi
c000d9d0:	53                   	push   ebx
c000d9d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d9d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d9d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d9df:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d9e2:	0f b6 05 dc 64 02 c0 	movzx  eax,BYTE PTR ds:0xc00264dc
c000d9e9:	03 05 e0 64 02 c0    	add    eax,DWORD PTR ds:0xc00264e0
c000d9ef:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d9f5:	99                   	cdq    
c000d9f6:	29 c6                	sub    esi,eax
c000d9f8:	19 d7                	sbb    edi,edx
c000d9fa:	89 f0                	mov    eax,esi
c000d9fc:	89 fa                	mov    edx,edi
c000d9fe:	31 f6                	xor    esi,esi
c000da00:	80 3d dd 64 02 c0 00 	cmp    BYTE PTR ds:0xc00264dd,0x0
c000da07:	74 05                	je     c000da0e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da09:	be 08 07 00 00       	mov    esi,0x708
c000da0e:	31 ff                	xor    edi,edi
c000da10:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da14:	29 f0                	sub    eax,esi
c000da16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da1a:	19 fa                	sbb    edx,edi
c000da1c:	89 d8                	mov    eax,ebx
c000da1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da22:	5b                   	pop    ebx
c000da23:	5e                   	pop    esi
c000da24:	5f                   	pop    edi
c000da25:	ff e0                	jmp    eax

c000da27 <datetimeToSeconds(datetime_t)>:
c000da27:	55                   	push   ebp
c000da28:	57                   	push   edi
c000da29:	56                   	push   esi
c000da2a:	53                   	push   ebx
c000da2b:	83 ec 14             	sub    esp,0x14
c000da2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da32:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da36:	89 d3                	mov    ebx,edx
c000da38:	0f b6 c6             	movzx  eax,dh
c000da3b:	c1 eb 10             	shr    ebx,0x10
c000da3e:	48                   	dec    eax
c000da3f:	66 81 eb 6c 07       	sub    bx,0x76c
c000da44:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da48:	0f b6 f5             	movzx  esi,ch
c000da4b:	89 cf                	mov    edi,ecx
c000da4d:	6b f6 3c             	imul   esi,esi,0x3c
c000da50:	c1 ef 10             	shr    edi,0x10
c000da53:	0f b6 c9             	movzx  ecx,cl
c000da56:	89 f8                	mov    eax,edi
c000da58:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da5e:	0f b6 f8             	movzx  edi,al
c000da61:	0f b6 d2             	movzx  edx,dl
c000da64:	01 fe                	add    esi,edi
c000da66:	01 f1                	add    ecx,esi
c000da68:	0f b7 f3             	movzx  esi,bx
c000da6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000da6f:	c1 f9 1f             	sar    ecx,0x1f
c000da72:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000da77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da7b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000da80:	8b 0c 8d 60 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcda0]
c000da87:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000da8b:	76 29                	jbe    c000dab6 <datetimeToSeconds(datetime_t)+0x8f>
c000da8d:	f6 c3 03             	test   bl,0x3
c000da90:	75 24                	jne    c000dab6 <datetimeToSeconds(datetime_t)+0x8f>
c000da92:	31 d2                	xor    edx,edx
c000da94:	bf 64 00 00 00       	mov    edi,0x64
c000da99:	89 d8                	mov    eax,ebx
c000da9b:	66 f7 f7             	div    di
c000da9e:	66 85 d2             	test   dx,dx
c000daa1:	75 12                	jne    c000dab5 <datetimeToSeconds(datetime_t)+0x8e>
c000daa3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000daa9:	bf 90 01 00 00       	mov    edi,0x190
c000daae:	99                   	cdq    
c000daaf:	f7 ff                	idiv   edi
c000dab1:	85 d2                	test   edx,edx
c000dab3:	75 01                	jne    c000dab6 <datetimeToSeconds(datetime_t)+0x8f>
c000dab5:	41                   	inc    ecx
c000dab6:	66 83 fb 46          	cmp    bx,0x46
c000daba:	76 45                	jbe    c000db01 <datetimeToSeconds(datetime_t)+0xda>
c000dabc:	bb 46 00 00 00       	mov    ebx,0x46
c000dac1:	bf 64 00 00 00       	mov    edi,0x64
c000dac6:	bd 90 01 00 00       	mov    ebp,0x190
c000dacb:	b8 6d 01 00 00       	mov    eax,0x16d
c000dad0:	f6 c3 03             	test   bl,0x3
c000dad3:	75 23                	jne    c000daf8 <datetimeToSeconds(datetime_t)+0xd1>
c000dad5:	89 d8                	mov    eax,ebx
c000dad7:	99                   	cdq    
c000dad8:	f7 ff                	idiv   edi
c000dada:	b8 6e 01 00 00       	mov    eax,0x16e
c000dadf:	85 d2                	test   edx,edx
c000dae1:	75 15                	jne    c000daf8 <datetimeToSeconds(datetime_t)+0xd1>
c000dae3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dae9:	99                   	cdq    
c000daea:	f7 fd                	idiv   ebp
c000daec:	83 fa 01             	cmp    edx,0x1
c000daef:	19 c0                	sbb    eax,eax
c000daf1:	f7 d0                	not    eax
c000daf3:	05 6e 01 00 00       	add    eax,0x16e
c000daf8:	01 c1                	add    ecx,eax
c000dafa:	43                   	inc    ebx
c000dafb:	39 f3                	cmp    ebx,esi
c000dafd:	7c cc                	jl     c000dacb <datetimeToSeconds(datetime_t)+0xa4>
c000daff:	eb 35                	jmp    c000db36 <datetimeToSeconds(datetime_t)+0x10f>
c000db01:	74 33                	je     c000db36 <datetimeToSeconds(datetime_t)+0x10f>
c000db03:	b8 45 00 00 00       	mov    eax,0x45
c000db08:	89 c2                	mov    edx,eax
c000db0a:	83 e2 03             	and    edx,0x3
c000db0d:	39 f0                	cmp    eax,esi
c000db0f:	7e 0f                	jle    c000db20 <datetimeToSeconds(datetime_t)+0xf9>
c000db11:	83 fa 01             	cmp    edx,0x1
c000db14:	19 d2                	sbb    edx,edx
c000db16:	48                   	dec    eax
c000db17:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db1e:	eb e8                	jmp    c000db08 <datetimeToSeconds(datetime_t)+0xe1>
c000db20:	b8 6d 01 00 00       	mov    eax,0x16d
c000db25:	85 d2                	test   edx,edx
c000db27:	75 0b                	jne    c000db34 <datetimeToSeconds(datetime_t)+0x10d>
c000db29:	66 83 fb 01          	cmp    bx,0x1
c000db2d:	19 c0                	sbb    eax,eax
c000db2f:	05 6e 01 00 00       	add    eax,0x16e
c000db34:	29 c1                	sub    ecx,eax
c000db36:	b8 80 51 01 00       	mov    eax,0x15180
c000db3b:	f7 e9                	imul   ecx
c000db3d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db41:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db45:	83 c4 14             	add    esp,0x14
c000db48:	5b                   	pop    ebx
c000db49:	5e                   	pop    esi
c000db4a:	5f                   	pop    edi
c000db4b:	5d                   	pop    ebp
c000db4c:	c3                   	ret    
c000db4d:	90                   	nop

c000db4e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db4e:	57                   	push   edi
c000db4f:	56                   	push   esi
c000db50:	53                   	push   ebx
c000db51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db55:	8b 06                	mov    eax,DWORD PTR [esi]
c000db57:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db62:	e8 c0 fe ff ff       	call   c000da27 <datetimeToSeconds(datetime_t)>
c000db67:	59                   	pop    ecx
c000db68:	0f b6 0d dc 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc00264dc
c000db6f:	5b                   	pop    ebx
c000db70:	03 0d e0 64 02 c0    	add    ecx,DWORD PTR ds:0xc00264e0
c000db76:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000db7c:	89 cb                	mov    ebx,ecx
c000db7e:	c1 fb 1f             	sar    ebx,0x1f
c000db81:	29 c8                	sub    eax,ecx
c000db83:	19 da                	sbb    edx,ebx
c000db85:	31 c9                	xor    ecx,ecx
c000db87:	80 3d dd 64 02 c0 00 	cmp    BYTE PTR ds:0xc00264dd,0x0
c000db8e:	74 05                	je     c000db95 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000db90:	b9 08 07 00 00       	mov    ecx,0x708
c000db95:	31 db                	xor    ebx,ebx
c000db97:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000db9b:	29 c8                	sub    eax,ecx
c000db9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dba1:	19 da                	sbb    edx,ebx
c000dba3:	89 f8                	mov    eax,edi
c000dba5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dba9:	5b                   	pop    ebx
c000dbaa:	5e                   	pop    esi
c000dbab:	5f                   	pop    edi
c000dbac:	ff e0                	jmp    eax

c000dbae <secondsToDatetime(unsigned long long)>:
c000dbae:	55                   	push   ebp
c000dbaf:	57                   	push   edi
c000dbb0:	56                   	push   esi
c000dbb1:	53                   	push   ebx
c000dbb2:	83 ec 1c             	sub    esp,0x1c
c000dbb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dbbd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbc1:	6a 00                	push   0x0
c000dbc3:	68 80 51 01 00       	push   0x15180
c000dbc8:	55                   	push   ebp
c000dbc9:	57                   	push   edi
c000dbca:	e8 15 33 01 00       	call   c0020ee4 <__udivdi3>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dbd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbdc:	6a 00                	push   0x0
c000dbde:	68 80 51 01 00       	push   0x15180
c000dbe3:	55                   	push   ebp
c000dbe4:	57                   	push   edi
c000dbe5:	bf 10 0e 00 00       	mov    edi,0xe10
c000dbea:	e8 f5 33 01 00       	call   c0020fe4 <__umoddi3>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	99                   	cdq    
c000dbf3:	f7 ff                	idiv   edi
c000dbf5:	bf 3c 00 00 00       	mov    edi,0x3c
c000dbfa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dbfd:	89 d0                	mov    eax,edx
c000dbff:	99                   	cdq    
c000dc00:	f7 ff                	idiv   edi
c000dc02:	85 db                	test   ebx,ebx
c000dc04:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc07:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc0a:	79 11                	jns    c000dc1d <secondsToDatetime(unsigned long long)+0x6f>
c000dc0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc10:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc16:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc1b:	eb 07                	jmp    c000dc24 <secondsToDatetime(unsigned long long)+0x76>
c000dc1d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc22:	89 d8                	mov    eax,ebx
c000dc24:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc29:	99                   	cdq    
c000dc2a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc2f:	f7 f9                	idiv   ecx
c000dc31:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc3a:	31 d2                	xor    edx,edx
c000dc3c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc44:	01 c3                	add    ebx,eax
c000dc46:	89 d8                	mov    eax,ebx
c000dc48:	f7 f1                	div    ecx
c000dc4a:	31 d2                	xor    edx,edx
c000dc4c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc4f:	89 d8                	mov    eax,ebx
c000dc51:	f7 f7                	div    edi
c000dc53:	31 d2                	xor    edx,edx
c000dc55:	29 c1                	sub    ecx,eax
c000dc57:	89 d8                	mov    eax,ebx
c000dc59:	f7 f5                	div    ebp
c000dc5b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dc60:	29 c1                	sub    ecx,eax
c000dc62:	31 d2                	xor    edx,edx
c000dc64:	89 c8                	mov    eax,ecx
c000dc66:	f7 f5                	div    ebp
c000dc68:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dc6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc71:	31 d2                	xor    edx,edx
c000dc73:	89 c8                	mov    eax,ecx
c000dc75:	f7 f5                	div    ebp
c000dc77:	31 d2                	xor    edx,edx
c000dc79:	01 c3                	add    ebx,eax
c000dc7b:	89 c8                	mov    eax,ecx
c000dc7d:	f7 f7                	div    edi
c000dc7f:	bf 99 00 00 00       	mov    edi,0x99
c000dc84:	29 c3                	sub    ebx,eax
c000dc86:	31 d2                	xor    edx,edx
c000dc88:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dc90:	29 c3                	sub    ebx,eax
c000dc92:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dc95:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dc98:	bb 05 00 00 00       	mov    ebx,0x5
c000dc9d:	83 c1 02             	add    ecx,0x2
c000dca0:	89 c8                	mov    eax,ecx
c000dca2:	f7 f7                	div    edi
c000dca4:	31 d2                	xor    edx,edx
c000dca6:	89 c7                	mov    edi,eax
c000dca8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcae:	83 c0 02             	add    eax,0x2
c000dcb1:	f7 f3                	div    ebx
c000dcb3:	89 eb                	mov    ebx,ebp
c000dcb5:	29 c3                	sub    ebx,eax
c000dcb7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dcbd:	88 1e                	mov    BYTE PTR [esi],bl
c000dcbf:	19 c0                	sbb    eax,eax
c000dcc1:	31 d2                	xor    edx,edx
c000dcc3:	83 e0 0c             	and    eax,0xc
c000dcc6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dcca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dcd2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcd6:	83 f9 01             	cmp    ecx,0x1
c000dcd9:	0f 96 c2             	setbe  dl
c000dcdc:	41                   	inc    ecx
c000dcdd:	01 d0                	add    eax,edx
c000dcdf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dce2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dce6:	83 c4 1c             	add    esp,0x1c
c000dce9:	89 f0                	mov    eax,esi
c000dceb:	5b                   	pop    ebx
c000dcec:	5e                   	pop    esi
c000dced:	5f                   	pop    edi
c000dcee:	5d                   	pop    ebp
c000dcef:	c2 04 00             	ret    0x4

c000dcf2 <Clock::timeInDatetimeLocal()>:
c000dcf2:	53                   	push   ebx
c000dcf3:	83 ec 14             	sub    esp,0x14
c000dcf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dcfa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dcfe:	e8 83 fc ff ff       	call   c000d986 <Clock::timeInSecondsLocal()>
c000dd03:	83 c4 0c             	add    esp,0xc
c000dd06:	52                   	push   edx
c000dd07:	50                   	push   eax
c000dd08:	53                   	push   ebx
c000dd09:	e8 a0 fe ff ff       	call   c000dbae <secondsToDatetime(unsigned long long)>
c000dd0e:	89 d8                	mov    eax,ebx
c000dd10:	83 c4 14             	add    esp,0x14
c000dd13:	5b                   	pop    ebx
c000dd14:	c2 04 00             	ret    0x4
c000dd17:	90                   	nop

c000dd18 <Device::hibernate()>:
c000dd18:	c3                   	ret    
c000dd19:	90                   	nop

c000dd1a <Device::wake()>:
c000dd1a:	c3                   	ret    
c000dd1b:	90                   	nop

c000dd1c <Device::detect()>:
c000dd1c:	c3                   	ret    
c000dd1d:	90                   	nop

c000dd1e <Device::disableLegacy()>:
c000dd1e:	c3                   	ret    
c000dd1f:	90                   	nop

c000dd20 <Device::powerSaving(PowerSavingLevel)>:
c000dd20:	c3                   	ret    
c000dd21:	90                   	nop

c000dd22 <DriverlessDevice::close(int, int, void*)>:
c000dd22:	31 c0                	xor    eax,eax
c000dd24:	c3                   	ret    
c000dd25:	90                   	nop

c000dd26 <DriverlessDevice::detect()>:
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <DriverlessDevice::open(int, int, void*)>:
c000dd28:	83 ec 18             	sub    esp,0x18
c000dd2b:	68 90 32 02 c0       	push   0xc0023290
c000dd30:	e8 b4 65 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000dd35:	83 c8 ff             	or     eax,0xffffffff
c000dd38:	83 c4 1c             	add    esp,0x1c
c000dd3b:	c3                   	ret    

c000dd3c <Device::~Device()>:
c000dd3c:	ba f0 32 02 c0       	mov    edx,0xc00232f0
c000dd41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd45:	89 10                	mov    DWORD PTR [eax],edx
c000dd47:	90                   	nop
c000dd48:	c3                   	ret    
c000dd49:	90                   	nop

c000dd4a <Device::~Device()>:
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd51:	e8 e6 ff ff ff       	call   c000dd3c <Device::~Device()>
c000dd56:	83 c4 04             	add    esp,0x4
c000dd59:	83 ec 08             	sub    esp,0x8
c000dd5c:	68 58 01 00 00       	push   0x158
c000dd61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd65:	e8 dd eb ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000dd6a:	83 c4 10             	add    esp,0x10
c000dd6d:	83 c4 0c             	add    esp,0xc
c000dd70:	c3                   	ret    
c000dd71:	90                   	nop

c000dd72 <Device::findAndLoadDriver()>:
c000dd72:	c7 44 24 04 ae 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232ae
c000dd7a:	e9 a9 ec ff ff       	jmp    c000ca28 <Dbg::kprintf(char const*, ...)>
c000dd7f:	90                   	nop

c000dd80 <Device::preOpenPCI(PCIDeviceInfo)>:
c000dd80:	57                   	push   edi
c000dd81:	b9 09 00 00 00       	mov    ecx,0x9
c000dd86:	56                   	push   esi
c000dd87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dd8b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dd8f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dd99:	81 c7 18 01 00 00    	add    edi,0x118
c000dd9f:	fc                   	cld    
c000dda0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dda2:	5e                   	pop    esi
c000dda3:	5f                   	pop    edi
c000dda4:	c3                   	ret    
c000dda5:	90                   	nop

c000dda6 <Device::preOpenACPI(void*, char*, char*)>:
c000dda6:	57                   	push   edi
c000dda7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ddac:	56                   	push   esi
c000ddad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddb5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ddbf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ddc5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ddcb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ddcf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddd1:	b9 0e 00 00 00       	mov    ecx,0xe
c000ddd6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000dddc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dde0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dde2:	5e                   	pop    esi
c000dde3:	5f                   	pop    edi
c000dde4:	c3                   	ret    
c000dde5:	90                   	nop

c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000dde6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000ddef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000ddf6:	75 0b                	jne    c000de03 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000ddf8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddfa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ddfe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de01:	eb 1e                	jmp    c000de21 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de03:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000de08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de0e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de14:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de1e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de21:	ff e0                	jmp    eax
c000de23:	90                   	nop

c000de24 <Device::getParent()>:
c000de24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de28:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de2e:	c3                   	ret    
c000de2f:	90                   	nop

c000de30 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de34:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de39:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de40:	75 0b                	jne    c000de4d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de42:	8b 00                	mov    eax,DWORD PTR [eax]
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de4b:	eb 1e                	jmp    c000de6b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de4d:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000de52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de58:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de60:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de68:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000de6b:	ff e0                	jmp    eax
c000de6d:	90                   	nop

c000de6e <Device::addChild(Device*)>:
c000de6e:	53                   	push   ebx
c000de6f:	83 ec 08             	sub    esp,0x8
c000de72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de7a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000de80:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000de86:	8b 13                	mov    edx,DWORD PTR [ebx]
c000de88:	85 d2                	test   edx,edx
c000de8a:	74 04                	je     c000de90 <Device::addChild(Device*)+0x22>
c000de8c:	89 d3                	mov    ebx,edx
c000de8e:	eb f6                	jmp    c000de86 <Device::addChild(Device*)+0x18>
c000de90:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000de93:	83 ec 0c             	sub    esp,0xc
c000de96:	6a 08                	push   0x8
c000de98:	e8 26 bb ff ff       	call   c00099c3 <malloc>
c000de9d:	89 03                	mov    DWORD PTR [ebx],eax
c000de9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dea5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000deac:	83 c4 18             	add    esp,0x18
c000deaf:	5b                   	pop    ebx
c000deb0:	c3                   	ret    
c000deb1:	90                   	nop

c000deb2 <Device::removeAllChildren()>:
c000deb2:	56                   	push   esi
c000deb3:	53                   	push   ebx
c000deb4:	52                   	push   edx
c000deb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000deb9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000debf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dec2:	74 17                	je     c000dedb <Device::removeAllChildren()+0x29>
c000dec4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dec7:	85 c0                	test   eax,eax
c000dec9:	74 0c                	je     c000ded7 <Device::removeAllChildren()+0x25>
c000decb:	83 ec 0c             	sub    esp,0xc
c000dece:	8b 10                	mov    edx,DWORD PTR [eax]
c000ded0:	50                   	push   eax
c000ded1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ded9:	eb e4                	jmp    c000debf <Device::removeAllChildren()+0xd>
c000dedb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dee1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dee7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000deed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000def4:	58                   	pop    eax
c000def5:	5b                   	pop    ebx
c000def6:	5e                   	pop    esi
c000def7:	c3                   	ret    

c000def8 <Device::hibernateAll()>:
c000def8:	53                   	push   ebx
c000def9:	83 ec 14             	sub    esp,0x14
c000defc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df00:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df02:	53                   	push   ebx
c000df03:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df06:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df0c:	83 c4 10             	add    esp,0x10
c000df0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df12:	74 0f                	je     c000df23 <Device::hibernateAll()+0x2b>
c000df14:	83 ec 0c             	sub    esp,0xc
c000df17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df1a:	e8 d9 ff ff ff       	call   c000def8 <Device::hibernateAll()>
c000df1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df21:	eb e9                	jmp    c000df0c <Device::hibernateAll()+0x14>
c000df23:	83 c4 08             	add    esp,0x8
c000df26:	5b                   	pop    ebx
c000df27:	c3                   	ret    

c000df28 <Device::wakeAll()>:
c000df28:	53                   	push   ebx
c000df29:	83 ec 14             	sub    esp,0x14
c000df2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df30:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df32:	53                   	push   ebx
c000df33:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df3c:	83 c4 10             	add    esp,0x10
c000df3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df42:	74 0f                	je     c000df53 <Device::wakeAll()+0x2b>
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df4a:	e8 d9 ff ff ff       	call   c000df28 <Device::wakeAll()>
c000df4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df51:	eb e9                	jmp    c000df3c <Device::wakeAll()+0x14>
c000df53:	83 c4 08             	add    esp,0x8
c000df56:	5b                   	pop    ebx
c000df57:	c3                   	ret    

c000df58 <Device::detectAll()>:
c000df58:	53                   	push   ebx
c000df59:	83 ec 14             	sub    esp,0x14
c000df5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df62:	53                   	push   ebx
c000df63:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000df66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df72:	74 0f                	je     c000df83 <Device::detectAll()+0x2b>
c000df74:	83 ec 0c             	sub    esp,0xc
c000df77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df7a:	e8 d9 ff ff ff       	call   c000df58 <Device::detectAll()>
c000df7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df81:	eb e9                	jmp    c000df6c <Device::detectAll()+0x14>
c000df83:	83 c4 08             	add    esp,0x8
c000df86:	5b                   	pop    ebx
c000df87:	c3                   	ret    

c000df88 <Device::disableLegacyAll()>:
c000df88:	53                   	push   ebx
c000df89:	83 ec 14             	sub    esp,0x14
c000df8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df90:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df92:	53                   	push   ebx
c000df93:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000df96:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfa2:	74 0f                	je     c000dfb3 <Device::disableLegacyAll()+0x2b>
c000dfa4:	83 ec 0c             	sub    esp,0xc
c000dfa7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfaa:	e8 d9 ff ff ff       	call   c000df88 <Device::disableLegacyAll()>
c000dfaf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfb1:	eb e9                	jmp    c000df9c <Device::disableLegacyAll()+0x14>
c000dfb3:	83 c4 08             	add    esp,0x8
c000dfb6:	5b                   	pop    ebx
c000dfb7:	c3                   	ret    

c000dfb8 <Device::loadDriversForAll()>:
c000dfb8:	53                   	push   ebx
c000dfb9:	83 ec 08             	sub    esp,0x8
c000dfbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfc0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dfc7:	75 0c                	jne    c000dfd5 <Device::loadDriversForAll()+0x1d>
c000dfc9:	83 ec 0c             	sub    esp,0xc
c000dfcc:	53                   	push   ebx
c000dfcd:	e8 a0 fd ff ff       	call   c000dd72 <Device::findAndLoadDriver()>
c000dfd2:	83 c4 10             	add    esp,0x10
c000dfd5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfdb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfde:	74 12                	je     c000dff2 <Device::loadDriversForAll()+0x3a>
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfe6:	e8 cd ff ff ff       	call   c000dfb8 <Device::loadDriversForAll()>
c000dfeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfed:	83 c4 10             	add    esp,0x10
c000dff0:	eb e9                	jmp    c000dfdb <Device::loadDriversForAll()+0x23>
c000dff2:	83 c4 08             	add    esp,0x8
c000dff5:	5b                   	pop    ebx
c000dff6:	c3                   	ret    
c000dff7:	90                   	nop

c000dff8 <Device::closeAll()>:
c000dff8:	53                   	push   ebx
c000dff9:	83 ec 08             	sub    esp,0x8
c000dffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e000:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e002:	6a 00                	push   0x0
c000e004:	6a 00                	push   0x0
c000e006:	6a 00                	push   0x0
c000e008:	53                   	push   ebx
c000e009:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e00c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e012:	83 c4 10             	add    esp,0x10
c000e015:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e018:	74 0f                	je     c000e029 <Device::closeAll()+0x31>
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e020:	e8 d3 ff ff ff       	call   c000dff8 <Device::closeAll()>
c000e025:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e027:	eb e9                	jmp    c000e012 <Device::closeAll()+0x1a>
c000e029:	83 c4 08             	add    esp,0x8
c000e02c:	5b                   	pop    ebx
c000e02d:	c3                   	ret    

c000e02e <Device::powerSavingAll(PowerSavingLevel)>:
c000e02e:	56                   	push   esi
c000e02f:	53                   	push   ebx
c000e030:	83 ec 0c             	sub    esp,0xc
c000e033:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e037:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e03b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03d:	56                   	push   esi
c000e03e:	53                   	push   ebx
c000e03f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e042:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e04e:	74 0f                	je     c000e05f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e050:	52                   	push   edx
c000e051:	52                   	push   edx
c000e052:	56                   	push   esi
c000e053:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e056:	e8 d3 ff ff ff       	call   c000e02e <Device::powerSavingAll(PowerSavingLevel)>
c000e05b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e05d:	eb e9                	jmp    c000e048 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e05f:	58                   	pop    eax
c000e060:	5b                   	pop    ebx
c000e061:	5e                   	pop    esi
c000e062:	c3                   	ret    
c000e063:	90                   	nop

c000e064 <Device::setName(char const*)>:
c000e064:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e06c:	e9 cf 26 ff ff       	jmp    c0000740 <strcpy>
c000e071:	90                   	nop

c000e072 <Device::Device(char const*)>:
c000e072:	83 ec 1c             	sub    esp,0x1c
c000e075:	ba f0 32 02 c0       	mov    edx,0xc00232f0
c000e07a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07e:	89 10                	mov    DWORD PTR [eax],edx
c000e080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e084:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e08e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e092:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e09c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0b8:	83 ec 08             	sub    esp,0x8
c000e0bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c3:	e8 9c ff ff ff       	call   c000e064 <Device::setName(char const*)>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e0d3:	83 ec 0c             	sub    esp,0xc
c000e0d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0da:	e8 e4 b8 ff ff       	call   c00099c3 <malloc>
c000e0df:	83 c4 10             	add    esp,0x10
c000e0e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e0f3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e0f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0fd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e103:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e10d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e113:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e11a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e11e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e129:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e134:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e13e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e142:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e14c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e150:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e15a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e15e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e168:	90                   	nop
c000e169:	83 c4 1c             	add    esp,0x1c
c000e16c:	c3                   	ret    
c000e16d:	90                   	nop

c000e16e <Device::getName()>:
c000e16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e172:	05 d0 00 00 00       	add    eax,0xd0
c000e177:	c3                   	ret    

c000e178 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e17f:	83 ec 08             	sub    esp,0x8
c000e182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e186:	50                   	push   eax
c000e187:	e8 e6 fe ff ff       	call   c000e072 <Device::Device(char const*)>
c000e18c:	83 c4 10             	add    esp,0x10
c000e18f:	ba 1c 33 02 c0       	mov    edx,0xc002331c
c000e194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e198:	89 10                	mov    DWORD PTR [eax],edx
c000e19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e19e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1a8:	90                   	nop
c000e1a9:	83 c4 0c             	add    esp,0xc
c000e1ac:	c3                   	ret    
c000e1ad:	90                   	nop

c000e1ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1ae:	57                   	push   edi
c000e1af:	56                   	push   esi
c000e1b0:	53                   	push   ebx
c000e1b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1bd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e1c3:	75 0c                	jne    c000e1d1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e1c5:	52                   	push   edx
c000e1c6:	52                   	push   edx
c000e1c7:	53                   	push   ebx
c000e1c8:	56                   	push   esi
c000e1c9:	e8 c8 31 01 00       	call   c0021396 <LinkedList<Device>::addElement(Device*)>
c000e1ce:	83 c4 10             	add    esp,0x10
c000e1d1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1da:	74 12                	je     c000e1ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e1dc:	50                   	push   eax
c000e1dd:	57                   	push   edi
c000e1de:	56                   	push   esi
c000e1df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1e2:	e8 c7 ff ff ff       	call   c000e1ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e1e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1e9:	83 c4 10             	add    esp,0x10
c000e1ec:	eb e9                	jmp    c000e1d7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e1ee:	5b                   	pop    ebx
c000e1ef:	5e                   	pop    esi
c000e1f0:	5f                   	pop    edi
c000e1f1:	c3                   	ret    

c000e1f2 <getDevicesOfType(DeviceType)>:
c000e1f2:	53                   	push   ebx
c000e1f3:	83 ec 14             	sub    esp,0x14
c000e1f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1fa:	53                   	push   ebx
c000e1fb:	e8 72 32 01 00       	call   c0021472 <LinkedList<Device>::LinkedList()>
c000e200:	83 c4 0c             	add    esp,0xc
c000e203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e207:	53                   	push   ebx
c000e208:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c000e20e:	e8 9b ff ff ff       	call   c000e1ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e213:	89 d8                	mov    eax,ebx
c000e215:	83 c4 18             	add    esp,0x18
c000e218:	5b                   	pop    ebx
c000e219:	c2 04 00             	ret    0x4

c000e21c <HardDiskController::HardDiskController(char const*)>:
c000e21c:	83 ec 0c             	sub    esp,0xc
c000e21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e223:	83 ec 08             	sub    esp,0x8
c000e226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22a:	50                   	push   eax
c000e22b:	e8 42 fe ff ff       	call   c000e072 <Device::Device(char const*)>
c000e230:	83 c4 10             	add    esp,0x10
c000e233:	ba 48 33 02 c0       	mov    edx,0xc0023348
c000e238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e23c:	89 10                	mov    DWORD PTR [eax],edx
c000e23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e242:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e24c:	90                   	nop
c000e24d:	83 c4 0c             	add    esp,0xc
c000e250:	c3                   	ret    
c000e251:	90                   	nop
c000e252:	66 90                	xchg   ax,ax

c000e254 <HardDiskController::~HardDiskController()>:
c000e254:	83 ec 0c             	sub    esp,0xc
c000e257:	ba 48 33 02 c0       	mov    edx,0xc0023348
c000e25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e260:	89 10                	mov    DWORD PTR [eax],edx
c000e262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e266:	83 ec 0c             	sub    esp,0xc
c000e269:	50                   	push   eax
c000e26a:	e8 cd fa ff ff       	call   c000dd3c <Device::~Device()>
c000e26f:	83 c4 10             	add    esp,0x10
c000e272:	90                   	nop
c000e273:	83 c4 0c             	add    esp,0xc
c000e276:	c3                   	ret    
c000e277:	90                   	nop

c000e278 <HardDiskController::~HardDiskController()>:
c000e278:	83 ec 0c             	sub    esp,0xc
c000e27b:	83 ec 0c             	sub    esp,0xc
c000e27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e282:	e8 cd ff ff ff       	call   c000e254 <HardDiskController::~HardDiskController()>
c000e287:	83 c4 10             	add    esp,0x10
c000e28a:	83 ec 08             	sub    esp,0x8
c000e28d:	68 58 01 00 00       	push   0x158
c000e292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e296:	e8 ac e6 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e29b:	83 c4 10             	add    esp,0x10
c000e29e:	83 c4 0c             	add    esp,0xc
c000e2a1:	c3                   	ret    

c000e2a2 <PhysicalDisk::eject()>:
c000e2a2:	83 c8 ff             	or     eax,0xffffffff
c000e2a5:	c3                   	ret    

c000e2a6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2a6:	83 ec 0c             	sub    esp,0xc
c000e2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ad:	83 ec 08             	sub    esp,0x8
c000e2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b4:	50                   	push   eax
c000e2b5:	e8 b8 fd ff ff       	call   c000e072 <Device::Device(char const*)>
c000e2ba:	83 c4 10             	add    esp,0x10
c000e2bd:	ba 74 33 02 c0       	mov    edx,0xc0023374
c000e2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c6:	89 10                	mov    DWORD PTR [eax],edx
c000e2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e2f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e308:	90                   	nop
c000e309:	83 c4 0c             	add    esp,0xc
c000e30c:	c3                   	ret    
c000e30d:	90                   	nop

c000e30e <PhysicalDisk::startCache()>:
c000e30e:	56                   	push   esi
c000e30f:	53                   	push   ebx
c000e310:	83 ec 10             	sub    esp,0x10
c000e313:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e317:	6a 44                	push   0x44
c000e319:	e8 a5 b6 ff ff       	call   c00099c3 <malloc>
c000e31e:	89 c6                	mov    esi,eax
c000e320:	58                   	pop    eax
c000e321:	5a                   	pop    edx
c000e322:	53                   	push   ebx
c000e323:	56                   	push   esi
c000e324:	e8 2f 26 00 00       	call   c0010958 <VCache::VCache(PhysicalDisk*)>
c000e329:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e32f:	83 c4 14             	add    esp,0x14
c000e332:	5b                   	pop    ebx
c000e333:	5e                   	pop    esi
c000e334:	c3                   	ret    
c000e335:	90                   	nop

c000e336 <PhysicalDisk::~PhysicalDisk()>:
c000e336:	83 ec 0c             	sub    esp,0xc
c000e339:	ba 74 33 02 c0       	mov    edx,0xc0023374
c000e33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e342:	89 10                	mov    DWORD PTR [eax],edx
c000e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e348:	83 ec 0c             	sub    esp,0xc
c000e34b:	50                   	push   eax
c000e34c:	e8 eb f9 ff ff       	call   c000dd3c <Device::~Device()>
c000e351:	83 c4 10             	add    esp,0x10
c000e354:	90                   	nop
c000e355:	83 c4 0c             	add    esp,0xc
c000e358:	c3                   	ret    
c000e359:	90                   	nop

c000e35a <PhysicalDisk::~PhysicalDisk()>:
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	83 ec 0c             	sub    esp,0xc
c000e360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e364:	e8 cd ff ff ff       	call   c000e336 <PhysicalDisk::~PhysicalDisk()>
c000e369:	83 c4 10             	add    esp,0x10
c000e36c:	83 ec 08             	sub    esp,0x8
c000e36f:	68 6c 01 00 00       	push   0x16c
c000e374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e378:	e8 ca e5 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e37d:	83 c4 10             	add    esp,0x10
c000e380:	83 c4 0c             	add    esp,0xc
c000e383:	c3                   	ret    

c000e384 <FPU::FPU(char const*)>:
c000e384:	83 ec 0c             	sub    esp,0xc
c000e387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38b:	83 ec 08             	sub    esp,0x8
c000e38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e392:	50                   	push   eax
c000e393:	e8 da fc ff ff       	call   c000e072 <Device::Device(char const*)>
c000e398:	83 c4 10             	add    esp,0x10
c000e39b:	ba b8 33 02 c0       	mov    edx,0xc00233b8
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	89 10                	mov    DWORD PTR [eax],edx
c000e3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3b4:	90                   	nop
c000e3b5:	83 c4 0c             	add    esp,0xc
c000e3b8:	c3                   	ret    
c000e3b9:	90                   	nop
c000e3ba:	66 90                	xchg   ax,ax

c000e3bc <FPU::~FPU()>:
c000e3bc:	83 ec 0c             	sub    esp,0xc
c000e3bf:	ba b8 33 02 c0       	mov    edx,0xc00233b8
c000e3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ce:	83 ec 0c             	sub    esp,0xc
c000e3d1:	50                   	push   eax
c000e3d2:	e8 65 f9 ff ff       	call   c000dd3c <Device::~Device()>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	90                   	nop
c000e3db:	83 c4 0c             	add    esp,0xc
c000e3de:	c3                   	ret    
c000e3df:	90                   	nop

c000e3e0 <FPU::~FPU()>:
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	83 ec 0c             	sub    esp,0xc
c000e3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ea:	e8 cd ff ff ff       	call   c000e3bc <FPU::~FPU()>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	83 ec 08             	sub    esp,0x8
c000e3f5:	68 58 01 00 00       	push   0x158
c000e3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3fe:	e8 44 e5 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e403:	83 c4 10             	add    esp,0x10
c000e406:	83 c4 0c             	add    esp,0xc
c000e409:	c3                   	ret    

c000e40a <setupFPU()>:
c000e40a:	53                   	push   ebx
c000e40b:	83 ec 08             	sub    esp,0x8
c000e40e:	8b 15 68 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026368
c000e414:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e41b:	74 1b                	je     c000e438 <setupFPU()+0x2e>
c000e41d:	83 ec 0c             	sub    esp,0xc
c000e420:	68 58 01 00 00       	push   0x158
c000e425:	e8 99 b5 ff ff       	call   c00099c3 <malloc>
c000e42a:	89 c3                	mov    ebx,eax
c000e42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e42f:	e8 48 16 01 00       	call   c001fa7c <AVX::AVX()>
c000e434:	eb 62                	jmp    c000e498 <setupFPU()+0x8e>
c000e436:	66 90                	xchg   ax,ax
c000e438:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e43e:	84 c0                	test   al,al
c000e440:	79 1a                	jns    c000e45c <setupFPU()+0x52>
c000e442:	83 ec 0c             	sub    esp,0xc
c000e445:	68 58 01 00 00       	push   0x158
c000e44a:	e8 74 b5 ff ff       	call   c00099c3 <malloc>
c000e44f:	89 c3                	mov    ebx,eax
c000e451:	89 04 24             	mov    DWORD PTR [esp],eax
c000e454:	e8 53 17 01 00       	call   c001fbac <SSE::SSE()>
c000e459:	eb 3d                	jmp    c000e498 <setupFPU()+0x8e>
c000e45b:	90                   	nop
c000e45c:	a8 20                	test   al,0x20
c000e45e:	74 1c                	je     c000e47c <setupFPU()+0x72>
c000e460:	83 ec 0c             	sub    esp,0xc
c000e463:	68 58 01 00 00       	push   0x158
c000e468:	e8 56 b5 ff ff       	call   c00099c3 <malloc>
c000e46d:	89 c3                	mov    ebx,eax
c000e46f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e472:	e8 99 16 01 00       	call   c001fb10 <MMX::MMX()>
c000e477:	eb 1f                	jmp    c000e498 <setupFPU()+0x8e>
c000e479:	8d 76 00             	lea    esi,[esi+0x0]
c000e47c:	a8 10                	test   al,0x10
c000e47e:	74 20                	je     c000e4a0 <setupFPU()+0x96>
c000e480:	83 ec 0c             	sub    esp,0xc
c000e483:	68 58 01 00 00       	push   0x158
c000e488:	e8 36 b5 ff ff       	call   c00099c3 <malloc>
c000e48d:	89 c3                	mov    ebx,eax
c000e48f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e492:	e8 a9 17 01 00       	call   c001fc40 <x87::x87()>
c000e497:	90                   	nop
c000e498:	83 c4 10             	add    esp,0x10
c000e49b:	eb 27                	jmp    c000e4c4 <setupFPU()+0xba>
c000e49d:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a0:	83 e0 ef             	and    eax,0xffffffef
c000e4a3:	83 ec 0c             	sub    esp,0xc
c000e4a6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4ac:	68 a4 33 02 c0       	push   0xc00233a4
c000e4b1:	e8 72 e5 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e4b6:	0f 20 c0             	mov    eax,cr0
c000e4b9:	83 c8 04             	or     eax,0x4
c000e4bc:	0f 22 c0             	mov    cr0,eax
c000e4bf:	31 db                	xor    ebx,ebx
c000e4c1:	83 c4 10             	add    esp,0x10
c000e4c4:	89 d8                	mov    eax,ebx
c000e4c6:	83 c4 08             	add    esp,0x8
c000e4c9:	5b                   	pop    ebx
c000e4ca:	c3                   	ret    
c000e4cb:	90                   	nop

c000e4cc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e4cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4d4:	c1 e0 04             	shl    eax,0x4
c000e4d7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e4db:	8d 50 10             	lea    edx,[eax+0x10]
c000e4de:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e4e4:	74 08                	je     c000e4ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e4e6:	83 c0 04             	add    eax,0x4
c000e4e9:	39 d0                	cmp    eax,edx
c000e4eb:	75 f1                	jne    c000e4de <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e4ed:	c3                   	ret    
c000e4ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e4f8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e502:	eb e2                	jmp    c000e4e6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e504 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e504:	57                   	push   edi
c000e505:	31 c0                	xor    eax,eax
c000e507:	56                   	push   esi
c000e508:	53                   	push   ebx
c000e509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e50d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e511:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e515:	89 da                	mov    edx,ebx
c000e517:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e51b:	c1 e2 04             	shl    edx,0x4
c000e51e:	01 ca                	add    edx,ecx
c000e520:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e528:	74 16                	je     c000e540 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e52a:	40                   	inc    eax
c000e52b:	83 f8 04             	cmp    eax,0x4
c000e52e:	75 f0                	jne    c000e520 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e530:	c7 44 24 10 e8 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc00233e8
c000e538:	5b                   	pop    ebx
c000e539:	5e                   	pop    esi
c000e53a:	5f                   	pop    edi
c000e53b:	e9 a9 5d 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c000e540:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e543:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e546:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e54c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e552:	5b                   	pop    ebx
c000e553:	5e                   	pop    esi
c000e554:	5f                   	pop    edi
c000e555:	c3                   	ret    

c000e556 <doubleFault(regs*, void*)>:
c000e556:	55                   	push   ebp
c000e557:	89 e5                	mov    ebp,esp
c000e559:	83 ec 08             	sub    esp,0x8
c000e55c:	83 ec 0c             	sub    esp,0xc
c000e55f:	68 f5 33 02 c0       	push   0xc00233f5
c000e564:	e8 80 5d 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000e569:	83 c4 10             	add    esp,0x10
c000e56c:	90                   	nop
c000e56d:	c9                   	leave  
c000e56e:	c3                   	ret    
c000e56f:	90                   	nop

c000e570 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e570:	56                   	push   esi
c000e571:	53                   	push   ebx
c000e572:	50                   	push   eax
c000e573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e577:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e57b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e580:	75 35                	jne    c000e5b7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e582:	8d 43 20             	lea    eax,[ebx+0x20]
c000e585:	31 d2                	xor    edx,edx
c000e587:	89 c1                	mov    ecx,eax
c000e589:	c1 e1 04             	shl    ecx,0x4
c000e58c:	01 f1                	add    ecx,esi
c000e58e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e596:	74 3e                	je     c000e5d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e598:	42                   	inc    edx
c000e599:	83 fa 04             	cmp    edx,0x4
c000e59c:	75 f0                	jne    c000e58e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e59e:	83 ec 0c             	sub    esp,0xc
c000e5a1:	68 0f 34 02 c0       	push   0xc002340f
c000e5a6:	e8 3e 5d 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000e5ab:	83 c4 10             	add    esp,0x10
c000e5ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5b3:	5a                   	pop    edx
c000e5b4:	5b                   	pop    ebx
c000e5b5:	5e                   	pop    esi
c000e5b6:	c3                   	ret    
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	56                   	push   esi
c000e5bb:	e8 ae fb ff ff       	call   c000e16e <Device::getName()>
c000e5c0:	83 c4 10             	add    esp,0x10
c000e5c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e5c6:	75 ba                	jne    c000e582 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e5c8:	83 fb 0f             	cmp    ebx,0xf
c000e5cb:	7f 29                	jg     c000e5f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e5cd:	0f b6 9b 60 5a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda5a0]
c000e5d4:	eb ac                	jmp    c000e582 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e5d6:	8d 04 82             	lea    eax,[edx+eax*4]
c000e5d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5dd:	8d 04 86             	lea    eax,[esi+eax*4]
c000e5e0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e5e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e5ea:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e5f0:	89 d8                	mov    eax,ebx
c000e5f2:	5a                   	pop    edx
c000e5f3:	5b                   	pop    ebx
c000e5f4:	5e                   	pop    esi
c000e5f5:	c3                   	ret    
c000e5f6:	83 ec 0c             	sub    esp,0xc
c000e5f9:	68 02 34 02 c0       	push   0xc0023402
c000e5fe:	e8 e6 5c 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000e603:	83 c4 10             	add    esp,0x10
c000e606:	e9 77 ff ff ff       	jmp    c000e582 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e60b:	90                   	nop

c000e60c <InterruptController::clearAllHandlers(int, bool)>:
c000e60c:	56                   	push   esi
c000e60d:	53                   	push   ebx
c000e60e:	52                   	push   edx
c000e60f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e613:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e617:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e61c:	75 61                	jne    c000e67f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e61e:	8d 46 20             	lea    eax,[esi+0x20]
c000e621:	c1 e6 04             	shl    esi,0x4
c000e624:	c1 e0 04             	shl    eax,0x4
c000e627:	01 de                	add    esi,ebx
c000e629:	01 d8                	add    eax,ebx
c000e62b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e635:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e63f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e649:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e653:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e65d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e667:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e671:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e67b:	58                   	pop    eax
c000e67c:	5b                   	pop    ebx
c000e67d:	5e                   	pop    esi
c000e67e:	c3                   	ret    
c000e67f:	83 ec 0c             	sub    esp,0xc
c000e682:	53                   	push   ebx
c000e683:	e8 e6 fa ff ff       	call   c000e16e <Device::getName()>
c000e688:	83 c4 10             	add    esp,0x10
c000e68b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e68e:	75 8e                	jne    c000e61e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e690:	83 fe 0f             	cmp    esi,0xf
c000e693:	7f 09                	jg     c000e69e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e695:	0f b6 b6 60 5a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda5a0]
c000e69c:	eb 80                	jmp    c000e61e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e69e:	83 ec 0c             	sub    esp,0xc
c000e6a1:	68 1c 34 02 c0       	push   0xc002341c
c000e6a6:	e8 3e 5c 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000e6ab:	83 c4 10             	add    esp,0x10
c000e6ae:	e9 6b ff ff ff       	jmp    c000e61e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6b3:	90                   	nop

c000e6b4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6b4:	56                   	push   esi
c000e6b5:	53                   	push   ebx
c000e6b6:	52                   	push   edx
c000e6b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6bf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e6c4:	75 3a                	jne    c000e700 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e6c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6ca:	8d 50 20             	lea    edx,[eax+0x20]
c000e6cd:	c1 e2 04             	shl    edx,0x4
c000e6d0:	8d 04 16             	lea    eax,[esi+edx*1]
c000e6d3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e6d7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e6dd:	74 0b                	je     c000e6ea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e6df:	83 c0 04             	add    eax,0x4
c000e6e2:	39 d0                	cmp    eax,edx
c000e6e4:	75 f1                	jne    c000e6d7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e6e6:	58                   	pop    eax
c000e6e7:	5b                   	pop    ebx
c000e6e8:	5e                   	pop    esi
c000e6e9:	c3                   	ret    
c000e6ea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e6f4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e6fe:	eb df                	jmp    c000e6df <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	56                   	push   esi
c000e704:	e8 65 fa ff ff       	call   c000e16e <Device::getName()>
c000e709:	83 c4 10             	add    esp,0x10
c000e70c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e70f:	75 b5                	jne    c000e6c6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e711:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e716:	7f 11                	jg     c000e729 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e71c:	0f b6 80 60 5a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda5a0]
c000e723:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e727:	eb 9d                	jmp    c000e6c6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e729:	83 ec 0c             	sub    esp,0xc
c000e72c:	68 29 34 02 c0       	push   0xc0023429
c000e731:	e8 b3 5b 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000e736:	83 c4 10             	add    esp,0x10
c000e739:	eb 8b                	jmp    c000e6c6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e73b <nmiHandler(regs*, void*)>:
c000e73b:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000e740:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e744:	e9 45 aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e749 <int_handler>:
c000e749:	55                   	push   ebp
c000e74a:	57                   	push   edi
c000e74b:	56                   	push   esi
c000e74c:	53                   	push   ebx
c000e74d:	83 ec 0c             	sub    esp,0xc
c000e750:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e754:	80 3d 84 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026e84,0x0
c000e75b:	74 0b                	je     c000e768 <int_handler+0x1f>
c000e75d:	fa                   	cli    
c000e75e:	f4                   	hlt    
c000e75f:	80 3d 84 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026e84,0x0
c000e766:	75 f5                	jne    c000e75d <int_handler+0x14>
c000e768:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000e76d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e770:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e776:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e77c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e77f:	83 f8 17             	cmp    eax,0x17
c000e782:	77 13                	ja     c000e797 <int_handler+0x4e>
c000e784:	83 ec 08             	sub    esp,0x8
c000e787:	8b 17                	mov    edx,DWORD PTR [edi]
c000e789:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e78c:	0f b6 c0             	movzx  eax,al
c000e78f:	50                   	push   eax
c000e790:	57                   	push   edi
c000e791:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	83 c3 15             	add    ebx,0x15
c000e79a:	c1 e3 04             	shl    ebx,0x4
c000e79d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7a1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7a8:	31 db                	xor    ebx,ebx
c000e7aa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7ae:	85 c0                	test   eax,eax
c000e7b0:	74 13                	je     c000e7c5 <int_handler+0x7c>
c000e7b2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7b5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7b9:	74 1c                	je     c000e7d7 <int_handler+0x8e>
c000e7bb:	83 ec 08             	sub    esp,0x8
c000e7be:	52                   	push   edx
c000e7bf:	56                   	push   esi
c000e7c0:	ff d0                	call   eax
c000e7c2:	83 c4 10             	add    esp,0x10
c000e7c5:	43                   	inc    ebx
c000e7c6:	83 fb 04             	cmp    ebx,0x4
c000e7c9:	75 df                	jne    c000e7aa <int_handler+0x61>
c000e7cb:	83 c4 0c             	add    esp,0xc
c000e7ce:	31 c0                	xor    eax,eax
c000e7d0:	5b                   	pop    ebx
c000e7d1:	31 d2                	xor    edx,edx
c000e7d3:	5e                   	pop    esi
c000e7d4:	5f                   	pop    edi
c000e7d5:	5d                   	pop    ebp
c000e7d6:	c3                   	ret    
c000e7d7:	83 ec 08             	sub    esp,0x8
c000e7da:	52                   	push   edx
c000e7db:	56                   	push   esi
c000e7dc:	ff d0                	call   eax
c000e7de:	83 c4 10             	add    esp,0x10
c000e7e1:	83 c4 0c             	add    esp,0xc
c000e7e4:	5b                   	pop    ebx
c000e7e5:	5e                   	pop    esi
c000e7e6:	5f                   	pop    edi
c000e7e7:	5d                   	pop    ebp
c000e7e8:	c3                   	ret    
c000e7e9:	90                   	nop

c000e7ea <InterruptController::InterruptController(char const*)>:
c000e7ea:	83 ec 1c             	sub    esp,0x1c
c000e7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f1:	83 ec 08             	sub    esp,0x8
c000e7f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7f8:	50                   	push   eax
c000e7f9:	e8 74 f8 ff ff       	call   c000e072 <Device::Device(char const*)>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	ba e0 36 02 c0       	mov    edx,0xc00236e0
c000e806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e80a:	89 10                	mov    DWORD PTR [eax],edx
c000e80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e810:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e81a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e822:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e82a:	7f 5e                	jg     c000e88a <InterruptController::InterruptController(char const*)+0xa0>
c000e82c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e834:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e839:	7f 49                	jg     c000e884 <InterruptController::InterruptController(char const*)+0x9a>
c000e83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e83f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e843:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e84a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e84e:	01 ca                	add    edx,ecx
c000e850:	83 c2 54             	add    edx,0x54
c000e853:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e863:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e86a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e86e:	01 ca                	add    edx,ecx
c000e870:	81 c2 54 04 00 00    	add    edx,0x454
c000e876:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e87e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e882:	eb b0                	jmp    c000e834 <InterruptController::InterruptController(char const*)+0x4a>
c000e884:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e888:	eb 98                	jmp    c000e822 <InterruptController::InterruptController(char const*)+0x38>
c000e88a:	90                   	nop
c000e88b:	83 c4 1c             	add    esp,0x1c
c000e88e:	c3                   	ret    
c000e88f:	90                   	nop

c000e890 <InterruptController::~InterruptController()>:
c000e890:	83 ec 0c             	sub    esp,0xc
c000e893:	ba e0 36 02 c0       	mov    edx,0xc00236e0
c000e898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89c:	89 10                	mov    DWORD PTR [eax],edx
c000e89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a2:	83 ec 0c             	sub    esp,0xc
c000e8a5:	50                   	push   eax
c000e8a6:	e8 91 f4 ff ff       	call   c000dd3c <Device::~Device()>
c000e8ab:	83 c4 10             	add    esp,0x10
c000e8ae:	90                   	nop
c000e8af:	83 c4 0c             	add    esp,0xc
c000e8b2:	c3                   	ret    
c000e8b3:	90                   	nop

c000e8b4 <InterruptController::~InterruptController()>:
c000e8b4:	83 ec 0c             	sub    esp,0xc
c000e8b7:	83 ec 0c             	sub    esp,0xc
c000e8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8be:	e8 cd ff ff ff       	call   c000e890 <InterruptController::~InterruptController()>
c000e8c3:	83 c4 10             	add    esp,0x10
c000e8c6:	83 ec 08             	sub    esp,0x8
c000e8c9:	68 58 21 00 00       	push   0x2158
c000e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d2:	e8 70 e0 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e8d7:	83 c4 10             	add    esp,0x10
c000e8da:	83 c4 0c             	add    esp,0xc
c000e8dd:	c3                   	ret    

c000e8de <displayDebugInfo(regs*)>:
c000e8de:	55                   	push   ebp
c000e8df:	57                   	push   edi
c000e8e0:	56                   	push   esi
c000e8e1:	53                   	push   ebx
c000e8e2:	83 ec 24             	sub    esp,0x24
c000e8e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8e9:	0f 20 c2             	mov    edx,cr0
c000e8ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e8f0:	0f 20 d7             	mov    edi,cr2
c000e8f3:	0f 20 de             	mov    esi,cr3
c000e8f6:	0f 20 e5             	mov    ebp,cr4
c000e8f9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e8fc:	68 36 34 02 c0       	push   0xc0023436
c000e901:	e8 22 e1 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e906:	59                   	pop    ecx
c000e907:	58                   	pop    eax
c000e908:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e90b:	68 41 34 02 c0       	push   0xc0023441
c000e910:	e8 13 e1 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e915:	58                   	pop    eax
c000e916:	5a                   	pop    edx
c000e917:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e91a:	68 4c 34 02 c0       	push   0xc002344c
c000e91f:	e8 04 e1 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e924:	59                   	pop    ecx
c000e925:	58                   	pop    eax
c000e926:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e929:	68 57 34 02 c0       	push   0xc0023457
c000e92e:	e8 f5 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e933:	58                   	pop    eax
c000e934:	5a                   	pop    edx
c000e935:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e938:	68 62 34 02 c0       	push   0xc0023462
c000e93d:	e8 e6 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e942:	59                   	pop    ecx
c000e943:	58                   	pop    eax
c000e944:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e947:	68 6d 34 02 c0       	push   0xc002346d
c000e94c:	e8 d7 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e951:	58                   	pop    eax
c000e952:	5a                   	pop    edx
c000e953:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e956:	68 78 34 02 c0       	push   0xc0023478
c000e95b:	e8 c8 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e960:	59                   	pop    ecx
c000e961:	58                   	pop    eax
c000e962:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e965:	68 83 34 02 c0       	push   0xc0023483
c000e96a:	e8 b9 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e96f:	58                   	pop    eax
c000e970:	5a                   	pop    edx
c000e971:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e974:	68 8e 34 02 c0       	push   0xc002348e
c000e979:	e8 aa e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e97e:	59                   	pop    ecx
c000e97f:	58                   	pop    eax
c000e980:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e983:	68 9d 34 02 c0       	push   0xc002349d
c000e988:	e8 9b e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e98d:	58                   	pop    eax
c000e98e:	5a                   	pop    edx
c000e98f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e992:	68 a8 34 02 c0       	push   0xc00234a8
c000e997:	e8 8c e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e99c:	59                   	pop    ecx
c000e99d:	58                   	pop    eax
c000e99e:	57                   	push   edi
c000e99f:	68 b3 34 02 c0       	push   0xc00234b3
c000e9a4:	e8 7f e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e9a9:	58                   	pop    eax
c000e9aa:	5a                   	pop    edx
c000e9ab:	56                   	push   esi
c000e9ac:	68 be 34 02 c0       	push   0xc00234be
c000e9b1:	e8 72 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e9b6:	59                   	pop    ecx
c000e9b7:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000e9bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9c2:	e8 b6 bd ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c000e9c7:	58                   	pop    eax
c000e9c8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000e9cb:	5a                   	pop    edx
c000e9cc:	c1 e0 05             	shl    eax,0x5
c000e9cf:	05 c0 57 02 c0       	add    eax,0xc00257c0
c000e9d4:	50                   	push   eax
c000e9d5:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000e9da:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9e0:	e8 a5 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000e9e5:	59                   	pop    ecx
c000e9e6:	58                   	pop    eax
c000e9e7:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000e9ec:	68 c9 34 02 c0       	push   0xc00234c9
c000e9f1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9f7:	e8 8e c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000e9fc:	58                   	pop    eax
c000e9fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea02:	5a                   	pop    edx
c000ea03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea06:	83 c0 0c             	add    eax,0xc
c000ea09:	50                   	push   eax
c000ea0a:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea15:	e8 70 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea1a:	59                   	pop    ecx
c000ea1b:	58                   	pop    eax
c000ea1c:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea21:	68 d2 34 02 c0       	push   0xc00234d2
c000ea26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea2c:	e8 59 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea31:	58                   	pop    eax
c000ea32:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea37:	5a                   	pop    edx
c000ea38:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea41:	e8 fe c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ea46:	59                   	pop    ecx
c000ea47:	58                   	pop    eax
c000ea48:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea4d:	68 da 34 02 c0       	push   0xc00234da
c000ea52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea58:	e8 2d c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea5d:	58                   	pop    eax
c000ea5e:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea63:	5a                   	pop    edx
c000ea64:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ea67:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea6d:	e8 d2 c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ea72:	59                   	pop    ecx
c000ea73:	58                   	pop    eax
c000ea74:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea79:	68 e2 34 02 c0       	push   0xc00234e2
c000ea7e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea84:	e8 01 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea89:	58                   	pop    eax
c000ea8a:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ea8f:	5a                   	pop    edx
c000ea90:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea99:	e8 a6 c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ea9e:	59                   	pop    ecx
c000ea9f:	58                   	pop    eax
c000eaa0:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eaa5:	68 ea 34 02 c0       	push   0xc00234ea
c000eaaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eab0:	e8 d5 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eab5:	58                   	pop    eax
c000eab6:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eabb:	5a                   	pop    edx
c000eabc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eabf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac5:	e8 7a c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eaca:	59                   	pop    ecx
c000eacb:	58                   	pop    eax
c000eacc:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ead1:	68 f2 34 02 c0       	push   0xc00234f2
c000ead6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eadc:	e8 a9 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eae1:	58                   	pop    eax
c000eae2:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eae7:	5a                   	pop    edx
c000eae8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eaeb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf1:	e8 4e c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eaf6:	59                   	pop    ecx
c000eaf7:	58                   	pop    eax
c000eaf8:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eafd:	68 fa 34 02 c0       	push   0xc00234fa
c000eb02:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb08:	e8 7d c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb0d:	58                   	pop    eax
c000eb0e:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb13:	5a                   	pop    edx
c000eb14:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb17:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb1d:	e8 22 c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eb22:	59                   	pop    ecx
c000eb23:	58                   	pop    eax
c000eb24:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb29:	68 02 35 02 c0       	push   0xc0023502
c000eb2e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb34:	e8 51 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb39:	58                   	pop    eax
c000eb3a:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb3f:	5a                   	pop    edx
c000eb40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb44:	52                   	push   edx
c000eb45:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb4b:	e8 f4 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eb50:	59                   	pop    ecx
c000eb51:	58                   	pop    eax
c000eb52:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb57:	68 0b 35 02 c0       	push   0xc002350b
c000eb5c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb62:	e8 23 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb67:	58                   	pop    eax
c000eb68:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb6d:	5a                   	pop    edx
c000eb6e:	57                   	push   edi
c000eb6f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb75:	e8 ca c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eb7a:	59                   	pop    ecx
c000eb7b:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb80:	5f                   	pop    edi
c000eb81:	68 13 35 02 c0       	push   0xc0023513
c000eb86:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb8c:	e8 f9 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb91:	58                   	pop    eax
c000eb92:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eb97:	5a                   	pop    edx
c000eb98:	56                   	push   esi
c000eb99:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb9f:	e8 a0 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eba4:	59                   	pop    ecx
c000eba5:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ebaa:	5e                   	pop    esi
c000ebab:	68 1b 35 02 c0       	push   0xc002351b
c000ebb0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb6:	e8 cf c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ebbb:	5f                   	pop    edi
c000ebbc:	58                   	pop    eax
c000ebbd:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ebc2:	55                   	push   ebp
c000ebc3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc9:	e8 76 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ebce:	58                   	pop    eax
c000ebcf:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ebd4:	5a                   	pop    edx
c000ebd5:	68 23 35 02 c0       	push   0xc0023523
c000ebda:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebe0:	e8 a5 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ebe5:	0f 21 c0             	mov    eax,db0
c000ebe8:	59                   	pop    ecx
c000ebe9:	5e                   	pop    esi
c000ebea:	50                   	push   eax
c000ebeb:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ebf0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebf6:	e8 49 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ebfb:	5f                   	pop    edi
c000ebfc:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec01:	5d                   	pop    ebp
c000ec02:	68 2c 35 02 c0       	push   0xc002352c
c000ec07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec0d:	e8 78 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec12:	0f 21 c8             	mov    eax,db1
c000ec15:	5a                   	pop    edx
c000ec16:	59                   	pop    ecx
c000ec17:	50                   	push   eax
c000ec18:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec1d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec23:	e8 1c c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec28:	5e                   	pop    esi
c000ec29:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec2e:	5f                   	pop    edi
c000ec2f:	68 34 35 02 c0       	push   0xc0023534
c000ec34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec3a:	e8 4b c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec3f:	0f 21 d0             	mov    eax,db2
c000ec42:	5d                   	pop    ebp
c000ec43:	5a                   	pop    edx
c000ec44:	50                   	push   eax
c000ec45:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec4a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec50:	e8 ef bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec55:	59                   	pop    ecx
c000ec56:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec5b:	5e                   	pop    esi
c000ec5c:	68 3c 35 02 c0       	push   0xc002353c
c000ec61:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec67:	e8 1e c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec6c:	0f 21 d8             	mov    eax,db3
c000ec6f:	5f                   	pop    edi
c000ec70:	5d                   	pop    ebp
c000ec71:	50                   	push   eax
c000ec72:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec77:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec7d:	e8 c2 bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec82:	58                   	pop    eax
c000ec83:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ec88:	5a                   	pop    edx
c000ec89:	68 44 35 02 c0       	push   0xc0023544
c000ec8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec94:	e8 f1 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec99:	0f 21 f0             	mov    eax,db6
c000ec9c:	59                   	pop    ecx
c000ec9d:	5e                   	pop    esi
c000ec9e:	50                   	push   eax
c000ec9f:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000eca4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecaa:	e8 95 bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ecaf:	5f                   	pop    edi
c000ecb0:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ecb5:	5d                   	pop    ebp
c000ecb6:	68 4c 35 02 c0       	push   0xc002354c
c000ecbb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecc1:	e8 c4 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ecc6:	0f 21 f8             	mov    eax,db7
c000ecc9:	5a                   	pop    edx
c000ecca:	59                   	pop    ecx
c000eccb:	50                   	push   eax
c000eccc:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ecd1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd7:	e8 68 bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ecdc:	5e                   	pop    esi
c000ecdd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ece0:	e8 a0 87 00 00       	call   c0017485 <Thr::getDriverNameFromAddress(unsigned long)>
c000ece5:	83 c4 10             	add    esp,0x10
c000ece8:	85 c0                	test   eax,eax
c000ecea:	74 7d                	je     c000ed69 <displayDebugInfo(regs*)+0x48b>
c000ecec:	89 c6                	mov    esi,eax
c000ecee:	50                   	push   eax
c000ecef:	50                   	push   eax
c000ecf0:	56                   	push   esi
c000ecf1:	68 54 35 02 c0       	push   0xc0023554
c000ecf6:	e8 2d dd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ecfb:	5a                   	pop    edx
c000ecfc:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ed01:	59                   	pop    ecx
c000ed02:	68 62 35 02 c0       	push   0xc0023562
c000ed07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0d:	e8 78 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ed12:	5f                   	pop    edi
c000ed13:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ed18:	5d                   	pop    ebp
c000ed19:	56                   	push   esi
c000ed1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed20:	e8 65 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ed25:	58                   	pop    eax
c000ed26:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ed2b:	5a                   	pop    edx
c000ed2c:	68 6e 35 02 c0       	push   0xc002356e
c000ed31:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed37:	e8 4e bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ed3c:	59                   	pop    ecx
c000ed3d:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000ed42:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed48:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed4b:	e8 6c 87 00 00       	call   c00174bc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed50:	5b                   	pop    ebx
c000ed51:	5d                   	pop    ebp
c000ed52:	50                   	push   eax
c000ed53:	57                   	push   edi
c000ed54:	e8 eb be ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ed59:	58                   	pop    eax
c000ed5a:	5a                   	pop    edx
c000ed5b:	56                   	push   esi
c000ed5c:	68 7a 35 02 c0       	push   0xc002357a
c000ed61:	e8 c2 dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ed66:	83 c4 10             	add    esp,0x10
c000ed69:	fa                   	cli    
c000ed6a:	f4                   	hlt    
c000ed6b:	eb fe                	jmp    c000ed6b <displayDebugInfo(regs*)+0x48d>

c000ed6d <x87EmulHandler(regs*, void*)>:
c000ed6d:	83 ec 0c             	sub    esp,0xc
c000ed70:	0f 20 c2             	mov    edx,cr0
c000ed73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed78:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ed7c:	75 4b                	jne    c000edc9 <x87EmulHandler(regs*, void*)+0x5c>
c000ed7e:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000ed83:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ed89:	85 c0                	test   eax,eax
c000ed8b:	74 05                	je     c000ed92 <x87EmulHandler(regs*, void*)+0x25>
c000ed8d:	83 e2 08             	and    edx,0x8
c000ed90:	75 17                	jne    c000eda9 <x87EmulHandler(regs*, void*)+0x3c>
c000ed92:	83 ec 0c             	sub    esp,0xc
c000ed95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed99:	e8 94 ab 00 00       	call   c0019932 <Vm::x87Handler(regs*)>
c000ed9e:	83 c4 10             	add    esp,0x10
c000eda1:	84 c0                	test   al,al
c000eda3:	74 24                	je     c000edc9 <x87EmulHandler(regs*, void*)+0x5c>
c000eda5:	83 c4 0c             	add    esp,0xc
c000eda8:	c3                   	ret    
c000eda9:	83 ec 0c             	sub    esp,0xc
c000edac:	68 a0 35 02 c0       	push   0xc00235a0
c000edb1:	e8 72 dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000edb6:	0f 06                	clts   
c000edb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edbd:	83 c4 10             	add    esp,0x10
c000edc0:	a3 e8 64 02 c0       	mov    ds:0xc00264e8,eax
c000edc5:	83 c4 0c             	add    esp,0xc
c000edc8:	c3                   	ret    
c000edc9:	83 ec 0c             	sub    esp,0xc
c000edcc:	68 8a 35 02 c0       	push   0xc002358a
c000edd1:	e8 52 dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000edd6:	5a                   	pop    edx
c000edd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eddb:	e8 fe fa ff ff       	call   c000e8de <displayDebugInfo(regs*)>

c000ede0 <gpFault(regs*, void*)>:
c000ede0:	53                   	push   ebx
c000ede1:	83 ec 14             	sub    esp,0x14
c000ede4:	c7 05 e4 64 02 c0 ee 8d 01 c0 	mov    DWORD PTR ds:0xc00264e4,0xc0018dee
c000edee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000edf2:	53                   	push   ebx
c000edf3:	e8 f6 9f 00 00       	call   c0018dee <Vm::faultHandler(regs*)>
c000edf8:	83 c4 10             	add    esp,0x10
c000edfb:	84 c0                	test   al,al
c000edfd:	74 05                	je     c000ee04 <gpFault(regs*, void*)+0x24>
c000edff:	83 c4 08             	add    esp,0x8
c000ee02:	5b                   	pop    ebx
c000ee03:	c3                   	ret    
c000ee04:	83 ec 0c             	sub    esp,0xc
c000ee07:	68 ad 35 02 c0       	push   0xc00235ad
c000ee0c:	e8 17 dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee14:	e8 c5 fa ff ff       	call   c000e8de <displayDebugInfo(regs*)>

c000ee19 <pgFault(regs*, void*)>:
c000ee19:	53                   	push   ebx
c000ee1a:	83 ec 10             	sub    esp,0x10
c000ee1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee21:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee24:	68 c8 35 02 c0       	push   0xc00235c8
c000ee29:	e8 fa db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee2e:	0f 20 d0             	mov    eax,cr2
c000ee31:	5a                   	pop    edx
c000ee32:	59                   	pop    ecx
c000ee33:	50                   	push   eax
c000ee34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee3c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee42:	e8 df d6 ff ff       	call   c000c526 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	84 c0                	test   al,al
c000ee4c:	74 05                	je     c000ee53 <pgFault(regs*, void*)+0x3a>
c000ee4e:	83 c4 08             	add    esp,0x8
c000ee51:	5b                   	pop    ebx
c000ee52:	c3                   	ret    
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	68 dd 35 02 c0       	push   0xc00235dd
c000ee5b:	e8 c8 db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee63:	e8 76 fa ff ff       	call   c000e8de <displayDebugInfo(regs*)>

c000ee68 <otherISRHandler(regs*, void*)>:
c000ee68:	53                   	push   ebx
c000ee69:	83 ec 0c             	sub    esp,0xc
c000ee6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee70:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ee73:	50                   	push   eax
c000ee74:	50                   	push   eax
c000ee75:	68 ea 35 02 c0       	push   0xc00235ea
c000ee7a:	e8 a9 db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee82:	e8 57 fa ff ff       	call   c000e8de <displayDebugInfo(regs*)>

c000ee87 <opcodeFault(regs*, void*)>:
c000ee87:	55                   	push   ebp
c000ee88:	89 e5                	mov    ebp,esp
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 30             	sub    esp,0x30
c000ee8f:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000ee94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee9a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eea0:	84 c0                	test   al,al
c000eea2:	74 24                	je     c000eec8 <opcodeFault(regs*, void*)+0x41>
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	68 08 36 02 c0       	push   0xc0023608
c000eeac:	e8 77 db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000eeb1:	83 c4 10             	add    esp,0x10
c000eeb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eeba:	8d 50 19             	lea    edx,[eax+0x19]
c000eebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eec0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eec3:	e9 7b 03 00 00       	jmp    c000f243 <opcodeFault(regs*, void*)+0x3bc>
c000eec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eecb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eece:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000eed1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000eed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eed8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eedb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000eede:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eee1:	8a 00                	mov    al,BYTE PTR [eax]
c000eee3:	3c f0                	cmp    al,0xf0
c000eee5:	75 17                	jne    c000eefe <opcodeFault(regs*, void*)+0x77>
c000eee7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eeea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eef0:	8d 50 01             	lea    edx,[eax+0x1]
c000eef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eef6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eef9:	e9 d6 00 00 00       	jmp    c000efd4 <opcodeFault(regs*, void*)+0x14d>
c000eefe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef01:	8a 00                	mov    al,BYTE PTR [eax]
c000ef03:	3c f2                	cmp    al,0xf2
c000ef05:	74 09                	je     c000ef10 <opcodeFault(regs*, void*)+0x89>
c000ef07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef0a:	8a 00                	mov    al,BYTE PTR [eax]
c000ef0c:	3c f3                	cmp    al,0xf3
c000ef0e:	75 1b                	jne    c000ef2b <opcodeFault(regs*, void*)+0xa4>
c000ef10:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef14:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef1d:	8d 50 01             	lea    edx,[eax+0x1]
c000ef20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef23:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef26:	e9 a9 00 00 00       	jmp    c000efd4 <opcodeFault(regs*, void*)+0x14d>
c000ef2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef2e:	8a 00                	mov    al,BYTE PTR [eax]
c000ef30:	3c 66                	cmp    al,0x66
c000ef32:	75 1b                	jne    c000ef4f <opcodeFault(regs*, void*)+0xc8>
c000ef34:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef41:	8d 50 01             	lea    edx,[eax+0x1]
c000ef44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef4a:	e9 85 00 00 00       	jmp    c000efd4 <opcodeFault(regs*, void*)+0x14d>
c000ef4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef52:	8a 00                	mov    al,BYTE PTR [eax]
c000ef54:	3c 67                	cmp    al,0x67
c000ef56:	75 18                	jne    c000ef70 <opcodeFault(regs*, void*)+0xe9>
c000ef58:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef65:	8d 50 01             	lea    edx,[eax+0x1]
c000ef68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef6e:	eb 64                	jmp    c000efd4 <opcodeFault(regs*, void*)+0x14d>
c000ef70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef73:	8a 00                	mov    al,BYTE PTR [eax]
c000ef75:	3c 2e                	cmp    al,0x2e
c000ef77:	74 09                	je     c000ef82 <opcodeFault(regs*, void*)+0xfb>
c000ef79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef7c:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7e:	3c 3e                	cmp    al,0x3e
c000ef80:	75 18                	jne    c000ef9a <opcodeFault(regs*, void*)+0x113>
c000ef82:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef86:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef8f:	8d 50 01             	lea    edx,[eax+0x1]
c000ef92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef95:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef98:	eb 3a                	jmp    c000efd4 <opcodeFault(regs*, void*)+0x14d>
c000ef9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef9d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9f:	3c 36                	cmp    al,0x36
c000efa1:	74 1b                	je     c000efbe <opcodeFault(regs*, void*)+0x137>
c000efa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efa6:	8a 00                	mov    al,BYTE PTR [eax]
c000efa8:	3c 26                	cmp    al,0x26
c000efaa:	74 12                	je     c000efbe <opcodeFault(regs*, void*)+0x137>
c000efac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efaf:	8a 00                	mov    al,BYTE PTR [eax]
c000efb1:	3c 64                	cmp    al,0x64
c000efb3:	74 09                	je     c000efbe <opcodeFault(regs*, void*)+0x137>
c000efb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb8:	8a 00                	mov    al,BYTE PTR [eax]
c000efba:	3c 65                	cmp    al,0x65
c000efbc:	75 16                	jne    c000efd4 <opcodeFault(regs*, void*)+0x14d>
c000efbe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efc2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efcb:	8d 50 01             	lea    edx,[eax+0x1]
c000efce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efd7:	8a 00                	mov    al,BYTE PTR [eax]
c000efd9:	3c 0f                	cmp    al,0xf
c000efdb:	0f 85 8d 01 00 00    	jne    c000f16e <opcodeFault(regs*, void*)+0x2e7>
c000efe1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe4:	40                   	inc    eax
c000efe5:	8a 00                	mov    al,BYTE PTR [eax]
c000efe7:	3c c7                	cmp    al,0xc7
c000efe9:	0f 85 7f 01 00 00    	jne    c000f16e <opcodeFault(regs*, void*)+0x2e7>
c000efef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eff8:	8d 50 01             	lea    edx,[eax+0x1]
c000effb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000effe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f001:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f004:	50                   	push   eax
c000f005:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f008:	50                   	push   eax
c000f009:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f00c:	50                   	push   eax
c000f00d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f010:	e8 ed 49 00 00       	call   c0013a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f015:	83 c4 10             	add    esp,0x10
c000f018:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f01b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f01e:	83 f0 01             	xor    eax,0x1
c000f021:	84 c0                	test   al,al
c000f023:	0f 84 45 01 00 00    	je     c000f16e <opcodeFault(regs*, void*)+0x2e7>
c000f029:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f02c:	3c 01                	cmp    al,0x1
c000f02e:	0f 85 3a 01 00 00    	jne    c000f16e <opcodeFault(regs*, void*)+0x2e7>
c000f034:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f037:	83 f0 01             	xor    eax,0x1
c000f03a:	84 c0                	test   al,al
c000f03c:	0f 84 2c 01 00 00    	je     c000f16e <opcodeFault(regs*, void*)+0x2e7>
c000f042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f045:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f048:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f04b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f052:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f055:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f058:	89 c2                	mov    edx,eax
c000f05a:	b8 00 00 00 00       	mov    eax,0x0
c000f05f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f062:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f068:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f06b:	ba 00 00 00 00       	mov    edx,0x0
c000f070:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f073:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f079:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f07c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f07f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f086:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f089:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f08c:	89 c2                	mov    edx,eax
c000f08e:	b8 00 00 00 00       	mov    eax,0x0
c000f093:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f096:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f09c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f09f:	ba 00 00 00 00       	mov    edx,0x0
c000f0a4:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0a7:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0aa:	fa                   	cli    
c000f0ab:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f0b0:	40                   	inc    eax
c000f0b1:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000f0b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0be:	89 c1                	mov    ecx,eax
c000f0c0:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f0c3:	89 cb                	mov    ebx,ecx
c000f0c5:	89 d0                	mov    eax,edx
c000f0c7:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f0ca:	89 c6                	mov    esi,eax
c000f0cc:	89 f0                	mov    eax,esi
c000f0ce:	09 d8                	or     eax,ebx
c000f0d0:	85 c0                	test   eax,eax
c000f0d2:	75 21                	jne    c000f0f5 <opcodeFault(regs*, void*)+0x26e>
c000f0d4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f0d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0da:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0dd:	89 01                	mov    DWORD PTR [ecx],eax
c000f0df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0e8:	83 c8 40             	or     eax,0x40
c000f0eb:	89 c2                	mov    edx,eax
c000f0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0f0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f0f3:	eb 3e                	jmp    c000f133 <opcodeFault(regs*, void*)+0x2ac>
c000f0f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f100:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f103:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f109:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f10c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f10f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f112:	89 d0                	mov    eax,edx
c000f114:	31 d2                	xor    edx,edx
c000f116:	89 c3                	mov    ebx,eax
c000f118:	89 d6                	mov    esi,edx
c000f11a:	89 da                	mov    edx,ebx
c000f11c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f11f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f125:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f128:	83 e0 bf             	and    eax,0xffffffbf
c000f12b:	89 c2                	mov    edx,eax
c000f12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f130:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f133:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f138:	48                   	dec    eax
c000f139:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000f13e:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f143:	85 c0                	test   eax,eax
c000f145:	75 01                	jne    c000f148 <opcodeFault(regs*, void*)+0x2c1>
c000f147:	fb                   	sti    
c000f148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f14b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f14e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f151:	01 c2                	add    edx,eax
c000f153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f156:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f159:	83 ec 0c             	sub    esp,0xc
c000f15c:	68 2b 36 02 c0       	push   0xc002362b
c000f161:	e8 c2 d8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f166:	83 c4 10             	add    esp,0x10
c000f169:	e9 d5 00 00 00       	jmp    c000f243 <opcodeFault(regs*, void*)+0x3bc>
c000f16e:	83 ec 0c             	sub    esp,0xc
c000f171:	68 3e 36 02 c0       	push   0xc002363e
c000f176:	e8 ad d8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f17b:	83 c4 10             	add    esp,0x10
c000f17e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f181:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f187:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f18a:	c1 e0 04             	shl    eax,0x4
c000f18d:	01 d0                	add    eax,edx
c000f18f:	83 c0 03             	add    eax,0x3
c000f192:	8a 00                	mov    al,BYTE PTR [eax]
c000f194:	0f b6 d8             	movzx  ebx,al
c000f197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f19a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1a3:	c1 e0 04             	shl    eax,0x4
c000f1a6:	01 d0                	add    eax,edx
c000f1a8:	83 c0 02             	add    eax,0x2
c000f1ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f1ad:	0f b6 c8             	movzx  ecx,al
c000f1b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1bc:	c1 e0 04             	shl    eax,0x4
c000f1bf:	01 d0                	add    eax,edx
c000f1c1:	40                   	inc    eax
c000f1c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f1c4:	0f b6 d0             	movzx  edx,al
c000f1c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ca:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1d3:	c1 e0 04             	shl    eax,0x4
c000f1d6:	01 f0                	add    eax,esi
c000f1d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f1da:	0f b6 c0             	movzx  eax,al
c000f1dd:	83 ec 0c             	sub    esp,0xc
c000f1e0:	53                   	push   ebx
c000f1e1:	51                   	push   ecx
c000f1e2:	52                   	push   edx
c000f1e3:	50                   	push   eax
c000f1e4:	68 50 36 02 c0       	push   0xc0023650
c000f1e9:	e8 3a d8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f1ee:	83 c4 20             	add    esp,0x20
c000f1f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1f7:	83 c0 03             	add    eax,0x3
c000f1fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fc:	0f b6 d8             	movzx  ebx,al
c000f1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f202:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f205:	83 c0 02             	add    eax,0x2
c000f208:	8a 00                	mov    al,BYTE PTR [eax]
c000f20a:	0f b6 c8             	movzx  ecx,al
c000f20d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f210:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f213:	40                   	inc    eax
c000f214:	8a 00                	mov    al,BYTE PTR [eax]
c000f216:	0f b6 d0             	movzx  edx,al
c000f219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f21c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f21f:	8a 00                	mov    al,BYTE PTR [eax]
c000f221:	0f b6 c0             	movzx  eax,al
c000f224:	83 ec 0c             	sub    esp,0xc
c000f227:	53                   	push   ebx
c000f228:	51                   	push   ecx
c000f229:	52                   	push   edx
c000f22a:	50                   	push   eax
c000f22b:	68 78 36 02 c0       	push   0xc0023678
c000f230:	e8 f3 d7 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f235:	83 c4 20             	add    esp,0x20
c000f238:	83 ec 0c             	sub    esp,0xc
c000f23b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f23e:	e8 9b f6 ff ff       	call   c000e8de <displayDebugInfo(regs*)>
c000f243:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f246:	5b                   	pop    ebx
c000f247:	5e                   	pop    esi
c000f248:	5d                   	pop    ebp
c000f249:	c3                   	ret    

c000f24a <displayProgramFault(char const*)>:
c000f24a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f24f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f252:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f258:	85 c0                	test   eax,eax
c000f25a:	74 15                	je     c000f271 <displayProgramFault(char const*)+0x27>
c000f25c:	83 ec 0c             	sub    esp,0xc
c000f25f:	6a 04                	push   0x4
c000f261:	6a 0f                	push   0xf
c000f263:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f267:	50                   	push   eax
c000f268:	e8 19 b7 ff ff       	call   c000a986 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f26d:	83 c4 1c             	add    esp,0x1c
c000f270:	c3                   	ret    
c000f271:	c3                   	ret    

c000f272 <setupInterruptController()>:
c000f272:	55                   	push   ebp
c000f273:	89 e5                	mov    ebp,esp
c000f275:	53                   	push   ebx
c000f276:	83 ec 24             	sub    esp,0x24
c000f279:	b8 00 00 00 00       	mov    eax,0x0
c000f27e:	85 c0                	test   eax,eax
c000f280:	0f 95 c0             	setne  al
c000f283:	84 c0                	test   al,al
c000f285:	74 5b                	je     c000f2e2 <setupInterruptController()+0x70>
c000f287:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f294:	e8 2a a7 ff ff       	call   c00099c3 <malloc>
c000f299:	83 c4 10             	add    esp,0x10
c000f29c:	89 c3                	mov    ebx,eax
c000f29e:	83 ec 0c             	sub    esp,0xc
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 d7 0b 01 00       	call   c001fe7e <APIC::APIC()>
c000f2a7:	83 c4 10             	add    esp,0x10
c000f2aa:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b5:	83 c0 08             	add    eax,0x8
c000f2b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2ba:	6a 00                	push   0x0
c000f2bc:	6a 00                	push   0x0
c000f2be:	6a 00                	push   0x0
c000f2c0:	52                   	push   edx
c000f2c1:	ff d0                	call   eax
c000f2c3:	83 c4 10             	add    esp,0x10
c000f2c6:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000f2cb:	83 ec 08             	sub    esp,0x8
c000f2ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2d1:	50                   	push   eax
c000f2d2:	e8 97 eb ff ff       	call   c000de6e <Device::addChild(Device*)>
c000f2d7:	83 c4 10             	add    esp,0x10
c000f2da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2dd:	e9 79 03 00 00       	jmp    c000f65b <setupInterruptController()+0x3e9>
c000f2e2:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c000f2e7:	84 c0                	test   al,al
c000f2e9:	75 14                	jne    c000f2ff <setupInterruptController()+0x8d>
c000f2eb:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000f2f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f2f6:	83 e2 fe             	and    edx,0xfffffffe
c000f2f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f2ff:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000f304:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f30a:	83 e0 01             	and    eax,0x1
c000f30d:	84 c0                	test   al,al
c000f30f:	0f 95 c0             	setne  al
c000f312:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f315:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f31c:	83 ec 0c             	sub    esp,0xc
c000f31f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f322:	e8 9c a6 ff ff       	call   c00099c3 <malloc>
c000f327:	83 c4 10             	add    esp,0x10
c000f32a:	89 c3                	mov    ebx,eax
c000f32c:	83 ec 0c             	sub    esp,0xc
c000f32f:	53                   	push   ebx
c000f330:	e8 a1 10 01 00       	call   c00203d6 <PIC::PIC()>
c000f335:	83 c4 10             	add    esp,0x10
c000f338:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f33b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f33e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f341:	8b 00                	mov    eax,DWORD PTR [eax]
c000f343:	83 c0 08             	add    eax,0x8
c000f346:	8b 00                	mov    eax,DWORD PTR [eax]
c000f348:	6a 00                	push   0x0
c000f34a:	6a 00                	push   0x0
c000f34c:	6a 00                	push   0x0
c000f34e:	52                   	push   edx
c000f34f:	ff d0                	call   eax
c000f351:	83 c4 10             	add    esp,0x10
c000f354:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f358:	74 73                	je     c000f3cd <setupInterruptController()+0x15b>
c000f35a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f35d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f360:	8b 00                	mov    eax,DWORD PTR [eax]
c000f362:	83 c0 0c             	add    eax,0xc
c000f365:	8b 00                	mov    eax,DWORD PTR [eax]
c000f367:	6a 00                	push   0x0
c000f369:	6a 00                	push   0x0
c000f36b:	6a 00                	push   0x0
c000f36d:	52                   	push   edx
c000f36e:	ff d0                	call   eax
c000f370:	83 c4 10             	add    esp,0x10
c000f373:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f377:	74 15                	je     c000f38e <setupInterruptController()+0x11c>
c000f379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f37e:	83 c0 04             	add    eax,0x4
c000f381:	8b 00                	mov    eax,DWORD PTR [eax]
c000f383:	83 ec 0c             	sub    esp,0xc
c000f386:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f389:	ff d0                	call   eax
c000f38b:	83 c4 10             	add    esp,0x10
c000f38e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f395:	83 ec 0c             	sub    esp,0xc
c000f398:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f39b:	e8 23 a6 ff ff       	call   c00099c3 <malloc>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	89 c3                	mov    ebx,eax
c000f3a5:	83 ec 0c             	sub    esp,0xc
c000f3a8:	53                   	push   ebx
c000f3a9:	e8 d0 0a 01 00       	call   c001fe7e <APIC::APIC()>
c000f3ae:	83 c4 10             	add    esp,0x10
c000f3b1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3b4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3bc:	83 c0 08             	add    eax,0x8
c000f3bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c1:	6a 00                	push   0x0
c000f3c3:	6a 00                	push   0x0
c000f3c5:	6a 00                	push   0x0
c000f3c7:	52                   	push   edx
c000f3c8:	ff d0                	call   eax
c000f3ca:	83 c4 10             	add    esp,0x10
c000f3cd:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c000f3d2:	83 ec 08             	sub    esp,0x8
c000f3d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3d8:	50                   	push   eax
c000f3d9:	e8 90 ea ff ff       	call   c000de6e <Device::addChild(Device*)>
c000f3de:	83 c4 10             	add    esp,0x10
c000f3e1:	c7 05 e8 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00264e8,0x0
c000f3eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f0:	83 c0 24             	add    eax,0x24
c000f3f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f5:	6a 00                	push   0x0
c000f3f7:	68 68 ee 00 c0       	push   0xc000ee68
c000f3fc:	6a 00                	push   0x0
c000f3fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f401:	ff d0                	call   eax
c000f403:	83 c4 10             	add    esp,0x10
c000f406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f409:	8b 00                	mov    eax,DWORD PTR [eax]
c000f40b:	83 c0 24             	add    eax,0x24
c000f40e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f410:	6a 00                	push   0x0
c000f412:	68 68 ee 00 c0       	push   0xc000ee68
c000f417:	6a 01                	push   0x1
c000f419:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f41c:	ff d0                	call   eax
c000f41e:	83 c4 10             	add    esp,0x10
c000f421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f424:	8b 00                	mov    eax,DWORD PTR [eax]
c000f426:	83 c0 24             	add    eax,0x24
c000f429:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42b:	6a 00                	push   0x0
c000f42d:	68 3b e7 00 c0       	push   0xc000e73b
c000f432:	6a 02                	push   0x2
c000f434:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f437:	ff d0                	call   eax
c000f439:	83 c4 10             	add    esp,0x10
c000f43c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f43f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f441:	83 c0 24             	add    eax,0x24
c000f444:	8b 00                	mov    eax,DWORD PTR [eax]
c000f446:	6a 00                	push   0x0
c000f448:	68 68 ee 00 c0       	push   0xc000ee68
c000f44d:	6a 03                	push   0x3
c000f44f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f452:	ff d0                	call   eax
c000f454:	83 c4 10             	add    esp,0x10
c000f457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f45a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f45c:	83 c0 24             	add    eax,0x24
c000f45f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f461:	6a 00                	push   0x0
c000f463:	68 68 ee 00 c0       	push   0xc000ee68
c000f468:	6a 04                	push   0x4
c000f46a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f46d:	ff d0                	call   eax
c000f46f:	83 c4 10             	add    esp,0x10
c000f472:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f475:	8b 00                	mov    eax,DWORD PTR [eax]
c000f477:	83 c0 24             	add    eax,0x24
c000f47a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47c:	6a 00                	push   0x0
c000f47e:	68 68 ee 00 c0       	push   0xc000ee68
c000f483:	6a 05                	push   0x5
c000f485:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f488:	ff d0                	call   eax
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f490:	8b 00                	mov    eax,DWORD PTR [eax]
c000f492:	83 c0 24             	add    eax,0x24
c000f495:	8b 00                	mov    eax,DWORD PTR [eax]
c000f497:	6a 00                	push   0x0
c000f499:	68 87 ee 00 c0       	push   0xc000ee87
c000f49e:	6a 06                	push   0x6
c000f4a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4a3:	ff d0                	call   eax
c000f4a5:	83 c4 10             	add    esp,0x10
c000f4a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ad:	83 c0 24             	add    eax,0x24
c000f4b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b2:	6a 00                	push   0x0
c000f4b4:	68 6d ed 00 c0       	push   0xc000ed6d
c000f4b9:	6a 07                	push   0x7
c000f4bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4be:	ff d0                	call   eax
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c8:	83 c0 24             	add    eax,0x24
c000f4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4cd:	6a 00                	push   0x0
c000f4cf:	68 56 e5 00 c0       	push   0xc000e556
c000f4d4:	6a 08                	push   0x8
c000f4d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4d9:	ff d0                	call   eax
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e3:	83 c0 24             	add    eax,0x24
c000f4e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e8:	6a 00                	push   0x0
c000f4ea:	68 68 ee 00 c0       	push   0xc000ee68
c000f4ef:	6a 09                	push   0x9
c000f4f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4f4:	ff d0                	call   eax
c000f4f6:	83 c4 10             	add    esp,0x10
c000f4f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fe:	83 c0 24             	add    eax,0x24
c000f501:	8b 00                	mov    eax,DWORD PTR [eax]
c000f503:	6a 00                	push   0x0
c000f505:	68 68 ee 00 c0       	push   0xc000ee68
c000f50a:	6a 0a                	push   0xa
c000f50c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f50f:	ff d0                	call   eax
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f517:	8b 00                	mov    eax,DWORD PTR [eax]
c000f519:	83 c0 24             	add    eax,0x24
c000f51c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51e:	6a 00                	push   0x0
c000f520:	68 68 ee 00 c0       	push   0xc000ee68
c000f525:	6a 0b                	push   0xb
c000f527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f52a:	ff d0                	call   eax
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f532:	8b 00                	mov    eax,DWORD PTR [eax]
c000f534:	83 c0 24             	add    eax,0x24
c000f537:	8b 00                	mov    eax,DWORD PTR [eax]
c000f539:	6a 00                	push   0x0
c000f53b:	68 68 ee 00 c0       	push   0xc000ee68
c000f540:	6a 0c                	push   0xc
c000f542:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f545:	ff d0                	call   eax
c000f547:	83 c4 10             	add    esp,0x10
c000f54a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f54d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54f:	83 c0 24             	add    eax,0x24
c000f552:	8b 00                	mov    eax,DWORD PTR [eax]
c000f554:	6a 00                	push   0x0
c000f556:	68 e0 ed 00 c0       	push   0xc000ede0
c000f55b:	6a 0d                	push   0xd
c000f55d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f560:	ff d0                	call   eax
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f568:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56a:	83 c0 24             	add    eax,0x24
c000f56d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56f:	6a 00                	push   0x0
c000f571:	68 19 ee 00 c0       	push   0xc000ee19
c000f576:	6a 0e                	push   0xe
c000f578:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f57b:	ff d0                	call   eax
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f583:	8b 00                	mov    eax,DWORD PTR [eax]
c000f585:	83 c0 24             	add    eax,0x24
c000f588:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58a:	6a 00                	push   0x0
c000f58c:	68 68 ee 00 c0       	push   0xc000ee68
c000f591:	6a 0f                	push   0xf
c000f593:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f596:	ff d0                	call   eax
c000f598:	83 c4 10             	add    esp,0x10
c000f59b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f59e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a0:	83 c0 24             	add    eax,0x24
c000f5a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a5:	6a 00                	push   0x0
c000f5a7:	68 68 ee 00 c0       	push   0xc000ee68
c000f5ac:	6a 10                	push   0x10
c000f5ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5b1:	ff d0                	call   eax
c000f5b3:	83 c4 10             	add    esp,0x10
c000f5b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bb:	83 c0 24             	add    eax,0x24
c000f5be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c0:	6a 00                	push   0x0
c000f5c2:	68 68 ee 00 c0       	push   0xc000ee68
c000f5c7:	6a 11                	push   0x11
c000f5c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5cc:	ff d0                	call   eax
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d6:	83 c0 24             	add    eax,0x24
c000f5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5db:	6a 00                	push   0x0
c000f5dd:	68 68 ee 00 c0       	push   0xc000ee68
c000f5e2:	6a 12                	push   0x12
c000f5e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e7:	ff d0                	call   eax
c000f5e9:	83 c4 10             	add    esp,0x10
c000f5ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f1:	83 c0 24             	add    eax,0x24
c000f5f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f6:	6a 00                	push   0x0
c000f5f8:	68 68 ee 00 c0       	push   0xc000ee68
c000f5fd:	6a 13                	push   0x13
c000f5ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f602:	ff d0                	call   eax
c000f604:	83 c4 10             	add    esp,0x10
c000f607:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f60a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60c:	83 c0 24             	add    eax,0x24
c000f60f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f611:	6a 00                	push   0x0
c000f613:	68 68 ee 00 c0       	push   0xc000ee68
c000f618:	6a 14                	push   0x14
c000f61a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f61d:	ff d0                	call   eax
c000f61f:	83 c4 10             	add    esp,0x10
c000f622:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f625:	8b 00                	mov    eax,DWORD PTR [eax]
c000f627:	83 c0 24             	add    eax,0x24
c000f62a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62c:	6a 00                	push   0x0
c000f62e:	68 68 ee 00 c0       	push   0xc000ee68
c000f633:	6a 1e                	push   0x1e
c000f635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f638:	ff d0                	call   eax
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f640:	8b 00                	mov    eax,DWORD PTR [eax]
c000f642:	83 c0 24             	add    eax,0x24
c000f645:	8b 00                	mov    eax,DWORD PTR [eax]
c000f647:	6a 00                	push   0x0
c000f649:	68 fb 64 01 c0       	push   0xc00164fb
c000f64e:	6a 60                	push   0x60
c000f650:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f653:	ff d0                	call   eax
c000f655:	83 c4 10             	add    esp,0x10
c000f658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f65b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f65e:	c9                   	leave  
c000f65f:	c3                   	ret    

c000f660 <InterruptController::convertLegacyIRQNumber(int)>:
c000f660:	55                   	push   ebp
c000f661:	89 e5                	mov    ebp,esp
c000f663:	83 ec 08             	sub    esp,0x8
c000f666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f669:	83 ec 0c             	sub    esp,0xc
c000f66c:	50                   	push   eax
c000f66d:	e8 fc ea ff ff       	call   c000e16e <Device::getName()>
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	8a 00                	mov    al,BYTE PTR [eax]
c000f677:	3c 41                	cmp    al,0x41
c000f679:	0f 94 c0             	sete   al
c000f67c:	84 c0                	test   al,al
c000f67e:	74 28                	je     c000f6a8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f680:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f684:	7f 12                	jg     c000f698 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f686:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f689:	05 60 5a 02 c0       	add    eax,0xc0025a60
c000f68e:	8a 00                	mov    al,BYTE PTR [eax]
c000f690:	0f b6 c0             	movzx  eax,al
c000f693:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f696:	eb 10                	jmp    c000f6a8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f698:	83 ec 0c             	sub    esp,0xc
c000f69b:	68 a0 36 02 c0       	push   0xc00236a0
c000f6a0:	e8 44 4c 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000f6a5:	83 c4 10             	add    esp,0x10
c000f6a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6ab:	c9                   	leave  
c000f6ac:	c3                   	ret    
c000f6ad:	90                   	nop

c000f6ae <startGUI(void*)>:
c000f6ae:	55                   	push   ebp
c000f6af:	89 e5                	mov    ebp,esp
c000f6b1:	53                   	push   ebx
c000f6b2:	83 ec 04             	sub    esp,0x4
c000f6b5:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f6ba:	48                   	dec    eax
c000f6bb:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000f6c0:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f6c5:	85 c0                	test   eax,eax
c000f6c7:	75 01                	jne    c000f6ca <startGUI(void*)+0x1c>
c000f6c9:	fb                   	sti    
c000f6ca:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c000f6d0:	83 ec 08             	sub    esp,0x8
c000f6d3:	6a 01                	push   0x1
c000f6d5:	68 20 37 02 c0       	push   0xc0023720
c000f6da:	e8 f7 7d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c000f6df:	83 c4 10             	add    esp,0x10
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	53                   	push   ebx
c000f6e6:	50                   	push   eax
c000f6e7:	e8 1b 80 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c000f6ec:	83 c4 10             	add    esp,0x10
c000f6ef:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c000f6f5:	83 ec 08             	sub    esp,0x8
c000f6f8:	6a 01                	push   0x1
c000f6fa:	68 3a 37 02 c0       	push   0xc002373a
c000f6ff:	e8 d2 7d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c000f704:	83 c4 10             	add    esp,0x10
c000f707:	83 ec 08             	sub    esp,0x8
c000f70a:	53                   	push   ebx
c000f70b:	50                   	push   eax
c000f70c:	e8 f6 7f 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c000f711:	83 c4 10             	add    esp,0x10
c000f714:	90                   	nop
c000f715:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f718:	c9                   	leave  
c000f719:	c3                   	ret    

c000f71a <startGUIVESA(void*)>:
c000f71a:	55                   	push   ebp
c000f71b:	89 e5                	mov    ebp,esp
c000f71d:	53                   	push   ebx
c000f71e:	83 ec 04             	sub    esp,0x4
c000f721:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f726:	48                   	dec    eax
c000f727:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000f72c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f731:	85 c0                	test   eax,eax
c000f733:	75 01                	jne    c000f736 <startGUIVESA(void*)+0x1c>
c000f735:	fb                   	sti    
c000f736:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	6a 01                	push   0x1
c000f741:	68 54 37 02 c0       	push   0xc0023754
c000f746:	e8 8b 7d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c000f74b:	83 c4 10             	add    esp,0x10
c000f74e:	83 ec 08             	sub    esp,0x8
c000f751:	53                   	push   ebx
c000f752:	50                   	push   eax
c000f753:	e8 af 7f 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c000f758:	83 c4 10             	add    esp,0x10
c000f75b:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c000f761:	83 ec 08             	sub    esp,0x8
c000f764:	6a 01                	push   0x1
c000f766:	68 3a 37 02 c0       	push   0xc002373a
c000f76b:	e8 66 7d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c000f770:	83 c4 10             	add    esp,0x10
c000f773:	83 ec 08             	sub    esp,0x8
c000f776:	53                   	push   ebx
c000f777:	50                   	push   eax
c000f778:	e8 8a 7f 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c000f77d:	83 c4 10             	add    esp,0x10
c000f780:	90                   	nop
c000f781:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f784:	c9                   	leave  
c000f785:	c3                   	ret    

c000f786 <sendKeyToTerminal(unsigned char)>:
c000f786:	55                   	push   ebp
c000f787:	89 e5                	mov    ebp,esp
c000f789:	83 ec 28             	sub    esp,0x28
c000f78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f78f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f792:	a1 24 64 02 c0       	mov    eax,ds:0xc0026424
c000f797:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f79b:	83 ec 08             	sub    esp,0x8
c000f79e:	52                   	push   edx
c000f79f:	50                   	push   eax
c000f7a0:	e8 89 b6 ff ff       	call   c000ae2e <VgaText::receiveKey(unsigned char)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7ac:	0f 85 8f 00 00 00    	jne    c000f841 <sendKeyToTerminal(unsigned char)+0xbb>
c000f7b2:	fa                   	cli    
c000f7b3:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f7b8:	40                   	inc    eax
c000f7b9:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000f7be:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c000f7c3:	40                   	inc    eax
c000f7c4:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c000f7c9:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000f7ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7d1:	c7 05 00 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026500,0x0
c000f7db:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f7df:	74 1f                	je     c000f800 <sendKeyToTerminal(unsigned char)+0x7a>
c000f7e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f7e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f7ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f7ed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7f0:	83 ec 0c             	sub    esp,0xc
c000f7f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f7f6:	e8 7d 8b 00 00       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c000f7fb:	83 c4 10             	add    esp,0x10
c000f7fe:	eb db                	jmp    c000f7db <sendKeyToTerminal(unsigned char)+0x55>
c000f800:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c000f805:	48                   	dec    eax
c000f806:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c000f80b:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c000f810:	85 c0                	test   eax,eax
c000f812:	75 18                	jne    c000f82c <sendKeyToTerminal(unsigned char)+0xa6>
c000f814:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c000f819:	85 c0                	test   eax,eax
c000f81b:	74 0f                	je     c000f82c <sendKeyToTerminal(unsigned char)+0xa6>
c000f81d:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c000f827:	e8 90 86 00 00       	call   c0017ebc <schedule()>
c000f82c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f831:	48                   	dec    eax
c000f832:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000f837:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000f83c:	85 c0                	test   eax,eax
c000f83e:	75 01                	jne    c000f841 <sendKeyToTerminal(unsigned char)+0xbb>
c000f840:	fb                   	sti    
c000f841:	90                   	nop
c000f842:	c9                   	leave  
c000f843:	c3                   	ret    

c000f844 <sendKeyboardToken(KeyboardToken)>:
c000f844:	55                   	push   ebp
c000f845:	89 e5                	mov    ebp,esp
c000f847:	83 ec 18             	sub    esp,0x18
c000f84a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f850:	0f b7 c0             	movzx  eax,ax
c000f853:	83 f2 01             	xor    edx,0x1
c000f856:	88 90 20 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9ae0],dl
c000f85c:	a1 08 65 02 c0       	mov    eax,ds:0xc0026508
c000f861:	85 c0                	test   eax,eax
c000f863:	74 24                	je     c000f889 <sendKeyboardToken(KeyboardToken)+0x45>
c000f865:	8b 0d 08 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026508
c000f86b:	83 ec 04             	sub    esp,0x4
c000f86e:	68 20 65 02 c0       	push   0xc0026520
c000f873:	83 ec 08             	sub    esp,0x8
c000f876:	89 e2                	mov    edx,esp
c000f878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f87b:	89 02                	mov    DWORD PTR [edx],eax
c000f87d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f880:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f884:	ff d1                	call   ecx
c000f886:	83 c4 10             	add    esp,0x10
c000f889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f88c:	66 3d 03 02          	cmp    ax,0x203
c000f890:	75 07                	jne    c000f899 <sendKeyboardToken(KeyboardToken)+0x55>
c000f892:	a0 20 66 02 c0       	mov    al,ds:0xc0026620
c000f897:	84 c0                	test   al,al
c000f899:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f89d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8a0:	a0 28 69 02 c0       	mov    al,ds:0xc0026928
c000f8a5:	38 c2                	cmp    dl,al
c000f8a7:	74 1c                	je     c000f8c5 <sendKeyboardToken(KeyboardToken)+0x81>
c000f8a9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8ac:	a2 28 69 02 c0       	mov    ds:0xc0026928,al
c000f8b1:	a0 28 69 02 c0       	mov    al,ds:0xc0026928
c000f8b6:	0f b6 c0             	movzx  eax,al
c000f8b9:	83 ec 0c             	sub    esp,0xc
c000f8bc:	50                   	push   eax
c000f8bd:	e8 ac ab ff ff       	call   c000a46e <setTerminalScrollLock(bool)>
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f8c8:	84 c0                	test   al,al
c000f8ca:	0f 84 ae 00 00 00    	je     c000f97e <sendKeyboardToken(KeyboardToken)+0x13a>
c000f8d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d3:	66 3d 10 03          	cmp    ax,0x310
c000f8d7:	75 06                	jne    c000f8df <sendKeyboardToken(KeyboardToken)+0x9b>
c000f8d9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f8df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e2:	66 3d 11 03          	cmp    ax,0x311
c000f8e6:	75 06                	jne    c000f8ee <sendKeyboardToken(KeyboardToken)+0xaa>
c000f8e8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f8ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f1:	66 3d 12 03          	cmp    ax,0x312
c000f8f5:	75 06                	jne    c000f8fd <sendKeyboardToken(KeyboardToken)+0xb9>
c000f8f7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f8fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f900:	66 3d 13 03          	cmp    ax,0x313
c000f904:	75 06                	jne    c000f90c <sendKeyboardToken(KeyboardToken)+0xc8>
c000f906:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f90c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f90f:	66 3d 14 03          	cmp    ax,0x314
c000f913:	75 06                	jne    c000f91b <sendKeyboardToken(KeyboardToken)+0xd7>
c000f915:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91e:	66 3d 15 03          	cmp    ax,0x315
c000f922:	75 06                	jne    c000f92a <sendKeyboardToken(KeyboardToken)+0xe6>
c000f924:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f92d:	66 3d 16 03          	cmp    ax,0x316
c000f931:	75 06                	jne    c000f939 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f933:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f93c:	66 3d 17 03          	cmp    ax,0x317
c000f940:	75 06                	jne    c000f948 <sendKeyboardToken(KeyboardToken)+0x104>
c000f942:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94b:	66 3d 18 03          	cmp    ax,0x318
c000f94f:	75 06                	jne    c000f957 <sendKeyboardToken(KeyboardToken)+0x113>
c000f951:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f95a:	66 3d 19 03          	cmp    ax,0x319
c000f95e:	75 06                	jne    c000f966 <sendKeyboardToken(KeyboardToken)+0x122>
c000f960:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f969:	66 3d 1a 03          	cmp    ax,0x31a
c000f96d:	0f 85 c9 00 00 00    	jne    c000fa3c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f973:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f979:	e9 be 00 00 00       	jmp    c000fa3c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f97e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f981:	66 3d 10 03          	cmp    ax,0x310
c000f985:	75 0a                	jne    c000f991 <sendKeyboardToken(KeyboardToken)+0x14d>
c000f987:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f98d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f994:	66 3d 11 03          	cmp    ax,0x311
c000f998:	75 0a                	jne    c000f9a4 <sendKeyboardToken(KeyboardToken)+0x160>
c000f99a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a7:	66 3d 12 03          	cmp    ax,0x312
c000f9ab:	75 0a                	jne    c000f9b7 <sendKeyboardToken(KeyboardToken)+0x173>
c000f9ad:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ba:	66 3d 13 03          	cmp    ax,0x313
c000f9be:	75 0a                	jne    c000f9ca <sendKeyboardToken(KeyboardToken)+0x186>
c000f9c0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000f9c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9cd:	66 3d 14 03          	cmp    ax,0x314
c000f9d1:	75 0a                	jne    c000f9dd <sendKeyboardToken(KeyboardToken)+0x199>
c000f9d3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000f9d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e0:	66 3d 15 03          	cmp    ax,0x315
c000f9e4:	75 0a                	jne    c000f9f0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000f9e6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f3:	66 3d 16 03          	cmp    ax,0x316
c000f9f7:	75 0a                	jne    c000fa03 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000f9f9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000f9ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa06:	66 3d 17 03          	cmp    ax,0x317
c000fa0a:	75 0a                	jne    c000fa16 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa0c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa12:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa19:	66 3d 18 03          	cmp    ax,0x318
c000fa1d:	75 0a                	jne    c000fa29 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa1f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2c:	66 3d 19 03          	cmp    ax,0x319
c000fa30:	75 0a                	jne    c000fa3c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa32:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa3f:	66 3d 00 02          	cmp    ax,0x200
c000fa43:	75 2c                	jne    c000fa71 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa45:	a0 20 69 02 c0       	mov    al,ds:0xc0026920
c000fa4a:	83 f0 01             	xor    eax,0x1
c000fa4d:	84 c0                	test   al,al
c000fa4f:	74 20                	je     c000fa71 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa51:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000fa56:	6a 01                	push   0x1
c000fa58:	6a 00                	push   0x0
c000fa5a:	68 ae f6 00 c0       	push   0xc000f6ae
c000fa5f:	50                   	push   eax
c000fa60:	e8 3b 82 00 00       	call   c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	c6 05 20 69 02 c0 01 	mov    BYTE PTR ds:0xc0026920,0x1
c000fa6f:	eb 33                	jmp    c000faa4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fa71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa74:	66 3d 01 02          	cmp    ax,0x201
c000fa78:	75 2a                	jne    c000faa4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fa7a:	a0 20 69 02 c0       	mov    al,ds:0xc0026920
c000fa7f:	83 f0 01             	xor    eax,0x1
c000fa82:	84 c0                	test   al,al
c000fa84:	74 1e                	je     c000faa4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fa86:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c000fa8b:	6a 01                	push   0x1
c000fa8d:	6a 00                	push   0x0
c000fa8f:	68 1a f7 00 c0       	push   0xc000f71a
c000fa94:	50                   	push   eax
c000fa95:	e8 06 82 00 00       	call   c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	c6 05 20 69 02 c0 01 	mov    BYTE PTR ds:0xc0026920,0x1
c000faa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa7:	66 3d 1d 03          	cmp    ax,0x31d
c000faab:	75 06                	jne    c000fab3 <sendKeyboardToken(KeyboardToken)+0x26f>
c000faad:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab6:	66 3d 1c 03          	cmp    ax,0x31c
c000faba:	75 06                	jne    c000fac2 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fabc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac5:	66 3d 1b 03          	cmp    ax,0x31b
c000fac9:	75 06                	jne    c000fad1 <sendKeyboardToken(KeyboardToken)+0x28d>
c000facb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad4:	66 3d 1e 03          	cmp    ax,0x31e
c000fad8:	75 06                	jne    c000fae0 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fada:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fae3:	66 3d 1f 03          	cmp    ax,0x31f
c000fae7:	75 06                	jne    c000faef <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fae9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000faef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf2:	66 3d 1a 03          	cmp    ax,0x31a
c000faf6:	75 06                	jne    c000fafe <sendKeyboardToken(KeyboardToken)+0x2ba>
c000faf8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fafe:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb02:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb05:	83 f0 01             	xor    eax,0x1
c000fb08:	84 c0                	test   al,al
c000fb0a:	74 77                	je     c000fb83 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb0c:	a0 21 66 02 c0       	mov    al,ds:0xc0026621
c000fb11:	84 c0                	test   al,al
c000fb13:	74 41                	je     c000fb56 <sendKeyboardToken(KeyboardToken)+0x312>
c000fb15:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb19:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb1d:	74 2b                	je     c000fb4a <sendKeyboardToken(KeyboardToken)+0x306>
c000fb1f:	8b 15 24 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026924
c000fb25:	89 d0                	mov    eax,edx
c000fb27:	c1 e0 02             	shl    eax,0x2
c000fb2a:	01 d0                	add    eax,edx
c000fb2c:	01 c0                	add    eax,eax
c000fb2e:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000fb33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb36:	0f b7 c0             	movzx  eax,ax
c000fb39:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb3c:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000fb41:	01 d0                	add    eax,edx
c000fb43:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000fb48:	eb 6d                	jmp    c000fbb7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb4a:	c7 05 24 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026924,0x0
c000fb54:	eb 61                	jmp    c000fbb7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb56:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000fb5b:	85 c0                	test   eax,eax
c000fb5d:	74 18                	je     c000fb77 <sendKeyboardToken(KeyboardToken)+0x333>
c000fb5f:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000fb64:	0f b6 c0             	movzx  eax,al
c000fb67:	83 ec 0c             	sub    esp,0xc
c000fb6a:	50                   	push   eax
c000fb6b:	e8 16 fc ff ff       	call   c000f786 <sendKeyToTerminal(unsigned char)>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb77:	c7 05 24 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026924,0x0
c000fb81:	eb 34                	jmp    c000fbb7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb86:	66 3d 01 01          	cmp    ax,0x101
c000fb8a:	75 2b                	jne    c000fbb7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb8c:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000fb91:	85 c0                	test   eax,eax
c000fb93:	74 18                	je     c000fbad <sendKeyboardToken(KeyboardToken)+0x369>
c000fb95:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000fb9a:	0f b6 c0             	movzx  eax,al
c000fb9d:	83 ec 0c             	sub    esp,0xc
c000fba0:	50                   	push   eax
c000fba1:	e8 e0 fb ff ff       	call   c000f786 <sendKeyToTerminal(unsigned char)>
c000fba6:	83 c4 10             	add    esp,0x10
c000fba9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbad:	c7 05 24 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026924,0x0
c000fbb7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbba:	83 f0 01             	xor    eax,0x1
c000fbbd:	84 c0                	test   al,al
c000fbbf:	74 4c                	je     c000fc0d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbc1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fbc4:	83 f0 01             	xor    eax,0x1
c000fbc7:	84 c0                	test   al,al
c000fbc9:	74 42                	je     c000fc0d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbcb:	a0 20 66 02 c0       	mov    al,ds:0xc0026620
c000fbd0:	83 f0 01             	xor    eax,0x1
c000fbd3:	84 c0                	test   al,al
c000fbd5:	74 36                	je     c000fc0d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbda:	66 83 f8 1f          	cmp    ax,0x1f
c000fbde:	76 09                	jbe    c000fbe9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fbe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbe3:	66 83 f8 7e          	cmp    ax,0x7e
c000fbe7:	76 12                	jbe    c000fbfb <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fbe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbec:	66 83 f8 0a          	cmp    ax,0xa
c000fbf0:	74 09                	je     c000fbfb <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fbf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf5:	66 83 f8 08          	cmp    ax,0x8
c000fbf9:	75 12                	jne    c000fc0d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbfe:	0f b6 c0             	movzx  eax,al
c000fc01:	83 ec 0c             	sub    esp,0xc
c000fc04:	50                   	push   eax
c000fc05:	e8 7c fb ff ff       	call   c000f786 <sendKeyToTerminal(unsigned char)>
c000fc0a:	83 c4 10             	add    esp,0x10
c000fc0d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc10:	83 f0 01             	xor    eax,0x1
c000fc13:	84 c0                	test   al,al
c000fc15:	74 4f                	je     c000fc66 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc17:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc1a:	83 f0 01             	xor    eax,0x1
c000fc1d:	84 c0                	test   al,al
c000fc1f:	74 45                	je     c000fc66 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc21:	a0 20 66 02 c0       	mov    al,ds:0xc0026620
c000fc26:	84 c0                	test   al,al
c000fc28:	74 3c                	je     c000fc66 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2d:	66 83 f8 3f          	cmp    ax,0x3f
c000fc31:	76 33                	jbe    c000fc66 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc36:	66 83 f8 7f          	cmp    ax,0x7f
c000fc3a:	77 2a                	ja     c000fc66 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3f:	88 c2                	mov    dl,al
c000fc41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc44:	66 83 f8 5f          	cmp    ax,0x5f
c000fc48:	76 04                	jbe    c000fc4e <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc4a:	b0 20                	mov    al,0x20
c000fc4c:	eb 02                	jmp    c000fc50 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc4e:	b0 00                	mov    al,0x0
c000fc50:	29 c2                	sub    edx,eax
c000fc52:	88 d0                	mov    al,dl
c000fc54:	83 e8 40             	sub    eax,0x40
c000fc57:	0f b6 c0             	movzx  eax,al
c000fc5a:	83 ec 0c             	sub    esp,0xc
c000fc5d:	50                   	push   eax
c000fc5e:	e8 23 fb ff ff       	call   c000f786 <sendKeyToTerminal(unsigned char)>
c000fc63:	83 c4 10             	add    esp,0x10
c000fc66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc69:	66 3d 00 03          	cmp    ax,0x300
c000fc6d:	75 0f                	jne    c000fc7e <sendKeyboardToken(KeyboardToken)+0x43a>
c000fc6f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc72:	83 f0 01             	xor    eax,0x1
c000fc75:	84 c0                	test   al,al
c000fc77:	74 05                	je     c000fc7e <sendKeyboardToken(KeyboardToken)+0x43a>
c000fc79:	e8 61 ab ff ff       	call   c000a7df <doTerminalCycle()>
c000fc7e:	90                   	nop
c000fc7f:	c9                   	leave  
c000fc80:	c3                   	ret    

c000fc81 <clearInternalKeybuffer(VgaText*)>:
c000fc81:	55                   	push   ebp
c000fc82:	89 e5                	mov    ebp,esp
c000fc84:	83 ec 08             	sub    esp,0x8
c000fc87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc8a:	05 98 01 00 00       	add    eax,0x198
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	50                   	push   eax
c000fc93:	e8 08 0a ff ff       	call   c00006a0 <strlen>
c000fc98:	83 c4 10             	add    esp,0x10
c000fc9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fc9e:	81 c2 98 01 00 00    	add    edx,0x198
c000fca4:	83 ec 04             	sub    esp,0x4
c000fca7:	50                   	push   eax
c000fca8:	6a 00                	push   0x0
c000fcaa:	52                   	push   edx
c000fcab:	e8 d4 09 ff ff       	call   c0000684 <memset>
c000fcb0:	83 c4 10             	add    esp,0x10
c000fcb3:	90                   	nop
c000fcb4:	c9                   	leave  
c000fcb5:	c3                   	ret    

c000fcb6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcb6:	55                   	push   ebp
c000fcb7:	89 e5                	mov    ebp,esp
c000fcb9:	83 ec 18             	sub    esp,0x18
c000fcbc:	a1 08 65 02 c0       	mov    eax,ds:0xc0026508
c000fcc1:	85 c0                	test   eax,eax
c000fcc3:	74 2a                	je     c000fcef <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fcc5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fccb:	8b 0d 08 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026508
c000fcd1:	83 ec 04             	sub    esp,0x4
c000fcd4:	68 20 65 02 c0       	push   0xc0026520
c000fcd9:	83 ec 08             	sub    esp,0x8
c000fcdc:	89 e2                	mov    edx,esp
c000fcde:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fce1:	89 02                	mov    DWORD PTR [edx],eax
c000fce3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fce6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fcea:	ff d1                	call   ecx
c000fcec:	83 c4 10             	add    esp,0x10
c000fcef:	fb                   	sti    
c000fcf0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fcf7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fcfb:	0f 84 a1 00 00 00    	je     c000fda2 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd04:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd0a:	84 c0                	test   al,al
c000fd0c:	75 28                	jne    c000fd36 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd0e:	fa                   	cli    
c000fd0f:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000fd14:	40                   	inc    eax
c000fd15:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000fd1a:	e8 9d 81 00 00       	call   c0017ebc <schedule()>
c000fd1f:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000fd24:	48                   	dec    eax
c000fd25:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c000fd2a:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c000fd2f:	85 c0                	test   eax,eax
c000fd31:	75 ce                	jne    c000fd01 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd33:	fb                   	sti    
c000fd34:	eb cb                	jmp    c000fd01 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd39:	8d 50 01             	lea    edx,[eax+0x1]
c000fd3c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd42:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd48:	88 10                	mov    BYTE PTR [eax],dl
c000fd4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd4d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd53:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd59:	05 98 01 00 00       	add    eax,0x198
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	50                   	push   eax
c000fd62:	e8 39 09 ff ff       	call   c00006a0 <strlen>
c000fd67:	83 c4 10             	add    esp,0x10
c000fd6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd6d:	81 c2 98 01 00 00    	add    edx,0x198
c000fd73:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fd76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd79:	81 c2 98 01 00 00    	add    edx,0x198
c000fd7f:	83 ec 04             	sub    esp,0x4
c000fd82:	50                   	push   eax
c000fd83:	51                   	push   ecx
c000fd84:	52                   	push   edx
c000fd85:	e8 32 08 ff ff       	call   c00005bc <memmove>
c000fd8a:	83 c4 10             	add    esp,0x10
c000fd8d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fd90:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fd93:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fd97:	0f 85 5a ff ff ff    	jne    c000fcf7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fd9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fda0:	eb 03                	jmp    c000fda5 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fda2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fda5:	c9                   	leave  
c000fda6:	c3                   	ret    
c000fda7:	90                   	nop

c000fda8 <Keyboard::Keyboard(char const*)>:
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdaf:	83 ec 08             	sub    esp,0x8
c000fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb6:	50                   	push   eax
c000fdb7:	e8 b6 e2 ff ff       	call   c000e072 <Device::Device(char const*)>
c000fdbc:	83 c4 10             	add    esp,0x10
c000fdbf:	ba 78 37 02 c0       	mov    edx,0xc0023778
c000fdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc8:	89 10                	mov    DWORD PTR [eax],edx
c000fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdce:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fdd8:	c6 05 04 65 02 c0 01 	mov    BYTE PTR ds:0xc0026504,0x1
c000fddf:	90                   	nop
c000fde0:	83 c4 0c             	add    esp,0xc
c000fde3:	c3                   	ret    

c000fde4 <Keyboard::~Keyboard()>:
c000fde4:	83 ec 0c             	sub    esp,0xc
c000fde7:	ba 78 37 02 c0       	mov    edx,0xc0023778
c000fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf0:	89 10                	mov    DWORD PTR [eax],edx
c000fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf6:	83 ec 0c             	sub    esp,0xc
c000fdf9:	50                   	push   eax
c000fdfa:	e8 3d df ff ff       	call   c000dd3c <Device::~Device()>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	90                   	nop
c000fe03:	83 c4 0c             	add    esp,0xc
c000fe06:	c3                   	ret    
c000fe07:	90                   	nop

c000fe08 <Keyboard::~Keyboard()>:
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe12:	e8 cd ff ff ff       	call   c000fde4 <Keyboard::~Keyboard()>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	83 ec 08             	sub    esp,0x8
c000fe1d:	68 5c 01 00 00       	push   0x15c
c000fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe26:	e8 1c cb ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	83 c4 0c             	add    esp,0xc
c000fe31:	c3                   	ret    

c000fe32 <LogicalDisk::close(int, int, void*)>:
c000fe32:	83 c8 ff             	or     eax,0xffffffff
c000fe35:	c3                   	ret    

c000fe36 <LogicalDisk::~LogicalDisk()>:
c000fe36:	83 ec 0c             	sub    esp,0xc
c000fe39:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c000fe3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe42:	89 10                	mov    DWORD PTR [eax],edx
c000fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	50                   	push   eax
c000fe4c:	e8 eb de ff ff       	call   c000dd3c <Device::~Device()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	90                   	nop
c000fe55:	83 c4 0c             	add    esp,0xc
c000fe58:	c3                   	ret    
c000fe59:	90                   	nop

c000fe5a <LogicalDisk::~LogicalDisk()>:
c000fe5a:	83 ec 0c             	sub    esp,0xc
c000fe5d:	83 ec 0c             	sub    esp,0xc
c000fe60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe64:	e8 cd ff ff ff       	call   c000fe36 <LogicalDisk::~LogicalDisk()>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	83 ec 08             	sub    esp,0x8
c000fe6f:	68 74 01 00 00       	push   0x174
c000fe74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe78:	e8 ca ca ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	83 c4 0c             	add    esp,0xc
c000fe83:	c3                   	ret    

c000fe84 <LogicalDisk::open(int, int, void*)>:
c000fe84:	83 ec 18             	sub    esp,0x18
c000fe87:	68 a4 37 02 c0       	push   0xc00237a4
c000fe8c:	e8 58 44 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c000fe91:	83 c8 ff             	or     eax,0xffffffff
c000fe94:	83 c4 1c             	add    esp,0x1c
c000fe97:	c3                   	ret    

c000fe98 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fe98:	53                   	push   ebx
c000fe99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fea1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fea5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000feab:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000feb1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000feb7:	77 10                	ja     c000fec9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000feb9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000febf:	89 d3                	mov    ebx,edx
c000fec1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000fec7:	72 05                	jb     c000fece <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000fec9:	83 c8 ff             	or     eax,0xffffffff
c000fecc:	89 c2                	mov    edx,eax
c000fece:	5b                   	pop    ebx
c000fecf:	c3                   	ret    

c000fed0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000fed0:	56                   	push   esi
c000fed1:	83 c8 ff             	or     eax,0xffffffff
c000fed4:	53                   	push   ebx
c000fed5:	89 c2                	mov    edx,eax
c000fed7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fedb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fedf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fee3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000fee9:	77 27                	ja     c000ff12 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000feeb:	89 d8                	mov    eax,ebx
c000feed:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000fef3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000fef9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fefe:	89 c2                	mov    edx,eax
c000ff00:	73 10                	jae    c000ff12 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff02:	89 c8                	mov    eax,ecx
c000ff04:	89 da                	mov    edx,ebx
c000ff06:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff0c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff12:	5b                   	pop    ebx
c000ff13:	5e                   	pop    esi
c000ff14:	c3                   	ret    
c000ff15:	90                   	nop

c000ff16 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff16:	83 ec 1c             	sub    esp,0x1c
c000ff19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff3c:	83 ec 08             	sub    esp,0x8
c000ff3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff43:	50                   	push   eax
c000ff44:	e8 29 e1 ff ff       	call   c000e072 <Device::Device(char const*)>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c000ff51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff55:	89 10                	mov    DWORD PTR [eax],edx
c000ff57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff5b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff66:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff71:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ff7b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ff7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff87:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ff8d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ff93:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ff97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ff9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ff9e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffa4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ffb2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ffb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffbc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ffc6:	90                   	nop
c000ffc7:	83 c4 1c             	add    esp,0x1c
c000ffca:	c3                   	ret    
c000ffcb:	90                   	nop

c000ffcc <LogicalDisk::assignDriveLetter()>:
c000ffcc:	55                   	push   ebp
c000ffcd:	57                   	push   edi
c000ffce:	56                   	push   esi
c000ffcf:	53                   	push   ebx
c000ffd0:	83 ec 14             	sub    esp,0x14
c000ffd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffd7:	8b 3d 40 69 02 c0    	mov    edi,DWORD PTR ds:0xc0026940
c000ffdd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ffe3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ffe7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ffed:	8b 3d 44 69 02 c0    	mov    edi,DWORD PTR ds:0xc0026944
c000fff3:	3c 01                	cmp    al,0x1
c000fff5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000fff9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fffd:	19 c0                	sbb    eax,eax
c000ffff:	83 e0 02             	and    eax,0x2
c0010002:	83 c0 41             	add    eax,0x41
c0010005:	0f be e8             	movsx  ebp,al
c0010008:	3c 43                	cmp    al,0x43
c001000a:	75 10                	jne    c001001c <LogicalDisk::assignDriveLetter()+0x50>
c001000c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010013:	75 5d                	jne    c0010072 <LogicalDisk::assignDriveLetter()+0xa6>
c0010015:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001001a:	75 56                	jne    c0010072 <LogicalDisk::assignDriveLetter()+0xa6>
c001001c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001001f:	ba 01 00 00 00       	mov    edx,0x1
c0010024:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010028:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001002c:	d3 e2                	shl    edx,cl
c001002e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010032:	89 d7                	mov    edi,edx
c0010034:	89 d6                	mov    esi,edx
c0010036:	c1 ff 1f             	sar    edi,0x1f
c0010039:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001003d:	21 f9                	and    ecx,edi
c001003f:	09 d1                	or     ecx,edx
c0010041:	75 2f                	jne    c0010072 <LogicalDisk::assignDriveLetter()+0xa6>
c0010043:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010047:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001004b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010051:	09 f2                	or     edx,esi
c0010053:	89 15 40 69 02 c0    	mov    DWORD PTR ds:0xc0026940,edx
c0010059:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001005d:	09 fa                	or     edx,edi
c001005f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010063:	89 15 44 69 02 c0    	mov    DWORD PTR ds:0xc0026944,edx
c0010069:	89 1c bd 60 69 02 c0 	mov    DWORD PTR [edi*4-0x3ffd96a0],ebx
c0010070:	eb 08                	jmp    c001007a <LogicalDisk::assignDriveLetter()+0xae>
c0010072:	45                   	inc    ebp
c0010073:	40                   	inc    eax
c0010074:	3c 5b                	cmp    al,0x5b
c0010076:	75 90                	jne    c0010008 <LogicalDisk::assignDriveLetter()+0x3c>
c0010078:	31 c0                	xor    eax,eax
c001007a:	83 c4 14             	add    esp,0x14
c001007d:	5b                   	pop    ebx
c001007e:	5e                   	pop    esi
c001007f:	5f                   	pop    edi
c0010080:	5d                   	pop    ebp
c0010081:	c3                   	ret    

c0010082 <LogicalDisk::mount()>:
c0010082:	56                   	push   esi
c0010083:	53                   	push   ebx
c0010084:	53                   	push   ebx
c0010085:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010089:	8b 1d d4 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d4
c001008f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010099:	85 db                	test   ebx,ebx
c001009b:	74 27                	je     c00100c4 <LogicalDisk::mount()+0x42>
c001009d:	51                   	push   ecx
c001009e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100a5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100a7:	83 e8 41             	sub    eax,0x41
c00100aa:	50                   	push   eax
c00100ab:	56                   	push   esi
c00100ac:	53                   	push   ebx
c00100ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100b0:	83 c4 10             	add    esp,0x10
c00100b3:	84 c0                	test   al,al
c00100b5:	74 08                	je     c00100bf <LogicalDisk::mount()+0x3d>
c00100b7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00100bd:	eb 07                	jmp    c00100c6 <LogicalDisk::mount()+0x44>
c00100bf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00100c2:	eb d5                	jmp    c0010099 <LogicalDisk::mount()+0x17>
c00100c4:	31 c0                	xor    eax,eax
c00100c6:	5a                   	pop    edx
c00100c7:	5b                   	pop    ebx
c00100c8:	5e                   	pop    esi
c00100c9:	c3                   	ret    

c00100ca <LogicalDisk::unmount()>:
c00100ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ce:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00100d8:	c3                   	ret    
c00100d9:	90                   	nop

c00100da <LogicalDisk::eject()>:
c00100da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00100e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00100e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100ea:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00100ed:	90                   	nop

c00100ee <LogicalDisk::unassignDriveLetter()>:
c00100ee:	57                   	push   edi
c00100ef:	56                   	push   esi
c00100f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100f4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00100fb:	84 c9                	test   cl,cl
c00100fd:	75 0f                	jne    c001010e <LogicalDisk::unassignDriveLetter()+0x20>
c00100ff:	c7 44 24 0c c8 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc00237c8
c0010107:	5e                   	pop    esi
c0010108:	5f                   	pop    edi
c0010109:	e9 db 41 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c001010e:	83 e9 41             	sub    ecx,0x41
c0010111:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010118:	b8 01 00 00 00       	mov    eax,0x1
c001011d:	c7 04 8d 60 69 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd96a0],0x0
c0010128:	d3 e0                	shl    eax,cl
c001012a:	89 c7                	mov    edi,eax
c001012c:	f7 d0                	not    eax
c001012e:	c1 ff 1f             	sar    edi,0x1f
c0010131:	21 05 40 69 02 c0    	and    DWORD PTR ds:0xc0026940,eax
c0010137:	89 fe                	mov    esi,edi
c0010139:	f7 d6                	not    esi
c001013b:	21 35 44 69 02 c0    	and    DWORD PTR ds:0xc0026944,esi
c0010141:	5e                   	pop    esi
c0010142:	5f                   	pop    edi
c0010143:	c3                   	ret    

c0010144 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010144:	57                   	push   edi
c0010145:	56                   	push   esi
c0010146:	53                   	push   ebx
c0010147:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001014b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001014f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010153:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010157:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001015d:	77 41                	ja     c00101a0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001015f:	99                   	cdq    
c0010160:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010166:	01 c8                	add    eax,ecx
c0010168:	11 da                	adc    edx,ebx
c001016a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010170:	19 d7                	sbb    edi,edx
c0010172:	72 33                	jb     c00101a7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010174:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001017a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010180:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010184:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010188:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001018e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010194:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010198:	5b                   	pop    ebx
c0010199:	5e                   	pop    esi
c001019a:	5f                   	pop    edi
c001019b:	e9 3c 0b 00 00       	jmp    c0010cdc <VCache::read(unsigned long long, int, void*)>
c00101a0:	b8 05 00 00 00       	mov    eax,0x5
c00101a5:	eb 05                	jmp    c00101ac <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101a7:	b8 07 00 00 00       	mov    eax,0x7
c00101ac:	5b                   	pop    ebx
c00101ad:	5e                   	pop    esi
c00101ae:	5f                   	pop    edi
c00101af:	c3                   	ret    

c00101b0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00101b0:	57                   	push   edi
c00101b1:	56                   	push   esi
c00101b2:	53                   	push   ebx
c00101b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101c3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101c9:	77 41                	ja     c001020c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00101cb:	99                   	cdq    
c00101cc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101d2:	01 c8                	add    eax,ecx
c00101d4:	11 da                	adc    edx,ebx
c00101d6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101dc:	19 d7                	sbb    edi,edx
c00101de:	72 33                	jb     c0010213 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00101e0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101e6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101ec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101f0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101f4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010204:	5b                   	pop    ebx
c0010205:	5e                   	pop    esi
c0010206:	5f                   	pop    edi
c0010207:	e9 8c 09 00 00       	jmp    c0010b98 <VCache::write(unsigned long long, int, void*)>
c001020c:	b8 05 00 00 00       	mov    eax,0x5
c0010211:	eb 05                	jmp    c0010218 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010213:	b8 07 00 00 00       	mov    eax,0x7
c0010218:	5b                   	pop    ebx
c0010219:	5e                   	pop    esi
c001021a:	5f                   	pop    edi
c001021b:	c3                   	ret    

c001021c <Mouse::Mouse(char const*)>:
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010223:	83 ec 08             	sub    esp,0x8
c0010226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001022a:	50                   	push   eax
c001022b:	e8 42 de ff ff       	call   c000e072 <Device::Device(char const*)>
c0010230:	83 c4 10             	add    esp,0x10
c0010233:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c0010238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001023c:	89 10                	mov    DWORD PTR [eax],edx
c001023e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010242:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001024c:	90                   	nop
c001024d:	83 c4 0c             	add    esp,0xc
c0010250:	c3                   	ret    
c0010251:	90                   	nop
c0010252:	66 90                	xchg   ax,ax

c0010254 <Mouse::~Mouse()>:
c0010254:	83 ec 0c             	sub    esp,0xc
c0010257:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c001025c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010260:	89 10                	mov    DWORD PTR [eax],edx
c0010262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010266:	83 ec 0c             	sub    esp,0xc
c0010269:	50                   	push   eax
c001026a:	e8 cd da ff ff       	call   c000dd3c <Device::~Device()>
c001026f:	83 c4 10             	add    esp,0x10
c0010272:	90                   	nop
c0010273:	83 c4 0c             	add    esp,0xc
c0010276:	c3                   	ret    
c0010277:	90                   	nop

c0010278 <Mouse::~Mouse()>:
c0010278:	83 ec 0c             	sub    esp,0xc
c001027b:	83 ec 0c             	sub    esp,0xc
c001027e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010282:	e8 cd ff ff ff       	call   c0010254 <Mouse::~Mouse()>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	83 ec 08             	sub    esp,0x8
c001028d:	68 58 01 00 00       	push   0x158
c0010292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010296:	e8 ac c6 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001029b:	83 c4 10             	add    esp,0x10
c001029e:	83 c4 0c             	add    esp,0xc
c00102a1:	c3                   	ret    

c00102a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102a2:	55                   	push   ebp
c00102a3:	57                   	push   edi
c00102a4:	56                   	push   esi
c00102a5:	53                   	push   ebx
c00102a6:	81 ec 28 01 00 00    	sub    esp,0x128
c00102ac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102b3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102ba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00102c1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00102c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00102cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00102d0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00102d7:	e8 92 de ff ff       	call   c000e16e <Device::getName()>
c00102dc:	5a                   	pop    edx
c00102dd:	59                   	pop    ecx
c00102de:	50                   	push   eax
c00102df:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00102e3:	55                   	push   ebp
c00102e4:	e8 57 04 ff ff       	call   c0000740 <strcpy>
c00102e9:	5b                   	pop    ebx
c00102ea:	58                   	pop    eax
c00102eb:	68 40 38 02 c0       	push   0xc0023840
c00102f0:	55                   	push   ebp
c00102f1:	e8 8a 05 ff ff       	call   c0000880 <strcat>
c00102f6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00102fd:	e8 c1 96 ff ff       	call   c00099c3 <malloc>
c0010302:	83 c4 0c             	add    esp,0xc
c0010305:	89 c3                	mov    ebx,eax
c0010307:	57                   	push   edi
c0010308:	56                   	push   esi
c0010309:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001030d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010311:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010318:	55                   	push   ebp
c0010319:	50                   	push   eax
c001031a:	e8 f7 fb ff ff       	call   c000ff16 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001031f:	83 c4 14             	add    esp,0x14
c0010322:	53                   	push   ebx
c0010323:	e8 a4 fc ff ff       	call   c000ffcc <LogicalDisk::assignDriveLetter()>
c0010328:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001032b:	e8 52 fd ff ff       	call   c0010082 <LogicalDisk::mount()>
c0010330:	58                   	pop    eax
c0010331:	5a                   	pop    edx
c0010332:	53                   	push   ebx
c0010333:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001033a:	e8 2f db ff ff       	call   c000de6e <Device::addChild(Device*)>
c001033f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010345:	5b                   	pop    ebx
c0010346:	5e                   	pop    esi
c0010347:	5f                   	pop    edi
c0010348:	5d                   	pop    ebp
c0010349:	c3                   	ret    

c001034a <createPartitionsForDisk(PhysicalDisk*)>:
c001034a:	55                   	push   ebp
c001034b:	57                   	push   edi
c001034c:	56                   	push   esi
c001034d:	53                   	push   ebx
c001034e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010354:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001035b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010361:	3d 00 02 00 00       	cmp    eax,0x200
c0010366:	74 27                	je     c001038f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010368:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001036e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010374:	83 ec 10             	sub    esp,0x10
c0010377:	0f a4 f7 0a          	shld   edi,esi,0xa
c001037b:	99                   	cdq    
c001037c:	c1 e6 0a             	shl    esi,0xa
c001037f:	52                   	push   edx
c0010380:	89 fd                	mov    ebp,edi
c0010382:	50                   	push   eax
c0010383:	55                   	push   ebp
c0010384:	56                   	push   esi
c0010385:	e8 5a 0b 01 00       	call   c0020ee4 <__udivdi3>
c001038a:	e9 b1 00 00 00       	jmp    c0010440 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001038f:	83 ec 0c             	sub    esp,0xc
c0010392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010394:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010398:	56                   	push   esi
c0010399:	6a 01                	push   0x1
c001039b:	6a 00                	push   0x0
c001039d:	6a 00                	push   0x0
c001039f:	53                   	push   ebx
c00103a0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103a3:	83 c4 20             	add    esp,0x20
c00103a6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103ae:	75 0a                	jne    c00103ba <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103b0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103b8:	74 2c                	je     c00103e6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103ba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00103c0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00103c6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00103cc:	83 ec 10             	sub    esp,0x10
c00103cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00103d3:	89 f7                	mov    edi,esi
c00103d5:	c1 e0 0a             	shl    eax,0xa
c00103d8:	c1 ff 1f             	sar    edi,0x1f
c00103db:	57                   	push   edi
c00103dc:	56                   	push   esi
c00103dd:	52                   	push   edx
c00103de:	50                   	push   eax
c00103df:	e8 00 0b 01 00       	call   c0020ee4 <__udivdi3>
c00103e4:	eb 5a                	jmp    c0010440 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103e6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00103ed:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00103f4:	83 e1 7f             	and    ecx,0x7f
c00103f7:	83 e0 7f             	and    eax,0x7f
c00103fa:	01 c1                	add    ecx,eax
c00103fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010403:	83 e0 7f             	and    eax,0x7f
c0010406:	01 c1                	add    ecx,eax
c0010408:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001040f:	83 e0 7f             	and    eax,0x7f
c0010412:	00 c1                	add    cl,al
c0010414:	74 41                	je     c0010457 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010416:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001041c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010422:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010428:	83 ec 10             	sub    esp,0x10
c001042b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001042f:	89 f7                	mov    edi,esi
c0010431:	c1 e0 0a             	shl    eax,0xa
c0010434:	c1 ff 1f             	sar    edi,0x1f
c0010437:	57                   	push   edi
c0010438:	56                   	push   esi
c0010439:	52                   	push   edx
c001043a:	50                   	push   eax
c001043b:	e8 a4 0a 01 00       	call   c0020ee4 <__udivdi3>
c0010440:	83 c4 14             	add    esp,0x14
c0010443:	52                   	push   edx
c0010444:	50                   	push   eax
c0010445:	6a 00                	push   0x0
c0010447:	6a 00                	push   0x0
c0010449:	53                   	push   ebx
c001044a:	e8 53 fe ff ff       	call   c00102a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001044f:	83 c4 20             	add    esp,0x20
c0010452:	e9 79 01 00 00       	jmp    c00105d0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010457:	89 f0                	mov    eax,esi
c0010459:	31 f6                	xor    esi,esi
c001045b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010462:	75 02                	jne    c0010466 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010464:	89 f1                	mov    ecx,esi
c0010466:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001046d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010474:	c1 e2 08             	shl    edx,0x8
c0010477:	c1 e7 10             	shl    edi,0x10
c001047a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010482:	09 fa                	or     edx,edi
c0010484:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001048c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010493:	83 c0 10             	add    eax,0x10
c0010496:	09 fa                	or     edx,edi
c0010498:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001049f:	c1 e7 18             	shl    edi,0x18
c00104a2:	09 fa                	or     edx,edi
c00104a4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104ab:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104af:	c1 e7 10             	shl    edi,0x10
c00104b2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104b9:	c1 e2 08             	shl    edx,0x8
c00104bc:	09 fa                	or     edx,edi
c00104be:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00104c5:	09 fa                	or     edx,edi
c00104c7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00104ce:	c1 e7 18             	shl    edi,0x18
c00104d1:	09 fa                	or     edx,edi
c00104d3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00104d7:	46                   	inc    esi
c00104d8:	83 fe 04             	cmp    esi,0x4
c00104db:	0f 85 7a ff ff ff    	jne    c001045b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00104e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e5:	83 f0 01             	xor    eax,0x1
c00104e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00104ec:	75 57                	jne    c0010545 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00104ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104f2:	83 f0 01             	xor    eax,0x1
c00104f5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00104f9:	75 4a                	jne    c0010545 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00104fb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00104ff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010507:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001050f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010515:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001051b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010521:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010525:	89 f7                	mov    edi,esi
c0010527:	c1 e0 0a             	shl    eax,0xa
c001052a:	c1 ff 1f             	sar    edi,0x1f
c001052d:	57                   	push   edi
c001052e:	56                   	push   esi
c001052f:	52                   	push   edx
c0010530:	50                   	push   eax
c0010531:	e8 ae 09 01 00       	call   c0020ee4 <__udivdi3>
c0010536:	83 c4 10             	add    esp,0x10
c0010539:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001053d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010541:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010545:	84 c9                	test   cl,cl
c0010547:	74 53                	je     c001059c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010549:	0f b6 c9             	movzx  ecx,cl
c001054c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010554:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010558:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001055c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010560:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010564:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010568:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001056c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010570:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010578:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001057c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010580:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010584:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010588:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001058c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010590:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010594:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010598:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001059c:	31 ed                	xor    ebp,ebp
c001059e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105a2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105a6:	89 f8                	mov    eax,edi
c00105a8:	09 f0                	or     eax,esi
c00105aa:	74 1e                	je     c00105ca <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105ac:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105b0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105b4:	89 d1                	mov    ecx,edx
c00105b6:	09 c1                	or     ecx,eax
c00105b8:	74 10                	je     c00105ca <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105ba:	83 ec 0c             	sub    esp,0xc
c00105bd:	57                   	push   edi
c00105be:	56                   	push   esi
c00105bf:	52                   	push   edx
c00105c0:	50                   	push   eax
c00105c1:	53                   	push   ebx
c00105c2:	e8 db fc ff ff       	call   c00102a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00105c7:	83 c4 20             	add    esp,0x20
c00105ca:	45                   	inc    ebp
c00105cb:	83 fd 04             	cmp    ebp,0x4
c00105ce:	75 ce                	jne    c001059e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00105d0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105d6:	5b                   	pop    ebx
c00105d7:	5e                   	pop    esi
c00105d8:	5f                   	pop    edi
c00105d9:	5d                   	pop    ebp
c00105da:	c3                   	ret    
c00105db:	90                   	nop

c00105dc <Serial::Serial(char const*)>:
c00105dc:	83 ec 0c             	sub    esp,0xc
c00105df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e3:	83 ec 08             	sub    esp,0x8
c00105e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ea:	50                   	push   eax
c00105eb:	e8 82 da ff ff       	call   c000e072 <Device::Device(char const*)>
c00105f0:	83 c4 10             	add    esp,0x10
c00105f3:	ba 54 38 02 c0       	mov    edx,0xc0023854
c00105f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fc:	89 10                	mov    DWORD PTR [eax],edx
c00105fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010602:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001060c:	90                   	nop
c001060d:	83 c4 0c             	add    esp,0xc
c0010610:	c3                   	ret    
c0010611:	90                   	nop
c0010612:	66 90                	xchg   ax,ax

c0010614 <Serial::~Serial()>:
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	ba 54 38 02 c0       	mov    edx,0xc0023854
c001061c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010620:	89 10                	mov    DWORD PTR [eax],edx
c0010622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010626:	83 ec 0c             	sub    esp,0xc
c0010629:	50                   	push   eax
c001062a:	e8 0d d7 ff ff       	call   c000dd3c <Device::~Device()>
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	90                   	nop
c0010633:	83 c4 0c             	add    esp,0xc
c0010636:	c3                   	ret    
c0010637:	90                   	nop

c0010638 <Serial::~Serial()>:
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	83 ec 0c             	sub    esp,0xc
c001063e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010642:	e8 cd ff ff ff       	call   c0010614 <Serial::~Serial()>
c0010647:	83 c4 10             	add    esp,0x10
c001064a:	83 ec 08             	sub    esp,0x8
c001064d:	68 58 01 00 00       	push   0x158
c0010652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010656:	e8 ec c2 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001065b:	83 c4 10             	add    esp,0x10
c001065e:	83 c4 0c             	add    esp,0xc
c0010661:	c3                   	ret    
c0010662:	66 90                	xchg   ax,ax

c0010664 <Timer::Timer(char const*)>:
c0010664:	83 ec 0c             	sub    esp,0xc
c0010667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066b:	83 ec 08             	sub    esp,0x8
c001066e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010672:	50                   	push   eax
c0010673:	e8 fa d9 ff ff       	call   c000e072 <Device::Device(char const*)>
c0010678:	83 c4 10             	add    esp,0x10
c001067b:	ba 98 38 02 c0       	mov    edx,0xc0023898
c0010680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010684:	89 10                	mov    DWORD PTR [eax],edx
c0010686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010694:	90                   	nop
c0010695:	83 c4 0c             	add    esp,0xc
c0010698:	c3                   	ret    
c0010699:	90                   	nop
c001069a:	66 90                	xchg   ax,ax

c001069c <Timer::~Timer()>:
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	ba 98 38 02 c0       	mov    edx,0xc0023898
c00106a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a8:	89 10                	mov    DWORD PTR [eax],edx
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	50                   	push   eax
c00106b2:	e8 85 d6 ff ff       	call   c000dd3c <Device::~Device()>
c00106b7:	83 c4 10             	add    esp,0x10
c00106ba:	90                   	nop
c00106bb:	83 c4 0c             	add    esp,0xc
c00106be:	c3                   	ret    
c00106bf:	90                   	nop

c00106c0 <Timer::~Timer()>:
c00106c0:	83 ec 0c             	sub    esp,0xc
c00106c3:	83 ec 0c             	sub    esp,0xc
c00106c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ca:	e8 cd ff ff ff       	call   c001069c <Timer::~Timer()>
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	83 ec 08             	sub    esp,0x8
c00106d5:	68 5c 01 00 00       	push   0x15c
c00106da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106de:	e8 64 c2 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00106e3:	83 c4 10             	add    esp,0x10
c00106e6:	83 c4 0c             	add    esp,0xc
c00106e9:	c3                   	ret    

c00106ea <Timer::read()>:
c00106ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00106f4:	c3                   	ret    

c00106f5 <timerHandler(unsigned int)>:
c00106f5:	56                   	push   esi
c00106f6:	53                   	push   ebx
c00106f7:	51                   	push   ecx
c00106f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fc:	01 05 cc 69 02 c0    	add    DWORD PTR ds:0xc00269cc,eax
c0010702:	80 3d 6d 63 02 c0 00 	cmp    BYTE PTR ds:0xc002636d,0x0
c0010709:	0f 84 49 01 00 00    	je     c0010858 <timerHandler(unsigned int)+0x163>
c001070f:	fa                   	cli    
c0010710:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0010716:	83 ec 0c             	sub    esp,0xc
c0010719:	ff 05 64 78 02 c0    	inc    DWORD PTR ds:0xc0027864
c001071f:	68 78 78 02 c0       	push   0xc0027878
c0010724:	e8 8b 0d 01 00       	call   c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	84 c0                	test   al,al
c001072e:	0f 85 a0 00 00 00    	jne    c00107d4 <timerHandler(unsigned int)+0xdf>
c0010734:	83 ec 0c             	sub    esp,0xc
c0010737:	68 78 78 02 c0       	push   0xc0027878
c001073c:	e8 8f 0d 01 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010741:	83 c4 10             	add    esp,0x10
c0010744:	89 c6                	mov    esi,eax
c0010746:	66 90                	xchg   ax,ax
c0010748:	83 ec 0c             	sub    esp,0xc
c001074b:	68 78 78 02 c0       	push   0xc0027878
c0010750:	e8 7b 0d 01 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010755:	c7 04 24 78 78 02 c0 	mov    DWORD PTR [esp],0xc0027878
c001075c:	89 c3                	mov    ebx,eax
c001075e:	e8 75 0d 01 00       	call   c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010763:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010766:	83 c4 10             	add    esp,0x10
c0010769:	3b 05 cc 69 02 c0    	cmp    eax,DWORD PTR ds:0xc00269cc
c001076f:	77 23                	ja     c0010794 <timerHandler(unsigned int)+0x9f>
c0010771:	83 ec 0c             	sub    esp,0xc
c0010774:	53                   	push   ebx
c0010775:	e8 fe 7b 00 00       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c001077a:	83 c4 10             	add    esp,0x10
c001077d:	39 de                	cmp    esi,ebx
c001077f:	75 27                	jne    c00107a8 <timerHandler(unsigned int)+0xb3>
c0010781:	83 ec 0c             	sub    esp,0xc
c0010784:	68 78 78 02 c0       	push   0xc0027878
c0010789:	e8 42 0d 01 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001078e:	89 c6                	mov    esi,eax
c0010790:	eb 12                	jmp    c00107a4 <timerHandler(unsigned int)+0xaf>
c0010792:	66 90                	xchg   ax,ax
c0010794:	52                   	push   edx
c0010795:	52                   	push   edx
c0010796:	53                   	push   ebx
c0010797:	68 78 78 02 c0       	push   0xc0027878
c001079c:	e8 ef 0d 01 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107a1:	8d 76 00             	lea    esi,[esi+0x0]
c00107a4:	83 c4 10             	add    esp,0x10
c00107a7:	90                   	nop
c00107a8:	83 ec 0c             	sub    esp,0xc
c00107ab:	68 78 78 02 c0       	push   0xc0027878
c00107b0:	e8 ff 0c 01 00       	call   c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107b5:	83 c4 10             	add    esp,0x10
c00107b8:	84 c0                	test   al,al
c00107ba:	75 18                	jne    c00107d4 <timerHandler(unsigned int)+0xdf>
c00107bc:	83 ec 0c             	sub    esp,0xc
c00107bf:	68 78 78 02 c0       	push   0xc0027878
c00107c4:	e8 07 0d 01 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	39 f0                	cmp    eax,esi
c00107ce:	0f 85 74 ff ff ff    	jne    c0010748 <timerHandler(unsigned int)+0x53>
c00107d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107d9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c00107dd:	74 41                	je     c0010820 <timerHandler(unsigned int)+0x12b>
c00107df:	80 3d 6c 63 02 c0 00 	cmp    BYTE PTR ds:0xc002636c,0x0
c00107e6:	74 38                	je     c0010820 <timerHandler(unsigned int)+0x12b>
c00107e8:	fa                   	cli    
c00107e9:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00107ef:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c00107f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00107fa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c00107fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010803:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010806:	72 08                	jb     c0010810 <timerHandler(unsigned int)+0x11b>
c0010808:	e8 af 76 00 00       	call   c0017ebc <schedule()>
c001080d:	8d 76 00             	lea    esi,[esi+0x0]
c0010810:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0010815:	48                   	dec    eax
c0010816:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c001081b:	75 03                	jne    c0010820 <timerHandler(unsigned int)+0x12b>
c001081d:	fb                   	sti    
c001081e:	66 90                	xchg   ax,ax
c0010820:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0010825:	48                   	dec    eax
c0010826:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c001082b:	75 1b                	jne    c0010848 <timerHandler(unsigned int)+0x153>
c001082d:	83 3d 60 78 02 c0 00 	cmp    DWORD PTR ds:0xc0027860,0x0
c0010834:	74 12                	je     c0010848 <timerHandler(unsigned int)+0x153>
c0010836:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c0010840:	e8 77 76 00 00       	call   c0017ebc <schedule()>
c0010845:	8d 76 00             	lea    esi,[esi+0x0]
c0010848:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c001084d:	48                   	dec    eax
c001084e:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0010853:	75 03                	jne    c0010858 <timerHandler(unsigned int)+0x163>
c0010855:	fb                   	sti    
c0010856:	66 90                	xchg   ax,ax
c0010858:	58                   	pop    eax
c0010859:	5b                   	pop    ebx
c001085a:	5e                   	pop    esi
c001085b:	c3                   	ret    

c001085c <setupTimer(int)>:
c001085c:	57                   	push   edi
c001085d:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0010862:	56                   	push   esi
c0010863:	53                   	push   ebx
c0010864:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010868:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010877:	e8 f2 d8 ff ff       	call   c000e16e <Device::getName()>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010882:	0f 85 94 00 00 00    	jne    c001091c <setupTimer(int)+0xc0>
c0010888:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001088d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010894:	0f 84 82 00 00 00    	je     c001091c <setupTimer(int)+0xc0>
c001089a:	83 ec 0c             	sub    esp,0xc
c001089d:	68 5c 01 00 00       	push   0x15c
c00108a2:	e8 1c 91 ff ff       	call   c00099c3 <malloc>
c00108a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00108aa:	89 c3                	mov    ebx,eax
c00108ac:	e8 0f 02 01 00       	call   c0020ac0 <PIT::PIT()>
c00108b1:	59                   	pop    ecx
c00108b2:	5f                   	pop    edi
c00108b3:	53                   	push   ebx
c00108b4:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c00108ba:	e8 af d5 ff ff       	call   c000de6e <Device::addChild(Device*)>
c00108bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108c1:	6a 00                	push   0x0
c00108c3:	6a 00                	push   0x0
c00108c5:	56                   	push   esi
c00108c6:	53                   	push   ebx
c00108c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ca:	83 c4 14             	add    esp,0x14
c00108cd:	68 60 01 00 00       	push   0x160
c00108d2:	e8 ec 90 ff ff       	call   c00099c3 <malloc>
c00108d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00108da:	89 c7                	mov    edi,eax
c00108dc:	e8 93 00 01 00       	call   c0020974 <APICTimer::APICTimer()>
c00108e1:	6a 00                	push   0x0
c00108e3:	6a 00                	push   0x0
c00108e5:	56                   	push   esi
c00108e6:	57                   	push   edi
c00108e7:	e8 88 ff 00 00       	call   c0020874 <APICTimer::open(int, int, void*)>
c00108ec:	83 c4 20             	add    esp,0x20
c00108ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108f1:	6a 00                	push   0x0
c00108f3:	6a 00                	push   0x0
c00108f5:	6a 00                	push   0x0
c00108f7:	53                   	push   ebx
c00108f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00108fb:	58                   	pop    eax
c00108fc:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0010901:	5a                   	pop    edx
c0010902:	57                   	push   edi
c0010903:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010909:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001090f:	e8 5a d5 ff ff       	call   c000de6e <Device::addChild(Device*)>
c0010914:	83 c4 10             	add    esp,0x10
c0010917:	eb 37                	jmp    c0010950 <setupTimer(int)+0xf4>
c0010919:	8d 76 00             	lea    esi,[esi+0x0]
c001091c:	83 ec 0c             	sub    esp,0xc
c001091f:	68 5c 01 00 00       	push   0x15c
c0010924:	e8 9a 90 ff ff       	call   c00099c3 <malloc>
c0010929:	89 04 24             	mov    DWORD PTR [esp],eax
c001092c:	89 c3                	mov    ebx,eax
c001092e:	e8 8d 01 01 00       	call   c0020ac0 <PIT::PIT()>
c0010933:	58                   	pop    eax
c0010934:	5a                   	pop    edx
c0010935:	53                   	push   ebx
c0010936:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c001093c:	e8 2d d5 ff ff       	call   c000de6e <Device::addChild(Device*)>
c0010941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010943:	6a 00                	push   0x0
c0010945:	6a 00                	push   0x0
c0010947:	56                   	push   esi
c0010948:	53                   	push   ebx
c0010949:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001094c:	83 c4 20             	add    esp,0x20
c001094f:	90                   	nop
c0010950:	89 d8                	mov    eax,ebx
c0010952:	5b                   	pop    ebx
c0010953:	5e                   	pop    esi
c0010954:	5f                   	pop    edi
c0010955:	c3                   	ret    
c0010956:	66 90                	xchg   ax,ax

c0010958 <VCache::VCache(PhysicalDisk*)>:
c0010958:	53                   	push   ebx
c0010959:	83 ec 18             	sub    esp,0x18
c001095c:	ba e8 39 02 c0       	mov    edx,0xc00239e8
c0010961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010965:	89 10                	mov    DWORD PTR [eax],edx
c0010967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001096b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010976:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001097d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010981:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010988:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001098f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010993:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001099a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00109bf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00109c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00109ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00109d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109da:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00109de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00109e9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00109f1:	83 ec 0c             	sub    esp,0xc
c00109f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109f8:	e8 c6 8f ff ff       	call   c00099c3 <malloc>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	89 c3                	mov    ebx,eax
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	53                   	push   ebx
c0010a06:	e8 81 72 00 00       	call   c0017c8c <Mutex::Mutex()>
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a12:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a24:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a2f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a39:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a40:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a4c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a50:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a53:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010a68:	05 00 01 00 00       	add    eax,0x100
c0010a6d:	c1 e0 04             	shl    eax,0x4
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	50                   	push   eax
c0010a74:	e8 4a 8f ff ff       	call   c00099c3 <malloc>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	89 c2                	mov    edx,eax
c0010a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a89:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a94:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a9c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aa2:	c1 e0 07             	shl    eax,0x7
c0010aa5:	83 ec 0c             	sub    esp,0xc
c0010aa8:	50                   	push   eax
c0010aa9:	e8 15 8f ff ff       	call   c00099c3 <malloc>
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	89 c2                	mov    edx,eax
c0010ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010aba:	90                   	nop
c0010abb:	83 c4 18             	add    esp,0x18
c0010abe:	5b                   	pop    ebx
c0010abf:	c3                   	ret    

c0010ac0 <VCache::invalidateReadBuffer()>:
c0010ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ac4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010aca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010ace:	c3                   	ret    
c0010acf:	90                   	nop

c0010ad0 <VCache::writeWriteBuffer()>:
c0010ad0:	53                   	push   ebx
c0010ad1:	83 ec 0c             	sub    esp,0xc
c0010ad4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ad8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010adb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ade:	68 c0 38 02 c0       	push   0xc00238c0
c0010ae3:	e8 40 bf ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010ae8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010aeb:	5a                   	pop    edx
c0010aec:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010af1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010af4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010af7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010afa:	50                   	push   eax
c0010afb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010afe:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b05:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b0c:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b10:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b17:	83 c4 28             	add    esp,0x28
c0010b1a:	5b                   	pop    ebx
c0010b1b:	c3                   	ret    

c0010b1c <VCache::~VCache()>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	ba e8 39 02 c0       	mov    edx,0xc00239e8
c0010b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b28:	89 10                	mov    DWORD PTR [eax],edx
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b31:	84 c0                	test   al,al
c0010b33:	74 0f                	je     c0010b44 <VCache::~VCache()+0x28>
c0010b35:	83 ec 0c             	sub    esp,0xc
c0010b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3c:	e8 8f ff ff ff       	call   c0010ad0 <VCache::writeWriteBuffer()>
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b48:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b4b:	83 ec 0c             	sub    esp,0xc
c0010b4e:	50                   	push   eax
c0010b4f:	e8 7f 8e ff ff       	call   c00099d3 <free>
c0010b54:	83 c4 10             	add    esp,0x10
c0010b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	50                   	push   eax
c0010b62:	e8 6c 8e ff ff       	call   c00099d3 <free>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	90                   	nop
c0010b6b:	83 c4 0c             	add    esp,0xc
c0010b6e:	c3                   	ret    
c0010b6f:	90                   	nop

c0010b70 <VCache::~VCache()>:
c0010b70:	83 ec 0c             	sub    esp,0xc
c0010b73:	83 ec 0c             	sub    esp,0xc
c0010b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7a:	e8 9d ff ff ff       	call   c0010b1c <VCache::~VCache()>
c0010b7f:	83 c4 10             	add    esp,0x10
c0010b82:	83 ec 08             	sub    esp,0x8
c0010b85:	6a 44                	push   0x44
c0010b87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b8b:	e8 b7 bd ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0010b90:	83 c4 10             	add    esp,0x10
c0010b93:	83 c4 0c             	add    esp,0xc
c0010b96:	c3                   	ret    
c0010b97:	90                   	nop

c0010b98 <VCache::write(unsigned long long, int, void*)>:
c0010b98:	55                   	push   ebp
c0010b99:	31 c0                	xor    eax,eax
c0010b9b:	57                   	push   edi
c0010b9c:	56                   	push   esi
c0010b9d:	53                   	push   ebx
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ba5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ba9:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010bad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bb4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010bb8:	7d 16                	jge    c0010bd0 <VCache::write(unsigned long long, int, void*)+0x38>
c0010bba:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010bbd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010bc3:	0f af c8             	imul   ecx,eax
c0010bc6:	89 ca                	mov    edx,ecx
c0010bc8:	01 f2                	add    edx,esi
c0010bca:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010bcc:	40                   	inc    eax
c0010bcd:	eb e5                	jmp    c0010bb4 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010bcf:	90                   	nop
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	68 e4 38 02 c0       	push   0xc00238e4
c0010bd8:	e8 4b be ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010bdd:	83 c4 10             	add    esp,0x10
c0010be0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010be4:	74 0e                	je     c0010bf4 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010be6:	83 ec 0c             	sub    esp,0xc
c0010be9:	53                   	push   ebx
c0010bea:	e8 d1 fe ff ff       	call   c0010ac0 <VCache::invalidateReadBuffer()>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	66 90                	xchg   ax,ax
c0010bf4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010bf8:	74 66                	je     c0010c60 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010bfa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bfd:	99                   	cdq    
c0010bfe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c01:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c04:	31 f8                	xor    eax,edi
c0010c06:	89 d1                	mov    ecx,edx
c0010c08:	89 ca                	mov    edx,ecx
c0010c0a:	31 ea                	xor    edx,ebp
c0010c0c:	09 d0                	or     eax,edx
c0010c0e:	75 44                	jne    c0010c54 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c10:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c15:	75 3d                	jne    c0010c54 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	68 0b 39 02 c0       	push   0xc002390b
c0010c1f:	e8 04 be ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010c24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c27:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c2a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c30:	0f af f9             	imul   edi,ecx
c0010c33:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c38:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	40                   	inc    eax
c0010c3f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c42:	83 c0 80             	add    eax,0xffffff80
c0010c45:	75 7d                	jne    c0010cc4 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c47:	83 ec 0c             	sub    esp,0xc
c0010c4a:	53                   	push   ebx
c0010c4b:	e8 80 fe ff ff       	call   c0010ad0 <VCache::writeWriteBuffer()>
c0010c50:	eb 42                	jmp    c0010c94 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c52:	66 90                	xchg   ax,ax
c0010c54:	83 ec 0c             	sub    esp,0xc
c0010c57:	53                   	push   ebx
c0010c58:	e8 73 fe ff ff       	call   c0010ad0 <VCache::writeWriteBuffer()>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0010c65:	7f 35                	jg     c0010c9c <VCache::write(unsigned long long, int, void*)+0x104>
c0010c67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c6b:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010c6e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c71:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010c74:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010c78:	52                   	push   edx
c0010c79:	56                   	push   esi
c0010c7a:	6a 01                	push   0x1
c0010c7c:	68 21 39 02 c0       	push   0xc0023921
c0010c81:	e8 a2 bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010c86:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c89:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c8c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	eb 2b                	jmp    c0010cc4 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c99:	8d 76 00             	lea    esi,[esi+0x0]
c0010c9c:	50                   	push   eax
c0010c9d:	56                   	push   esi
c0010c9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010ca2:	68 42 39 02 c0       	push   0xc0023942
c0010ca7:	e8 7c bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010cac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010caf:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cb8:	55                   	push   ebp
c0010cb9:	57                   	push   edi
c0010cba:	50                   	push   eax
c0010cbb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010cbe:	83 c4 20             	add    esp,0x20
c0010cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc4:	83 ec 0c             	sub    esp,0xc
c0010cc7:	68 5f 39 02 c0       	push   0xc002395f
c0010ccc:	e8 57 bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010cd1:	83 c4 1c             	add    esp,0x1c
c0010cd4:	31 c0                	xor    eax,eax
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	5d                   	pop    ebp
c0010cda:	c3                   	ret    
c0010cdb:	90                   	nop

c0010cdc <VCache::read(unsigned long long, int, void*)>:
c0010cdc:	55                   	push   ebp
c0010cdd:	57                   	push   edi
c0010cde:	56                   	push   esi
c0010cdf:	53                   	push   ebx
c0010ce0:	83 ec 1c             	sub    esp,0x1c
c0010ce3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ce7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cf2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010cf6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010cfa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010cfe:	31 c0                	xor    eax,eax
c0010d00:	39 f0                	cmp    eax,esi
c0010d02:	7d 18                	jge    c0010d1c <VCache::read(unsigned long long, int, void*)+0x40>
c0010d04:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d07:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010d0d:	0f af f8             	imul   edi,eax
c0010d10:	89 fa                	mov    edx,edi
c0010d12:	01 ea                	add    edx,ebp
c0010d14:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010d16:	40                   	inc    eax
c0010d17:	eb e7                	jmp    c0010d00 <VCache::read(unsigned long long, int, void*)+0x24>
c0010d19:	8d 76 00             	lea    esi,[esi+0x0]
c0010d1c:	83 ec 0c             	sub    esp,0xc
c0010d1f:	68 7f 39 02 c0       	push   0xc002397f
c0010d24:	e8 ff bc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010d29:	83 c4 10             	add    esp,0x10
c0010d2c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d30:	74 0e                	je     c0010d40 <VCache::read(unsigned long long, int, void*)+0x64>
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	53                   	push   ebx
c0010d36:	e8 95 fd ff ff       	call   c0010ad0 <VCache::writeWriteBuffer()>
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	66 90                	xchg   ax,ax
c0010d40:	83 fe 01             	cmp    esi,0x1
c0010d43:	75 7b                	jne    c0010dc0 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d48:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d4f:	75 6f                	jne    c0010dc0 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d51:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010d54:	89 d1                	mov    ecx,edx
c0010d56:	f7 d9                	neg    ecx
c0010d58:	89 cf                	mov    edi,ecx
c0010d5a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d5e:	c1 ff 1f             	sar    edi,0x1f
c0010d61:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010d64:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010d68:	89 ce                	mov    esi,ecx
c0010d6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d6e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010d72:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010d76:	89 cf                	mov    edi,ecx
c0010d78:	74 0a                	je     c0010d84 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010d7a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010d7d:	75 05                	jne    c0010d84 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010d7f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010d82:	74 1c                	je     c0010da0 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010d84:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010d88:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010d8b:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010d8e:	83 ec 0c             	sub    esp,0xc
c0010d91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010d93:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010d96:	52                   	push   edx
c0010d97:	57                   	push   edi
c0010d98:	56                   	push   esi
c0010d99:	50                   	push   eax
c0010d9a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010d9d:	83 c4 20             	add    esp,0x20
c0010da0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010da3:	89 ef                	mov    edi,ebp
c0010da5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010dab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010dae:	8d 70 ff             	lea    esi,[eax-0x1]
c0010db1:	23 34 24             	and    esi,DWORD PTR [esp]
c0010db4:	0f af f1             	imul   esi,ecx
c0010db7:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010dba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dbc:	eb 32                	jmp    c0010df0 <VCache::read(unsigned long long, int, void*)+0x114>
c0010dbe:	66 90                	xchg   ax,ax
c0010dc0:	83 ec 0c             	sub    esp,0xc
c0010dc3:	53                   	push   ebx
c0010dc4:	e8 f7 fc ff ff       	call   c0010ac0 <VCache::invalidateReadBuffer()>
c0010dc9:	83 c4 0c             	add    esp,0xc
c0010dcc:	55                   	push   ebp
c0010dcd:	56                   	push   esi
c0010dce:	68 a5 39 02 c0       	push   0xc00239a5
c0010dd3:	e8 50 bc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010dd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ddb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ddd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010de0:	56                   	push   esi
c0010de1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010de5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010de9:	50                   	push   eax
c0010dea:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010ded:	83 c4 20             	add    esp,0x20
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	68 c1 39 02 c0       	push   0xc00239c1
c0010df8:	e8 2b bc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010dfd:	83 c4 2c             	add    esp,0x2c
c0010e00:	31 c0                	xor    eax,eax
c0010e02:	5b                   	pop    ebx
c0010e03:	5e                   	pop    esi
c0010e04:	5f                   	pop    edi
c0010e05:	5d                   	pop    ebp
c0010e06:	c3                   	ret    
c0010e07:	90                   	nop

c0010e08 <Video::putrect(int, int, int, int, unsigned int)>:
c0010e08:	55                   	push   ebp
c0010e09:	57                   	push   edi
c0010e0a:	56                   	push   esi
c0010e0b:	53                   	push   ebx
c0010e0c:	83 ec 1c             	sub    esp,0x1c
c0010e0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010e17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010e1b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010e1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e27:	01 df                	add    edi,ebx
c0010e29:	39 fb                	cmp    ebx,edi
c0010e2b:	7d 1f                	jge    c0010e4c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010e2d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010e31:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010e35:	7d 12                	jge    c0010e49 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010e37:	8b 16                	mov    edx,DWORD PTR [esi]
c0010e39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010e3d:	53                   	push   ebx
c0010e3e:	55                   	push   ebp
c0010e3f:	45                   	inc    ebp
c0010e40:	56                   	push   esi
c0010e41:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	eb e8                	jmp    c0010e31 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e49:	43                   	inc    ebx
c0010e4a:	eb dd                	jmp    c0010e29 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e4c:	83 c4 1c             	add    esp,0x1c
c0010e4f:	5b                   	pop    ebx
c0010e50:	5e                   	pop    esi
c0010e51:	5f                   	pop    edi
c0010e52:	5d                   	pop    ebp
c0010e53:	c3                   	ret    

c0010e54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e54:	55                   	push   ebp
c0010e55:	57                   	push   edi
c0010e56:	31 ff                	xor    edi,edi
c0010e58:	56                   	push   esi
c0010e59:	53                   	push   ebx
c0010e5a:	83 ec 1c             	sub    esp,0x1c
c0010e5d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010e61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e65:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010e6c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010e71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e75:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010e79:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010e7d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010e80:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010e84:	01 f9                	add    ecx,edi
c0010e86:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010e8a:	7d 2f                	jge    c0010ebb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010e8c:	31 f6                	xor    esi,esi
c0010e8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010e92:	01 f2                	add    edx,esi
c0010e94:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010e98:	7d 1a                	jge    c0010eb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010e9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e9d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010ea0:	46                   	inc    esi
c0010ea1:	51                   	push   ecx
c0010ea2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ea6:	52                   	push   edx
c0010ea7:	55                   	push   ebp
c0010ea8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010eb2:	eb da                	jmp    c0010e8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010eb4:	47                   	inc    edi
c0010eb5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010eb9:	eb c5                	jmp    c0010e80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010ebb:	83 c4 1c             	add    esp,0x1c
c0010ebe:	5b                   	pop    ebx
c0010ebf:	5e                   	pop    esi
c0010ec0:	5f                   	pop    edi
c0010ec1:	5d                   	pop    ebp
c0010ec2:	c3                   	ret    
c0010ec3:	90                   	nop

c0010ec4 <Video::blit(unsigned int*, int, int, int, int)>:
c0010ec4:	55                   	push   ebp
c0010ec5:	57                   	push   edi
c0010ec6:	56                   	push   esi
c0010ec7:	53                   	push   ebx
c0010ec8:	83 ec 1c             	sub    esp,0x1c
c0010ecb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ecf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ed3:	85 c0                	test   eax,eax
c0010ed5:	79 02                	jns    c0010ed9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010ed7:	31 c0                	xor    eax,eax
c0010ed9:	c1 e0 02             	shl    eax,0x2
c0010edc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010ee0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ee4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010ee8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010eec:	39 d8                	cmp    eax,ebx
c0010eee:	7e 49                	jle    c0010f39 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010ef0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010ef6:	7c 41                	jl     c0010f39 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010ef8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010efc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f04:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010f08:	39 f9                	cmp    ecx,edi
c0010f0a:	7e 22                	jle    c0010f2e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010f0c:	83 c5 04             	add    ebp,0x4
c0010f0f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f15:	7c 14                	jl     c0010f2b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010f17:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010f19:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010f1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f24:	56                   	push   esi
c0010f25:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	47                   	inc    edi
c0010f2c:	eb d2                	jmp    c0010f00 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010f2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f32:	43                   	inc    ebx
c0010f33:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010f37:	eb ab                	jmp    c0010ee4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010f39:	83 c4 1c             	add    esp,0x1c
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	5f                   	pop    edi
c0010f3f:	5d                   	pop    ebp
c0010f40:	c3                   	ret    
c0010f41:	90                   	nop

c0010f42 <Video::clearScreen(unsigned int)>:
c0010f42:	57                   	push   edi
c0010f43:	56                   	push   esi
c0010f44:	53                   	push   ebx
c0010f45:	31 db                	xor    ebx,ebx
c0010f47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f4b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f51:	7e 1f                	jle    c0010f72 <Video::clearScreen(unsigned int)+0x30>
c0010f53:	31 ff                	xor    edi,edi
c0010f55:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f5b:	7e 12                	jle    c0010f6f <Video::clearScreen(unsigned int)+0x2d>
c0010f5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f63:	53                   	push   ebx
c0010f64:	57                   	push   edi
c0010f65:	47                   	inc    edi
c0010f66:	56                   	push   esi
c0010f67:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	eb e6                	jmp    c0010f55 <Video::clearScreen(unsigned int)+0x13>
c0010f6f:	43                   	inc    ebx
c0010f70:	eb d9                	jmp    c0010f4b <Video::clearScreen(unsigned int)+0x9>
c0010f72:	5b                   	pop    ebx
c0010f73:	5e                   	pop    esi
c0010f74:	5f                   	pop    edi
c0010f75:	c3                   	ret    

c0010f76 <Video::putpixel(int, int, unsigned int)>:
c0010f76:	c7 44 24 04 f0 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc00239f0
c0010f7e:	e9 66 33 00 00       	jmp    c00142e9 <Krnl::panic(char const*)>
c0010f83:	90                   	nop

c0010f84 <Video::Video(char const*)>:
c0010f84:	83 ec 0c             	sub    esp,0xc
c0010f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8b:	83 ec 08             	sub    esp,0x8
c0010f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f92:	50                   	push   eax
c0010f93:	e8 da d0 ff ff       	call   c000e072 <Device::Device(char const*)>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	ba 60 3a 02 c0       	mov    edx,0xc0023a60
c0010fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa4:	89 10                	mov    DWORD PTR [eax],edx
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010fb4:	90                   	nop
c0010fb5:	83 c4 0c             	add    esp,0xc
c0010fb8:	c3                   	ret    
c0010fb9:	90                   	nop

c0010fba <Video::~Video()>:
c0010fba:	83 ec 0c             	sub    esp,0xc
c0010fbd:	ba 60 3a 02 c0       	mov    edx,0xc0023a60
c0010fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc6:	89 10                	mov    DWORD PTR [eax],edx
c0010fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	50                   	push   eax
c0010fd0:	e8 67 cd ff ff       	call   c000dd3c <Device::~Device()>
c0010fd5:	83 c4 10             	add    esp,0x10
c0010fd8:	90                   	nop
c0010fd9:	83 c4 0c             	add    esp,0xc
c0010fdc:	c3                   	ret    
c0010fdd:	90                   	nop

c0010fde <Video::~Video()>:
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	83 ec 0c             	sub    esp,0xc
c0010fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe8:	e8 cd ff ff ff       	call   c0010fba <Video::~Video()>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	83 ec 08             	sub    esp,0x8
c0010ff3:	68 64 01 00 00       	push   0x164
c0010ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffc:	e8 46 b9 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	83 c4 0c             	add    esp,0xc
c0011007:	c3                   	ret    

c0011008 <Video::isMonochrome()>:
c0011008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001100c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011012:	c3                   	ret    
c0011013:	90                   	nop

c0011014 <Video::getWidth()>:
c0011014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011018:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <Video::getHeight()>:
c0011020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011024:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001102a:	c3                   	ret    
c001102b:	90                   	nop

c001102c <Video::drawCursor(int, int, unsigned char*, int)>:
c001102c:	55                   	push   ebp
c001102d:	57                   	push   edi
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	83 ec 2c             	sub    esp,0x2c
c0011033:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011037:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001103b:	83 f8 01             	cmp    eax,0x1
c001103e:	19 c9                	sbb    ecx,ecx
c0011040:	31 db                	xor    ebx,ebx
c0011042:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011046:	89 cd                	mov    ebp,ecx
c0011048:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011050:	f7 d5                	not    ebp
c0011052:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011058:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001105c:	01 d8                	add    eax,ebx
c001105e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011062:	56                   	push   esi
c0011063:	e8 b8 ff ff ff       	call   c0011020 <Video::getHeight()>
c0011068:	59                   	pop    ecx
c0011069:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001106d:	7e 70                	jle    c00110df <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001106f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011073:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011077:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001107a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001107e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011082:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011089:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001108d:	89 f8                	mov    eax,edi
c001108f:	83 c0 20             	add    eax,0x20
c0011092:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011096:	56                   	push   esi
c0011097:	e8 78 ff ff ff       	call   c0011014 <Video::getWidth()>
c001109c:	5a                   	pop    edx
c001109d:	39 c7                	cmp    edi,eax
c001109f:	7d 34                	jge    c00110d5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00110a1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00110a6:	74 05                	je     c00110ad <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00110a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00110aa:	55                   	push   ebp
c00110ab:	eb 0d                	jmp    c00110ba <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00110ad:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00110b2:	74 12                	je     c00110c6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00110b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00110b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00110be:	57                   	push   edi
c00110bf:	56                   	push   esi
c00110c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00110ca:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00110ce:	47                   	inc    edi
c00110cf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00110d3:	75 c1                	jne    c0011096 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00110d5:	43                   	inc    ebx
c00110d6:	83 fb 20             	cmp    ebx,0x20
c00110d9:	0f 85 79 ff ff ff    	jne    c0011058 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00110df:	83 c4 2c             	add    esp,0x2c
c00110e2:	5b                   	pop    ebx
c00110e3:	5e                   	pop    esi
c00110e4:	5f                   	pop    edi
c00110e5:	5d                   	pop    ebp
c00110e6:	c3                   	ret    
c00110e7:	90                   	nop

c00110e8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00110e8:	55                   	push   ebp
c00110e9:	57                   	push   edi
c00110ea:	56                   	push   esi
c00110eb:	53                   	push   ebx
c00110ec:	83 ec 28             	sub    esp,0x28
c00110ef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00110f3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00110f7:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00110fb:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00110ff:	c1 e6 08             	shl    esi,0x8
c0011102:	01 c6                	add    esi,eax
c0011104:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011108:	c1 e0 08             	shl    eax,0x8
c001110b:	01 d0                	add    eax,edx
c001110d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011111:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011115:	0f af c6             	imul   eax,esi
c0011118:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001111f:	50                   	push   eax
c0011120:	e8 9e 88 ff ff       	call   c00099c3 <malloc>
c0011125:	83 c4 10             	add    esp,0x10
c0011128:	89 c7                	mov    edi,eax
c001112a:	85 c0                	test   eax,eax
c001112c:	75 10                	jne    c001113e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001112e:	83 ec 0c             	sub    esp,0xc
c0011131:	68 11 3a 02 c0       	push   0xc0023a11
c0011136:	e8 ae 31 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c001113b:	83 c4 10             	add    esp,0x10
c001113e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011141:	ba 12 00 00 00       	mov    edx,0x12
c0011146:	84 c0                	test   al,al
c0011148:	74 11                	je     c001115b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001114a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001114e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011152:	c1 fa 03             	sar    edx,0x3
c0011155:	0f af d1             	imul   edx,ecx
c0011158:	83 c2 12             	add    edx,0x12
c001115b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001115f:	74 04                	je     c0011165 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011161:	85 f6                	test   esi,esi
c0011163:	75 12                	jne    c0011177 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011165:	83 ec 0c             	sub    esp,0xc
c0011168:	68 21 3a 02 c0       	push   0xc0023a21
c001116d:	e8 b6 b8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0011172:	e9 b8 00 00 00       	jmp    c001122f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011177:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001117b:	80 f9 02             	cmp    cl,0x2
c001117e:	0f 85 96 00 00 00    	jne    c001121a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011184:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011189:	75 0e                	jne    c0011199 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001118b:	84 c0                	test   al,al
c001118d:	75 0a                	jne    c0011199 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001118f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011192:	83 e8 18             	sub    eax,0x18
c0011195:	a8 f7                	test   al,0xf7
c0011197:	74 0a                	je     c00111a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011199:	83 ec 0c             	sub    esp,0xc
c001119c:	68 36 3a 02 c0       	push   0xc0023a36
c00111a1:	eb 7f                	jmp    c0011222 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00111a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00111b3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00111b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111bf:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00111c3:	75 0c                	jne    c00111d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00111c5:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00111ca:	c1 e0 18             	shl    eax,0x18
c00111cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00111d1:	45                   	inc    ebp
c00111d2:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00111d7:	c1 e1 10             	shl    ecx,0x10
c00111da:	89 c8                	mov    eax,ecx
c00111dc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00111e1:	c1 e1 08             	shl    ecx,0x8
c00111e4:	09 c1                	or     ecx,eax
c00111e6:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00111ea:	09 c1                	or     ecx,eax
c00111ec:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00111f0:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00111f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00111f8:	c1 f8 03             	sar    eax,0x3
c00111fb:	01 c2                	add    edx,eax
c00111fd:	89 e8                	mov    eax,ebp
c00111ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011203:	39 c6                	cmp    esi,eax
c0011205:	7f b0                	jg     c00111b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011207:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001120b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001120f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011212:	7e 22                	jle    c0011236 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011214:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011218:	eb 99                	jmp    c00111b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001121a:	50                   	push   eax
c001121b:	50                   	push   eax
c001121c:	51                   	push   ecx
c001121d:	68 44 3a 02 c0       	push   0xc0023a44
c0011222:	e8 01 b8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0011227:	89 3c 24             	mov    DWORD PTR [esp],edi
c001122a:	e8 a4 87 ff ff       	call   c00099d3 <free>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	31 ff                	xor    edi,edi
c0011234:	eb 0f                	jmp    c0011245 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001123a:	89 30                	mov    DWORD PTR [eax],esi
c001123c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011240:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011243:	89 30                	mov    DWORD PTR [eax],esi
c0011245:	83 c4 1c             	add    esp,0x1c
c0011248:	89 f8                	mov    eax,edi
c001124a:	5b                   	pop    ebx
c001124b:	5e                   	pop    esi
c001124c:	5f                   	pop    edi
c001124d:	5d                   	pop    ebp
c001124e:	c3                   	ret    
c001124f:	90                   	nop

c0011250 <Video::putTGA(int, int, unsigned char*, int)>:
c0011250:	55                   	push   ebp
c0011251:	57                   	push   edi
c0011252:	56                   	push   esi
c0011253:	53                   	push   ebx
c0011254:	83 ec 28             	sub    esp,0x28
c0011257:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001125b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001125f:	50                   	push   eax
c0011260:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011264:	50                   	push   eax
c0011265:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011269:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001126d:	56                   	push   esi
c001126e:	e8 75 fe ff ff       	call   c00110e8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011273:	83 c4 20             	add    esp,0x20
c0011276:	85 c0                	test   eax,eax
c0011278:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001127c:	74 35                	je     c00112b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001127e:	89 c7                	mov    edi,eax
c0011280:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011284:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011288:	39 d8                	cmp    eax,ebx
c001128a:	7e 27                	jle    c00112b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001128c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011290:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011294:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011298:	39 e8                	cmp    eax,ebp
c001129a:	7e 14                	jle    c00112b0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001129c:	8b 06                	mov    eax,DWORD PTR [esi]
c001129e:	83 c7 04             	add    edi,0x4
c00112a1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00112a4:	53                   	push   ebx
c00112a5:	55                   	push   ebp
c00112a6:	45                   	inc    ebp
c00112a7:	56                   	push   esi
c00112a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	eb e0                	jmp    c0011290 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00112b0:	43                   	inc    ebx
c00112b1:	eb cd                	jmp    c0011280 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00112b3:	83 c4 1c             	add    esp,0x1c
c00112b6:	5b                   	pop    ebx
c00112b7:	5e                   	pop    esi
c00112b8:	5f                   	pop    edi
c00112b9:	5d                   	pop    ebp
c00112ba:	c3                   	ret    
c00112bb:	90                   	nop

c00112bc <ACPI::close(int, int, void*)>:
c00112bc:	83 ec 1c             	sub    esp,0x1c
c00112bf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00112c7:	74 0b                	je     c00112d4 <ACPI::close(int, int, void*)+0x18>
c00112c9:	b8 00 00 00 00       	mov    eax,0x0
c00112ce:	e9 99 00 00 00       	jmp    c001136c <ACPI::close(int, int, void*)+0xb0>
c00112d3:	90                   	nop
c00112d4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00112d9:	75 29                	jne    c0011304 <ACPI::close(int, int, void*)+0x48>
c00112db:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c00112e0:	85 c0                	test   eax,eax
c00112e2:	74 08                	je     c00112ec <ACPI::close(int, int, void*)+0x30>
c00112e4:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c00112e9:	ff d0                	call   eax
c00112eb:	90                   	nop
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	68 a0 3a 02 c0       	push   0xc0023aa0
c00112f4:	e8 f0 2f 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c00112f9:	83 c4 10             	add    esp,0x10
c00112fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011301:	eb 69                	jmp    c001136c <ACPI::close(int, int, void*)+0xb0>
c0011303:	90                   	nop
c0011304:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011309:	75 59                	jne    c0011364 <ACPI::close(int, int, void*)+0xa8>
c001130b:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c0011310:	85 c0                	test   eax,eax
c0011312:	74 08                	je     c001131c <ACPI::close(int, int, void*)+0x60>
c0011314:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c0011319:	ff d0                	call   eax
c001131b:	90                   	nop
c001131c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011321:	8d 76 00             	lea    esi,[esi+0x0]
c0011324:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011329:	83 e0 02             	and    eax,0x2
c001132c:	74 1e                	je     c001134c <ACPI::close(int, int, void*)+0x90>
c001132e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011339:	89 c2                	mov    edx,eax
c001133b:	ec                   	in     al,dx
c001133c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011340:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011344:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011348:	eb da                	jmp    c0011324 <ACPI::close(int, int, void*)+0x68>
c001134a:	66 90                	xchg   ax,ax
c001134c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011353:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011358:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001135c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011360:	ee                   	out    dx,al
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011369:	8d 76 00             	lea    esi,[esi+0x0]
c001136c:	83 c4 1c             	add    esp,0x1c
c001136f:	c3                   	ret    

c0011370 <findRSDP()>:
c0011370:	83 ec 1c             	sub    esp,0x1c
c0011373:	83 ec 0c             	sub    esp,0xc
c0011376:	68 7b 3b 02 c0       	push   0xc0023b7b
c001137b:	e8 9d 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011380:	83 c4 10             	add    esp,0x10
c0011383:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0011388:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001138e:	83 e0 04             	and    eax,0x4
c0011391:	84 c0                	test   al,al
c0011393:	75 0b                	jne    c00113a0 <findRSDP()+0x30>
c0011395:	b8 00 00 00 00       	mov    eax,0x0
c001139a:	e9 a1 00 00 00       	jmp    c0011440 <findRSDP()+0xd0>
c001139f:	90                   	nop
c00113a0:	a1 b4 63 02 c0       	mov    eax,ds:0xc00263b4
c00113a5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00113aa:	7f 1c                	jg     c00113c8 <findRSDP()+0x58>
c00113ac:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00113b1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00113b7:	83 e2 fb             	and    edx,0xfffffffb
c00113ba:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00113c0:	b8 00 00 00 00       	mov    eax,0x0
c00113c5:	eb 79                	jmp    c0011440 <findRSDP()+0xd0>
c00113c7:	90                   	nop
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	68 8b 3b 02 c0       	push   0xc0023b8b
c00113d0:	e8 48 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113d5:	83 c4 10             	add    esp,0x10
c00113d8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00113e0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00113e8:	77 3e                	ja     c0011428 <findRSDP()+0xb8>
c00113ea:	83 ec 04             	sub    esp,0x4
c00113ed:	6a 08                	push   0x8
c00113ef:	68 a4 3b 02 c0       	push   0xc0023ba4
c00113f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113f8:	e8 83 f1 fe ff       	call   c0000580 <memcmp>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	85 c0                	test   eax,eax
c0011402:	0f 94 c0             	sete   al
c0011405:	84 c0                	test   al,al
c0011407:	74 17                	je     c0011420 <findRSDP()+0xb0>
c0011409:	83 ec 0c             	sub    esp,0xc
c001140c:	68 ad 3b 02 c0       	push   0xc0023bad
c0011411:	e8 07 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011416:	83 c4 10             	add    esp,0x10
c0011419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001141d:	eb 21                	jmp    c0011440 <findRSDP()+0xd0>
c001141f:	90                   	nop
c0011420:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011425:	eb b9                	jmp    c00113e0 <findRSDP()+0x70>
c0011427:	90                   	nop
c0011428:	83 ec 0c             	sub    esp,0xc
c001142b:	68 bb 3b 02 c0       	push   0xc0023bbb
c0011430:	e8 e8 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	b8 00 00 00 00       	mov    eax,0x0
c001143d:	8d 76 00             	lea    esi,[esi+0x0]
c0011440:	83 c4 1c             	add    esp,0x1c
c0011443:	c3                   	ret    

c0011444 <loadACPITables(unsigned char*)>:
c0011444:	57                   	push   edi
c0011445:	56                   	push   esi
c0011446:	53                   	push   ebx
c0011447:	83 ec 60             	sub    esp,0x60
c001144a:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001144f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011455:	83 e0 04             	and    eax,0x4
c0011458:	84 c0                	test   al,al
c001145a:	0f 84 3c 02 00 00    	je     c001169c <loadACPITables(unsigned char*)+0x258>
c0011460:	a0 00 6c 02 c0       	mov    al,ds:0xc0026c00
c0011465:	84 c0                	test   al,al
c0011467:	74 77                	je     c00114e0 <loadACPITables(unsigned char*)+0x9c>
c0011469:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001146d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011471:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011475:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011478:	83 e8 24             	sub    eax,0x24
c001147b:	c1 e8 03             	shr    eax,0x3
c001147e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011482:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001148a:	66 90                	xchg   ax,ax
c001148c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011490:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011494:	0f 8d b6 00 00 00    	jge    c0011550 <loadACPITables(unsigned char*)+0x10c>
c001149a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001149e:	83 c0 24             	add    eax,0x24
c00114a1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00114a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114a9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00114ad:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114b1:	c1 e0 03             	shl    eax,0x3
c00114b4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00114b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00114bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00114bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00114c1:	89 c1                	mov    ecx,eax
c00114c3:	a1 ec 69 02 c0       	mov    eax,ds:0xc00269ec
c00114c8:	8d 50 01             	lea    edx,[eax+0x1]
c00114cb:	89 15 ec 69 02 c0    	mov    DWORD PTR ds:0xc00269ec,edx
c00114d1:	89 ca                	mov    edx,ecx
c00114d3:	89 14 c5 04 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd95fc],edx
c00114da:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00114de:	eb ac                	jmp    c001148c <loadACPITables(unsigned char*)+0x48>
c00114e0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114e4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00114e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ef:	83 e8 24             	sub    eax,0x24
c00114f2:	c1 e8 02             	shr    eax,0x2
c00114f5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00114f9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011501:	8d 76 00             	lea    esi,[esi+0x0]
c0011504:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011508:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001150c:	7d 42                	jge    c0011550 <loadACPITables(unsigned char*)+0x10c>
c001150e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011512:	83 c0 24             	add    eax,0x24
c0011515:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011519:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001151d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011521:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011525:	c1 e0 02             	shl    eax,0x2
c0011528:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001152c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011530:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011532:	a1 ec 69 02 c0       	mov    eax,ds:0xc00269ec
c0011537:	8d 50 01             	lea    edx,[eax+0x1]
c001153a:	89 15 ec 69 02 c0    	mov    DWORD PTR ds:0xc00269ec,edx
c0011540:	89 ca                	mov    edx,ecx
c0011542:	89 14 c5 04 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd95fc],edx
c0011549:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001154d:	eb b5                	jmp    c0011504 <loadACPITables(unsigned char*)+0xc0>
c001154f:	90                   	nop
c0011550:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011558:	a1 ec 69 02 c0       	mov    eax,ds:0xc00269ec
c001155d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011561:	0f 8d 39 01 00 00    	jge    c00116a0 <loadACPITables(unsigned char*)+0x25c>
c0011567:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001156b:	8b 04 c5 04 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd95fc]
c0011572:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001157a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001157e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011582:	25 ff 0f 00 00       	and    eax,0xfff
c0011587:	89 c6                	mov    esi,eax
c0011589:	8b 1d d0 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d0
c001158f:	83 ec 0c             	sub    esp,0xc
c0011592:	6a 01                	push   0x1
c0011594:	e8 b4 a0 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115a6:	83 ec 0c             	sub    esp,0xc
c00115a9:	6a 01                	push   0x1
c00115ab:	6a 01                	push   0x1
c00115ad:	50                   	push   eax
c00115ae:	52                   	push   edx
c00115af:	53                   	push   ebx
c00115b0:	e8 35 aa ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115b5:	83 c4 20             	add    esp,0x20
c00115b8:	09 f0                	or     eax,esi
c00115ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115c2:	c1 e0 03             	shl    eax,0x3
c00115c5:	05 00 6a 02 c0       	add    eax,0xc0026a00
c00115ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115d6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00115de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00115e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00115ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115f2:	89 c6                	mov    esi,eax
c00115f4:	89 d7                	mov    edi,edx
c00115f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115f8:	89 c8                	mov    eax,ecx
c00115fa:	89 fa                	mov    edx,edi
c00115fc:	89 f3                	mov    ebx,esi
c00115fe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011602:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011606:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001160a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001160e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011611:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011615:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011619:	05 00 10 00 00       	add    eax,0x1000
c001161e:	c1 e8 0c             	shr    eax,0xc
c0011621:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011629:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001162d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011631:	25 ff 0f 00 00       	and    eax,0xfff
c0011636:	89 c6                	mov    esi,eax
c0011638:	8b 1d d0 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d0
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011645:	e8 03 a0 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011651:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011657:	83 ec 0c             	sub    esp,0xc
c001165a:	6a 01                	push   0x1
c001165c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011660:	50                   	push   eax
c0011661:	52                   	push   edx
c0011662:	53                   	push   ebx
c0011663:	e8 82 a9 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011668:	83 c4 20             	add    esp,0x20
c001166b:	09 f0                	or     eax,esi
c001166d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011675:	83 ec 0c             	sub    esp,0xc
c0011678:	50                   	push   eax
c0011679:	e8 ff a2 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c001167e:	83 c4 10             	add    esp,0x10
c0011681:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011685:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011689:	89 14 c5 04 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd95fc],edx
c0011690:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011694:	e9 bf fe ff ff       	jmp    c0011558 <loadACPITables(unsigned char*)+0x114>
c0011699:	8d 76 00             	lea    esi,[esi+0x0]
c001169c:	90                   	nop
c001169d:	8d 76 00             	lea    esi,[esi+0x0]
c00116a0:	83 c4 60             	add    esp,0x60
c00116a3:	5b                   	pop    ebx
c00116a4:	5e                   	pop    esi
c00116a5:	5f                   	pop    edi
c00116a6:	c3                   	ret    
c00116a7:	90                   	nop

c00116a8 <findRSDT(unsigned char*)>:
c00116a8:	57                   	push   edi
c00116a9:	56                   	push   esi
c00116aa:	53                   	push   ebx
c00116ab:	83 ec 50             	sub    esp,0x50
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	68 cf 3b 02 c0       	push   0xc0023bcf
c00116b6:	e8 62 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00116c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116c9:	83 e0 04             	and    eax,0x4
c00116cc:	84 c0                	test   al,al
c00116ce:	75 0c                	jne    c00116dc <findRSDT(unsigned char*)+0x34>
c00116d0:	b8 00 00 00 00       	mov    eax,0x0
c00116d5:	e9 86 01 00 00       	jmp    c0011860 <findRSDT(unsigned char*)+0x1b8>
c00116da:	66 90                	xchg   ax,ax
c00116dc:	83 ec 0c             	sub    esp,0xc
c00116df:	68 e1 3b 02 c0       	push   0xc0023be1
c00116e4:	e8 34 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	89 e0                	mov    eax,esp
c00116ee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00116f2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00116f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00116fa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011706:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001170a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001170e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011712:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011716:	89 c6                	mov    esi,eax
c0011718:	89 d7                	mov    edi,edx
c001171a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001171c:	89 c8                	mov    eax,ecx
c001171e:	89 fa                	mov    edx,edi
c0011720:	89 f3                	mov    ebx,esi
c0011722:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011726:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001172a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001172e:	83 ec 0c             	sub    esp,0xc
c0011731:	68 f3 3b 02 c0       	push   0xc0023bf3
c0011736:	e8 e2 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011742:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011746:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001174e:	83 ec 0c             	sub    esp,0xc
c0011751:	68 05 3c 02 c0       	push   0xc0023c05
c0011756:	e8 c2 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011762:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011766:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011772:	83 ec 04             	sub    esp,0x4
c0011775:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011779:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001177d:	68 c4 3a 02 c0       	push   0xc0023ac4
c0011782:	e8 a1 b2 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001178e:	25 ff 0f 00 00       	and    eax,0xfff
c0011793:	89 c6                	mov    esi,eax
c0011795:	8b 1d d0 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d0
c001179b:	83 ec 0c             	sub    esp,0xc
c001179e:	6a 02                	push   0x2
c00117a0:	e8 a8 9e ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00117ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	6a 01                	push   0x1
c00117b7:	6a 02                	push   0x2
c00117b9:	50                   	push   eax
c00117ba:	52                   	push   edx
c00117bb:	53                   	push   ebx
c00117bc:	e8 29 a8 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00117c1:	83 c4 20             	add    esp,0x20
c00117c4:	09 f0                	or     eax,esi
c00117c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00117ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117ce:	25 ff 0f 00 00       	and    eax,0xfff
c00117d3:	89 c6                	mov    esi,eax
c00117d5:	8b 1d d0 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d0
c00117db:	83 ec 0c             	sub    esp,0xc
c00117de:	6a 02                	push   0x2
c00117e0:	e8 68 9e ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00117ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	6a 01                	push   0x1
c00117f7:	6a 02                	push   0x2
c00117f9:	50                   	push   eax
c00117fa:	52                   	push   edx
c00117fb:	53                   	push   ebx
c00117fc:	e8 e9 a7 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011801:	83 c4 20             	add    esp,0x20
c0011804:	09 f0                	or     eax,esi
c0011806:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001180a:	83 ec 04             	sub    esp,0x4
c001180d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011811:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011815:	68 e4 3a 02 c0       	push   0xc0023ae4
c001181a:	e8 09 b2 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001181f:	83 c4 10             	add    esp,0x10
c0011822:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011827:	75 13                	jne    c001183c <findRSDT(unsigned char*)+0x194>
c0011829:	c6 05 00 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026c00,0x0
c0011830:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011834:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011838:	eb 22                	jmp    c001185c <findRSDT(unsigned char*)+0x1b4>
c001183a:	66 90                	xchg   ax,ax
c001183c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011841:	75 11                	jne    c0011854 <findRSDT(unsigned char*)+0x1ac>
c0011843:	c6 05 00 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c00,0x1
c001184a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001184e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011852:	eb 08                	jmp    c001185c <findRSDT(unsigned char*)+0x1b4>
c0011854:	b8 00 00 00 00       	mov    eax,0x0
c0011859:	eb 05                	jmp    c0011860 <findRSDT(unsigned char*)+0x1b8>
c001185b:	90                   	nop
c001185c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011860:	83 c4 50             	add    esp,0x50
c0011863:	5b                   	pop    ebx
c0011864:	5e                   	pop    esi
c0011865:	5f                   	pop    edi
c0011866:	c3                   	ret    
c0011867:	90                   	nop

c0011868 <findDataTable(unsigned char*, char*)>:
c0011868:	83 ec 1c             	sub    esp,0x1c
c001186b:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0011870:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011876:	83 e0 04             	and    eax,0x4
c0011879:	84 c0                	test   al,al
c001187b:	75 07                	jne    c0011884 <findDataTable(unsigned char*, char*)+0x1c>
c001187d:	b8 00 00 00 00       	mov    eax,0x0
c0011882:	eb 58                	jmp    c00118dc <findDataTable(unsigned char*, char*)+0x74>
c0011884:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001188c:	a1 ec 69 02 c0       	mov    eax,ds:0xc00269ec
c0011891:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011895:	7d 3d                	jge    c00118d4 <findDataTable(unsigned char*, char*)+0x6c>
c0011897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001189b:	c1 e0 03             	shl    eax,0x3
c001189e:	05 00 6a 02 c0       	add    eax,0xc0026a00
c00118a3:	83 ec 04             	sub    esp,0x4
c00118a6:	6a 04                	push   0x4
c00118a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118ac:	50                   	push   eax
c00118ad:	e8 ce ec fe ff       	call   c0000580 <memcmp>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	85 c0                	test   eax,eax
c00118b7:	0f 94 c0             	sete   al
c00118ba:	84 c0                	test   al,al
c00118bc:	74 0e                	je     c00118cc <findDataTable(unsigned char*, char*)+0x64>
c00118be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118c2:	8b 04 c5 04 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd95fc]
c00118c9:	eb 11                	jmp    c00118dc <findDataTable(unsigned char*, char*)+0x74>
c00118cb:	90                   	nop
c00118cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00118d0:	eb ba                	jmp    c001188c <findDataTable(unsigned char*, char*)+0x24>
c00118d2:	66 90                	xchg   ax,ax
c00118d4:	b8 00 00 00 00       	mov    eax,0x0
c00118d9:	8d 76 00             	lea    esi,[esi+0x0]
c00118dc:	83 c4 1c             	add    esp,0x1c
c00118df:	c3                   	ret    

c00118e0 <scanMADT()>:
c00118e0:	53                   	push   ebx
c00118e1:	83 ec 38             	sub    esp,0x38
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	68 17 3c 02 c0       	push   0xc0023c17
c00118ec:	e8 2c 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	a1 80 63 02 c0       	mov    eax,ds:0xc0026380
c00118f9:	25 00 04 00 00       	and    eax,0x400
c00118fe:	74 14                	je     c0011914 <scanMADT()+0x34>
c0011900:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0011905:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001190b:	83 e2 fb             	and    edx,0xfffffffb
c001190e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011914:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0011919:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001191f:	83 e0 04             	and    eax,0x4
c0011922:	84 c0                	test   al,al
c0011924:	0f 84 82 04 00 00    	je     c0011dac <scanMADT()+0x4cc>
c001192a:	83 ec 0c             	sub    esp,0xc
c001192d:	68 24 3c 02 c0       	push   0xc0023c24
c0011932:	e8 e6 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011937:	83 c4 10             	add    esp,0x10
c001193a:	e8 31 fa ff ff       	call   c0011370 <findRSDP()>
c001193f:	a3 0c 6c 02 c0       	mov    ds:0xc0026c0c,eax
c0011944:	a1 0c 6c 02 c0       	mov    eax,ds:0xc0026c0c
c0011949:	85 c0                	test   eax,eax
c001194b:	75 1b                	jne    c0011968 <scanMADT()+0x88>
c001194d:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0011952:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011958:	83 e2 fb             	and    edx,0xfffffffb
c001195b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011961:	e9 4e 04 00 00       	jmp    c0011db4 <scanMADT()+0x4d4>
c0011966:	66 90                	xchg   ax,ax
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	68 36 3c 02 c0       	push   0xc0023c36
c0011970:	e8 a8 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	a1 0c 6c 02 c0       	mov    eax,ds:0xc0026c0c
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	50                   	push   eax
c0011981:	e8 22 fd ff ff       	call   c00116a8 <findRSDT(unsigned char*)>
c0011986:	83 c4 10             	add    esp,0x10
c0011989:	a3 08 6c 02 c0       	mov    ds:0xc0026c08,eax
c001198e:	a1 08 6c 02 c0       	mov    eax,ds:0xc0026c08
c0011993:	85 c0                	test   eax,eax
c0011995:	75 19                	jne    c00119b0 <scanMADT()+0xd0>
c0011997:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001199c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119a2:	83 e2 fb             	and    edx,0xfffffffb
c00119a5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119ab:	e9 04 04 00 00       	jmp    c0011db4 <scanMADT()+0x4d4>
c00119b0:	83 ec 0c             	sub    esp,0xc
c00119b3:	68 46 3c 02 c0       	push   0xc0023c46
c00119b8:	e8 60 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	a1 08 6c 02 c0       	mov    eax,ds:0xc0026c08
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	50                   	push   eax
c00119c9:	e8 76 fa ff ff       	call   c0011444 <loadACPITables(unsigned char*)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	a1 08 6c 02 c0       	mov    eax,ds:0xc0026c08
c00119d6:	83 ec 08             	sub    esp,0x8
c00119d9:	68 5e 3c 02 c0       	push   0xc0023c5e
c00119de:	50                   	push   eax
c00119df:	e8 84 fe ff ff       	call   c0011868 <findDataTable(unsigned char*, char*)>
c00119e4:	83 c4 10             	add    esp,0x10
c00119e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00119eb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00119f0:	75 1a                	jne    c0011a0c <scanMADT()+0x12c>
c00119f2:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00119f7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119fd:	83 e2 fe             	and    edx,0xfffffffe
c0011a00:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a06:	e9 a9 03 00 00       	jmp    c0011db4 <scanMADT()+0x4d4>
c0011a0b:	90                   	nop
c0011a0c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a1b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011a1f:	0f 87 8f 03 00 00    	ja     c0011db4 <scanMADT()+0x4d4>
c0011a25:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011a2d:	0f 87 81 03 00 00    	ja     c0011db4 <scanMADT()+0x4d4>
c0011a33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a37:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011a42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a4a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a4e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a56:	8d 50 01             	lea    edx,[eax+0x1]
c0011a59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a61:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a65:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011a69:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011a6e:	0f 86 3c 03 00 00    	jbe    c0011db0 <scanMADT()+0x4d0>
c0011a74:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011a79:	75 59                	jne    c0011ad4 <scanMADT()+0x1f4>
c0011a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0011a82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a86:	8a 15 00 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e00
c0011a8c:	0f b6 d2             	movzx  edx,dl
c0011a8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a93:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a97:	88 82 40 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd91c0],al
c0011a9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aa1:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aa8:	8a 15 00 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e00
c0011aae:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ab1:	88 0d 00 6e 02 c0    	mov    BYTE PTR ds:0xc0026e00,cl
c0011ab7:	0f b6 d2             	movzx  edx,dl
c0011aba:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011abe:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ac2:	88 82 20 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd91e0],al
c0011ac8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011acd:	e9 c6 02 00 00       	jmp    c0011d98 <scanMADT()+0x4b8>
c0011ad2:	66 90                	xchg   ax,ax
c0011ad4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011ad9:	0f 85 15 01 00 00    	jne    c0011bf4 <scanMADT()+0x314>
c0011adf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ae3:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aea:	8a 15 c0 6c 02 c0    	mov    dl,BYTE PTR ds:0xc0026cc0
c0011af0:	0f b6 d2             	movzx  edx,dl
c0011af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011af7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011afb:	88 82 e0 6c 02 c0    	mov    BYTE PTR [edx-0x3ffd9320],al
c0011b01:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b0d:	01 d0                	add    eax,edx
c0011b0f:	83 c0 2c             	add    eax,0x2c
c0011b12:	8a 00                	mov    al,BYTE PTR [eax]
c0011b14:	0f b6 d0             	movzx  edx,al
c0011b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b22:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b26:	0f b6 c0             	movzx  eax,al
c0011b29:	c1 e0 08             	shl    eax,0x8
c0011b2c:	89 d1                	mov    ecx,edx
c0011b2e:	09 c1                	or     ecx,eax
c0011b30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b34:	8d 50 02             	lea    edx,[eax+0x2]
c0011b37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b3b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b3f:	0f b6 c0             	movzx  eax,al
c0011b42:	c1 e0 10             	shl    eax,0x10
c0011b45:	09 c1                	or     ecx,eax
c0011b47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b4b:	8d 50 03             	lea    edx,[eax+0x3]
c0011b4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b52:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b56:	0f b6 c0             	movzx  eax,al
c0011b59:	c1 e0 18             	shl    eax,0x18
c0011b5c:	09 c1                	or     ecx,eax
c0011b5e:	89 ca                	mov    edx,ecx
c0011b60:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c0011b65:	0f b6 c0             	movzx  eax,al
c0011b68:	89 14 85 00 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9300],edx
c0011b6f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b7c:	01 d0                	add    eax,edx
c0011b7e:	83 c0 2c             	add    eax,0x2c
c0011b81:	8a 00                	mov    al,BYTE PTR [eax]
c0011b83:	0f b6 d0             	movzx  edx,al
c0011b86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b91:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b95:	0f b6 c0             	movzx  eax,al
c0011b98:	c1 e0 08             	shl    eax,0x8
c0011b9b:	89 d1                	mov    ecx,edx
c0011b9d:	09 c1                	or     ecx,eax
c0011b9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ba3:	8d 50 02             	lea    edx,[eax+0x2]
c0011ba6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011baa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bae:	0f b6 c0             	movzx  eax,al
c0011bb1:	c1 e0 10             	shl    eax,0x10
c0011bb4:	09 c1                	or     ecx,eax
c0011bb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bba:	8d 50 03             	lea    edx,[eax+0x3]
c0011bbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bc1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bc5:	0f b6 c0             	movzx  eax,al
c0011bc8:	c1 e0 18             	shl    eax,0x18
c0011bcb:	09 c1                	or     ecx,eax
c0011bcd:	89 ca                	mov    edx,ecx
c0011bcf:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c0011bd4:	0f b6 c0             	movzx  eax,al
c0011bd7:	89 14 85 80 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9280],edx
c0011bde:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011be3:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c0011be8:	40                   	inc    eax
c0011be9:	a2 c0 6c 02 c0       	mov    ds:0xc0026cc0,al
c0011bee:	e9 a5 01 00 00       	jmp    c0011d98 <scanMADT()+0x4b8>
c0011bf3:	90                   	nop
c0011bf4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011bf9:	0f 85 e9 00 00 00    	jne    c0011ce8 <scanMADT()+0x408>
c0011bff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c03:	8d 50 01             	lea    edx,[eax+0x1]
c0011c06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c0e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c12:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011c16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c1a:	8d 50 01             	lea    edx,[eax+0x1]
c0011c1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c25:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c29:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011c2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c35:	01 d0                	add    eax,edx
c0011c37:	83 c0 2c             	add    eax,0x2c
c0011c3a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c3c:	0f b6 d0             	movzx  edx,al
c0011c3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c43:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c4a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c4e:	0f b6 c0             	movzx  eax,al
c0011c51:	c1 e0 08             	shl    eax,0x8
c0011c54:	89 d1                	mov    ecx,edx
c0011c56:	09 c1                	or     ecx,eax
c0011c58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5c:	8d 50 02             	lea    edx,[eax+0x2]
c0011c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c63:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c67:	0f b6 c0             	movzx  eax,al
c0011c6a:	c1 e0 10             	shl    eax,0x10
c0011c6d:	09 c1                	or     ecx,eax
c0011c6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c73:	8d 50 03             	lea    edx,[eax+0x3]
c0011c76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c7a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c7e:	0f b6 c0             	movzx  eax,al
c0011c81:	c1 e0 18             	shl    eax,0x18
c0011c84:	09 c8                	or     eax,ecx
c0011c86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c8a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c97:	01 d0                	add    eax,edx
c0011c99:	83 c0 2c             	add    eax,0x2c
c0011c9c:	8a 00                	mov    al,BYTE PTR [eax]
c0011c9e:	0f b6 c0             	movzx  eax,al
c0011ca1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ca5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ca8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cac:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011cb0:	0f b6 d2             	movzx  edx,dl
c0011cb3:	c1 e2 08             	shl    edx,0x8
c0011cb6:	09 d0                	or     eax,edx
c0011cb8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011cbd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011cc2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011cc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ccb:	88 90 60 5a 02 c0    	mov    BYTE PTR [eax-0x3ffda5a0],dl
c0011cd1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011cd6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011cdb:	66 89 84 12 a0 6c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9360],ax
c0011ce3:	e9 b0 00 00 00       	jmp    c0011d98 <scanMADT()+0x4b8>
c0011ce8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011ced:	0f 85 99 00 00 00    	jne    c0011d8c <scanMADT()+0x4ac>
c0011cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf7:	8d 50 01             	lea    edx,[eax+0x1]
c0011cfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d02:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d06:	0f b6 c0             	movzx  eax,al
c0011d09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d15:	01 d0                	add    eax,edx
c0011d17:	83 c0 2c             	add    eax,0x2c
c0011d1a:	8a 00                	mov    al,BYTE PTR [eax]
c0011d1c:	0f b6 d0             	movzx  edx,al
c0011d1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d23:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d2a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d2e:	0f b6 c0             	movzx  eax,al
c0011d31:	c1 e0 08             	shl    eax,0x8
c0011d34:	09 d0                	or     eax,edx
c0011d36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d3a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d43:	8d 50 01             	lea    edx,[eax+0x1]
c0011d46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d52:	0f b6 c0             	movzx  eax,al
c0011d55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d5d:	c1 e0 08             	shl    eax,0x8
c0011d60:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011d64:	89 c1                	mov    ecx,eax
c0011d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d6a:	c1 e0 18             	shl    eax,0x18
c0011d6d:	89 c3                	mov    ebx,eax
c0011d6f:	a1 10 6c 02 c0       	mov    eax,ds:0xc0026c10
c0011d74:	8d 50 01             	lea    edx,[eax+0x1]
c0011d77:	89 15 10 6c 02 c0    	mov    DWORD PTR ds:0xc0026c10,edx
c0011d7d:	09 d9                	or     ecx,ebx
c0011d7f:	89 ca                	mov    edx,ecx
c0011d81:	89 14 85 20 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd93e0],edx
c0011d88:	eb 0e                	jmp    c0011d98 <scanMADT()+0x4b8>
c0011d8a:	66 90                	xchg   ax,ax
c0011d8c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011d91:	75 05                	jne    c0011d98 <scanMADT()+0x4b8>
c0011d93:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011d98:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011d9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011da1:	01 d0                	add    eax,edx
c0011da3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011da7:	e9 68 fc ff ff       	jmp    c0011a14 <scanMADT()+0x134>
c0011dac:	90                   	nop
c0011dad:	eb 05                	jmp    c0011db4 <scanMADT()+0x4d4>
c0011daf:	90                   	nop
c0011db0:	90                   	nop
c0011db1:	8d 76 00             	lea    esi,[esi+0x0]
c0011db4:	83 c4 38             	add    esp,0x38
c0011db7:	5b                   	pop    ebx
c0011db8:	c3                   	ret    
c0011db9:	90                   	nop
c0011dba:	66 90                	xchg   ax,ax

c0011dbc <ACPI::ACPI()>:
c0011dbc:	83 ec 0c             	sub    esp,0xc
c0011dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc3:	83 ec 08             	sub    esp,0x8
c0011dc6:	68 63 3c 02 c0       	push   0xc0023c63
c0011dcb:	50                   	push   eax
c0011dcc:	e8 a1 c2 ff ff       	call   c000e072 <Device::Device(char const*)>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	ba ec 3d 02 c0       	mov    edx,0xc0023dec
c0011dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ddd:	89 10                	mov    DWORD PTR [eax],edx
c0011ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dee:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	68 68 3c 02 c0       	push   0xc0023c68
c0011e0e:	e8 0a 7c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	e8 c5 fa ff ff       	call   c00118e0 <scanMADT()>
c0011e1b:	90                   	nop
c0011e1c:	83 c4 0c             	add    esp,0xc
c0011e1f:	c3                   	ret    

c0011e20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011e20:	83 ec 2c             	sub    esp,0x2c
c0011e23:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011e27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e2b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011e2f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011e33:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011e38:	88 d0                	mov    al,dl
c0011e3a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e3e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e43:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e4b:	90                   	nop
c0011e4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e50:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e56:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e5a:	0f 8d 9c 00 00 00    	jge    c0011efc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011e60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e68:	83 c2 2a             	add    edx,0x2a
c0011e6b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011e6f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011e74:	75 7a                	jne    c0011ef0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e7e:	83 c2 2a             	add    edx,0x2a
c0011e81:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011e85:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011e89:	75 65                	jne    c0011ef0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e8b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e90:	74 3a                	je     c0011ecc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011e92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e9a:	83 c2 2a             	add    edx,0x2a
c0011e9d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011ea1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ea8:	39 c2                	cmp    edx,eax
c0011eaa:	74 10                	je     c0011ebc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011eac:	83 ec 0c             	sub    esp,0xc
c0011eaf:	68 04 3b 02 c0       	push   0xc0023b04
c0011eb4:	e8 30 24 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	83 ec 0c             	sub    esp,0xc
c0011ebf:	68 76 3c 02 c0       	push   0xc0023c76
c0011ec4:	e8 20 24 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011ed0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ed8:	83 c2 2a             	add    edx,0x2a
c0011edb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011edf:	8b 02                	mov    eax,DWORD PTR [edx]
c0011ee1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011ee4:	89 01                	mov    DWORD PTR [ecx],eax
c0011ee6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011ee9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011eee:	66 90                	xchg   ax,ax
c0011ef0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ef4:	e9 53 ff ff ff       	jmp    c0011e4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0011efc:	90                   	nop
c0011efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f01:	83 c4 2c             	add    esp,0x2c
c0011f04:	c2 04 00             	ret    0x4
c0011f07:	90                   	nop

c0011f08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011f08:	83 ec 1c             	sub    esp,0x1c
c0011f0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011f13:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f17:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f1c:	88 c8                	mov    al,cl
c0011f1e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011f22:	88 d0                	mov    al,dl
c0011f24:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f2c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f36:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f39:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f3d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f45:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f4f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f56:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f5f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f65:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011f69:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f70:	83 c2 2a             	add    edx,0x2a
c0011f73:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f7b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f85:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f8c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f94:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f9a:	8d 50 01             	lea    edx,[eax+0x1]
c0011f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fa1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fb1:	3d 00 02 00 00       	cmp    eax,0x200
c0011fb6:	75 10                	jne    c0011fc8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011fb8:	83 ec 0c             	sub    esp,0xc
c0011fbb:	68 85 3c 02 c0       	push   0xc0023c85
c0011fc0:	e8 24 23 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0011fc5:	83 c4 10             	add    esp,0x10
c0011fc8:	90                   	nop
c0011fc9:	83 c4 1c             	add    esp,0x1c
c0011fcc:	c3                   	ret    
c0011fcd:	90                   	nop
c0011fce:	66 90                	xchg   ax,ax

c0011fd0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0011fd0:	b8 00 00 00 00       	mov    eax,0x0
c0011fd5:	c3                   	ret    
c0011fd6:	66 90                	xchg   ax,ax

c0011fd8 <ACPI::detectPCI()>:
c0011fd8:	53                   	push   ebx
c0011fd9:	83 ec 28             	sub    esp,0x28
c0011fdc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011fe1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0011fe6:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0011feb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ff1:	83 e0 04             	and    eax,0x4
c0011ff4:	84 c0                	test   al,al
c0011ff6:	74 2c                	je     c0012024 <ACPI::detectPCI()+0x4c>
c0011ff8:	a1 08 6c 02 c0       	mov    eax,ds:0xc0026c08
c0011ffd:	83 ec 08             	sub    esp,0x8
c0012000:	68 a2 3c 02 c0       	push   0xc0023ca2
c0012005:	50                   	push   eax
c0012006:	e8 5d f8 ff ff       	call   c0011868 <findDataTable(unsigned char*, char*)>
c001200b:	83 c4 10             	add    esp,0x10
c001200e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012012:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012017:	74 0b                	je     c0012024 <ACPI::detectPCI()+0x4c>
c0012019:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001201e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012023:	90                   	nop
c0012024:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001202c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012030:	8a 00                	mov    al,BYTE PTR [eax]
c0012032:	3c 01                	cmp    al,0x1
c0012034:	75 0e                	jne    c0012044 <ACPI::detectPCI()+0x6c>
c0012036:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001203b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012040:	eb 2a                	jmp    c001206c <ACPI::detectPCI()+0x94>
c0012042:	66 90                	xchg   ax,ax
c0012044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012048:	8a 00                	mov    al,BYTE PTR [eax]
c001204a:	3c 02                	cmp    al,0x2
c001204c:	75 1e                	jne    c001206c <ACPI::detectPCI()+0x94>
c001204e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012053:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012058:	74 12                	je     c001206c <ACPI::detectPCI()+0x94>
c001205a:	83 ec 0c             	sub    esp,0xc
c001205d:	68 34 3b 02 c0       	push   0xc0023b34
c0012062:	e8 82 22 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	66 90                	xchg   ax,ax
c001206c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012070:	83 f0 01             	xor    eax,0x1
c0012073:	84 c0                	test   al,al
c0012075:	74 41                	je     c00120b8 <ACPI::detectPCI()+0xe0>
c0012077:	e8 d4 e0 fe ff       	call   c0000150 <manualPCIProbe>
c001207c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012080:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012085:	75 0d                	jne    c0012094 <ACPI::detectPCI()+0xbc>
c0012087:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001208c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012091:	eb 25                	jmp    c00120b8 <ACPI::detectPCI()+0xe0>
c0012093:	90                   	nop
c0012094:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0012099:	75 1d                	jne    c00120b8 <ACPI::detectPCI()+0xe0>
c001209b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120a0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120a5:	74 11                	je     c00120b8 <ACPI::detectPCI()+0xe0>
c00120a7:	83 ec 0c             	sub    esp,0xc
c00120aa:	68 34 3b 02 c0       	push   0xc0023b34
c00120af:	e8 35 22 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c00120b4:	83 c4 10             	add    esp,0x10
c00120b7:	90                   	nop
c00120b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00120bd:	0f 84 85 00 00 00    	je     c0012148 <ACPI::detectPCI()+0x170>
c00120c3:	83 ec 0c             	sub    esp,0xc
c00120c6:	68 a7 3c 02 c0       	push   0xc0023ca7
c00120cb:	e8 4d 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120e2:	e8 dc 78 ff ff       	call   c00099c3 <malloc>
c00120e7:	83 c4 10             	add    esp,0x10
c00120ea:	89 c3                	mov    ebx,eax
c00120ec:	83 ec 0c             	sub    esp,0xc
c00120ef:	53                   	push   ebx
c00120f0:	e8 dd a9 00 00       	call   c001cad2 <PCI::PCI()>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00120fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012100:	83 ec 08             	sub    esp,0x8
c0012103:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012107:	50                   	push   eax
c0012108:	e8 61 bd ff ff       	call   c000de6e <Device::addChild(Device*)>
c001210d:	83 c4 10             	add    esp,0x10
c0012110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012114:	8b 00                	mov    eax,DWORD PTR [eax]
c0012116:	83 c0 08             	add    eax,0x8
c0012119:	8b 00                	mov    eax,DWORD PTR [eax]
c001211b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012120:	74 0a                	je     c001212c <ACPI::detectPCI()+0x154>
c0012122:	ba 01 00 00 00       	mov    edx,0x1
c0012127:	eb 0b                	jmp    c0012134 <ACPI::detectPCI()+0x15c>
c0012129:	8d 76 00             	lea    esi,[esi+0x0]
c001212c:	ba 02 00 00 00       	mov    edx,0x2
c0012131:	8d 76 00             	lea    esi,[esi+0x0]
c0012134:	6a 00                	push   0x0
c0012136:	6a 00                	push   0x0
c0012138:	52                   	push   edx
c0012139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001213d:	ff d0                	call   eax
c001213f:	83 c4 10             	add    esp,0x10
c0012142:	e9 a1 00 00 00       	jmp    c00121e8 <ACPI::detectPCI()+0x210>
c0012147:	90                   	nop
c0012148:	83 ec 0c             	sub    esp,0xc
c001214b:	68 bf 3c 02 c0       	push   0xc0023cbf
c0012150:	e8 d3 a8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0012155:	83 c4 10             	add    esp,0x10
c0012158:	83 ec 0c             	sub    esp,0xc
c001215b:	68 ca 3c 02 c0       	push   0xc0023cca
c0012160:	e8 b8 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001216f:	83 ec 0c             	sub    esp,0xc
c0012172:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012176:	e8 48 78 ff ff       	call   c00099c3 <malloc>
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	89 c3                	mov    ebx,eax
c0012180:	83 ec 0c             	sub    esp,0xc
c0012183:	53                   	push   ebx
c0012184:	e8 b3 b4 00 00       	call   c001d63c <IDE::IDE()>
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0012190:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012194:	83 ec 08             	sub    esp,0x8
c0012197:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001219b:	50                   	push   eax
c001219c:	e8 cd bc ff ff       	call   c000de6e <Device::addChild(Device*)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121a8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00121b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121b6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00121bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121c3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00121cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121d2:	83 c0 08             	add    eax,0x8
c00121d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00121d7:	6a 00                	push   0x0
c00121d9:	6a 00                	push   0x0
c00121db:	6a 00                	push   0x0
c00121dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121e1:	ff d0                	call   eax
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	66 90                	xchg   ax,ax
c00121e8:	90                   	nop
c00121e9:	83 c4 28             	add    esp,0x28
c00121ec:	5b                   	pop    ebx
c00121ed:	c3                   	ret    
c00121ee:	66 90                	xchg   ax,ax

c00121f0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00121f0:	83 ec 1c             	sub    esp,0x1c
c00121f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00121f7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00121fa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00121fe:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0012203:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012208:	83 ec 08             	sub    esp,0x8
c001220b:	52                   	push   edx
c001220c:	50                   	push   eax
c001220d:	e8 82 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012219:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001221e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012223:	83 ec 04             	sub    esp,0x4
c0012226:	6a 01                	push   0x1
c0012228:	52                   	push   edx
c0012229:	50                   	push   eax
c001222a:	e8 41 6f ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	90                   	nop
c0012233:	83 c4 1c             	add    esp,0x1c
c0012236:	c3                   	ret    
c0012237:	90                   	nop

c0012238 <ACPI::sleep()>:
c0012238:	83 ec 0c             	sub    esp,0xc
c001223b:	a1 e0 69 02 c0       	mov    eax,ds:0xc00269e0
c0012240:	85 c0                	test   eax,eax
c0012242:	74 08                	je     c001224c <ACPI::sleep()+0x14>
c0012244:	a1 e0 69 02 c0       	mov    eax,ds:0xc00269e0
c0012249:	ff d0                	call   eax
c001224b:	90                   	nop
c001224c:	90                   	nop
c001224d:	83 c4 0c             	add    esp,0xc
c0012250:	c3                   	ret    
c0012251:	90                   	nop
c0012252:	66 90                	xchg   ax,ax

c0012254 <ACPI::open(int, int, void*)>:
c0012254:	57                   	push   edi
c0012255:	56                   	push   esi
c0012256:	53                   	push   ebx
c0012257:	81 ec 70 01 00 00    	sub    esp,0x170
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012267:	e8 6c fd ff ff       	call   c0011fd8 <ACPI::detectPCI()>
c001226c:	83 c4 10             	add    esp,0x10
c001226f:	83 ec 0c             	sub    esp,0xc
c0012272:	68 5c 3b 02 c0       	push   0xc0023b5c
c0012277:	e8 a1 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001227c:	83 c4 10             	add    esp,0x10
c001227f:	83 ec 0c             	sub    esp,0xc
c0012282:	68 df 3c 02 c0       	push   0xc0023cdf
c0012287:	e8 d3 47 00 00       	call   c0016a5f <Thr::loadKernelSymbolTable(char const*)>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012297:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00122a2:	83 ec 0c             	sub    esp,0xc
c00122a5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00122ac:	e8 12 77 ff ff       	call   c00099c3 <malloc>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	89 c3                	mov    ebx,eax
c00122b6:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00122bb:	83 ec 04             	sub    esp,0x4
c00122be:	50                   	push   eax
c00122bf:	68 fd 3c 02 c0       	push   0xc0023cfd
c00122c4:	53                   	push   ebx
c00122c5:	e8 c8 ac ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00122ca:	83 c4 10             	add    esp,0x10
c00122cd:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00122d4:	83 ec 08             	sub    esp,0x8
c00122d7:	6a 01                	push   0x1
c00122d9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122e0:	e8 11 ad ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00122ef:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00122f7:	75 17                	jne    c0012310 <ACPI::open(int, int, void*)+0xbc>
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012303:	e8 4c ad ff ff       	call   c000d054 <File::close()>
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	eb 0b                	jmp    c0012318 <ACPI::open(int, int, void*)+0xc4>
c001230d:	8d 76 00             	lea    esi,[esi+0x0]
c0012310:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012318:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012320:	74 1e                	je     c0012340 <ACPI::open(int, int, void*)+0xec>
c0012322:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012329:	8b 00                	mov    eax,DWORD PTR [eax]
c001232b:	83 c0 08             	add    eax,0x8
c001232e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012330:	83 ec 0c             	sub    esp,0xc
c0012333:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001233a:	ff d0                	call   eax
c001233c:	83 c4 10             	add    esp,0x10
c001233f:	90                   	nop
c0012340:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012347:	83 f0 01             	xor    eax,0x1
c001234a:	84 c0                	test   al,al
c001234c:	74 42                	je     c0012390 <ACPI::open(int, int, void*)+0x13c>
c001234e:	83 ec 0c             	sub    esp,0xc
c0012351:	68 1b 3d 02 c0       	push   0xc0023d1b
c0012356:	e8 c2 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	83 ec 04             	sub    esp,0x4
c0012361:	6a 0c                	push   0xc
c0012363:	68 36 3d 02 c0       	push   0xc0023d36
c0012368:	68 47 3d 02 c0       	push   0xc0023d47
c001236d:	e8 57 2d 00 00       	call   c00150c9 <Reg::readIntWithDefault(char*, char*, int)>
c0012372:	83 c4 10             	add    esp,0x10
c0012375:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012386:	e8 cc 94 ff ff       	call   c000b857 <Virt::setupPageSwapping(int)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	66 90                	xchg   ax,ax
c0012390:	83 ec 0c             	sub    esp,0xc
c0012393:	68 c6 24 02 c0       	push   0xc00224c6
c0012398:	e8 80 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c00123a6:	83 ec 08             	sub    esp,0x8
c00123a9:	6a 01                	push   0x1
c00123ab:	68 4e 3d 02 c0       	push   0xc0023d4e
c00123b0:	e8 21 51 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c00123b5:	83 c4 10             	add    esp,0x10
c00123b8:	83 ec 08             	sub    esp,0x8
c00123bb:	53                   	push   ebx
c00123bc:	50                   	push   eax
c00123bd:	e8 45 53 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00123cc:	83 ec 08             	sub    esp,0x8
c00123cf:	6a 12                	push   0x12
c00123d1:	50                   	push   eax
c00123d2:	e8 1b be ff ff       	call   c000e1f2 <getDevicesOfType(DeviceType)>
c00123d7:	83 c4 0c             	add    esp,0xc
c00123da:	66 90                	xchg   ax,ax
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00123e6:	50                   	push   eax
c00123e7:	e8 d4 f2 00 00       	call   c00216c0 <LinkedList<Device>::isEmpty()>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	83 f0 01             	xor    eax,0x1
c00123f2:	84 c0                	test   al,al
c00123f4:	0f 84 46 01 00 00    	je     c0012540 <ACPI::open(int, int, void*)+0x2ec>
c00123fa:	83 ec 0c             	sub    esp,0xc
c00123fd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012404:	50                   	push   eax
c0012405:	e8 d2 f2 00 00       	call   c00216dc <LinkedList<Device>::getFirstElement()>
c001240a:	83 c4 10             	add    esp,0x10
c001240d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001241e:	50                   	push   eax
c001241f:	e8 c0 f2 00 00       	call   c00216e4 <LinkedList<Device>::removeFirst()>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001242e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012435:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001243c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012440:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012446:	ba 09 00 00 00       	mov    edx,0x9
c001244b:	fc                   	cld    
c001244c:	89 c7                	mov    edi,eax
c001244e:	89 de                	mov    esi,ebx
c0012450:	89 d1                	mov    ecx,edx
c0012452:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	8d 44 24 38          	lea    eax,[esp+0x38]
c001245b:	50                   	push   eax
c001245c:	83 ec 24             	sub    esp,0x24
c001245f:	89 e0                	mov    eax,esp
c0012461:	89 c3                	mov    ebx,eax
c0012463:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012467:	ba 09 00 00 00       	mov    edx,0x9
c001246c:	89 df                	mov    edi,ebx
c001246e:	89 c6                	mov    esi,eax
c0012470:	89 d1                	mov    ecx,edx
c0012472:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012474:	e8 37 ab 00 00       	call   c001cfb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012479:	83 c4 30             	add    esp,0x30
c001247c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012483:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001248b:	0f 84 4b ff ff ff    	je     c00123dc <ACPI::open(int, int, void*)+0x188>
c0012491:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00124a6:	e8 18 75 ff ff       	call   c00099c3 <malloc>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	89 c3                	mov    ebx,eax
c00124b0:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00124b5:	83 ec 04             	sub    esp,0x4
c00124b8:	50                   	push   eax
c00124b9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124c0:	53                   	push   ebx
c00124c1:	e8 cc aa ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00124d0:	83 ec 0c             	sub    esp,0xc
c00124d3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124da:	e8 85 ad ff ff       	call   c000d264 <File::exists()>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	84 c0                	test   al,al
c00124e4:	74 2a                	je     c0012510 <ACPI::open(int, int, void*)+0x2bc>
c00124e6:	83 ec 08             	sub    esp,0x8
c00124e9:	6a 01                	push   0x1
c00124eb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00124f2:	e8 df 4f 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c00124f7:	83 c4 10             	add    esp,0x10
c00124fa:	83 ec 08             	sub    esp,0x8
c00124fd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012504:	50                   	push   eax
c0012505:	e8 fd 51 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	8d 76 00             	lea    esi,[esi+0x0]
c0012510:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012518:	0f 84 be fe ff ff    	je     c00123dc <ACPI::open(int, int, void*)+0x188>
c001251e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012525:	8b 00                	mov    eax,DWORD PTR [eax]
c0012527:	83 c0 08             	add    eax,0x8
c001252a:	8b 00                	mov    eax,DWORD PTR [eax]
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012536:	ff d0                	call   eax
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	e9 9c fe ff ff       	jmp    c00123dc <ACPI::open(int, int, void*)+0x188>
c0012540:	83 ec 0c             	sub    esp,0xc
c0012543:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001254a:	50                   	push   eax
c001254b:	e8 6c f1 00 00       	call   c00216bc <LinkedList<Device>::~LinkedList()>
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c0012559:	83 ec 08             	sub    esp,0x8
c001255c:	6a 01                	push   0x1
c001255e:	68 69 3d 02 c0       	push   0xc0023d69
c0012563:	e8 6e 4f 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	83 ec 08             	sub    esp,0x8
c001256e:	53                   	push   ebx
c001256f:	50                   	push   eax
c0012570:	e8 92 51 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	8b 1d 68 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026368
c001257e:	83 ec 08             	sub    esp,0x8
c0012581:	6a 01                	push   0x1
c0012583:	68 86 3d 02 c0       	push   0xc0023d86
c0012588:	e8 49 4f 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c001258d:	83 c4 10             	add    esp,0x10
c0012590:	83 ec 08             	sub    esp,0x8
c0012593:	53                   	push   ebx
c0012594:	50                   	push   eax
c0012595:	e8 6d 51 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c001259a:	83 c4 10             	add    esp,0x10
c001259d:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00125a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00125a8:	83 e0 04             	and    eax,0x4
c00125ab:	84 c0                	test   al,al
c00125ad:	0f 84 15 01 00 00    	je     c00126c8 <ACPI::open(int, int, void*)+0x474>
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	68 a3 3d 02 c0       	push   0xc0023da3
c00125bb:	e8 5d 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00125ce:	83 ec 0c             	sub    esp,0xc
c00125d1:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00125d8:	e8 e6 73 ff ff       	call   c00099c3 <malloc>
c00125dd:	83 c4 10             	add    esp,0x10
c00125e0:	89 c3                	mov    ebx,eax
c00125e2:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00125e7:	83 ec 04             	sub    esp,0x4
c00125ea:	50                   	push   eax
c00125eb:	68 c0 3d 02 c0       	push   0xc0023dc0
c00125f0:	53                   	push   ebx
c00125f1:	e8 9c a9 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00125f6:	83 c4 10             	add    esp,0x10
c00125f9:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012600:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012608:	74 1a                	je     c0012624 <ACPI::open(int, int, void*)+0x3d0>
c001260a:	83 ec 0c             	sub    esp,0xc
c001260d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012614:	e8 4b ac ff ff       	call   c000d264 <File::exists()>
c0012619:	83 c4 10             	add    esp,0x10
c001261c:	84 c0                	test   al,al
c001261e:	74 04                	je     c0012624 <ACPI::open(int, int, void*)+0x3d0>
c0012620:	b0 01                	mov    al,0x1
c0012622:	eb 04                	jmp    c0012628 <ACPI::open(int, int, void*)+0x3d4>
c0012624:	b0 00                	mov    al,0x0
c0012626:	66 90                	xchg   ax,ax
c0012628:	84 c0                	test   al,al
c001262a:	74 28                	je     c0012654 <ACPI::open(int, int, void*)+0x400>
c001262c:	83 ec 08             	sub    esp,0x8
c001262f:	6a 01                	push   0x1
c0012631:	68 c0 3d 02 c0       	push   0xc0023dc0
c0012636:	e8 9b 4e 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c001263b:	83 c4 10             	add    esp,0x10
c001263e:	83 ec 08             	sub    esp,0x8
c0012641:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012648:	50                   	push   eax
c0012649:	e8 b9 50 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c001264e:	83 c4 10             	add    esp,0x10
c0012651:	8d 76 00             	lea    esi,[esi+0x0]
c0012654:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001265c:	74 2a                	je     c0012688 <ACPI::open(int, int, void*)+0x434>
c001265e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012666:	74 20                	je     c0012688 <ACPI::open(int, int, void*)+0x434>
c0012668:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001266f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012671:	83 c0 08             	add    eax,0x8
c0012674:	8b 00                	mov    eax,DWORD PTR [eax]
c0012676:	83 ec 0c             	sub    esp,0xc
c0012679:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012680:	ff d0                	call   eax
c0012682:	83 c4 10             	add    esp,0x10
c0012685:	8d 76 00             	lea    esi,[esi+0x0]
c0012688:	a1 08 6c 02 c0       	mov    eax,ds:0xc0026c08
c001268d:	83 ec 08             	sub    esp,0x8
c0012690:	68 dd 3d 02 c0       	push   0xc0023ddd
c0012695:	50                   	push   eax
c0012696:	e8 cd f1 ff ff       	call   c0011868 <findDataTable(unsigned char*, char*)>
c001269b:	83 c4 10             	add    esp,0x10
c001269e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00126a5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00126ad:	74 19                	je     c00126c8 <ACPI::open(int, int, void*)+0x474>
c00126af:	83 ec 08             	sub    esp,0x8
c00126b2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00126b9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00126c0:	e8 2b fb ff ff       	call   c00121f0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00126c5:	83 c4 10             	add    esp,0x10
c00126c8:	b8 00 00 00 00       	mov    eax,0x0
c00126cd:	81 c4 70 01 00 00    	add    esp,0x170
c00126d3:	5b                   	pop    ebx
c00126d4:	5e                   	pop    esi
c00126d5:	5f                   	pop    edi
c00126d6:	c3                   	ret    
c00126d7:	90                   	nop

c00126d8 <CPU::close(int, int, void*)>:
c00126d8:	31 c0                	xor    eax,eax
c00126da:	c3                   	ret    
c00126db:	90                   	nop

c00126dc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00126dc:	55                   	push   ebp
c00126dd:	57                   	push   edi
c00126de:	56                   	push   esi
c00126df:	53                   	push   ebx
c00126e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00126e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126e8:	89 ce                	mov    esi,ecx
c00126ea:	89 d5                	mov    ebp,edx
c00126ec:	80 f9 04             	cmp    cl,0x4
c00126ef:	75 28                	jne    c0012719 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00126f1:	8d 42 f9             	lea    eax,[edx-0x7]
c00126f4:	3c 03                	cmp    al,0x3
c00126f6:	0f 86 63 01 00 00    	jbe    c001285f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00126fc:	80 fa 03             	cmp    dl,0x3
c00126ff:	0f 84 5a 01 00 00    	je     c001285f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012705:	8d 7a f2             	lea    edi,[edx-0xe]
c0012708:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c001270d:	89 fb                	mov    ebx,edi
c001270f:	80 fb 01             	cmp    bl,0x1
c0012712:	77 4e                	ja     c0012762 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012714:	e9 52 01 00 00       	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012719:	80 f9 05             	cmp    cl,0x5
c001271c:	75 4d                	jne    c001276b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001271e:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012723:	80 fa 03             	cmp    dl,0x3
c0012726:	0f 86 3f 01 00 00    	jbe    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001272c:	8d 7a fa             	lea    edi,[edx-0x6]
c001272f:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012734:	89 fb                	mov    ebx,edi
c0012736:	80 fb 01             	cmp    bl,0x1
c0012739:	0f 86 2c 01 00 00    	jbe    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001273f:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012744:	80 fa 08             	cmp    dl,0x8
c0012747:	0f 84 1e 01 00 00    	je     c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001274d:	89 d7                	mov    edi,edx
c001274f:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012754:	83 e7 fb             	and    edi,0xfffffffb
c0012757:	89 fb                	mov    ebx,edi
c0012759:	80 fb 09             	cmp    bl,0x9
c001275c:	0f 84 09 01 00 00    	je     c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012762:	31 c0                	xor    eax,eax
c0012764:	89 eb                	mov    ebx,ebp
c0012766:	0f b6 fb             	movzx  edi,bl
c0012769:	eb 30                	jmp    c001279b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001276b:	31 c0                	xor    eax,eax
c001276d:	80 f9 06             	cmp    cl,0x6
c0012770:	75 f2                	jne    c0012764 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012772:	80 fa 0a             	cmp    dl,0xa
c0012775:	77 ed                	ja     c0012764 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012777:	bf de 05 00 00       	mov    edi,0x5de
c001277c:	0f a3 d7             	bt     edi,edx
c001277f:	73 e3                	jae    c0012764 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012781:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012786:	e9 e0 00 00 00       	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001278b:	39 c7                	cmp    edi,eax
c001278d:	0f 84 d3 00 00 00    	je     c0012866 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012793:	40                   	inc    eax
c0012794:	3d d0 00 00 00       	cmp    eax,0xd0
c0012799:	74 09                	je     c00127a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001279b:	89 f3                	mov    ebx,esi
c001279d:	80 fb 0f             	cmp    bl,0xf
c00127a0:	75 f1                	jne    c0012793 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00127a2:	eb e7                	jmp    c001278b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00127a4:	80 f9 10             	cmp    cl,0x10
c00127a7:	75 14                	jne    c00127bd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00127a9:	8d 42 fc             	lea    eax,[edx-0x4]
c00127ac:	83 e0 fb             	and    eax,0xfffffffb
c00127af:	3c 02                	cmp    al,0x2
c00127b1:	76 34                	jbe    c00127e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00127b3:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c00127b8:	80 fa 02             	cmp    dl,0x2
c00127bb:	eb 24                	jmp    c00127e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00127bd:	80 f9 11             	cmp    cl,0x11
c00127c0:	75 13                	jne    c00127d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00127c2:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c00127c7:	80 fa 03             	cmp    dl,0x3
c00127ca:	0f 85 9b 00 00 00    	jne    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127d0:	e9 91 00 00 00       	jmp    c0012866 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127d5:	80 f9 12             	cmp    cl,0x12
c00127d8:	75 14                	jne    c00127ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00127da:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c00127df:	fe ca                	dec    dl
c00127e1:	0f 85 84 00 00 00    	jne    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127e7:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c00127ec:	eb 7d                	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ee:	80 f9 14             	cmp    cl,0x14
c00127f1:	75 12                	jne    c0012805 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00127f3:	4a                   	dec    edx
c00127f4:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c00127f9:	80 fa 01             	cmp    dl,0x1
c00127fc:	77 6d                	ja     c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127fe:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012803:	eb 66                	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012805:	80 f9 15             	cmp    cl,0x15
c0012808:	75 31                	jne    c001283b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001280a:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c001280f:	80 fa 01             	cmp    dl,0x1
c0012812:	74 57                	je     c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012814:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012819:	80 fa 13             	cmp    dl,0x13
c001281c:	76 0c                	jbe    c001282a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001281e:	80 fa 30             	cmp    dl,0x30
c0012821:	75 48                	jne    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012823:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012828:	eb 41                	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001282a:	b9 04 00 09 00       	mov    ecx,0x90004
c001282f:	0f a3 d1             	bt     ecx,edx
c0012832:	73 37                	jae    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012834:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012839:	eb 30                	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001283b:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012840:	80 f9 16             	cmp    cl,0x16
c0012843:	75 26                	jne    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012845:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c001284a:	84 d2                	test   dl,dl
c001284c:	74 1d                	je     c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001284e:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012853:	80 fa 30             	cmp    dl,0x30
c0012856:	75 13                	jne    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012858:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c001285d:	eb 0c                	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001285f:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012864:	eb 05                	jmp    c001286b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012866:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c001286b:	5b                   	pop    ebx
c001286c:	5e                   	pop    esi
c001286d:	5f                   	pop    edi
c001286e:	5d                   	pop    ebp
c001286f:	c3                   	ret    

c0012870 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012870:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012874:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012878:	80 f9 04             	cmp    cl,0x4
c001287b:	75 6b                	jne    c00128e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001287d:	b8 80 5a 02 c0       	mov    eax,0xc0025a80
c0012882:	80 fa 01             	cmp    dl,0x1
c0012885:	0f 86 92 02 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001288b:	b8 90 5a 02 c0       	mov    eax,0xc0025a90
c0012890:	80 fa 02             	cmp    dl,0x2
c0012893:	0f 84 84 02 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012899:	b8 a0 5a 02 c0       	mov    eax,0xc0025aa0
c001289e:	80 fa 03             	cmp    dl,0x3
c00128a1:	0f 84 76 02 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128a7:	b8 b0 5a 02 c0       	mov    eax,0xc0025ab0
c00128ac:	80 fa 04             	cmp    dl,0x4
c00128af:	0f 84 68 02 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128b5:	b8 c0 5a 02 c0       	mov    eax,0xc0025ac0
c00128ba:	80 fa 05             	cmp    dl,0x5
c00128bd:	0f 84 5a 02 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128c3:	b8 a0 5a 02 c0       	mov    eax,0xc0025aa0
c00128c8:	80 fa 07             	cmp    dl,0x7
c00128cb:	0f 84 4c 02 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d1:	83 ea 08             	sub    edx,0x8
c00128d4:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c00128d9:	80 fa 01             	cmp    dl,0x1
c00128dc:	0f 87 3b 02 00 00    	ja     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e2:	b8 d0 5a 02 c0       	mov    eax,0xc0025ad0
c00128e7:	c3                   	ret    
c00128e8:	80 f9 05             	cmp    cl,0x5
c00128eb:	75 45                	jne    c0012932 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00128ed:	8d 4a ff             	lea    ecx,[edx-0x1]
c00128f0:	b8 e0 5a 02 c0       	mov    eax,0xc0025ae0
c00128f5:	80 f9 02             	cmp    cl,0x2
c00128f8:	0f 86 1f 02 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128fe:	80 fa 04             	cmp    dl,0x4
c0012901:	0f 84 f3 01 00 00    	je     c0012afa <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012907:	80 fa 07             	cmp    dl,0x7
c001290a:	0f 84 0d 02 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012910:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c0012915:	80 fa 08             	cmp    dl,0x8
c0012918:	0f 84 ff 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001291e:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012923:	80 fa 09             	cmp    dl,0x9
c0012926:	0f 85 f1 01 00 00    	jne    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001292c:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c0012931:	c3                   	ret    
c0012932:	80 f9 06             	cmp    cl,0x6
c0012935:	0f 85 85 01 00 00    	jne    c0012ac0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001293b:	b8 10 5b 02 c0       	mov    eax,0xc0025b10
c0012940:	80 fa 01             	cmp    dl,0x1
c0012943:	0f 84 d4 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012949:	8d 42 fb             	lea    eax,[edx-0x5]
c001294c:	3c 01                	cmp    al,0x1
c001294e:	0f 86 ac 01 00 00    	jbe    c0012b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012954:	80 fa 03             	cmp    dl,0x3
c0012957:	0f 84 a3 01 00 00    	je     c0012b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001295d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012960:	b8 30 5b 02 c0       	mov    eax,0xc0025b30
c0012965:	80 f9 01             	cmp    cl,0x1
c0012968:	0f 86 af 01 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296e:	80 fa 09             	cmp    dl,0x9
c0012971:	0f 84 8f 01 00 00    	je     c0012b06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012977:	8d 4a f6             	lea    ecx,[edx-0xa]
c001297a:	80 f9 01             	cmp    cl,0x1
c001297d:	0f 86 9a 01 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012983:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c0012988:	80 fa 0d             	cmp    dl,0xd
c001298b:	0f 84 8c 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012991:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c0012996:	80 fa 0e             	cmp    dl,0xe
c0012999:	0f 84 7e 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001299f:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c00129a4:	80 fa 0f             	cmp    dl,0xf
c00129a7:	0f 84 70 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ad:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c00129b2:	80 fa 15             	cmp    dl,0x15
c00129b5:	0f 84 62 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129bb:	8d 4a ea             	lea    ecx,[edx-0x16]
c00129be:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c00129c3:	80 f9 01             	cmp    cl,0x1
c00129c6:	0f 86 51 01 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129cc:	80 fa 1a             	cmp    dl,0x1a
c00129cf:	0f 84 37 01 00 00    	je     c0012b0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00129d5:	80 fa 1c             	cmp    dl,0x1c
c00129d8:	0f 84 34 01 00 00    	je     c0012b12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00129de:	80 fa 1d             	cmp    dl,0x1d
c00129e1:	0f 84 36 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e7:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c00129ec:	80 fa 25             	cmp    dl,0x25
c00129ef:	0f 84 28 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f5:	8d 4a da             	lea    ecx,[edx-0x26]
c00129f8:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c00129fd:	80 f9 01             	cmp    cl,0x1
c0012a00:	0f 86 17 01 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a06:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012a0b:	80 fa 2a             	cmp    dl,0x2a
c0012a0e:	0f 84 09 01 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a14:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012a19:	80 fa 2c             	cmp    dl,0x2c
c0012a1c:	0f 84 fb 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a22:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012a27:	80 fa 2d             	cmp    dl,0x2d
c0012a2a:	0f 84 ed 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a30:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012a35:	80 fa 2e             	cmp    dl,0x2e
c0012a38:	0f 84 df 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3e:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012a43:	80 fa 2f             	cmp    dl,0x2f
c0012a46:	0f 84 d1 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a4c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a4f:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c0012a54:	80 f9 01             	cmp    cl,0x1
c0012a57:	0f 86 c0 00 00 00    	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a5d:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012a62:	80 fa 37             	cmp    dl,0x37
c0012a65:	0f 84 b2 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a6b:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012a70:	80 fa 3a             	cmp    dl,0x3a
c0012a73:	0f 84 a4 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a79:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012a7e:	80 fa 3c             	cmp    dl,0x3c
c0012a81:	0f 84 96 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a87:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012a8c:	80 fa 3d             	cmp    dl,0x3d
c0012a8f:	0f 84 88 00 00 00    	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a95:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012a9a:	80 fa 3e             	cmp    dl,0x3e
c0012a9d:	74 7e                	je     c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a9f:	8d 42 bb             	lea    eax,[edx-0x45]
c0012aa2:	3c 01                	cmp    al,0x1
c0012aa4:	76 72                	jbe    c0012b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012aa6:	80 fa 3f             	cmp    dl,0x3f
c0012aa9:	74 6d                	je     c0012b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012aab:	80 fa 4a             	cmp    dl,0x4a
c0012aae:	74 0a                	je     c0012aba <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012ab0:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012ab5:	80 fa 4d             	cmp    dl,0x4d
c0012ab8:	75 63                	jne    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aba:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012abf:	c3                   	ret    
c0012ac0:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012ac5:	80 f9 0b             	cmp    cl,0xb
c0012ac8:	75 0a                	jne    c0012ad4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012aca:	fe ca                	dec    dl
c0012acc:	75 4f                	jne    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ace:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012ad3:	c3                   	ret    
c0012ad4:	80 f9 0f             	cmp    cl,0xf
c0012ad7:	75 44                	jne    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ad9:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012ade:	80 fa 02             	cmp    dl,0x2
c0012ae1:	76 3a                	jbe    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae3:	8d 42 fd             	lea    eax,[edx-0x3]
c0012ae6:	3c 01                	cmp    al,0x1
c0012ae8:	76 0a                	jbe    c0012af4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012aea:	b8 65 3f 02 c0       	mov    eax,0xc0023f65
c0012aef:	80 fa 06             	cmp    dl,0x6
c0012af2:	75 29                	jne    c0012b1d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af4:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012af9:	c3                   	ret    
c0012afa:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c0012aff:	c3                   	ret    
c0012b00:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c0012b05:	c3                   	ret    
c0012b06:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c0012b0b:	c3                   	ret    
c0012b0c:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012b11:	c3                   	ret    
c0012b12:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c0012b17:	c3                   	ret    
c0012b18:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012b1d:	c3                   	ret    

c0012b1e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012b1e:	60                   	pusha  
c0012b1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b2b:	9c                   	pushf  
c0012b2c:	fa                   	cli    
c0012b2d:	0f 09                	wbinvd 
c0012b2f:	0f 30                	wrmsr  
c0012b31:	9d                   	popf   
c0012b32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b36:	89 02                	mov    DWORD PTR [edx],eax
c0012b38:	61                   	popa   
c0012b39:	c3                   	ret    

c0012b3a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012b3a:	60                   	pusha  
c0012b3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b3f:	9c                   	pushf  
c0012b40:	fa                   	cli    
c0012b41:	0f 09                	wbinvd 
c0012b43:	31 c0                	xor    eax,eax
c0012b45:	31 d2                	xor    edx,edx
c0012b47:	0f 32                	rdmsr  
c0012b49:	9d                   	popf   
c0012b4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b4e:	89 02                	mov    DWORD PTR [edx],eax
c0012b50:	61                   	popa   
c0012b51:	c3                   	ret    

c0012b52 <CPU::AMD_K6_writeback(int, int, int)>:
c0012b52:	56                   	push   esi
c0012b53:	53                   	push   ebx
c0012b54:	83 ec 10             	sub    esp,0x10
c0012b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b5b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012b60:	75 5d                	jne    c0012bbf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b62:	83 f8 08             	cmp    eax,0x8
c0012b65:	75 09                	jne    c0012b70 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012b67:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012b6c:	7e 13                	jle    c0012b81 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b6e:	eb 30                	jmp    c0012ba0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b70:	83 f8 06             	cmp    eax,0x6
c0012b73:	7c 4a                	jl     c0012bbf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b75:	83 f8 07             	cmp    eax,0x7
c0012b78:	7e 07                	jle    c0012b81 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b7a:	83 f8 09             	cmp    eax,0x9
c0012b7d:	74 21                	je     c0012ba0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b7f:	eb 3e                	jmp    c0012bbf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b81:	89 e6                	mov    esi,esp
c0012b83:	8b 1d a8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263a8
c0012b89:	56                   	push   esi
c0012b8a:	c1 eb 15             	shr    ebx,0x15
c0012b8d:	68 82 00 00 c0       	push   0xc0000082
c0012b92:	83 e3 7e             	and    ebx,0x7e
c0012b95:	e8 a0 ff ff ff       	call   c0012b3a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012b9a:	56                   	push   esi
c0012b9b:	6a 00                	push   0x0
c0012b9d:	53                   	push   ebx
c0012b9e:	eb 12                	jmp    c0012bb2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012ba0:	89 e3                	mov    ebx,esp
c0012ba2:	53                   	push   ebx
c0012ba3:	68 82 00 00 c0       	push   0xc0000082
c0012ba8:	e8 8d ff ff ff       	call   c0012b3a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bad:	53                   	push   ebx
c0012bae:	6a 00                	push   0x0
c0012bb0:	6a 00                	push   0x0
c0012bb2:	68 82 00 00 c0       	push   0xc0000082
c0012bb7:	e8 62 ff ff ff       	call   c0012b1e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012bbc:	83 c4 18             	add    esp,0x18
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	5b                   	pop    ebx
c0012bc3:	5e                   	pop    esi
c0012bc4:	c3                   	ret    
c0012bc5:	90                   	nop

c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012bc6:	55                   	push   ebp
c0012bc7:	57                   	push   edi
c0012bc8:	56                   	push   esi
c0012bc9:	53                   	push   ebx
c0012bca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012bd2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012bd6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012bda:	39 05 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,eax
c0012be0:	75 23                	jne    c0012c05 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012be2:	a1 6c 6e 02 c0       	mov    eax,ds:0xc0026e6c
c0012be7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012beb:	89 06                	mov    DWORD PTR [esi],eax
c0012bed:	a1 68 6e 02 c0       	mov    eax,ds:0xc0026e68
c0012bf2:	89 07                	mov    DWORD PTR [edi],eax
c0012bf4:	a1 64 6e 02 c0       	mov    eax,ds:0xc0026e64
c0012bf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012bfc:	a1 60 6e 02 c0       	mov    eax,ds:0xc0026e60
c0012c01:	89 02                	mov    DWORD PTR [edx],eax
c0012c03:	eb 3f                	jmp    c0012c44 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c05:	31 c9                	xor    ecx,ecx
c0012c07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c0b:	0f a2                	cpuid  
c0012c0d:	89 06                	mov    DWORD PTR [esi],eax
c0012c0f:	89 1f                	mov    DWORD PTR [edi],ebx
c0012c11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c15:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012c18:	89 10                	mov    DWORD PTR [eax],edx
c0012c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c1e:	a3 20 5d 02 c0       	mov    ds:0xc0025d20,eax
c0012c23:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c25:	a3 6c 6e 02 c0       	mov    ds:0xc0026e6c,eax
c0012c2a:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c2c:	a3 68 6e 02 c0       	mov    ds:0xc0026e68,eax
c0012c31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c34:	a3 64 6e 02 c0       	mov    ds:0xc0026e64,eax
c0012c39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c3f:	a3 60 6e 02 c0       	mov    ds:0xc0026e60,eax
c0012c44:	5b                   	pop    ebx
c0012c45:	5e                   	pop    esi
c0012c46:	5f                   	pop    edi
c0012c47:	5d                   	pop    ebp
c0012c48:	c3                   	ret    
c0012c49:	90                   	nop

c0012c4a <CPU::cpuidCheckEDX(unsigned int)>:
c0012c4a:	83 ec 10             	sub    esp,0x10
c0012c4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c51:	50                   	push   eax
c0012c52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c56:	50                   	push   eax
c0012c57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c5b:	50                   	push   eax
c0012c5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c60:	50                   	push   eax
c0012c61:	6a 01                	push   0x1
c0012c63:	e8 5e ff ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c6c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012c70:	0f 95 c0             	setne  al
c0012c73:	83 c4 24             	add    esp,0x24
c0012c76:	c3                   	ret    
c0012c77:	90                   	nop

c0012c78 <CPU::cpuidCheckECX(unsigned int)>:
c0012c78:	83 ec 10             	sub    esp,0x10
c0012c7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c7f:	50                   	push   eax
c0012c80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c84:	50                   	push   eax
c0012c85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c89:	50                   	push   eax
c0012c8a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c8e:	50                   	push   eax
c0012c8f:	6a 01                	push   0x1
c0012c91:	e8 30 ff ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c9a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012c9e:	0f 95 c0             	setne  al
c0012ca1:	83 c4 24             	add    esp,0x24
c0012ca4:	c3                   	ret    
c0012ca5:	90                   	nop

c0012ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012ca6:	83 ec 10             	sub    esp,0x10
c0012ca9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cad:	50                   	push   eax
c0012cae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cb2:	50                   	push   eax
c0012cb3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cb7:	50                   	push   eax
c0012cb8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cbc:	50                   	push   eax
c0012cbd:	6a 07                	push   0x7
c0012cbf:	e8 02 ff ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cc8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012ccc:	0f 95 c0             	setne  al
c0012ccf:	83 c4 24             	add    esp,0x24
c0012cd2:	c3                   	ret    
c0012cd3:	90                   	nop

c0012cd4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012cd4:	83 ec 10             	sub    esp,0x10
c0012cd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cdb:	50                   	push   eax
c0012cdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ce0:	50                   	push   eax
c0012ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ce5:	50                   	push   eax
c0012ce6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cea:	50                   	push   eax
c0012ceb:	6a 07                	push   0x7
c0012ced:	e8 d4 fe ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cf6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cfa:	0f 95 c0             	setne  al
c0012cfd:	83 c4 24             	add    esp,0x24
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <CPU::CPU()>:
c0012d02:	83 ec 0c             	sub    esp,0xc
c0012d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d09:	83 ec 08             	sub    esp,0x8
c0012d0c:	68 65 3f 02 c0       	push   0xc0023f65
c0012d11:	50                   	push   eax
c0012d12:	e8 5b b3 ff ff       	call   c000e072 <Device::Device(char const*)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	ba 88 41 02 c0       	mov    edx,0xc0024188
c0012d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d23:	89 10                	mov    DWORD PTR [eax],edx
c0012d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d29:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d37:	05 78 01 00 00       	add    eax,0x178
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	50                   	push   eax
c0012d40:	e8 15 65 ff ff       	call   c000925a <GDT::GDT()>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4c:	05 7c 09 00 00       	add    eax,0x97c
c0012d51:	83 ec 0c             	sub    esp,0xc
c0012d54:	50                   	push   eax
c0012d55:	e8 56 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d5a:	83 c4 10             	add    esp,0x10
c0012d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d61:	05 7c 11 00 00       	add    eax,0x117c
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	50                   	push   eax
c0012d6a:	e8 21 82 ff ff       	call   c000af90 <TSS::TSS()>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d76:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d81:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012d8b:	90                   	nop
c0012d8c:	83 c4 0c             	add    esp,0xc
c0012d8f:	c3                   	ret    

c0012d90 <CPU::displayFeatures()>:
c0012d90:	c3                   	ret    
c0012d91:	90                   	nop

c0012d92 <CPU::detectFeatures()>:
c0012d92:	55                   	push   ebp
c0012d93:	57                   	push   edi
c0012d94:	56                   	push   esi
c0012d95:	53                   	push   ebx
c0012d96:	83 ec 50             	sub    esp,0x50
c0012d99:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012d9d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012da7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012dae:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012db4:	6a 0d                	push   0xd
c0012db6:	6a 00                	push   0x0
c0012db8:	55                   	push   ebp
c0012db9:	e8 c6 d8 fe ff       	call   c0000684 <memset>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0012dc6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012dcd:	0f 84 22 09 00 00    	je     c00136f5 <CPU::detectFeatures()+0x963>
c0012dd3:	83 ec 0c             	sub    esp,0xc
c0012dd6:	89 ef                	mov    edi,ebp
c0012dd8:	6a 10                	push   0x10
c0012dda:	e8 6b fe ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012ddf:	83 e0 01             	and    eax,0x1
c0012de2:	8d 14 00             	lea    edx,[eax+eax*1]
c0012de5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012deb:	83 e0 fd             	and    eax,0xfffffffd
c0012dee:	09 d0                	or     eax,edx
c0012df0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012df6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012dfd:	e8 48 fe ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012e02:	83 e0 01             	and    eax,0x1
c0012e05:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e0c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e12:	83 e0 fb             	and    eax,0xfffffffb
c0012e15:	09 d0                	or     eax,edx
c0012e17:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e1d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e24:	e8 21 fe ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012e29:	83 e0 01             	and    eax,0x1
c0012e2c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e33:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e39:	83 e0 f7             	and    eax,0xfffffff7
c0012e3c:	09 d0                	or     eax,edx
c0012e3e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e44:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e4b:	e8 fa fd ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012e50:	83 e0 01             	and    eax,0x1
c0012e53:	c1 e0 04             	shl    eax,0x4
c0012e56:	88 c2                	mov    dl,al
c0012e58:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e5e:	83 e0 ef             	and    eax,0xffffffef
c0012e61:	09 d0                	or     eax,edx
c0012e63:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e69:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012e70:	e8 d5 fd ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012e75:	83 e0 01             	and    eax,0x1
c0012e78:	c1 e0 05             	shl    eax,0x5
c0012e7b:	88 c2                	mov    dl,al
c0012e7d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e83:	83 e0 df             	and    eax,0xffffffdf
c0012e86:	09 d0                	or     eax,edx
c0012e88:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e8e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012e95:	e8 b0 fd ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012e9a:	83 e0 01             	and    eax,0x1
c0012e9d:	8d 14 00             	lea    edx,[eax+eax*1]
c0012ea0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012ea6:	83 e0 fd             	and    eax,0xfffffffd
c0012ea9:	09 d0                	or     eax,edx
c0012eab:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012eb1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012eb8:	e8 8d fd ff ff       	call   c0012c4a <CPU::cpuidCheckEDX(unsigned int)>
c0012ebd:	83 e0 01             	and    eax,0x1
c0012ec0:	c1 e0 06             	shl    eax,0x6
c0012ec3:	88 c2                	mov    dl,al
c0012ec5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012ecb:	83 e0 bf             	and    eax,0xffffffbf
c0012ece:	09 d0                	or     eax,edx
c0012ed0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012ed6:	58                   	pop    eax
c0012ed7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012edb:	50                   	push   eax
c0012edc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012ee0:	50                   	push   eax
c0012ee1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012ee5:	56                   	push   esi
c0012ee6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012eea:	50                   	push   eax
c0012eeb:	6a 00                	push   0x0
c0012eed:	e8 d4 fc ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012ef2:	b8 04 00 00 00       	mov    eax,0x4
c0012ef7:	89 c1                	mov    ecx,eax
c0012ef9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012efb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f01:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f05:	89 c1                	mov    ecx,eax
c0012f07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f09:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012f0f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012f13:	89 c1                	mov    ecx,eax
c0012f15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f17:	83 c4 18             	add    esp,0x18
c0012f1a:	68 10 3e 02 c0       	push   0xc0023e10
c0012f1f:	55                   	push   ebp
c0012f20:	e8 a7 d8 fe ff       	call   c00007cc <strcmp>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	85 c0                	test   eax,eax
c0012f2a:	75 0f                	jne    c0012f3b <CPU::detectFeatures()+0x1a9>
c0012f2c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012f36:	e9 22 02 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0012f3b:	50                   	push   eax
c0012f3c:	50                   	push   eax
c0012f3d:	68 1d 3e 02 c0       	push   0xc0023e1d
c0012f42:	55                   	push   ebp
c0012f43:	e8 84 d8 fe ff       	call   c00007cc <strcmp>
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	85 c0                	test   eax,eax
c0012f4d:	74 dd                	je     c0012f2c <CPU::detectFeatures()+0x19a>
c0012f4f:	50                   	push   eax
c0012f50:	50                   	push   eax
c0012f51:	68 2a 3e 02 c0       	push   0xc0023e2a
c0012f56:	55                   	push   ebp
c0012f57:	e8 70 d8 fe ff       	call   c00007cc <strcmp>
c0012f5c:	83 c4 10             	add    esp,0x10
c0012f5f:	85 c0                	test   eax,eax
c0012f61:	74 2a                	je     c0012f8d <CPU::detectFeatures()+0x1fb>
c0012f63:	50                   	push   eax
c0012f64:	50                   	push   eax
c0012f65:	68 37 3e 02 c0       	push   0xc0023e37
c0012f6a:	55                   	push   ebp
c0012f6b:	e8 5c d8 fe ff       	call   c00007cc <strcmp>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	85 c0                	test   eax,eax
c0012f75:	74 16                	je     c0012f8d <CPU::detectFeatures()+0x1fb>
c0012f77:	50                   	push   eax
c0012f78:	50                   	push   eax
c0012f79:	68 44 3e 02 c0       	push   0xc0023e44
c0012f7e:	55                   	push   ebp
c0012f7f:	e8 48 d8 fe ff       	call   c00007cc <strcmp>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	85 c0                	test   eax,eax
c0012f89:	74 48                	je     c0012fd3 <CPU::detectFeatures()+0x241>
c0012f8b:	eb 0f                	jmp    c0012f9c <CPU::detectFeatures()+0x20a>
c0012f8d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012f97:	e9 c1 01 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0012f9c:	50                   	push   eax
c0012f9d:	50                   	push   eax
c0012f9e:	68 51 3e 02 c0       	push   0xc0023e51
c0012fa3:	55                   	push   ebp
c0012fa4:	e8 23 d8 fe ff       	call   c00007cc <strcmp>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	85 c0                	test   eax,eax
c0012fae:	74 23                	je     c0012fd3 <CPU::detectFeatures()+0x241>
c0012fb0:	57                   	push   edi
c0012fb1:	57                   	push   edi
c0012fb2:	68 5e 3e 02 c0       	push   0xc0023e5e
c0012fb7:	55                   	push   ebp
c0012fb8:	e8 0f d8 fe ff       	call   c00007cc <strcmp>
c0012fbd:	83 c4 10             	add    esp,0x10
c0012fc0:	85 c0                	test   eax,eax
c0012fc2:	75 1e                	jne    c0012fe2 <CPU::detectFeatures()+0x250>
c0012fc4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012fce:	e9 8a 01 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0012fd3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012fdd:	e9 7b 01 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0012fe2:	56                   	push   esi
c0012fe3:	56                   	push   esi
c0012fe4:	68 6b 3e 02 c0       	push   0xc0023e6b
c0012fe9:	55                   	push   ebp
c0012fea:	e8 dd d7 fe ff       	call   c00007cc <strcmp>
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	85 c0                	test   eax,eax
c0012ff4:	75 0f                	jne    c0013005 <CPU::detectFeatures()+0x273>
c0012ff6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013000:	e9 58 01 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0013005:	51                   	push   ecx
c0013006:	51                   	push   ecx
c0013007:	68 2a 3e 02 c0       	push   0xc0023e2a
c001300c:	55                   	push   ebp
c001300d:	e8 ba d7 fe ff       	call   c00007cc <strcmp>
c0013012:	83 c4 10             	add    esp,0x10
c0013015:	85 c0                	test   eax,eax
c0013017:	75 0f                	jne    c0013028 <CPU::detectFeatures()+0x296>
c0013019:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013023:	e9 35 01 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0013028:	52                   	push   edx
c0013029:	52                   	push   edx
c001302a:	68 78 3e 02 c0       	push   0xc0023e78
c001302f:	55                   	push   ebp
c0013030:	e8 97 d7 fe ff       	call   c00007cc <strcmp>
c0013035:	83 c4 10             	add    esp,0x10
c0013038:	85 c0                	test   eax,eax
c001303a:	75 0f                	jne    c001304b <CPU::detectFeatures()+0x2b9>
c001303c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013046:	e9 12 01 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c001304b:	50                   	push   eax
c001304c:	50                   	push   eax
c001304d:	68 85 3e 02 c0       	push   0xc0023e85
c0013052:	55                   	push   ebp
c0013053:	e8 74 d7 fe ff       	call   c00007cc <strcmp>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	85 c0                	test   eax,eax
c001305d:	75 0f                	jne    c001306e <CPU::detectFeatures()+0x2dc>
c001305f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013069:	e9 ef 00 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c001306e:	50                   	push   eax
c001306f:	50                   	push   eax
c0013070:	68 92 3e 02 c0       	push   0xc0023e92
c0013075:	55                   	push   ebp
c0013076:	e8 51 d7 fe ff       	call   c00007cc <strcmp>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	85 c0                	test   eax,eax
c0013080:	75 0f                	jne    c0013091 <CPU::detectFeatures()+0x2ff>
c0013082:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001308c:	e9 cc 00 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0013091:	50                   	push   eax
c0013092:	50                   	push   eax
c0013093:	68 9f 3e 02 c0       	push   0xc0023e9f
c0013098:	55                   	push   ebp
c0013099:	e8 2e d7 fe ff       	call   c00007cc <strcmp>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	85 c0                	test   eax,eax
c00130a3:	75 0f                	jne    c00130b4 <CPU::detectFeatures()+0x322>
c00130a5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00130af:	e9 a9 00 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c00130b4:	50                   	push   eax
c00130b5:	50                   	push   eax
c00130b6:	68 ac 3e 02 c0       	push   0xc0023eac
c00130bb:	55                   	push   ebp
c00130bc:	e8 0b d7 fe ff       	call   c00007cc <strcmp>
c00130c1:	83 c4 10             	add    esp,0x10
c00130c4:	85 c0                	test   eax,eax
c00130c6:	75 0f                	jne    c00130d7 <CPU::detectFeatures()+0x345>
c00130c8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00130d2:	e9 86 00 00 00       	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c00130d7:	50                   	push   eax
c00130d8:	50                   	push   eax
c00130d9:	68 b9 3e 02 c0       	push   0xc0023eb9
c00130de:	55                   	push   ebp
c00130df:	e8 e8 d6 fe ff       	call   c00007cc <strcmp>
c00130e4:	83 c4 10             	add    esp,0x10
c00130e7:	85 c0                	test   eax,eax
c00130e9:	75 0c                	jne    c00130f7 <CPU::detectFeatures()+0x365>
c00130eb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00130f5:	eb 66                	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c00130f7:	50                   	push   eax
c00130f8:	50                   	push   eax
c00130f9:	68 c6 3e 02 c0       	push   0xc0023ec6
c00130fe:	55                   	push   ebp
c00130ff:	e8 c8 d6 fe ff       	call   c00007cc <strcmp>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	85 c0                	test   eax,eax
c0013109:	75 0c                	jne    c0013117 <CPU::detectFeatures()+0x385>
c001310b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013115:	eb 46                	jmp    c001315d <CPU::detectFeatures()+0x3cb>
c0013117:	57                   	push   edi
c0013118:	57                   	push   edi
c0013119:	68 d3 3e 02 c0       	push   0xc0023ed3
c001311e:	55                   	push   ebp
c001311f:	e8 a8 d6 fe ff       	call   c00007cc <strcmp>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	85 c0                	test   eax,eax
c0013129:	74 e0                	je     c001310b <CPU::detectFeatures()+0x379>
c001312b:	56                   	push   esi
c001312c:	56                   	push   esi
c001312d:	68 e0 3e 02 c0       	push   0xc0023ee0
c0013132:	55                   	push   ebp
c0013133:	e8 94 d6 fe ff       	call   c00007cc <strcmp>
c0013138:	83 c4 10             	add    esp,0x10
c001313b:	85 c0                	test   eax,eax
c001313d:	74 cc                	je     c001310b <CPU::detectFeatures()+0x379>
c001313f:	51                   	push   ecx
c0013140:	51                   	push   ecx
c0013141:	68 ed 3e 02 c0       	push   0xc0023eed
c0013146:	55                   	push   ebp
c0013147:	e8 80 d6 fe ff       	call   c00007cc <strcmp>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	85 c0                	test   eax,eax
c0013151:	74 b8                	je     c001310b <CPU::detectFeatures()+0x379>
c0013153:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001315d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013162:	0f 86 be 00 00 00    	jbe    c0013226 <CPU::detectFeatures()+0x494>
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	68 80 00 00 00       	push   0x80
c0013170:	e8 31 fb ff ff       	call   c0012ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013175:	83 e0 01             	and    eax,0x1
c0013178:	c1 e0 06             	shl    eax,0x6
c001317b:	88 c2                	mov    dl,al
c001317d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013183:	83 e0 bf             	and    eax,0xffffffbf
c0013186:	09 d0                	or     eax,edx
c0013188:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001318e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013195:	e8 0c fb ff ff       	call   c0012ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001319a:	83 e0 01             	and    eax,0x1
c001319d:	c1 e0 04             	shl    eax,0x4
c00131a0:	88 c2                	mov    dl,al
c00131a2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131a8:	83 e0 ef             	and    eax,0xffffffef
c00131ab:	09 d0                	or     eax,edx
c00131ad:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131b3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00131ba:	e8 e7 fa ff ff       	call   c0012ca6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131bf:	c1 e0 07             	shl    eax,0x7
c00131c2:	88 c2                	mov    dl,al
c00131c4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131ca:	83 e0 7f             	and    eax,0x7f
c00131cd:	09 d0                	or     eax,edx
c00131cf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131d5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00131dc:	e8 f3 fa ff ff       	call   c0012cd4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00131e1:	83 e0 01             	and    eax,0x1
c00131e4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00131eb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131f1:	83 e0 f7             	and    eax,0xfffffff7
c00131f4:	09 d0                	or     eax,edx
c00131f6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131fc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013203:	e8 cc fa ff ff       	call   c0012cd4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013208:	83 c4 10             	add    esp,0x10
c001320b:	83 e0 01             	and    eax,0x1
c001320e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013215:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001321b:	83 e0 fb             	and    eax,0xfffffffb
c001321e:	09 d0                	or     eax,edx
c0013220:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	8d 44 24 28          	lea    eax,[esp+0x28]
c001322d:	50                   	push   eax
c001322e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013232:	50                   	push   eax
c0013233:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013237:	56                   	push   esi
c0013238:	8d 44 24 28          	lea    eax,[esp+0x28]
c001323c:	50                   	push   eax
c001323d:	6a 01                	push   0x1
c001323f:	e8 82 f9 ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013244:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013248:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001324e:	88 ca                	mov    dl,cl
c0013250:	83 e0 f0             	and    eax,0xfffffff0
c0013253:	83 e2 0f             	and    edx,0xf
c0013256:	09 d0                	or     eax,edx
c0013258:	88 ca                	mov    dl,cl
c001325a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013260:	c0 ea 04             	shr    dl,0x4
c0013263:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013267:	0f b6 c2             	movzx  eax,dl
c001326a:	83 c4 20             	add    esp,0x20
c001326d:	c1 e0 06             	shl    eax,0x6
c0013270:	89 c7                	mov    edi,eax
c0013272:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013278:	66 25 3f c0          	and    ax,0xc03f
c001327c:	09 f8                	or     eax,edi
c001327e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013285:	89 c8                	mov    eax,ecx
c0013287:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001328e:	c1 e8 08             	shr    eax,0x8
c0013291:	83 e5 3f             	and    ebp,0x3f
c0013294:	83 e0 0f             	and    eax,0xf
c0013297:	89 c7                	mov    edi,eax
c0013299:	c1 e7 06             	shl    edi,0x6
c001329c:	09 ef                	or     edi,ebp
c001329e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00132a5:	89 fa                	mov    edx,edi
c00132a7:	83 e5 c0             	and    ebp,0xffffffc0
c00132aa:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00132b0:	88 c2                	mov    dl,al
c00132b2:	c0 ea 02             	shr    dl,0x2
c00132b5:	89 d7                	mov    edi,edx
c00132b7:	09 ef                	or     edi,ebp
c00132b9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00132bf:	89 fa                	mov    edx,edi
c00132c1:	83 e5 cf             	and    ebp,0xffffffcf
c00132c4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00132ca:	89 cf                	mov    edi,ecx
c00132cc:	c1 ef 0c             	shr    edi,0xc
c00132cf:	83 e7 03             	and    edi,0x3
c00132d2:	c1 e7 04             	shl    edi,0x4
c00132d5:	09 ef                	or     edi,ebp
c00132d7:	3c 06                	cmp    al,0x6
c00132d9:	89 fa                	mov    edx,edi
c00132db:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00132e1:	74 04                	je     c00132e7 <CPU::detectFeatures()+0x555>
c00132e3:	3c 0f                	cmp    al,0xf
c00132e5:	75 5c                	jne    c0013343 <CPU::detectFeatures()+0x5b1>
c00132e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00132eb:	89 cf                	mov    edi,ecx
c00132ed:	c1 ef 10             	shr    edi,0x10
c00132f0:	c1 e7 04             	shl    edi,0x4
c00132f3:	09 fa                	or     edx,edi
c00132f5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00132fb:	0f b6 d2             	movzx  edx,dl
c00132fe:	66 81 e7 3f c0       	and    di,0xc03f
c0013303:	c1 e2 06             	shl    edx,0x6
c0013306:	09 fa                	or     edx,edi
c0013308:	3c 0f                	cmp    al,0xf
c001330a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013311:	75 30                	jne    c0013343 <CPU::detectFeatures()+0x5b1>
c0013313:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013319:	c1 e9 14             	shr    ecx,0x14
c001331c:	83 e0 3f             	and    eax,0x3f
c001331f:	83 c1 0f             	add    ecx,0xf
c0013322:	88 ca                	mov    dl,cl
c0013324:	c0 e9 02             	shr    cl,0x2
c0013327:	c1 e2 06             	shl    edx,0x6
c001332a:	09 d0                	or     eax,edx
c001332c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013332:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013338:	83 e0 c0             	and    eax,0xffffffc0
c001333b:	09 c1                	or     ecx,eax
c001333d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013343:	83 ec 0c             	sub    esp,0xc
c0013346:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001334d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013351:	50                   	push   eax
c0013352:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013356:	55                   	push   ebp
c0013357:	56                   	push   esi
c0013358:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001335c:	57                   	push   edi
c001335d:	68 00 00 00 80       	push   0x80000000
c0013362:	e8 5f f8 ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013367:	83 c4 20             	add    esp,0x20
c001336a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013372:	76 22                	jbe    c0013396 <CPU::detectFeatures()+0x604>
c0013374:	83 ec 0c             	sub    esp,0xc
c0013377:	8d 44 24 28          	lea    eax,[esp+0x28]
c001337b:	50                   	push   eax
c001337c:	55                   	push   ebp
c001337d:	56                   	push   esi
c001337e:	57                   	push   edi
c001337f:	68 01 00 00 80       	push   0x80000001
c0013384:	e8 3d f8 ff ff       	call   c0012bc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013389:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013393:	83 c4 20             	add    esp,0x20
c0013396:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001339c:	83 f8 01             	cmp    eax,0x1
c001339f:	75 6f                	jne    c0013410 <CPU::detectFeatures()+0x67e>
c00133a1:	51                   	push   ecx
c00133a2:	51                   	push   ecx
c00133a3:	68 f9 3e 02 c0       	push   0xc0023ef9
c00133a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133ac:	56                   	push   esi
c00133ad:	e8 8e d3 fe ff       	call   c0000740 <strcpy>
c00133b2:	5f                   	pop    edi
c00133b3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133b9:	5d                   	pop    ebp
c00133ba:	66 c1 e8 06          	shr    ax,0x6
c00133be:	0f b6 c0             	movzx  eax,al
c00133c1:	50                   	push   eax
c00133c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133c8:	c1 e8 0e             	shr    eax,0xe
c00133cb:	0f b6 c0             	movzx  eax,al
c00133ce:	50                   	push   eax
c00133cf:	e8 9c f4 ff ff       	call   c0012870 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00133d4:	5a                   	pop    edx
c00133d5:	59                   	pop    ecx
c00133d6:	50                   	push   eax
c00133d7:	56                   	push   esi
c00133d8:	e8 a3 d4 fe ff       	call   c0000880 <strcat>
c00133dd:	5f                   	pop    edi
c00133de:	5d                   	pop    ebp
c00133df:	56                   	push   esi
c00133e0:	53                   	push   ebx
c00133e1:	e8 7e ac ff ff       	call   c000e064 <Device::setName(char const*)>
c00133e6:	58                   	pop    eax
c00133e7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00133ed:	5a                   	pop    edx
c00133ee:	68 00 3f 02 c0       	push   0xc0023f00
c00133f3:	50                   	push   eax
c00133f4:	e8 d3 d3 fe ff       	call   c00007cc <strcmp>
c00133f9:	83 c4 10             	add    esp,0x10
c00133fc:	85 c0                	test   eax,eax
c00133fe:	0f 85 71 03 00 00    	jne    c0013775 <CPU::detectFeatures()+0x9e3>
c0013404:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001340b:	e9 65 03 00 00       	jmp    c0013775 <CPU::detectFeatures()+0x9e3>
c0013410:	83 f8 02             	cmp    eax,0x2
c0013413:	0f 85 b5 00 00 00    	jne    c00134ce <CPU::detectFeatures()+0x73c>
c0013419:	57                   	push   edi
c001341a:	57                   	push   edi
c001341b:	68 12 3f 02 c0       	push   0xc0023f12
c0013420:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013424:	56                   	push   esi
c0013425:	e8 16 d3 fe ff       	call   c0000740 <strcpy>
c001342a:	5d                   	pop    ebp
c001342b:	58                   	pop    eax
c001342c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013432:	66 c1 e8 06          	shr    ax,0x6
c0013436:	0f b6 c0             	movzx  eax,al
c0013439:	50                   	push   eax
c001343a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013440:	c1 e8 0e             	shr    eax,0xe
c0013443:	0f b6 c0             	movzx  eax,al
c0013446:	50                   	push   eax
c0013447:	e8 90 f2 ff ff       	call   c00126dc <CPU::lookupAMDName(unsigned char, unsigned char)>
c001344c:	5a                   	pop    edx
c001344d:	59                   	pop    ecx
c001344e:	50                   	push   eax
c001344f:	56                   	push   esi
c0013450:	e8 2b d4 fe ff       	call   c0000880 <strcat>
c0013455:	5f                   	pop    edi
c0013456:	5d                   	pop    ebp
c0013457:	56                   	push   esi
c0013458:	53                   	push   ebx
c0013459:	e8 06 ac ff ff       	call   c000e064 <Device::setName(char const*)>
c001345e:	58                   	pop    eax
c001345f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013465:	5a                   	pop    edx
c0013466:	68 17 3f 02 c0       	push   0xc0023f17
c001346b:	50                   	push   eax
c001346c:	e8 5b d3 fe ff       	call   c00007cc <strcmp>
c0013471:	83 c4 10             	add    esp,0x10
c0013474:	85 c0                	test   eax,eax
c0013476:	75 20                	jne    c0013498 <CPU::detectFeatures()+0x706>
c0013478:	8b 15 68 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026368
c001347e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013484:	a8 01                	test   al,0x1
c0013486:	74 10                	je     c0013498 <CPU::detectFeatures()+0x706>
c0013488:	83 e0 fe             	and    eax,0xfffffffe
c001348b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013491:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013498:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001349e:	c1 e8 0e             	shr    eax,0xe
c00134a1:	3c 05                	cmp    al,0x5
c00134a3:	0f 85 cc 02 00 00    	jne    c0013775 <CPU::detectFeatures()+0x9e3>
c00134a9:	56                   	push   esi
c00134aa:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00134b0:	83 e0 0f             	and    eax,0xf
c00134b3:	50                   	push   eax
c00134b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134ba:	66 c1 e8 06          	shr    ax,0x6
c00134be:	0f b6 c0             	movzx  eax,al
c00134c1:	50                   	push   eax
c00134c2:	6a 05                	push   0x5
c00134c4:	e8 89 f6 ff ff       	call   c0012b52 <CPU::AMD_K6_writeback(int, int, int)>
c00134c9:	e9 1f 02 00 00       	jmp    c00136ed <CPU::detectFeatures()+0x95b>
c00134ce:	8d 50 fd             	lea    edx,[eax-0x3]
c00134d1:	83 fa 01             	cmp    edx,0x1
c00134d4:	76 09                	jbe    c00134df <CPU::detectFeatures()+0x74d>
c00134d6:	83 f8 06             	cmp    eax,0x6
c00134d9:	0f 85 91 01 00 00    	jne    c0013670 <CPU::detectFeatures()+0x8de>
c00134df:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00134e5:	c1 ea 0e             	shr    edx,0xe
c00134e8:	80 fa 05             	cmp    dl,0x5
c00134eb:	75 7b                	jne    c0013568 <CPU::detectFeatures()+0x7d6>
c00134ed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00134f3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00134f8:	66 81 fa 00 01       	cmp    dx,0x100
c00134fd:	75 0c                	jne    c001350b <CPU::detectFeatures()+0x779>
c00134ff:	51                   	push   ecx
c0013500:	51                   	push   ecx
c0013501:	68 1e 3f 02 c0       	push   0xc0023f1e
c0013506:	e9 dc 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c001350b:	66 81 fa 00 02       	cmp    dx,0x200
c0013510:	75 0c                	jne    c001351e <CPU::detectFeatures()+0x78c>
c0013512:	52                   	push   edx
c0013513:	52                   	push   edx
c0013514:	68 31 3f 02 c0       	push   0xc0023f31
c0013519:	e9 c9 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c001351e:	66 81 fa 40 02       	cmp    dx,0x240
c0013523:	75 0c                	jne    c0013531 <CPU::detectFeatures()+0x79f>
c0013525:	50                   	push   eax
c0013526:	50                   	push   eax
c0013527:	68 43 3f 02 c0       	push   0xc0023f43
c001352c:	e9 b6 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c0013531:	83 f8 06             	cmp    eax,0x6
c0013534:	75 0c                	jne    c0013542 <CPU::detectFeatures()+0x7b0>
c0013536:	50                   	push   eax
c0013537:	50                   	push   eax
c0013538:	68 55 3f 02 c0       	push   0xc0023f55
c001353d:	e9 a5 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c0013542:	83 f8 04             	cmp    eax,0x4
c0013545:	75 0c                	jne    c0013553 <CPU::detectFeatures()+0x7c1>
c0013547:	50                   	push   eax
c0013548:	50                   	push   eax
c0013549:	68 61 3f 02 c0       	push   0xc0023f61
c001354e:	e9 94 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c0013553:	83 f8 03             	cmp    eax,0x3
c0013556:	0f 85 19 02 00 00    	jne    c0013775 <CPU::detectFeatures()+0x9e3>
c001355c:	50                   	push   eax
c001355d:	50                   	push   eax
c001355e:	68 69 3f 02 c0       	push   0xc0023f69
c0013563:	e9 7f 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c0013568:	80 fa 06             	cmp    dl,0x6
c001356b:	0f 85 db 00 00 00    	jne    c001364c <CPU::detectFeatures()+0x8ba>
c0013571:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013577:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001357c:	66 81 fa 80 01       	cmp    dx,0x180
c0013581:	75 0c                	jne    c001358f <CPU::detectFeatures()+0x7fd>
c0013583:	50                   	push   eax
c0013584:	50                   	push   eax
c0013585:	68 74 3f 02 c0       	push   0xc0023f74
c001358a:	e9 58 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c001358f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013595:	66 f7 c1 80 ff       	test   cx,0xff80
c001359a:	75 0c                	jne    c00135a8 <CPU::detectFeatures()+0x816>
c001359c:	50                   	push   eax
c001359d:	50                   	push   eax
c001359e:	68 84 3f 02 c0       	push   0xc0023f84
c00135a3:	e9 3f 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00135a8:	66 81 fa 40 02       	cmp    dx,0x240
c00135ad:	75 0c                	jne    c00135bb <CPU::detectFeatures()+0x829>
c00135af:	55                   	push   ebp
c00135b0:	55                   	push   ebp
c00135b1:	68 8b 3f 02 c0       	push   0xc0023f8b
c00135b6:	e9 2c 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00135bb:	66 81 fa 80 02       	cmp    dx,0x280
c00135c0:	75 0c                	jne    c00135ce <CPU::detectFeatures()+0x83c>
c00135c2:	57                   	push   edi
c00135c3:	57                   	push   edi
c00135c4:	68 94 3f 02 c0       	push   0xc0023f94
c00135c9:	e9 19 01 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00135ce:	66 81 fa 40 03       	cmp    dx,0x340
c00135d3:	74 ed                	je     c00135c2 <CPU::detectFeatures()+0x830>
c00135d5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00135da:	75 0c                	jne    c00135e8 <CPU::detectFeatures()+0x856>
c00135dc:	56                   	push   esi
c00135dd:	56                   	push   esi
c00135de:	68 9b 3f 02 c0       	push   0xc0023f9b
c00135e3:	e9 ff 00 00 00       	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00135e8:	83 f8 06             	cmp    eax,0x6
c00135eb:	0f 84 45 ff ff ff    	je     c0013536 <CPU::detectFeatures()+0x7a4>
c00135f1:	83 f8 04             	cmp    eax,0x4
c00135f4:	0f 84 4d ff ff ff    	je     c0013547 <CPU::detectFeatures()+0x7b5>
c00135fa:	83 f8 03             	cmp    eax,0x3
c00135fd:	0f 85 72 01 00 00    	jne    c0013775 <CPU::detectFeatures()+0x9e3>
c0013603:	51                   	push   ecx
c0013604:	51                   	push   ecx
c0013605:	68 a4 3f 02 c0       	push   0xc0023fa4
c001360a:	53                   	push   ebx
c001360b:	e8 54 aa ff ff       	call   c000e064 <Device::setName(char const*)>
c0013610:	b1 c1                	mov    cl,0xc1
c0013612:	88 c8                	mov    al,cl
c0013614:	e6 22                	out    0x22,al
c0013616:	e4 23                	in     al,0x23
c0013618:	88 c2                	mov    dl,al
c001361a:	88 c8                	mov    al,cl
c001361c:	e6 22                	out    0x22,al
c001361e:	88 d0                	mov    al,dl
c0013620:	83 c8 10             	or     eax,0x10
c0013623:	e6 23                	out    0x23,al
c0013625:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001362c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001362f:	89 d0                	mov    eax,edx
c0013631:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013637:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001363b:	40                   	inc    eax
c001363c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013642:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013647:	e9 a1 00 00 00       	jmp    c00136ed <CPU::detectFeatures()+0x95b>
c001364c:	83 f8 06             	cmp    eax,0x6
c001364f:	0f 84 e1 fe ff ff    	je     c0013536 <CPU::detectFeatures()+0x7a4>
c0013655:	83 f8 04             	cmp    eax,0x4
c0013658:	0f 84 e9 fe ff ff    	je     c0013547 <CPU::detectFeatures()+0x7b5>
c001365e:	83 f8 03             	cmp    eax,0x3
c0013661:	0f 85 0e 01 00 00    	jne    c0013775 <CPU::detectFeatures()+0x9e3>
c0013667:	52                   	push   edx
c0013668:	52                   	push   edx
c0013669:	68 af 3f 02 c0       	push   0xc0023faf
c001366e:	eb 77                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c0013670:	83 f8 07             	cmp    eax,0x7
c0013673:	75 09                	jne    c001367e <CPU::detectFeatures()+0x8ec>
c0013675:	50                   	push   eax
c0013676:	50                   	push   eax
c0013677:	68 b9 3f 02 c0       	push   0xc0023fb9
c001367c:	eb 69                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c001367e:	83 f8 0a             	cmp    eax,0xa
c0013681:	75 09                	jne    c001368c <CPU::detectFeatures()+0x8fa>
c0013683:	50                   	push   eax
c0013684:	50                   	push   eax
c0013685:	68 c4 3f 02 c0       	push   0xc0023fc4
c001368a:	eb 5b                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c001368c:	83 f8 0b             	cmp    eax,0xb
c001368f:	75 09                	jne    c001369a <CPU::detectFeatures()+0x908>
c0013691:	50                   	push   eax
c0013692:	50                   	push   eax
c0013693:	68 cc 3f 02 c0       	push   0xc0023fcc
c0013698:	eb 4d                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c001369a:	83 f8 08             	cmp    eax,0x8
c001369d:	75 09                	jne    c00136a8 <CPU::detectFeatures()+0x916>
c001369f:	50                   	push   eax
c00136a0:	50                   	push   eax
c00136a1:	68 d5 3f 02 c0       	push   0xc0023fd5
c00136a6:	eb 3f                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00136a8:	83 f8 09             	cmp    eax,0x9
c00136ab:	75 09                	jne    c00136b6 <CPU::detectFeatures()+0x924>
c00136ad:	50                   	push   eax
c00136ae:	50                   	push   eax
c00136af:	68 dd 3f 02 c0       	push   0xc0023fdd
c00136b4:	eb 31                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00136b6:	83 f8 05             	cmp    eax,0x5
c00136b9:	75 09                	jne    c00136c4 <CPU::detectFeatures()+0x932>
c00136bb:	50                   	push   eax
c00136bc:	50                   	push   eax
c00136bd:	68 e5 3f 02 c0       	push   0xc0023fe5
c00136c2:	eb 23                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00136c4:	83 f8 0c             	cmp    eax,0xc
c00136c7:	75 09                	jne    c00136d2 <CPU::detectFeatures()+0x940>
c00136c9:	55                   	push   ebp
c00136ca:	55                   	push   ebp
c00136cb:	68 f3 3f 02 c0       	push   0xc0023ff3
c00136d0:	eb 15                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00136d2:	83 f8 0d             	cmp    eax,0xd
c00136d5:	75 09                	jne    c00136e0 <CPU::detectFeatures()+0x94e>
c00136d7:	57                   	push   edi
c00136d8:	57                   	push   edi
c00136d9:	68 fe 3f 02 c0       	push   0xc0023ffe
c00136de:	eb 07                	jmp    c00136e7 <CPU::detectFeatures()+0x955>
c00136e0:	56                   	push   esi
c00136e1:	56                   	push   esi
c00136e2:	68 12 40 02 c0       	push   0xc0024012
c00136e7:	53                   	push   ebx
c00136e8:	e8 77 a9 ff ff       	call   c000e064 <Device::setName(char const*)>
c00136ed:	83 c4 10             	add    esp,0x10
c00136f0:	e9 80 00 00 00       	jmp    c0013775 <CPU::detectFeatures()+0x9e3>
c00136f5:	51                   	push   ecx
c00136f6:	51                   	push   ecx
c00136f7:	68 5e 3e 02 c0       	push   0xc0023e5e
c00136fc:	55                   	push   ebp
c00136fd:	e8 3e d0 fe ff       	call   c0000740 <strcpy>
c0013702:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001370c:	e8 d2 ca fe ff       	call   c00001e3 <is486>
c0013711:	83 c4 10             	add    esp,0x10
c0013714:	85 c0                	test   eax,eax
c0013716:	74 2b                	je     c0013743 <CPU::detectFeatures()+0x9b1>
c0013718:	52                   	push   edx
c0013719:	52                   	push   edx
c001371a:	68 1e 40 02 c0       	push   0xc002401e
c001371f:	53                   	push   ebx
c0013720:	e8 3f a9 ff ff       	call   c000e064 <Device::setName(char const*)>
c0013725:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001372c:	0f 20 c0             	mov    eax,cr0
c001372f:	83 e0 14             	and    eax,0x14
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	83 f8 04             	cmp    eax,0x4
c0013738:	75 1f                	jne    c0013759 <CPU::detectFeatures()+0x9c7>
c001373a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013741:	eb 32                	jmp    c0013775 <CPU::detectFeatures()+0x9e3>
c0013743:	50                   	push   eax
c0013744:	50                   	push   eax
c0013745:	68 29 40 02 c0       	push   0xc0024029
c001374a:	53                   	push   ebx
c001374b:	e8 14 a9 ff ff       	call   c000e064 <Device::setName(char const*)>
c0013750:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013757:	eb d3                	jmp    c001372c <CPU::detectFeatures()+0x99a>
c0013759:	e8 60 ca fe ff       	call   c00001be <hasLegacyFPU>
c001375e:	83 e0 01             	and    eax,0x1
c0013761:	8d 14 00             	lea    edx,[eax+eax*1]
c0013764:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001376a:	83 e0 fd             	and    eax,0xfffffffd
c001376d:	09 d0                	or     eax,edx
c001376f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013775:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001377c:	83 c4 4c             	add    esp,0x4c
c001377f:	5b                   	pop    ebx
c0013780:	5e                   	pop    esi
c0013781:	5f                   	pop    edi
c0013782:	5d                   	pop    ebp
c0013783:	c3                   	ret    

c0013784 <CPU::setupSMEP()>:
c0013784:	0f 20 e0             	mov    eax,cr4
c0013787:	0d 00 00 10 00       	or     eax,0x100000
c001378c:	0f 22 e0             	mov    cr4,eax
c001378f:	c3                   	ret    

c0013790 <CPU::setupUMIP()>:
c0013790:	0f 20 e0             	mov    eax,cr4
c0013793:	80 cc 08             	or     ah,0x8
c0013796:	0f 22 e0             	mov    cr4,eax
c0013799:	c3                   	ret    

c001379a <CPU::setupTSC()>:
c001379a:	0f 20 e0             	mov    eax,cr4
c001379d:	83 c8 04             	or     eax,0x4
c00137a0:	0f 22 e0             	mov    cr4,eax
c00137a3:	c3                   	ret    

c00137a4 <CPU::setupLargePages()>:
c00137a4:	0f 20 e0             	mov    eax,cr4
c00137a7:	83 c8 10             	or     eax,0x10
c00137aa:	0f 22 e0             	mov    cr4,eax
c00137ad:	c3                   	ret    

c00137ae <CPU::setupPAT()>:
c00137ae:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00137b3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00137ba:	74 2c                	je     c00137e8 <CPU::setupPAT()+0x3a>
c00137bc:	53                   	push   ebx
c00137bd:	83 ec 10             	sub    esp,0x10
c00137c0:	68 77 02 00 00       	push   0x277
c00137c5:	50                   	push   eax
c00137c6:	e8 59 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00137cb:	83 e2 f8             	and    edx,0xfffffff8
c00137ce:	83 ca 01             	or     edx,0x1
c00137d1:	52                   	push   edx
c00137d2:	50                   	push   eax
c00137d3:	68 77 02 00 00       	push   0x277
c00137d8:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c00137de:	e8 6d 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c00137e3:	83 c4 28             	add    esp,0x28
c00137e6:	5b                   	pop    ebx
c00137e7:	c3                   	ret    
c00137e8:	c3                   	ret    
c00137e9:	90                   	nop

c00137ea <CPU::setupMTRR()>:
c00137ea:	c3                   	ret    
c00137eb:	90                   	nop

c00137ec <CPU::setupGlobalPages()>:
c00137ec:	0f 20 e0             	mov    eax,cr4
c00137ef:	0c 80                	or     al,0x80
c00137f1:	0f 22 e0             	mov    cr4,eax
c00137f4:	c3                   	ret    
c00137f5:	90                   	nop

c00137f6 <CPU::allowUsermodeDataAccess()>:
c00137f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137fa:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013801:	74 03                	je     c0013806 <CPU::allowUsermodeDataAccess()+0x10>
c0013803:	0f 01 cb             	stac   
c0013806:	c3                   	ret    
c0013807:	90                   	nop

c0013808 <CPU::prohibitUsermodeDataAccess()>:
c0013808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013813:	74 03                	je     c0013818 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013815:	0f 01 ca             	clac   
c0013818:	c3                   	ret    
c0013819:	90                   	nop

c001381a <CPU::setupSMAP()>:
c001381a:	0f 20 e0             	mov    eax,cr4
c001381d:	0d 00 00 20 00       	or     eax,0x200000
c0013822:	0f 22 e0             	mov    cr4,eax
c0013825:	eb e1                	jmp    c0013808 <CPU::prohibitUsermodeDataAccess()>
c0013827:	90                   	nop

c0013828 <CPU::setupFeatures()>:
c0013828:	83 ec 0c             	sub    esp,0xc
c001382b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001382f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0013836:	74 07                	je     c001383f <CPU::setupFeatures()+0x17>
c0013838:	52                   	push   edx
c0013839:	e8 46 ff ff ff       	call   c0013784 <CPU::setupSMEP()>
c001383e:	58                   	pop    eax
c001383f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0013846:	74 07                	je     c001384f <CPU::setupFeatures()+0x27>
c0013848:	52                   	push   edx
c0013849:	e8 cc ff ff ff       	call   c001381a <CPU::setupSMAP()>
c001384e:	58                   	pop    eax
c001384f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0013856:	74 07                	je     c001385f <CPU::setupFeatures()+0x37>
c0013858:	52                   	push   edx
c0013859:	e8 32 ff ff ff       	call   c0013790 <CPU::setupUMIP()>
c001385e:	58                   	pop    eax
c001385f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0013866:	74 07                	je     c001386f <CPU::setupFeatures()+0x47>
c0013868:	52                   	push   edx
c0013869:	e8 2c ff ff ff       	call   c001379a <CPU::setupTSC()>
c001386e:	58                   	pop    eax
c001386f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0013876:	74 07                	je     c001387f <CPU::setupFeatures()+0x57>
c0013878:	52                   	push   edx
c0013879:	e8 26 ff ff ff       	call   c00137a4 <CPU::setupLargePages()>
c001387e:	59                   	pop    ecx
c001387f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0013886:	74 07                	je     c001388f <CPU::setupFeatures()+0x67>
c0013888:	52                   	push   edx
c0013889:	e8 5e ff ff ff       	call   c00137ec <CPU::setupGlobalPages()>
c001388e:	58                   	pop    eax
c001388f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0013896:	74 0c                	je     c00138a4 <CPU::setupFeatures()+0x7c>
c0013898:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001389c:	83 c4 0c             	add    esp,0xc
c001389f:	e9 0a ff ff ff       	jmp    c00137ae <CPU::setupPAT()>
c00138a4:	83 c4 0c             	add    esp,0xc
c00138a7:	c3                   	ret    

c00138a8 <CPU::open(int, int, void*)>:
c00138a8:	57                   	push   edi
c00138a9:	56                   	push   esi
c00138aa:	53                   	push   ebx
c00138ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138b3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138b9:	83 ec 0c             	sub    esp,0xc
c00138bc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00138c2:	68 34 40 02 c0       	push   0xc0024034
c00138c7:	e8 51 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138cc:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00138d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00138d5:	e8 e2 59 ff ff       	call   c00092bc <GDT::setup()>
c00138da:	c7 04 24 46 40 02 c0 	mov    DWORD PTR [esp],0xc0024046
c00138e1:	e8 37 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138e6:	83 c4 0c             	add    esp,0xc
c00138e9:	6a 00                	push   0x0
c00138eb:	68 ef be ad de       	push   0xdeadbeef
c00138f0:	57                   	push   edi
c00138f1:	e8 de 76 ff ff       	call   c000afd4 <TSS::setup(unsigned long, unsigned long)>
c00138f6:	c7 04 24 58 40 02 c0 	mov    DWORD PTR [esp],0xc0024058
c00138fd:	e8 1b 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013902:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013905:	e8 aa 76 ff ff       	call   c000afb4 <TSS::flush()>
c001390a:	c7 04 24 6c 40 02 c0 	mov    DWORD PTR [esp],0xc002406c
c0013911:	e8 07 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013916:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001391c:	89 04 24             	mov    DWORD PTR [esp],eax
c001391f:	e8 02 5c ff ff       	call   c0009526 <IDT::setup()>
c0013924:	c7 04 24 7e 40 02 c0 	mov    DWORD PTR [esp],0xc002407e
c001392b:	e8 ed 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013930:	b8 00 04 00 00       	mov    eax,0x400
c0013935:	0f 23 f8             	mov    db7,eax
c0013938:	c7 04 24 9c 40 02 c0 	mov    DWORD PTR [esp],0xc002409c
c001393f:	e8 d9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013944:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001394e:	e8 6c 64 ff ff       	call   c0009dbf <Phys::allocatePage()>
c0013953:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013959:	89 30                	mov    DWORD PTR [eax],esi
c001395b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013961:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013964:	c7 04 24 be 40 02 c0 	mov    DWORD PTR [esp],0xc00240be
c001396b:	e8 ad 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013970:	58                   	pop    eax
c0013971:	5a                   	pop    edx
c0013972:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001397c:	e8 4d 86 ff ff       	call   c000bfce <VAS::setCPUSpecific(unsigned long)>
c0013981:	c7 04 24 e6 40 02 c0 	mov    DWORD PTR [esp],0xc00240e6
c0013988:	e8 90 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001398d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013990:	e8 fd f3 ff ff       	call   c0012d92 <CPU::detectFeatures()>
c0013995:	c7 04 24 09 41 02 c0 	mov    DWORD PTR [esp],0xc0024109
c001399c:	e8 7c 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139a1:	e8 cc b8 ff ff       	call   c000f272 <setupInterruptController()>
c00139a6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139ac:	c7 04 24 2d 41 02 c0 	mov    DWORD PTR [esp],0xc002412d
c00139b3:	e8 65 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139b8:	a1 80 63 02 c0       	mov    eax,ds:0xc0026380
c00139bd:	83 e0 10             	and    eax,0x10
c00139c0:	83 f8 01             	cmp    eax,0x1
c00139c3:	19 c0                	sbb    eax,eax
c00139c5:	83 e0 46             	and    eax,0x46
c00139c8:	83 c0 1e             	add    eax,0x1e
c00139cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00139ce:	e8 89 ce ff ff       	call   c001085c <setupTimer(int)>
c00139d3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00139d9:	c7 04 24 48 41 02 c0 	mov    DWORD PTR [esp],0xc0024148
c00139e0:	e8 38 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139e8:	e8 3b fe ff ff       	call   c0013828 <CPU::setupFeatures()>
c00139ed:	c7 04 24 63 41 02 c0 	mov    DWORD PTR [esp],0xc0024163
c00139f4:	e8 24 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139f9:	83 c4 10             	add    esp,0x10
c00139fc:	31 c0                	xor    eax,eax
c00139fe:	5b                   	pop    ebx
c00139ff:	5e                   	pop    esi
c0013a00:	5f                   	pop    edi
c0013a01:	c3                   	ret    

c0013a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a02:	57                   	push   edi
c0013a03:	56                   	push   esi
c0013a04:	53                   	push   ebx
c0013a05:	51                   	push   ecx
c0013a06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a0a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a0d:	0f 02 c0             	lar    eax,ax
c0013a10:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a17:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a1a:	88 ca                	mov    dl,cl
c0013a1c:	c0 ea 06             	shr    dl,0x6
c0013a1f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a23:	89 ca                	mov    edx,ecx
c0013a25:	66 c1 ea 03          	shr    dx,0x3
c0013a29:	83 e2 07             	and    edx,0x7
c0013a2c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a31:	88 17                	mov    BYTE PTR [edi],dl
c0013a33:	0f 84 a6 01 00 00    	je     c0013bdf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a39:	83 e1 07             	and    ecx,0x7
c0013a3c:	80 f9 04             	cmp    cl,0x4
c0013a3f:	0f 84 98 00 00 00    	je     c0013add <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a45:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a4a:	0f 95 c0             	setne  al
c0013a4d:	80 f9 05             	cmp    cl,0x5
c0013a50:	0f 95 c2             	setne  dl
c0013a53:	08 c2                	or     dl,al
c0013a55:	74 79                	je     c0013ad0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a57:	84 c9                	test   cl,cl
c0013a59:	75 05                	jne    c0013a60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a5b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013a5e:	eb 3c                	jmp    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a60:	80 f9 01             	cmp    cl,0x1
c0013a63:	75 05                	jne    c0013a6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013a65:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013a68:	eb 32                	jmp    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a6a:	80 f9 02             	cmp    cl,0x2
c0013a6d:	75 05                	jne    c0013a74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013a6f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013a72:	eb 28                	jmp    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a74:	31 c0                	xor    eax,eax
c0013a76:	80 f9 03             	cmp    cl,0x3
c0013a79:	75 05                	jne    c0013a80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013a7b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013a7e:	eb 1c                	jmp    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a80:	80 f9 05             	cmp    cl,0x5
c0013a83:	75 05                	jne    c0013a8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013a85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013a88:	eb 12                	jmp    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a8a:	80 f9 06             	cmp    cl,0x6
c0013a8d:	75 05                	jne    c0013a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013a8f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013a92:	eb 08                	jmp    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a94:	80 f9 07             	cmp    cl,0x7
c0013a97:	75 03                	jne    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a99:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013a9c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013aa1:	75 10                	jne    c0013ab3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013aa3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013aa7:	b9 03 00 00 00       	mov    ecx,0x3
c0013aac:	01 d0                	add    eax,edx
c0013aae:	e9 37 01 00 00       	jmp    c0013bea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ab3:	b9 02 00 00 00       	mov    ecx,0x2
c0013ab8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013abd:	0f 85 27 01 00 00    	jne    c0013bea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ac3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013ac6:	b9 06 00 00 00       	mov    ecx,0x6
c0013acb:	e9 1a 01 00 00       	jmp    c0013bea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ad0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013ad3:	b9 06 00 00 00       	mov    ecx,0x6
c0013ad8:	e9 0f 01 00 00       	jmp    c0013bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013add:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013ae0:	88 ca                	mov    dl,cl
c0013ae2:	c0 ea 06             	shr    dl,0x6
c0013ae5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013ae9:	89 ca                	mov    edx,ecx
c0013aeb:	66 c1 ea 03          	shr    dx,0x3
c0013aef:	83 e2 07             	and    edx,0x7
c0013af2:	80 e1 07             	and    cl,0x7
c0013af5:	75 05                	jne    c0013afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013af7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013afa:	eb 4c                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013afc:	80 f9 01             	cmp    cl,0x1
c0013aff:	75 05                	jne    c0013b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b01:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b04:	eb 42                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b06:	80 f9 02             	cmp    cl,0x2
c0013b09:	75 05                	jne    c0013b10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b0b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b0e:	eb 38                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b10:	80 f9 03             	cmp    cl,0x3
c0013b13:	75 05                	jne    c0013b1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b15:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b18:	eb 2e                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b1a:	80 f9 04             	cmp    cl,0x4
c0013b1d:	75 12                	jne    c0013b31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b1f:	f6 c4 60             	test   ah,0x60
c0013b22:	75 08                	jne    c0013b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b24:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b27:	8d 78 14             	lea    edi,[eax+0x14]
c0013b2a:	eb 1c                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b2c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b2f:	eb 17                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b31:	80 f9 05             	cmp    cl,0x5
c0013b34:	75 05                	jne    c0013b3b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b36:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b39:	eb 0d                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b3b:	80 f9 06             	cmp    cl,0x6
c0013b3e:	75 05                	jne    c0013b45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b40:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b43:	eb 03                	jmp    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b45:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b48:	84 d2                	test   dl,dl
c0013b4a:	75 05                	jne    c0013b51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b4c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b4f:	eb 3c                	jmp    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b51:	80 fa 01             	cmp    dl,0x1
c0013b54:	75 05                	jne    c0013b5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b56:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b59:	eb 32                	jmp    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b5b:	80 fa 02             	cmp    dl,0x2
c0013b5e:	75 05                	jne    c0013b65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013b60:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b63:	eb 28                	jmp    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b65:	80 fa 03             	cmp    dl,0x3
c0013b68:	75 05                	jne    c0013b6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013b6a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b6d:	eb 1e                	jmp    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b6f:	31 c0                	xor    eax,eax
c0013b71:	80 fa 04             	cmp    dl,0x4
c0013b74:	74 17                	je     c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b76:	80 fa 05             	cmp    dl,0x5
c0013b79:	75 05                	jne    c0013b80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013b7b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b7e:	eb 0d                	jmp    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b80:	80 fa 06             	cmp    dl,0x6
c0013b83:	75 05                	jne    c0013b8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013b85:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b88:	eb 03                	jmp    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b8a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b8d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013b92:	0f 94 c2             	sete   dl
c0013b95:	80 f9 05             	cmp    cl,0x5
c0013b98:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013b9c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013ba1:	d3 e0                	shl    eax,cl
c0013ba3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013ba7:	74 0a                	je     c0013bb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013ba9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bac:	b9 07 00 00 00       	mov    ecx,0x7
c0013bb1:	eb 37                	jmp    c0013bea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bb3:	01 f8                	add    eax,edi
c0013bb5:	b9 03 00 00 00       	mov    ecx,0x3
c0013bba:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bbf:	74 2b                	je     c0013bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bc1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013bc6:	75 0d                	jne    c0013bd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013bc8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013bcc:	01 c8                	add    eax,ecx
c0013bce:	b9 04 00 00 00       	mov    ecx,0x4
c0013bd3:	eb 17                	jmp    c0013bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bd5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bd8:	b9 07 00 00 00       	mov    ecx,0x7
c0013bdd:	eb 0d                	jmp    c0013bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bdf:	b9 02 00 00 00       	mov    ecx,0x2
c0013be4:	b2 01                	mov    dl,0x1
c0013be6:	31 c0                	xor    eax,eax
c0013be8:	eb 02                	jmp    c0013bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bea:	31 d2                	xor    edx,edx
c0013bec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bf0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013bf2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013bf6:	88 11                	mov    BYTE PTR [ecx],dl
c0013bf8:	5a                   	pop    edx
c0013bf9:	5b                   	pop    ebx
c0013bfa:	5e                   	pop    esi
c0013bfb:	5f                   	pop    edi
c0013bfc:	c3                   	ret    

c0013bfd <Krnl::smpEntry()>:
c0013bfd:	eb fe                	jmp    c0013bfd <Krnl::smpEntry()>

c0013bff <Krnl::startCPU(int)>:
c0013bff:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0013c04:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c0b:	0f 84 36 01 00 00    	je     c0013d47 <Krnl::startCPU(int)+0x148>
c0013c11:	53                   	push   ebx
c0013c12:	83 ec 10             	sub    esp,0x10
c0013c15:	fa                   	cli    
c0013c16:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0013c1c:	6a 1b                	push   0x1b
c0013c1e:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c0013c24:	e8 fb 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c2e:	89 c3                	mov    ebx,eax
c0013c30:	58                   	pop    eax
c0013c31:	5a                   	pop    edx
c0013c32:	53                   	push   ebx
c0013c33:	68 ac 41 02 c0       	push   0xc00241ac
c0013c38:	e8 eb 8d ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0013c3d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c4b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c55:	c1 e0 18             	shl    eax,0x18
c0013c58:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013c5e:	83 c4 10             	add    esp,0x10
c0013c61:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013c67:	09 c2                	or     edx,eax
c0013c69:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013c6f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013c75:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013c7b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013c81:	80 cd c5             	or     ch,0xc5
c0013c84:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013c8a:	f3 90                	pause  
c0013c8c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c8e:	0f ba e1 0c          	bt     ecx,0xc
c0013c92:	72 f6                	jb     c0013c8a <Krnl::startCPU(int)+0x8b>
c0013c94:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013c9a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013ca0:	09 c1                	or     ecx,eax
c0013ca2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013ca8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cae:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cb4:	80 cd 85             	or     ch,0x85
c0013cb7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cbd:	f3 90                	pause  
c0013cbf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cc1:	0f ba e1 0c          	bt     ecx,0xc
c0013cc5:	72 f6                	jb     c0013cbd <Krnl::startCPU(int)+0xbe>
c0013cc7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013cd1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cd7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cdd:	09 c1                	or     ecx,eax
c0013cdf:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013ce5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013ceb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013cf1:	81 c9 02 06 00 00    	or     ecx,0x602
c0013cf7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cfd:	f3 90                	pause  
c0013cff:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d01:	0f ba e1 0c          	bt     ecx,0xc
c0013d05:	72 f6                	jb     c0013cfd <Krnl::startCPU(int)+0xfe>
c0013d07:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d11:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d17:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d1d:	09 c8                	or     eax,ecx
c0013d1f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d25:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d2b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d30:	0d 02 06 00 00       	or     eax,0x602
c0013d35:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d3b:	f3 90                	pause  
c0013d3d:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d3f:	0f ba e0 0c          	bt     eax,0xc
c0013d43:	72 f6                	jb     c0013d3b <Krnl::startCPU(int)+0x13c>
c0013d45:	eb fe                	jmp    c0013d45 <Krnl::startCPU(int)+0x146>
c0013d47:	c3                   	ret    

c0013d48 <Krnl::startCPUs()>:
c0013d48:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0013d4d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d53:	88 c2                	mov    dl,al
c0013d55:	83 e2 0a             	and    edx,0xa
c0013d58:	80 fa 0a             	cmp    dl,0xa
c0013d5b:	75 09                	jne    c0013d66 <Krnl::startCPUs()+0x1e>
c0013d5d:	a8 01                	test   al,0x1
c0013d5f:	74 05                	je     c0013d66 <Krnl::startCPUs()+0x1e>
c0013d61:	e9 35 c4 fe ff       	jmp    c000019b <prepareTramp>
c0013d66:	c3                   	ret    
c0013d67:	90                   	nop

c0013d68 <EnvVarContainer::getEnv(char const*)>:
c0013d68:	57                   	push   edi
c0013d69:	56                   	push   esi
c0013d6a:	53                   	push   ebx
c0013d6b:	31 db                	xor    ebx,ebx
c0013d6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d71:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013d73:	7e 2b                	jle    c0013da0 <EnvVarContainer::getEnv(char const*)+0x38>
c0013d75:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013d7c:	50                   	push   eax
c0013d7d:	50                   	push   eax
c0013d7e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d81:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013d84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d88:	e8 3f ca fe ff       	call   c00007cc <strcmp>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	85 c0                	test   eax,eax
c0013d92:	75 09                	jne    c0013d9d <EnvVarContainer::getEnv(char const*)+0x35>
c0013d94:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d97:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013d9b:	eb 05                	jmp    c0013da2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013d9d:	43                   	inc    ebx
c0013d9e:	eb d1                	jmp    c0013d71 <EnvVarContainer::getEnv(char const*)+0x9>
c0013da0:	31 c0                	xor    eax,eax
c0013da2:	5b                   	pop    ebx
c0013da3:	5e                   	pop    esi
c0013da4:	5f                   	pop    edi
c0013da5:	c3                   	ret    

c0013da6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013da6:	55                   	push   ebp
c0013da7:	57                   	push   edi
c0013da8:	56                   	push   esi
c0013da9:	53                   	push   ebx
c0013daa:	83 ec 28             	sub    esp,0x28
c0013dad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013db1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013db5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013db9:	56                   	push   esi
c0013dba:	e8 e1 c8 fe ff       	call   c00006a0 <strlen>
c0013dbf:	40                   	inc    eax
c0013dc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013dc3:	e8 fb 5b ff ff       	call   c00099c3 <malloc>
c0013dc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013dcf:	e8 cc c8 fe ff       	call   c00006a0 <strlen>
c0013dd4:	40                   	inc    eax
c0013dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0013dd8:	e8 e6 5b ff ff       	call   c00099c3 <malloc>
c0013ddd:	89 34 24             	mov    DWORD PTR [esp],esi
c0013de0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013de4:	e8 b7 c8 fe ff       	call   c00006a0 <strlen>
c0013de9:	83 c4 0c             	add    esp,0xc
c0013dec:	40                   	inc    eax
c0013ded:	50                   	push   eax
c0013dee:	6a 00                	push   0x0
c0013df0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013df4:	e8 8b c8 fe ff       	call   c0000684 <memset>
c0013df9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013dfc:	e8 9f c8 fe ff       	call   c00006a0 <strlen>
c0013e01:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e05:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e0d:	89 de                	mov    esi,ebx
c0013e0f:	e8 8c c8 fe ff       	call   c00006a0 <strlen>
c0013e14:	83 c4 0c             	add    esp,0xc
c0013e17:	40                   	inc    eax
c0013e18:	50                   	push   eax
c0013e19:	6a 00                	push   0x0
c0013e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e1f:	e8 60 c8 fe ff       	call   c0000684 <memset>
c0013e24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e27:	e8 74 c8 fe ff       	call   c00006a0 <strlen>
c0013e2c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e30:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e38:	40                   	inc    eax
c0013e39:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e3c:	c1 e0 03             	shl    eax,0x3
c0013e3f:	5a                   	pop    edx
c0013e40:	59                   	pop    ecx
c0013e41:	50                   	push   eax
c0013e42:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e45:	e8 65 5b ff ff       	call   c00099af <realloc>
c0013e4a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e4e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e51:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e54:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e58:	b9 08 00 00 00       	mov    ecx,0x8
c0013e5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e5f:	83 c4 2c             	add    esp,0x2c
c0013e62:	5b                   	pop    ebx
c0013e63:	5e                   	pop    esi
c0013e64:	5f                   	pop    edi
c0013e65:	5d                   	pop    ebp
c0013e66:	c3                   	ret    
c0013e67:	90                   	nop

c0013e68 <EnvVarContainer::deleteEnv(char const*)>:
c0013e68:	c3                   	ret    
c0013e69:	90                   	nop

c0013e6a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013e6a:	55                   	push   ebp
c0013e6b:	57                   	push   edi
c0013e6c:	56                   	push   esi
c0013e6d:	53                   	push   ebx
c0013e6e:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e74:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013e7b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013e82:	68 14 01 00 00       	push   0x114
c0013e87:	e8 37 5b ff ff       	call   c00099c3 <malloc>
c0013e8c:	83 c4 0c             	add    esp,0xc
c0013e8f:	89 c3                	mov    ebx,eax
c0013e91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013e94:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013e9b:	50                   	push   eax
c0013e9c:	e8 f1 90 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0013ea1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea4:	e8 bb 93 ff ff       	call   c000d264 <File::exists()>
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	84 c0                	test   al,al
c0013eae:	75 31                	jne    c0013ee1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013eb0:	50                   	push   eax
c0013eb1:	50                   	push   eax
c0013eb2:	6a 12                	push   0x12
c0013eb4:	53                   	push   ebx
c0013eb5:	e8 3c 91 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0013eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ebc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013ebf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ec2:	e8 d9 c7 fe ff       	call   c00006a0 <strlen>
c0013ec7:	5a                   	pop    edx
c0013ec8:	31 d2                	xor    edx,edx
c0013eca:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013ece:	51                   	push   ecx
c0013ecf:	56                   	push   esi
c0013ed0:	52                   	push   edx
c0013ed1:	50                   	push   eax
c0013ed2:	53                   	push   ebx
c0013ed3:	ff d7                	call   edi
c0013ed5:	83 c4 14             	add    esp,0x14
c0013ed8:	53                   	push   ebx
c0013ed9:	e8 76 91 ff ff       	call   c000d054 <File::close()>
c0013ede:	83 c4 10             	add    esp,0x10
c0013ee1:	56                   	push   esi
c0013ee2:	31 f6                	xor    esi,esi
c0013ee4:	68 00 01 00 00       	push   0x100
c0013ee9:	6a 00                	push   0x0
c0013eeb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013eef:	50                   	push   eax
c0013ef0:	e8 8f c7 fe ff       	call   c0000684 <memset>
c0013ef5:	5f                   	pop    edi
c0013ef6:	58                   	pop    eax
c0013ef7:	6a 01                	push   0x1
c0013ef9:	53                   	push   ebx
c0013efa:	e8 f7 90 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f0a:	83 ec 0c             	sub    esp,0xc
c0013f0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f0f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f13:	51                   	push   ecx
c0013f14:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f18:	52                   	push   edx
c0013f19:	6a 00                	push   0x0
c0013f1b:	6a 01                	push   0x1
c0013f1d:	53                   	push   ebx
c0013f1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f21:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f25:	83 c4 20             	add    esp,0x20
c0013f28:	3c 0d                	cmp    al,0xd
c0013f2a:	0f 84 09 01 00 00    	je     c0014039 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f35:	0f 84 ef 00 00 00    	je     c001402a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f3b:	3c 0a                	cmp    al,0xa
c0013f3d:	74 13                	je     c0013f52 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f44:	74 0c                	je     c0013f52 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f46:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f4c:	0f 8e d8 00 00 00    	jle    c001402a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f56:	83 ec 0c             	sub    esp,0xc
c0013f59:	8d 78 01             	lea    edi,[eax+0x1]
c0013f5c:	57                   	push   edi
c0013f5d:	e8 61 5a ff ff       	call   c00099c3 <malloc>
c0013f62:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013f66:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013f6a:	8d 56 04             	lea    edx,[esi+0x4]
c0013f6d:	89 14 24             	mov    DWORD PTR [esp],edx
c0013f70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013f74:	e8 4a 5a ff ff       	call   c00099c3 <malloc>
c0013f79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013f7d:	83 c4 0c             	add    esp,0xc
c0013f80:	57                   	push   edi
c0013f81:	6a 00                	push   0x0
c0013f83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013f87:	e8 f8 c6 fe ff       	call   c0000684 <memset>
c0013f8c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013f90:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013f94:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013f98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f9a:	83 c4 0c             	add    esp,0xc
c0013f9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fa1:	52                   	push   edx
c0013fa2:	6a 00                	push   0x0
c0013fa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fa8:	e8 d7 c6 fe ff       	call   c0000684 <memset>
c0013fad:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fb5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013fb8:	e8 e3 c6 fe ff       	call   c00006a0 <strlen>
c0013fbd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013fc1:	89 c1                	mov    ecx,eax
c0013fc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fc8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013fcb:	40                   	inc    eax
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013fd2:	85 d2                	test   edx,edx
c0013fd4:	75 0c                	jne    c0013fe2 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013fd6:	83 ec 0c             	sub    esp,0xc
c0013fd9:	6a 08                	push   0x8
c0013fdb:	e8 e3 59 ff ff       	call   c00099c3 <malloc>
c0013fe0:	eb 0c                	jmp    c0013fee <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0013fe2:	c1 e0 03             	shl    eax,0x3
c0013fe5:	51                   	push   ecx
c0013fe6:	51                   	push   ecx
c0013fe7:	50                   	push   eax
c0013fe8:	52                   	push   edx
c0013fe9:	e8 c1 59 ff ff       	call   c00099af <realloc>
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013ff4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013ff7:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013ffa:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013ffe:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014002:	b9 08 00 00 00       	mov    ecx,0x8
c0014007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014009:	31 f6                	xor    esi,esi
c001400b:	50                   	push   eax
c001400c:	68 00 01 00 00       	push   0x100
c0014011:	6a 00                	push   0x0
c0014013:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014017:	50                   	push   eax
c0014018:	e8 67 c6 fe ff       	call   c0000684 <memset>
c001401d:	83 c4 10             	add    esp,0x10
c0014020:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014028:	eb 0f                	jmp    c0014039 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001402a:	3c 3d                	cmp    al,0x3d
c001402c:	74 07                	je     c0014035 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001402e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014032:	46                   	inc    esi
c0014033:	eb 04                	jmp    c0014039 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014035:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014039:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001403e:	0f 85 c6 fe ff ff    	jne    c0013f0a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014044:	81 c4 2c 01 00 00    	add    esp,0x12c
c001404a:	5b                   	pop    ebx
c001404b:	5e                   	pop    esi
c001404c:	5f                   	pop    edi
c001404d:	5d                   	pop    ebp
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <EnvVarContainer::__loadSystem()>:
c0014050:	83 ec 10             	sub    esp,0x10
c0014053:	68 40 5d 02 c0       	push   0xc0025d40
c0014058:	68 bd 41 02 c0       	push   0xc00241bd
c001405d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014061:	e8 04 fe ff ff       	call   c0013e6a <EnvVarContainer::loadFrom(char const*, char const*)>
c0014066:	83 c4 1c             	add    esp,0x1c
c0014069:	c3                   	ret    

c001406a <EnvVarContainer::__loadUser()>:
c001406a:	c3                   	ret    
c001406b:	90                   	nop

c001406c <EnvVarContainer::EnvVarContainer(Process*)>:
c001406c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014070:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001407a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001407e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014085:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001408c:	90                   	nop
c001408d:	c3                   	ret    

c001408e <EnvVarContainer::~EnvVarContainer()>:
c001408e:	83 ec 0c             	sub    esp,0xc
c0014091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014095:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014098:	85 c0                	test   eax,eax
c001409a:	74 1d                	je     c00140b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001409c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00140a2:	85 c0                	test   eax,eax
c00140a4:	74 13                	je     c00140b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	50                   	push   eax
c00140b1:	e8 1d 59 ff ff       	call   c00099d3 <free>
c00140b6:	83 c4 10             	add    esp,0x10
c00140b9:	90                   	nop
c00140ba:	83 c4 0c             	add    esp,0xc
c00140bd:	c3                   	ret    

c00140be <Krnl::getEnv(Process*, char const*)>:
c00140be:	53                   	push   ebx
c00140bf:	83 ec 08             	sub    esp,0x8
c00140c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140ca:	39 05 90 78 02 c0    	cmp    DWORD PTR ds:0xc0027890,eax
c00140d0:	74 04                	je     c00140d6 <Krnl::getEnv(Process*, char const*)+0x18>
c00140d2:	85 c0                	test   eax,eax
c00140d4:	75 0b                	jne    c00140e1 <Krnl::getEnv(Process*, char const*)+0x23>
c00140d6:	a1 74 6e 02 c0       	mov    eax,ds:0xc0026e74
c00140db:	85 c0                	test   eax,eax
c00140dd:	75 19                	jne    c00140f8 <Krnl::getEnv(Process*, char const*)+0x3a>
c00140df:	eb 27                	jmp    c0014108 <Krnl::getEnv(Process*, char const*)+0x4a>
c00140e1:	52                   	push   edx
c00140e2:	52                   	push   edx
c00140e3:	53                   	push   ebx
c00140e4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00140ea:	e8 79 fc ff ff       	call   c0013d68 <EnvVarContainer::getEnv(char const*)>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	85 c0                	test   eax,eax
c00140f4:	75 28                	jne    c001411e <Krnl::getEnv(Process*, char const*)+0x60>
c00140f6:	eb de                	jmp    c00140d6 <Krnl::getEnv(Process*, char const*)+0x18>
c00140f8:	52                   	push   edx
c00140f9:	52                   	push   edx
c00140fa:	53                   	push   ebx
c00140fb:	50                   	push   eax
c00140fc:	e8 67 fc ff ff       	call   c0013d68 <EnvVarContainer::getEnv(char const*)>
c0014101:	83 c4 10             	add    esp,0x10
c0014104:	85 c0                	test   eax,eax
c0014106:	75 16                	jne    c001411e <Krnl::getEnv(Process*, char const*)+0x60>
c0014108:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001410c:	a1 78 6e 02 c0       	mov    eax,ds:0xc0026e78
c0014111:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014115:	83 c4 08             	add    esp,0x8
c0014118:	5b                   	pop    ebx
c0014119:	e9 4a fc ff ff       	jmp    c0013d68 <EnvVarContainer::getEnv(char const*)>
c001411e:	83 c4 08             	add    esp,0x8
c0014121:	5b                   	pop    ebx
c0014122:	c3                   	ret    

c0014123 <Krnl::setEnvSystem(char const*, char const*)>:
c0014123:	83 ec 10             	sub    esp,0x10
c0014126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001412a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001412e:	ff 35 78 6e 02 c0    	push   DWORD PTR ds:0xc0026e78
c0014134:	e8 6d fc ff ff       	call   c0013da6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014139:	83 c4 1c             	add    esp,0x1c
c001413c:	c3                   	ret    

c001413d <Krnl::setEnvUser(char const*, char const*)>:
c001413d:	a1 74 6e 02 c0       	mov    eax,ds:0xc0026e74
c0014142:	85 c0                	test   eax,eax
c0014144:	74 15                	je     c001415b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014146:	83 ec 10             	sub    esp,0x10
c0014149:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001414d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014151:	50                   	push   eax
c0014152:	e8 4f fc ff ff       	call   c0013da6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014157:	83 c4 1c             	add    esp,0x1c
c001415a:	c3                   	ret    
c001415b:	c3                   	ret    

c001415c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001415c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014160:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014166:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001416a:	e9 37 fc ff ff       	jmp    c0013da6 <EnvVarContainer::setEnv(char const*, char const*)>

c001416f <Krnl::deleteEnvSystem(char const*)>:
c001416f:	c3                   	ret    

c0014170 <Krnl::deleteEnvUser(char const*)>:
c0014170:	c3                   	ret    

c0014171 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014171:	c3                   	ret    

c0014172 <Krnl::newProcessEnv(Process*)>:
c0014172:	83 ec 28             	sub    esp,0x28
c0014175:	6a 0c                	push   0xc
c0014177:	e8 47 58 ff ff       	call   c00099c3 <malloc>
c001417c:	5a                   	pop    edx
c001417d:	59                   	pop    ecx
c001417e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014182:	50                   	push   eax
c0014183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014187:	e8 e0 fe ff ff       	call   c001406c <EnvVarContainer::EnvVarContainer(Process*)>
c001418c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014190:	83 c4 2c             	add    esp,0x2c
c0014193:	c3                   	ret    

c0014194 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014194:	57                   	push   edi
c0014195:	56                   	push   esi
c0014196:	53                   	push   ebx
c0014197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419b:	83 ec 0c             	sub    esp,0xc
c001419e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141a4:	6a 0c                	push   0xc
c00141a6:	e8 18 58 ff ff       	call   c00099c3 <malloc>
c00141ab:	89 c3                	mov    ebx,eax
c00141ad:	58                   	pop    eax
c00141ae:	5a                   	pop    edx
c00141af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b3:	53                   	push   ebx
c00141b4:	e8 b3 fe ff ff       	call   c001406c <EnvVarContainer::EnvVarContainer(Process*)>
c00141b9:	8b 07                	mov    eax,DWORD PTR [edi]
c00141bb:	89 03                	mov    DWORD PTR [ebx],eax
c00141bd:	c1 e0 03             	shl    eax,0x3
c00141c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00141c3:	e8 fb 57 ff ff       	call   c00099c3 <malloc>
c00141c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141cb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00141cd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00141d0:	c1 e1 03             	shl    ecx,0x3
c00141d3:	89 c7                	mov    edi,eax
c00141d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	89 d8                	mov    eax,ebx
c00141dc:	5b                   	pop    ebx
c00141dd:	5e                   	pop    esi
c00141de:	5f                   	pop    edi
c00141df:	c3                   	ret    

c00141e0 <Krnl::loadSystemEnv()>:
c00141e0:	53                   	push   ebx
c00141e1:	83 ec 14             	sub    esp,0x14
c00141e4:	6a 0c                	push   0xc
c00141e6:	e8 d8 57 ff ff       	call   c00099c3 <malloc>
c00141eb:	89 c3                	mov    ebx,eax
c00141ed:	58                   	pop    eax
c00141ee:	5a                   	pop    edx
c00141ef:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c00141f5:	53                   	push   ebx
c00141f6:	e8 71 fe ff ff       	call   c001406c <EnvVarContainer::EnvVarContainer(Process*)>
c00141fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141fe:	89 1d 78 6e 02 c0    	mov    DWORD PTR ds:0xc0026e78,ebx
c0014204:	e8 47 fe ff ff       	call   c0014050 <EnvVarContainer::__loadSystem()>
c0014209:	83 c4 18             	add    esp,0x18
c001420c:	5b                   	pop    ebx
c001420d:	c3                   	ret    

c001420e <Krnl::loadUserEnv()>:
c001420e:	53                   	push   ebx
c001420f:	83 ec 14             	sub    esp,0x14
c0014212:	6a 0c                	push   0xc
c0014214:	e8 aa 57 ff ff       	call   c00099c3 <malloc>
c0014219:	89 c3                	mov    ebx,eax
c001421b:	58                   	pop    eax
c001421c:	5a                   	pop    edx
c001421d:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0014223:	53                   	push   ebx
c0014224:	e8 43 fe ff ff       	call   c001406c <EnvVarContainer::EnvVarContainer(Process*)>
c0014229:	89 1d 74 6e 02 c0    	mov    DWORD PTR ds:0xc0026e74,ebx
c001422f:	83 c4 18             	add    esp,0x18
c0014232:	5b                   	pop    ebx
c0014233:	c3                   	ret    

c0014234 <Krnl::flushEnv()>:
c0014234:	c3                   	ret    

c0014235 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014235:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014239:	8b 15 74 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026e74
c001423f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014245:	a1 78 6e 02 c0       	mov    eax,ds:0xc0026e78
c001424a:	8b 00                	mov    eax,DWORD PTR [eax]
c001424c:	03 01                	add    eax,DWORD PTR [ecx]
c001424e:	85 d2                	test   edx,edx
c0014250:	74 02                	je     c0014254 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014252:	03 02                	add    eax,DWORD PTR [edx]
c0014254:	c3                   	ret    

c0014255 <Krnl::getProcessEnvPair(Process*, int)>:
c0014255:	57                   	push   edi
c0014256:	56                   	push   esi
c0014257:	8b 35 74 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026e74
c001425d:	53                   	push   ebx
c001425e:	85 f6                	test   esi,esi
c0014260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014264:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014268:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001426e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014272:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014274:	75 16                	jne    c001428c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014276:	39 c2                	cmp    edx,eax
c0014278:	7c 16                	jl     c0014290 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001427a:	8b 0d 78 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026e78
c0014280:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014282:	01 c6                	add    esi,eax
c0014284:	39 d6                	cmp    esi,edx
c0014286:	7e 3c                	jle    c00142c4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014288:	29 c2                	sub    edx,eax
c001428a:	eb 04                	jmp    c0014290 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001428c:	39 c2                	cmp    edx,eax
c001428e:	7d 05                	jge    c0014295 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014290:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014293:	eb 20                	jmp    c00142b5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014295:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014297:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001429a:	39 d1                	cmp    ecx,edx
c001429c:	7e 04                	jle    c00142a2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001429e:	29 c2                	sub    edx,eax
c00142a0:	eb 10                	jmp    c00142b2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142a2:	8b 35 78 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026e78
c00142a8:	03 0e                	add    ecx,DWORD PTR [esi]
c00142aa:	39 d1                	cmp    ecx,edx
c00142ac:	7e 16                	jle    c00142c4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142ae:	29 c2                	sub    edx,eax
c00142b0:	29 fa                	sub    edx,edi
c00142b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142b5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142b8:	8b 02                	mov    eax,DWORD PTR [edx]
c00142ba:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00142bd:	89 03                	mov    DWORD PTR [ebx],eax
c00142bf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00142c2:	eb 1d                	jmp    c00142e1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00142c4:	83 ec 0c             	sub    esp,0xc
c00142c7:	68 df 41 02 c0       	push   0xc00241df
c00142cc:	e8 18 00 00 00       	call   c00142e9 <Krnl::panic(char const*)>
c00142d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00142d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00142de:	83 c4 10             	add    esp,0x10
c00142e1:	89 d8                	mov    eax,ebx
c00142e3:	5b                   	pop    ebx
c00142e4:	5e                   	pop    esi
c00142e5:	5f                   	pop    edi
c00142e6:	c2 04 00             	ret    0x4

c00142e9 <Krnl::panic(char const*)>:
c00142e9:	55                   	push   ebp
c00142ea:	89 e5                	mov    ebp,esp
c00142ec:	53                   	push   ebx
c00142ed:	83 ec 10             	sub    esp,0x10
c00142f0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00142f3:	fa                   	cli    
c00142f4:	c6 05 84 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026e84,0x1
c00142fb:	53                   	push   ebx
c00142fc:	e8 1c 57 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014301:	58                   	pop    eax
c0014302:	c6 05 40 57 02 c0 00 	mov    BYTE PTR ds:0xc0025740,0x0
c0014309:	5a                   	pop    edx
c001430a:	53                   	push   ebx
c001430b:	68 f9 41 02 c0       	push   0xc00241f9
c0014310:	e8 13 87 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0014315:	59                   	pop    ecx
c0014316:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001431b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014321:	e8 57 64 ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c0014326:	83 c4 0c             	add    esp,0xc
c0014329:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001432e:	6a 01                	push   0x1
c0014330:	6a 0f                	push   0xf
c0014332:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014338:	e8 9f 62 ff ff       	call   c000a5dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001433d:	58                   	pop    eax
c001433e:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014343:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014349:	e8 b0 67 ff ff       	call   c000aafe <VgaText::clearScreen()>
c001434e:	58                   	pop    eax
c001434f:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014354:	5a                   	pop    edx
c0014355:	68 12 42 02 c0       	push   0xc0024212
c001435a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014360:	e8 25 69 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014365:	59                   	pop    ecx
c0014366:	58                   	pop    eax
c0014367:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001436c:	68 b8 42 02 c0       	push   0xc00242b8
c0014371:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014377:	e8 0e 69 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001437c:	58                   	pop    eax
c001437d:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014382:	5a                   	pop    edx
c0014383:	68 2e 42 02 c0       	push   0xc002422e
c0014388:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001438e:	e8 f7 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014393:	59                   	pop    ecx
c0014394:	58                   	pop    eax
c0014395:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001439a:	53                   	push   ebx
c001439b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143a1:	e8 e4 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00143a6:	58                   	pop    eax
c00143a7:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00143ac:	5a                   	pop    edx
c00143ad:	68 4e 42 02 c0       	push   0xc002424e
c00143b2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143b8:	e8 cd 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00143bd:	a1 80 6e 02 c0       	mov    eax,ds:0xc0026e80
c00143c2:	83 c4 10             	add    esp,0x10
c00143c5:	85 c0                	test   eax,eax
c00143c7:	74 02                	je     c00143cb <Krnl::panic(char const*)+0xe2>
c00143c9:	ff d0                	call   eax
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143d1:	e8 af 30 00 00       	call   c0017485 <Thr::getDriverNameFromAddress(unsigned long)>
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	89 c3                	mov    ebx,eax
c00143db:	85 c0                	test   eax,eax
c00143dd:	0f 84 4e 02 00 00    	je     c0014631 <Krnl::panic(char const*)+0x348>
c00143e3:	83 ec 08             	sub    esp,0x8
c00143e6:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00143eb:	68 f4 42 02 c0       	push   0xc00242f4
c00143f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143f6:	e8 8f 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00143fb:	58                   	pop    eax
c00143fc:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014401:	5a                   	pop    edx
c0014402:	68 2e 42 02 c0       	push   0xc002422e
c0014407:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001440d:	e8 78 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014412:	59                   	pop    ecx
c0014413:	58                   	pop    eax
c0014414:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014419:	53                   	push   ebx
c001441a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014420:	e8 65 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014425:	83 c4 10             	add    esp,0x10
c0014428:	83 ec 08             	sub    esp,0x8
c001442b:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014430:	68 4d 42 02 c0       	push   0xc002424d
c0014435:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001443b:	e8 4a 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014440:	58                   	pop    eax
c0014441:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014446:	5a                   	pop    edx
c0014447:	68 4c 43 02 c0       	push   0xc002434c
c001444c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014452:	e8 33 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014457:	59                   	pop    ecx
c0014458:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001445d:	5b                   	pop    ebx
c001445e:	68 8c 43 02 c0       	push   0xc002438c
c0014463:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014469:	e8 1c 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001446e:	58                   	pop    eax
c001446f:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014474:	5a                   	pop    edx
c0014475:	68 39 42 02 c0       	push   0xc0024239
c001447a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014480:	e8 05 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014485:	59                   	pop    ecx
c0014486:	5b                   	pop    ebx
c0014487:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001448a:	68 51 42 02 c0       	push   0xc0024251
c001448f:	e8 94 85 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0014494:	58                   	pop    eax
c0014495:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014498:	5a                   	pop    edx
c0014499:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001449c:	68 5a 42 02 c0       	push   0xc002425a
c00144a1:	e8 82 85 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00144a6:	59                   	pop    ecx
c00144a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144aa:	5b                   	pop    ebx
c00144ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00144ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144b0:	68 63 42 02 c0       	push   0xc0024263
c00144b5:	e8 6e 85 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00144ba:	58                   	pop    eax
c00144bb:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00144c0:	5a                   	pop    edx
c00144c1:	68 d0 43 02 c0       	push   0xc00243d0
c00144c6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144cc:	e8 b9 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00144d1:	59                   	pop    ecx
c00144d2:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00144d7:	5b                   	pop    ebx
c00144d8:	68 6c 42 02 c0       	push   0xc002426c
c00144dd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144e3:	e8 a2 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00144e8:	0f 20 c0             	mov    eax,cr0
c00144eb:	5a                   	pop    edx
c00144ec:	59                   	pop    ecx
c00144ed:	50                   	push   eax
c00144ee:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00144f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144f9:	e8 46 67 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c00144fe:	5b                   	pop    ebx
c00144ff:	58                   	pop    eax
c0014500:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014505:	68 76 42 02 c0       	push   0xc0024276
c001450a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014510:	e8 75 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014515:	0f 20 d0             	mov    eax,cr2
c0014518:	5a                   	pop    edx
c0014519:	59                   	pop    ecx
c001451a:	50                   	push   eax
c001451b:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014520:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014526:	e8 19 67 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c001452b:	5b                   	pop    ebx
c001452c:	58                   	pop    eax
c001452d:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014532:	68 80 42 02 c0       	push   0xc0024280
c0014537:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001453d:	e8 48 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014542:	0f 20 d8             	mov    eax,cr3
c0014545:	5a                   	pop    edx
c0014546:	59                   	pop    ecx
c0014547:	50                   	push   eax
c0014548:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001454d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014553:	e8 ec 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c0014558:	5b                   	pop    ebx
c0014559:	58                   	pop    eax
c001455a:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001455f:	68 93 42 02 c0       	push   0xc0024293
c0014564:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001456a:	e8 1b 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001456f:	0f 20 e0             	mov    eax,cr4
c0014572:	5a                   	pop    edx
c0014573:	59                   	pop    ecx
c0014574:	50                   	push   eax
c0014575:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001457a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014580:	e8 bf 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c0014585:	5b                   	pop    ebx
c0014586:	58                   	pop    eax
c0014587:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001458c:	68 9d 42 02 c0       	push   0xc002429d
c0014591:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014597:	e8 ee 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001459c:	5a                   	pop    edx
c001459d:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00145a2:	59                   	pop    ecx
c00145a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145ac:	50                   	push   eax
c00145ad:	e8 92 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c00145b2:	5b                   	pop    ebx
c00145b3:	58                   	pop    eax
c00145b4:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00145b9:	68 b4 42 02 c0       	push   0xc00242b4
c00145be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145c4:	e8 c1 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00145c9:	5a                   	pop    edx
c00145ca:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00145cf:	59                   	pop    ecx
c00145d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145d6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145d9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00145dc:	50                   	push   eax
c00145dd:	e8 62 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c00145e2:	5b                   	pop    ebx
c00145e3:	58                   	pop    eax
c00145e4:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00145e9:	68 b4 42 02 c0       	push   0xc00242b4
c00145ee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145f4:	e8 91 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00145f9:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c00145fe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014601:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014607:	8b 12                	mov    edx,DWORD PTR [edx]
c0014609:	59                   	pop    ecx
c001460a:	5b                   	pop    ebx
c001460b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001460e:	50                   	push   eax
c001460f:	e8 30 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c0014614:	83 c4 10             	add    esp,0x10
c0014617:	b2 fe                	mov    dl,0xfe
c0014619:	e4 60                	in     al,0x60
c001461b:	3c 1c                	cmp    al,0x1c
c001461d:	74 04                	je     c0014623 <Krnl::panic(char const*)+0x33a>
c001461f:	3c 5a                	cmp    al,0x5a
c0014621:	75 f6                	jne    c0014619 <Krnl::panic(char const*)+0x330>
c0014623:	e4 64                	in     al,0x64
c0014625:	a8 02                	test   al,0x2
c0014627:	75 fa                	jne    c0014623 <Krnl::panic(char const*)+0x33a>
c0014629:	88 d0                	mov    al,dl
c001462b:	e6 64                	out    0x64,al
c001462d:	fa                   	cli    
c001462e:	f4                   	hlt    
c001462f:	eb e8                	jmp    c0014619 <Krnl::panic(char const*)+0x330>
c0014631:	50                   	push   eax
c0014632:	50                   	push   eax
c0014633:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014638:	68 20 43 02 c0       	push   0xc0024320
c001463d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014643:	e8 42 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014648:	58                   	pop    eax
c0014649:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001464e:	5a                   	pop    edx
c001464f:	68 2e 42 02 c0       	push   0xc002422e
c0014654:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001465a:	e8 2b 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001465f:	59                   	pop    ecx
c0014660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014665:	5b                   	pop    ebx
c0014666:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014669:	83 c0 0c             	add    eax,0xc
c001466c:	50                   	push   eax
c001466d:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0014672:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014678:	e8 0d 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	e9 a3 fd ff ff       	jmp    c0014428 <Krnl::panic(char const*)+0x13f>
c0014685:	66 90                	xchg   ax,ax
c0014687:	90                   	nop

c0014688 <Net::switchEndian16(unsigned short)>:
c0014688:	83 ec 04             	sub    esp,0x4
c001468b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001468f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014693:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014697:	c1 f8 08             	sar    eax,0x8
c001469a:	89 c2                	mov    edx,eax
c001469c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146a0:	c1 e0 08             	shl    eax,0x8
c00146a3:	09 d0                	or     eax,edx
c00146a5:	83 c4 04             	add    esp,0x4
c00146a8:	c3                   	ret    
c00146a9:	8d 76 00             	lea    esi,[esi+0x0]

c00146ac <Net::switchEndian32(unsigned int)>:
c00146ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146b0:	c1 e8 18             	shr    eax,0x18
c00146b3:	89 c2                	mov    edx,eax
c00146b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146b9:	c1 e0 08             	shl    eax,0x8
c00146bc:	25 00 00 ff 00       	and    eax,0xff0000
c00146c1:	09 c2                	or     edx,eax
c00146c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146c7:	c1 e8 08             	shr    eax,0x8
c00146ca:	25 00 ff 00 00       	and    eax,0xff00
c00146cf:	09 c2                	or     edx,eax
c00146d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d5:	c1 e0 18             	shl    eax,0x18
c00146d8:	09 d0                	or     eax,edx
c00146da:	c3                   	ret    
c00146db:	90                   	nop

c00146dc <Net::crc32Calc(unsigned char*, int)>:
c00146dc:	83 ec 10             	sub    esp,0x10
c00146df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00146e4:	75 0a                	jne    c00146f0 <Net::crc32Calc(unsigned char*, int)+0x14>
c00146e6:	b8 00 00 00 00       	mov    eax,0x0
c00146eb:	e9 8c 00 00 00       	jmp    c001477c <Net::crc32Calc(unsigned char*, int)+0xa0>
c00146f0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00146f5:	7f 09                	jg     c0014700 <Net::crc32Calc(unsigned char*, int)+0x24>
c00146f7:	b8 00 00 00 00       	mov    eax,0x0
c00146fc:	eb 7e                	jmp    c001477c <Net::crc32Calc(unsigned char*, int)+0xa0>
c00146fe:	66 90                	xchg   ax,ax
c0014700:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014708:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014714:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014718:	7d 5a                	jge    c0014774 <Net::crc32Calc(unsigned char*, int)+0x98>
c001471a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001471e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014722:	01 d0                	add    eax,edx
c0014724:	8a 00                	mov    al,BYTE PTR [eax]
c0014726:	0f b6 c0             	movzx  eax,al
c0014729:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001472d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014735:	8d 76 00             	lea    esi,[esi+0x0]
c0014738:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001473d:	7f 2d                	jg     c001476c <Net::crc32Calc(unsigned char*, int)+0x90>
c001473f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014743:	83 e0 01             	and    eax,0x1
c0014746:	74 10                	je     c0014758 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474c:	d1 e8                	shr    eax,1
c001474e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014753:	eb 0b                	jmp    c0014760 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001475c:	d1 e8                	shr    eax,1
c001475e:	66 90                	xchg   ax,ax
c0014760:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014764:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014768:	eb ce                	jmp    c0014738 <Net::crc32Calc(unsigned char*, int)+0x5c>
c001476a:	66 90                	xchg   ax,ax
c001476c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014770:	eb 9e                	jmp    c0014710 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014772:	66 90                	xchg   ax,ax
c0014774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014778:	f7 d0                	not    eax
c001477a:	66 90                	xchg   ax,ax
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	c3                   	ret    

c0014780 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014780:	57                   	push   edi
c0014781:	56                   	push   esi
c0014782:	53                   	push   ebx
c0014783:	83 ec 60             	sub    esp,0x60
c0014786:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001478d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014791:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014799:	8d 76 00             	lea    esi,[esi+0x0]
c001479c:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147a1:	7f 1d                	jg     c00147c0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147a3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147aa:	8d 50 01             	lea    edx,[eax+0x1]
c00147ad:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147b4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147b7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147bb:	eb df                	jmp    c001479c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00147bd:	8d 76 00             	lea    esi,[esi+0x0]
c00147c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147c7:	8d 50 01             	lea    edx,[eax+0x1]
c00147ca:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147d1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00147d4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147df:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c00147e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147e7:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c00147ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014803:	89 c6                	mov    esi,eax
c0014805:	89 d7                	mov    edi,edx
c0014807:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014809:	89 c8                	mov    eax,ecx
c001480b:	89 fa                	mov    edx,edi
c001480d:	89 f3                	mov    ebx,esi
c001480f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014813:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014817:	89 04 24             	mov    DWORD PTR [esp],eax
c001481a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014822:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014829:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001482d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014831:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014835:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001483d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014841:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014849:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001484d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014851:	89 c6                	mov    esi,eax
c0014853:	89 d7                	mov    edi,edx
c0014855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014857:	89 c8                	mov    eax,ecx
c0014859:	89 fa                	mov    edx,edi
c001485b:	89 f3                	mov    ebx,esi
c001485d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014861:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014865:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014869:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014871:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014878:	0f b7 c0             	movzx  eax,ax
c001487b:	c1 f8 08             	sar    eax,0x8
c001487e:	89 c1                	mov    ecx,eax
c0014880:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014887:	8d 50 01             	lea    edx,[eax+0x1]
c001488a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014891:	88 ca                	mov    dl,cl
c0014893:	88 10                	mov    BYTE PTR [eax],dl
c0014895:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001489c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00148a6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148ad:	88 10                	mov    BYTE PTR [eax],dl
c00148af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148b3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148b7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00148be:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00148c2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00148c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00148ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00148ce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00148d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00148d6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00148da:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00148de:	89 c6                	mov    esi,eax
c00148e0:	89 d7                	mov    edi,edx
c00148e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148e4:	89 c8                	mov    eax,ecx
c00148e6:	89 fa                	mov    edx,edi
c00148e8:	89 f3                	mov    ebx,esi
c00148ea:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00148ee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00148f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00148f6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148fa:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014901:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014908:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001490c:	50                   	push   eax
c001490d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014911:	e8 c6 fd ff ff       	call   c00146dc <Net::crc32Calc(unsigned char*, int)>
c0014916:	83 c4 08             	add    esp,0x8
c0014919:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001491d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014921:	c1 e8 18             	shr    eax,0x18
c0014924:	89 c1                	mov    ecx,eax
c0014926:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001492d:	8d 50 01             	lea    edx,[eax+0x1]
c0014930:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014937:	88 ca                	mov    dl,cl
c0014939:	88 10                	mov    BYTE PTR [eax],dl
c001493b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001493f:	c1 e8 10             	shr    eax,0x10
c0014942:	89 c1                	mov    ecx,eax
c0014944:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001494b:	8d 50 01             	lea    edx,[eax+0x1]
c001494e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014955:	88 ca                	mov    dl,cl
c0014957:	88 10                	mov    BYTE PTR [eax],dl
c0014959:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001495d:	c1 e8 08             	shr    eax,0x8
c0014960:	89 c1                	mov    ecx,eax
c0014962:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014969:	8d 50 01             	lea    edx,[eax+0x1]
c001496c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014973:	88 ca                	mov    dl,cl
c0014975:	88 10                	mov    BYTE PTR [eax],dl
c0014977:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001497e:	8d 50 01             	lea    edx,[eax+0x1]
c0014981:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014988:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001498c:	88 10                	mov    BYTE PTR [eax],dl
c001498e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014992:	83 c4 60             	add    esp,0x60
c0014995:	5b                   	pop    ebx
c0014996:	5e                   	pop    esi
c0014997:	5f                   	pop    edi
c0014998:	c3                   	ret    
c0014999:	8d 76 00             	lea    esi,[esi+0x0]

c001499c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001499c:	57                   	push   edi
c001499d:	56                   	push   esi
c001499e:	53                   	push   ebx
c001499f:	83 ec 70             	sub    esp,0x70
c00149a2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149a9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149ad:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149b5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00149bc:	83 c0 0e             	add    eax,0xe
c00149bf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149c3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149ce:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00149d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00149e6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00149ea:	89 c6                	mov    esi,eax
c00149ec:	89 d7                	mov    edi,edx
c00149ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149f0:	89 c8                	mov    eax,ecx
c00149f2:	89 fa                	mov    edx,edi
c00149f4:	89 f3                	mov    ebx,esi
c00149f6:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00149fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00149fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a02:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a11:	83 c0 08             	add    eax,0x8
c0014a14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a1f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a23:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a2b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a2f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a33:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a37:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a3b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a3f:	89 c6                	mov    esi,eax
c0014a41:	89 d7                	mov    edi,edx
c0014a43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a45:	89 c8                	mov    eax,ecx
c0014a47:	89 fa                	mov    edx,edi
c0014a49:	89 f3                	mov    ebx,esi
c0014a4b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a4f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a57:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a5f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a66:	8d 50 01             	lea    edx,[eax+0x1]
c0014a69:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014a70:	8a 00                	mov    al,BYTE PTR [eax]
c0014a72:	0f b6 c0             	movzx  eax,al
c0014a75:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014a7a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a81:	8d 50 01             	lea    edx,[eax+0x1]
c0014a84:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014a8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8d:	0f b6 c0             	movzx  eax,al
c0014a90:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014a95:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014a9a:	c1 e0 08             	shl    eax,0x8
c0014a9d:	89 c2                	mov    edx,eax
c0014a9f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014aa3:	09 d0                	or     eax,edx
c0014aa5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014aac:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014ab0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014ab8:	75 46                	jne    c0014b00 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014aba:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ac1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ac4:	66 3d dc 05          	cmp    ax,0x5dc
c0014ac8:	77 16                	ja     c0014ae0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014aca:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ad1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ad4:	0f b7 c0             	movzx  eax,ax
c0014ad7:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014ade:	eb 20                	jmp    c0014b00 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	68 f8 43 02 c0       	push   0xc00243f8
c0014ae8:	e8 3b 7f ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0014aed:	83 c4 10             	add    esp,0x10
c0014af0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014af7:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014afb:	e9 18 01 00 00       	jmp    c0014c18 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b00:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b07:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b0e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b14:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b1b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b37:	89 c6                	mov    esi,eax
c0014b39:	89 d7                	mov    edi,edx
c0014b3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b3d:	89 c8                	mov    eax,ecx
c0014b3f:	89 fa                	mov    edx,edi
c0014b41:	89 f3                	mov    ebx,esi
c0014b43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b4e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b55:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014b5c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b63:	8d 50 01             	lea    edx,[eax+0x1]
c0014b66:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6f:	0f b6 c0             	movzx  eax,al
c0014b72:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014b76:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b80:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b87:	8a 00                	mov    al,BYTE PTR [eax]
c0014b89:	0f b6 c0             	movzx  eax,al
c0014b8c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014b90:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b97:	8d 50 01             	lea    edx,[eax+0x1]
c0014b9a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba3:	0f b6 c0             	movzx  eax,al
c0014ba6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014baa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bb1:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bbb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bbd:	0f b6 c0             	movzx  eax,al
c0014bc0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014bc4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014bc8:	c1 e0 18             	shl    eax,0x18
c0014bcb:	89 c2                	mov    edx,eax
c0014bcd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014bd1:	c1 e0 10             	shl    eax,0x10
c0014bd4:	09 c2                	or     edx,eax
c0014bd6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014bda:	c1 e0 08             	shl    eax,0x8
c0014bdd:	09 d0                	or     eax,edx
c0014bdf:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014be3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014be7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bee:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014bf2:	83 e8 04             	sub    eax,0x4
c0014bf5:	83 ec 08             	sub    esp,0x8
c0014bf8:	50                   	push   eax
c0014bf9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bfd:	e8 da fa ff ff       	call   c00146dc <Net::crc32Calc(unsigned char*, int)>
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c09:	0f 94 c2             	sete   dl
c0014c0c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c13:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c16:	90                   	nop
c0014c17:	90                   	nop
c0014c18:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c1f:	83 c4 70             	add    esp,0x70
c0014c22:	5b                   	pop    ebx
c0014c23:	5e                   	pop    esi
c0014c24:	5f                   	pop    edi
c0014c25:	c2 04 00             	ret    0x4

c0014c28 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c28:	55                   	push   ebp
c0014c29:	57                   	push   edi
c0014c2a:	56                   	push   esi
c0014c2b:	53                   	push   ebx
c0014c2c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c32:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c39:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c3b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c3e:	80 fb 40             	cmp    bl,0x40
c0014c41:	75 1b                	jne    c0014c5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c43:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c45:	84 d2                	test   dl,dl
c0014c47:	0f 84 f1 00 00 00    	je     c0014d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c4d:	8d 46 01             	lea    eax,[esi+0x1]
c0014c50:	80 fa 3a             	cmp    dl,0x3a
c0014c53:	74 04                	je     c0014c59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c55:	89 c6                	mov    esi,eax
c0014c57:	eb ea                	jmp    c0014c43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c59:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014c5c:	89 c6                	mov    esi,eax
c0014c5e:	50                   	push   eax
c0014c5f:	6a 40                	push   0x40
c0014c61:	6a 00                	push   0x0
c0014c63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014c67:	50                   	push   eax
c0014c68:	e8 17 ba fe ff       	call   c0000684 <memset>
c0014c6d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014c74:	31 c0                	xor    eax,eax
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014c7b:	84 c9                	test   cl,cl
c0014c7d:	0f 84 bb 00 00 00    	je     c0014d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c83:	3d c7 00 00 00       	cmp    eax,0xc7
c0014c88:	0f 8f b0 00 00 00    	jg     c0014d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c8e:	80 f9 0a             	cmp    cl,0xa
c0014c91:	0f 85 98 00 00 00    	jne    c0014d2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014c97:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014c9c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014ca0:	a8 df                	test   al,0xdf
c0014ca2:	0f 94 c1             	sete   cl
c0014ca5:	3c 23                	cmp    al,0x23
c0014ca7:	0f 94 c2             	sete   dl
c0014caa:	08 d1                	or     cl,dl
c0014cac:	75 4a                	jne    c0014cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cae:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cb1:	80 fa 01             	cmp    dl,0x1
c0014cb4:	76 42                	jbe    c0014cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cb6:	3c 5b                	cmp    al,0x5b
c0014cb8:	75 42                	jne    c0014cfc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cba:	80 fb 40             	cmp    bl,0x40
c0014cbd:	75 39                	jne    c0014cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cbf:	83 ec 0c             	sub    esp,0xc
c0014cc2:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014cc6:	52                   	push   edx
c0014cc7:	e8 d4 b9 fe ff       	call   c00006a0 <strlen>
c0014ccc:	83 c4 10             	add    esp,0x10
c0014ccf:	83 f8 3f             	cmp    eax,0x3f
c0014cd2:	77 6a                	ja     c0014d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cd4:	50                   	push   eax
c0014cd5:	50                   	push   eax
c0014cd6:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014cda:	52                   	push   edx
c0014cdb:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014cdf:	52                   	push   edx
c0014ce0:	e8 5b ba fe ff       	call   c0000740 <strcpy>
c0014ce5:	58                   	pop    eax
c0014ce6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014cea:	52                   	push   edx
c0014ceb:	e8 b0 b9 fe ff       	call   c00006a0 <strlen>
c0014cf0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	31 d2                	xor    edx,edx
c0014cfa:	eb 3a                	jmp    c0014d36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014cfc:	80 fb 40             	cmp    bl,0x40
c0014cff:	74 06                	je     c0014d07 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d01:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d05:	eb 20                	jmp    c0014d27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d07:	50                   	push   eax
c0014d08:	50                   	push   eax
c0014d09:	55                   	push   ebp
c0014d0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d0e:	50                   	push   eax
c0014d0f:	e8 b8 ba fe ff       	call   c00007cc <strcmp>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	85 c0                	test   eax,eax
c0014d19:	75 dd                	jne    c0014cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d1b:	eb e4                	jmp    c0014d01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d1d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d20:	80 f9 3d             	cmp    cl,0x3d
c0014d23:	74 1d                	je     c0014d42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d25:	89 d0                	mov    eax,edx
c0014d27:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d29:	84 c9                	test   cl,cl
c0014d2b:	75 f0                	jne    c0014d1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d2d:	eb 0f                	jmp    c0014d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d32:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d36:	47                   	inc    edi
c0014d37:	89 d0                	mov    eax,edx
c0014d39:	e9 3b ff ff ff       	jmp    c0014c79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d3e:	31 c0                	xor    eax,eax
c0014d40:	eb 33                	jmp    c0014d75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d46:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d49:	50                   	push   eax
c0014d4a:	50                   	push   eax
c0014d4b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d4f:	50                   	push   eax
c0014d50:	56                   	push   esi
c0014d51:	e8 76 ba fe ff       	call   c00007cc <strcmp>
c0014d56:	83 c4 10             	add    esp,0x10
c0014d59:	85 c0                	test   eax,eax
c0014d5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d5f:	75 97                	jne    c0014cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d61:	51                   	push   ecx
c0014d62:	51                   	push   ecx
c0014d63:	52                   	push   edx
c0014d64:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014d6b:	e8 d0 b9 fe ff       	call   c0000740 <strcpy>
c0014d70:	83 c4 10             	add    esp,0x10
c0014d73:	b0 01                	mov    al,0x1
c0014d75:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d7b:	5b                   	pop    ebx
c0014d7c:	5e                   	pop    esi
c0014d7d:	5f                   	pop    edi
c0014d7e:	5d                   	pop    ebp
c0014d7f:	c3                   	ret    

c0014d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014d80:	57                   	push   edi
c0014d81:	56                   	push   esi
c0014d82:	53                   	push   ebx
c0014d83:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014d89:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014d90:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014d97:	53                   	push   ebx
c0014d98:	e8 03 b9 fe ff       	call   c00006a0 <strlen>
c0014d9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014da0:	89 c7                	mov    edi,eax
c0014da2:	e8 f9 b8 fe ff       	call   c00006a0 <strlen>
c0014da7:	83 c4 10             	add    esp,0x10
c0014daa:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dae:	3d ff 00 00 00       	cmp    eax,0xff
c0014db3:	0f 87 d3 00 00 00    	ja     c0014e8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014db9:	57                   	push   edi
c0014dba:	57                   	push   edi
c0014dbb:	56                   	push   esi
c0014dbc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014dc0:	56                   	push   esi
c0014dc1:	e8 7a b9 fe ff       	call   c0000740 <strcpy>
c0014dc6:	58                   	pop    eax
c0014dc7:	5a                   	pop    edx
c0014dc8:	68 9a 47 02 c0       	push   0xc002479a
c0014dcd:	56                   	push   esi
c0014dce:	e8 ad ba fe ff       	call   c0000880 <strcat>
c0014dd3:	59                   	pop    ecx
c0014dd4:	5f                   	pop    edi
c0014dd5:	53                   	push   ebx
c0014dd6:	56                   	push   esi
c0014dd7:	e8 a4 ba fe ff       	call   c0000880 <strcat>
c0014ddc:	58                   	pop    eax
c0014ddd:	5a                   	pop    edx
c0014dde:	68 44 44 02 c0       	push   0xc0024444
c0014de3:	56                   	push   esi
c0014de4:	e8 97 ba fe ff       	call   c0000880 <strcat>
c0014de9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014df0:	e8 ce 4b ff ff       	call   c00099c3 <malloc>
c0014df5:	83 c4 0c             	add    esp,0xc
c0014df8:	89 c3                	mov    ebx,eax
c0014dfa:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0014e00:	56                   	push   esi
c0014e01:	50                   	push   eax
c0014e02:	e8 8b 81 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0014e07:	83 c4 10             	add    esp,0x10
c0014e0a:	85 db                	test   ebx,ebx
c0014e0c:	74 7e                	je     c0014e8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e0e:	51                   	push   ecx
c0014e0f:	51                   	push   ecx
c0014e10:	6a 01                	push   0x1
c0014e12:	53                   	push   ebx
c0014e13:	e8 de 81 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0014e18:	83 c4 10             	add    esp,0x10
c0014e1b:	85 c0                	test   eax,eax
c0014e1d:	74 08                	je     c0014e27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e1f:	83 ec 0c             	sub    esp,0xc
c0014e22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e24:	53                   	push   ebx
c0014e25:	eb 5f                	jmp    c0014e86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e27:	52                   	push   edx
c0014e28:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e2c:	50                   	push   eax
c0014e2d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e31:	50                   	push   eax
c0014e32:	53                   	push   ebx
c0014e33:	e8 6a 84 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0014e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	89 c1                	mov    ecx,eax
c0014e41:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e45:	74 31                	je     c0014e78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e47:	83 ec 0c             	sub    esp,0xc
c0014e4a:	50                   	push   eax
c0014e4b:	e8 73 4b ff ff       	call   c00099c3 <malloc>
c0014e50:	89 c6                	mov    esi,eax
c0014e52:	58                   	pop    eax
c0014e53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e55:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e59:	52                   	push   edx
c0014e5a:	56                   	push   esi
c0014e5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e63:	53                   	push   ebx
c0014e64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e67:	83 c4 20             	add    esp,0x20
c0014e6a:	85 c0                	test   eax,eax
c0014e6c:	75 0a                	jne    c0014e78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e72:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014e76:	74 18                	je     c0014e90 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014e78:	83 ec 0c             	sub    esp,0xc
c0014e7b:	53                   	push   ebx
c0014e7c:	e8 d3 81 ff ff       	call   c000d054 <File::close()>
c0014e81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e89:	83 c4 10             	add    esp,0x10
c0014e8c:	31 c0                	xor    eax,eax
c0014e8e:	eb 3b                	jmp    c0014ecb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014e90:	83 ec 0c             	sub    esp,0xc
c0014e93:	53                   	push   ebx
c0014e94:	e8 bb 81 ff ff       	call   c000d054 <File::close()>
c0014e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ea1:	83 c4 0c             	add    esp,0xc
c0014ea4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014eab:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014eb2:	56                   	push   esi
c0014eb3:	e8 70 fd ff ff       	call   c0014c28 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014eb8:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ebb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014ebf:	e8 0f 4b ff ff       	call   c00099d3 <free>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ecb:	81 c4 20 01 00 00    	add    esp,0x120
c0014ed1:	5b                   	pop    ebx
c0014ed2:	5e                   	pop    esi
c0014ed3:	5f                   	pop    edi
c0014ed4:	c3                   	ret    

c0014ed5 <Reg::getLine(char*, char*, char*)>:
c0014ed5:	57                   	push   edi
c0014ed6:	56                   	push   esi
c0014ed7:	53                   	push   ebx
c0014ed8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014edc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ee0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014ee4:	57                   	push   edi
c0014ee5:	56                   	push   esi
c0014ee6:	53                   	push   ebx
c0014ee7:	68 49 44 02 c0       	push   0xc0024449
c0014eec:	e8 8f fe ff ff       	call   c0014d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014ef1:	83 c4 10             	add    esp,0x10
c0014ef4:	84 c0                	test   al,al
c0014ef6:	75 10                	jne    c0014f08 <Reg::getLine(char*, char*, char*)+0x33>
c0014ef8:	57                   	push   edi
c0014ef9:	56                   	push   esi
c0014efa:	53                   	push   ebx
c0014efb:	68 6e 44 02 c0       	push   0xc002446e
c0014f00:	e8 7b fe ff ff       	call   c0014d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f05:	83 c4 10             	add    esp,0x10
c0014f08:	5b                   	pop    ebx
c0014f09:	5e                   	pop    esi
c0014f0a:	5f                   	pop    edi
c0014f0b:	c3                   	ret    

c0014f0c <Reg::readInt(char*, char*, int*)>:
c0014f0c:	55                   	push   ebp
c0014f0d:	57                   	push   edi
c0014f0e:	56                   	push   esi
c0014f0f:	53                   	push   ebx
c0014f10:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f16:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f1a:	57                   	push   edi
c0014f1b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f22:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f29:	e8 a7 ff ff ff       	call   c0014ed5 <Reg::getLine(char*, char*, char*)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	84 c0                	test   al,al
c0014f33:	0f 84 b3 00 00 00    	je     c0014fec <Reg::readInt(char*, char*, int*)+0xe0>
c0014f39:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f3d:	80 fa 2b             	cmp    dl,0x2b
c0014f40:	74 0c                	je     c0014f4e <Reg::readInt(char*, char*, int*)+0x42>
c0014f42:	80 fa 2d             	cmp    dl,0x2d
c0014f45:	75 0e                	jne    c0014f55 <Reg::readInt(char*, char*, int*)+0x49>
c0014f47:	ba 01 00 00 00       	mov    edx,0x1
c0014f4c:	eb 0b                	jmp    c0014f59 <Reg::readInt(char*, char*, int*)+0x4d>
c0014f4e:	ba 01 00 00 00       	mov    edx,0x1
c0014f53:	eb 02                	jmp    c0014f57 <Reg::readInt(char*, char*, int*)+0x4b>
c0014f55:	31 d2                	xor    edx,edx
c0014f57:	31 c0                	xor    eax,eax
c0014f59:	be 0a 00 00 00       	mov    esi,0xa
c0014f5e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014f63:	75 20                	jne    c0014f85 <Reg::readInt(char*, char*, int*)+0x79>
c0014f65:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014f69:	80 f9 78             	cmp    cl,0x78
c0014f6c:	75 0a                	jne    c0014f78 <Reg::readInt(char*, char*, int*)+0x6c>
c0014f6e:	83 c2 02             	add    edx,0x2
c0014f71:	be 10 00 00 00       	mov    esi,0x10
c0014f76:	eb 0d                	jmp    c0014f85 <Reg::readInt(char*, char*, int*)+0x79>
c0014f78:	80 f9 62             	cmp    cl,0x62
c0014f7b:	75 08                	jne    c0014f85 <Reg::readInt(char*, char*, int*)+0x79>
c0014f7d:	83 c2 02             	add    edx,0x2
c0014f80:	be 02 00 00 00       	mov    esi,0x2
c0014f85:	01 d7                	add    edi,edx
c0014f87:	31 d2                	xor    edx,edx
c0014f89:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014f8b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014f8f:	80 fb 0d             	cmp    bl,0xd
c0014f92:	0f 94 c3             	sete   bl
c0014f95:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014f9a:	0f 94 c1             	sete   cl
c0014f9d:	08 cb                	or     bl,cl
c0014f9f:	75 3a                	jne    c0014fdb <Reg::readInt(char*, char*, int*)+0xcf>
c0014fa1:	0f af d6             	imul   edx,esi
c0014fa4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fa9:	83 fe 10             	cmp    esi,0x10
c0014fac:	75 26                	jne    c0014fd4 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fae:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fb2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014fb5:	89 e9                	mov    ecx,ebp
c0014fb7:	80 f9 05             	cmp    cl,0x5
c0014fba:	77 06                	ja     c0014fc2 <Reg::readInt(char*, char*, int*)+0xb6>
c0014fbc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014fc0:	eb 16                	jmp    c0014fd8 <Reg::readInt(char*, char*, int*)+0xcc>
c0014fc2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fc6:	83 e9 61             	sub    ecx,0x61
c0014fc9:	80 f9 05             	cmp    cl,0x5
c0014fcc:	77 06                	ja     c0014fd4 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fce:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0014fd2:	eb 04                	jmp    c0014fd8 <Reg::readInt(char*, char*, int*)+0xcc>
c0014fd4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0014fd8:	47                   	inc    edi
c0014fd9:	eb ae                	jmp    c0014f89 <Reg::readInt(char*, char*, int*)+0x7d>
c0014fdb:	84 c0                	test   al,al
c0014fdd:	74 02                	je     c0014fe1 <Reg::readInt(char*, char*, int*)+0xd5>
c0014fdf:	f7 da                	neg    edx
c0014fe1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0014fe8:	89 10                	mov    DWORD PTR [eax],edx
c0014fea:	88 d8                	mov    al,bl
c0014fec:	81 c4 ec 00 00 00    	add    esp,0xec
c0014ff2:	5b                   	pop    ebx
c0014ff3:	5e                   	pop    esi
c0014ff4:	5f                   	pop    edi
c0014ff5:	5d                   	pop    ebp
c0014ff6:	c3                   	ret    

c0014ff7 <Reg::readString(char*, char*, char*, int)>:
c0014ff7:	57                   	push   edi
c0014ff8:	56                   	push   esi
c0014ff9:	53                   	push   ebx
c0014ffa:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015000:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015007:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001500b:	57                   	push   edi
c001500c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015013:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001501a:	e8 b6 fe ff ff       	call   c0014ed5 <Reg::getLine(char*, char*, char*)>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	89 c6                	mov    esi,eax
c0015024:	84 c0                	test   al,al
c0015026:	74 44                	je     c001506c <Reg::readString(char*, char*, char*, int)+0x75>
c0015028:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001502f:	31 c0                	xor    eax,eax
c0015031:	4a                   	dec    edx
c0015032:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015035:	84 c9                	test   cl,cl
c0015037:	74 0f                	je     c0015048 <Reg::readString(char*, char*, char*, int)+0x51>
c0015039:	39 c2                	cmp    edx,eax
c001503b:	7e 0b                	jle    c0015048 <Reg::readString(char*, char*, char*, int)+0x51>
c001503d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015040:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015045:	40                   	inc    eax
c0015046:	eb ea                	jmp    c0015032 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	53                   	push   ebx
c001504c:	e8 4f b6 fe ff       	call   c00006a0 <strlen>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015059:	75 11                	jne    c001506c <Reg::readString(char*, char*, char*, int)+0x75>
c001505b:	83 ec 0c             	sub    esp,0xc
c001505e:	53                   	push   ebx
c001505f:	e8 3c b6 fe ff       	call   c00006a0 <strlen>
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001506c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015072:	89 f0                	mov    eax,esi
c0015074:	5b                   	pop    ebx
c0015075:	5e                   	pop    esi
c0015076:	5f                   	pop    edi
c0015077:	c3                   	ret    

c0015078 <Reg::readBool(char*, char*, bool*)>:
c0015078:	83 ec 20             	sub    esp,0x20
c001507b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001507f:	50                   	push   eax
c0015080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015088:	e8 7f fe ff ff       	call   c0014f0c <Reg::readInt(char*, char*, int*)>
c001508d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015092:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015096:	0f 95 02             	setne  BYTE PTR [edx]
c0015099:	83 c4 2c             	add    esp,0x2c
c001509c:	c3                   	ret    

c001509d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001509d:	53                   	push   ebx
c001509e:	83 ec 1c             	sub    esp,0x1c
c00150a1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150a5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150a9:	50                   	push   eax
c00150aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150b2:	e8 c1 ff ff ff       	call   c0015078 <Reg::readBool(char*, char*, bool*)>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	84 c0                	test   al,al
c00150bc:	74 04                	je     c00150c2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00150be:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00150c2:	88 d8                	mov    al,bl
c00150c4:	83 c4 18             	add    esp,0x18
c00150c7:	5b                   	pop    ebx
c00150c8:	c3                   	ret    

c00150c9 <Reg::readIntWithDefault(char*, char*, int)>:
c00150c9:	53                   	push   ebx
c00150ca:	83 ec 1c             	sub    esp,0x1c
c00150cd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00150d1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150d5:	50                   	push   eax
c00150d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150de:	e8 29 fe ff ff       	call   c0014f0c <Reg::readInt(char*, char*, int*)>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	84 c0                	test   al,al
c00150e8:	74 04                	je     c00150ee <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00150ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00150ee:	89 d8                	mov    eax,ebx
c00150f0:	83 c4 18             	add    esp,0x18
c00150f3:	5b                   	pop    ebx
c00150f4:	c3                   	ret    

c00150f5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00150f5:	57                   	push   edi
c00150f6:	56                   	push   esi
c00150f7:	56                   	push   esi
c00150f8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00150fc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015100:	56                   	push   esi
c0015101:	57                   	push   edi
c0015102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001510a:	e8 e8 fe ff ff       	call   c0014ff7 <Reg::readString(char*, char*, char*, int)>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	84 c0                	test   al,al
c0015114:	75 1a                	jne    c0015130 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015116:	51                   	push   ecx
c0015117:	56                   	push   esi
c0015118:	6a 00                	push   0x0
c001511a:	57                   	push   edi
c001511b:	e8 64 b5 fe ff       	call   c0000684 <memset>
c0015120:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015123:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015127:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015129:	83 c4 10             	add    esp,0x10
c001512c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015130:	89 f8                	mov    eax,edi
c0015132:	5a                   	pop    edx
c0015133:	5e                   	pop    esi
c0015134:	5f                   	pop    edi
c0015135:	c3                   	ret    

c0015136 <Sys::eject(regs*)>:
c0015136:	83 ec 0c             	sub    esp,0xc
c0015139:	83 ca ff             	or     edx,0xffffffff
c001513c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015140:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015143:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015148:	83 e9 41             	sub    ecx,0x41
c001514b:	83 f9 19             	cmp    ecx,0x19
c001514e:	77 18                	ja     c0015168 <Sys::eject(regs*)+0x32>
c0015150:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c0015157:	85 c9                	test   ecx,ecx
c0015159:	74 0d                	je     c0015168 <Sys::eject(regs*)+0x32>
c001515b:	83 ec 0c             	sub    esp,0xc
c001515e:	51                   	push   ecx
c001515f:	e8 76 af ff ff       	call   c00100da <LogicalDisk::eject()>
c0015164:	83 c4 10             	add    esp,0x10
c0015167:	99                   	cdq    
c0015168:	83 c4 0c             	add    esp,0xc
c001516b:	c3                   	ret    

c001516c <Sys::exit(regs*)>:
c001516c:	83 ec 18             	sub    esp,0x18
c001516f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015173:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015176:	e8 59 36 00 00       	call   c00187d4 <terminateTask(int)>
c001517b:	83 c8 ff             	or     eax,0xffffffff
c001517e:	83 c4 1c             	add    esp,0x1c
c0015181:	89 c2                	mov    edx,eax
c0015183:	c3                   	ret    

c0015184 <Sys::getCwd(regs*)>:
c0015184:	83 ec 10             	sub    esp,0x10
c0015187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001518b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001518e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015196:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015199:	e8 f6 7b ff ff       	call   c000cd94 <Fs::getcwd(Process*, char*, int)>
c001519e:	83 c4 1c             	add    esp,0x1c
c00151a1:	99                   	cdq    
c00151a2:	c3                   	ret    

c00151a3 <Sys::getPID(regs*)>:
c00151a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ad:	99                   	cdq    
c00151ae:	c3                   	ret    

c00151af <Sys::getRAMData(regs*)>:
c00151af:	8b 0d b4 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263b4
c00151b5:	69 05 b0 63 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00263b0,0xc8
c00151bf:	99                   	cdq    
c00151c0:	f7 f9                	idiv   ecx
c00151c2:	c1 e0 18             	shl    eax,0x18
c00151c5:	09 c8                	or     eax,ecx
c00151c7:	99                   	cdq    
c00151c8:	c3                   	ret    

c00151c9 <Sys::getVGAPtr(regs*)>:
c00151c9:	55                   	push   ebp
c00151ca:	57                   	push   edi
c00151cb:	56                   	push   esi
c00151cc:	53                   	push   ebx
c00151cd:	83 ec 18             	sub    esp,0x18
c00151d0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00151d4:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00151d7:	e8 fc 30 00 00       	call   c00182d8 <Thr::processFromPID(int)>
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	89 c1                	mov    ecx,eax
c00151e1:	b8 01 00 00 00       	mov    eax,0x1
c00151e6:	85 c9                	test   ecx,ecx
c00151e8:	74 59                	je     c0015243 <Sys::getVGAPtr(regs*)+0x7a>
c00151ea:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00151f0:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00151f4:	74 0c                	je     c0015202 <Sys::getVGAPtr(regs*)+0x39>
c00151f6:	83 ec 0c             	sub    esp,0xc
c00151f9:	53                   	push   ebx
c00151fa:	e8 7e 55 ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015205:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015208:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001520d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001520f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015212:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015215:	81 c3 82 00 00 00    	add    ebx,0x82
c001521b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015221:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015224:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015227:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001522d:	50                   	push   eax
c001522e:	50                   	push   eax
c001522f:	53                   	push   ebx
c0015230:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015233:	05 a8 0f 00 00       	add    eax,0xfa8
c0015238:	50                   	push   eax
c0015239:	e8 02 b5 fe ff       	call   c0000740 <strcpy>
c001523e:	83 c4 10             	add    esp,0x10
c0015241:	31 c0                	xor    eax,eax
c0015243:	83 c4 0c             	add    esp,0xc
c0015246:	31 d2                	xor    edx,edx
c0015248:	5b                   	pop    ebx
c0015249:	5e                   	pop    esi
c001524a:	5f                   	pop    edi
c001524b:	5d                   	pop    ebp
c001524c:	c3                   	ret    

c001524d <Sys::loadDLL(regs*)>:
c001524d:	56                   	push   esi
c001524e:	53                   	push   ebx
c001524f:	31 d2                	xor    edx,edx
c0015251:	51                   	push   ecx
c0015252:	b8 01 00 00 00       	mov    eax,0x1
c0015257:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001525b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001525f:	0f 84 8c 00 00 00    	je     c00152f1 <Sys::loadDLL(regs*)+0xa4>
c0015265:	83 ec 0c             	sub    esp,0xc
c0015268:	68 14 01 00 00       	push   0x114
c001526d:	e8 51 47 ff ff       	call   c00099c3 <malloc>
c0015272:	83 c4 0c             	add    esp,0xc
c0015275:	89 c3                	mov    ebx,eax
c0015277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001527c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001527f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015282:	53                   	push   ebx
c0015283:	e8 0a 7d ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0015288:	83 c4 10             	add    esp,0x10
c001528b:	31 d2                	xor    edx,edx
c001528d:	b8 02 00 00 00       	mov    eax,0x2
c0015292:	85 db                	test   ebx,ebx
c0015294:	74 5b                	je     c00152f1 <Sys::loadDLL(regs*)+0xa4>
c0015296:	83 ec 0c             	sub    esp,0xc
c0015299:	53                   	push   ebx
c001529a:	e8 c5 7f ff ff       	call   c000d264 <File::exists()>
c001529f:	83 c4 10             	add    esp,0x10
c00152a2:	84 c0                	test   al,al
c00152a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152a6:	75 11                	jne    c00152b9 <Sys::loadDLL(regs*)+0x6c>
c00152a8:	83 ec 0c             	sub    esp,0xc
c00152ab:	53                   	push   ebx
c00152ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152af:	83 c4 10             	add    esp,0x10
c00152b2:	b8 03 00 00 00       	mov    eax,0x3
c00152b7:	eb 36                	jmp    c00152ef <Sys::loadDLL(regs*)+0xa2>
c00152b9:	83 ec 0c             	sub    esp,0xc
c00152bc:	53                   	push   ebx
c00152bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152c0:	58                   	pop    eax
c00152c1:	5a                   	pop    edx
c00152c2:	6a 00                	push   0x0
c00152c4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152c7:	e8 0a 22 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	89 c1                	mov    ecx,eax
c00152d1:	31 d2                	xor    edx,edx
c00152d3:	b8 04 00 00 00       	mov    eax,0x4
c00152d8:	85 c9                	test   ecx,ecx
c00152da:	74 15                	je     c00152f1 <Sys::loadDLL(regs*)+0xa4>
c00152dc:	53                   	push   ebx
c00152dd:	53                   	push   ebx
c00152de:	ff 35 68 63 02 c0    	push   DWORD PTR ds:0xc0026368
c00152e4:	51                   	push   ecx
c00152e5:	e8 1d 24 00 00       	call   c0017707 <Thr::executeDLL(unsigned long, void*)>
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	31 c0                	xor    eax,eax
c00152ef:	31 d2                	xor    edx,edx
c00152f1:	59                   	pop    ecx
c00152f2:	5b                   	pop    ebx
c00152f3:	5e                   	pop    esi
c00152f4:	c3                   	ret    

c00152f5 <Sys::read(regs*)>:
c00152f5:	57                   	push   edi
c00152f6:	56                   	push   esi
c00152f7:	53                   	push   ebx
c00152f8:	83 ec 10             	sub    esp,0x10
c00152fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015302:	83 f8 02             	cmp    eax,0x2
c0015305:	77 10                	ja     c0015317 <Sys::read(regs*)+0x22>
c0015307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001530c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001530f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015315:	eb 0e                	jmp    c0015325 <Sys::read(regs*)+0x30>
c0015317:	83 ec 0c             	sub    esp,0xc
c001531a:	50                   	push   eax
c001531b:	e8 d7 61 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	89 c1                	mov    ecx,eax
c0015325:	83 c8 ff             	or     eax,0xffffffff
c0015328:	85 c9                	test   ecx,ecx
c001532a:	89 c2                	mov    edx,eax
c001532c:	74 28                	je     c0015356 <Sys::read(regs*)+0x61>
c001532e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015336:	31 ff                	xor    edi,edi
c0015338:	83 ec 0c             	sub    esp,0xc
c001533b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001533d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015341:	52                   	push   edx
c0015342:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015345:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015348:	57                   	push   edi
c0015349:	56                   	push   esi
c001534a:	51                   	push   ecx
c001534b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001534e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015352:	83 c4 20             	add    esp,0x20
c0015355:	99                   	cdq    
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	5b                   	pop    ebx
c001535a:	5e                   	pop    esi
c001535b:	5f                   	pop    edi
c001535c:	c3                   	ret    

c001535d <Sys::sbrk(regs*)>:
c001535d:	56                   	push   esi
c001535e:	53                   	push   ebx
c001535f:	50                   	push   eax
c0015360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015365:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015369:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001536c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001536f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015375:	85 db                	test   ebx,ebx
c0015377:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001537a:	74 02                	je     c001537e <Sys::sbrk(regs*)+0x21>
c001537c:	79 06                	jns    c0015384 <Sys::sbrk(regs*)+0x27>
c001537e:	89 f0                	mov    eax,esi
c0015380:	31 d2                	xor    edx,edx
c0015382:	eb 2a                	jmp    c00153ae <Sys::sbrk(regs*)+0x51>
c0015384:	83 c8 ff             	or     eax,0xffffffff
c0015387:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001538d:	89 c2                	mov    edx,eax
c001538f:	77 1d                	ja     c00153ae <Sys::sbrk(regs*)+0x51>
c0015391:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015397:	50                   	push   eax
c0015398:	c1 ea 0c             	shr    edx,0xc
c001539b:	68 07 0c 00 00       	push   0xc07
c00153a0:	52                   	push   edx
c00153a1:	51                   	push   ecx
c00153a2:	e8 4f 6a ff ff       	call   c000bdf6 <VAS::allocatePages(int, int)>
c00153a7:	89 f0                	mov    eax,esi
c00153a9:	31 d2                	xor    edx,edx
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	59                   	pop    ecx
c00153af:	5b                   	pop    ebx
c00153b0:	5e                   	pop    esi
c00153b1:	c3                   	ret    

c00153b2 <Sys::setCwd(regs*)>:
c00153b2:	83 ec 14             	sub    esp,0x14
c00153b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153b9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00153c4:	e8 3a 7f ff ff       	call   c000d303 <Fs::setcwd(Process*, char*)>
c00153c9:	83 c4 1c             	add    esp,0x1c
c00153cc:	99                   	cdq    
c00153cd:	c3                   	ret    

c00153ce <Sys::setTime(regs*)>:
c00153ce:	55                   	push   ebp
c00153cf:	31 c9                	xor    ecx,ecx
c00153d1:	57                   	push   edi
c00153d2:	bd 0c 00 00 00       	mov    ebp,0xc
c00153d7:	56                   	push   esi
c00153d8:	53                   	push   ebx
c00153d9:	31 db                	xor    ebx,ebx
c00153db:	83 ec 10             	sub    esp,0x10
c00153de:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153e2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00153e5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00153e8:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00153eb:	89 c2                	mov    edx,eax
c00153ed:	66 81 ef 6c 07       	sub    di,0x76c
c00153f2:	83 e2 1f             	and    edx,0x1f
c00153f5:	c1 e7 10             	shl    edi,0x10
c00153f8:	42                   	inc    edx
c00153f9:	c1 e8 05             	shr    eax,0x5
c00153fc:	88 d1                	mov    cl,dl
c00153fe:	31 d2                	xor    edx,edx
c0015400:	f7 f5                	div    ebp
c0015402:	89 dd                	mov    ebp,ebx
c0015404:	88 d5                	mov    ch,dl
c0015406:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001540c:	0f b7 c1             	movzx  eax,cx
c001540f:	31 d2                	xor    edx,edx
c0015411:	09 f8                	or     eax,edi
c0015413:	bf 3c 00 00 00       	mov    edi,0x3c
c0015418:	89 c1                	mov    ecx,eax
c001541a:	89 f0                	mov    eax,esi
c001541c:	f7 f7                	div    edi
c001541e:	c1 e2 10             	shl    edx,0x10
c0015421:	09 d5                	or     ebp,edx
c0015423:	31 d2                	xor    edx,edx
c0015425:	89 eb                	mov    ebx,ebp
c0015427:	f7 f7                	div    edi
c0015429:	bf 10 0e 00 00       	mov    edi,0xe10
c001542e:	88 d7                	mov    bh,dl
c0015430:	89 f0                	mov    eax,esi
c0015432:	31 d2                	xor    edx,edx
c0015434:	f7 f7                	div    edi
c0015436:	bf 18 00 00 00       	mov    edi,0x18
c001543b:	31 d2                	xor    edx,edx
c001543d:	f7 f7                	div    edi
c001543f:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0015444:	88 d3                	mov    bl,dl
c0015446:	53                   	push   ebx
c0015447:	51                   	push   ecx
c0015448:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001544e:	e8 fb 86 ff ff       	call   c000db4e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015453:	83 c4 1c             	add    esp,0x1c
c0015456:	83 f0 01             	xor    eax,0x1
c0015459:	5b                   	pop    ebx
c001545a:	0f b6 c0             	movzx  eax,al
c001545d:	5e                   	pop    esi
c001545e:	31 d2                	xor    edx,edx
c0015460:	5f                   	pop    edi
c0015461:	5d                   	pop    ebp
c0015462:	c3                   	ret    

c0015463 <Sys::timezone(regs*)>:
c0015463:	53                   	push   ebx
c0015464:	83 ec 08             	sub    esp,0x8
c0015467:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001546b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001546f:	75 17                	jne    c0015488 <Sys::timezone(regs*)+0x25>
c0015471:	83 ec 0c             	sub    esp,0xc
c0015474:	68 89 44 02 c0       	push   0xc0024489
c0015479:	e8 aa 75 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001547e:	83 c8 ff             	or     eax,0xffffffff
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	89 c2                	mov    edx,eax
c0015486:	eb 20                	jmp    c00154a8 <Sys::timezone(regs*)+0x45>
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	68 9e 44 02 c0       	push   0xc002449e
c0015490:	e8 93 75 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0015495:	58                   	pop    eax
c0015496:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015499:	e8 12 84 ff ff       	call   c000d8b0 <User::loadClockSettings(int)>
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	b8 01 00 00 00       	mov    eax,0x1
c00154a6:	31 d2                	xor    edx,edx
c00154a8:	83 c4 08             	add    esp,0x8
c00154ab:	5b                   	pop    ebx
c00154ac:	c3                   	ret    

c00154ad <Sys::write(regs*)>:
c00154ad:	57                   	push   edi
c00154ae:	56                   	push   esi
c00154af:	53                   	push   ebx
c00154b0:	83 ec 10             	sub    esp,0x10
c00154b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154ba:	83 f8 02             	cmp    eax,0x2
c00154bd:	77 10                	ja     c00154cf <Sys::write(regs*)+0x22>
c00154bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154c7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00154cd:	eb 0e                	jmp    c00154dd <Sys::write(regs*)+0x30>
c00154cf:	83 ec 0c             	sub    esp,0xc
c00154d2:	50                   	push   eax
c00154d3:	e8 1f 60 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c00154d8:	83 c4 10             	add    esp,0x10
c00154db:	89 c1                	mov    ecx,eax
c00154dd:	83 c8 ff             	or     eax,0xffffffff
c00154e0:	85 c9                	test   ecx,ecx
c00154e2:	89 c2                	mov    edx,eax
c00154e4:	74 28                	je     c001550e <Sys::write(regs*)+0x61>
c00154e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00154ee:	31 ff                	xor    edi,edi
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00154f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00154f9:	52                   	push   edx
c00154fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00154fd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015500:	57                   	push   edi
c0015501:	56                   	push   esi
c0015502:	51                   	push   ecx
c0015503:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001550a:	83 c4 20             	add    esp,0x20
c001550d:	99                   	cdq    
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	5b                   	pop    ebx
c0015512:	5e                   	pop    esi
c0015513:	5f                   	pop    edi
c0015514:	c3                   	ret    

c0015515 <Sys::wsbe(regs*)>:
c0015515:	57                   	push   edi
c0015516:	b9 0b 00 00 00       	mov    ecx,0xb
c001551b:	56                   	push   esi
c001551c:	be dd 44 02 c0       	mov    esi,0xc00244dd
c0015521:	53                   	push   ebx
c0015522:	83 ec 30             	sub    esp,0x30
c0015525:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015529:	fc                   	cld    
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001552f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015538:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001553b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015541:	8b 06                	mov    eax,DWORD PTR [esi]
c0015543:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015546:	57                   	push   edi
c0015547:	e8 54 b1 fe ff       	call   c00006a0 <strlen>
c001554c:	5a                   	pop    edx
c001554d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015551:	52                   	push   edx
c0015552:	31 d2                	xor    edx,edx
c0015554:	57                   	push   edi
c0015555:	52                   	push   edx
c0015556:	50                   	push   eax
c0015557:	56                   	push   esi
c0015558:	ff d3                	call   ebx
c001555a:	83 c4 14             	add    esp,0x14
c001555d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015561:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015564:	e8 6b 32 00 00       	call   c00187d4 <terminateTask(int)>
c0015569:	83 c4 40             	add    esp,0x40
c001556c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015571:	5b                   	pop    ebx
c0015572:	31 d2                	xor    edx,edx
c0015574:	5e                   	pop    esi
c0015575:	5f                   	pop    edi
c0015576:	c3                   	ret    

c0015577 <Sys::yield(regs*)>:
c0015577:	83 ec 0c             	sub    esp,0xc
c001557a:	fa                   	cli    
c001557b:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0015581:	e8 36 29 00 00       	call   c0017ebc <schedule()>
c0015586:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c001558b:	48                   	dec    eax
c001558c:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0015591:	75 01                	jne    c0015594 <Sys::yield(regs*)+0x1d>
c0015593:	fb                   	sti    
c0015594:	8b 15 cc 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269cc
c001559a:	83 c4 0c             	add    esp,0xc
c001559d:	89 d0                	mov    eax,edx
c001559f:	c1 ea 11             	shr    edx,0x11
c00155a2:	c1 e0 07             	shl    eax,0x7
c00155a5:	25 80 30 0f 00       	and    eax,0xf3080
c00155aa:	31 d0                	xor    eax,edx
c00155ac:	31 d2                	xor    edx,edx
c00155ae:	c3                   	ret    

c00155af <sysCallSeekDir(regs*)>:
c00155af:	31 c0                	xor    eax,eax
c00155b1:	31 d2                	xor    edx,edx
c00155b3:	c3                   	ret    

c00155b4 <sysCallTellDir(regs*)>:
c00155b4:	31 c0                	xor    eax,eax
c00155b6:	31 d2                	xor    edx,edx
c00155b8:	c3                   	ret    

c00155b9 <sysCallVerify(regs*)>:
c00155b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155bd:	31 d2                	xor    edx,edx
c00155bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155c2:	c3                   	ret    

c00155c3 <sysCallGetArgc(regs*)>:
c00155c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155cb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00155d1:	99                   	cdq    
c00155d2:	c3                   	ret    

c00155d3 <sysFormatDisk(regs*)>:
c00155d3:	56                   	push   esi
c00155d4:	53                   	push   ebx
c00155d5:	53                   	push   ebx
c00155d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00155da:	8b 1d d4 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264d4
c00155e0:	eb 25                	jmp    c0015607 <sysFormatDisk(regs*)+0x34>
c00155e2:	83 ec 0c             	sub    esp,0xc
c00155e5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00155e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00155ea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00155ed:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00155f0:	50                   	push   eax
c00155f1:	ff 34 85 60 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96a0]
c00155f8:	53                   	push   ebx
c00155f9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00155fc:	83 c4 20             	add    esp,0x20
c00155ff:	83 f8 08             	cmp    eax,0x8
c0015602:	75 12                	jne    c0015616 <sysFormatDisk(regs*)+0x43>
c0015604:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015607:	85 db                	test   ebx,ebx
c0015609:	75 d7                	jne    c00155e2 <sysFormatDisk(regs*)+0xf>
c001560b:	59                   	pop    ecx
c001560c:	b8 03 00 00 00       	mov    eax,0x3
c0015611:	31 d2                	xor    edx,edx
c0015613:	5b                   	pop    ebx
c0015614:	5e                   	pop    esi
c0015615:	c3                   	ret    
c0015616:	85 c0                	test   eax,eax
c0015618:	74 1b                	je     c0015635 <sysFormatDisk(regs*)+0x62>
c001561a:	83 f8 09             	cmp    eax,0x9
c001561d:	74 0b                	je     c001562a <sysFormatDisk(regs*)+0x57>
c001561f:	59                   	pop    ecx
c0015620:	b8 02 00 00 00       	mov    eax,0x2
c0015625:	31 d2                	xor    edx,edx
c0015627:	5b                   	pop    ebx
c0015628:	5e                   	pop    esi
c0015629:	c3                   	ret    
c001562a:	59                   	pop    ecx
c001562b:	b8 01 00 00 00       	mov    eax,0x1
c0015630:	31 d2                	xor    edx,edx
c0015632:	5b                   	pop    ebx
c0015633:	5e                   	pop    esi
c0015634:	c3                   	ret    
c0015635:	59                   	pop    ecx
c0015636:	31 c0                	xor    eax,eax
c0015638:	31 d2                	xor    edx,edx
c001563a:	5b                   	pop    ebx
c001563b:	5e                   	pop    esi
c001563c:	c3                   	ret    

c001563d <sysSetDiskVolumeLabel(regs*)>:
c001563d:	56                   	push   esi
c001563e:	53                   	push   ebx
c001563f:	53                   	push   ebx
c0015640:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015644:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015647:	83 f8 19             	cmp    eax,0x19
c001564a:	77 2d                	ja     c0015679 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001564c:	8b 0c 85 60 69 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd96a0]
c0015653:	85 c9                	test   ecx,ecx
c0015655:	74 22                	je     c0015679 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015657:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001565a:	85 db                	test   ebx,ebx
c001565c:	74 1b                	je     c0015679 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001565e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015664:	85 d2                	test   edx,edx
c0015666:	74 11                	je     c0015679 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015668:	8b 32                	mov    esi,DWORD PTR [edx]
c001566a:	53                   	push   ebx
c001566b:	50                   	push   eax
c001566c:	51                   	push   ecx
c001566d:	52                   	push   edx
c001566e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	99                   	cdq    
c0015675:	59                   	pop    ecx
c0015676:	5b                   	pop    ebx
c0015677:	5e                   	pop    esi
c0015678:	c3                   	ret    
c0015679:	59                   	pop    ecx
c001567a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001567f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015684:	5b                   	pop    ebx
c0015685:	5e                   	pop    esi
c0015686:	c3                   	ret    

c0015687 <sysGetDiskVolumeLabel(regs*)>:
c0015687:	57                   	push   edi
c0015688:	56                   	push   esi
c0015689:	53                   	push   ebx
c001568a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001568e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015691:	83 fa 19             	cmp    edx,0x19
c0015694:	77 38                	ja     c00156ce <sysGetDiskVolumeLabel(regs*)+0x47>
c0015696:	8b 0c 95 60 69 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd96a0]
c001569d:	85 c9                	test   ecx,ecx
c001569f:	74 2d                	je     c00156ce <sysGetDiskVolumeLabel(regs*)+0x47>
c00156a1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156a4:	85 db                	test   ebx,ebx
c00156a6:	74 26                	je     c00156ce <sysGetDiskVolumeLabel(regs*)+0x47>
c00156a8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156ab:	85 f6                	test   esi,esi
c00156ad:	74 1f                	je     c00156ce <sysGetDiskVolumeLabel(regs*)+0x47>
c00156af:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156b5:	85 c0                	test   eax,eax
c00156b7:	74 15                	je     c00156ce <sysGetDiskVolumeLabel(regs*)+0x47>
c00156b9:	83 ec 0c             	sub    esp,0xc
c00156bc:	8b 38                	mov    edi,DWORD PTR [eax]
c00156be:	56                   	push   esi
c00156bf:	53                   	push   ebx
c00156c0:	52                   	push   edx
c00156c1:	51                   	push   ecx
c00156c2:	50                   	push   eax
c00156c3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00156c6:	83 c4 20             	add    esp,0x20
c00156c9:	99                   	cdq    
c00156ca:	5b                   	pop    ebx
c00156cb:	5e                   	pop    esi
c00156cc:	5f                   	pop    edi
c00156cd:	c3                   	ret    
c00156ce:	5b                   	pop    ebx
c00156cf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156d9:	5e                   	pop    esi
c00156da:	5f                   	pop    edi
c00156db:	c3                   	ret    

c00156dc <sysShutdown(regs*)>:
c00156dc:	83 ec 0c             	sub    esp,0xc
c00156df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e6:	85 c0                	test   eax,eax
c00156e8:	74 18                	je     c0015702 <sysShutdown(regs*)+0x26>
c00156ea:	83 f8 01             	cmp    eax,0x1
c00156ed:	74 38                	je     c0015727 <sysShutdown(regs*)+0x4b>
c00156ef:	83 f8 02             	cmp    eax,0x2
c00156f2:	74 24                	je     c0015718 <sysShutdown(regs*)+0x3c>
c00156f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156fe:	83 c4 0c             	add    esp,0xc
c0015701:	c3                   	ret    
c0015702:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0015707:	8b 10                	mov    edx,DWORD PTR [eax]
c0015709:	6a 00                	push   0x0
c001570b:	6a 00                	push   0x0
c001570d:	6a 00                	push   0x0
c001570f:	50                   	push   eax
c0015710:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015713:	83 c4 10             	add    esp,0x10
c0015716:	eb dc                	jmp    c00156f4 <sysShutdown(regs*)+0x18>
c0015718:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001571d:	8b 10                	mov    edx,DWORD PTR [eax]
c001571f:	6a 00                	push   0x0
c0015721:	6a 00                	push   0x0
c0015723:	6a 01                	push   0x1
c0015725:	eb e8                	jmp    c001570f <sysShutdown(regs*)+0x33>
c0015727:	a1 e0 69 02 c0       	mov    eax,ds:0xc00269e0
c001572c:	85 c0                	test   eax,eax
c001572e:	74 02                	je     c0015732 <sysShutdown(regs*)+0x56>
c0015730:	ff d0                	call   eax
c0015732:	31 c0                	xor    eax,eax
c0015734:	31 d2                	xor    edx,edx
c0015736:	83 c4 0c             	add    esp,0xc
c0015739:	c3                   	ret    

c001573a <sysCallRealpath(regs*)>:
c001573a:	83 ec 0c             	sub    esp,0xc
c001573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015741:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015744:	85 d2                	test   edx,edx
c0015746:	74 07                	je     c001574f <sysCallRealpath(regs*)+0x15>
c0015748:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001574b:	85 c0                	test   eax,eax
c001574d:	75 0b                	jne    c001575a <sysCallRealpath(regs*)+0x20>
c001574f:	b8 01 00 00 00       	mov    eax,0x1
c0015754:	31 d2                	xor    edx,edx
c0015756:	83 c4 0c             	add    esp,0xc
c0015759:	c3                   	ret    
c001575a:	51                   	push   ecx
c001575b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015761:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015764:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001576a:	51                   	push   ecx
c001576b:	52                   	push   edx
c001576c:	50                   	push   eax
c001576d:	e8 76 76 ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015772:	83 c4 10             	add    esp,0x10
c0015775:	31 c0                	xor    eax,eax
c0015777:	31 d2                	xor    edx,edx
c0015779:	83 c4 0c             	add    esp,0xc
c001577c:	c3                   	ret    

c001577d <sysCallReadDir(regs*)>:
c001577d:	53                   	push   ebx
c001577e:	83 ec 18             	sub    esp,0x18
c0015781:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015785:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015788:	83 f8 02             	cmp    eax,0x2
c001578b:	76 60                	jbe    c00157ed <sysCallReadDir(regs*)+0x70>
c001578d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015794:	77 48                	ja     c00157de <sysCallReadDir(regs*)+0x61>
c0015796:	83 ec 0c             	sub    esp,0xc
c0015799:	50                   	push   eax
c001579a:	e8 58 5d ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	85 c0                	test   eax,eax
c00157a4:	74 38                	je     c00157de <sysCallReadDir(regs*)+0x61>
c00157a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157ae:	83 ec 0c             	sub    esp,0xc
c00157b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00157b3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157b7:	51                   	push   ecx
c00157b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157bb:	6a 00                	push   0x0
c00157bd:	68 10 01 00 00       	push   0x110
c00157c2:	50                   	push   eax
c00157c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157c6:	83 c4 20             	add    esp,0x20
c00157c9:	85 c0                	test   eax,eax
c00157cb:	74 29                	je     c00157f6 <sysCallReadDir(regs*)+0x79>
c00157cd:	83 f8 07             	cmp    eax,0x7
c00157d0:	74 1b                	je     c00157ed <sysCallReadDir(regs*)+0x70>
c00157d2:	b8 02 00 00 00       	mov    eax,0x2
c00157d7:	31 d2                	xor    edx,edx
c00157d9:	83 c4 18             	add    esp,0x18
c00157dc:	5b                   	pop    ebx
c00157dd:	c3                   	ret    
c00157de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157e8:	83 c4 18             	add    esp,0x18
c00157eb:	5b                   	pop    ebx
c00157ec:	c3                   	ret    
c00157ed:	b8 01 00 00 00       	mov    eax,0x1
c00157f2:	31 d2                	xor    edx,edx
c00157f4:	eb e3                	jmp    c00157d9 <sysCallReadDir(regs*)+0x5c>
c00157f6:	31 c0                	xor    eax,eax
c00157f8:	31 d2                	xor    edx,edx
c00157fa:	eb dd                	jmp    c00157d9 <sysCallReadDir(regs*)+0x5c>

c00157fc <sysCallIsATTY(regs*)>:
c00157fc:	83 ec 0c             	sub    esp,0xc
c00157ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015803:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015806:	83 f8 02             	cmp    eax,0x2
c0015809:	76 07                	jbe    c0015812 <sysCallIsATTY(regs*)+0x16>
c001580b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015810:	75 26                	jne    c0015838 <sysCallIsATTY(regs*)+0x3c>
c0015812:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015817:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001581a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015820:	85 c0                	test   eax,eax
c0015822:	74 24                	je     c0015848 <sysCallIsATTY(regs*)+0x4c>
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	8b 10                	mov    edx,DWORD PTR [eax]
c0015829:	50                   	push   eax
c001582a:	ff 12                	call   DWORD PTR [edx]
c001582c:	31 d2                	xor    edx,edx
c001582e:	0f b6 c0             	movzx  eax,al
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	83 c4 0c             	add    esp,0xc
c0015837:	c3                   	ret    
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	50                   	push   eax
c001583c:	e8 b6 5c ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015841:	83 c4 10             	add    esp,0x10
c0015844:	85 c0                	test   eax,eax
c0015846:	75 dc                	jne    c0015824 <sysCallIsATTY(regs*)+0x28>
c0015848:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001584d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015852:	83 c4 0c             	add    esp,0xc
c0015855:	c3                   	ret    

c0015856 <sysCallSeek(regs*)>:
c0015856:	53                   	push   ebx
c0015857:	83 ec 08             	sub    esp,0x8
c001585a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001585e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015861:	8d 50 fd             	lea    edx,[eax-0x3]
c0015864:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001586a:	77 32                	ja     c001589e <sysCallSeek(regs*)+0x48>
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	50                   	push   eax
c0015870:	e8 82 5c ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015875:	83 c4 0c             	add    esp,0xc
c0015878:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001587b:	31 db                	xor    ebx,ebx
c001587d:	53                   	push   ebx
c001587e:	51                   	push   ecx
c001587f:	50                   	push   eax
c0015880:	e8 2f 78 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	85 c0                	test   eax,eax
c001588a:	0f 95 c0             	setne  al
c001588d:	31 d2                	xor    edx,edx
c001588f:	0f b6 c0             	movzx  eax,al
c0015892:	f7 d8                	neg    eax
c0015894:	83 d2 00             	adc    edx,0x0
c0015897:	83 c4 08             	add    esp,0x8
c001589a:	f7 da                	neg    edx
c001589c:	5b                   	pop    ebx
c001589d:	c3                   	ret    
c001589e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158a8:	83 c4 08             	add    esp,0x8
c00158ab:	5b                   	pop    ebx
c00158ac:	c3                   	ret    

c00158ad <sysCallTell(regs*)>:
c00158ad:	53                   	push   ebx
c00158ae:	83 ec 08             	sub    esp,0x8
c00158b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158b8:	83 f8 02             	cmp    eax,0x2
c00158bb:	76 4d                	jbe    c001590a <sysCallTell(regs*)+0x5d>
c00158bd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00158c2:	76 19                	jbe    c00158dd <sysCallTell(regs*)+0x30>
c00158c4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158c7:	31 d2                	xor    edx,edx
c00158c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158d6:	31 c0                	xor    eax,eax
c00158d8:	83 c4 08             	add    esp,0x8
c00158db:	5b                   	pop    ebx
c00158dc:	c3                   	ret    
c00158dd:	83 ec 0c             	sub    esp,0xc
c00158e0:	50                   	push   eax
c00158e1:	e8 11 5c ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c00158e6:	5a                   	pop    edx
c00158e7:	59                   	pop    ecx
c00158e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00158eb:	50                   	push   eax
c00158ec:	e8 19 78 ff ff       	call   c000d10a <File::tell(unsigned long long*)>
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	85 c0                	test   eax,eax
c00158f6:	0f 95 c0             	setne  al
c00158f9:	31 d2                	xor    edx,edx
c00158fb:	0f b6 c0             	movzx  eax,al
c00158fe:	f7 d8                	neg    eax
c0015900:	83 d2 00             	adc    edx,0x0
c0015903:	83 c4 08             	add    esp,0x8
c0015906:	f7 da                	neg    edx
c0015908:	5b                   	pop    ebx
c0015909:	c3                   	ret    
c001590a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001590f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015914:	83 c4 08             	add    esp,0x8
c0015917:	5b                   	pop    ebx
c0015918:	c3                   	ret    

c0015919 <sysCallSize(regs*)>:
c0015919:	53                   	push   ebx
c001591a:	83 ec 18             	sub    esp,0x18
c001591d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015921:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015924:	83 f8 02             	cmp    eax,0x2
c0015927:	76 53                	jbe    c001597c <sysCallSize(regs*)+0x63>
c0015929:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001592e:	76 19                	jbe    c0015949 <sysCallSize(regs*)+0x30>
c0015930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015933:	31 d2                	xor    edx,edx
c0015935:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001593b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015942:	31 c0                	xor    eax,eax
c0015944:	83 c4 18             	add    esp,0x18
c0015947:	5b                   	pop    ebx
c0015948:	c3                   	ret    
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	50                   	push   eax
c001594d:	e8 a5 5b ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015952:	83 c4 0c             	add    esp,0xc
c0015955:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015959:	52                   	push   edx
c001595a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001595d:	50                   	push   eax
c001595e:	e8 3f 79 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	85 c0                	test   eax,eax
c0015968:	0f 95 c0             	setne  al
c001596b:	31 d2                	xor    edx,edx
c001596d:	0f b6 c0             	movzx  eax,al
c0015970:	f7 d8                	neg    eax
c0015972:	83 d2 00             	adc    edx,0x0
c0015975:	83 c4 18             	add    esp,0x18
c0015978:	f7 da                	neg    edx
c001597a:	5b                   	pop    ebx
c001597b:	c3                   	ret    
c001597c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015981:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015986:	83 c4 18             	add    esp,0x18
c0015989:	5b                   	pop    ebx
c001598a:	c3                   	ret    

c001598b <sysCallSizeFromFilename(regs*)>:
c001598b:	57                   	push   edi
c001598c:	56                   	push   esi
c001598d:	53                   	push   ebx
c001598e:	83 ec 20             	sub    esp,0x20
c0015991:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015995:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015998:	83 fb 02             	cmp    ebx,0x2
c001599b:	0f 86 88 00 00 00    	jbe    c0015a29 <sysCallSizeFromFilename(regs*)+0x9e>
c00159a1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159a7:	76 1b                	jbe    c00159c4 <sysCallSizeFromFilename(regs*)+0x39>
c00159a9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159ac:	31 d2                	xor    edx,edx
c00159ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159bb:	83 c4 20             	add    esp,0x20
c00159be:	31 c0                	xor    eax,eax
c00159c0:	5b                   	pop    ebx
c00159c1:	5e                   	pop    esi
c00159c2:	5f                   	pop    edi
c00159c3:	c3                   	ret    
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	68 14 01 00 00       	push   0x114
c00159cc:	e8 f2 3f ff ff       	call   c00099c3 <malloc>
c00159d1:	83 c4 0c             	add    esp,0xc
c00159d4:	89 c7                	mov    edi,eax
c00159d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00159de:	53                   	push   ebx
c00159df:	57                   	push   edi
c00159e0:	e8 ad 75 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00159e5:	83 c4 0c             	add    esp,0xc
c00159e8:	8d 44 24 23          	lea    eax,[esp+0x23]
c00159ec:	50                   	push   eax
c00159ed:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00159f0:	57                   	push   edi
c00159f1:	e8 ac 78 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c00159f6:	83 c4 10             	add    esp,0x10
c00159f9:	85 ff                	test   edi,edi
c00159fb:	74 14                	je     c0015a11 <sysCallSizeFromFilename(regs*)+0x86>
c00159fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a01:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	57                   	push   edi
c0015a07:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a11:	85 c0                	test   eax,eax
c0015a13:	0f 95 c0             	setne  al
c0015a16:	31 d2                	xor    edx,edx
c0015a18:	0f b6 c0             	movzx  eax,al
c0015a1b:	f7 d8                	neg    eax
c0015a1d:	83 d2 00             	adc    edx,0x0
c0015a20:	83 c4 20             	add    esp,0x20
c0015a23:	f7 da                	neg    edx
c0015a25:	5b                   	pop    ebx
c0015a26:	5e                   	pop    esi
c0015a27:	5f                   	pop    edi
c0015a28:	c3                   	ret    
c0015a29:	83 c4 20             	add    esp,0x20
c0015a2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a31:	5b                   	pop    ebx
c0015a32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a37:	5e                   	pop    esi
c0015a38:	5f                   	pop    edi
c0015a39:	c3                   	ret    

c0015a3a <sysCallClose(regs*)>:
c0015a3a:	53                   	push   ebx
c0015a3b:	83 ec 08             	sub    esp,0x8
c0015a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a42:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a45:	83 f8 02             	cmp    eax,0x2
c0015a48:	76 41                	jbe    c0015a8b <sysCallClose(regs*)+0x51>
c0015a4a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a50:	83 fa 01             	cmp    edx,0x1
c0015a53:	76 2d                	jbe    c0015a82 <sysCallClose(regs*)+0x48>
c0015a55:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a5a:	77 2f                	ja     c0015a8b <sysCallClose(regs*)+0x51>
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	50                   	push   eax
c0015a60:	e8 92 5a ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015a65:	89 c3                	mov    ebx,eax
c0015a67:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a6a:	e8 e5 75 ff ff       	call   c000d054 <File::close()>
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	85 db                	test   ebx,ebx
c0015a74:	74 0c                	je     c0015a82 <sysCallClose(regs*)+0x48>
c0015a76:	83 ec 0c             	sub    esp,0xc
c0015a79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a7b:	53                   	push   ebx
c0015a7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	31 c0                	xor    eax,eax
c0015a84:	31 d2                	xor    edx,edx
c0015a86:	83 c4 08             	add    esp,0x8
c0015a89:	5b                   	pop    ebx
c0015a8a:	c3                   	ret    
c0015a8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a95:	83 c4 08             	add    esp,0x8
c0015a98:	5b                   	pop    ebx
c0015a99:	c3                   	ret    

c0015a9a <sysCallOpenDir(regs*)>:
c0015a9a:	56                   	push   esi
c0015a9b:	53                   	push   ebx
c0015a9c:	53                   	push   ebx
c0015a9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015aa1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015aa4:	85 f6                	test   esi,esi
c0015aa6:	74 59                	je     c0015b01 <sysCallOpenDir(regs*)+0x67>
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	68 14 01 00 00       	push   0x114
c0015ab0:	e8 0e 3f ff ff       	call   c00099c3 <malloc>
c0015ab5:	83 c4 0c             	add    esp,0xc
c0015ab8:	89 c6                	mov    esi,eax
c0015aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015abf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ac2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ac5:	56                   	push   esi
c0015ac6:	e8 73 79 ff ff       	call   c000d43e <Directory::Directory(char const*, Process*)>
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	85 f6                	test   esi,esi
c0015ad0:	74 2f                	je     c0015b01 <sysCallOpenDir(regs*)+0x67>
c0015ad2:	83 ec 0c             	sub    esp,0xc
c0015ad5:	56                   	push   esi
c0015ad6:	e8 c7 79 ff ff       	call   c000d4a2 <Directory::open()>
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	85 c0                	test   eax,eax
c0015ae0:	75 1f                	jne    c0015b01 <sysCallOpenDir(regs*)+0x67>
c0015ae2:	83 ec 0c             	sub    esp,0xc
c0015ae5:	56                   	push   esi
c0015ae6:	e8 17 57 ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c0015aeb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	89 02                	mov    DWORD PTR [edx],eax
c0015af3:	c1 f8 1f             	sar    eax,0x1f
c0015af6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015af9:	31 c0                	xor    eax,eax
c0015afb:	59                   	pop    ecx
c0015afc:	31 d2                	xor    edx,edx
c0015afe:	5b                   	pop    ebx
c0015aff:	5e                   	pop    esi
c0015b00:	c3                   	ret    
c0015b01:	59                   	pop    ecx
c0015b02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b0c:	5b                   	pop    ebx
c0015b0d:	5e                   	pop    esi
c0015b0e:	c3                   	ret    

c0015b0f <sysCallCloseDir(regs*)>:
c0015b0f:	53                   	push   ebx
c0015b10:	83 ec 08             	sub    esp,0x8
c0015b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b1a:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b1d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b23:	77 2f                	ja     c0015b54 <sysCallCloseDir(regs*)+0x45>
c0015b25:	83 ec 0c             	sub    esp,0xc
c0015b28:	50                   	push   eax
c0015b29:	e8 c9 59 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015b2e:	89 c3                	mov    ebx,eax
c0015b30:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b33:	e8 c6 79 ff ff       	call   c000d4fe <Directory::close()>
c0015b38:	83 c4 10             	add    esp,0x10
c0015b3b:	85 db                	test   ebx,ebx
c0015b3d:	74 0c                	je     c0015b4b <sysCallCloseDir(regs*)+0x3c>
c0015b3f:	83 ec 0c             	sub    esp,0xc
c0015b42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b44:	53                   	push   ebx
c0015b45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	31 c0                	xor    eax,eax
c0015b4d:	31 d2                	xor    edx,edx
c0015b4f:	83 c4 08             	add    esp,0x8
c0015b52:	5b                   	pop    ebx
c0015b53:	c3                   	ret    
c0015b54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b59:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b5e:	83 c4 08             	add    esp,0x8
c0015b61:	5b                   	pop    ebx
c0015b62:	c3                   	ret    

c0015b63 <sysCallMakeDir(regs*)>:
c0015b63:	56                   	push   esi
c0015b64:	53                   	push   ebx
c0015b65:	83 ec 10             	sub    esp,0x10
c0015b68:	68 14 01 00 00       	push   0x114
c0015b6d:	e8 51 3e ff ff       	call   c00099c3 <malloc>
c0015b72:	83 c4 0c             	add    esp,0xc
c0015b75:	89 c3                	mov    ebx,eax
c0015b77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b7c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b83:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b86:	53                   	push   ebx
c0015b87:	e8 b2 78 ff ff       	call   c000d43e <Directory::Directory(char const*, Process*)>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	85 db                	test   ebx,ebx
c0015b91:	74 32                	je     c0015bc5 <sysCallMakeDir(regs*)+0x62>
c0015b93:	83 ec 0c             	sub    esp,0xc
c0015b96:	53                   	push   ebx
c0015b97:	e8 e6 7a ff ff       	call   c000d682 <Directory::create()>
c0015b9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b9f:	89 c6                	mov    esi,eax
c0015ba1:	e8 58 79 ff ff       	call   c000d4fe <Directory::close()>
c0015ba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	31 c0                	xor    eax,eax
c0015bb3:	59                   	pop    ecx
c0015bb4:	85 f6                	test   esi,esi
c0015bb6:	5b                   	pop    ebx
c0015bb7:	0f 95 c0             	setne  al
c0015bba:	5e                   	pop    esi
c0015bbb:	31 d2                	xor    edx,edx
c0015bbd:	f7 d8                	neg    eax
c0015bbf:	83 d2 00             	adc    edx,0x0
c0015bc2:	f7 da                	neg    edx
c0015bc4:	c3                   	ret    
c0015bc5:	59                   	pop    ecx
c0015bc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bd0:	5b                   	pop    ebx
c0015bd1:	5e                   	pop    esi
c0015bd2:	c3                   	ret    

c0015bd3 <sysCallWait(regs*)>:
c0015bd3:	83 ec 10             	sub    esp,0x10
c0015bd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bda:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015bdd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015be0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015be3:	e8 fc 24 00 00       	call   c00180e4 <waitTask(int, int*, int)>
c0015be8:	83 c4 1c             	add    esp,0x1c
c0015beb:	99                   	cdq    
c0015bec:	c3                   	ret    

c0015bed <sysCallNotImpl(regs*)>:
c0015bed:	83 ec 18             	sub    esp,0x18
c0015bf0:	68 09 45 02 c0       	push   0xc0024509
c0015bf5:	e8 ef e6 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0015bfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c04:	83 c4 1c             	add    esp,0x1c
c0015c07:	c3                   	ret    

c0015c08 <sysPanic(regs*)>:
c0015c08:	83 ec 18             	sub    esp,0x18
c0015c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c0f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c12:	e8 d2 e6 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0015c17:	b8 01 00 00 00       	mov    eax,0x1
c0015c1c:	31 d2                	xor    edx,edx
c0015c1e:	83 c4 1c             	add    esp,0x1c
c0015c21:	c3                   	ret    

c0015c22 <sysCallRmdir(regs*)>:
c0015c22:	56                   	push   esi
c0015c23:	53                   	push   ebx
c0015c24:	83 ec 20             	sub    esp,0x20
c0015c27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c2b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c2e:	68 14 01 00 00       	push   0x114
c0015c33:	e8 8b 3d ff ff       	call   c00099c3 <malloc>
c0015c38:	83 c4 0c             	add    esp,0xc
c0015c3b:	89 c3                	mov    ebx,eax
c0015c3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c42:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c45:	56                   	push   esi
c0015c46:	53                   	push   ebx
c0015c47:	e8 46 73 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0015c4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c4f:	e8 1a 75 ff ff       	call   c000d16e <File::unlink()>
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	85 db                	test   ebx,ebx
c0015c59:	74 14                	je     c0015c6f <sysCallRmdir(regs*)+0x4d>
c0015c5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c5f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c61:	83 ec 0c             	sub    esp,0xc
c0015c64:	53                   	push   ebx
c0015c65:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c6f:	85 c0                	test   eax,eax
c0015c71:	0f 95 c0             	setne  al
c0015c74:	31 d2                	xor    edx,edx
c0015c76:	0f b6 c0             	movzx  eax,al
c0015c79:	f7 d8                	neg    eax
c0015c7b:	83 d2 00             	adc    edx,0x0
c0015c7e:	83 c4 14             	add    esp,0x14
c0015c81:	f7 da                	neg    edx
c0015c83:	5b                   	pop    ebx
c0015c84:	5e                   	pop    esi
c0015c85:	c3                   	ret    

c0015c86 <sysCallUnlink(regs*)>:
c0015c86:	56                   	push   esi
c0015c87:	53                   	push   ebx
c0015c88:	83 ec 20             	sub    esp,0x20
c0015c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c8f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c92:	68 14 01 00 00       	push   0x114
c0015c97:	e8 27 3d ff ff       	call   c00099c3 <malloc>
c0015c9c:	83 c4 0c             	add    esp,0xc
c0015c9f:	89 c3                	mov    ebx,eax
c0015ca1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ca6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ca9:	56                   	push   esi
c0015caa:	53                   	push   ebx
c0015cab:	e8 e2 72 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0015cb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cb3:	e8 b6 74 ff ff       	call   c000d16e <File::unlink()>
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	85 db                	test   ebx,ebx
c0015cbd:	74 14                	je     c0015cd3 <sysCallUnlink(regs*)+0x4d>
c0015cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cc3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cc5:	83 ec 0c             	sub    esp,0xc
c0015cc8:	53                   	push   ebx
c0015cc9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ccc:	83 c4 10             	add    esp,0x10
c0015ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cd3:	85 c0                	test   eax,eax
c0015cd5:	0f 95 c0             	setne  al
c0015cd8:	31 d2                	xor    edx,edx
c0015cda:	0f b6 c0             	movzx  eax,al
c0015cdd:	f7 d8                	neg    eax
c0015cdf:	83 d2 00             	adc    edx,0x0
c0015ce2:	83 c4 14             	add    esp,0x14
c0015ce5:	f7 da                	neg    edx
c0015ce7:	5b                   	pop    ebx
c0015ce8:	5e                   	pop    esi
c0015ce9:	c3                   	ret    

c0015cea <sysCallGetArgv(regs*)>:
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cf1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015cf4:	85 c0                	test   eax,eax
c0015cf6:	78 2b                	js     c0015d23 <sysCallGetArgv(regs*)+0x39>
c0015cf8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015cfe:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d01:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d07:	7d 1a                	jge    c0015d23 <sysCallGetArgv(regs*)+0x39>
c0015d09:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d10:	85 c0                	test   eax,eax
c0015d12:	74 17                	je     c0015d2b <sysCallGetArgv(regs*)+0x41>
c0015d14:	83 ec 08             	sub    esp,0x8
c0015d17:	50                   	push   eax
c0015d18:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d1b:	e8 20 aa fe ff       	call   c0000740 <strcpy>
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	31 c0                	xor    eax,eax
c0015d25:	31 d2                	xor    edx,edx
c0015d27:	83 c4 0c             	add    esp,0xc
c0015d2a:	c3                   	ret    
c0015d2b:	b8 01 00 00 00       	mov    eax,0x1
c0015d30:	31 d2                	xor    edx,edx
c0015d32:	83 c4 0c             	add    esp,0xc
c0015d35:	c3                   	ret    

c0015d36 <sysCallTTYName(regs*)>:
c0015d36:	56                   	push   esi
c0015d37:	53                   	push   ebx
c0015d38:	53                   	push   ebx
c0015d39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d3d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d40:	85 c0                	test   eax,eax
c0015d42:	74 5f                	je     c0015da3 <sysCallTTYName(regs*)+0x6d>
c0015d44:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d47:	83 f8 02             	cmp    eax,0x2
c0015d4a:	77 3e                	ja     c0015d8a <sysCallTTYName(regs*)+0x54>
c0015d4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d54:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015d5a:	85 db                	test   ebx,ebx
c0015d5c:	74 45                	je     c0015da3 <sysCallTTYName(regs*)+0x6d>
c0015d5e:	83 ec 0c             	sub    esp,0xc
c0015d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d63:	53                   	push   ebx
c0015d64:	ff 10                	call   DWORD PTR [eax]
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	84 c0                	test   al,al
c0015d6b:	74 41                	je     c0015dae <sysCallTTYName(regs*)+0x78>
c0015d6d:	83 ec 08             	sub    esp,0x8
c0015d70:	81 c3 82 00 00 00    	add    ebx,0x82
c0015d76:	53                   	push   ebx
c0015d77:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015d7a:	e8 c1 a9 fe ff       	call   c0000740 <strcpy>
c0015d7f:	83 c4 10             	add    esp,0x10
c0015d82:	31 c0                	xor    eax,eax
c0015d84:	59                   	pop    ecx
c0015d85:	31 d2                	xor    edx,edx
c0015d87:	5b                   	pop    ebx
c0015d88:	5e                   	pop    esi
c0015d89:	c3                   	ret    
c0015d8a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015d8f:	74 bb                	je     c0015d4c <sysCallTTYName(regs*)+0x16>
c0015d91:	83 ec 0c             	sub    esp,0xc
c0015d94:	50                   	push   eax
c0015d95:	e8 5d 57 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	89 c3                	mov    ebx,eax
c0015d9f:	85 db                	test   ebx,ebx
c0015da1:	75 bb                	jne    c0015d5e <sysCallTTYName(regs*)+0x28>
c0015da3:	59                   	pop    ecx
c0015da4:	b8 01 00 00 00       	mov    eax,0x1
c0015da9:	31 d2                	xor    edx,edx
c0015dab:	5b                   	pop    ebx
c0015dac:	5e                   	pop    esi
c0015dad:	c3                   	ret    
c0015dae:	59                   	pop    ecx
c0015daf:	b8 02 00 00 00       	mov    eax,0x2
c0015db4:	31 d2                	xor    edx,edx
c0015db6:	5b                   	pop    ebx
c0015db7:	5e                   	pop    esi
c0015db8:	c3                   	ret    

c0015db9 <sysCallUSleep(regs*)>:
c0015db9:	83 ec 1c             	sub    esp,0x1c
c0015dbc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dc0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015dc3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015dc6:	6a 00                	push   0x0
c0015dc8:	6a 64                	push   0x64
c0015dca:	52                   	push   edx
c0015dcb:	50                   	push   eax
c0015dcc:	e8 13 b1 00 00       	call   c0020ee4 <__udivdi3>
c0015dd1:	83 c4 14             	add    esp,0x14
c0015dd4:	50                   	push   eax
c0015dd5:	e8 da 23 00 00       	call   c00181b4 <milliTenthSleep(unsigned int)>
c0015dda:	31 c0                	xor    eax,eax
c0015ddc:	31 d2                	xor    edx,edx
c0015dde:	83 c4 1c             	add    esp,0x1c
c0015de1:	c3                   	ret    

c0015de2 <sysCallSpawn(regs*)>:
c0015de2:	56                   	push   esi
c0015de3:	53                   	push   ebx
c0015de4:	50                   	push   eax
c0015de5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015de9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015dec:	85 c0                	test   eax,eax
c0015dee:	75 08                	jne    c0015df8 <sysCallSpawn(regs*)+0x16>
c0015df0:	59                   	pop    ecx
c0015df1:	31 c0                	xor    eax,eax
c0015df3:	31 d2                	xor    edx,edx
c0015df5:	5b                   	pop    ebx
c0015df6:	5e                   	pop    esi
c0015df7:	c3                   	ret    
c0015df8:	83 ec 0c             	sub    esp,0xc
c0015dfb:	68 1f 07 00 00       	push   0x71f
c0015e00:	e8 be 3b ff ff       	call   c00099c3 <malloc>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	89 c6                	mov    esi,eax
c0015e0a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e0d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e10:	85 c0                	test   eax,eax
c0015e12:	75 32                	jne    c0015e46 <sysCallSpawn(regs*)+0x64>
c0015e14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e1c:	52                   	push   edx
c0015e1d:	50                   	push   eax
c0015e1e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e21:	56                   	push   esi
c0015e22:	e8 85 1a 00 00       	call   c00178ac <Process::Process(char const*, Process*, char**)>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e31:	75 bd                	jne    c0015df0 <sysCallSpawn(regs*)+0xe>
c0015e33:	83 ec 0c             	sub    esp,0xc
c0015e36:	56                   	push   esi
c0015e37:	e8 5c 1f 00 00       	call   c0017d98 <Process::createUserThread()>
c0015e3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e3e:	83 c4 10             	add    esp,0x10
c0015e41:	99                   	cdq    
c0015e42:	59                   	pop    ecx
c0015e43:	5b                   	pop    ebx
c0015e44:	5e                   	pop    esi
c0015e45:	c3                   	ret    
c0015e46:	31 c0                	xor    eax,eax
c0015e48:	eb d2                	jmp    c0015e1c <sysCallSpawn(regs*)+0x3a>

c0015e4a <sysCallGetEnv(regs*)>:
c0015e4a:	57                   	push   edi
c0015e4b:	56                   	push   esi
c0015e4c:	53                   	push   ebx
c0015e4d:	83 ec 1c             	sub    esp,0x1c
c0015e50:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e59:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015e5c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e5f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015e62:	e8 ce e3 ff ff       	call   c0014235 <Krnl::getProcessTotalEnvCount(Process*)>
c0015e67:	83 c4 10             	add    esp,0x10
c0015e6a:	39 c7                	cmp    edi,eax
c0015e6c:	7c 14                	jl     c0015e82 <sysCallGetEnv(regs*)+0x38>
c0015e6e:	85 f6                	test   esi,esi
c0015e70:	75 0b                	jne    c0015e7d <sysCallGetEnv(regs*)+0x33>
c0015e72:	83 c4 10             	add    esp,0x10
c0015e75:	31 c0                	xor    eax,eax
c0015e77:	5b                   	pop    ebx
c0015e78:	31 d2                	xor    edx,edx
c0015e7a:	5e                   	pop    esi
c0015e7b:	5f                   	pop    edi
c0015e7c:	c3                   	ret    
c0015e7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015e80:	eb f0                	jmp    c0015e72 <sysCallGetEnv(regs*)+0x28>
c0015e82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015e86:	52                   	push   edx
c0015e87:	57                   	push   edi
c0015e88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e8e:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015e91:	50                   	push   eax
c0015e92:	e8 be e3 ff ff       	call   c0014255 <Krnl::getProcessEnvPair(Process*, int)>
c0015e97:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015e9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e9e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ea2:	83 c4 0c             	add    esp,0xc
c0015ea5:	85 c9                	test   ecx,ecx
c0015ea7:	75 23                	jne    c0015ecc <sysCallGetEnv(regs*)+0x82>
c0015ea9:	83 ec 0c             	sub    esp,0xc
c0015eac:	50                   	push   eax
c0015ead:	e8 ee a7 fe ff       	call   c00006a0 <strlen>
c0015eb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015eb5:	89 c3                	mov    ebx,eax
c0015eb7:	e8 e4 a7 fe ff       	call   c00006a0 <strlen>
c0015ebc:	83 c4 10             	add    esp,0x10
c0015ebf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	31 d2                	xor    edx,edx
c0015ec8:	5b                   	pop    ebx
c0015ec9:	5e                   	pop    esi
c0015eca:	5f                   	pop    edi
c0015ecb:	c3                   	ret    
c0015ecc:	83 ec 08             	sub    esp,0x8
c0015ecf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ed2:	50                   	push   eax
c0015ed3:	56                   	push   esi
c0015ed4:	e8 67 a8 fe ff       	call   c0000740 <strcpy>
c0015ed9:	58                   	pop    eax
c0015eda:	5a                   	pop    edx
c0015edb:	68 23 45 02 c0       	push   0xc0024523
c0015ee0:	56                   	push   esi
c0015ee1:	e8 9a a9 fe ff       	call   c0000880 <strcat>
c0015ee6:	59                   	pop    ecx
c0015ee7:	5b                   	pop    ebx
c0015ee8:	57                   	push   edi
c0015ee9:	56                   	push   esi
c0015eea:	e8 91 a9 fe ff       	call   c0000880 <strcat>
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	e9 7b ff ff ff       	jmp    c0015e72 <sysCallGetEnv(regs*)+0x28>

c0015ef7 <sysAppSettings(regs*)>:
c0015ef7:	57                   	push   edi
c0015ef8:	56                   	push   esi
c0015ef9:	56                   	push   esi
c0015efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efe:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f01:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f07:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f0c:	66 3d c0 09          	cmp    ax,0x9c0
c0015f10:	75 2e                	jne    c0015f40 <sysAppSettings(regs*)+0x49>
c0015f12:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f18:	83 e0 1f             	and    eax,0x1f
c0015f1b:	3c 01                	cmp    al,0x1
c0015f1d:	74 2c                	je     c0015f4b <sysAppSettings(regs*)+0x54>
c0015f1f:	3c 07                	cmp    al,0x7
c0015f21:	0f 84 b3 00 00 00    	je     c0015fda <sysAppSettings(regs*)+0xe3>
c0015f27:	84 c0                	test   al,al
c0015f29:	0f 84 d2 00 00 00    	je     c0016001 <sysAppSettings(regs*)+0x10a>
c0015f2f:	3c 08                	cmp    al,0x8
c0015f31:	74 63                	je     c0015f96 <sysAppSettings(regs*)+0x9f>
c0015f33:	59                   	pop    ecx
c0015f34:	0f b6 c0             	movzx  eax,al
c0015f37:	5e                   	pop    esi
c0015f38:	05 e8 03 00 00       	add    eax,0x3e8
c0015f3d:	5f                   	pop    edi
c0015f3e:	99                   	cdq    
c0015f3f:	c3                   	ret    
c0015f40:	b8 01 00 00 00       	mov    eax,0x1
c0015f45:	59                   	pop    ecx
c0015f46:	31 d2                	xor    edx,edx
c0015f48:	5e                   	pop    esi
c0015f49:	5f                   	pop    edi
c0015f4a:	c3                   	ret    
c0015f4b:	50                   	push   eax
c0015f4c:	68 00 01 00 00       	push   0x100
c0015f51:	6a 00                	push   0x0
c0015f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f5b:	83 c0 0c             	add    eax,0xc
c0015f5e:	50                   	push   eax
c0015f5f:	e8 20 a7 fe ff       	call   c0000684 <memset>
c0015f64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f69:	b9 ff 00 00 00       	mov    ecx,0xff
c0015f6e:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015f71:	83 c7 0c             	add    edi,0xc
c0015f74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f7b:	5a                   	pop    edx
c0015f7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f7f:	59                   	pop    ecx
c0015f80:	8d 50 0c             	lea    edx,[eax+0xc]
c0015f83:	52                   	push   edx
c0015f84:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015f8a:	e8 8d 46 ff ff       	call   c000a61c <VgaText::setTitle(char*)>
c0015f8f:	83 c4 10             	add    esp,0x10
c0015f92:	31 c0                	xor    eax,eax
c0015f94:	eb af                	jmp    c0015f45 <sysAppSettings(regs*)+0x4e>
c0015f96:	83 ec 08             	sub    esp,0x8
c0015f99:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015f9f:	83 e0 0f             	and    eax,0xf
c0015fa2:	50                   	push   eax
c0015fa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fb1:	e8 56 46 ff ff       	call   c000a60c <VgaText::setTitleColour(VgaColour)>
c0015fb6:	5f                   	pop    edi
c0015fb7:	58                   	pop    eax
c0015fb8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fbe:	c1 e8 04             	shr    eax,0x4
c0015fc1:	83 e0 0f             	and    eax,0xf
c0015fc4:	50                   	push   eax
c0015fc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fcd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fd3:	e8 24 46 ff ff       	call   c000a5fc <VgaText::setTitleTextColour(VgaColour)>
c0015fd8:	eb b5                	jmp    c0015f8f <sysAppSettings(regs*)+0x98>
c0015fda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fdf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fe2:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015fe8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0015fee:	c0 e8 06             	shr    al,0x6
c0015ff1:	83 e0 01             	and    eax,0x1
c0015ff4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0015ffa:	31 c0                	xor    eax,eax
c0015ffc:	e9 44 ff ff ff       	jmp    c0015f45 <sysAppSettings(regs*)+0x4e>
c0016001:	b8 02 00 00 00       	mov    eax,0x2
c0016006:	e9 3a ff ff ff       	jmp    c0015f45 <sysAppSettings(regs*)+0x4e>

c001600b <sysSetFatAttrib(regs*)>:
c001600b:	57                   	push   edi
c001600c:	56                   	push   esi
c001600d:	53                   	push   ebx
c001600e:	83 ec 1c             	sub    esp,0x1c
c0016011:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016015:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016018:	68 14 01 00 00       	push   0x114
c001601d:	e8 a1 39 ff ff       	call   c00099c3 <malloc>
c0016022:	83 c4 0c             	add    esp,0xc
c0016025:	89 c3                	mov    ebx,eax
c0016027:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001602c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001602f:	57                   	push   edi
c0016030:	53                   	push   ebx
c0016031:	e8 5c 6f ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016036:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016039:	83 c4 0c             	add    esp,0xc
c001603c:	0f b6 d4             	movzx  edx,ah
c001603f:	0f b6 c0             	movzx  eax,al
c0016042:	52                   	push   edx
c0016043:	50                   	push   eax
c0016044:	53                   	push   ebx
c0016045:	e8 be 71 ff ff       	call   c000d208 <File::chfatattr(unsigned char, unsigned char)>
c001604a:	83 c4 10             	add    esp,0x10
c001604d:	85 db                	test   ebx,ebx
c001604f:	74 14                	je     c0016065 <sysSetFatAttrib(regs*)+0x5a>
c0016051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016055:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016057:	83 ec 0c             	sub    esp,0xc
c001605a:	53                   	push   ebx
c001605b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016065:	85 c0                	test   eax,eax
c0016067:	0f 95 c0             	setne  al
c001606a:	31 d2                	xor    edx,edx
c001606c:	0f b6 c0             	movzx  eax,al
c001606f:	f7 d8                	neg    eax
c0016071:	83 d2 00             	adc    edx,0x0
c0016074:	83 c4 10             	add    esp,0x10
c0016077:	f7 da                	neg    edx
c0016079:	5b                   	pop    ebx
c001607a:	5e                   	pop    esi
c001607b:	5f                   	pop    edi
c001607c:	c3                   	ret    

c001607d <sysPipe(regs*)>:
c001607d:	57                   	push   edi
c001607e:	56                   	push   esi
c001607f:	53                   	push   ebx
c0016080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016084:	83 ec 0c             	sub    esp,0xc
c0016087:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001608a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001608d:	6a 20                	push   0x20
c001608f:	e8 2f 39 ff ff       	call   c00099c3 <malloc>
c0016094:	89 c3                	mov    ebx,eax
c0016096:	58                   	pop    eax
c0016097:	5a                   	pop    edx
c0016098:	68 00 50 00 00       	push   0x5000
c001609d:	53                   	push   ebx
c001609e:	e8 f1 42 ff ff       	call   c000a394 <Pipe::Pipe(int)>
c00160a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160a6:	e8 57 51 ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c00160ab:	89 07                	mov    DWORD PTR [edi],eax
c00160ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160b0:	e8 4d 51 ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c00160b5:	83 c4 10             	add    esp,0x10
c00160b8:	89 06                	mov    DWORD PTR [esi],eax
c00160ba:	31 d2                	xor    edx,edx
c00160bc:	5b                   	pop    ebx
c00160bd:	31 c0                	xor    eax,eax
c00160bf:	5e                   	pop    esi
c00160c0:	5f                   	pop    edi
c00160c1:	c3                   	ret    

c00160c2 <sysGetUnixTime(regs*)>:
c00160c2:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00160c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160d1:	e9 b0 78 ff ff       	jmp    c000d986 <Clock::timeInSecondsLocal()>

c00160d6 <string_ends_with(char const*, char const*)>:
c00160d6:	57                   	push   edi
c00160d7:	56                   	push   esi
c00160d8:	53                   	push   ebx
c00160d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00160e1:	83 ec 0c             	sub    esp,0xc
c00160e4:	53                   	push   ebx
c00160e5:	e8 b6 a5 fe ff       	call   c00006a0 <strlen>
c00160ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00160ed:	89 c6                	mov    esi,eax
c00160ef:	e8 ac a5 fe ff       	call   c00006a0 <strlen>
c00160f4:	83 c4 10             	add    esp,0x10
c00160f7:	39 c6                	cmp    esi,eax
c00160f9:	7d 06                	jge    c0016101 <string_ends_with(char const*, char const*)+0x2b>
c00160fb:	5b                   	pop    ebx
c00160fc:	31 c0                	xor    eax,eax
c00160fe:	5e                   	pop    esi
c00160ff:	5f                   	pop    edi
c0016100:	c3                   	ret    
c0016101:	83 ec 08             	sub    esp,0x8
c0016104:	29 c6                	sub    esi,eax
c0016106:	57                   	push   edi
c0016107:	01 f3                	add    ebx,esi
c0016109:	53                   	push   ebx
c001610a:	e8 bd a6 fe ff       	call   c00007cc <strcmp>
c001610f:	83 c4 10             	add    esp,0x10
c0016112:	85 c0                	test   eax,eax
c0016114:	5b                   	pop    ebx
c0016115:	0f 94 c0             	sete   al
c0016118:	5e                   	pop    esi
c0016119:	0f b6 c0             	movzx  eax,al
c001611c:	5f                   	pop    edi
c001611d:	c3                   	ret    

c001611e <sysCallOpen(regs*)>:
c001611e:	56                   	push   esi
c001611f:	53                   	push   ebx
c0016120:	81 ec 04 01 00 00    	sub    esp,0x104
c0016126:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001612d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016130:	85 c9                	test   ecx,ecx
c0016132:	0f 84 ad 01 00 00    	je     c00162e5 <sysCallOpen(regs*)+0x1c7>
c0016138:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001613b:	85 c0                	test   eax,eax
c001613d:	0f 84 a2 01 00 00    	je     c00162e5 <sysCallOpen(regs*)+0x1c7>
c0016143:	52                   	push   edx
c0016144:	68 25 45 02 c0       	push   0xc0024525
c0016149:	50                   	push   eax
c001614a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001614e:	56                   	push   esi
c001614f:	e8 94 6c ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016154:	89 34 24             	mov    DWORD PTR [esp],esi
c0016157:	e8 44 a5 fe ff       	call   c00006a0 <strlen>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	48                   	dec    eax
c0016160:	74 1d                	je     c001617f <sysCallOpen(regs*)+0x61>
c0016162:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016165:	eb 0f                	jmp    c0016176 <sysCallOpen(regs*)+0x58>
c0016167:	80 fa 3a             	cmp    dl,0x3a
c001616a:	74 0f                	je     c001617b <sysCallOpen(regs*)+0x5d>
c001616c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016170:	48                   	dec    eax
c0016171:	74 0c                	je     c001617f <sysCallOpen(regs*)+0x61>
c0016173:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016176:	80 fa 2e             	cmp    dl,0x2e
c0016179:	75 ec                	jne    c0016167 <sysCallOpen(regs*)+0x49>
c001617b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001617f:	83 ec 08             	sub    esp,0x8
c0016182:	68 29 45 02 c0       	push   0xc0024529
c0016187:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001618a:	e8 47 ff ff ff       	call   c00160d6 <string_ends_with(char const*, char const*)>
c001618f:	83 c4 10             	add    esp,0x10
c0016192:	85 c0                	test   eax,eax
c0016194:	74 1d                	je     c00161b3 <sysCallOpen(regs*)+0x95>
c0016196:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016199:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001619f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161a6:	81 c4 04 01 00 00    	add    esp,0x104
c00161ac:	31 c0                	xor    eax,eax
c00161ae:	31 d2                	xor    edx,edx
c00161b0:	5b                   	pop    ebx
c00161b1:	5e                   	pop    esi
c00161b2:	c3                   	ret    
c00161b3:	83 ec 08             	sub    esp,0x8
c00161b6:	68 2e 45 02 c0       	push   0xc002452e
c00161bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161be:	e8 13 ff ff ff       	call   c00160d6 <string_ends_with(char const*, char const*)>
c00161c3:	83 c4 10             	add    esp,0x10
c00161c6:	85 c0                	test   eax,eax
c00161c8:	75 cc                	jne    c0016196 <sysCallOpen(regs*)+0x78>
c00161ca:	83 ec 08             	sub    esp,0x8
c00161cd:	68 2a 45 02 c0       	push   0xc002452a
c00161d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161d5:	e8 f2 a5 fe ff       	call   c00007cc <strcmp>
c00161da:	83 c4 10             	add    esp,0x10
c00161dd:	85 c0                	test   eax,eax
c00161df:	74 b5                	je     c0016196 <sysCallOpen(regs*)+0x78>
c00161e1:	83 ec 08             	sub    esp,0x8
c00161e4:	68 29 45 02 c0       	push   0xc0024529
c00161e9:	56                   	push   esi
c00161ea:	e8 e7 fe ff ff       	call   c00160d6 <string_ends_with(char const*, char const*)>
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	85 c0                	test   eax,eax
c00161f4:	75 a0                	jne    c0016196 <sysCallOpen(regs*)+0x78>
c00161f6:	83 ec 08             	sub    esp,0x8
c00161f9:	68 33 45 02 c0       	push   0xc0024533
c00161fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016201:	e8 d0 fe ff ff       	call   c00160d6 <string_ends_with(char const*, char const*)>
c0016206:	83 c4 10             	add    esp,0x10
c0016209:	85 c0                	test   eax,eax
c001620b:	0f 85 e7 00 00 00    	jne    c00162f8 <sysCallOpen(regs*)+0x1da>
c0016211:	83 ec 08             	sub    esp,0x8
c0016214:	68 38 45 02 c0       	push   0xc0024538
c0016219:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001621c:	e8 b5 fe ff ff       	call   c00160d6 <string_ends_with(char const*, char const*)>
c0016221:	83 c4 10             	add    esp,0x10
c0016224:	85 c0                	test   eax,eax
c0016226:	0f 85 cc 00 00 00    	jne    c00162f8 <sysCallOpen(regs*)+0x1da>
c001622c:	83 ec 08             	sub    esp,0x8
c001622f:	68 34 45 02 c0       	push   0xc0024534
c0016234:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016237:	e8 90 a5 fe ff       	call   c00007cc <strcmp>
c001623c:	83 c4 10             	add    esp,0x10
c001623f:	85 c0                	test   eax,eax
c0016241:	0f 84 b1 00 00 00    	je     c00162f8 <sysCallOpen(regs*)+0x1da>
c0016247:	83 ec 08             	sub    esp,0x8
c001624a:	68 33 45 02 c0       	push   0xc0024533
c001624f:	56                   	push   esi
c0016250:	e8 81 fe ff ff       	call   c00160d6 <string_ends_with(char const*, char const*)>
c0016255:	83 c4 10             	add    esp,0x10
c0016258:	85 c0                	test   eax,eax
c001625a:	0f 85 98 00 00 00    	jne    c00162f8 <sysCallOpen(regs*)+0x1da>
c0016260:	83 ec 0c             	sub    esp,0xc
c0016263:	68 14 01 00 00       	push   0x114
c0016268:	e8 56 37 ff ff       	call   c00099c3 <malloc>
c001626d:	83 c4 0c             	add    esp,0xc
c0016270:	89 c6                	mov    esi,eax
c0016272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016277:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001627a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001627d:	56                   	push   esi
c001627e:	e8 0f 6d ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	85 f6                	test   esi,esi
c0016288:	74 5b                	je     c00162e5 <sysCallOpen(regs*)+0x1c7>
c001628a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001628d:	0f b6 c2             	movzx  eax,dl
c0016290:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016293:	89 d0                	mov    eax,edx
c0016295:	83 e0 01             	and    eax,0x1
c0016298:	f6 c2 02             	test   dl,0x2
c001629b:	74 03                	je     c00162a0 <sysCallOpen(regs*)+0x182>
c001629d:	83 c8 02             	or     eax,0x2
c00162a0:	f6 c2 04             	test   dl,0x4
c00162a3:	74 03                	je     c00162a8 <sysCallOpen(regs*)+0x18a>
c00162a5:	83 c8 04             	or     eax,0x4
c00162a8:	f6 c2 08             	test   dl,0x8
c00162ab:	74 03                	je     c00162b0 <sysCallOpen(regs*)+0x192>
c00162ad:	83 c8 0a             	or     eax,0xa
c00162b0:	83 e2 10             	and    edx,0x10
c00162b3:	74 03                	je     c00162b8 <sysCallOpen(regs*)+0x19a>
c00162b5:	83 c8 12             	or     eax,0x12
c00162b8:	83 ec 08             	sub    esp,0x8
c00162bb:	50                   	push   eax
c00162bc:	56                   	push   esi
c00162bd:	e8 34 6d ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	85 c0                	test   eax,eax
c00162c7:	75 1c                	jne    c00162e5 <sysCallOpen(regs*)+0x1c7>
c00162c9:	83 ec 0c             	sub    esp,0xc
c00162cc:	56                   	push   esi
c00162cd:	e8 30 4f ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c00162d2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162d5:	83 c4 10             	add    esp,0x10
c00162d8:	89 02                	mov    DWORD PTR [edx],eax
c00162da:	c1 f8 1f             	sar    eax,0x1f
c00162dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00162e0:	e9 c1 fe ff ff       	jmp    c00161a6 <sysCallOpen(regs*)+0x88>
c00162e5:	81 c4 04 01 00 00    	add    esp,0x104
c00162eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162f5:	5b                   	pop    ebx
c00162f6:	5e                   	pop    esi
c00162f7:	c3                   	ret    
c00162f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162fb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016301:	e9 99 fe ff ff       	jmp    c001619f <sysCallOpen(regs*)+0x81>

c0016306 <Sys::loadSyscalls()>:
c0016306:	c7 05 a0 6e 02 c0 77 55 01 c0 	mov    DWORD PTR ds:0xc0026ea0,0xc0015577
c0016310:	c7 05 a4 6e 02 c0 6c 51 01 c0 	mov    DWORD PTR ds:0xc0026ea4,0xc001516c
c001631a:	c7 05 a8 6e 02 c0 5d 53 01 c0 	mov    DWORD PTR ds:0xc0026ea8,0xc001535d
c0016324:	c7 05 ac 6e 02 c0 ad 54 01 c0 	mov    DWORD PTR ds:0xc0026eac,0xc00154ad
c001632e:	c7 05 b0 6e 02 c0 f5 52 01 c0 	mov    DWORD PTR ds:0xc0026eb0,0xc00152f5
c0016338:	c7 05 b4 6e 02 c0 a3 51 01 c0 	mov    DWORD PTR ds:0xc0026eb4,0xc00151a3
c0016342:	c7 05 b8 6e 02 c0 84 51 01 c0 	mov    DWORD PTR ds:0xc0026eb8,0xc0015184
c001634c:	c7 05 bc 6e 02 c0 b2 53 01 c0 	mov    DWORD PTR ds:0xc0026ebc,0xc00153b2
c0016356:	c7 05 c4 6e 02 c0 3a 5a 01 c0 	mov    DWORD PTR ds:0xc0026ec4,0xc0015a3a
c0016360:	c7 05 c0 6e 02 c0 1e 61 01 c0 	mov    DWORD PTR ds:0xc0026ec0,0xc001611e
c001636a:	c7 05 c8 6e 02 c0 9a 5a 01 c0 	mov    DWORD PTR ds:0xc0026ec8,0xc0015a9a
c0016374:	c7 05 cc 6e 02 c0 7d 57 01 c0 	mov    DWORD PTR ds:0xc0026ecc,0xc001577d
c001637e:	c7 05 d0 6e 02 c0 af 55 01 c0 	mov    DWORD PTR ds:0xc0026ed0,0xc00155af
c0016388:	c7 05 d4 6e 02 c0 b4 55 01 c0 	mov    DWORD PTR ds:0xc0026ed4,0xc00155b4
c0016392:	c7 05 d8 6e 02 c0 63 5b 01 c0 	mov    DWORD PTR ds:0xc0026ed8,0xc0015b63
c001639c:	c7 05 dc 6e 02 c0 0f 5b 01 c0 	mov    DWORD PTR ds:0xc0026edc,0xc0015b0f
c00163a6:	c7 05 e0 6e 02 c0 56 58 01 c0 	mov    DWORD PTR ds:0xc0026ee0,0xc0015856
c00163b0:	c7 05 e4 6e 02 c0 ad 58 01 c0 	mov    DWORD PTR ds:0xc0026ee4,0xc00158ad
c00163ba:	c7 05 e8 6e 02 c0 19 59 01 c0 	mov    DWORD PTR ds:0xc0026ee8,0xc0015919
c00163c4:	c7 05 ec 6e 02 c0 b9 55 01 c0 	mov    DWORD PTR ds:0xc0026eec,0xc00155b9
c00163ce:	c7 05 f0 6e 02 c0 d3 5b 01 c0 	mov    DWORD PTR ds:0xc0026ef0,0xc0015bd3
c00163d8:	c7 05 f4 6e 02 c0 ed 5b 01 c0 	mov    DWORD PTR ds:0xc0026ef4,0xc0015bed
c00163e2:	c7 05 f8 6e 02 c0 ed 5b 01 c0 	mov    DWORD PTR ds:0xc0026ef8,0xc0015bed
c00163ec:	c7 05 fc 6e 02 c0 22 5c 01 c0 	mov    DWORD PTR ds:0xc0026efc,0xc0015c22
c00163f6:	c7 05 00 6f 02 c0 86 5c 01 c0 	mov    DWORD PTR ds:0xc0026f00,0xc0015c86
c0016400:	c7 05 04 6f 02 c0 c3 55 01 c0 	mov    DWORD PTR ds:0xc0026f04,0xc00155c3
c001640a:	c7 05 08 6f 02 c0 ea 5c 01 c0 	mov    DWORD PTR ds:0xc0026f08,0xc0015cea
c0016414:	c7 05 0c 6f 02 c0 3a 57 01 c0 	mov    DWORD PTR ds:0xc0026f0c,0xc001573a
c001641e:	c7 05 10 6f 02 c0 36 5d 01 c0 	mov    DWORD PTR ds:0xc0026f10,0xc0015d36
c0016428:	c7 05 14 6f 02 c0 fc 57 01 c0 	mov    DWORD PTR ds:0xc0026f14,0xc00157fc
c0016432:	c7 05 18 6f 02 c0 b9 5d 01 c0 	mov    DWORD PTR ds:0xc0026f18,0xc0015db9
c001643c:	c7 05 1c 6f 02 c0 8b 59 01 c0 	mov    DWORD PTR ds:0xc0026f1c,0xc001598b
c0016446:	c7 05 20 6f 02 c0 e2 5d 01 c0 	mov    DWORD PTR ds:0xc0026f20,0xc0015de2
c0016450:	c7 05 24 6f 02 c0 4a 5e 01 c0 	mov    DWORD PTR ds:0xc0026f24,0xc0015e4a
c001645a:	c7 05 28 6f 02 c0 f7 5e 01 c0 	mov    DWORD PTR ds:0xc0026f28,0xc0015ef7
c0016464:	c7 05 2c 6f 02 c0 d3 55 01 c0 	mov    DWORD PTR ds:0xc0026f2c,0xc00155d3
c001646e:	c7 05 30 6f 02 c0 3d 56 01 c0 	mov    DWORD PTR ds:0xc0026f30,0xc001563d
c0016478:	c7 05 34 6f 02 c0 87 56 01 c0 	mov    DWORD PTR ds:0xc0026f34,0xc0015687
c0016482:	c7 05 38 6f 02 c0 0b 60 01 c0 	mov    DWORD PTR ds:0xc0026f38,0xc001600b
c001648c:	c7 05 3c 6f 02 c0 08 5c 01 c0 	mov    DWORD PTR ds:0xc0026f3c,0xc0015c08
c0016496:	c7 05 40 6f 02 c0 dc 56 01 c0 	mov    DWORD PTR ds:0xc0026f40,0xc00156dc
c00164a0:	c7 05 44 6f 02 c0 7d 60 01 c0 	mov    DWORD PTR ds:0xc0026f44,0xc001607d
c00164aa:	c7 05 48 6f 02 c0 c2 60 01 c0 	mov    DWORD PTR ds:0xc0026f48,0xc00160c2
c00164b4:	c7 05 4c 6f 02 c0 4d 52 01 c0 	mov    DWORD PTR ds:0xc0026f4c,0xc001524d
c00164be:	c7 05 50 6f 02 c0 ce 53 01 c0 	mov    DWORD PTR ds:0xc0026f50,0xc00153ce
c00164c8:	c7 05 54 6f 02 c0 63 54 01 c0 	mov    DWORD PTR ds:0xc0026f54,0xc0015463
c00164d2:	c7 05 58 6f 02 c0 36 51 01 c0 	mov    DWORD PTR ds:0xc0026f58,0xc0015136
c00164dc:	c7 05 5c 6f 02 c0 15 55 01 c0 	mov    DWORD PTR ds:0xc0026f5c,0xc0015515
c00164e6:	c7 05 60 6f 02 c0 af 51 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc00151af
c00164f0:	c7 05 64 6f 02 c0 c9 51 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc00151c9
c00164fa:	c3                   	ret    

c00164fb <Sys::systemCall(regs*, void*)>:
c00164fb:	53                   	push   ebx
c00164fc:	83 ec 08             	sub    esp,0x8
c00164ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016506:	83 f8 7f             	cmp    eax,0x7f
c0016509:	77 16                	ja     c0016521 <Sys::systemCall(regs*, void*)+0x26>
c001650b:	8b 14 85 a0 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9160]
c0016512:	85 d2                	test   edx,edx
c0016514:	74 0b                	je     c0016521 <Sys::systemCall(regs*, void*)+0x26>
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	53                   	push   ebx
c001651a:	ff d2                	call   edx
c001651c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001651f:	eb 0d                	jmp    c001652e <Sys::systemCall(regs*, void*)+0x33>
c0016521:	52                   	push   edx
c0016522:	52                   	push   edx
c0016523:	50                   	push   eax
c0016524:	68 3d 45 02 c0       	push   0xc002453d
c0016529:	e8 fa 64 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016536:	31 d2                	xor    edx,edx
c0016538:	83 c4 08             	add    esp,0x8
c001653b:	5b                   	pop    ebx
c001653c:	c3                   	ret    

c001653d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001653d:	55                   	push   ebp
c001653e:	57                   	push   edi
c001653f:	56                   	push   esi
c0016540:	53                   	push   ebx
c0016541:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016547:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001654e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016555:	85 c0                	test   eax,eax
c0016557:	0f 95 c1             	setne  cl
c001655a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016562:	0f 94 c2             	sete   dl
c0016565:	84 d1                	test   cl,dl
c0016567:	74 23                	je     c001658c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016569:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001656f:	74 1b                	je     c001658c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016571:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016577:	89 da                	mov    edx,ebx
c0016579:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001657f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016585:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001658c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016593:	05 ff 0f 00 00       	add    eax,0xfff
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001659f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165a5:	c1 e8 0c             	shr    eax,0xc
c00165a8:	89 fe                	mov    esi,edi
c00165aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165ae:	c1 ee 0c             	shr    esi,0xc
c00165b1:	6a 01                	push   0x1
c00165b3:	e8 95 50 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c00165b8:	89 c5                	mov    ebp,eax
c00165ba:	58                   	pop    eax
c00165bb:	5a                   	pop    edx
c00165bc:	56                   	push   esi
c00165bd:	68 51 45 02 c0       	push   0xc0024551
c00165c2:	e8 61 64 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00165c7:	59                   	pop    ecx
c00165c8:	58                   	pop    eax
c00165c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165cd:	68 63 45 02 c0       	push   0xc0024563
c00165d2:	e8 51 64 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00165d7:	83 c4 10             	add    esp,0x10
c00165da:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00165e0:	0f 86 31 01 00 00    	jbe    c0016717 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00165e6:	c1 e6 0c             	shl    esi,0xc
c00165e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165ec:	8d 04 1e             	lea    eax,[esi+ebx*1]
c00165ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165f3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00165fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165fd:	01 df                	add    edi,ebx
c00165ff:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016602:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016606:	0f 84 08 01 00 00    	je     c0016714 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001660c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016612:	76 05                	jbe    c0016619 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016614:	bf 00 10 00 00       	mov    edi,0x1000
c0016619:	83 ec 0c             	sub    esp,0xc
c001661c:	31 d2                	xor    edx,edx
c001661e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016625:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016627:	8d 44 24 28          	lea    eax,[esp+0x28]
c001662b:	50                   	push   eax
c001662c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016630:	56                   	push   esi
c0016631:	52                   	push   edx
c0016632:	57                   	push   edi
c0016633:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001663a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001663d:	83 c4 20             	add    esp,0x20
c0016640:	85 c0                	test   eax,eax
c0016642:	74 0a                	je     c001664e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016644:	53                   	push   ebx
c0016645:	53                   	push   ebx
c0016646:	50                   	push   eax
c0016647:	68 75 45 02 c0       	push   0xc0024575
c001664c:	eb 0f                	jmp    c001665d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001664e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016652:	74 20                	je     c0016674 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016654:	51                   	push   ecx
c0016655:	51                   	push   ecx
c0016656:	6a 00                	push   0x0
c0016658:	68 a0 45 02 c0       	push   0xc00245a0
c001665d:	e8 c6 63 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0016662:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016665:	e8 13 53 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c001666a:	83 c4 10             	add    esp,0x10
c001666d:	31 c0                	xor    eax,eax
c001666f:	e9 68 01 00 00       	jmp    c00167dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016674:	fa                   	cli    
c0016675:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c001667b:	e8 3f 37 ff ff       	call   c0009dbf <Phys::allocatePage()>
c0016680:	6a 07                	push   0x7
c0016682:	89 c7                	mov    edi,eax
c0016684:	55                   	push   ebp
c0016685:	50                   	push   eax
c0016686:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001668b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001668e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016694:	e8 5b 56 ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016699:	83 c4 0c             	add    esp,0xc
c001669c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166a9:	6a 00                	push   0x0
c00166ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166b3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166b9:	e8 90 54 ff ff       	call   c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>
c00166be:	58                   	pop    eax
c00166bf:	5a                   	pop    edx
c00166c0:	68 07 0c 00 00       	push   0xc07
c00166c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00166c9:	57                   	push   edi
c00166ca:	89 ef                	mov    edi,ebp
c00166cc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00166d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166d9:	6a 00                	push   0x0
c00166db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166e9:	e8 c2 59 ff ff       	call   c000c0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00166ee:	b9 00 10 00 00       	mov    ecx,0x1000
c00166f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00166f5:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00166fa:	83 c4 20             	add    esp,0x20
c00166fd:	48                   	dec    eax
c00166fe:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0016703:	85 c0                	test   eax,eax
c0016705:	75 01                	jne    c0016708 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016707:	fb                   	sti    
c0016708:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001670f:	e9 df fe ff ff       	jmp    c00165f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016714:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016717:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001671f:	0f 86 a9 00 00 00    	jbe    c00167ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016725:	fa                   	cli    
c0016726:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c001672c:	51                   	push   ecx
c001672d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016734:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001673a:	6a 00                	push   0x0
c001673c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016741:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016744:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001674a:	e8 ff 53 ff ff       	call   c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>
c001674f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016753:	c1 e6 0c             	shl    esi,0xc
c0016756:	01 de                	add    esi,ebx
c0016758:	83 c4 10             	add    esp,0x10
c001675b:	39 de                	cmp    esi,ebx
c001675d:	74 61                	je     c00167c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001675f:	e8 5b 36 ff ff       	call   c0009dbf <Phys::allocatePage()>
c0016764:	6a 07                	push   0x7
c0016766:	89 c7                	mov    edi,eax
c0016768:	55                   	push   ebp
c0016769:	50                   	push   eax
c001676a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016772:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016778:	e8 77 55 ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001677d:	58                   	pop    eax
c001677e:	5a                   	pop    edx
c001677f:	68 07 0c 00 00       	push   0xc07
c0016784:	53                   	push   ebx
c0016785:	81 c3 00 10 00 00    	add    ebx,0x1000
c001678b:	57                   	push   edi
c001678c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016793:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016799:	6a 00                	push   0x0
c001679b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167a9:	e8 02 59 ff ff       	call   c000c0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167ae:	83 c4 1c             	add    esp,0x1c
c00167b1:	68 00 10 00 00       	push   0x1000
c00167b6:	6a 00                	push   0x0
c00167b8:	55                   	push   ebp
c00167b9:	e8 c6 9e fe ff       	call   c0000684 <memset>
c00167be:	eb 98                	jmp    c0016758 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00167c0:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00167c5:	48                   	dec    eax
c00167c6:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00167cb:	75 01                	jne    c00167ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167cd:	fb                   	sti    
c00167ce:	83 ec 0c             	sub    esp,0xc
c00167d1:	55                   	push   ebp
c00167d2:	e8 a6 51 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	b0 01                	mov    al,0x1
c00167dc:	81 c4 2c 10 00 00    	add    esp,0x102c
c00167e2:	5b                   	pop    ebx
c00167e3:	5e                   	pop    esi
c00167e4:	5f                   	pop    edi
c00167e5:	5d                   	pop    ebp
c00167e6:	c3                   	ret    

c00167e7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00167e7:	55                   	push   ebp
c00167e8:	57                   	push   edi
c00167e9:	56                   	push   esi
c00167ea:	53                   	push   ebx
c00167eb:	83 ec 48             	sub    esp,0x48
c00167ee:	68 14 01 00 00       	push   0x114
c00167f3:	e8 cb 31 ff ff       	call   c00099c3 <malloc>
c00167f8:	83 c4 0c             	add    esp,0xc
c00167fb:	89 c6                	mov    esi,eax
c00167fd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016801:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016805:	50                   	push   eax
c0016806:	e8 87 67 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c001680b:	58                   	pop    eax
c001680c:	5a                   	pop    edx
c001680d:	6a 01                	push   0x1
c001680f:	56                   	push   esi
c0016810:	e8 e1 67 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	85 c0                	test   eax,eax
c001681a:	0f 85 47 01 00 00    	jne    c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016820:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016828:	83 ec 0c             	sub    esp,0xc
c001682b:	6a 34                	push   0x34
c001682d:	e8 91 31 ff ff       	call   c00099c3 <malloc>
c0016832:	89 c3                	mov    ebx,eax
c0016834:	58                   	pop    eax
c0016835:	8b 06                	mov    eax,DWORD PTR [esi]
c0016837:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001683b:	57                   	push   edi
c001683c:	53                   	push   ebx
c001683d:	6a 00                	push   0x0
c001683f:	6a 34                	push   0x34
c0016841:	56                   	push   esi
c0016842:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016845:	83 c4 20             	add    esp,0x20
c0016848:	85 c0                	test   eax,eax
c001684a:	0f 85 17 01 00 00    	jne    c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016850:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016856:	0f 85 0b 01 00 00    	jne    c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001685c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001685f:	85 c0                	test   eax,eax
c0016861:	0f 84 00 01 00 00    	je     c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016867:	31 d2                	xor    edx,edx
c0016869:	55                   	push   ebp
c001686a:	52                   	push   edx
c001686b:	50                   	push   eax
c001686c:	56                   	push   esi
c001686d:	e8 42 68 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016872:	83 c4 10             	add    esp,0x10
c0016875:	85 c0                	test   eax,eax
c0016877:	0f 85 ea 00 00 00    	jne    c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001687d:	83 ec 0c             	sub    esp,0xc
c0016880:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016883:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016887:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001688b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001688f:	0f af c2             	imul   eax,edx
c0016892:	50                   	push   eax
c0016893:	e8 2b 31 ff ff       	call   c00099c3 <malloc>
c0016898:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001689a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001689e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168a5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168a9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168ad:	0f af c2             	imul   eax,edx
c00168b0:	99                   	cdq    
c00168b1:	52                   	push   edx
c00168b2:	50                   	push   eax
c00168b3:	56                   	push   esi
c00168b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168ba:	83 c4 20             	add    esp,0x20
c00168bd:	85 c0                	test   eax,eax
c00168bf:	0f 84 a2 00 00 00    	je     c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168c5:	31 d2                	xor    edx,edx
c00168c7:	51                   	push   ecx
c00168c8:	52                   	push   edx
c00168c9:	50                   	push   eax
c00168ca:	56                   	push   esi
c00168cb:	e8 e4 67 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	85 c0                	test   eax,eax
c00168d5:	0f 85 8c 00 00 00    	jne    c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168db:	83 ec 0c             	sub    esp,0xc
c00168de:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00168e2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00168e6:	31 ed                	xor    ebp,ebp
c00168e8:	0f af c2             	imul   eax,edx
c00168eb:	50                   	push   eax
c00168ec:	e8 d2 30 ff ff       	call   c00099c3 <malloc>
c00168f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00168f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016902:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016906:	0f af c2             	imul   eax,edx
c0016909:	99                   	cdq    
c001690a:	52                   	push   edx
c001690b:	50                   	push   eax
c001690c:	56                   	push   esi
c001690d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016910:	83 c4 20             	add    esp,0x20
c0016913:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001691b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001691f:	0f 86 80 00 00 00    	jbe    c00169a5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016925:	0f b7 fd             	movzx  edi,bp
c0016928:	c1 e7 05             	shl    edi,0x5
c001692b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001692f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016932:	75 6b                	jne    c001699f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016934:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016937:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001693b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001693e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016942:	52                   	push   edx
c0016943:	31 d2                	xor    edx,edx
c0016945:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016948:	52                   	push   edx
c0016949:	50                   	push   eax
c001694a:	56                   	push   esi
c001694b:	e8 64 67 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016950:	83 c4 10             	add    esp,0x10
c0016953:	85 c0                	test   eax,eax
c0016955:	74 17                	je     c001696e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016957:	83 ec 0c             	sub    esp,0xc
c001695a:	68 cc 45 02 c0       	push   0xc00245cc
c001695f:	e8 c4 60 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	31 c0                	xor    eax,eax
c0016969:	e9 87 00 00 00       	jmp    c00169f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016974:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016977:	50                   	push   eax
c0016978:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001697c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016980:	56                   	push   esi
c0016981:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016985:	e8 b3 fb ff ff       	call   c001653d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001698a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001698e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016992:	83 c4 20             	add    esp,0x20
c0016995:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016999:	73 04                	jae    c001699f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001699b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001699f:	45                   	inc    ebp
c00169a0:	e9 76 ff ff ff       	jmp    c001691b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169a5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169b1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00169b7:	83 ec 0c             	sub    esp,0xc
c00169ba:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00169c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00169c5:	05 00 10 00 00       	add    eax,0x1000
c00169ca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d1:	e8 fd 2f ff ff       	call   c00099d3 <free>
c00169d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169d9:	e8 f5 2f ff ff       	call   c00099d3 <free>
c00169de:	58                   	pop    eax
c00169df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169e3:	e8 eb 2f ff ff       	call   c00099d3 <free>
c00169e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00169eb:	e8 64 66 ff ff       	call   c000d054 <File::close()>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	b0 01                	mov    al,0x1
c00169f5:	83 c4 3c             	add    esp,0x3c
c00169f8:	5b                   	pop    ebx
c00169f9:	5e                   	pop    esi
c00169fa:	5f                   	pop    edi
c00169fb:	5d                   	pop    ebp
c00169fc:	c3                   	ret    

c00169fd <Thr::runtimeReferenceHelper()>:
c00169fd:	83 ec 18             	sub    esp,0x18
c0016a00:	68 d4 45 02 c0       	push   0xc00245d4
c0016a05:	e8 1e 60 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0016a0a:	fa                   	cli    
c0016a0b:	83 c4 10             	add    esp,0x10
c0016a0e:	eb fe                	jmp    c0016a0e <Thr::runtimeReferenceHelper()+0x11>

c0016a10 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a10:	57                   	push   edi
c0016a11:	56                   	push   esi
c0016a12:	53                   	push   ebx
c0016a13:	31 db                	xor    ebx,ebx
c0016a15:	39 1d 40 78 02 c0    	cmp    DWORD PTR ds:0xc0027840,ebx
c0016a1b:	7e 3c                	jle    c0016a59 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a1d:	8b 34 9d c0 77 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8840]
c0016a24:	31 ff                	xor    edi,edi
c0016a26:	39 3c 9d c0 76 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8940],edi
c0016a2d:	7e 27                	jle    c0016a56 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a2f:	50                   	push   eax
c0016a30:	50                   	push   eax
c0016a31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a35:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a37:	03 04 9d 40 77 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd88c0]
c0016a3e:	50                   	push   eax
c0016a3f:	e8 88 9d fe ff       	call   c00007cc <strcmp>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	85 c0                	test   eax,eax
c0016a49:	75 05                	jne    c0016a50 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a4e:	eb 0b                	jmp    c0016a5b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a50:	83 c6 10             	add    esi,0x10
c0016a53:	47                   	inc    edi
c0016a54:	eb d0                	jmp    c0016a26 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a56:	43                   	inc    ebx
c0016a57:	eb bc                	jmp    c0016a15 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a59:	31 c0                	xor    eax,eax
c0016a5b:	5b                   	pop    ebx
c0016a5c:	5e                   	pop    esi
c0016a5d:	5f                   	pop    edi
c0016a5e:	c3                   	ret    

c0016a5f <Thr::loadKernelSymbolTable(char const*)>:
c0016a5f:	55                   	push   ebp
c0016a60:	57                   	push   edi
c0016a61:	56                   	push   esi
c0016a62:	53                   	push   ebx
c0016a63:	83 ec 68             	sub    esp,0x68
c0016a66:	8b 35 90 78 02 c0    	mov    esi,DWORD PTR ds:0xc0027890
c0016a6c:	68 14 01 00 00       	push   0x114
c0016a71:	e8 4d 2f ff ff       	call   c00099c3 <malloc>
c0016a76:	83 c4 0c             	add    esp,0xc
c0016a79:	89 c3                	mov    ebx,eax
c0016a7b:	56                   	push   esi
c0016a7c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016a80:	50                   	push   eax
c0016a81:	e8 0c 65 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016a86:	5e                   	pop    esi
c0016a87:	5f                   	pop    edi
c0016a88:	6a 01                	push   0x1
c0016a8a:	53                   	push   ebx
c0016a8b:	e8 66 65 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	85 c0                	test   eax,eax
c0016a95:	74 0a                	je     c0016aa1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016a97:	83 ec 0c             	sub    esp,0xc
c0016a9a:	68 f6 45 02 c0       	push   0xc00245f6
c0016a9f:	eb 34                	jmp    c0016ad5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016aa1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016aa9:	83 ec 0c             	sub    esp,0xc
c0016aac:	6a 34                	push   0x34
c0016aae:	e8 10 2f ff ff       	call   c00099c3 <malloc>
c0016ab3:	59                   	pop    ecx
c0016ab4:	89 c7                	mov    edi,eax
c0016ab6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016aba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016abc:	56                   	push   esi
c0016abd:	57                   	push   edi
c0016abe:	6a 00                	push   0x0
c0016ac0:	6a 34                	push   0x34
c0016ac2:	53                   	push   ebx
c0016ac3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ac6:	83 c4 20             	add    esp,0x20
c0016ac9:	85 c0                	test   eax,eax
c0016acb:	74 17                	je     c0016ae4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016acd:	83 ec 0c             	sub    esp,0xc
c0016ad0:	68 0d 46 02 c0       	push   0xc002460d
c0016ad5:	e8 0f d8 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	31 c0                	xor    eax,eax
c0016adf:	e9 31 02 00 00       	jmp    c0016d15 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016ae4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016aea:	75 e1                	jne    c0016acd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016aec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016aef:	85 c0                	test   eax,eax
c0016af1:	74 da                	je     c0016acd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016af3:	52                   	push   edx
c0016af4:	31 d2                	xor    edx,edx
c0016af6:	52                   	push   edx
c0016af7:	50                   	push   eax
c0016af8:	53                   	push   ebx
c0016af9:	e8 b6 65 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016afe:	83 c4 10             	add    esp,0x10
c0016b01:	85 c0                	test   eax,eax
c0016b03:	75 c8                	jne    c0016acd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b05:	83 ec 0c             	sub    esp,0xc
c0016b08:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b10:	31 ed                	xor    ebp,ebp
c0016b12:	0f af c2             	imul   eax,edx
c0016b15:	50                   	push   eax
c0016b16:	e8 a8 2e ff ff       	call   c00099c3 <malloc>
c0016b1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b21:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b30:	0f af c2             	imul   eax,edx
c0016b33:	99                   	cdq    
c0016b34:	52                   	push   edx
c0016b35:	50                   	push   eax
c0016b36:	53                   	push   ebx
c0016b37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b3a:	83 c4 20             	add    esp,0x20
c0016b3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b5d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016b61:	0f 86 aa 00 00 00    	jbe    c0016c11 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016b67:	0f b7 f5             	movzx  esi,bp
c0016b6a:	6b f6 28             	imul   esi,esi,0x28
c0016b6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016b71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016b74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b78:	50                   	push   eax
c0016b79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b7d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016b81:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b83:	6b c0 28             	imul   eax,eax,0x28
c0016b86:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016b8a:	89 d0                	mov    eax,edx
c0016b8c:	31 d2                	xor    edx,edx
c0016b8e:	52                   	push   edx
c0016b8f:	50                   	push   eax
c0016b90:	53                   	push   ebx
c0016b91:	e8 1e 65 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016b96:	83 c4 0c             	add    esp,0xc
c0016b99:	6a 20                	push   0x20
c0016b9b:	6a 00                	push   0x0
c0016b9d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016ba1:	52                   	push   edx
c0016ba2:	e8 dd 9a fe ff       	call   c0000684 <memset>
c0016ba7:	58                   	pop    eax
c0016ba8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016baa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bae:	51                   	push   ecx
c0016baf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bb3:	52                   	push   edx
c0016bb4:	6a 00                	push   0x0
c0016bb6:	6a 1f                	push   0x1f
c0016bb8:	53                   	push   ebx
c0016bb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bbc:	83 c4 18             	add    esp,0x18
c0016bbf:	68 24 46 02 c0       	push   0xc0024624
c0016bc4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bc8:	52                   	push   edx
c0016bc9:	e8 fe 9b fe ff       	call   c00007cc <strcmp>
c0016bce:	83 c4 10             	add    esp,0x10
c0016bd1:	85 c0                	test   eax,eax
c0016bd3:	75 0f                	jne    c0016be4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016bd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016be0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016be4:	50                   	push   eax
c0016be5:	50                   	push   eax
c0016be6:	68 2c 46 02 c0       	push   0xc002462c
c0016beb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016bef:	50                   	push   eax
c0016bf0:	e8 d7 9b fe ff       	call   c00007cc <strcmp>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	85 c0                	test   eax,eax
c0016bfa:	75 0f                	jne    c0016c0b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016bfc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c0b:	45                   	inc    ebp
c0016c0c:	e9 4c ff ff ff       	jmp    c0016b5d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c16:	75 10                	jne    c0016c28 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	68 34 46 02 c0       	push   0xc0024634
c0016c20:	e8 c4 d6 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c2d:	75 10                	jne    c0016c3f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c2f:	83 ec 0c             	sub    esp,0xc
c0016c32:	68 34 46 02 c0       	push   0xc0024634
c0016c37:	e8 ad d6 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0016c3c:	83 c4 10             	add    esp,0x10
c0016c3f:	31 d2                	xor    edx,edx
c0016c41:	50                   	push   eax
c0016c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c46:	52                   	push   edx
c0016c47:	50                   	push   eax
c0016c48:	53                   	push   ebx
c0016c49:	e8 66 64 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016c4e:	5a                   	pop    edx
c0016c4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c53:	e8 6b 2d ff ff       	call   c00099c3 <malloc>
c0016c58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c60:	31 c9                	xor    ecx,ecx
c0016c62:	5e                   	pop    esi
c0016c63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c65:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016c69:	55                   	push   ebp
c0016c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c6e:	51                   	push   ecx
c0016c6f:	52                   	push   edx
c0016c70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c74:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016c78:	53                   	push   ebx
c0016c79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c7c:	83 c4 14             	add    esp,0x14
c0016c7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c83:	e8 3b 2d ff ff       	call   c00099c3 <malloc>
c0016c88:	89 c6                	mov    esi,eax
c0016c8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c8f:	56                   	push   esi
c0016c90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016c94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016c98:	51                   	push   ecx
c0016c99:	52                   	push   edx
c0016c9a:	53                   	push   ebx
c0016c9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ca2:	8b 15 40 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027840
c0016ca8:	83 c4 1c             	add    esp,0x1c
c0016cab:	c1 e8 04             	shr    eax,0x4
c0016cae:	89 04 95 c0 76 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8940],eax
c0016cb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cb9:	31 d2                	xor    edx,edx
c0016cbb:	52                   	push   edx
c0016cbc:	50                   	push   eax
c0016cbd:	53                   	push   ebx
c0016cbe:	e8 f1 63 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016cc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016cc5:	31 d2                	xor    edx,edx
c0016cc7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cca:	56                   	push   esi
c0016ccb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ccf:	52                   	push   edx
c0016cd0:	50                   	push   eax
c0016cd1:	53                   	push   ebx
c0016cd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cd5:	83 c4 14             	add    esp,0x14
c0016cd8:	53                   	push   ebx
c0016cd9:	e8 76 63 ff ff       	call   c000d054 <File::close()>
c0016cde:	5d                   	pop    ebp
c0016cdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ce3:	e8 eb 2c ff ff       	call   c00099d3 <free>
c0016ce8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016ceb:	e8 e3 2c ff ff       	call   c00099d3 <free>
c0016cf0:	a1 40 78 02 c0       	mov    eax,ds:0xc0027840
c0016cf5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016cf9:	8d 50 01             	lea    edx,[eax+0x1]
c0016cfc:	89 0c 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],ecx
c0016d03:	89 34 85 40 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88c0],esi
c0016d0a:	89 15 40 78 02 c0    	mov    DWORD PTR ds:0xc0027840,edx
c0016d10:	83 c4 10             	add    esp,0x10
c0016d13:	b0 01                	mov    al,0x1
c0016d15:	83 c4 5c             	add    esp,0x5c
c0016d18:	5b                   	pop    ebx
c0016d19:	5e                   	pop    esi
c0016d1a:	5f                   	pop    edi
c0016d1b:	5d                   	pop    ebp
c0016d1c:	c3                   	ret    

c0016d1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d1d:	55                   	push   ebp
c0016d1e:	57                   	push   edi
c0016d1f:	56                   	push   esi
c0016d20:	53                   	push   ebx
c0016d21:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d27:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d2e:	8b 1d 90 78 02 c0    	mov    ebx,DWORD PTR ds:0xc0027890
c0016d34:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d38:	68 14 01 00 00       	push   0x114
c0016d3d:	e8 81 2c ff ff       	call   c00099c3 <malloc>
c0016d42:	83 c4 0c             	add    esp,0xc
c0016d45:	89 c5                	mov    ebp,eax
c0016d47:	53                   	push   ebx
c0016d48:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d4f:	50                   	push   eax
c0016d50:	e8 3d 62 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016d55:	5e                   	pop    esi
c0016d56:	5f                   	pop    edi
c0016d57:	6a 01                	push   0x1
c0016d59:	55                   	push   ebp
c0016d5a:	e8 97 62 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0016d5f:	83 c4 10             	add    esp,0x10
c0016d62:	85 c0                	test   eax,eax
c0016d64:	0f 85 a7 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d6a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016d72:	83 ec 0c             	sub    esp,0xc
c0016d75:	6a 34                	push   0x34
c0016d77:	e8 47 2c ff ff       	call   c00099c3 <malloc>
c0016d7c:	5b                   	pop    ebx
c0016d7d:	89 c7                	mov    edi,eax
c0016d7f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016d83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d86:	53                   	push   ebx
c0016d87:	57                   	push   edi
c0016d88:	6a 00                	push   0x0
c0016d8a:	6a 34                	push   0x34
c0016d8c:	55                   	push   ebp
c0016d8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d90:	83 c4 20             	add    esp,0x20
c0016d93:	85 c0                	test   eax,eax
c0016d95:	0f 85 76 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d9b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016da1:	0f 85 6a 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016da7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016daa:	85 c0                	test   eax,eax
c0016dac:	0f 84 5f 06 00 00    	je     c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016db2:	31 d2                	xor    edx,edx
c0016db4:	51                   	push   ecx
c0016db5:	52                   	push   edx
c0016db6:	50                   	push   eax
c0016db7:	55                   	push   ebp
c0016db8:	e8 f7 62 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	85 c0                	test   eax,eax
c0016dc2:	0f 85 49 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016dce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016dd2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016dd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016dda:	0f af c2             	imul   eax,edx
c0016ddd:	50                   	push   eax
c0016dde:	e8 e0 2b ff ff       	call   c00099c3 <malloc>
c0016de3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016de6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016dea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ded:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016df1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016df5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016df9:	0f af c2             	imul   eax,edx
c0016dfc:	99                   	cdq    
c0016dfd:	52                   	push   edx
c0016dfe:	50                   	push   eax
c0016dff:	55                   	push   ebp
c0016e00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e03:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e06:	83 c4 20             	add    esp,0x20
c0016e09:	85 c0                	test   eax,eax
c0016e0b:	0f 84 00 06 00 00    	je     c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e11:	52                   	push   edx
c0016e12:	31 d2                	xor    edx,edx
c0016e14:	52                   	push   edx
c0016e15:	50                   	push   eax
c0016e16:	55                   	push   ebp
c0016e17:	e8 98 62 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	85 c0                	test   eax,eax
c0016e21:	0f 85 ea 05 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e27:	83 ec 0c             	sub    esp,0xc
c0016e2a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e2e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e32:	31 f6                	xor    esi,esi
c0016e34:	0f af c2             	imul   eax,edx
c0016e37:	50                   	push   eax
c0016e38:	e8 86 2b ff ff       	call   c00099c3 <malloc>
c0016e3d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e4b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e4f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e53:	0f af c2             	imul   eax,edx
c0016e56:	99                   	cdq    
c0016e57:	52                   	push   edx
c0016e58:	50                   	push   eax
c0016e59:	55                   	push   ebp
c0016e5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e5d:	83 c4 20             	add    esp,0x20
c0016e60:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016e64:	0f 86 8a 00 00 00    	jbe    c0016ef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016e6a:	0f b7 de             	movzx  ebx,si
c0016e6d:	c1 e3 05             	shl    ebx,0x5
c0016e70:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016e74:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016e77:	75 75                	jne    c0016eee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016e79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e7c:	31 d2                	xor    edx,edx
c0016e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016e85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e89:	50                   	push   eax
c0016e8a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016e8d:	52                   	push   edx
c0016e8e:	50                   	push   eax
c0016e8f:	55                   	push   ebp
c0016e90:	e8 1f 62 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	85 c0                	test   eax,eax
c0016e9a:	0f 85 71 05 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ea0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ea7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016eaa:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016eae:	31 d2                	xor    edx,edx
c0016eb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016eb4:	83 ec 0c             	sub    esp,0xc
c0016eb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ebb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ec2:	50                   	push   eax
c0016ec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ecb:	52                   	push   edx
c0016ecc:	50                   	push   eax
c0016ecd:	55                   	push   ebp
c0016ece:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ed1:	83 c4 1c             	add    esp,0x1c
c0016ed4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ed7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016eda:	50                   	push   eax
c0016edb:	6a 00                	push   0x0
c0016edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016ee5:	50                   	push   eax
c0016ee6:	e8 99 97 fe ff       	call   c0000684 <memset>
c0016eeb:	83 c4 10             	add    esp,0x10
c0016eee:	46                   	inc    esi
c0016eef:	e9 6c ff ff ff       	jmp    c0016e60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016ef4:	53                   	push   ebx
c0016ef5:	31 db                	xor    ebx,ebx
c0016ef7:	68 00 01 00 00       	push   0x100
c0016efc:	6a 00                	push   0x0
c0016efe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f02:	50                   	push   eax
c0016f03:	e8 7c 97 fe ff       	call   c0000684 <memset>
c0016f08:	83 c4 0c             	add    esp,0xc
c0016f0b:	68 00 01 00 00       	push   0x100
c0016f10:	6a 00                	push   0x0
c0016f12:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f19:	50                   	push   eax
c0016f1a:	e8 65 97 fe ff       	call   c0000684 <memset>
c0016f1f:	83 c4 10             	add    esp,0x10
c0016f22:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f2a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f32:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f42:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f4a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f4e:	0f 86 30 01 00 00    	jbe    c0017084 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f54:	0f b7 f3             	movzx  esi,bx
c0016f57:	6b f6 28             	imul   esi,esi,0x28
c0016f5a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016f5e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016f61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f65:	52                   	push   edx
c0016f66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f6a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016f6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f70:	6b d2 28             	imul   edx,edx,0x28
c0016f73:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016f77:	31 d2                	xor    edx,edx
c0016f79:	52                   	push   edx
c0016f7a:	50                   	push   eax
c0016f7b:	55                   	push   ebp
c0016f7c:	e8 33 61 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016f81:	83 c4 0c             	add    esp,0xc
c0016f84:	6a 20                	push   0x20
c0016f86:	6a 00                	push   0x0
c0016f88:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016f8f:	51                   	push   ecx
c0016f90:	e8 ef 96 fe ff       	call   c0000684 <memset>
c0016f95:	59                   	pop    ecx
c0016f96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f99:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016f9d:	52                   	push   edx
c0016f9e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fa5:	51                   	push   ecx
c0016fa6:	6a 00                	push   0x0
c0016fa8:	6a 1f                	push   0x1f
c0016faa:	55                   	push   ebp
c0016fab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fae:	83 c4 1c             	add    esp,0x1c
c0016fb1:	6a 09                	push   0x9
c0016fb3:	68 4e 46 02 c0       	push   0xc002464e
c0016fb8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fbf:	51                   	push   ecx
c0016fc0:	e8 bb 95 fe ff       	call   c0000580 <memcmp>
c0016fc5:	83 c4 10             	add    esp,0x10
c0016fc8:	85 c0                	test   eax,eax
c0016fca:	75 21                	jne    c0016fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fd4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016fd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016fdc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016fdf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016fe6:	89 d0                	mov    eax,edx
c0016fe8:	40                   	inc    eax
c0016fe9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fed:	50                   	push   eax
c0016fee:	6a 09                	push   0x9
c0016ff0:	68 58 46 02 c0       	push   0xc0024658
c0016ff5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ffc:	50                   	push   eax
c0016ffd:	e8 7e 95 fe ff       	call   c0000580 <memcmp>
c0017002:	83 c4 10             	add    esp,0x10
c0017005:	85 c0                	test   eax,eax
c0017007:	75 21                	jne    c001702a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001700d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017011:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017015:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017019:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001701c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017023:	89 d0                	mov    eax,edx
c0017025:	40                   	inc    eax
c0017026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001702a:	50                   	push   eax
c001702b:	50                   	push   eax
c001702c:	68 24 46 02 c0       	push   0xc0024624
c0017031:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017038:	50                   	push   eax
c0017039:	e8 8e 97 fe ff       	call   c00007cc <strcmp>
c001703e:	83 c4 10             	add    esp,0x10
c0017041:	85 c0                	test   eax,eax
c0017043:	75 0f                	jne    c0017054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017045:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017048:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001704c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017054:	50                   	push   eax
c0017055:	50                   	push   eax
c0017056:	68 2c 46 02 c0       	push   0xc002462c
c001705b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017062:	50                   	push   eax
c0017063:	e8 64 97 fe ff       	call   c00007cc <strcmp>
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	85 c0                	test   eax,eax
c001706d:	75 0f                	jne    c001707e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001706f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017072:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017076:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001707a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001707e:	43                   	inc    ebx
c001707f:	e9 c6 fe ff ff       	jmp    c0016f4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017084:	31 d2                	xor    edx,edx
c0017086:	50                   	push   eax
c0017087:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001708b:	52                   	push   edx
c001708c:	50                   	push   eax
c001708d:	55                   	push   ebp
c001708e:	e8 21 60 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0017093:	58                   	pop    eax
c0017094:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017098:	e8 26 29 ff ff       	call   c00099c3 <malloc>
c001709d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170a4:	31 d2                	xor    edx,edx
c00170a6:	58                   	pop    eax
c00170a7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170ab:	53                   	push   ebx
c00170ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b4:	52                   	push   edx
c00170b5:	50                   	push   eax
c00170b6:	55                   	push   ebp
c00170b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170ba:	83 c4 14             	add    esp,0x14
c00170bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170c1:	e8 fd 28 ff ff       	call   c00099c3 <malloc>
c00170c6:	31 d2                	xor    edx,edx
c00170c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170cc:	83 c4 0c             	add    esp,0xc
c00170cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170d3:	52                   	push   edx
c00170d4:	50                   	push   eax
c00170d5:	55                   	push   ebp
c00170d6:	e8 d9 5f ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c00170db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170de:	31 d2                	xor    edx,edx
c00170e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00170e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170eb:	52                   	push   edx
c00170ec:	50                   	push   eax
c00170ed:	55                   	push   ebp
c00170ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170f1:	83 c4 20             	add    esp,0x20
c00170f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00170fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017100:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017104:	0f 84 0b 03 00 00    	je     c0017415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001710a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017111:	31 d2                	xor    edx,edx
c0017113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017117:	c1 e8 03             	shr    eax,0x3
c001711a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001711e:	51                   	push   ecx
c001711f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017123:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017127:	52                   	push   edx
c0017128:	50                   	push   eax
c0017129:	55                   	push   ebp
c001712a:	e8 85 5f ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c001712f:	5b                   	pop    ebx
c0017130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017134:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001713b:	e8 83 28 ff ff       	call   c00099c3 <malloc>
c0017140:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017143:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017147:	31 d2                	xor    edx,edx
c0017149:	5e                   	pop    esi
c001714a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001714e:	50                   	push   eax
c001714f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017153:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017157:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001715e:	52                   	push   edx
c001715f:	50                   	push   eax
c0017160:	55                   	push   ebp
c0017161:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017164:	83 c4 20             	add    esp,0x20
c0017167:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001716f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017173:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017177:	0f 8d 7c 02 00 00    	jge    c00173f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001717d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017185:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001718a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001718d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017195:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017199:	89 d8                	mov    eax,ebx
c001719b:	c1 e8 08             	shr    eax,0x8
c001719e:	89 c6                	mov    esi,eax
c00171a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171a4:	c1 e6 04             	shl    esi,0x4
c00171a7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171ab:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171ae:	85 d2                	test   edx,edx
c00171b0:	0f 85 bf 00 00 00    	jne    c0017275 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171b6:	83 ec 0c             	sub    esp,0xc
c00171b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171bd:	03 06                	add    eax,DWORD PTR [esi]
c00171bf:	50                   	push   eax
c00171c0:	e8 4b f8 ff ff       	call   c0016a10 <Thr::getAddressOfKernelSymbol(char const*)>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	89 c2                	mov    edx,eax
c00171ca:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00171cf:	85 c0                	test   eax,eax
c00171d1:	0f 85 9e 00 00 00    	jne    c0017275 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171d7:	83 ec 0c             	sub    esp,0xc
c00171da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171de:	03 06                	add    eax,DWORD PTR [esi]
c00171e0:	50                   	push   eax
c00171e1:	e8 2a 17 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c00171e6:	83 c4 10             	add    esp,0x10
c00171e9:	89 c2                	mov    edx,eax
c00171eb:	85 c0                	test   eax,eax
c00171ed:	0f 85 82 00 00 00    	jne    c0017275 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171f7:	50                   	push   eax
c00171f8:	50                   	push   eax
c00171f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171fd:	03 06                	add    eax,DWORD PTR [esi]
c00171ff:	50                   	push   eax
c0017200:	68 62 46 02 c0       	push   0xc0024662
c0017205:	e8 1e 58 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001720a:	58                   	pop    eax
c001720b:	5a                   	pop    edx
c001720c:	68 7c 46 02 c0       	push   0xc002467c
c0017211:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017218:	50                   	push   eax
c0017219:	e8 22 95 fe ff       	call   c0000740 <strcpy>
c001721e:	59                   	pop    ecx
c001721f:	58                   	pop    eax
c0017220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017224:	03 06                	add    eax,DWORD PTR [esi]
c0017226:	50                   	push   eax
c0017227:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001722e:	50                   	push   eax
c001722f:	e8 4c 96 fe ff       	call   c0000880 <strcat>
c0017234:	58                   	pop    eax
c0017235:	5a                   	pop    edx
c0017236:	68 12 47 02 c0       	push   0xc0024712
c001723b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017242:	50                   	push   eax
c0017243:	e8 38 96 fe ff       	call   c0000880 <strcat>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017250:	0f 84 5d 01 00 00    	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017256:	83 ec 0c             	sub    esp,0xc
c0017259:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017260:	50                   	push   eax
c0017261:	e8 83 d0 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001726d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017271:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017275:	80 fb 01             	cmp    bl,0x1
c0017278:	0f 85 88 00 00 00    	jne    c0017306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001727e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017285:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017289:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001728d:	01 ce                	add    esi,ecx
c001728f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017295:	0f 94 c0             	sete   al
c0017298:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001729e:	0f 94 c3             	sete   bl
c00172a1:	09 c3                	or     ebx,eax
c00172a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00172a5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172aa:	74 41                	je     c00172ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172ac:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172af:	84 db                	test   bl,bl
c00172b1:	75 15                	jne    c00172c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172b7:	66 83 f8 0c          	cmp    ax,0xc
c00172bb:	76 05                	jbe    c00172c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00172bd:	b8 0c 00 00 00       	mov    eax,0xc
c00172c2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00172c6:	76 37                	jbe    c00172ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172c8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00172cc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172d1:	0f 84 dc 00 00 00    	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172d7:	83 ec 0c             	sub    esp,0xc
c00172da:	68 93 46 02 c0       	push   0xc0024693
c00172df:	e8 05 d0 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00172eb:	eb 12                	jmp    c00172ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172ed:	01 c1                	add    ecx,eax
c00172ef:	84 db                	test   bl,bl
c00172f1:	75 0c                	jne    c00172ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172f7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00172fb:	77 02                	ja     c00172ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172fd:	01 d1                	add    ecx,edx
c00172ff:	89 0e                	mov    DWORD PTR [esi],ecx
c0017301:	e9 ea 00 00 00       	jmp    c00173f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017306:	80 fb 02             	cmp    bl,0x2
c0017309:	75 7c                	jne    c0017387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001730b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017312:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017316:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001731a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017320:	74 20                	je     c0017342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017322:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017328:	74 18                	je     c0017342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001732a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001732e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017333:	66 83 f8 0e          	cmp    ax,0xe
c0017337:	77 03                	ja     c001733c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017339:	8d 48 fc             	lea    ecx,[eax-0x4]
c001733c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017340:	76 1f                	jbe    c0017361 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017342:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017346:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001734b:	74 66                	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001734d:	83 ec 0c             	sub    esp,0xc
c0017350:	68 af 46 02 c0       	push   0xc00246af
c0017355:	e8 8f cf ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017361:	8b 06                	mov    eax,DWORD PTR [esi]
c0017363:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017368:	74 13                	je     c001737d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001736a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001736e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017375:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017379:	01 c8                	add    eax,ecx
c001737b:	eb 04                	jmp    c0017381 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001737d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017381:	01 c2                	add    edx,eax
c0017383:	89 16                	mov    DWORD PTR [esi],edx
c0017385:	eb 69                	jmp    c00173f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017387:	0f b6 db             	movzx  ebx,bl
c001738a:	50                   	push   eax
c001738b:	50                   	push   eax
c001738c:	53                   	push   ebx
c001738d:	68 cb 46 02 c0       	push   0xc00246cb
c0017392:	e8 91 56 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001739f:	74 12                	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173a1:	83 ec 0c             	sub    esp,0xc
c00173a4:	68 d6 46 02 c0       	push   0xc00246d6
c00173a9:	e8 3b cf ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	eb 3d                	jmp    c00173f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	55                   	push   ebp
c00173b7:	e8 98 5c ff ff       	call   c000d054 <File::close()>
c00173bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173c5:	59                   	pop    ecx
c00173c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173ca:	e8 04 26 ff ff       	call   c00099d3 <free>
c00173cf:	5b                   	pop    ebx
c00173d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173d4:	e8 fa 25 ff ff       	call   c00099d3 <free>
c00173d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173dc:	e8 f2 25 ff ff       	call   c00099d3 <free>
c00173e1:	5e                   	pop    esi
c00173e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173e6:	e8 e8 25 ff ff       	call   c00099d3 <free>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	eb 21                	jmp    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00173f0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00173f4:	e9 76 fd ff ff       	jmp    c001716f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00173f9:	83 ec 0c             	sub    esp,0xc
c00173fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017400:	e8 ce 25 ff ff       	call   c00099d3 <free>
c0017405:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	e9 eb fc ff ff       	jmp    c00170fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017411:	31 c0                	xor    eax,eax
c0017413:	eb 33                	jmp    c0017448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017415:	83 ec 0c             	sub    esp,0xc
c0017418:	55                   	push   ebp
c0017419:	e8 36 5c ff ff       	call   c000d054 <File::close()>
c001741e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017421:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017424:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017427:	58                   	pop    eax
c0017428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001742c:	e8 a2 25 ff ff       	call   c00099d3 <free>
c0017431:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017434:	e8 9a 25 ff ff       	call   c00099d3 <free>
c0017439:	5a                   	pop    edx
c001743a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001743e:	e8 90 25 ff ff       	call   c00099d3 <free>
c0017443:	83 c4 10             	add    esp,0x10
c0017446:	b0 01                	mov    al,0x1
c0017448:	81 c4 5c 03 00 00    	add    esp,0x35c
c001744e:	5b                   	pop    ebx
c001744f:	5e                   	pop    esi
c0017450:	5f                   	pop    edi
c0017451:	5d                   	pop    ebp
c0017452:	c3                   	ret    

c0017453 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017453:	56                   	push   esi
c0017454:	31 d2                	xor    edx,edx
c0017456:	53                   	push   ebx
c0017457:	8b 1d a0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270a0
c001745d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017461:	39 d3                	cmp    ebx,edx
c0017463:	7e 1b                	jle    c0017480 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017465:	8b 04 95 c0 72 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8d40]
c001746c:	39 c8                	cmp    eax,ecx
c001746e:	77 0d                	ja     c001747d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017470:	8b 34 95 c0 70 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8f40]
c0017477:	01 c6                	add    esi,eax
c0017479:	39 ce                	cmp    esi,ecx
c001747b:	77 05                	ja     c0017482 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001747d:	42                   	inc    edx
c001747e:	eb e1                	jmp    c0017461 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017480:	31 c0                	xor    eax,eax
c0017482:	5b                   	pop    ebx
c0017483:	5e                   	pop    esi
c0017484:	c3                   	ret    

c0017485 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017485:	53                   	push   ebx
c0017486:	31 c0                	xor    eax,eax
c0017488:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001748c:	8b 1d a0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270a0
c0017492:	39 c3                	cmp    ebx,eax
c0017494:	7e 22                	jle    c00174b8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017496:	8b 14 85 c0 72 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8d40]
c001749d:	39 ca                	cmp    edx,ecx
c001749f:	77 14                	ja     c00174b5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174a1:	03 14 85 c0 70 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8f40]
c00174a8:	39 ca                	cmp    edx,ecx
c00174aa:	76 09                	jbe    c00174b5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174ac:	8b 04 85 c0 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8b40]
c00174b3:	eb 05                	jmp    c00174ba <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174b5:	40                   	inc    eax
c00174b6:	eb da                	jmp    c0017492 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174b8:	31 c0                	xor    eax,eax
c00174ba:	5b                   	pop    ebx
c00174bb:	c3                   	ret    

c00174bc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174bc:	53                   	push   ebx
c00174bd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00174c1:	53                   	push   ebx
c00174c2:	e8 8c ff ff ff       	call   c0017453 <Thr::getDriverBaseFromAddress(unsigned long)>
c00174c7:	5a                   	pop    edx
c00174c8:	31 d2                	xor    edx,edx
c00174ca:	85 c0                	test   eax,eax
c00174cc:	74 04                	je     c00174d2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00174ce:	89 da                	mov    edx,ebx
c00174d0:	29 c2                	sub    edx,eax
c00174d2:	89 d0                	mov    eax,edx
c00174d4:	5b                   	pop    ebx
c00174d5:	c3                   	ret    

c00174d6 <Thr::loadDLL(char const*, bool)>:
c00174d6:	55                   	push   ebp
c00174d7:	57                   	push   edi
c00174d8:	56                   	push   esi
c00174d9:	53                   	push   ebx
c00174da:	81 ec 34 01 00 00    	sub    esp,0x134
c00174e0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00174e7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00174ee:	56                   	push   esi
c00174ef:	68 ee 46 02 c0       	push   0xc00246ee
c00174f4:	e8 2f 55 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00174f9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017500:	e8 be 24 ff ff       	call   c00099c3 <malloc>
c0017505:	83 c4 0c             	add    esp,0xc
c0017508:	89 c3                	mov    ebx,eax
c001750a:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0017510:	56                   	push   esi
c0017511:	50                   	push   eax
c0017512:	e8 7b 5a ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	85 db                	test   ebx,ebx
c001751c:	75 3c                	jne    c001755a <Thr::loadDLL(char const*, bool)+0x84>
c001751e:	89 f8                	mov    eax,edi
c0017520:	84 c0                	test   al,al
c0017522:	0f 84 d2 01 00 00    	je     c00176fa <Thr::loadDLL(char const*, bool)+0x224>
c0017528:	55                   	push   ebp
c0017529:	55                   	push   ebp
c001752a:	68 ff 46 02 c0       	push   0xc00246ff
c001752f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017533:	55                   	push   ebp
c0017534:	e8 07 92 fe ff       	call   c0000740 <strcpy>
c0017539:	58                   	pop    eax
c001753a:	5a                   	pop    edx
c001753b:	56                   	push   esi
c001753c:	55                   	push   ebp
c001753d:	e8 3e 93 fe ff       	call   c0000880 <strcat>
c0017542:	59                   	pop    ecx
c0017543:	58                   	pop    eax
c0017544:	68 12 47 02 c0       	push   0xc0024712
c0017549:	55                   	push   ebp
c001754a:	e8 31 93 fe ff       	call   c0000880 <strcat>
c001754f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017552:	e8 92 cd ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	51                   	push   ecx
c001755b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001755f:	50                   	push   eax
c0017560:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017564:	50                   	push   eax
c0017565:	53                   	push   ebx
c0017566:	e8 37 5d ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	85 db                	test   ebx,ebx
c0017570:	74 0c                	je     c001757e <Thr::loadDLL(char const*, bool)+0xa8>
c0017572:	83 ec 0c             	sub    esp,0xc
c0017575:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017577:	53                   	push   ebx
c0017578:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017583:	75 0a                	jne    c001758f <Thr::loadDLL(char const*, bool)+0xb9>
c0017585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017589:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001758d:	75 3c                	jne    c00175cb <Thr::loadDLL(char const*, bool)+0xf5>
c001758f:	89 f8                	mov    eax,edi
c0017591:	84 c0                	test   al,al
c0017593:	0f 84 49 01 00 00    	je     c00176e2 <Thr::loadDLL(char const*, bool)+0x20c>
c0017599:	51                   	push   ecx
c001759a:	51                   	push   ecx
c001759b:	68 ff 46 02 c0       	push   0xc00246ff
c00175a0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175a4:	53                   	push   ebx
c00175a5:	e8 96 91 fe ff       	call   c0000740 <strcpy>
c00175aa:	5d                   	pop    ebp
c00175ab:	58                   	pop    eax
c00175ac:	56                   	push   esi
c00175ad:	53                   	push   ebx
c00175ae:	e8 cd 92 fe ff       	call   c0000880 <strcat>
c00175b3:	58                   	pop    eax
c00175b4:	5a                   	pop    edx
c00175b5:	68 12 47 02 c0       	push   0xc0024712
c00175ba:	53                   	push   ebx
c00175bb:	e8 c0 92 fe ff       	call   c0000880 <strcat>
c00175c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175c3:	e8 21 cd ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	52                   	push   edx
c00175cc:	6a 03                	push   0x3
c00175ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00175d6:	05 ff 0f 00 00       	add    eax,0xfff
c00175db:	83 d2 00             	adc    edx,0x0
c00175de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00175e2:	50                   	push   eax
c00175e3:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c00175e9:	e8 08 48 ff ff       	call   c000bdf6 <VAS::allocatePages(int, int)>
c00175ee:	59                   	pop    ecx
c00175ef:	89 c3                	mov    ebx,eax
c00175f1:	5d                   	pop    ebp
c00175f2:	50                   	push   eax
c00175f3:	68 a9 28 02 c0       	push   0xc00228a9
c00175f8:	e8 2b 54 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00175fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0017600:	e8 9b 90 fe ff       	call   c00006a0 <strlen>
c0017605:	8b 2d a0 70 02 c0    	mov    ebp,DWORD PTR ds:0xc00270a0
c001760b:	40                   	inc    eax
c001760c:	89 04 24             	mov    DWORD PTR [esp],eax
c001760f:	e8 af 23 ff ff       	call   c00099c3 <malloc>
c0017614:	89 04 ad c0 74 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8b40],eax
c001761b:	58                   	pop    eax
c001761c:	a1 a0 70 02 c0       	mov    eax,ds:0xc00270a0
c0017621:	5a                   	pop    edx
c0017622:	56                   	push   esi
c0017623:	ff 34 85 c0 74 02 c0 	push   DWORD PTR [eax*4-0x3ffd8b40]
c001762a:	e8 11 91 fe ff       	call   c0000740 <strcpy>
c001762f:	a1 a0 70 02 c0       	mov    eax,ds:0xc00270a0
c0017634:	8d 50 01             	lea    edx,[eax+0x1]
c0017637:	89 1c 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],ebx
c001763e:	89 15 a0 70 02 c0    	mov    DWORD PTR ds:0xc00270a0,edx
c0017644:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017648:	83 c4 0c             	add    esp,0xc
c001764b:	89 14 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],edx
c0017652:	6a 01                	push   0x1
c0017654:	53                   	push   ebx
c0017655:	56                   	push   esi
c0017656:	e8 c2 f6 ff ff       	call   c0016d1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001765b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017667:	0f 85 89 00 00 00    	jne    c00176f6 <Thr::loadDLL(char const*, bool)+0x220>
c001766d:	89 f8                	mov    eax,edi
c001766f:	84 c0                	test   al,al
c0017671:	74 73                	je     c00176e6 <Thr::loadDLL(char const*, bool)+0x210>
c0017673:	83 ec 0c             	sub    esp,0xc
c0017676:	68 14 47 02 c0       	push   0xc0024714
c001767b:	e8 69 cc ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	eb 61                	jmp    c00176e6 <Thr::loadDLL(char const*, bool)+0x210>
c0017685:	50                   	push   eax
c0017686:	50                   	push   eax
c0017687:	89 e8                	mov    eax,ebp
c0017689:	c1 e0 0c             	shl    eax,0xc
c001768c:	01 d8                	add    eax,ebx
c001768e:	50                   	push   eax
c001768f:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c0017695:	e8 c4 42 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	8b 00                	mov    eax,DWORD PTR [eax]
c001769f:	a8 60                	test   al,0x60
c00176a1:	75 11                	jne    c00176b4 <Thr::loadDLL(char const*, bool)+0x1de>
c00176a3:	83 ec 0c             	sub    esp,0xc
c00176a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176ab:	50                   	push   eax
c00176ac:	e8 9d 26 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	45                   	inc    ebp
c00176b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176bd:	05 ff 0f 00 00       	add    eax,0xfff
c00176c2:	bf 00 00 00 00       	mov    edi,0x0
c00176c7:	83 d2 00             	adc    edx,0x0
c00176ca:	0f ac d0 0c          	shrd   eax,edx,0xc
c00176ce:	c1 ea 0c             	shr    edx,0xc
c00176d1:	39 c5                	cmp    ebp,eax
c00176d3:	89 d1                	mov    ecx,edx
c00176d5:	89 f8                	mov    eax,edi
c00176d7:	19 c8                	sbb    eax,ecx
c00176d9:	72 aa                	jb     c0017685 <Thr::loadDLL(char const*, bool)+0x1af>
c00176db:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176e0:	75 18                	jne    c00176fa <Thr::loadDLL(char const*, bool)+0x224>
c00176e2:	31 db                	xor    ebx,ebx
c00176e4:	eb 14                	jmp    c00176fa <Thr::loadDLL(char const*, bool)+0x224>
c00176e6:	83 ec 0c             	sub    esp,0xc
c00176e9:	68 33 47 02 c0       	push   0xc0024733
c00176ee:	e8 f6 cb ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00176f3:	83 c4 10             	add    esp,0x10
c00176f6:	31 ed                	xor    ebp,ebp
c00176f8:	eb bb                	jmp    c00176b5 <Thr::loadDLL(char const*, bool)+0x1df>
c00176fa:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017700:	89 d8                	mov    eax,ebx
c0017702:	5b                   	pop    ebx
c0017703:	5e                   	pop    esi
c0017704:	5f                   	pop    edi
c0017705:	5d                   	pop    ebp
c0017706:	c3                   	ret    

c0017707 <Thr::executeDLL(unsigned long, void*)>:
c0017707:	56                   	push   esi
c0017708:	53                   	push   ebx
c0017709:	52                   	push   edx
c001770a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001770e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017712:	85 db                	test   ebx,ebx
c0017714:	75 10                	jne    c0017726 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	68 4f 47 02 c0       	push   0xc002474f
c001771e:	e8 c6 cb ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	50                   	push   eax
c0017727:	50                   	push   eax
c0017728:	53                   	push   ebx
c0017729:	68 79 47 02 c0       	push   0xc0024779
c001772e:	e8 f5 52 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017733:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017737:	89 d8                	mov    eax,ebx
c0017739:	83 c4 14             	add    esp,0x14
c001773c:	5b                   	pop    ebx
c001773d:	5e                   	pop    esi
c001773e:	ff e0                	jmp    eax

c0017740 <userModeEntryPoint(void*)>:
c0017740:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0017745:	48                   	dec    eax
c0017746:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c001774b:	75 03                	jne    c0017750 <userModeEntryPoint(void*)+0x10>
c001774d:	fb                   	sti    
c001774e:	66 90                	xchg   ax,ax
c0017750:	fb                   	sti    
c0017751:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017756:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017759:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001775f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017763:	e9 f7 8a fe ff       	jmp    c000025f <goToUsermode>

c0017768 <changeTSS>:
c0017768:	83 ec 14             	sub    esp,0x14
c001776b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017770:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017773:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017778:	c1 e2 15             	shl    edx,0x15
c001777b:	29 d0                	sub    eax,edx
c001777d:	50                   	push   eax
c001777e:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0017783:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017789:	05 7c 11 00 00       	add    eax,0x117c
c001778e:	50                   	push   eax
c001778f:	e8 0c 38 ff ff       	call   c000afa0 <TSS::setESP(unsigned long)>
c0017794:	83 c4 1c             	add    esp,0x1c
c0017797:	c3                   	ret    

c0017798 <switchToThread(ThreadControlBlock*)>:
c0017798:	57                   	push   edi
c0017799:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c001779e:	56                   	push   esi
c001779f:	85 c0                	test   eax,eax
c00177a1:	53                   	push   ebx
c00177a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177a6:	0f 85 90 00 00 00    	jne    c001783c <switchToThread(ThreadControlBlock*)+0xa4>
c00177ac:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177af:	3c ff                	cmp    al,0xff
c00177b1:	0f 84 81 00 00 00    	je     c0017838 <switchToThread(ThreadControlBlock*)+0xa0>
c00177b7:	0f b6 d0             	movzx  edx,al
c00177ba:	b8 00 04 00 00       	mov    eax,0x400
c00177bf:	29 d0                	sub    eax,edx
c00177c1:	d1 f8                	sar    eax,1
c00177c3:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c00177c6:	66 90                	xchg   ax,ax
c00177c8:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c00177cb:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00177d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177d6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00177dd:	74 4d                	je     c001782c <switchToThread(ThreadControlBlock*)+0x94>
c00177df:	0f 31                	rdtsc  
c00177e1:	a3 a8 78 02 c0       	mov    ds:0xc00278a8,eax
c00177e6:	89 c6                	mov    esi,eax
c00177e8:	89 d7                	mov    edi,edx
c00177ea:	2b 35 98 78 02 c0    	sub    esi,DWORD PTR ds:0xc0027898
c00177f0:	89 15 ac 78 02 c0    	mov    DWORD PTR ds:0xc00278ac,edx
c00177f6:	1b 3d 9c 78 02 c0    	sbb    edi,DWORD PTR ds:0xc002789c
c00177fc:	89 35 a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,esi
c0017802:	a3 98 78 02 c0       	mov    ds:0xc0027898,eax
c0017807:	89 3d a4 78 02 c0    	mov    DWORD PTR ds:0xc00278a4,edi
c001780d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017813:	89 15 9c 78 02 c0    	mov    DWORD PTR ds:0xc002789c,edx
c0017819:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001781c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001781f:	01 c6                	add    esi,eax
c0017821:	11 d7                	adc    edi,edx
c0017823:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017826:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017829:	8d 76 00             	lea    esi,[esi+0x0]
c001782c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017830:	5b                   	pop    ebx
c0017831:	5e                   	pop    esi
c0017832:	5f                   	pop    edi
c0017833:	e9 5f 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c0017838:	31 c0                	xor    eax,eax
c001783a:	eb 8c                	jmp    c00177c8 <switchToThread(ThreadControlBlock*)+0x30>
c001783c:	5b                   	pop    ebx
c001783d:	c7 05 60 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x1
c0017847:	5e                   	pop    esi
c0017848:	5f                   	pop    edi
c0017849:	c3                   	ret    
c001784a:	66 90                	xchg   ax,ax

c001784c <Process::addArgs(char**)>:
c001784c:	57                   	push   edi
c001784d:	56                   	push   esi
c001784e:	53                   	push   ebx
c001784f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017853:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017857:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017861:	85 ff                	test   edi,edi
c0017863:	74 43                	je     c00178a8 <Process::addArgs(char**)+0x5c>
c0017865:	8b 07                	mov    eax,DWORD PTR [edi]
c0017867:	85 c0                	test   eax,eax
c0017869:	74 3d                	je     c00178a8 <Process::addArgs(char**)+0x5c>
c001786b:	31 db                	xor    ebx,ebx
c001786d:	8d 76 00             	lea    esi,[esi+0x0]
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	50                   	push   eax
c0017874:	e8 27 8e fe ff       	call   c00006a0 <strlen>
c0017879:	40                   	inc    eax
c001787a:	89 04 24             	mov    DWORD PTR [esp],eax
c001787d:	e8 41 21 ff ff       	call   c00099c3 <malloc>
c0017882:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017889:	5a                   	pop    edx
c001788a:	59                   	pop    ecx
c001788b:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001788e:	43                   	inc    ebx
c001788f:	50                   	push   eax
c0017890:	e8 ab 8e fe ff       	call   c0000740 <strcpy>
c0017895:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178a1:	85 c0                	test   eax,eax
c00178a3:	75 cb                	jne    c0017870 <Process::addArgs(char**)+0x24>
c00178a5:	8d 76 00             	lea    esi,[esi+0x0]
c00178a8:	5b                   	pop    ebx
c00178a9:	5e                   	pop    esi
c00178aa:	5f                   	pop    edi
c00178ab:	c3                   	ret    

c00178ac <Process::Process(char const*, Process*, char**)>:
c00178ac:	56                   	push   esi
c00178ad:	53                   	push   ebx
c00178ae:	83 ec 14             	sub    esp,0x14
c00178b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b5:	05 0c 02 00 00       	add    eax,0x20c
c00178ba:	bb 07 00 00 00       	mov    ebx,0x7
c00178bf:	89 c6                	mov    esi,eax
c00178c1:	8d 76 00             	lea    esi,[esi+0x0]
c00178c4:	85 db                	test   ebx,ebx
c00178c6:	78 14                	js     c00178dc <Process::Process(char const*, Process*, char**)+0x30>
c00178c8:	83 ec 0c             	sub    esp,0xc
c00178cb:	56                   	push   esi
c00178cc:	e8 1f 9f 00 00       	call   c00217f0 <ThreadControlBlock::ThreadControlBlock()>
c00178d1:	83 c4 10             	add    esp,0x10
c00178d4:	83 c6 5f             	add    esi,0x5f
c00178d7:	4b                   	dec    ebx
c00178d8:	eb ea                	jmp    c00178c4 <Process::Process(char const*, Process*, char**)+0x18>
c00178da:	66 90                	xchg   ax,ax
c00178dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00178e7:	83 ec 0c             	sub    esp,0xc
c00178ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178ee:	e8 7f c8 ff ff       	call   c0014172 <Krnl::newProcessEnv(Process*)>
c00178f3:	83 c4 10             	add    esp,0x10
c00178f6:	89 c2                	mov    edx,eax
c00178f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017906:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001790f:	a1 90 5d 02 c0       	mov    eax,ds:0xc0025d90
c0017914:	8d 50 01             	lea    edx,[eax+0x1]
c0017917:	89 15 90 5d 02 c0    	mov    DWORD PTR ds:0xc0025d90,edx
c001791d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017921:	89 02                	mov    DWORD PTR [edx],eax
c0017923:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017932:	e8 8c 20 ff ff       	call   c00099c3 <malloc>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	89 c3                	mov    ebx,eax
c001793c:	83 ec 08             	sub    esp,0x8
c001793f:	6a 00                	push   0x0
c0017941:	53                   	push   ebx
c0017942:	e8 57 48 ff ff       	call   c000c19e <VAS::VAS(bool)>
c0017947:	83 c4 10             	add    esp,0x10
c001794a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017958:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017966:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001796a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017974:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001797a:	85 c0                	test   eax,eax
c001797c:	74 42                	je     c00179c0 <Process::Process(char const*, Process*, char**)+0x114>
c001797e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017982:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017988:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001798e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017992:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ac:	05 0c 01 00 00       	add    eax,0x10c
c00179b1:	83 ec 08             	sub    esp,0x8
c00179b4:	52                   	push   edx
c00179b5:	50                   	push   eax
c00179b6:	e8 85 8d fe ff       	call   c0000740 <strcpy>
c00179bb:	83 c4 10             	add    esp,0x10
c00179be:	eb 64                	jmp    c0017a24 <Process::Process(char const*, Process*, char**)+0x178>
c00179c0:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179cf:	e8 ef 1f ff ff       	call   c00099c3 <malloc>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	89 c3                	mov    ebx,eax
c00179d9:	83 ec 08             	sub    esp,0x8
c00179dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179e0:	53                   	push   ebx
c00179e1:	e8 ca 32 ff ff       	call   c000acb0 <VgaText::VgaText(char const*)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00179f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	50                   	push   eax
c0017a01:	e8 69 2a ff ff       	call   c000a46f <addToTerminalCycle(VgaText*)>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0d:	05 0c 01 00 00       	add    eax,0x10c
c0017a12:	83 ec 08             	sub    esp,0x8
c0017a15:	68 98 47 02 c0       	push   0xc0024798
c0017a1a:	50                   	push   eax
c0017a1b:	e8 20 8d fe ff       	call   c0000740 <strcpy>
c0017a20:	83 c4 10             	add    esp,0x10
c0017a23:	90                   	nop
c0017a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a28:	83 c0 0c             	add    eax,0xc
c0017a2b:	83 ec 08             	sub    esp,0x8
c0017a2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a32:	50                   	push   eax
c0017a33:	e8 08 8d fe ff       	call   c0000740 <strcpy>
c0017a38:	83 c4 10             	add    esp,0x10
c0017a3b:	83 ec 08             	sub    esp,0x8
c0017a3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a46:	e8 01 fe ff ff       	call   c001784c <Process::addArgs(char**)>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	83 ec 08             	sub    esp,0x8
c0017a51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a59:	e8 89 ed ff ff       	call   c00167e7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a5e:	83 c4 10             	add    esp,0x10
c0017a61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a69:	83 f0 01             	xor    eax,0x1
c0017a6c:	88 c2                	mov    dl,al
c0017a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a72:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017a78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a7d:	83 ec 08             	sub    esp,0x8
c0017a80:	50                   	push   eax
c0017a81:	68 f0 47 02 c0       	push   0xc00247f0
c0017a86:	e8 9d 4f ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	90                   	nop
c0017a8f:	83 c4 14             	add    esp,0x14
c0017a92:	5b                   	pop    ebx
c0017a93:	5e                   	pop    esi
c0017a94:	c3                   	ret    
c0017a95:	90                   	nop
c0017a96:	66 90                	xchg   ax,ax

c0017a98 <Process::Process(bool, char const*, Process*, char**)>:
c0017a98:	56                   	push   esi
c0017a99:	53                   	push   ebx
c0017a9a:	83 ec 24             	sub    esp,0x24
c0017a9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017aa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aa9:	05 0c 02 00 00       	add    eax,0x20c
c0017aae:	bb 07 00 00 00       	mov    ebx,0x7
c0017ab3:	89 c6                	mov    esi,eax
c0017ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ab8:	85 db                	test   ebx,ebx
c0017aba:	78 14                	js     c0017ad0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017abc:	83 ec 0c             	sub    esp,0xc
c0017abf:	56                   	push   esi
c0017ac0:	e8 2b 9d 00 00       	call   c00217f0 <ThreadControlBlock::ThreadControlBlock()>
c0017ac5:	83 c4 10             	add    esp,0x10
c0017ac8:	83 c6 5f             	add    esi,0x5f
c0017acb:	4b                   	dec    ebx
c0017acc:	eb ea                	jmp    c0017ab8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017ace:	66 90                	xchg   ax,ax
c0017ad0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ad4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017adb:	83 ec 0c             	sub    esp,0xc
c0017ade:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017ae2:	e8 8b c6 ff ff       	call   c0014172 <Krnl::newProcessEnv(Process*)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	89 c2                	mov    edx,eax
c0017aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017af0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017af6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017afa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b03:	a1 90 5d 02 c0       	mov    eax,ds:0xc0025d90
c0017b08:	8d 50 01             	lea    edx,[eax+0x1]
c0017b0b:	89 15 90 5d 02 c0    	mov    DWORD PTR ds:0xc0025d90,edx
c0017b11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b15:	89 02                	mov    DWORD PTR [edx],eax
c0017b17:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b1f:	83 ec 0c             	sub    esp,0xc
c0017b22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b26:	e8 98 1e ff ff       	call   c00099c3 <malloc>
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	89 c3                	mov    ebx,eax
c0017b30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b35:	83 ec 08             	sub    esp,0x8
c0017b38:	50                   	push   eax
c0017b39:	53                   	push   ebx
c0017b3a:	e8 5f 46 ff ff       	call   c000c19e <VAS::VAS(bool)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b46:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b50:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017b5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017b62:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b6c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017b72:	85 c0                	test   eax,eax
c0017b74:	74 42                	je     c0017bb8 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017b76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b7a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017b80:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017b86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017b90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b94:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017b9a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017ba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba4:	05 0c 01 00 00       	add    eax,0x10c
c0017ba9:	83 ec 08             	sub    esp,0x8
c0017bac:	52                   	push   edx
c0017bad:	50                   	push   eax
c0017bae:	e8 8d 8b fe ff       	call   c0000740 <strcpy>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	eb 64                	jmp    c0017c1c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017bb8:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017bc0:	83 ec 0c             	sub    esp,0xc
c0017bc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bc7:	e8 f7 1d ff ff       	call   c00099c3 <malloc>
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	89 c3                	mov    ebx,eax
c0017bd1:	83 ec 08             	sub    esp,0x8
c0017bd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017bd8:	53                   	push   ebx
c0017bd9:	e8 d2 30 ff ff       	call   c000acb0 <VgaText::VgaText(char const*)>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017beb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf5:	83 ec 0c             	sub    esp,0xc
c0017bf8:	50                   	push   eax
c0017bf9:	e8 71 28 ff ff       	call   c000a46f <addToTerminalCycle(VgaText*)>
c0017bfe:	83 c4 10             	add    esp,0x10
c0017c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c05:	05 0c 01 00 00       	add    eax,0x10c
c0017c0a:	83 ec 08             	sub    esp,0x8
c0017c0d:	68 98 47 02 c0       	push   0xc0024798
c0017c12:	50                   	push   eax
c0017c13:	e8 28 8b fe ff       	call   c0000740 <strcpy>
c0017c18:	83 c4 10             	add    esp,0x10
c0017c1b:	90                   	nop
c0017c1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c20:	83 c0 0c             	add    eax,0xc
c0017c23:	83 ec 08             	sub    esp,0x8
c0017c26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c2a:	50                   	push   eax
c0017c2b:	e8 10 8b fe ff       	call   c0000740 <strcpy>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	83 ec 08             	sub    esp,0x8
c0017c36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c3e:	e8 09 fc ff ff       	call   c001784c <Process::addArgs(char**)>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	90                   	nop
c0017c47:	83 c4 24             	add    esp,0x24
c0017c4a:	5b                   	pop    ebx
c0017c4b:	5e                   	pop    esi
c0017c4c:	c3                   	ret    
c0017c4d:	8d 76 00             	lea    esi,[esi+0x0]

c0017c50 <taskStartupFunction>:
c0017c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c55:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017c58:	c3                   	ret    
c0017c59:	90                   	nop
c0017c5a:	66 90                	xchg   ax,ax

c0017c5c <Semaphore::Semaphore(int)>:
c0017c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c64:	89 10                	mov    DWORD PTR [eax],edx
c0017c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c6a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017c87:	90                   	nop
c0017c88:	c3                   	ret    
c0017c89:	90                   	nop
c0017c8a:	66 90                	xchg   ax,ax

c0017c8c <Mutex::Mutex()>:
c0017c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c90:	6a 01                	push   0x1
c0017c92:	50                   	push   eax
c0017c93:	e8 c4 ff ff ff       	call   c0017c5c <Semaphore::Semaphore(int)>
c0017c98:	83 c4 08             	add    esp,0x8
c0017c9b:	90                   	nop
c0017c9c:	c3                   	ret    
c0017c9d:	90                   	nop
c0017c9e:	66 90                	xchg   ax,ax

c0017ca0 <Process::createThread(void (*)(void*), void*, int)>:
c0017ca0:	57                   	push   edi
c0017ca1:	31 c9                	xor    ecx,ecx
c0017ca3:	56                   	push   esi
c0017ca4:	53                   	push   ebx
c0017ca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ca9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cb0:	89 f2                	mov    edx,esi
c0017cb2:	66 90                	xchg   ax,ax
c0017cb4:	0f b7 c2             	movzx  eax,dx
c0017cb7:	83 e2 01             	and    edx,0x1
c0017cba:	74 14                	je     c0017cd0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017cbc:	d1 f8                	sar    eax,1
c0017cbe:	41                   	inc    ecx
c0017cbf:	89 c2                	mov    edx,eax
c0017cc1:	83 f9 10             	cmp    ecx,0x10
c0017cc4:	75 ee                	jne    c0017cb4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017cc6:	31 db                	xor    ebx,ebx
c0017cc8:	89 d8                	mov    eax,ebx
c0017cca:	5b                   	pop    ebx
c0017ccb:	5e                   	pop    esi
c0017ccc:	5f                   	pop    edi
c0017ccd:	c3                   	ret    
c0017cce:	66 90                	xchg   ax,ax
c0017cd0:	b8 01 00 00 00       	mov    eax,0x1
c0017cd5:	d3 e0                	shl    eax,cl
c0017cd7:	09 c6                	or     esi,eax
c0017cd9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017cdc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017ce3:	01 c0                	add    eax,eax
c0017ce5:	01 c8                	add    eax,ecx
c0017ce7:	8d 04 80             	lea    eax,[eax+eax*4]
c0017cea:	01 d8                	add    eax,ebx
c0017cec:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017cf3:	75 0b                	jne    c0017d00 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017cf5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017cff:	90                   	nop
c0017d00:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d06:	83 ec 08             	sub    esp,0x8
c0017d09:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d0c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d0f:	01 c0                	add    eax,eax
c0017d11:	01 c8                	add    eax,ecx
c0017d13:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d16:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d19:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d1f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d29:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d2f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d35:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d3c:	89 ca                	mov    edx,ecx
c0017d3e:	f7 da                	neg    edx
c0017d40:	c1 e2 15             	shl    edx,0x15
c0017d43:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d49:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d4f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d53:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d5d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017d63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d67:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017d6d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017d77:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017d81:	53                   	push   ebx
c0017d82:	68 84 78 02 c0       	push   0xc0027884
c0017d87:	e8 04 98 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	89 d8                	mov    eax,ebx
c0017d91:	5b                   	pop    ebx
c0017d92:	5e                   	pop    esi
c0017d93:	5f                   	pop    edi
c0017d94:	c3                   	ret    
c0017d95:	90                   	nop
c0017d96:	66 90                	xchg   ax,ax

c0017d98 <Process::createUserThread()>:
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	68 80 00 00 00       	push   0x80
c0017da0:	6a 00                	push   0x0
c0017da2:	68 40 77 01 c0       	push   0xc0017740
c0017da7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dab:	e8 f0 fe ff ff       	call   c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c0017db0:	83 c4 1c             	add    esp,0x1c
c0017db3:	c3                   	ret    

c0017db4 <setupMultitasking(void (*)())>:
c0017db4:	56                   	push   esi
c0017db5:	53                   	push   ebx
c0017db6:	51                   	push   ecx
c0017db7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dbb:	eb 13                	jmp    c0017dd0 <setupMultitasking(void (*)())+0x1c>
c0017dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dc0:	83 ec 0c             	sub    esp,0xc
c0017dc3:	68 84 78 02 c0       	push   0xc0027884
c0017dc8:	e8 0b 97 00 00       	call   c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	83 ec 0c             	sub    esp,0xc
c0017dd3:	68 84 78 02 c0       	push   0xc0027884
c0017dd8:	e8 d7 96 00 00       	call   c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ddd:	83 c4 10             	add    esp,0x10
c0017de0:	84 c0                	test   al,al
c0017de2:	74 dc                	je     c0017dc0 <setupMultitasking(void (*)())+0xc>
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	68 1f 07 00 00       	push   0x71f
c0017dec:	e8 d2 1b ff ff       	call   c00099c3 <malloc>
c0017df1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017df8:	89 c3                	mov    ebx,eax
c0017dfa:	6a 00                	push   0x0
c0017dfc:	68 9c 47 02 c0       	push   0xc002479c
c0017e01:	6a 01                	push   0x1
c0017e03:	50                   	push   eax
c0017e04:	e8 8f fc ff ff       	call   c0017a98 <Process::Process(bool, char const*, Process*, char**)>
c0017e09:	83 c4 14             	add    esp,0x14
c0017e0c:	89 1d 90 78 02 c0    	mov    DWORD PTR ds:0xc0027890,ebx
c0017e12:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e18:	e8 60 29 ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c0017e1d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e25:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e2f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e35:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e38:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e42:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e48:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e4e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e58:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017e62:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017e6c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017e72:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017e7c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017e82:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017e8c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017e92:	58                   	pop    eax
c0017e93:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017e99:	5a                   	pop    edx
c0017e9a:	68 98 47 02 c0       	push   0xc0024798
c0017e9f:	50                   	push   eax
c0017ea0:	e8 9b 88 fe ff       	call   c0000740 <strcpy>
c0017ea5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017eac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017eb0:	83 c4 14             	add    esp,0x14
c0017eb3:	5b                   	pop    ebx
c0017eb4:	5e                   	pop    esi
c0017eb5:	e9 cf 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017eba:	66 90                	xchg   ax,ax

c0017ebc <schedule()>:
c0017ebc:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0017ec1:	85 c0                	test   eax,eax
c0017ec3:	74 0b                	je     c0017ed0 <schedule()+0x14>
c0017ec5:	c7 05 60 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x1
c0017ecf:	c3                   	ret    
c0017ed0:	53                   	push   ebx
c0017ed1:	83 ec 14             	sub    esp,0x14
c0017ed4:	68 84 78 02 c0       	push   0xc0027884
c0017ed9:	e8 d6 95 00 00       	call   c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ede:	83 c4 10             	add    esp,0x10
c0017ee1:	84 c0                	test   al,al
c0017ee3:	75 3b                	jne    c0017f20 <schedule()+0x64>
c0017ee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017eed:	4a                   	dec    edx
c0017eee:	74 38                	je     c0017f28 <schedule()+0x6c>
c0017ef0:	83 ec 0c             	sub    esp,0xc
c0017ef3:	68 84 78 02 c0       	push   0xc0027884
c0017ef8:	e8 d3 95 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017efd:	c7 04 24 84 78 02 c0 	mov    DWORD PTR [esp],0xc0027884
c0017f04:	89 c3                	mov    ebx,eax
c0017f06:	e8 cd 95 00 00       	call   c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f0b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f15:	e8 7e f8 ff ff       	call   c0017798 <switchToThread(ThreadControlBlock*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f20:	83 c4 08             	add    esp,0x8
c0017f23:	5b                   	pop    ebx
c0017f24:	c3                   	ret    
c0017f25:	8d 76 00             	lea    esi,[esi+0x0]
c0017f28:	83 ec 08             	sub    esp,0x8
c0017f2b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f32:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f38:	68 84 78 02 c0       	push   0xc0027884
c0017f3d:	e8 4e 96 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f42:	83 c4 10             	add    esp,0x10
c0017f45:	eb a9                	jmp    c0017ef0 <schedule()+0x34>
c0017f47:	90                   	nop

c0017f48 <Semaphore::tryAcquire()>:
c0017f48:	53                   	push   ebx
c0017f49:	83 ec 08             	sub    esp,0x8
c0017f4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f50:	fa                   	cli    
c0017f51:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0017f56:	8d 50 01             	lea    edx,[eax+0x1]
c0017f59:	89 15 68 78 02 c0    	mov    DWORD PTR ds:0xc0027868,edx
c0017f5f:	8b 15 64 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027864
c0017f65:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017f68:	89 1d 64 78 02 c0    	mov    DWORD PTR ds:0xc0027864,ebx
c0017f6e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017f71:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017f73:	7c 33                	jl     c0017fa8 <Semaphore::tryAcquire()+0x60>
c0017f75:	89 15 64 78 02 c0    	mov    DWORD PTR ds:0xc0027864,edx
c0017f7b:	85 d2                	test   edx,edx
c0017f7d:	75 0d                	jne    c0017f8c <Semaphore::tryAcquire()+0x44>
c0017f7f:	8b 15 60 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027860
c0017f85:	85 d2                	test   edx,edx
c0017f87:	75 6b                	jne    c0017ff4 <Semaphore::tryAcquire()+0xac>
c0017f89:	8d 76 00             	lea    esi,[esi+0x0]
c0017f8c:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0017f91:	85 c0                	test   eax,eax
c0017f93:	74 0b                	je     c0017fa0 <Semaphore::tryAcquire()+0x58>
c0017f95:	8d 76 00             	lea    esi,[esi+0x0]
c0017f98:	31 c0                	xor    eax,eax
c0017f9a:	83 c4 08             	add    esp,0x8
c0017f9d:	5b                   	pop    ebx
c0017f9e:	c3                   	ret    
c0017f9f:	90                   	nop
c0017fa0:	fb                   	sti    
c0017fa1:	83 c4 08             	add    esp,0x8
c0017fa4:	5b                   	pop    ebx
c0017fa5:	c3                   	ret    
c0017fa6:	66 90                	xchg   ax,ax
c0017fa8:	43                   	inc    ebx
c0017fa9:	89 15 64 78 02 c0    	mov    DWORD PTR ds:0xc0027864,edx
c0017faf:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017fb2:	85 d2                	test   edx,edx
c0017fb4:	75 22                	jne    c0017fd8 <Semaphore::tryAcquire()+0x90>
c0017fb6:	8b 0d 60 78 02 c0    	mov    ecx,DWORD PTR ds:0xc0027860
c0017fbc:	85 c9                	test   ecx,ecx
c0017fbe:	74 18                	je     c0017fd8 <Semaphore::tryAcquire()+0x90>
c0017fc0:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c0017fca:	e8 ed fe ff ff       	call   c0017ebc <schedule()>
c0017fcf:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0017fd4:	48                   	dec    eax
c0017fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd8:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0017fdd:	85 c0                	test   eax,eax
c0017fdf:	75 0b                	jne    c0017fec <Semaphore::tryAcquire()+0xa4>
c0017fe1:	fb                   	sti    
c0017fe2:	b0 01                	mov    al,0x1
c0017fe4:	83 c4 08             	add    esp,0x8
c0017fe7:	5b                   	pop    ebx
c0017fe8:	c3                   	ret    
c0017fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fec:	b0 01                	mov    al,0x1
c0017fee:	83 c4 08             	add    esp,0x8
c0017ff1:	5b                   	pop    ebx
c0017ff2:	c3                   	ret    
c0017ff3:	90                   	nop
c0017ff4:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c0017ffe:	e8 b9 fe ff ff       	call   c0017ebc <schedule()>
c0018003:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018008:	48                   	dec    eax
c0018009:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c001800e:	85 c0                	test   eax,eax
c0018010:	75 86                	jne    c0017f98 <Semaphore::tryAcquire()+0x50>
c0018012:	eb 8c                	jmp    c0017fa0 <Semaphore::tryAcquire()+0x58>

c0018014 <Semaphore::assertLocked(char const*)>:
c0018014:	83 ec 0c             	sub    esp,0xc
c0018017:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001801b:	fa                   	cli    
c001801c:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018022:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0018027:	8d 48 01             	lea    ecx,[eax+0x1]
c001802a:	89 0d 64 78 02 c0    	mov    DWORD PTR ds:0xc0027864,ecx
c0018030:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018032:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018035:	7c 29                	jl     c0018060 <Semaphore::assertLocked(char const*)+0x4c>
c0018037:	90                   	nop
c0018038:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c001803d:	85 c0                	test   eax,eax
c001803f:	75 0b                	jne    c001804c <Semaphore::assertLocked(char const*)+0x38>
c0018041:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c0018046:	85 c0                	test   eax,eax
c0018048:	75 2e                	jne    c0018078 <Semaphore::assertLocked(char const*)+0x64>
c001804a:	66 90                	xchg   ax,ax
c001804c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018051:	48                   	dec    eax
c0018052:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018057:	75 03                	jne    c001805c <Semaphore::assertLocked(char const*)+0x48>
c0018059:	fb                   	sti    
c001805a:	66 90                	xchg   ax,ax
c001805c:	83 c4 0c             	add    esp,0xc
c001805f:	c3                   	ret    
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018067:	e8 7d c2 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001806c:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	48                   	dec    eax
c0018075:	eb c1                	jmp    c0018038 <Semaphore::assertLocked(char const*)+0x24>
c0018077:	90                   	nop
c0018078:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c0018082:	e8 35 fe ff ff       	call   c0017ebc <schedule()>
c0018087:	eb c3                	jmp    c001804c <Semaphore::assertLocked(char const*)+0x38>
c0018089:	8d 76 00             	lea    esi,[esi+0x0]

c001808c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001808c:	83 ec 0c             	sub    esp,0xc
c001808f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018094:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018098:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001809b:	e8 1c fe ff ff       	call   c0017ebc <schedule()>
c00180a0:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00180a5:	48                   	dec    eax
c00180a6:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00180ab:	75 03                	jne    c00180b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180ad:	fb                   	sti    
c00180ae:	66 90                	xchg   ax,ax
c00180b0:	83 c4 0c             	add    esp,0xc
c00180b3:	c3                   	ret    

c00180b4 <blockTask(TaskState)>:
c00180b4:	83 ec 0c             	sub    esp,0xc
c00180b7:	fa                   	cli    
c00180b8:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00180be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180ca:	e8 ed fd ff ff       	call   c0017ebc <schedule()>
c00180cf:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00180d4:	48                   	dec    eax
c00180d5:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00180da:	75 04                	jne    c00180e0 <blockTask(TaskState)+0x2c>
c00180dc:	fb                   	sti    
c00180dd:	8d 76 00             	lea    esi,[esi+0x0]
c00180e0:	83 c4 0c             	add    esp,0xc
c00180e3:	c3                   	ret    

c00180e4 <waitTask(int, int*, int)>:
c00180e4:	83 ec 18             	sub    esp,0x18
c00180e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180f0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00180f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180fc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00180ff:	6a 07                	push   0x7
c0018101:	e8 ae ff ff ff       	call   c00180b4 <blockTask(TaskState)>
c0018106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018111:	85 d2                	test   edx,edx
c0018113:	74 0b                	je     c0018120 <waitTask(int, int*, int)+0x3c>
c0018115:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018118:	89 02                	mov    DWORD PTR [edx],eax
c001811a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811f:	90                   	nop
c0018120:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018123:	83 c4 0c             	add    esp,0xc
c0018126:	c3                   	ret    
c0018127:	90                   	nop

c0018128 <milliTenthSleepUntil(unsigned int)>:
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812f:	39 05 cc 69 02 c0    	cmp    DWORD PTR ds:0xc00269cc,eax
c0018135:	76 05                	jbe    c001813c <milliTenthSleepUntil(unsigned int)+0x14>
c0018137:	90                   	nop
c0018138:	83 c4 0c             	add    esp,0xc
c001813b:	c3                   	ret    
c001813c:	fa                   	cli    
c001813d:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018143:	83 ec 08             	sub    esp,0x8
c0018146:	ff 05 64 78 02 c0    	inc    DWORD PTR ds:0xc0027864
c001814c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018152:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018155:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001815b:	68 78 78 02 c0       	push   0xc0027878
c0018160:	e8 2b 94 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018165:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001816c:	e8 43 ff ff ff       	call   c00180b4 <blockTask(TaskState)>
c0018171:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0018176:	83 c4 10             	add    esp,0x10
c0018179:	48                   	dec    eax
c001817a:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c001817f:	85 c0                	test   eax,eax
c0018181:	75 09                	jne    c001818c <milliTenthSleepUntil(unsigned int)+0x64>
c0018183:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c0018188:	85 c0                	test   eax,eax
c001818a:	75 14                	jne    c00181a0 <milliTenthSleepUntil(unsigned int)+0x78>
c001818c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018191:	48                   	dec    eax
c0018192:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018197:	75 9f                	jne    c0018138 <milliTenthSleepUntil(unsigned int)+0x10>
c0018199:	fb                   	sti    
c001819a:	83 c4 0c             	add    esp,0xc
c001819d:	c3                   	ret    
c001819e:	66 90                	xchg   ax,ax
c00181a0:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c00181aa:	e8 0d fd ff ff       	call   c0017ebc <schedule()>
c00181af:	eb db                	jmp    c001818c <milliTenthSleepUntil(unsigned int)+0x64>
c00181b1:	8d 76 00             	lea    esi,[esi+0x0]

c00181b4 <milliTenthSleep(unsigned int)>:
c00181b4:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c00181b9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00181bd:	e9 66 ff ff ff       	jmp    c0018128 <milliTenthSleepUntil(unsigned int)>
c00181c2:	66 90                	xchg   ax,ax

c00181c4 <sleep(unsigned int)>:
c00181c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c8:	8d 04 80             	lea    eax,[eax+eax*4]
c00181cb:	8d 04 80             	lea    eax,[eax+eax*4]
c00181ce:	8d 04 80             	lea    eax,[eax+eax*4]
c00181d1:	8d 04 80             	lea    eax,[eax+eax*4]
c00181d4:	c1 e0 04             	shl    eax,0x4
c00181d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181db:	eb d7                	jmp    c00181b4 <milliTenthSleep(unsigned int)>
c00181dd:	90                   	nop
c00181de:	66 90                	xchg   ax,ax

c00181e0 <Semaphore::acquire()>:
c00181e0:	83 ec 0c             	sub    esp,0xc
c00181e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181e7:	fa                   	cli    
c00181e8:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00181ed:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00181f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00181f6:	89 0d 64 78 02 c0    	mov    DWORD PTR ds:0xc0027864,ecx
c00181fc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00181ff:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018201:	7d 2d                	jge    c0018230 <Semaphore::acquire()+0x50>
c0018203:	41                   	inc    ecx
c0018204:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018207:	90                   	nop
c0018208:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c001820d:	85 c0                	test   eax,eax
c001820f:	75 0b                	jne    c001821c <Semaphore::acquire()+0x3c>
c0018211:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c0018216:	85 c0                	test   eax,eax
c0018218:	75 62                	jne    c001827c <Semaphore::acquire()+0x9c>
c001821a:	66 90                	xchg   ax,ax
c001821c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018221:	48                   	dec    eax
c0018222:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018227:	75 03                	jne    c001822c <Semaphore::acquire()+0x4c>
c0018229:	fb                   	sti    
c001822a:	66 90                	xchg   ax,ax
c001822c:	83 c4 0c             	add    esp,0xc
c001822f:	c3                   	ret    
c0018230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018235:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001823c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001823f:	85 c9                	test   ecx,ecx
c0018241:	74 4d                	je     c0018290 <Semaphore::acquire()+0xb0>
c0018243:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018246:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001824c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001824f:	90                   	nop
c0018250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001825b:	68 18 48 02 c0       	push   0xc0024818
c0018260:	e8 c3 47 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0018265:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001826c:	e8 43 fe ff ff       	call   c00180b4 <blockTask(TaskState)>
c0018271:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	48                   	dec    eax
c001827a:	eb 8c                	jmp    c0018208 <Semaphore::acquire()+0x28>
c001827c:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c0018286:	e8 31 fc ff ff       	call   c0017ebc <schedule()>
c001828b:	eb 8f                	jmp    c001821c <Semaphore::acquire()+0x3c>
c001828d:	8d 76 00             	lea    esi,[esi+0x0]
c0018290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018295:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018298:	eb b6                	jmp    c0018250 <Semaphore::acquire()+0x70>
c001829a:	66 90                	xchg   ax,ax

c001829c <taskReturned>:
c001829c:	83 ec 18             	sub    esp,0x18
c001829f:	68 38 48 02 c0       	push   0xc0024838
c00182a4:	e8 40 c0 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00182a9:	83 c4 10             	add    esp,0x10
c00182ac:	83 ec 0c             	sub    esp,0xc
c00182af:	6a 02                	push   0x2
c00182b1:	e8 fe fd ff ff       	call   c00180b4 <blockTask(TaskState)>
c00182b6:	fa                   	cli    
c00182b7:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00182bd:	e8 fa fb ff ff       	call   c0017ebc <schedule()>
c00182c2:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	48                   	dec    eax
c00182cb:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00182d0:	85 c0                	test   eax,eax
c00182d2:	75 d8                	jne    c00182ac <taskReturned+0x10>
c00182d4:	fb                   	sti    
c00182d5:	eb d5                	jmp    c00182ac <taskReturned+0x10>
c00182d7:	90                   	nop

c00182d8 <Thr::processFromPID(int)>:
c00182d8:	57                   	push   edi
c00182d9:	56                   	push   esi
c00182da:	53                   	push   ebx
c00182db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00182df:	fa                   	cli    
c00182e0:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00182e6:	83 ec 0c             	sub    esp,0xc
c00182e9:	68 84 78 02 c0       	push   0xc0027884
c00182ee:	e8 dd 91 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00182f3:	83 c4 10             	add    esp,0x10
c00182f6:	89 c7                	mov    edi,eax
c00182f8:	eb 16                	jmp    c0018310 <Thr::processFromPID(int)+0x38>
c00182fa:	66 90                	xchg   ax,ax
c00182fc:	83 ec 0c             	sub    esp,0xc
c00182ff:	68 84 78 02 c0       	push   0xc0027884
c0018304:	e8 c7 91 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018309:	83 c4 10             	add    esp,0x10
c001830c:	39 f8                	cmp    eax,edi
c001830e:	74 4c                	je     c001835c <Thr::processFromPID(int)+0x84>
c0018310:	83 ec 0c             	sub    esp,0xc
c0018313:	68 84 78 02 c0       	push   0xc0027884
c0018318:	e8 b3 91 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001831d:	c7 04 24 84 78 02 c0 	mov    DWORD PTR [esp],0xc0027884
c0018324:	89 c3                	mov    ebx,eax
c0018326:	e8 ad 91 00 00       	call   c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001832b:	58                   	pop    eax
c001832c:	5a                   	pop    edx
c001832d:	53                   	push   ebx
c001832e:	68 84 78 02 c0       	push   0xc0027884
c0018333:	e8 58 92 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018338:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001833b:	83 c4 10             	add    esp,0x10
c001833e:	39 30                	cmp    DWORD PTR [eax],esi
c0018340:	75 ba                	jne    c00182fc <Thr::processFromPID(int)+0x24>
c0018342:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018347:	48                   	dec    eax
c0018348:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c001834d:	74 09                	je     c0018358 <Thr::processFromPID(int)+0x80>
c001834f:	90                   	nop
c0018350:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018353:	5b                   	pop    ebx
c0018354:	5e                   	pop    esi
c0018355:	5f                   	pop    edi
c0018356:	c3                   	ret    
c0018357:	90                   	nop
c0018358:	fb                   	sti    
c0018359:	eb f5                	jmp    c0018350 <Thr::processFromPID(int)+0x78>
c001835b:	90                   	nop
c001835c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018361:	48                   	dec    eax
c0018362:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018367:	75 07                	jne    c0018370 <Thr::processFromPID(int)+0x98>
c0018369:	fb                   	sti    
c001836a:	5b                   	pop    ebx
c001836b:	5e                   	pop    esi
c001836c:	5f                   	pop    edi
c001836d:	c3                   	ret    
c001836e:	66 90                	xchg   ax,ax
c0018370:	5b                   	pop    ebx
c0018371:	31 c0                	xor    eax,eax
c0018373:	5e                   	pop    esi
c0018374:	5f                   	pop    edi
c0018375:	c3                   	ret    
c0018376:	66 90                	xchg   ax,ax

c0018378 <unblockTask(ThreadControlBlock*)>:
c0018378:	53                   	push   ebx
c0018379:	83 ec 08             	sub    esp,0x8
c001837c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018380:	fa                   	cli    
c0018381:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018387:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001838a:	85 c0                	test   eax,eax
c001838c:	74 66                	je     c00183f4 <unblockTask(ThreadControlBlock*)+0x7c>
c001838e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018391:	48                   	dec    eax
c0018392:	74 38                	je     c00183cc <unblockTask(ThreadControlBlock*)+0x54>
c0018394:	83 ec 0c             	sub    esp,0xc
c0018397:	68 84 78 02 c0       	push   0xc0027884
c001839c:	e8 2f 91 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183a1:	83 c4 10             	add    esp,0x10
c00183a4:	85 c0                	test   eax,eax
c00183a6:	75 1c                	jne    c00183c4 <unblockTask(ThreadControlBlock*)+0x4c>
c00183a8:	eb 5e                	jmp    c0018408 <unblockTask(ThreadControlBlock*)+0x90>
c00183aa:	66 90                	xchg   ax,ax
c00183ac:	83 ec 08             	sub    esp,0x8
c00183af:	50                   	push   eax
c00183b0:	68 84 78 02 c0       	push   0xc0027884
c00183b5:	e8 c6 94 00 00       	call   c0021880 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	85 c0                	test   eax,eax
c00183bf:	74 47                	je     c0018408 <unblockTask(ThreadControlBlock*)+0x90>
c00183c1:	8d 76 00             	lea    esi,[esi+0x0]
c00183c4:	39 c3                	cmp    ebx,eax
c00183c6:	75 e4                	jne    c00183ac <unblockTask(ThreadControlBlock*)+0x34>
c00183c8:	eb 12                	jmp    c00183dc <unblockTask(ThreadControlBlock*)+0x64>
c00183ca:	66 90                	xchg   ax,ax
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	68 ba 47 02 c0       	push   0xc00247ba
c00183d4:	e8 4f 46 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00183d9:	83 c4 10             	add    esp,0x10
c00183dc:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00183e1:	48                   	dec    eax
c00183e2:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00183e7:	75 03                	jne    c00183ec <unblockTask(ThreadControlBlock*)+0x74>
c00183e9:	fb                   	sti    
c00183ea:	66 90                	xchg   ax,ax
c00183ec:	83 c4 08             	add    esp,0x8
c00183ef:	5b                   	pop    ebx
c00183f0:	c3                   	ret    
c00183f1:	8d 76 00             	lea    esi,[esi+0x0]
c00183f4:	83 ec 0c             	sub    esp,0xc
c00183f7:	68 a3 47 02 c0       	push   0xc00247a3
c00183fc:	e8 27 46 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0018401:	83 c4 10             	add    esp,0x10
c0018404:	eb d6                	jmp    c00183dc <unblockTask(ThreadControlBlock*)+0x64>
c0018406:	66 90                	xchg   ax,ax
c0018408:	83 ec 08             	sub    esp,0x8
c001840b:	53                   	push   ebx
c001840c:	68 84 78 02 c0       	push   0xc0027884
c0018411:	e8 7a 91 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	eb c1                	jmp    c00183dc <unblockTask(ThreadControlBlock*)+0x64>
c001841b:	90                   	nop

c001841c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001841c:	55                   	push   ebp
c001841d:	57                   	push   edi
c001841e:	56                   	push   esi
c001841f:	53                   	push   ebx
c0018420:	83 ec 1c             	sub    esp,0x1c
c0018423:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018427:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001842a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018430:	85 ff                	test   edi,edi
c0018432:	7e 24                	jle    c0018458 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018434:	31 f6                	xor    esi,esi
c0018436:	66 90                	xchg   ax,ax
c0018438:	83 ec 0c             	sub    esp,0xc
c001843b:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018442:	46                   	inc    esi
c0018443:	e8 8b 15 ff ff       	call   c00099d3 <free>
c0018448:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018454:	7f e2                	jg     c0018438 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018456:	66 90                	xchg   ax,ax
c0018458:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018462:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018467:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001846a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001846d:	d3 c0                	rol    eax,cl
c001846f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018476:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018479:	89 f7                	mov    edi,esi
c001847b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018483:	0f 85 73 01 00 00    	jne    c00185fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018489:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001848f:	85 ed                	test   ebp,ebp
c0018491:	74 1d                	je     c00184b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018493:	83 ec 0c             	sub    esp,0xc
c0018496:	55                   	push   ebp
c0018497:	e8 f2 bb ff ff       	call   c001408e <EnvVarContainer::~EnvVarContainer()>
c001849c:	59                   	pop    ecx
c001849d:	5e                   	pop    esi
c001849e:	6a 0c                	push   0xc
c00184a0:	55                   	push   ebp
c00184a1:	e8 a1 44 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00184a6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	89 f7                	mov    edi,esi
c00184ae:	66 90                	xchg   ax,ax
c00184b0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184b6:	85 c0                	test   eax,eax
c00184b8:	0f 84 b2 00 00 00    	je     c0018570 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184be:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00184c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00184c5:	31 c9                	xor    ecx,ecx
c00184c7:	eb 17                	jmp    c00184e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00184c9:	8d 76 00             	lea    esi,[esi+0x0]
c00184cc:	41                   	inc    ecx
c00184cd:	83 f9 10             	cmp    ecx,0x10
c00184d0:	0f 84 9a 00 00 00    	je     c0018570 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184d6:	66 90                	xchg   ax,ax
c00184d8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184de:	66 90                	xchg   ax,ax
c00184e0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00184e7:	d3 fa                	sar    edx,cl
c00184e9:	83 e2 01             	and    edx,0x1
c00184ec:	74 de                	je     c00184cc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00184ee:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00184f1:	01 d2                	add    edx,edx
c00184f3:	01 ca                	add    edx,ecx
c00184f5:	8d 14 92             	lea    edx,[edx+edx*4]
c00184f8:	01 d0                	add    eax,edx
c00184fa:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018500:	83 fd 07             	cmp    ebp,0x7
c0018503:	75 c7                	jne    c00184cc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018505:	05 40 02 00 00       	add    eax,0x240
c001850a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001850d:	83 fd ff             	cmp    ebp,0xffffffff
c0018510:	0f 8c ee 00 00 00    	jl     c0018604 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018516:	0f 84 ac 01 00 00    	je     c00186c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c001851c:	85 ed                	test   ebp,ebp
c001851e:	0f 84 90 01 00 00    	je     c00186b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018524:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018526:	75 a4                	jne    c00184cc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018528:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001852e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018532:	01 d0                	add    eax,edx
c0018534:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018538:	83 ec 0c             	sub    esp,0xc
c001853b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018541:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018544:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001854a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018551:	50                   	push   eax
c0018552:	e8 21 fe ff ff       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c0018557:	83 c4 10             	add    esp,0x10
c001855a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001855d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018561:	89 f7                	mov    edi,esi
c0018563:	41                   	inc    ecx
c0018564:	83 f9 10             	cmp    ecx,0x10
c0018567:	0f 85 6b ff ff ff    	jne    c00184d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001856d:	8d 76 00             	lea    esi,[esi+0x0]
c0018570:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018576:	85 c0                	test   eax,eax
c0018578:	74 62                	je     c00185dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001857a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018580:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018586:	74 54                	je     c00185dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018588:	83 ec 0c             	sub    esp,0xc
c001858b:	68 84 78 02 c0       	push   0xc0027884
c0018590:	e8 3b 8f 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018595:	c7 04 24 84 78 02 c0 	mov    DWORD PTR [esp],0xc0027884
c001859c:	89 c7                	mov    edi,eax
c001859e:	e8 11 8f 00 00       	call   c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185a3:	83 c4 10             	add    esp,0x10
c00185a6:	84 c0                	test   al,al
c00185a8:	0f 84 ce 00 00 00    	je     c001867c <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185ae:	66 90                	xchg   ax,ax
c00185b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185b3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00185b9:	85 d2                	test   edx,edx
c00185bb:	74 0f                	je     c00185cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	8b 02                	mov    eax,DWORD PTR [edx]
c00185c2:	52                   	push   edx
c00185c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185c6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185c9:	83 c4 10             	add    esp,0x10
c00185cc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00185d6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00185d9:	8d 76 00             	lea    esi,[esi+0x0]
c00185dc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00185e2:	85 db                	test   ebx,ebx
c00185e4:	74 16                	je     c00185fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00185e6:	83 ec 0c             	sub    esp,0xc
c00185e9:	53                   	push   ebx
c00185ea:	e8 89 35 ff ff       	call   c000bb78 <VAS::~VAS()>
c00185ef:	58                   	pop    eax
c00185f0:	5a                   	pop    edx
c00185f1:	6a 14                	push   0x14
c00185f3:	53                   	push   ebx
c00185f4:	e8 4e 43 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00185f9:	83 c4 10             	add    esp,0x10
c00185fc:	83 c4 1c             	add    esp,0x1c
c00185ff:	5b                   	pop    ebx
c0018600:	5e                   	pop    esi
c0018601:	5f                   	pop    edi
c0018602:	5d                   	pop    ebp
c0018603:	c3                   	ret    
c0018604:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018608:	83 ec 0c             	sub    esp,0xc
c001860b:	68 6c 48 02 c0       	push   0xc002486c
c0018610:	e8 d4 bc ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0018615:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	89 f7                	mov    edi,esi
c001861d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018621:	e9 a6 fe ff ff       	jmp    c00184cc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018626:	66 90                	xchg   ax,ax
c0018628:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001862e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018634:	75 1e                	jne    c0018654 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018636:	83 ec 0c             	sub    esp,0xc
c0018639:	68 d4 48 02 c0       	push   0xc00248d4
c001863e:	e8 e5 43 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0018643:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001864a:	e8 65 fa ff ff       	call   c00180b4 <blockTask(TaskState)>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	66 90                	xchg   ax,ax
c0018654:	83 ec 08             	sub    esp,0x8
c0018657:	56                   	push   esi
c0018658:	68 84 78 02 c0       	push   0xc0027884
c001865d:	e8 2e 8f 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018662:	c7 04 24 84 78 02 c0 	mov    DWORD PTR [esp],0xc0027884
c0018669:	e8 62 8e 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001866e:	83 c4 10             	add    esp,0x10
c0018671:	39 f8                	cmp    eax,edi
c0018673:	0f 84 37 ff ff ff    	je     c00185b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018679:	8d 76 00             	lea    esi,[esi+0x0]
c001867c:	83 ec 0c             	sub    esp,0xc
c001867f:	68 84 78 02 c0       	push   0xc0027884
c0018684:	e8 47 8e 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018689:	c7 04 24 84 78 02 c0 	mov    DWORD PTR [esp],0xc0027884
c0018690:	89 c6                	mov    esi,eax
c0018692:	e8 41 8e 00 00       	call   c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	39 f3                	cmp    ebx,esi
c001869c:	74 b6                	je     c0018654 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001869e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186a4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186aa:	75 a8                	jne    c0018654 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186ac:	e9 77 ff ff ff       	jmp    c0018628 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186b1:	8d 76 00             	lea    esi,[esi+0x0]
c00186b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186b8:	83 ec 0c             	sub    esp,0xc
c00186bb:	68 a0 48 02 c0       	push   0xc00248a0
c00186c0:	e9 4b ff ff ff       	jmp    c0018610 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00186c5:	8d 76 00             	lea    esi,[esi+0x0]
c00186c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00186ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186ce:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00186d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186d4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00186da:	01 d7                	add    edi,edx
c00186dc:	89 f8                	mov    eax,edi
c00186de:	e9 51 fe ff ff       	jmp    c0018534 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00186e3:	90                   	nop

c00186e4 <cleanerTaskFunction(void*)>:
c00186e4:	53                   	push   ebx
c00186e5:	83 ec 08             	sub    esp,0x8
c00186e8:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00186ed:	48                   	dec    eax
c00186ee:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c00186f3:	75 03                	jne    c00186f8 <cleanerTaskFunction(void*)+0x14>
c00186f5:	fb                   	sti    
c00186f6:	66 90                	xchg   ax,ax
c00186f8:	fa                   	cli    
c00186f9:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c00186fe:	80 3d 4c 78 02 c0 00 	cmp    BYTE PTR ds:0xc002784c,0x0
c0018705:	8d 50 01             	lea    edx,[eax+0x1]
c0018708:	89 15 68 78 02 c0    	mov    DWORD PTR ds:0xc0027868,edx
c001870e:	0f 84 ac 00 00 00    	je     c00187c0 <cleanerTaskFunction(void*)+0xdc>
c0018714:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018719:	85 c0                	test   eax,eax
c001871b:	75 03                	jne    c0018720 <cleanerTaskFunction(void*)+0x3c>
c001871d:	fb                   	sti    
c001871e:	66 90                	xchg   ax,ax
c0018720:	c6 05 4c 78 02 c0 00 	mov    BYTE PTR ds:0xc002784c,0x0
c0018727:	fa                   	cli    
c0018728:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c001872e:	ff 05 64 78 02 c0    	inc    DWORD PTR ds:0xc0027864
c0018734:	fa                   	cli    
c0018735:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c001873b:	eb 2b                	jmp    c0018768 <cleanerTaskFunction(void*)+0x84>
c001873d:	8d 76 00             	lea    esi,[esi+0x0]
c0018740:	83 ec 0c             	sub    esp,0xc
c0018743:	68 6c 78 02 c0       	push   0xc002786c
c0018748:	e8 83 8d 00 00       	call   c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001874d:	c7 04 24 6c 78 02 c0 	mov    DWORD PTR [esp],0xc002786c
c0018754:	89 c3                	mov    ebx,eax
c0018756:	e8 7d 8d 00 00       	call   c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001875b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001875e:	e8 b9 fc ff ff       	call   c001841c <cleanupTerminatedTask(ThreadControlBlock*)>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	66 90                	xchg   ax,ax
c0018768:	83 ec 0c             	sub    esp,0xc
c001876b:	68 6c 78 02 c0       	push   0xc002786c
c0018770:	e8 3f 8d 00 00       	call   c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018775:	83 c4 10             	add    esp,0x10
c0018778:	84 c0                	test   al,al
c001877a:	74 c4                	je     c0018740 <cleanerTaskFunction(void*)+0x5c>
c001877c:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018781:	48                   	dec    eax
c0018782:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018787:	75 03                	jne    c001878c <cleanerTaskFunction(void*)+0xa8>
c0018789:	fb                   	sti    
c001878a:	66 90                	xchg   ax,ax
c001878c:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c0018791:	48                   	dec    eax
c0018792:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c0018797:	0f 85 4b ff ff ff    	jne    c00186e8 <cleanerTaskFunction(void*)+0x4>
c001879d:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c00187a2:	85 c0                	test   eax,eax
c00187a4:	0f 84 3e ff ff ff    	je     c00186e8 <cleanerTaskFunction(void*)+0x4>
c00187aa:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c00187b4:	e8 03 f7 ff ff       	call   c0017ebc <schedule()>
c00187b9:	e9 2a ff ff ff       	jmp    c00186e8 <cleanerTaskFunction(void*)+0x4>
c00187be:	66 90                	xchg   ax,ax
c00187c0:	83 ec 0c             	sub    esp,0xc
c00187c3:	6a 02                	push   0x2
c00187c5:	e8 c2 f8 ff ff       	call   c001808c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00187ca:	83 c4 10             	add    esp,0x10
c00187cd:	e9 4e ff ff ff       	jmp    c0018720 <cleanerTaskFunction(void*)+0x3c>
c00187d2:	66 90                	xchg   ax,ax

c00187d4 <terminateTask(int)>:
c00187d4:	83 ec 14             	sub    esp,0x14
c00187d7:	fa                   	cli    
c00187d8:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00187de:	ff 05 64 78 02 c0    	inc    DWORD PTR ds:0xc0027864
c00187e4:	fa                   	cli    
c00187e5:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00187eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00187f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187fc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00187ff:	50                   	push   eax
c0018800:	68 6c 78 02 c0       	push   0xc002786c
c0018805:	e8 86 8d 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001880a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001880f:	83 c4 10             	add    esp,0x10
c0018812:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018819:	a1 48 78 02 c0       	mov    eax,ds:0xc0027848
c001881e:	85 c0                	test   eax,eax
c0018820:	74 5e                	je     c0018880 <terminateTask(int)+0xac>
c0018822:	83 ec 0c             	sub    esp,0xc
c0018825:	c6 05 4c 78 02 c0 01 	mov    BYTE PTR ds:0xc002784c,0x1
c001882c:	50                   	push   eax
c001882d:	e8 46 fb ff ff       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	8d 76 00             	lea    esi,[esi+0x0]
c0018838:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c001883d:	48                   	dec    eax
c001883e:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018843:	75 03                	jne    c0018848 <terminateTask(int)+0x74>
c0018845:	fb                   	sti    
c0018846:	66 90                	xchg   ax,ax
c0018848:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c001884d:	48                   	dec    eax
c001884e:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c0018853:	75 0b                	jne    c0018860 <terminateTask(int)+0x8c>
c0018855:	83 3d 60 78 02 c0 00 	cmp    DWORD PTR ds:0xc0027860,0x0
c001885c:	75 36                	jne    c0018894 <terminateTask(int)+0xc0>
c001885e:	66 90                	xchg   ax,ax
c0018860:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018865:	48                   	dec    eax
c0018866:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c001886b:	75 03                	jne    c0018870 <terminateTask(int)+0x9c>
c001886d:	fb                   	sti    
c001886e:	66 90                	xchg   ax,ax
c0018870:	fa                   	cli    
c0018871:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018877:	90                   	nop
c0018878:	e8 3f f6 ff ff       	call   c0017ebc <schedule()>
c001887d:	eb e1                	jmp    c0018860 <terminateTask(int)+0x8c>
c001887f:	90                   	nop
c0018880:	83 ec 0c             	sub    esp,0xc
c0018883:	68 d1 47 02 c0       	push   0xc00247d1
c0018888:	e8 9b 41 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	eb a6                	jmp    c0018838 <terminateTask(int)+0x64>
c0018892:	66 90                	xchg   ax,ax
c0018894:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c001889e:	eb d8                	jmp    c0018878 <terminateTask(int)+0xa4>

c00188a0 <Thr::terminateFromIRQ(int)>:
c00188a0:	83 ec 18             	sub    esp,0x18
c00188a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188a7:	e8 28 ff ff ff       	call   c00187d4 <terminateTask(int)>

c00188ac <Semaphore::release()>:
c00188ac:	83 ec 0c             	sub    esp,0xc
c00188af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188b3:	fa                   	cli    
c00188b4:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00188b9:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c00188bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00188c2:	89 0d 64 78 02 c0    	mov    DWORD PTR ds:0xc0027864,ecx
c00188c8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00188cb:	85 c9                	test   ecx,ecx
c00188cd:	74 41                	je     c0018910 <Semaphore::release()+0x64>
c00188cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00188d2:	83 ec 0c             	sub    esp,0xc
c00188d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00188d8:	51                   	push   ecx
c00188d9:	e8 9a fa ff ff       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c00188de:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00188e3:	83 c4 10             	add    esp,0x10
c00188e6:	48                   	dec    eax
c00188e7:	90                   	nop
c00188e8:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c00188ed:	85 c0                	test   eax,eax
c00188ef:	75 0b                	jne    c00188fc <Semaphore::release()+0x50>
c00188f1:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c00188f6:	85 c0                	test   eax,eax
c00188f8:	75 1e                	jne    c0018918 <Semaphore::release()+0x6c>
c00188fa:	66 90                	xchg   ax,ax
c00188fc:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018901:	48                   	dec    eax
c0018902:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018907:	75 03                	jne    c001890c <Semaphore::release()+0x60>
c0018909:	fb                   	sti    
c001890a:	66 90                	xchg   ax,ax
c001890c:	83 c4 0c             	add    esp,0xc
c001890f:	c3                   	ret    
c0018910:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018913:	eb d3                	jmp    c00188e8 <Semaphore::release()+0x3c>
c0018915:	8d 76 00             	lea    esi,[esi+0x0]
c0018918:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c0018922:	e8 95 f5 ff ff       	call   c0017ebc <schedule()>
c0018927:	eb d3                	jmp    c00188fc <Semaphore::release()+0x50>
c0018929:	8d 76 00             	lea    esi,[esi+0x0]

c001892c <__static_initialization_and_destruction_0(int, int)>:
c001892c:	83 ec 0c             	sub    esp,0xc
c001892f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018934:	0f 85 8e 00 00 00    	jne    c00189c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001893a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018942:	0f 85 80 00 00 00    	jne    c00189c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	68 84 78 02 c0       	push   0xc0027884
c0018950:	e8 e7 8e 00 00       	call   c002183c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018955:	83 c4 10             	add    esp,0x10
c0018958:	83 ec 04             	sub    esp,0x4
c001895b:	68 c8 55 02 c0       	push   0xc00255c8
c0018960:	68 84 78 02 c0       	push   0xc0027884
c0018965:	68 ec 17 02 c0       	push   0xc00217ec
c001896a:	e8 52 3f ff ff       	call   c000c8c1 <__cxa_atexit>
c001896f:	83 c4 10             	add    esp,0x10
c0018972:	83 ec 0c             	sub    esp,0xc
c0018975:	68 78 78 02 c0       	push   0xc0027878
c001897a:	e8 bd 8e 00 00       	call   c002183c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001897f:	83 c4 10             	add    esp,0x10
c0018982:	83 ec 04             	sub    esp,0x4
c0018985:	68 c8 55 02 c0       	push   0xc00255c8
c001898a:	68 78 78 02 c0       	push   0xc0027878
c001898f:	68 ec 17 02 c0       	push   0xc00217ec
c0018994:	e8 28 3f ff ff       	call   c000c8c1 <__cxa_atexit>
c0018999:	83 c4 10             	add    esp,0x10
c001899c:	83 ec 0c             	sub    esp,0xc
c001899f:	68 6c 78 02 c0       	push   0xc002786c
c00189a4:	e8 93 8e 00 00       	call   c002183c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189a9:	83 c4 10             	add    esp,0x10
c00189ac:	83 ec 04             	sub    esp,0x4
c00189af:	68 c8 55 02 c0       	push   0xc00255c8
c00189b4:	68 6c 78 02 c0       	push   0xc002786c
c00189b9:	68 ec 17 02 c0       	push   0xc00217ec
c00189be:	e8 fe 3e ff ff       	call   c000c8c1 <__cxa_atexit>
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	66 90                	xchg   ax,ax
c00189c8:	90                   	nop
c00189c9:	83 c4 0c             	add    esp,0xc
c00189cc:	c3                   	ret    
c00189cd:	8d 76 00             	lea    esi,[esi+0x0]

c00189d0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00189d0:	83 ec 0c             	sub    esp,0xc
c00189d3:	83 ec 08             	sub    esp,0x8
c00189d6:	68 ff ff 00 00       	push   0xffff
c00189db:	6a 01                	push   0x1
c00189dd:	e8 4a ff ff ff       	call   c001892c <__static_initialization_and_destruction_0(int, int)>
c00189e2:	83 c4 10             	add    esp,0x10
c00189e5:	83 c4 0c             	add    esp,0xc
c00189e8:	c3                   	ret    

c00189e9 <Vm::inbv(unsigned short)>:
c00189e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00189ed:	66 81 fa fe fe       	cmp    dx,0xfefe
c00189f2:	75 06                	jne    c00189fa <Vm::inbv(unsigned short)+0x11>
c00189f4:	a0 cc 78 02 c0       	mov    al,ds:0xc00278cc
c00189f9:	c3                   	ret    
c00189fa:	ec                   	in     al,dx
c00189fb:	c3                   	ret    

c00189fc <Vm::outbv(unsigned short, unsigned char)>:
c00189fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a04:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a09:	75 25                	jne    c0018a30 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a0b:	8b 0d cc 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278cc
c0018a11:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a14:	88 81 e0 78 02 c0    	mov    BYTE PTR [ecx-0x3ffd8720],al
c0018a1a:	89 15 cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,edx
c0018a20:	83 fa 20             	cmp    edx,0x20
c0018a23:	75 0c                	jne    c0018a31 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a25:	c7 05 cc 78 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00278cc,0x1f
c0018a2f:	c3                   	ret    
c0018a30:	ee                   	out    dx,al
c0018a31:	c3                   	ret    

c0018a32 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a3c:	c1 e0 04             	shl    eax,0x4
c0018a3f:	01 d0                	add    eax,edx
c0018a41:	c3                   	ret    

c0018a42 <Vm::getSegment(unsigned int)>:
c0018a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a46:	c1 e8 10             	shr    eax,0x10
c0018a49:	c3                   	ret    

c0018a4a <Vm::getOffset(unsigned int)>:
c0018a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a4e:	c3                   	ret    

c0018a4f <Vm::mainloop2()>:
c0018a4f:	83 ec 18             	sub    esp,0x18
c0018a52:	fa                   	cli    
c0018a53:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018a59:	6a 02                	push   0x2
c0018a5b:	c6 05 c5 78 02 c0 01 	mov    BYTE PTR ds:0xc00278c5,0x1
c0018a62:	e8 25 f6 ff ff       	call   c001808c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018a67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a6c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018a70:	52                   	push   edx
c0018a71:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018a75:	52                   	push   edx
c0018a76:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018a7a:	52                   	push   edx
c0018a7b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018a7f:	50                   	push   eax
c0018a80:	e8 aa 77 fe ff       	call   c000022f <goToVM86>
c0018a85:	83 c4 2c             	add    esp,0x2c
c0018a88:	c3                   	ret    

c0018a89 <Vm::mainVm8086Loop(void*)>:
c0018a89:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018a8e:	48                   	dec    eax
c0018a8f:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018a94:	75 01                	jne    c0018a97 <Vm::mainVm8086Loop(void*)+0xe>
c0018a96:	fb                   	sti    
c0018a97:	eb b6                	jmp    c0018a4f <Vm::mainloop2()>

c0018a99 <Vm::mainloop3(unsigned long)>:
c0018a99:	83 ec 18             	sub    esp,0x18
c0018a9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aa0:	fa                   	cli    
c0018aa1:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018aa7:	6a 02                	push   0x2
c0018aa9:	c6 05 c4 78 02 c0 01 	mov    BYTE PTR ds:0xc00278c4,0x1
c0018ab0:	a3 c0 78 02 c0       	mov    ds:0xc00278c0,eax
c0018ab5:	e8 d2 f5 ff ff       	call   c001808c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018aba:	83 c4 1c             	add    esp,0x1c
c0018abd:	eb 90                	jmp    c0018a4f <Vm::mainloop2()>

c0018abf <Vm::initialise8086()>:
c0018abf:	83 ec 0c             	sub    esp,0xc
c0018ac2:	68 80 00 00 00       	push   0x80
c0018ac7:	6a 00                	push   0x0
c0018ac9:	68 89 8a 01 c0       	push   0xc0018a89
c0018ace:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0018ad4:	e8 c7 f1 ff ff       	call   c0017ca0 <Process::createThread(void (*)(void*), void*, int)>
c0018ad9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018ae0:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018ae5:	68 00 01 00 00       	push   0x100
c0018aea:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c0018aef:	6a 00                	push   0x0
c0018af1:	6a 00                	push   0x0
c0018af3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018af9:	e8 ec 34 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018afe:	83 c4 2c             	add    esp,0x2c
c0018b01:	c3                   	ret    

c0018b02 <Vm::finish8086()>:
c0018b02:	53                   	push   ebx
c0018b03:	83 ec 08             	sub    esp,0x8
c0018b06:	fa                   	cli    
c0018b07:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018b0d:	80 3d c4 78 02 c0 00 	cmp    BYTE PTR ds:0xc00278c4,0x0
c0018b14:	75 15                	jne    c0018b2b <Vm::finish8086()+0x29>
c0018b16:	e8 a1 f3 ff ff       	call   c0017ebc <schedule()>
c0018b1b:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018b20:	48                   	dec    eax
c0018b21:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018b26:	75 de                	jne    c0018b06 <Vm::finish8086()+0x4>
c0018b28:	fb                   	sti    
c0018b29:	eb db                	jmp    c0018b06 <Vm::finish8086()+0x4>
c0018b2b:	83 ec 0c             	sub    esp,0xc
c0018b2e:	8b 1d c0 78 02 c0    	mov    ebx,DWORD PTR ds:0xc00278c0
c0018b34:	ff 35 c8 78 02 c0    	push   DWORD PTR ds:0xc00278c8
c0018b3a:	c6 05 c4 78 02 c0 00 	mov    BYTE PTR ds:0xc00278c4,0x0
c0018b41:	e8 32 f8 ff ff       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c0018b46:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018b4b:	83 c4 10             	add    esp,0x10
c0018b4e:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b51:	89 15 68 78 02 c0    	mov    DWORD PTR ds:0xc0027868,edx
c0018b57:	85 d2                	test   edx,edx
c0018b59:	75 01                	jne    c0018b5c <Vm::finish8086()+0x5a>
c0018b5b:	fb                   	sti    
c0018b5c:	89 d8                	mov    eax,ebx
c0018b5e:	83 c4 08             	add    esp,0x8
c0018b61:	5b                   	pop    ebx
c0018b62:	c3                   	ret    

c0018b63 <Vm::getOutput8086(unsigned char*)>:
c0018b63:	57                   	push   edi
c0018b64:	8b 0d cc 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278cc
c0018b6a:	56                   	push   esi
c0018b6b:	be e0 78 02 c0       	mov    esi,0xc00278e0
c0018b70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018b74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b76:	a1 cc 78 02 c0       	mov    eax,ds:0xc00278cc
c0018b7b:	5e                   	pop    esi
c0018b7c:	c7 05 cc 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278cc,0x0
c0018b86:	5f                   	pop    edi
c0018b87:	c3                   	ret    

c0018b88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018b88:	55                   	push   ebp
c0018b89:	57                   	push   edi
c0018b8a:	56                   	push   esi
c0018b8b:	53                   	push   ebx
c0018b8c:	83 ec 2c             	sub    esp,0x2c
c0018b8f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018b93:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018b97:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018b9b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018b9f:	fa                   	cli    
c0018ba0:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0018ba6:	0f b6 35 c5 78 02 c0 	movzx  esi,BYTE PTR ds:0xc00278c5
c0018bad:	89 f0                	mov    eax,esi
c0018baf:	84 c0                	test   al,al
c0018bb1:	75 1d                	jne    c0018bd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bb7:	e8 00 f3 ff ff       	call   c0017ebc <schedule()>
c0018bbc:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018bc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bc5:	48                   	dec    eax
c0018bc6:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018bcb:	75 d2                	jne    c0018b9f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018bcd:	fb                   	sti    
c0018bce:	eb cf                	jmp    c0018b9f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018bd0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018bd5:	c7 05 cc 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278cc,0x0
c0018bdf:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018be3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018be7:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018beb:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018bef:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018bf3:	50                   	push   eax
c0018bf4:	6a 20                	push   0x20
c0018bf6:	6a 00                	push   0x0
c0018bf8:	68 e0 78 02 c0       	push   0xc00278e0
c0018bfd:	e8 82 7a fe ff       	call   c0000684 <memset>
c0018c02:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c09:	e8 b5 0d ff ff       	call   c00099c3 <malloc>
c0018c0e:	83 c4 0c             	add    esp,0xc
c0018c11:	89 c3                	mov    ebx,eax
c0018c13:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c0018c19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c1d:	50                   	push   eax
c0018c1e:	e8 6f 43 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	85 db                	test   ebx,ebx
c0018c28:	75 0a                	jne    c0018c34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c2a:	83 ec 0c             	sub    esp,0xc
c0018c2d:	68 fc 48 02 c0       	push   0xc00248fc
c0018c32:	eb 3e                	jmp    c0018c72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c34:	50                   	push   eax
c0018c35:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c39:	50                   	push   eax
c0018c3a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c3e:	50                   	push   eax
c0018c3f:	53                   	push   ebx
c0018c40:	e8 5d 46 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c4d:	74 0a                	je     c0018c59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c4f:	83 ec 0c             	sub    esp,0xc
c0018c52:	68 10 49 02 c0       	push   0xc0024910
c0018c57:	eb 19                	jmp    c0018c72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c59:	51                   	push   ecx
c0018c5a:	51                   	push   ecx
c0018c5b:	6a 01                	push   0x1
c0018c5d:	53                   	push   ebx
c0018c5e:	e8 93 43 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	85 c0                	test   eax,eax
c0018c68:	74 24                	je     c0018c8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018c6a:	83 ec 0c             	sub    esp,0xc
c0018c6d:	68 29 49 02 c0       	push   0xc0024929
c0018c72:	e8 72 b6 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0018c77:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	48                   	dec    eax
c0018c80:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018c85:	85 c0                	test   eax,eax
c0018c87:	75 01                	jne    c0018c8a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018c89:	fb                   	sti    
c0018c8a:	31 f6                	xor    esi,esi
c0018c8c:	eb 58                	jmp    c0018ce6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018c8e:	0f b7 ed             	movzx  ebp,bp
c0018c91:	50                   	push   eax
c0018c92:	0f b7 ff             	movzx  edi,di
c0018c95:	50                   	push   eax
c0018c96:	55                   	push   ebp
c0018c97:	57                   	push   edi
c0018c98:	e8 95 fd ff ff       	call   c0018a32 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c9d:	5a                   	pop    edx
c0018c9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ca0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018ca4:	51                   	push   ecx
c0018ca5:	50                   	push   eax
c0018ca6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018caa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cae:	53                   	push   ebx
c0018caf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cb2:	83 c4 14             	add    esp,0x14
c0018cb5:	53                   	push   ebx
c0018cb6:	e8 99 43 ff ff       	call   c000d054 <File::close()>
c0018cbb:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c0018cc0:	83 c4 10             	add    esp,0x10
c0018cc3:	48                   	dec    eax
c0018cc4:	c6 05 c5 78 02 c0 00 	mov    BYTE PTR ds:0xc00278c5,0x0
c0018ccb:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0018cd0:	85 c0                	test   eax,eax
c0018cd2:	75 01                	jne    c0018cd5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018cd4:	fb                   	sti    
c0018cd5:	83 ec 0c             	sub    esp,0xc
c0018cd8:	ff 35 c8 78 02 c0    	push   DWORD PTR ds:0xc00278c8
c0018cde:	e8 95 f6 ff ff       	call   c0018378 <unblockTask(ThreadControlBlock*)>
c0018ce3:	83 c4 10             	add    esp,0x10
c0018ce6:	83 c4 2c             	add    esp,0x2c
c0018ce9:	89 f0                	mov    eax,esi
c0018ceb:	5b                   	pop    ebx
c0018cec:	5e                   	pop    esi
c0018ced:	5f                   	pop    edi
c0018cee:	5d                   	pop    ebp
c0018cef:	c3                   	ret    

c0018cf0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018cf0:	57                   	push   edi
c0018cf1:	56                   	push   esi
c0018cf2:	53                   	push   ebx
c0018cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cfb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018cff:	83 e8 06             	sub    eax,0x6
c0018d02:	0f b7 c0             	movzx  eax,ax
c0018d05:	50                   	push   eax
c0018d06:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d0b:	50                   	push   eax
c0018d0c:	e8 21 fd ff ff       	call   c0018a32 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d11:	5a                   	pop    edx
c0018d12:	5e                   	pop    esi
c0018d13:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d16:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d19:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d1f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d22:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d25:	83 c2 02             	add    edx,0x2
c0018d28:	66 89 10             	mov    WORD PTR [eax],dx
c0018d2b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d2e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d32:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d35:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d39:	89 d6                	mov    esi,edx
c0018d3b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d41:	66 81 e6 ff fd       	and    si,0xfdff
c0018d46:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d4a:	74 07                	je     c0018d53 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d4c:	89 d6                	mov    esi,edx
c0018d4e:	66 81 ce 00 02       	or     si,0x200
c0018d53:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018d57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d5c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018d60:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018d68:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018d6b:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018d73:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018d76:	5b                   	pop    ebx
c0018d77:	5e                   	pop    esi
c0018d78:	5f                   	pop    edi
c0018d79:	c3                   	ret    

c0018d7a <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018d7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018d7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018d84:	c1 e0 04             	shl    eax,0x4
c0018d87:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018d8a:	c3                   	ret    

c0018d8b <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018d8b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018d90:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018d95:	c1 e0 04             	shl    eax,0x4
c0018d98:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018d9c:	c3                   	ret    

c0018d9d <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018d9d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018da2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018da7:	c1 e0 04             	shl    eax,0x4
c0018daa:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018dad:	c3                   	ret    

c0018dae <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018dae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018db3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018db8:	c1 e0 04             	shl    eax,0x4
c0018dbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dbf:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018dc2:	c3                   	ret    

c0018dc3 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018dc3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dc8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dcd:	c1 e0 04             	shl    eax,0x4
c0018dd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dd4:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018dd8:	c3                   	ret    

c0018dd9 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018dd9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dde:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018de3:	c1 e0 04             	shl    eax,0x4
c0018de6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dea:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018ded:	c3                   	ret    

c0018dee <Vm::faultHandler(regs*)>:
c0018dee:	55                   	push   ebp
c0018def:	57                   	push   edi
c0018df0:	56                   	push   esi
c0018df1:	53                   	push   ebx
c0018df2:	83 ec 1c             	sub    esp,0x1c
c0018df5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018df9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018dfc:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e00:	0f b7 f8             	movzx  edi,ax
c0018e03:	52                   	push   edx
c0018e04:	0f b7 c0             	movzx  eax,ax
c0018e07:	50                   	push   eax
c0018e08:	e8 25 fc ff ff       	call   c0018a32 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e0d:	5a                   	pop    edx
c0018e0e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e11:	59                   	pop    ecx
c0018e12:	89 c1                	mov    ecx,eax
c0018e14:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e24:	0f b7 c5             	movzx  eax,bp
c0018e27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e2b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e33:	e8 fa fb ff ff       	call   c0018a32 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e38:	5e                   	pop    esi
c0018e39:	be 06 00 00 00       	mov    esi,0x6
c0018e3e:	5a                   	pop    edx
c0018e3f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e44:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e49:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e4c:	80 fa 9d             	cmp    dl,0x9d
c0018e4f:	0f 84 2c 02 00 00    	je     c0019081 <Vm::faultHandler(regs*)+0x293>
c0018e55:	0f 87 91 00 00 00    	ja     c0018eec <Vm::faultHandler(regs*)+0xfe>
c0018e5b:	80 fa 66             	cmp    dl,0x66
c0018e5e:	0f 84 98 01 00 00    	je     c0018ffc <Vm::faultHandler(regs*)+0x20e>
c0018e64:	77 47                	ja     c0018ead <Vm::faultHandler(regs*)+0xbf>
c0018e66:	80 fa 36             	cmp    dl,0x36
c0018e69:	0f 84 80 01 00 00    	je     c0018fef <Vm::faultHandler(regs*)+0x201>
c0018e6f:	77 1a                	ja     c0018e8b <Vm::faultHandler(regs*)+0x9d>
c0018e71:	80 fa 26             	cmp    dl,0x26
c0018e74:	0f 84 4e 01 00 00    	je     c0018fc8 <Vm::faultHandler(regs*)+0x1da>
c0018e7a:	80 fa 2e             	cmp    dl,0x2e
c0018e7d:	0f 85 e2 05 00 00    	jne    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018e83:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e86:	31 f6                	xor    esi,esi
c0018e88:	41                   	inc    ecx
c0018e89:	eb be                	jmp    c0018e49 <Vm::faultHandler(regs*)+0x5b>
c0018e8b:	80 fa 64             	cmp    dl,0x64
c0018e8e:	0f 84 41 01 00 00    	je     c0018fd5 <Vm::faultHandler(regs*)+0x1e7>
c0018e94:	0f 87 48 01 00 00    	ja     c0018fe2 <Vm::faultHandler(regs*)+0x1f4>
c0018e9a:	80 fa 3e             	cmp    dl,0x3e
c0018e9d:	0f 85 c2 05 00 00    	jne    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018ea3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ea6:	be 01 00 00 00       	mov    esi,0x1
c0018eab:	eb db                	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0018ead:	80 fa 6d             	cmp    dl,0x6d
c0018eb0:	0f 84 ec 02 00 00    	je     c00191a2 <Vm::faultHandler(regs*)+0x3b4>
c0018eb6:	77 17                	ja     c0018ecf <Vm::faultHandler(regs*)+0xe1>
c0018eb8:	80 fa 67             	cmp    dl,0x67
c0018ebb:	0f 84 48 01 00 00    	je     c0019009 <Vm::faultHandler(regs*)+0x21b>
c0018ec1:	80 fa 6c             	cmp    dl,0x6c
c0018ec4:	0f 84 69 02 00 00    	je     c0019133 <Vm::faultHandler(regs*)+0x345>
c0018eca:	e9 96 05 00 00       	jmp    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018ecf:	80 fa 6f             	cmp    dl,0x6f
c0018ed2:	0f 84 f4 03 00 00    	je     c00192cc <Vm::faultHandler(regs*)+0x4de>
c0018ed8:	0f 82 59 03 00 00    	jb     c0019237 <Vm::faultHandler(regs*)+0x449>
c0018ede:	80 fa 9c             	cmp    dl,0x9c
c0018ee1:	0f 84 2f 01 00 00    	je     c0019016 <Vm::faultHandler(regs*)+0x228>
c0018ee7:	e9 79 05 00 00       	jmp    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018eec:	80 fa ec             	cmp    dl,0xec
c0018eef:	0f 84 14 05 00 00    	je     c0019409 <Vm::faultHandler(regs*)+0x61b>
c0018ef5:	77 7b                	ja     c0018f72 <Vm::faultHandler(regs*)+0x184>
c0018ef7:	80 fa e4             	cmp    dl,0xe4
c0018efa:	0f 84 93 04 00 00    	je     c0019393 <Vm::faultHandler(regs*)+0x5a5>
c0018f00:	77 53                	ja     c0018f55 <Vm::faultHandler(regs*)+0x167>
c0018f02:	80 fa cd             	cmp    dl,0xcd
c0018f05:	0f 84 d9 01 00 00    	je     c00190e4 <Vm::faultHandler(regs*)+0x2f6>
c0018f0b:	80 fa cf             	cmp    dl,0xcf
c0018f0e:	0f 85 51 05 00 00    	jne    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018f14:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f17:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f1a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f1e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f21:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f25:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f2b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f2e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f32:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f38:	66 c1 e8 09          	shr    ax,0x9
c0018f3c:	83 e0 01             	and    eax,0x1
c0018f3f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f42:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f45:	83 c0 06             	add    eax,0x6
c0018f48:	25 ff ff 00 00       	and    eax,0xffff
c0018f4d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f50:	e9 0c 05 00 00       	jmp    c0019461 <Vm::faultHandler(regs*)+0x673>
c0018f55:	80 fa e6             	cmp    dl,0xe6
c0018f58:	0f 84 7f 04 00 00    	je     c00193dd <Vm::faultHandler(regs*)+0x5ef>
c0018f5e:	0f 82 4b 04 00 00    	jb     c00193af <Vm::faultHandler(regs*)+0x5c1>
c0018f64:	80 fa e7             	cmp    dl,0xe7
c0018f67:	0f 84 87 04 00 00    	je     c00193f4 <Vm::faultHandler(regs*)+0x606>
c0018f6d:	e9 f3 04 00 00       	jmp    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018f72:	80 fa ef             	cmp    dl,0xef
c0018f75:	0f 84 d1 04 00 00    	je     c001944c <Vm::faultHandler(regs*)+0x65e>
c0018f7b:	77 28                	ja     c0018fa5 <Vm::faultHandler(regs*)+0x1b7>
c0018f7d:	80 fa ed             	cmp    dl,0xed
c0018f80:	0f 84 9f 04 00 00    	je     c0019425 <Vm::faultHandler(regs*)+0x637>
c0018f86:	80 fa ee             	cmp    dl,0xee
c0018f89:	0f 85 d6 04 00 00    	jne    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018f8f:	50                   	push   eax
c0018f90:	50                   	push   eax
c0018f91:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018f95:	50                   	push   eax
c0018f96:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018f9a:	50                   	push   eax
c0018f9b:	e8 5c fa ff ff       	call   c00189fc <Vm::outbv(unsigned short, unsigned char)>
c0018fa0:	e9 9f 04 00 00       	jmp    c0019444 <Vm::faultHandler(regs*)+0x656>
c0018fa5:	80 fa fa             	cmp    dl,0xfa
c0018fa8:	0f 84 69 01 00 00    	je     c0019117 <Vm::faultHandler(regs*)+0x329>
c0018fae:	80 fa fb             	cmp    dl,0xfb
c0018fb1:	0f 84 6e 01 00 00    	je     c0019125 <Vm::faultHandler(regs*)+0x337>
c0018fb7:	80 fa f3             	cmp    dl,0xf3
c0018fba:	0f 85 a5 04 00 00    	jne    c0019465 <Vm::faultHandler(regs*)+0x677>
c0018fc0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fc3:	e9 c0 fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0018fc8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fcb:	be 02 00 00 00       	mov    esi,0x2
c0018fd0:	e9 b3 fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0018fd5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fd8:	be 03 00 00 00       	mov    esi,0x3
c0018fdd:	e9 a6 fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0018fe2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fe5:	be 04 00 00 00       	mov    esi,0x4
c0018fea:	e9 99 fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0018fef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ff2:	be 05 00 00 00       	mov    esi,0x5
c0018ff7:	e9 8c fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0018ffc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fff:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019004:	e9 7f fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0019009:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001900c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019011:	e9 72 fe ff ff       	jmp    c0018e88 <Vm::faultHandler(regs*)+0x9a>
c0019016:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019019:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001901d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019022:	74 30                	je     c0019054 <Vm::faultHandler(regs*)+0x266>
c0019024:	83 e9 04             	sub    ecx,0x4
c0019027:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001902d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019033:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019036:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019039:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001903f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019043:	0f 84 15 04 00 00    	je     c001945e <Vm::faultHandler(regs*)+0x670>
c0019049:	80 ce 02             	or     dh,0x2
c001904c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001904f:	e9 0a 04 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019054:	83 e9 02             	sub    ecx,0x2
c0019057:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001905d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019060:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019064:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001906a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001906e:	74 05                	je     c0019075 <Vm::faultHandler(regs*)+0x287>
c0019070:	80 ce 02             	or     dh,0x2
c0019073:	eb 03                	jmp    c0019078 <Vm::faultHandler(regs*)+0x28a>
c0019075:	80 e6 fd             	and    dh,0xfd
c0019078:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001907c:	e9 dd 03 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019081:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019086:	74 2a                	je     c00190b2 <Vm::faultHandler(regs*)+0x2c4>
c0019088:	8b 10                	mov    edx,DWORD PTR [eax]
c001908a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019090:	81 ca 00 02 02 00    	or     edx,0x20200
c0019096:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019099:	8b 00                	mov    eax,DWORD PTR [eax]
c001909b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190a1:	c1 e8 09             	shr    eax,0x9
c00190a4:	83 e0 01             	and    eax,0x1
c00190a7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190aa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190ad:	83 c0 04             	add    eax,0x4
c00190b0:	eb 25                	jmp    c00190d7 <Vm::faultHandler(regs*)+0x2e9>
c00190b2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00190b5:	81 ca 00 02 02 00    	or     edx,0x20200
c00190bb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00190c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190c7:	66 c1 e8 09          	shr    ax,0x9
c00190cb:	83 e0 01             	and    eax,0x1
c00190ce:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190d1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190d4:	83 c0 02             	add    eax,0x2
c00190d7:	25 ff ff 00 00       	and    eax,0xffff
c00190dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00190df:	e9 7a 03 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c00190e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00190e8:	3c ee                	cmp    al,0xee
c00190ea:	75 10                	jne    c00190fc <Vm::faultHandler(regs*)+0x30e>
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00190f2:	e8 a2 f9 ff ff       	call   c0018a99 <Vm::mainloop3(unsigned long)>
c00190f7:	e9 4b 03 00 00       	jmp    c0019447 <Vm::faultHandler(regs*)+0x659>
c00190fc:	83 ec 0c             	sub    esp,0xc
c00190ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019107:	51                   	push   ecx
c0019108:	50                   	push   eax
c0019109:	53                   	push   ebx
c001910a:	e8 e1 fb ff ff       	call   c0018cf0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001910f:	83 c4 20             	add    esp,0x20
c0019112:	e9 4a 03 00 00       	jmp    c0019461 <Vm::faultHandler(regs*)+0x673>
c0019117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001911c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019120:	e9 39 03 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001912a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001912e:	e9 2b 03 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019133:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019136:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001913b:	74 2b                	je     c0019168 <Vm::faultHandler(regs*)+0x37a>
c001913d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019144:	76 22                	jbe    c0019168 <Vm::faultHandler(regs*)+0x37a>
c0019146:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001914a:	50                   	push   eax
c001914b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001914f:	50                   	push   eax
c0019150:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019154:	50                   	push   eax
c0019155:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019159:	50                   	push   eax
c001915a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001915e:	50                   	push   eax
c001915f:	6a 6c                	push   0x6c
c0019161:	6a 6c                	push   0x6c
c0019163:	e9 b9 01 00 00       	jmp    c0019321 <Vm::faultHandler(regs*)+0x533>
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001916f:	0f b7 f6             	movzx  esi,si
c0019172:	50                   	push   eax
c0019173:	e8 71 f8 ff ff       	call   c00189e9 <Vm::inbv(unsigned short)>
c0019178:	83 c4 0c             	add    esp,0xc
c001917b:	0f b6 c0             	movzx  eax,al
c001917e:	50                   	push   eax
c001917f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019183:	50                   	push   eax
c0019184:	56                   	push   esi
c0019185:	e8 24 fc ff ff       	call   c0018dae <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019190:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019194:	74 03                	je     c0019199 <Vm::faultHandler(regs*)+0x3ab>
c0019196:	48                   	dec    eax
c0019197:	eb 01                	jmp    c001919a <Vm::faultHandler(regs*)+0x3ac>
c0019199:	40                   	inc    eax
c001919a:	0f b7 c0             	movzx  eax,ax
c001919d:	e9 8d 00 00 00       	jmp    c001922f <Vm::faultHandler(regs*)+0x441>
c00191a2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191a8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191ad:	74 29                	je     c00191d8 <Vm::faultHandler(regs*)+0x3ea>
c00191af:	3d ff ff 00 00       	cmp    eax,0xffff
c00191b4:	76 22                	jbe    c00191d8 <Vm::faultHandler(regs*)+0x3ea>
c00191b6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191ba:	50                   	push   eax
c00191bb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191bf:	50                   	push   eax
c00191c0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191c4:	50                   	push   eax
c00191c5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191c9:	50                   	push   eax
c00191ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191ce:	50                   	push   eax
c00191cf:	6a 6d                	push   0x6d
c00191d1:	6a 6d                	push   0x6d
c00191d3:	e9 49 01 00 00       	jmp    c0019321 <Vm::faultHandler(regs*)+0x533>
c00191d8:	0f b7 c8             	movzx  ecx,ax
c00191db:	0f b7 f6             	movzx  esi,si
c00191de:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191e1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191e6:	74 20                	je     c0019208 <Vm::faultHandler(regs*)+0x41a>
c00191e8:	ed                   	in     eax,dx
c00191e9:	55                   	push   ebp
c00191ea:	50                   	push   eax
c00191eb:	51                   	push   ecx
c00191ec:	56                   	push   esi
c00191ed:	e8 e7 fb ff ff       	call   c0018dd9 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00191f2:	83 c4 10             	add    esp,0x10
c00191f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191f8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191fc:	74 05                	je     c0019203 <Vm::faultHandler(regs*)+0x415>
c00191fe:	83 e8 04             	sub    eax,0x4
c0019201:	eb 27                	jmp    c001922a <Vm::faultHandler(regs*)+0x43c>
c0019203:	83 c0 04             	add    eax,0x4
c0019206:	eb 22                	jmp    c001922a <Vm::faultHandler(regs*)+0x43c>
c0019208:	66 ed                	in     ax,dx
c001920a:	0f b7 c0             	movzx  eax,ax
c001920d:	57                   	push   edi
c001920e:	50                   	push   eax
c001920f:	51                   	push   ecx
c0019210:	56                   	push   esi
c0019211:	e8 ad fb ff ff       	call   c0018dc3 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019216:	83 c4 10             	add    esp,0x10
c0019219:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001921c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019220:	74 05                	je     c0019227 <Vm::faultHandler(regs*)+0x439>
c0019222:	83 e8 02             	sub    eax,0x2
c0019225:	eb 03                	jmp    c001922a <Vm::faultHandler(regs*)+0x43c>
c0019227:	83 c0 02             	add    eax,0x2
c001922a:	25 ff ff 00 00       	and    eax,0xffff
c001922f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019232:	e9 27 02 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019237:	8d 46 ff             	lea    eax,[esi-0x1]
c001923a:	3c 05                	cmp    al,0x5
c001923c:	77 24                	ja     c0019262 <Vm::faultHandler(regs*)+0x474>
c001923e:	0f b6 c0             	movzx  eax,al
c0019241:	ff 24 85 9c 49 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb664]
c0019248:	0f b7 fd             	movzx  edi,bp
c001924b:	eb 15                	jmp    c0019262 <Vm::faultHandler(regs*)+0x474>
c001924d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019251:	eb 0f                	jmp    c0019262 <Vm::faultHandler(regs*)+0x474>
c0019253:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019257:	eb 09                	jmp    c0019262 <Vm::faultHandler(regs*)+0x474>
c0019259:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001925d:	eb 03                	jmp    c0019262 <Vm::faultHandler(regs*)+0x474>
c001925f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019265:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001926a:	74 29                	je     c0019295 <Vm::faultHandler(regs*)+0x4a7>
c001926c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019271:	76 22                	jbe    c0019295 <Vm::faultHandler(regs*)+0x4a7>
c0019273:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019277:	50                   	push   eax
c0019278:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001927c:	50                   	push   eax
c001927d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019281:	50                   	push   eax
c0019282:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019286:	50                   	push   eax
c0019287:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001928b:	50                   	push   eax
c001928c:	6a 6e                	push   0x6e
c001928e:	6a 6e                	push   0x6e
c0019290:	e9 8c 00 00 00       	jmp    c0019321 <Vm::faultHandler(regs*)+0x533>
c0019295:	0f b7 c0             	movzx  eax,ax
c0019298:	52                   	push   edx
c0019299:	52                   	push   edx
c001929a:	50                   	push   eax
c001929b:	57                   	push   edi
c001929c:	e8 d9 fa ff ff       	call   c0018d7a <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192a1:	59                   	pop    ecx
c00192a2:	0f b6 c0             	movzx  eax,al
c00192a5:	5e                   	pop    esi
c00192a6:	50                   	push   eax
c00192a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192ab:	50                   	push   eax
c00192ac:	e8 4b f7 ff ff       	call   c00189fc <Vm::outbv(unsigned short, unsigned char)>
c00192b1:	83 c4 10             	add    esp,0x10
c00192b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192b7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192bb:	74 03                	je     c00192c0 <Vm::faultHandler(regs*)+0x4d2>
c00192bd:	48                   	dec    eax
c00192be:	eb 01                	jmp    c00192c1 <Vm::faultHandler(regs*)+0x4d3>
c00192c0:	40                   	inc    eax
c00192c1:	0f b7 c0             	movzx  eax,ax
c00192c4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00192c7:	e9 92 01 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c00192cc:	8d 46 ff             	lea    eax,[esi-0x1]
c00192cf:	3c 05                	cmp    al,0x5
c00192d1:	77 1f                	ja     c00192f2 <Vm::faultHandler(regs*)+0x504>
c00192d3:	0f b6 c0             	movzx  eax,al
c00192d6:	ff 24 85 b4 49 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb64c]
c00192dd:	89 ef                	mov    edi,ebp
c00192df:	eb 11                	jmp    c00192f2 <Vm::faultHandler(regs*)+0x504>
c00192e1:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00192e4:	eb 0c                	jmp    c00192f2 <Vm::faultHandler(regs*)+0x504>
c00192e6:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00192e9:	eb 07                	jmp    c00192f2 <Vm::faultHandler(regs*)+0x504>
c00192eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00192ee:	eb 02                	jmp    c00192f2 <Vm::faultHandler(regs*)+0x504>
c00192f0:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00192f2:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00192f5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00192fa:	74 37                	je     c0019333 <Vm::faultHandler(regs*)+0x545>
c00192fc:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019302:	76 2f                	jbe    c0019333 <Vm::faultHandler(regs*)+0x545>
c0019304:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019308:	50                   	push   eax
c0019309:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001930d:	50                   	push   eax
c001930e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019312:	50                   	push   eax
c0019313:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019317:	50                   	push   eax
c0019318:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001931c:	50                   	push   eax
c001931d:	6a 6f                	push   0x6f
c001931f:	6a 6f                	push   0x6f
c0019321:	68 42 49 02 c0       	push   0xc0024942
c0019326:	e8 fd 36 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001932b:	83 c4 20             	add    esp,0x20
c001932e:	e9 86 01 00 00       	jmp    c00194b9 <Vm::faultHandler(regs*)+0x6cb>
c0019333:	0f b7 d7             	movzx  edx,di
c0019336:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019339:	0f b7 c6             	movzx  eax,si
c001933c:	81 e1 00 04 00 00    	and    ecx,0x400
c0019342:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019345:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001934a:	74 1d                	je     c0019369 <Vm::faultHandler(regs*)+0x57b>
c001934c:	55                   	push   ebp
c001934d:	55                   	push   ebp
c001934e:	50                   	push   eax
c001934f:	52                   	push   edx
c0019350:	e8 48 fa ff ff       	call   c0018d9d <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	89 fa                	mov    edx,edi
c001935a:	ef                   	out    dx,eax
c001935b:	85 c9                	test   ecx,ecx
c001935d:	74 05                	je     c0019364 <Vm::faultHandler(regs*)+0x576>
c001935f:	83 ee 04             	sub    esi,0x4
c0019362:	eb 21                	jmp    c0019385 <Vm::faultHandler(regs*)+0x597>
c0019364:	83 c6 04             	add    esi,0x4
c0019367:	eb 1c                	jmp    c0019385 <Vm::faultHandler(regs*)+0x597>
c0019369:	55                   	push   ebp
c001936a:	55                   	push   ebp
c001936b:	50                   	push   eax
c001936c:	52                   	push   edx
c001936d:	e8 19 fa ff ff       	call   c0018d8b <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	89 fa                	mov    edx,edi
c0019377:	66 ef                	out    dx,ax
c0019379:	85 c9                	test   ecx,ecx
c001937b:	74 05                	je     c0019382 <Vm::faultHandler(regs*)+0x594>
c001937d:	83 ee 02             	sub    esi,0x2
c0019380:	eb 03                	jmp    c0019385 <Vm::faultHandler(regs*)+0x597>
c0019382:	83 c6 02             	add    esi,0x2
c0019385:	81 e6 ff ff 00 00    	and    esi,0xffff
c001938b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001938e:	e9 cb 00 00 00       	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019393:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001939a:	83 ec 0c             	sub    esp,0xc
c001939d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193a1:	50                   	push   eax
c00193a2:	e8 42 f6 ff ff       	call   c00189e9 <Vm::inbv(unsigned short)>
c00193a7:	0f b6 c0             	movzx  eax,al
c00193aa:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193ad:	eb 3f                	jmp    c00193ee <Vm::faultHandler(regs*)+0x600>
c00193af:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193b4:	74 07                	je     c00193bd <Vm::faultHandler(regs*)+0x5cf>
c00193b6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193ba:	ed                   	in     eax,dx
c00193bb:	eb 14                	jmp    c00193d1 <Vm::faultHandler(regs*)+0x5e3>
c00193bd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00193c0:	66 31 f6             	xor    si,si
c00193c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00193c6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193ca:	66 ed                	in     ax,dx
c00193cc:	0f b7 c0             	movzx  eax,ax
c00193cf:	09 f0                	or     eax,esi
c00193d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00193d4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00193d8:	e9 84 00 00 00       	jmp    c0019461 <Vm::faultHandler(regs*)+0x673>
c00193dd:	52                   	push   edx
c00193de:	52                   	push   edx
c00193df:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00193e3:	50                   	push   eax
c00193e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193e8:	50                   	push   eax
c00193e9:	e8 0e f6 ff ff       	call   c00189fc <Vm::outbv(unsigned short, unsigned char)>
c00193ee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00193f2:	eb 53                	jmp    c0019447 <Vm::faultHandler(regs*)+0x659>
c00193f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00193f7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193fb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019400:	74 03                	je     c0019405 <Vm::faultHandler(regs*)+0x617>
c0019402:	ef                   	out    dx,eax
c0019403:	eb cf                	jmp    c00193d4 <Vm::faultHandler(regs*)+0x5e6>
c0019405:	66 ef                	out    dx,ax
c0019407:	eb cb                	jmp    c00193d4 <Vm::faultHandler(regs*)+0x5e6>
c0019409:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019417:	50                   	push   eax
c0019418:	e8 cc f5 ff ff       	call   c00189e9 <Vm::inbv(unsigned short)>
c001941d:	0f b6 c0             	movzx  eax,al
c0019420:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019423:	eb 1f                	jmp    c0019444 <Vm::faultHandler(regs*)+0x656>
c0019425:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019428:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001942d:	74 03                	je     c0019432 <Vm::faultHandler(regs*)+0x644>
c001942f:	ed                   	in     eax,dx
c0019430:	eb 0d                	jmp    c001943f <Vm::faultHandler(regs*)+0x651>
c0019432:	66 ed                	in     ax,dx
c0019434:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019437:	0f b7 c0             	movzx  eax,ax
c001943a:	66 31 d2             	xor    dx,dx
c001943d:	09 d0                	or     eax,edx
c001943f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019442:	eb 1a                	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c0019444:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019447:	83 c4 10             	add    esp,0x10
c001944a:	eb 15                	jmp    c0019461 <Vm::faultHandler(regs*)+0x673>
c001944c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001944f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019452:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019457:	74 03                	je     c001945c <Vm::faultHandler(regs*)+0x66e>
c0019459:	ef                   	out    dx,eax
c001945a:	eb 02                	jmp    c001945e <Vm::faultHandler(regs*)+0x670>
c001945c:	66 ef                	out    dx,ax
c001945e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019461:	b0 01                	mov    al,0x1
c0019463:	eb 56                	jmp    c00194bb <Vm::faultHandler(regs*)+0x6cd>
c0019465:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019469:	50                   	push   eax
c001946a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001946e:	50                   	push   eax
c001946f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019473:	50                   	push   eax
c0019474:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019478:	50                   	push   eax
c0019479:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001947d:	50                   	push   eax
c001947e:	52                   	push   edx
c001947f:	52                   	push   edx
c0019480:	68 6f 49 02 c0       	push   0xc002496f
c0019485:	e8 9e 35 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001948a:	83 c4 20             	add    esp,0x20
c001948d:	83 ec 0c             	sub    esp,0xc
c0019490:	6a 60                	push   0x60
c0019492:	e8 52 f5 ff ff       	call   c00189e9 <Vm::inbv(unsigned short)>
c0019497:	83 c4 10             	add    esp,0x10
c001949a:	3c 1c                	cmp    al,0x1c
c001949c:	74 04                	je     c00194a2 <Vm::faultHandler(regs*)+0x6b4>
c001949e:	3c 5a                	cmp    al,0x5a
c00194a0:	75 eb                	jne    c001948d <Vm::faultHandler(regs*)+0x69f>
c00194a2:	3c 5a                	cmp    al,0x5a
c00194a4:	74 04                	je     c00194aa <Vm::faultHandler(regs*)+0x6bc>
c00194a6:	3c 1c                	cmp    al,0x1c
c00194a8:	75 0f                	jne    c00194b9 <Vm::faultHandler(regs*)+0x6cb>
c00194aa:	83 ec 0c             	sub    esp,0xc
c00194ad:	6a 60                	push   0x60
c00194af:	e8 35 f5 ff ff       	call   c00189e9 <Vm::inbv(unsigned short)>
c00194b4:	83 c4 10             	add    esp,0x10
c00194b7:	eb e9                	jmp    c00194a2 <Vm::faultHandler(regs*)+0x6b4>
c00194b9:	31 c0                	xor    eax,eax
c00194bb:	83 c4 1c             	add    esp,0x1c
c00194be:	5b                   	pop    ebx
c00194bf:	5e                   	pop    esi
c00194c0:	5f                   	pop    edi
c00194c1:	5d                   	pop    ebp
c00194c2:	c3                   	ret    
c00194c3:	90                   	nop

c00194c4 <Vm::fpuInternalTo32(unsigned long long)>:
c00194c4:	57                   	push   edi
c00194c5:	56                   	push   esi
c00194c6:	53                   	push   ebx
c00194c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194cf:	89 d6                	mov    esi,edx
c00194d1:	89 d7                	mov    edi,edx
c00194d3:	89 c1                	mov    ecx,eax
c00194d5:	c1 ef 14             	shr    edi,0x14
c00194d8:	89 d3                	mov    ebx,edx
c00194da:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00194e0:	31 d2                	xor    edx,edx
c00194e2:	89 f8                	mov    eax,edi
c00194e4:	81 e6 00 00 00 80    	and    esi,0x80000000
c00194ea:	bf ff 00 00 00       	mov    edi,0xff
c00194ef:	05 80 fc ff ff       	add    eax,0xfffffc80
c00194f4:	83 d2 ff             	adc    edx,0xffffffff
c00194f7:	39 c7                	cmp    edi,eax
c00194f9:	bf 00 00 00 00       	mov    edi,0x0
c00194fe:	19 d7                	sbb    edi,edx
c0019500:	72 16                	jb     c0019518 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019502:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019506:	c1 e0 17             	shl    eax,0x17
c0019509:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001950f:	09 f1                	or     ecx,esi
c0019511:	09 c1                	or     ecx,eax
c0019513:	89 cf                	mov    edi,ecx
c0019515:	eb 05                	jmp    c001951c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019517:	90                   	nop
c0019518:	31 ff                	xor    edi,edi
c001951a:	66 90                	xchg   ax,ax
c001951c:	89 f8                	mov    eax,edi
c001951e:	5b                   	pop    ebx
c001951f:	5e                   	pop    esi
c0019520:	5f                   	pop    edi
c0019521:	c3                   	ret    

c0019522 <Vm::fpuInternalTo64(unsigned long long)>:
c0019522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019526:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001952a:	c3                   	ret    

c001952b <Vm::fpu32ToInternal(unsigned int)>:
c001952b:	57                   	push   edi
c001952c:	31 ff                	xor    edi,edi
c001952e:	56                   	push   esi
c001952f:	53                   	push   ebx
c0019530:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019534:	89 cb                	mov    ebx,ecx
c0019536:	89 ce                	mov    esi,ecx
c0019538:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001953e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019544:	c1 e9 17             	shr    ecx,0x17
c0019547:	89 f0                	mov    eax,esi
c0019549:	0f b6 d1             	movzx  edx,cl
c001954c:	81 c2 80 03 00 00    	add    edx,0x380
c0019552:	89 d1                	mov    ecx,edx
c0019554:	89 fa                	mov    edx,edi
c0019556:	c1 e1 14             	shl    ecx,0x14
c0019559:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001955d:	c1 e0 1d             	shl    eax,0x1d
c0019560:	89 d7                	mov    edi,edx
c0019562:	89 c6                	mov    esi,eax
c0019564:	89 ca                	mov    edx,ecx
c0019566:	89 f0                	mov    eax,esi
c0019568:	09 fa                	or     edx,edi
c001956a:	09 da                	or     edx,ebx
c001956c:	5b                   	pop    ebx
c001956d:	5e                   	pop    esi
c001956e:	5f                   	pop    edi
c001956f:	c3                   	ret    

c0019570 <Vm::fpu64ToInternal(unsigned long long)>:
c0019570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019574:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019578:	c3                   	ret    

c0019579 <Vm::fpuFloatToLong(unsigned long long)>:
c0019579:	57                   	push   edi
c001957a:	31 c0                	xor    eax,eax
c001957c:	56                   	push   esi
c001957d:	31 d2                	xor    edx,edx
c001957f:	53                   	push   ebx
c0019580:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019584:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019588:	89 d9                	mov    ecx,ebx
c001958a:	c1 e9 14             	shr    ecx,0x14
c001958d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019593:	89 cf                	mov    edi,ecx
c0019595:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001959b:	78 37                	js     c00195d4 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001959d:	89 d9                	mov    ecx,ebx
c001959f:	89 f0                	mov    eax,esi
c00195a1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195a7:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195ad:	89 ca                	mov    edx,ecx
c00195af:	b9 34 00 00 00       	mov    ecx,0x34
c00195b4:	29 f9                	sub    ecx,edi
c00195b6:	0f ad d0             	shrd   eax,edx,cl
c00195b9:	d3 fa                	sar    edx,cl
c00195bb:	f6 c1 20             	test   cl,0x20
c00195be:	74 08                	je     c00195c8 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00195c0:	89 d0                	mov    eax,edx
c00195c2:	c1 fa 1f             	sar    edx,0x1f
c00195c5:	8d 76 00             	lea    esi,[esi+0x0]
c00195c8:	85 db                	test   ebx,ebx
c00195ca:	79 08                	jns    c00195d4 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195cc:	f7 d8                	neg    eax
c00195ce:	83 d2 00             	adc    edx,0x0
c00195d1:	f7 da                	neg    edx
c00195d3:	90                   	nop
c00195d4:	5b                   	pop    ebx
c00195d5:	5e                   	pop    esi
c00195d6:	5f                   	pop    edi
c00195d7:	c3                   	ret    

c00195d8 <Vm::fpuULongToFloat(unsigned long long)>:
c00195d8:	57                   	push   edi
c00195d9:	31 c9                	xor    ecx,ecx
c00195db:	56                   	push   esi
c00195dc:	53                   	push   ebx
c00195dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00195e5:	8d 76 00             	lea    esi,[esi+0x0]
c00195e8:	0f ba e7 14          	bt     edi,0x14
c00195ec:	72 0a                	jb     c00195f8 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c00195ee:	01 f6                	add    esi,esi
c00195f0:	11 ff                	adc    edi,edi
c00195f2:	41                   	inc    ecx
c00195f3:	eb f3                	jmp    c00195e8 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c00195f5:	8d 76 00             	lea    esi,[esi+0x0]
c00195f8:	89 fa                	mov    edx,edi
c00195fa:	89 f0                	mov    eax,esi
c00195fc:	bb 33 04 00 00       	mov    ebx,0x433
c0019601:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019607:	29 cb                	sub    ebx,ecx
c0019609:	89 d9                	mov    ecx,ebx
c001960b:	5b                   	pop    ebx
c001960c:	c1 e1 14             	shl    ecx,0x14
c001960f:	5e                   	pop    esi
c0019610:	09 ca                	or     edx,ecx
c0019612:	5f                   	pop    edi
c0019613:	c3                   	ret    

c0019614 <Vm::fpuLongToFloat(long long)>:
c0019614:	56                   	push   esi
c0019615:	31 c0                	xor    eax,eax
c0019617:	53                   	push   ebx
c0019618:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001961c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019620:	39 c8                	cmp    eax,ecx
c0019622:	19 d8                	sbb    eax,ebx
c0019624:	7d 06                	jge    c001962c <Vm::fpuLongToFloat(long long)+0x18>
c0019626:	31 f6                	xor    esi,esi
c0019628:	eb 0e                	jmp    c0019638 <Vm::fpuLongToFloat(long long)+0x24>
c001962a:	66 90                	xchg   ax,ax
c001962c:	f7 d9                	neg    ecx
c001962e:	be 01 00 00 00       	mov    esi,0x1
c0019633:	83 d3 00             	adc    ebx,0x0
c0019636:	f7 db                	neg    ebx
c0019638:	31 c0                	xor    eax,eax
c001963a:	66 90                	xchg   ax,ax
c001963c:	0f ba e3 14          	bt     ebx,0x14
c0019640:	72 0a                	jb     c001964c <Vm::fpuLongToFloat(long long)+0x38>
c0019642:	01 c9                	add    ecx,ecx
c0019644:	11 db                	adc    ebx,ebx
c0019646:	40                   	inc    eax
c0019647:	eb f3                	jmp    c001963c <Vm::fpuLongToFloat(long long)+0x28>
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	ba 33 04 00 00       	mov    edx,0x433
c0019651:	29 c2                	sub    edx,eax
c0019653:	89 c8                	mov    eax,ecx
c0019655:	c1 e2 14             	shl    edx,0x14
c0019658:	89 d9                	mov    ecx,ebx
c001965a:	89 f3                	mov    ebx,esi
c001965c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019662:	09 ca                	or     edx,ecx
c0019664:	84 db                	test   bl,bl
c0019666:	74 08                	je     c0019670 <Vm::fpuLongToFloat(long long)+0x5c>
c0019668:	81 ca 00 00 00 80    	or     edx,0x80000000
c001966e:	66 90                	xchg   ax,ax
c0019670:	5b                   	pop    ebx
c0019671:	5e                   	pop    esi
c0019672:	c3                   	ret    

c0019673 <Vm::fpuGet0()>:
c0019673:	31 c0                	xor    eax,eax
c0019675:	31 d2                	xor    edx,edx
c0019677:	c3                   	ret    

c0019678 <Vm::fpuGet1()>:
c0019678:	b8 01 00 00 00       	mov    eax,0x1
c001967d:	31 d2                	xor    edx,edx
c001967f:	c3                   	ret    

c0019680 <Vm::fpuGetPi()>:
c0019680:	b8 03 00 00 00       	mov    eax,0x3
c0019685:	31 d2                	xor    edx,edx
c0019687:	c3                   	ret    

c0019688 <Vm::fpuGetLog2E()>:
c0019688:	83 ec 18             	sub    esp,0x18
c001968b:	68 cc 49 02 c0       	push   0xc00249cc
c0019690:	e8 54 ac ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0019695:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001969a:	31 d2                	xor    edx,edx
c001969c:	83 c4 1c             	add    esp,0x1c
c001969f:	c3                   	ret    

c00196a0 <Vm::fpuGetLogE2()>:
c00196a0:	83 ec 18             	sub    esp,0x18
c00196a3:	68 d8 49 02 c0       	push   0xc00249d8
c00196a8:	e8 3c ac ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00196ad:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196b2:	31 d2                	xor    edx,edx
c00196b4:	83 c4 1c             	add    esp,0x1c
c00196b7:	c3                   	ret    

c00196b8 <Vm::fpuGetLog210()>:
c00196b8:	83 ec 18             	sub    esp,0x18
c00196bb:	68 e4 49 02 c0       	push   0xc00249e4
c00196c0:	e8 24 ac ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00196c5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196ca:	31 d2                	xor    edx,edx
c00196cc:	83 c4 1c             	add    esp,0x1c
c00196cf:	c3                   	ret    

c00196d0 <Vm::fpuGetLog102()>:
c00196d0:	83 ec 18             	sub    esp,0x18
c00196d3:	68 f1 49 02 c0       	push   0xc00249f1
c00196d8:	e8 0c ac ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00196dd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196e2:	31 d2                	xor    edx,edx
c00196e4:	83 c4 1c             	add    esp,0x1c
c00196e7:	c3                   	ret    

c00196e8 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00196e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196ec:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00196f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196f4:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00196f8:	0f 92 c0             	setb   al
c00196fb:	c3                   	ret    

c00196fc <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00196fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019704:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019708:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001970c:	09 c2                	or     edx,eax
c001970e:	0f 94 c0             	sete   al
c0019711:	c3                   	ret    

c0019712 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019712:	57                   	push   edi
c0019713:	56                   	push   esi
c0019714:	53                   	push   ebx
c0019715:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019719:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001971d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019721:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019725:	57                   	push   edi
c0019726:	56                   	push   esi
c0019727:	53                   	push   ebx
c0019728:	51                   	push   ecx
c0019729:	e8 ce ff ff ff       	call   c00196fc <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001972e:	83 c4 10             	add    esp,0x10
c0019731:	88 c2                	mov    dl,al
c0019733:	31 c0                	xor    eax,eax
c0019735:	84 d2                	test   dl,dl
c0019737:	75 0f                	jne    c0019748 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019739:	57                   	push   edi
c001973a:	56                   	push   esi
c001973b:	53                   	push   ebx
c001973c:	51                   	push   ecx
c001973d:	e8 a6 ff ff ff       	call   c00196e8 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	83 e0 01             	and    eax,0x1
c001974b:	5b                   	pop    ebx
c001974c:	88 c1                	mov    cl,al
c001974e:	83 e2 01             	and    edx,0x1
c0019751:	a0 01 79 02 c0       	mov    al,ds:0xc0027901
c0019756:	c1 e2 06             	shl    edx,0x6
c0019759:	83 e0 ba             	and    eax,0xffffffba
c001975c:	5e                   	pop    esi
c001975d:	09 c8                	or     eax,ecx
c001975f:	5f                   	pop    edi
c0019760:	09 d0                	or     eax,edx
c0019762:	a2 01 79 02 c0       	mov    ds:0xc0027901,al
c0019767:	c3                   	ret    

c0019768 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019768:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001976c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019770:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019774:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019778:	c3                   	ret    

c0019779 <Vm::fpuAbs(unsigned long long)>:
c0019779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001977d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019781:	c3                   	ret    

c0019782 <Vm::fpuChs(unsigned long long)>:
c0019782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001978a:	f7 d8                	neg    eax
c001978c:	83 d2 00             	adc    edx,0x0
c001978f:	f7 da                	neg    edx
c0019791:	c3                   	ret    

c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019792:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019796:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001979b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001979f:	eb c7                	jmp    c0019768 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197a1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197a1:	53                   	push   ebx
c00197a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197b2:	0f af ca             	imul   ecx,edx
c00197b5:	0f af d8             	imul   ebx,eax
c00197b8:	f7 e2                	mul    edx
c00197ba:	01 d9                	add    ecx,ebx
c00197bc:	5b                   	pop    ebx
c00197bd:	01 ca                	add    edx,ecx
c00197bf:	c3                   	ret    

c00197c0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197d3:	e8 0c 77 00 00       	call   c0020ee4 <__udivdi3>
c00197d8:	83 c4 1c             	add    esp,0x1c
c00197db:	c3                   	ret    

c00197dc <Vm::fpuSquare(unsigned long long)>:
c00197dc:	50                   	push   eax
c00197dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197e5:	52                   	push   edx
c00197e6:	50                   	push   eax
c00197e7:	52                   	push   edx
c00197e8:	50                   	push   eax
c00197e9:	e8 b3 ff ff ff       	call   c00197a1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00197ee:	83 c4 14             	add    esp,0x14
c00197f1:	c3                   	ret    

c00197f2 <Vm::fpuGetReg(int)>:
c00197f2:	83 ec 0c             	sub    esp,0xc
c00197f5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00197fa:	76 10                	jbe    c001980c <Vm::fpuGetReg(int)+0x1a>
c00197fc:	83 ec 0c             	sub    esp,0xc
c00197ff:	68 fe 49 02 c0       	push   0xc00249fe
c0019804:	e8 e0 aa ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0019809:	83 c4 10             	add    esp,0x10
c001980c:	a0 01 79 02 c0       	mov    al,ds:0xc0027901
c0019811:	b9 08 00 00 00       	mov    ecx,0x8
c0019816:	c0 e8 03             	shr    al,0x3
c0019819:	83 e0 07             	and    eax,0x7
c001981c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019820:	99                   	cdq    
c0019821:	f7 f9                	idiv   ecx
c0019823:	8b 04 d5 04 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd86fc]
c001982a:	8b 14 d5 08 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd86f8]
c0019831:	83 c4 0c             	add    esp,0xc
c0019834:	c3                   	ret    

c0019835 <Vm::fpuSetReg(int, unsigned long long)>:
c0019835:	57                   	push   edi
c0019836:	56                   	push   esi
c0019837:	52                   	push   edx
c0019838:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001983c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019840:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019845:	76 11                	jbe    c0019858 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019847:	83 ec 0c             	sub    esp,0xc
c001984a:	68 11 4a 02 c0       	push   0xc0024a11
c001984f:	e8 95 aa ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	90                   	nop
c0019858:	a0 01 79 02 c0       	mov    al,ds:0xc0027901
c001985d:	b9 08 00 00 00       	mov    ecx,0x8
c0019862:	c0 e8 03             	shr    al,0x3
c0019865:	83 e0 07             	and    eax,0x7
c0019868:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001986c:	99                   	cdq    
c001986d:	f7 f9                	idiv   ecx
c001986f:	89 34 d5 04 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd86fc],esi
c0019876:	89 3c d5 08 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd86f8],edi
c001987d:	58                   	pop    eax
c001987e:	5e                   	pop    esi
c001987f:	5f                   	pop    edi
c0019880:	c3                   	ret    

c0019881 <Vm::fpuPush(unsigned long long)>:
c0019881:	a0 01 79 02 c0       	mov    al,ds:0xc0027901
c0019886:	c0 e8 03             	shr    al,0x3
c0019889:	83 e0 07             	and    eax,0x7
c001988c:	83 c0 07             	add    eax,0x7
c001988f:	88 c2                	mov    dl,al
c0019891:	83 e0 07             	and    eax,0x7
c0019894:	83 e2 07             	and    edx,0x7
c0019897:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001989e:	8a 15 01 79 02 c0    	mov    dl,BYTE PTR ds:0xc0027901
c00198a4:	83 e2 c7             	and    edx,0xffffffc7
c00198a7:	09 ca                	or     edx,ecx
c00198a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198ad:	88 15 01 79 02 c0    	mov    BYTE PTR ds:0xc0027901,dl
c00198b3:	89 0c c5 08 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd86f8],ecx
c00198ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198be:	89 14 c5 04 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd86fc],edx
c00198c5:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00198ca:	83 f8 08             	cmp    eax,0x8
c00198cd:	75 09                	jne    c00198d8 <Vm::fpuPush(unsigned long long)+0x57>
c00198cf:	80 0d 00 79 02 c0 40 	or     BYTE PTR ds:0xc0027900,0x40
c00198d6:	c3                   	ret    
c00198d7:	90                   	nop
c00198d8:	40                   	inc    eax
c00198d9:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00198de:	c3                   	ret    

c00198df <Vm::fpuPop()>:
c00198df:	8a 0d 01 79 02 c0    	mov    cl,BYTE PTR ds:0xc0027901
c00198e5:	53                   	push   ebx
c00198e6:	c0 e9 03             	shr    cl,0x3
c00198e9:	8a 1d 01 79 02 c0    	mov    bl,BYTE PTR ds:0xc0027901
c00198ef:	83 e1 07             	and    ecx,0x7
c00198f2:	83 e3 c7             	and    ebx,0xffffffc7
c00198f5:	8b 04 cd 04 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd86fc]
c00198fc:	8b 14 cd 08 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd86f8]
c0019903:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001990a:	83 e1 38             	and    ecx,0x38
c001990d:	09 d9                	or     ecx,ebx
c001990f:	88 0d 01 79 02 c0    	mov    BYTE PTR ds:0xc0027901,cl
c0019915:	8b 0d 44 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027944
c001991b:	85 c9                	test   ecx,ecx
c001991d:	74 09                	je     c0019928 <Vm::fpuPop()+0x49>
c001991f:	49                   	dec    ecx
c0019920:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c0019926:	eb 08                	jmp    c0019930 <Vm::fpuPop()+0x51>
c0019928:	80 0d 00 79 02 c0 40 	or     BYTE PTR ds:0xc0027900,0x40
c001992f:	90                   	nop
c0019930:	5b                   	pop    ebx
c0019931:	c3                   	ret    

c0019932 <Vm::x87Handler(regs*)>:
c0019932:	55                   	push   ebp
c0019933:	57                   	push   edi
c0019934:	56                   	push   esi
c0019935:	53                   	push   ebx
c0019936:	83 ec 1c             	sub    esp,0x1c
c0019939:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001993d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019942:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019945:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001994d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019951:	50                   	push   eax
c0019952:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019956:	50                   	push   eax
c0019957:	8d 44 24 14          	lea    eax,[esp+0x14]
c001995b:	50                   	push   eax
c001995c:	53                   	push   ebx
c001995d:	e8 a0 a0 ff ff       	call   c0013a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019962:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019965:	83 c4 10             	add    esp,0x10
c0019968:	89 c6                	mov    esi,eax
c001996a:	80 fa d9             	cmp    dl,0xd9
c001996d:	0f 85 79 01 00 00    	jne    c0019aec <Vm::x87Handler(regs*)+0x1ba>
c0019973:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019977:	8d 50 20             	lea    edx,[eax+0x20]
c001997a:	80 fa 0e             	cmp    dl,0xe
c001997d:	0f 87 a5 00 00 00    	ja     c0019a28 <Vm::x87Handler(regs*)+0xf6>
c0019983:	0f b6 d2             	movzx  edx,dl
c0019986:	ff 24 95 24 4a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb5dc]
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	e8 de fc ff ff       	call   c0019673 <Vm::fpuGet0()>
c0019995:	eb 09                	jmp    c00199a0 <Vm::x87Handler(regs*)+0x6e>
c0019997:	90                   	nop
c0019998:	e8 db fc ff ff       	call   c0019678 <Vm::fpuGet1()>
c001999d:	8d 76 00             	lea    esi,[esi+0x0]
c00199a0:	57                   	push   edi
c00199a1:	57                   	push   edi
c00199a2:	66 90                	xchg   ax,ax
c00199a4:	52                   	push   edx
c00199a5:	50                   	push   eax
c00199a6:	e8 d6 fe ff ff       	call   c0019881 <Vm::fpuPush(unsigned long long)>
c00199ab:	90                   	nop
c00199ac:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199b0:	83 c4 10             	add    esp,0x10
c00199b3:	90                   	nop
c00199b4:	b0 01                	mov    al,0x1
c00199b6:	e9 89 0a 00 00       	jmp    c001a444 <Vm::x87Handler(regs*)+0xb12>
c00199bb:	90                   	nop
c00199bc:	83 ec 0c             	sub    esp,0xc
c00199bf:	6a 00                	push   0x0
c00199c1:	e8 2c fe ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c00199c6:	59                   	pop    ecx
c00199c7:	5e                   	pop    esi
c00199c8:	52                   	push   edx
c00199c9:	50                   	push   eax
c00199ca:	e8 b3 fd ff ff       	call   c0019782 <Vm::fpuChs(unsigned long long)>
c00199cf:	eb 17                	jmp    c00199e8 <Vm::x87Handler(regs*)+0xb6>
c00199d1:	8d 76 00             	lea    esi,[esi+0x0]
c00199d4:	83 ec 0c             	sub    esp,0xc
c00199d7:	6a 00                	push   0x0
c00199d9:	e8 14 fe ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c00199de:	5f                   	pop    edi
c00199df:	5d                   	pop    ebp
c00199e0:	52                   	push   edx
c00199e1:	50                   	push   eax
c00199e2:	e8 92 fd ff ff       	call   c0019779 <Vm::fpuAbs(unsigned long long)>
c00199e7:	90                   	nop
c00199e8:	83 c4 0c             	add    esp,0xc
c00199eb:	90                   	nop
c00199ec:	52                   	push   edx
c00199ed:	50                   	push   eax
c00199ee:	66 90                	xchg   ax,ax
c00199f0:	6a 00                	push   0x0
c00199f2:	66 90                	xchg   ax,ax
c00199f4:	e8 3c fe ff ff       	call   c0019835 <Vm::fpuSetReg(int, unsigned long long)>
c00199f9:	eb b1                	jmp    c00199ac <Vm::x87Handler(regs*)+0x7a>
c00199fb:	90                   	nop
c00199fc:	e8 b7 fc ff ff       	call   c00196b8 <Vm::fpuGetLog210()>
c0019a01:	eb 9d                	jmp    c00199a0 <Vm::x87Handler(regs*)+0x6e>
c0019a03:	90                   	nop
c0019a04:	e8 7f fc ff ff       	call   c0019688 <Vm::fpuGetLog2E()>
c0019a09:	eb 95                	jmp    c00199a0 <Vm::x87Handler(regs*)+0x6e>
c0019a0b:	90                   	nop
c0019a0c:	e8 6f fc ff ff       	call   c0019680 <Vm::fpuGetPi()>
c0019a11:	eb 8d                	jmp    c00199a0 <Vm::x87Handler(regs*)+0x6e>
c0019a13:	90                   	nop
c0019a14:	e8 b7 fc ff ff       	call   c00196d0 <Vm::fpuGetLog102()>
c0019a19:	eb 85                	jmp    c00199a0 <Vm::x87Handler(regs*)+0x6e>
c0019a1b:	90                   	nop
c0019a1c:	e8 7f fc ff ff       	call   c00196a0 <Vm::fpuGetLogE2()>
c0019a21:	e9 7a ff ff ff       	jmp    c00199a0 <Vm::x87Handler(regs*)+0x6e>
c0019a26:	66 90                	xchg   ax,ax
c0019a28:	8d 50 40             	lea    edx,[eax+0x40]
c0019a2b:	80 fa 07             	cmp    dl,0x7
c0019a2e:	77 18                	ja     c0019a48 <Vm::x87Handler(regs*)+0x116>
c0019a30:	83 ec 0c             	sub    esp,0xc
c0019a33:	2d c0 00 00 00       	sub    eax,0xc0
c0019a38:	50                   	push   eax
c0019a39:	e8 b4 fd ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019a3e:	59                   	pop    ecx
c0019a3f:	5e                   	pop    esi
c0019a40:	e9 5f ff ff ff       	jmp    c00199a4 <Vm::x87Handler(regs*)+0x72>
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	8d 50 38             	lea    edx,[eax+0x38]
c0019a4b:	80 fa 07             	cmp    dl,0x7
c0019a4e:	77 3c                	ja     c0019a8c <Vm::x87Handler(regs*)+0x15a>
c0019a50:	83 ec 0c             	sub    esp,0xc
c0019a53:	2d c8 00 00 00       	sub    eax,0xc8
c0019a58:	50                   	push   eax
c0019a59:	e8 94 fd ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019a5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a65:	89 c6                	mov    esi,eax
c0019a67:	89 d7                	mov    edi,edx
c0019a69:	e8 84 fd ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019a6e:	83 c4 0c             	add    esp,0xc
c0019a71:	52                   	push   edx
c0019a72:	50                   	push   eax
c0019a73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a77:	2d c8 00 00 00       	sub    eax,0xc8
c0019a7c:	50                   	push   eax
c0019a7d:	e8 b3 fd ff ff       	call   c0019835 <Vm::fpuSetReg(int, unsigned long long)>
c0019a82:	83 c4 0c             	add    esp,0xc
c0019a85:	57                   	push   edi
c0019a86:	56                   	push   esi
c0019a87:	e9 64 ff ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0xbe>
c0019a8c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019a90:	84 d2                	test   dl,dl
c0019a92:	75 10                	jne    c0019aa4 <Vm::x87Handler(regs*)+0x172>
c0019a94:	83 ec 0c             	sub    esp,0xc
c0019a97:	ff 36                	push   DWORD PTR [esi]
c0019a99:	e8 8d fa ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c0019a9e:	e9 c9 00 00 00       	jmp    c0019b6c <Vm::x87Handler(regs*)+0x23a>
c0019aa3:	90                   	nop
c0019aa4:	80 fa 03             	cmp    dl,0x3
c0019aa7:	75 13                	jne    c0019abc <Vm::x87Handler(regs*)+0x18a>
c0019aa9:	e8 31 fe ff ff       	call   c00198df <Vm::fpuPop()>
c0019aae:	55                   	push   ebp
c0019aaf:	55                   	push   ebp
c0019ab0:	52                   	push   edx
c0019ab1:	50                   	push   eax
c0019ab2:	e8 0d fa ff ff       	call   c00194c4 <Vm::fpuInternalTo32(unsigned long long)>
c0019ab7:	e9 90 00 00 00       	jmp    c0019b4c <Vm::x87Handler(regs*)+0x21a>
c0019abc:	80 fa 05             	cmp    dl,0x5
c0019abf:	75 0f                	jne    c0019ad0 <Vm::x87Handler(regs*)+0x19e>
c0019ac1:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019ac4:	66 a3 02 79 02 c0    	mov    ds:0xc0027902,ax
c0019aca:	e9 ed 00 00 00       	jmp    c0019bbc <Vm::x87Handler(regs*)+0x28a>
c0019acf:	90                   	nop
c0019ad0:	31 c0                	xor    eax,eax
c0019ad2:	80 fa 07             	cmp    dl,0x7
c0019ad5:	0f 85 69 09 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c0019adb:	66 a1 02 79 02 c0    	mov    ax,ds:0xc0027902
c0019ae1:	66 89 06             	mov    WORD PTR [esi],ax
c0019ae4:	e9 d3 00 00 00       	jmp    c0019bbc <Vm::x87Handler(regs*)+0x28a>
c0019ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aec:	80 fa d8             	cmp    dl,0xd8
c0019aef:	0f 84 d3 00 00 00    	je     c0019bc8 <Vm::x87Handler(regs*)+0x296>
c0019af5:	80 fa dc             	cmp    dl,0xdc
c0019af8:	0f 84 2a 02 00 00    	je     c0019d28 <Vm::x87Handler(regs*)+0x3f6>
c0019afe:	80 fa de             	cmp    dl,0xde
c0019b01:	0f 84 f1 02 00 00    	je     c0019df8 <Vm::x87Handler(regs*)+0x4c6>
c0019b07:	80 fa dd             	cmp    dl,0xdd
c0019b0a:	0f 84 94 04 00 00    	je     c0019fa4 <Vm::x87Handler(regs*)+0x672>
c0019b10:	80 fa da             	cmp    dl,0xda
c0019b13:	0f 84 5f 05 00 00    	je     c001a078 <Vm::x87Handler(regs*)+0x746>
c0019b19:	80 fa df             	cmp    dl,0xdf
c0019b1c:	0f 84 aa 05 00 00    	je     c001a0cc <Vm::x87Handler(regs*)+0x79a>
c0019b22:	31 c0                	xor    eax,eax
c0019b24:	80 fa db             	cmp    dl,0xdb
c0019b27:	0f 85 17 09 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c0019b2d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b31:	80 fa 03             	cmp    dl,0x3
c0019b34:	0f 85 c2 06 00 00    	jne    c001a1fc <Vm::x87Handler(regs*)+0x8ca>
c0019b3a:	e8 a0 fd ff ff       	call   c00198df <Vm::fpuPop()>
c0019b3f:	55                   	push   ebp
c0019b40:	55                   	push   ebp
c0019b41:	8d 76 00             	lea    esi,[esi+0x0]
c0019b44:	52                   	push   edx
c0019b45:	50                   	push   eax
c0019b46:	e8 2e fa ff ff       	call   c0019579 <Vm::fpuFloatToLong(unsigned long long)>
c0019b4b:	90                   	nop
c0019b4c:	83 c4 10             	add    esp,0x10
c0019b4f:	89 06                	mov    DWORD PTR [esi],eax
c0019b51:	eb 69                	jmp    c0019bbc <Vm::x87Handler(regs*)+0x28a>
c0019b53:	90                   	nop
c0019b54:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b58:	84 d2                	test   dl,dl
c0019b5a:	0f 85 2c 06 00 00    	jne    c001a18c <Vm::x87Handler(regs*)+0x85a>
c0019b60:	57                   	push   edi
c0019b61:	57                   	push   edi
c0019b62:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b65:	ff 36                	push   DWORD PTR [esi]
c0019b67:	e8 04 fa ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c0019b6c:	5e                   	pop    esi
c0019b6d:	5f                   	pop    edi
c0019b6e:	52                   	push   edx
c0019b6f:	50                   	push   eax
c0019b70:	e8 0c fd ff ff       	call   c0019881 <Vm::fpuPush(unsigned long long)>
c0019b75:	8d 76 00             	lea    esi,[esi+0x0]
c0019b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b7c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019b7f:	e9 2c fe ff ff       	jmp    c00199b0 <Vm::x87Handler(regs*)+0x7e>
c0019b84:	80 fa 03             	cmp    dl,0x3
c0019b87:	0f 85 2b 07 00 00    	jne    c001a2b8 <Vm::x87Handler(regs*)+0x986>
c0019b8d:	57                   	push   edi
c0019b8e:	57                   	push   edi
c0019b8f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b92:	ff 36                	push   DWORD PTR [esi]
c0019b94:	e8 d7 f9 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c0019b99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ba0:	89 c6                	mov    esi,eax
c0019ba2:	89 d7                	mov    edi,edx
c0019ba4:	e8 49 fc ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019ba9:	57                   	push   edi
c0019baa:	56                   	push   esi
c0019bab:	52                   	push   edx
c0019bac:	50                   	push   eax
c0019bad:	e8 60 fb ff ff       	call   c0019712 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bb2:	83 c4 20             	add    esp,0x20
c0019bb5:	e8 25 fd ff ff       	call   c00198df <Vm::fpuPop()>
c0019bba:	66 90                	xchg   ax,ax
c0019bbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bc0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bc3:	e9 ec fd ff ff       	jmp    c00199b4 <Vm::x87Handler(regs*)+0x82>
c0019bc8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019bcc:	8d 50 40             	lea    edx,[eax+0x40]
c0019bcf:	80 fa 07             	cmp    dl,0x7
c0019bd2:	77 2c                	ja     c0019c00 <Vm::x87Handler(regs*)+0x2ce>
c0019bd4:	83 ec 0c             	sub    esp,0xc
c0019bd7:	2d c0 00 00 00       	sub    eax,0xc0
c0019bdc:	50                   	push   eax
c0019bdd:	e8 10 fc ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019be2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019be9:	89 c6                	mov    esi,eax
c0019beb:	89 d7                	mov    edi,edx
c0019bed:	e8 00 fc ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019bf2:	57                   	push   edi
c0019bf3:	56                   	push   esi
c0019bf4:	52                   	push   edx
c0019bf5:	50                   	push   eax
c0019bf6:	e8 6d fb ff ff       	call   c0019768 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019bfb:	eb 33                	jmp    c0019c30 <Vm::x87Handler(regs*)+0x2fe>
c0019bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019c00:	8d 50 38             	lea    edx,[eax+0x38]
c0019c03:	80 fa 07             	cmp    dl,0x7
c0019c06:	77 30                	ja     c0019c38 <Vm::x87Handler(regs*)+0x306>
c0019c08:	83 ec 0c             	sub    esp,0xc
c0019c0b:	2d c8 00 00 00       	sub    eax,0xc8
c0019c10:	50                   	push   eax
c0019c11:	e8 dc fb ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019c16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c1d:	89 c6                	mov    esi,eax
c0019c1f:	89 d7                	mov    edi,edx
c0019c21:	e8 cc fb ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019c26:	57                   	push   edi
c0019c27:	56                   	push   esi
c0019c28:	52                   	push   edx
c0019c29:	50                   	push   eax
c0019c2a:	e8 72 fb ff ff       	call   c00197a1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c2f:	90                   	nop
c0019c30:	83 c4 1c             	add    esp,0x1c
c0019c33:	e9 b4 fd ff ff       	jmp    c00199ec <Vm::x87Handler(regs*)+0xba>
c0019c38:	8d 50 30             	lea    edx,[eax+0x30]
c0019c3b:	80 fa 07             	cmp    dl,0x7
c0019c3e:	77 10                	ja     c0019c50 <Vm::x87Handler(regs*)+0x31e>
c0019c40:	83 ec 0c             	sub    esp,0xc
c0019c43:	2d d0 00 00 00       	sub    eax,0xd0
c0019c48:	e9 c3 03 00 00       	jmp    c001a010 <Vm::x87Handler(regs*)+0x6de>
c0019c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c50:	8d 50 28             	lea    edx,[eax+0x28]
c0019c53:	80 fa 07             	cmp    dl,0x7
c0019c56:	77 10                	ja     c0019c68 <Vm::x87Handler(regs*)+0x336>
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	2d d8 00 00 00       	sub    eax,0xd8
c0019c60:	e9 e7 03 00 00       	jmp    c001a04c <Vm::x87Handler(regs*)+0x71a>
c0019c65:	8d 76 00             	lea    esi,[esi+0x0]
c0019c68:	8d 50 20             	lea    edx,[eax+0x20]
c0019c6b:	80 fa 07             	cmp    dl,0x7
c0019c6e:	77 1c                	ja     c0019c8c <Vm::x87Handler(regs*)+0x35a>
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	2d e0 00 00 00       	sub    eax,0xe0
c0019c78:	50                   	push   eax
c0019c79:	e8 74 fb ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019c7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c85:	89 c6                	mov    esi,eax
c0019c87:	89 d7                	mov    edi,edx
c0019c89:	eb 25                	jmp    c0019cb0 <Vm::x87Handler(regs*)+0x37e>
c0019c8b:	90                   	nop
c0019c8c:	8d 50 18             	lea    edx,[eax+0x18]
c0019c8f:	80 fa 07             	cmp    dl,0x7
c0019c92:	77 30                	ja     c0019cc4 <Vm::x87Handler(regs*)+0x392>
c0019c94:	83 ec 0c             	sub    esp,0xc
c0019c97:	6a 00                	push   0x0
c0019c99:	e8 54 fb ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019c9e:	89 c6                	mov    esi,eax
c0019ca0:	89 d7                	mov    edi,edx
c0019ca2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ca6:	2d e8 00 00 00       	sub    eax,0xe8
c0019cab:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cae:	66 90                	xchg   ax,ax
c0019cb0:	e8 3d fb ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019cb5:	57                   	push   edi
c0019cb6:	56                   	push   esi
c0019cb7:	52                   	push   edx
c0019cb8:	50                   	push   eax
c0019cb9:	e8 d4 fa ff ff       	call   c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019cbe:	e9 6d ff ff ff       	jmp    c0019c30 <Vm::x87Handler(regs*)+0x2fe>
c0019cc3:	90                   	nop
c0019cc4:	8d 50 10             	lea    edx,[eax+0x10]
c0019cc7:	80 fa 07             	cmp    dl,0x7
c0019cca:	77 1c                	ja     c0019ce8 <Vm::x87Handler(regs*)+0x3b6>
c0019ccc:	83 ec 0c             	sub    esp,0xc
c0019ccf:	2d f0 00 00 00       	sub    eax,0xf0
c0019cd4:	50                   	push   eax
c0019cd5:	e8 18 fb ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019cda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ce1:	89 c6                	mov    esi,eax
c0019ce3:	89 d7                	mov    edi,edx
c0019ce5:	eb 25                	jmp    c0019d0c <Vm::x87Handler(regs*)+0x3da>
c0019ce7:	90                   	nop
c0019ce8:	3c f7                	cmp    al,0xf7
c0019cea:	0f 86 00 04 00 00    	jbe    c001a0f0 <Vm::x87Handler(regs*)+0x7be>
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	6a 00                	push   0x0
c0019cf5:	e8 f8 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019cfa:	89 c6                	mov    esi,eax
c0019cfc:	89 d7                	mov    edi,edx
c0019cfe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d02:	2d f8 00 00 00       	sub    eax,0xf8
c0019d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d0a:	66 90                	xchg   ax,ax
c0019d0c:	e8 e1 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019d11:	57                   	push   edi
c0019d12:	56                   	push   esi
c0019d13:	52                   	push   edx
c0019d14:	50                   	push   eax
c0019d15:	e8 a6 fa ff ff       	call   c00197c0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d1a:	83 c4 1c             	add    esp,0x1c
c0019d1d:	52                   	push   edx
c0019d1e:	50                   	push   eax
c0019d1f:	6a 00                	push   0x0
c0019d21:	e9 6a 02 00 00       	jmp    c0019f90 <Vm::x87Handler(regs*)+0x65e>
c0019d26:	66 90                	xchg   ax,ax
c0019d28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d2c:	8d 50 40             	lea    edx,[eax+0x40]
c0019d2f:	80 fa 07             	cmp    dl,0x7
c0019d32:	77 38                	ja     c0019d6c <Vm::x87Handler(regs*)+0x43a>
c0019d34:	83 ec 0c             	sub    esp,0xc
c0019d37:	2d c0 00 00 00       	sub    eax,0xc0
c0019d3c:	50                   	push   eax
c0019d3d:	e8 b0 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019d42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d49:	89 c6                	mov    esi,eax
c0019d4b:	89 d7                	mov    edi,edx
c0019d4d:	e8 a0 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019d52:	57                   	push   edi
c0019d53:	56                   	push   esi
c0019d54:	52                   	push   edx
c0019d55:	50                   	push   eax
c0019d56:	e8 0d fa ff ff       	call   c0019768 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019d5b:	83 c4 1c             	add    esp,0x1c
c0019d5e:	52                   	push   edx
c0019d5f:	50                   	push   eax
c0019d60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d64:	2d c0 00 00 00       	sub    eax,0xc0
c0019d69:	eb 41                	jmp    c0019dac <Vm::x87Handler(regs*)+0x47a>
c0019d6b:	90                   	nop
c0019d6c:	8d 50 38             	lea    edx,[eax+0x38]
c0019d6f:	80 fa 07             	cmp    dl,0x7
c0019d72:	77 40                	ja     c0019db4 <Vm::x87Handler(regs*)+0x482>
c0019d74:	83 ec 0c             	sub    esp,0xc
c0019d77:	2d c8 00 00 00       	sub    eax,0xc8
c0019d7c:	50                   	push   eax
c0019d7d:	e8 70 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019d82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d89:	89 c6                	mov    esi,eax
c0019d8b:	89 d7                	mov    edi,edx
c0019d8d:	e8 60 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019d92:	57                   	push   edi
c0019d93:	56                   	push   esi
c0019d94:	52                   	push   edx
c0019d95:	50                   	push   eax
c0019d96:	e8 06 fa ff ff       	call   c00197a1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d9b:	83 c4 1c             	add    esp,0x1c
c0019d9e:	52                   	push   edx
c0019d9f:	50                   	push   eax
c0019da0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019da4:	2d c8 00 00 00       	sub    eax,0xc8
c0019da9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dac:	50                   	push   eax
c0019dad:	e9 42 fc ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0xc2>
c0019db2:	66 90                	xchg   ax,ax
c0019db4:	83 c0 18             	add    eax,0x18
c0019db7:	3c 07                	cmp    al,0x7
c0019db9:	0f 87 6d 04 00 00    	ja     c001a22c <Vm::x87Handler(regs*)+0x8fa>
c0019dbf:	83 ec 0c             	sub    esp,0xc
c0019dc2:	6a 00                	push   0x0
c0019dc4:	e8 29 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019dc9:	89 c6                	mov    esi,eax
c0019dcb:	89 d7                	mov    edi,edx
c0019dcd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dd1:	2d e8 00 00 00       	sub    eax,0xe8
c0019dd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd9:	e8 14 fa ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019dde:	57                   	push   edi
c0019ddf:	56                   	push   esi
c0019de0:	52                   	push   edx
c0019de1:	50                   	push   eax
c0019de2:	e8 ab f9 ff ff       	call   c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019de7:	83 c4 1c             	add    esp,0x1c
c0019dea:	52                   	push   edx
c0019deb:	50                   	push   eax
c0019dec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019df0:	2d e8 00 00 00       	sub    eax,0xe8
c0019df5:	eb b5                	jmp    c0019dac <Vm::x87Handler(regs*)+0x47a>
c0019df7:	90                   	nop
c0019df8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dfc:	8d 50 40             	lea    edx,[eax+0x40]
c0019dff:	80 fa 07             	cmp    dl,0x7
c0019e02:	77 3c                	ja     c0019e40 <Vm::x87Handler(regs*)+0x50e>
c0019e04:	83 ec 0c             	sub    esp,0xc
c0019e07:	2d c0 00 00 00       	sub    eax,0xc0
c0019e0c:	50                   	push   eax
c0019e0d:	e8 e0 f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019e12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e19:	89 c6                	mov    esi,eax
c0019e1b:	89 d7                	mov    edi,edx
c0019e1d:	e8 d0 f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019e22:	57                   	push   edi
c0019e23:	56                   	push   esi
c0019e24:	52                   	push   edx
c0019e25:	50                   	push   eax
c0019e26:	e8 3d f9 ff ff       	call   c0019768 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e2b:	83 c4 1c             	add    esp,0x1c
c0019e2e:	52                   	push   edx
c0019e2f:	50                   	push   eax
c0019e30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e34:	2d c0 00 00 00       	sub    eax,0xc0
c0019e39:	e9 b2 01 00 00       	jmp    c0019ff0 <Vm::x87Handler(regs*)+0x6be>
c0019e3e:	66 90                	xchg   ax,ax
c0019e40:	8d 50 20             	lea    edx,[eax+0x20]
c0019e43:	80 fa 07             	cmp    dl,0x7
c0019e46:	77 3c                	ja     c0019e84 <Vm::x87Handler(regs*)+0x552>
c0019e48:	83 ec 0c             	sub    esp,0xc
c0019e4b:	2d e0 00 00 00       	sub    eax,0xe0
c0019e50:	50                   	push   eax
c0019e51:	e8 9c f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019e56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e5d:	89 c6                	mov    esi,eax
c0019e5f:	89 d7                	mov    edi,edx
c0019e61:	e8 8c f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019e66:	57                   	push   edi
c0019e67:	56                   	push   esi
c0019e68:	52                   	push   edx
c0019e69:	50                   	push   eax
c0019e6a:	e8 23 f9 ff ff       	call   c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e6f:	83 c4 1c             	add    esp,0x1c
c0019e72:	52                   	push   edx
c0019e73:	50                   	push   eax
c0019e74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e78:	2d e0 00 00 00       	sub    eax,0xe0
c0019e7d:	e9 6e 01 00 00       	jmp    c0019ff0 <Vm::x87Handler(regs*)+0x6be>
c0019e82:	66 90                	xchg   ax,ax
c0019e84:	8d 50 18             	lea    edx,[eax+0x18]
c0019e87:	80 fa 07             	cmp    dl,0x7
c0019e8a:	77 3c                	ja     c0019ec8 <Vm::x87Handler(regs*)+0x596>
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	6a 00                	push   0x0
c0019e91:	e8 5c f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019e96:	89 c6                	mov    esi,eax
c0019e98:	89 d7                	mov    edi,edx
c0019e9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e9e:	2d e8 00 00 00       	sub    eax,0xe8
c0019ea3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea6:	e8 47 f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019eab:	57                   	push   edi
c0019eac:	56                   	push   esi
c0019ead:	52                   	push   edx
c0019eae:	50                   	push   eax
c0019eaf:	e8 de f8 ff ff       	call   c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019eb4:	83 c4 1c             	add    esp,0x1c
c0019eb7:	52                   	push   edx
c0019eb8:	50                   	push   eax
c0019eb9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ebd:	2d e8 00 00 00       	sub    eax,0xe8
c0019ec2:	e9 29 01 00 00       	jmp    c0019ff0 <Vm::x87Handler(regs*)+0x6be>
c0019ec7:	90                   	nop
c0019ec8:	8d 50 38             	lea    edx,[eax+0x38]
c0019ecb:	80 fa 07             	cmp    dl,0x7
c0019ece:	77 3c                	ja     c0019f0c <Vm::x87Handler(regs*)+0x5da>
c0019ed0:	83 ec 0c             	sub    esp,0xc
c0019ed3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ed8:	50                   	push   eax
c0019ed9:	e8 14 f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019ede:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ee5:	89 c6                	mov    esi,eax
c0019ee7:	89 d7                	mov    edi,edx
c0019ee9:	e8 04 f9 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019eee:	57                   	push   edi
c0019eef:	56                   	push   esi
c0019ef0:	52                   	push   edx
c0019ef1:	50                   	push   eax
c0019ef2:	e8 aa f8 ff ff       	call   c00197a1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019ef7:	83 c4 1c             	add    esp,0x1c
c0019efa:	52                   	push   edx
c0019efb:	50                   	push   eax
c0019efc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f00:	2d c8 00 00 00       	sub    eax,0xc8
c0019f05:	e9 82 00 00 00       	jmp    c0019f8c <Vm::x87Handler(regs*)+0x65a>
c0019f0a:	66 90                	xchg   ax,ax
c0019f0c:	3c f7                	cmp    al,0xf7
c0019f0e:	76 38                	jbe    c0019f48 <Vm::x87Handler(regs*)+0x616>
c0019f10:	83 ec 0c             	sub    esp,0xc
c0019f13:	6a 00                	push   0x0
c0019f15:	e8 d8 f8 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019f1a:	89 c6                	mov    esi,eax
c0019f1c:	89 d7                	mov    edi,edx
c0019f1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f22:	2d f8 00 00 00       	sub    eax,0xf8
c0019f27:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f2a:	e8 c3 f8 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019f2f:	57                   	push   edi
c0019f30:	56                   	push   esi
c0019f31:	52                   	push   edx
c0019f32:	50                   	push   eax
c0019f33:	e8 88 f8 ff ff       	call   c00197c0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f38:	83 c4 1c             	add    esp,0x1c
c0019f3b:	52                   	push   edx
c0019f3c:	50                   	push   eax
c0019f3d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f41:	2d f8 00 00 00       	sub    eax,0xf8
c0019f46:	eb 44                	jmp    c0019f8c <Vm::x87Handler(regs*)+0x65a>
c0019f48:	8d 50 10             	lea    edx,[eax+0x10]
c0019f4b:	80 fa 07             	cmp    dl,0x7
c0019f4e:	0f 87 6c 01 00 00    	ja     c001a0c0 <Vm::x87Handler(regs*)+0x78e>
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	2d f0 00 00 00       	sub    eax,0xf0
c0019f5c:	50                   	push   eax
c0019f5d:	e8 90 f8 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019f62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f69:	89 c6                	mov    esi,eax
c0019f6b:	89 d7                	mov    edi,edx
c0019f6d:	e8 80 f8 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019f72:	57                   	push   edi
c0019f73:	56                   	push   esi
c0019f74:	52                   	push   edx
c0019f75:	50                   	push   eax
c0019f76:	e8 45 f8 ff ff       	call   c00197c0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f7b:	83 c4 1c             	add    esp,0x1c
c0019f7e:	52                   	push   edx
c0019f7f:	50                   	push   eax
c0019f80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f84:	2d f0 00 00 00       	sub    eax,0xf0
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	50                   	push   eax
c0019f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f90:	e8 a0 f8 ff ff       	call   c0019835 <Vm::fpuSetReg(int, unsigned long long)>
c0019f95:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f99:	e8 41 f9 ff ff       	call   c00198df <Vm::fpuPop()>
c0019f9e:	e9 0d fa ff ff       	jmp    c00199b0 <Vm::x87Handler(regs*)+0x7e>
c0019fa3:	90                   	nop
c0019fa4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fa8:	8d 50 30             	lea    edx,[eax+0x30]
c0019fab:	80 fa 07             	cmp    dl,0x7
c0019fae:	77 20                	ja     c0019fd0 <Vm::x87Handler(regs*)+0x69e>
c0019fb0:	83 ec 0c             	sub    esp,0xc
c0019fb3:	6a 00                	push   0x0
c0019fb5:	e8 38 f8 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019fba:	83 c4 0c             	add    esp,0xc
c0019fbd:	52                   	push   edx
c0019fbe:	50                   	push   eax
c0019fbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fc3:	2d d0 00 00 00       	sub    eax,0xd0
c0019fc8:	e9 df fd ff ff       	jmp    c0019dac <Vm::x87Handler(regs*)+0x47a>
c0019fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd0:	8d 50 28             	lea    edx,[eax+0x28]
c0019fd3:	80 fa 07             	cmp    dl,0x7
c0019fd6:	77 28                	ja     c001a000 <Vm::x87Handler(regs*)+0x6ce>
c0019fd8:	83 ec 0c             	sub    esp,0xc
c0019fdb:	6a 00                	push   0x0
c0019fdd:	e8 10 f8 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c0019fe2:	83 c4 0c             	add    esp,0xc
c0019fe5:	52                   	push   edx
c0019fe6:	50                   	push   eax
c0019fe7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019feb:	2d d8 00 00 00       	sub    eax,0xd8
c0019ff0:	50                   	push   eax
c0019ff1:	e8 3f f8 ff ff       	call   c0019835 <Vm::fpuSetReg(int, unsigned long long)>
c0019ff6:	e8 e4 f8 ff ff       	call   c00198df <Vm::fpuPop()>
c0019ffb:	e9 ac f9 ff ff       	jmp    c00199ac <Vm::x87Handler(regs*)+0x7a>
c001a000:	8d 50 20             	lea    edx,[eax+0x20]
c001a003:	80 fa 07             	cmp    dl,0x7
c001a006:	77 30                	ja     c001a038 <Vm::x87Handler(regs*)+0x706>
c001a008:	83 ec 0c             	sub    esp,0xc
c001a00b:	2d e0 00 00 00       	sub    eax,0xe0
c001a010:	50                   	push   eax
c001a011:	e8 dc f7 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a016:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a01d:	89 c6                	mov    esi,eax
c001a01f:	89 d7                	mov    edi,edx
c001a021:	e8 cc f7 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a026:	57                   	push   edi
c001a027:	56                   	push   esi
c001a028:	52                   	push   edx
c001a029:	50                   	push   eax
c001a02a:	e8 e3 f6 ff ff       	call   c0019712 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a02f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a033:	e9 78 02 00 00       	jmp    c001a2b0 <Vm::x87Handler(regs*)+0x97e>
c001a038:	8d 50 18             	lea    edx,[eax+0x18]
c001a03b:	80 fa 07             	cmp    dl,0x7
c001a03e:	0f 87 10 fb ff ff    	ja     c0019b54 <Vm::x87Handler(regs*)+0x222>
c001a044:	83 ec 0c             	sub    esp,0xc
c001a047:	2d e8 00 00 00       	sub    eax,0xe8
c001a04c:	50                   	push   eax
c001a04d:	e8 a0 f7 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a052:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a059:	89 c6                	mov    esi,eax
c001a05b:	89 d7                	mov    edi,edx
c001a05d:	e8 90 f7 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a062:	57                   	push   edi
c001a063:	56                   	push   esi
c001a064:	52                   	push   edx
c001a065:	50                   	push   eax
c001a066:	e8 a7 f6 ff ff       	call   c0019712 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a06b:	83 c4 20             	add    esp,0x20
c001a06e:	e8 6c f8 ff ff       	call   c00198df <Vm::fpuPop()>
c001a073:	eb 6f                	jmp    c001a0e4 <Vm::x87Handler(regs*)+0x7b2>
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a07c:	0f 85 22 01 00 00    	jne    c001a1a4 <Vm::x87Handler(regs*)+0x872>
c001a082:	66 90                	xchg   ax,ax
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	6a 01                	push   0x1
c001a089:	e8 64 f7 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a08e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a095:	89 c6                	mov    esi,eax
c001a097:	89 d7                	mov    edi,edx
c001a099:	e8 54 f7 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a09e:	57                   	push   edi
c001a09f:	56                   	push   esi
c001a0a0:	52                   	push   edx
c001a0a1:	50                   	push   eax
c001a0a2:	e8 6b f6 ff ff       	call   c0019712 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0a7:	83 c4 20             	add    esp,0x20
c001a0aa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0ae:	e8 2c f8 ff ff       	call   c00198df <Vm::fpuPop()>
c001a0b3:	e8 27 f8 ff ff       	call   c00198df <Vm::fpuPop()>
c001a0b8:	e9 f7 f8 ff ff       	jmp    c00199b4 <Vm::x87Handler(regs*)+0x82>
c001a0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c0:	3c d9                	cmp    al,0xd9
c001a0c2:	0f 85 e8 02 00 00    	jne    c001a3b0 <Vm::x87Handler(regs*)+0xa7e>
c001a0c8:	eb ba                	jmp    c001a084 <Vm::x87Handler(regs*)+0x752>
c001a0ca:	66 90                	xchg   ax,ax
c001a0cc:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a0d0:	0f 85 2a 03 00 00    	jne    c001a400 <Vm::x87Handler(regs*)+0xace>
c001a0d6:	0f b7 05 00 79 02 c0 	movzx  eax,WORD PTR ds:0xc0027900
c001a0dd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0e8:	e9 c7 f8 ff ff       	jmp    c00199b4 <Vm::x87Handler(regs*)+0x82>
c001a0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0f4:	84 d2                	test   dl,dl
c001a0f6:	75 10                	jne    c001a108 <Vm::x87Handler(regs*)+0x7d6>
c001a0f8:	83 ec 0c             	sub    esp,0xc
c001a0fb:	ff 36                	push   DWORD PTR [esi]
c001a0fd:	e8 29 f4 ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c001a102:	e9 39 01 00 00       	jmp    c001a240 <Vm::x87Handler(regs*)+0x90e>
c001a107:	90                   	nop
c001a108:	80 fa 01             	cmp    dl,0x1
c001a10b:	75 0f                	jne    c001a11c <Vm::x87Handler(regs*)+0x7ea>
c001a10d:	83 ec 0c             	sub    esp,0xc
c001a110:	ff 36                	push   DWORD PTR [esi]
c001a112:	e8 14 f4 ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c001a117:	e9 b4 02 00 00       	jmp    c001a3d0 <Vm::x87Handler(regs*)+0xa9e>
c001a11c:	80 fa 04             	cmp    dl,0x4
c001a11f:	75 0f                	jne    c001a130 <Vm::x87Handler(regs*)+0x7fe>
c001a121:	83 ec 0c             	sub    esp,0xc
c001a124:	ff 36                	push   DWORD PTR [esi]
c001a126:	e8 00 f4 ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c001a12b:	e9 9c 01 00 00       	jmp    c001a2cc <Vm::x87Handler(regs*)+0x99a>
c001a130:	80 fa 05             	cmp    dl,0x5
c001a133:	75 1b                	jne    c001a150 <Vm::x87Handler(regs*)+0x81e>
c001a135:	83 ec 0c             	sub    esp,0xc
c001a138:	6a 00                	push   0x0
c001a13a:	e8 b3 f6 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a13f:	89 c7                	mov    edi,eax
c001a141:	89 d5                	mov    ebp,edx
c001a143:	58                   	pop    eax
c001a144:	ff 36                	push   DWORD PTR [esi]
c001a146:	e8 e0 f3 ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c001a14b:	e9 bc 01 00 00       	jmp    c001a30c <Vm::x87Handler(regs*)+0x9da>
c001a150:	80 fa 06             	cmp    dl,0x6
c001a153:	75 0f                	jne    c001a164 <Vm::x87Handler(regs*)+0x832>
c001a155:	83 ec 0c             	sub    esp,0xc
c001a158:	ff 36                	push   DWORD PTR [esi]
c001a15a:	e8 cc f3 ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c001a15f:	e9 cc 01 00 00       	jmp    c001a330 <Vm::x87Handler(regs*)+0x9fe>
c001a164:	31 c0                	xor    eax,eax
c001a166:	80 fa 07             	cmp    dl,0x7
c001a169:	0f 85 d5 02 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a16f:	83 ec 0c             	sub    esp,0xc
c001a172:	6a 00                	push   0x0
c001a174:	e8 79 f6 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a179:	89 c7                	mov    edi,eax
c001a17b:	89 d5                	mov    ebp,edx
c001a17d:	58                   	pop    eax
c001a17e:	ff 36                	push   DWORD PTR [esi]
c001a180:	e8 a6 f3 ff ff       	call   c001952b <Vm::fpu32ToInternal(unsigned int)>
c001a185:	e9 ee 01 00 00       	jmp    c001a378 <Vm::x87Handler(regs*)+0xa46>
c001a18a:	66 90                	xchg   ax,ax
c001a18c:	80 fa 03             	cmp    dl,0x3
c001a18f:	0f 85 f7 01 00 00    	jne    c001a38c <Vm::x87Handler(regs*)+0xa5a>
c001a195:	e8 45 f7 ff ff       	call   c00198df <Vm::fpuPop()>
c001a19a:	51                   	push   ecx
c001a19b:	51                   	push   ecx
c001a19c:	e9 03 02 00 00       	jmp    c001a3a4 <Vm::x87Handler(regs*)+0xa72>
c001a1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1a8:	80 fa 01             	cmp    dl,0x1
c001a1ab:	75 0b                	jne    c001a1b8 <Vm::x87Handler(regs*)+0x886>
c001a1ad:	57                   	push   edi
c001a1ae:	57                   	push   edi
c001a1af:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1b1:	e9 0e 02 00 00       	jmp    c001a3c4 <Vm::x87Handler(regs*)+0xa92>
c001a1b6:	66 90                	xchg   ax,ax
c001a1b8:	80 fa 04             	cmp    dl,0x4
c001a1bb:	75 13                	jne    c001a1d0 <Vm::x87Handler(regs*)+0x89e>
c001a1bd:	31 d2                	xor    edx,edx
c001a1bf:	51                   	push   ecx
c001a1c0:	51                   	push   ecx
c001a1c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1c3:	52                   	push   edx
c001a1c4:	50                   	push   eax
c001a1c5:	e8 4a f4 ff ff       	call   c0019614 <Vm::fpuLongToFloat(long long)>
c001a1ca:	e9 fd 00 00 00       	jmp    c001a2cc <Vm::x87Handler(regs*)+0x99a>
c001a1cf:	90                   	nop
c001a1d0:	31 c0                	xor    eax,eax
c001a1d2:	80 fa 07             	cmp    dl,0x7
c001a1d5:	0f 85 69 02 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a1db:	83 ec 0c             	sub    esp,0xc
c001a1de:	6a 00                	push   0x0
c001a1e0:	e8 0d f6 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a1e5:	89 c7                	mov    edi,eax
c001a1e7:	89 d5                	mov    ebp,edx
c001a1e9:	58                   	pop    eax
c001a1ea:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1ec:	5a                   	pop    edx
c001a1ed:	31 d2                	xor    edx,edx
c001a1ef:	52                   	push   edx
c001a1f0:	50                   	push   eax
c001a1f1:	e8 1e f4 ff ff       	call   c0019614 <Vm::fpuLongToFloat(long long)>
c001a1f6:	e9 7d 01 00 00       	jmp    c001a378 <Vm::x87Handler(regs*)+0xa46>
c001a1fb:	90                   	nop
c001a1fc:	84 d2                	test   dl,dl
c001a1fe:	75 10                	jne    c001a210 <Vm::x87Handler(regs*)+0x8de>
c001a200:	31 d2                	xor    edx,edx
c001a202:	55                   	push   ebp
c001a203:	55                   	push   ebp
c001a204:	8b 06                	mov    eax,DWORD PTR [esi]
c001a206:	52                   	push   edx
c001a207:	50                   	push   eax
c001a208:	e9 03 02 00 00       	jmp    c001a410 <Vm::x87Handler(regs*)+0xade>
c001a20d:	8d 76 00             	lea    esi,[esi+0x0]
c001a210:	31 c0                	xor    eax,eax
c001a212:	80 fa 02             	cmp    dl,0x2
c001a215:	0f 85 29 02 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	6a 00                	push   0x0
c001a220:	e8 cd f5 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a225:	59                   	pop    ecx
c001a226:	5f                   	pop    edi
c001a227:	e9 18 f9 ff ff       	jmp    c0019b44 <Vm::x87Handler(regs*)+0x212>
c001a22c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a230:	84 d2                	test   dl,dl
c001a232:	75 2c                	jne    c001a260 <Vm::x87Handler(regs*)+0x92e>
c001a234:	50                   	push   eax
c001a235:	50                   	push   eax
c001a236:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a239:	ff 36                	push   DWORD PTR [esi]
c001a23b:	e8 30 f3 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a240:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a247:	89 c6                	mov    esi,eax
c001a249:	89 d7                	mov    edi,edx
c001a24b:	e8 a2 f5 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a250:	57                   	push   edi
c001a251:	56                   	push   esi
c001a252:	52                   	push   edx
c001a253:	50                   	push   eax
c001a254:	e8 0f f5 ff ff       	call   c0019768 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a259:	e9 8e 01 00 00       	jmp    c001a3ec <Vm::x87Handler(regs*)+0xaba>
c001a25e:	66 90                	xchg   ax,ax
c001a260:	80 fa 01             	cmp    dl,0x1
c001a263:	75 13                	jne    c001a278 <Vm::x87Handler(regs*)+0x946>
c001a265:	50                   	push   eax
c001a266:	50                   	push   eax
c001a267:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a26a:	ff 36                	push   DWORD PTR [esi]
c001a26c:	e8 ff f2 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a271:	e9 5a 01 00 00       	jmp    c001a3d0 <Vm::x87Handler(regs*)+0xa9e>
c001a276:	66 90                	xchg   ax,ax
c001a278:	80 fa 02             	cmp    dl,0x2
c001a27b:	0f 85 03 f9 ff ff    	jne    c0019b84 <Vm::x87Handler(regs*)+0x252>
c001a281:	55                   	push   ebp
c001a282:	55                   	push   ebp
c001a283:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a286:	ff 36                	push   DWORD PTR [esi]
c001a288:	e8 e3 f2 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a28d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a294:	89 c6                	mov    esi,eax
c001a296:	89 d7                	mov    edi,edx
c001a298:	e8 55 f5 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a29d:	57                   	push   edi
c001a29e:	56                   	push   esi
c001a29f:	52                   	push   edx
c001a2a0:	50                   	push   eax
c001a2a1:	e8 6c f4 ff ff       	call   c0019712 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2aa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b0:	83 c4 20             	add    esp,0x20
c001a2b3:	e9 fc f6 ff ff       	jmp    c00199b4 <Vm::x87Handler(regs*)+0x82>
c001a2b8:	80 fa 04             	cmp    dl,0x4
c001a2bb:	75 2f                	jne    c001a2ec <Vm::x87Handler(regs*)+0x9ba>
c001a2bd:	51                   	push   ecx
c001a2be:	51                   	push   ecx
c001a2bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2c2:	ff 36                	push   DWORD PTR [esi]
c001a2c4:	e8 a7 f2 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a2c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d3:	89 c6                	mov    esi,eax
c001a2d5:	89 d7                	mov    edi,edx
c001a2d7:	e8 16 f5 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a2dc:	57                   	push   edi
c001a2dd:	56                   	push   esi
c001a2de:	52                   	push   edx
c001a2df:	50                   	push   eax
c001a2e0:	e8 ad f4 ff ff       	call   c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a2e5:	e9 02 01 00 00       	jmp    c001a3ec <Vm::x87Handler(regs*)+0xaba>
c001a2ea:	66 90                	xchg   ax,ax
c001a2ec:	80 fa 05             	cmp    dl,0x5
c001a2ef:	75 2b                	jne    c001a31c <Vm::x87Handler(regs*)+0x9ea>
c001a2f1:	83 ec 0c             	sub    esp,0xc
c001a2f4:	6a 00                	push   0x0
c001a2f6:	e8 f7 f4 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a2fb:	89 c7                	mov    edi,eax
c001a2fd:	89 d5                	mov    ebp,edx
c001a2ff:	58                   	pop    eax
c001a300:	5a                   	pop    edx
c001a301:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a304:	ff 36                	push   DWORD PTR [esi]
c001a306:	e8 65 f2 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a30b:	90                   	nop
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	55                   	push   ebp
c001a310:	57                   	push   edi
c001a311:	52                   	push   edx
c001a312:	50                   	push   eax
c001a313:	e8 7a f4 ff ff       	call   c0019792 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a318:	eb 6a                	jmp    c001a384 <Vm::x87Handler(regs*)+0xa52>
c001a31a:	66 90                	xchg   ax,ax
c001a31c:	80 fa 06             	cmp    dl,0x6
c001a31f:	75 2f                	jne    c001a350 <Vm::x87Handler(regs*)+0xa1e>
c001a321:	51                   	push   ecx
c001a322:	51                   	push   ecx
c001a323:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a326:	ff 36                	push   DWORD PTR [esi]
c001a328:	e8 43 f2 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a32d:	8d 76 00             	lea    esi,[esi+0x0]
c001a330:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a337:	89 c6                	mov    esi,eax
c001a339:	89 d7                	mov    edi,edx
c001a33b:	e8 b2 f4 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a340:	57                   	push   edi
c001a341:	56                   	push   esi
c001a342:	52                   	push   edx
c001a343:	50                   	push   eax
c001a344:	e8 77 f4 ff ff       	call   c00197c0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a349:	e9 9e 00 00 00       	jmp    c001a3ec <Vm::x87Handler(regs*)+0xaba>
c001a34e:	66 90                	xchg   ax,ax
c001a350:	31 c0                	xor    eax,eax
c001a352:	80 fa 07             	cmp    dl,0x7
c001a355:	0f 85 e9 00 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a35b:	83 ec 0c             	sub    esp,0xc
c001a35e:	6a 00                	push   0x0
c001a360:	e8 8d f4 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a365:	89 c7                	mov    edi,eax
c001a367:	89 d5                	mov    ebp,edx
c001a369:	58                   	pop    eax
c001a36a:	5a                   	pop    edx
c001a36b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a36e:	ff 36                	push   DWORD PTR [esi]
c001a370:	e8 fb f1 ff ff       	call   c0019570 <Vm::fpu64ToInternal(unsigned long long)>
c001a375:	8d 76 00             	lea    esi,[esi+0x0]
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	55                   	push   ebp
c001a37c:	57                   	push   edi
c001a37d:	52                   	push   edx
c001a37e:	50                   	push   eax
c001a37f:	e8 3c f4 ff ff       	call   c00197c0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a384:	83 c4 0c             	add    esp,0xc
c001a387:	eb 67                	jmp    c001a3f0 <Vm::x87Handler(regs*)+0xabe>
c001a389:	8d 76 00             	lea    esi,[esi+0x0]
c001a38c:	31 c0                	xor    eax,eax
c001a38e:	80 fa 02             	cmp    dl,0x2
c001a391:	0f 85 ad 00 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	6a 00                	push   0x0
c001a39c:	e8 51 f4 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a3a1:	59                   	pop    ecx
c001a3a2:	5f                   	pop    edi
c001a3a3:	90                   	nop
c001a3a4:	52                   	push   edx
c001a3a5:	50                   	push   eax
c001a3a6:	e8 77 f1 ff ff       	call   c0019522 <Vm::fpuInternalTo64(unsigned long long)>
c001a3ab:	e9 84 00 00 00       	jmp    c001a434 <Vm::x87Handler(regs*)+0xb02>
c001a3b0:	31 c0                	xor    eax,eax
c001a3b2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3b7:	0f 85 87 00 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a3bd:	50                   	push   eax
c001a3be:	50                   	push   eax
c001a3bf:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a3c2:	66 90                	xchg   ax,ax
c001a3c4:	31 d2                	xor    edx,edx
c001a3c6:	52                   	push   edx
c001a3c7:	50                   	push   eax
c001a3c8:	e8 47 f2 ff ff       	call   c0019614 <Vm::fpuLongToFloat(long long)>
c001a3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3d7:	89 c6                	mov    esi,eax
c001a3d9:	89 d7                	mov    edi,edx
c001a3db:	e8 12 f4 ff ff       	call   c00197f2 <Vm::fpuGetReg(int)>
c001a3e0:	57                   	push   edi
c001a3e1:	56                   	push   esi
c001a3e2:	52                   	push   edx
c001a3e3:	50                   	push   eax
c001a3e4:	e8 b8 f3 ff ff       	call   c00197a1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ec:	83 c4 1c             	add    esp,0x1c
c001a3ef:	90                   	nop
c001a3f0:	52                   	push   edx
c001a3f1:	50                   	push   eax
c001a3f2:	6a 00                	push   0x0
c001a3f4:	e8 3c f4 ff ff       	call   c0019835 <Vm::fpuSetReg(int, unsigned long long)>
c001a3f9:	e9 7a f7 ff ff       	jmp    c0019b78 <Vm::x87Handler(regs*)+0x246>
c001a3fe:	66 90                	xchg   ax,ax
c001a400:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a404:	80 fa 05             	cmp    dl,0x5
c001a407:	75 13                	jne    c001a41c <Vm::x87Handler(regs*)+0xaea>
c001a409:	55                   	push   ebp
c001a40a:	55                   	push   ebp
c001a40b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a40e:	ff 36                	push   DWORD PTR [esi]
c001a410:	e8 c3 f1 ff ff       	call   c00195d8 <Vm::fpuULongToFloat(unsigned long long)>
c001a415:	e9 52 f7 ff ff       	jmp    c0019b6c <Vm::x87Handler(regs*)+0x23a>
c001a41a:	66 90                	xchg   ax,ax
c001a41c:	31 c0                	xor    eax,eax
c001a41e:	80 fa 07             	cmp    dl,0x7
c001a421:	75 21                	jne    c001a444 <Vm::x87Handler(regs*)+0xb12>
c001a423:	e8 b7 f4 ff ff       	call   c00198df <Vm::fpuPop()>
c001a428:	51                   	push   ecx
c001a429:	51                   	push   ecx
c001a42a:	52                   	push   edx
c001a42b:	50                   	push   eax
c001a42c:	e8 48 f1 ff ff       	call   c0019579 <Vm::fpuFloatToLong(unsigned long long)>
c001a431:	8d 76 00             	lea    esi,[esi+0x0]
c001a434:	83 c4 10             	add    esp,0x10
c001a437:	89 06                	mov    DWORD PTR [esi],eax
c001a439:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a43c:	e9 7b f7 ff ff       	jmp    c0019bbc <Vm::x87Handler(regs*)+0x28a>
c001a441:	8d 76 00             	lea    esi,[esi+0x0]
c001a444:	83 c4 1c             	add    esp,0x1c
c001a447:	5b                   	pop    ebx
c001a448:	5e                   	pop    esi
c001a449:	5f                   	pop    edi
c001a44a:	5d                   	pop    ebp
c001a44b:	c3                   	ret    

c001a44c <__static_initialization_and_destruction_0(int, int)>:
c001a44c:	83 ec 0c             	sub    esp,0xc
c001a44f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a454:	75 1a                	jne    c001a470 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a456:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a45e:	75 10                	jne    c001a470 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a460:	83 ec 0c             	sub    esp,0xc
c001a463:	68 00 79 02 c0       	push   0xc0027900
c001a468:	e8 1b 74 00 00       	call   c0021888 <Vm::_FPUState::_FPUState()>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	90                   	nop
c001a471:	83 c4 0c             	add    esp,0xc
c001a474:	c3                   	ret    
c001a475:	8d 76 00             	lea    esi,[esi+0x0]

c001a478 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	83 ec 08             	sub    esp,0x8
c001a47e:	68 ff ff 00 00       	push   0xffff
c001a483:	6a 01                	push   0x1
c001a485:	e8 c2 ff ff ff       	call   c001a44c <__static_initialization_and_destruction_0(int, int)>
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	83 c4 0c             	add    esp,0xc
c001a490:	c3                   	ret    
c001a491:	66 90                	xchg   ax,ax
c001a493:	90                   	nop

c001a494 <FAT::getName()>:
c001a494:	b8 60 4a 02 c0       	mov    eax,0xc0024a60
c001a499:	c3                   	ret    
c001a49a:	66 90                	xchg   ax,ax

c001a49c <FAT::tell(void*, unsigned long long*)>:
c001a49c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4a1:	75 09                	jne    c001a4ac <FAT::tell(void*, unsigned long long*)+0x10>
c001a4a3:	b8 04 00 00 00       	mov    eax,0x4
c001a4a8:	c3                   	ret    
c001a4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4b1:	75 09                	jne    c001a4bc <FAT::tell(void*, unsigned long long*)+0x20>
c001a4b3:	b8 04 00 00 00       	mov    eax,0x4
c001a4b8:	c3                   	ret    
c001a4b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4c0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a4c3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a4c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4ca:	89 01                	mov    DWORD PTR [ecx],eax
c001a4cc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a4cf:	b8 00 00 00 00       	mov    eax,0x0
c001a4d4:	c3                   	ret    
c001a4d5:	90                   	nop
c001a4d6:	66 90                	xchg   ax,ax

c001a4d8 <FAT::stat(void*, unsigned long long*)>:
c001a4d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4dd:	75 09                	jne    c001a4e8 <FAT::stat(void*, unsigned long long*)+0x10>
c001a4df:	b8 04 00 00 00       	mov    eax,0x4
c001a4e4:	c3                   	ret    
c001a4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4ed:	75 09                	jne    c001a4f8 <FAT::stat(void*, unsigned long long*)+0x20>
c001a4ef:	b8 04 00 00 00       	mov    eax,0x4
c001a4f4:	c3                   	ret    
c001a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a4ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a506:	89 01                	mov    DWORD PTR [ecx],eax
c001a508:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a50b:	b8 00 00 00 00       	mov    eax,0x0
c001a510:	c3                   	ret    
c001a511:	90                   	nop
c001a512:	66 90                	xchg   ax,ax

c001a514 <FAT::~FAT()>:
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	ba ac 4a 02 c0       	mov    edx,0xc0024aac
c001a51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a520:	89 10                	mov    DWORD PTR [eax],edx
c001a522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a526:	83 ec 0c             	sub    esp,0xc
c001a529:	50                   	push   eax
c001a52a:	e8 33 28 ff ff       	call   c000cd62 <Filesystem::~Filesystem()>
c001a52f:	83 c4 10             	add    esp,0x10
c001a532:	90                   	nop
c001a533:	83 c4 0c             	add    esp,0xc
c001a536:	c3                   	ret    
c001a537:	90                   	nop

c001a538 <FAT::~FAT()>:
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	83 ec 0c             	sub    esp,0xc
c001a53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a542:	e8 cd ff ff ff       	call   c001a514 <FAT::~FAT()>
c001a547:	83 c4 10             	add    esp,0x10
c001a54a:	83 ec 08             	sub    esp,0x8
c001a54d:	6a 08                	push   0x8
c001a54f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a553:	e8 ef 23 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001a558:	83 c4 10             	add    esp,0x10
c001a55b:	83 c4 0c             	add    esp,0xc
c001a55e:	c3                   	ret    
c001a55f:	90                   	nop

c001a560 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a560:	83 ec 1c             	sub    esp,0x1c
c001a563:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a56a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a56f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a573:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a57a:	83 f8 ff             	cmp    eax,0xffffffff
c001a57d:	75 35                	jne    c001a5b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a57f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a583:	88 c2                	mov    dl,al
c001a585:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a58a:	01 d0                	add    eax,edx
c001a58c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a590:	8b 15 60 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027960
c001a596:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a59a:	89 14 85 80 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8680],edx
c001a5a1:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a5a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5aa:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a5b1:	eb 19                	jmp    c001a5cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5b3:	90                   	nop
c001a5b4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5b8:	88 c2                	mov    dl,al
c001a5ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5be:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a5c5:	01 d0                	add    eax,edx
c001a5c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5cb:	90                   	nop
c001a5cc:	83 ec 04             	sub    esp,0x4
c001a5cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a5db:	50                   	push   eax
c001a5dc:	e8 51 c6 fe ff       	call   c0006c32 <f_getlabel>
c001a5e1:	83 c4 10             	add    esp,0x10
c001a5e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a5ed:	75 09                	jne    c001a5f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a5ef:	b8 00 00 00 00       	mov    eax,0x0
c001a5f4:	eb 0a                	jmp    c001a600 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a5f6:	66 90                	xchg   ax,ax
c001a5f8:	b8 01 00 00 00       	mov    eax,0x1
c001a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a600:	83 c4 1c             	add    esp,0x1c
c001a603:	c3                   	ret    

c001a604 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a604:	57                   	push   edi
c001a605:	83 ec 58             	sub    esp,0x58
c001a608:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a610:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a614:	b9 0f 00 00 00       	mov    ecx,0xf
c001a619:	b8 00 00 00 00       	mov    eax,0x0
c001a61e:	fc                   	cld    
c001a61f:	89 d7                	mov    edi,edx
c001a621:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a623:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a627:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a62e:	83 f8 ff             	cmp    eax,0xffffffff
c001a631:	75 35                	jne    c001a668 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a633:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a637:	88 c2                	mov    dl,al
c001a639:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a63e:	01 d0                	add    eax,edx
c001a640:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a644:	8b 15 60 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027960
c001a64a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a64e:	89 14 85 80 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8680],edx
c001a655:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a65a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a65e:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a665:	eb 19                	jmp    c001a680 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a667:	90                   	nop
c001a668:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a66c:	88 c2                	mov    dl,al
c001a66e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a672:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a679:	01 d0                	add    eax,edx
c001a67b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a67f:	90                   	nop
c001a680:	83 ec 08             	sub    esp,0x8
c001a683:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a687:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a68b:	50                   	push   eax
c001a68c:	e8 ef 61 fe ff       	call   c0000880 <strcat>
c001a691:	83 c4 10             	add    esp,0x10
c001a694:	83 ec 0c             	sub    esp,0xc
c001a697:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a69b:	50                   	push   eax
c001a69c:	e8 7f c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6a8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6ad:	75 09                	jne    c001a6b8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6af:	b8 00 00 00 00       	mov    eax,0x0
c001a6b4:	eb 0a                	jmp    c001a6c0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a6b6:	66 90                	xchg   ax,ax
c001a6b8:	b8 01 00 00 00       	mov    eax,0x1
c001a6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a6c0:	83 c4 58             	add    esp,0x58
c001a6c3:	5f                   	pop    edi
c001a6c4:	c3                   	ret    
c001a6c5:	90                   	nop
c001a6c6:	66 90                	xchg   ax,ax

c001a6c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a6c8:	83 ec 2c             	sub    esp,0x2c
c001a6cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a6d3:	83 ec 08             	sub    esp,0x8
c001a6d6:	68 84 4a 02 c0       	push   0xc0024a84
c001a6db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6df:	e8 e8 60 fe ff       	call   c00007cc <strcmp>
c001a6e4:	83 c4 10             	add    esp,0x10
c001a6e7:	85 c0                	test   eax,eax
c001a6e9:	0f 94 c0             	sete   al
c001a6ec:	84 c0                	test   al,al
c001a6ee:	74 10                	je     c001a700 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a6f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a6f8:	e9 b3 00 00 00       	jmp    c001a7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a700:	83 ec 08             	sub    esp,0x8
c001a703:	68 76 4a 02 c0       	push   0xc0024a76
c001a708:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a70c:	e8 bb 60 fe ff       	call   c00007cc <strcmp>
c001a711:	83 c4 10             	add    esp,0x10
c001a714:	85 c0                	test   eax,eax
c001a716:	0f 94 c0             	sete   al
c001a719:	84 c0                	test   al,al
c001a71b:	74 0f                	je     c001a72c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a71d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a725:	e9 86 00 00 00       	jmp    c001a7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a72a:	66 90                	xchg   ax,ax
c001a72c:	83 ec 08             	sub    esp,0x8
c001a72f:	68 7c 4a 02 c0       	push   0xc0024a7c
c001a734:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a738:	e8 8f 60 fe ff       	call   c00007cc <strcmp>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	85 c0                	test   eax,eax
c001a742:	0f 94 c0             	sete   al
c001a745:	84 c0                	test   al,al
c001a747:	74 0b                	je     c001a754 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a749:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a751:	eb 5d                	jmp    c001a7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a753:	90                   	nop
c001a754:	83 ec 08             	sub    esp,0x8
c001a757:	68 ec 1f 02 c0       	push   0xc0021fec
c001a75c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a760:	e8 67 60 fe ff       	call   c00007cc <strcmp>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	85 c0                	test   eax,eax
c001a76a:	0f 94 c0             	sete   al
c001a76d:	84 c0                	test   al,al
c001a76f:	74 0b                	je     c001a77c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a771:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a779:	eb 35                	jmp    c001a7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a77b:	90                   	nop
c001a77c:	83 ec 08             	sub    esp,0x8
c001a77f:	68 82 4a 02 c0       	push   0xc0024a82
c001a784:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a788:	e8 3f 60 fe ff       	call   c00007cc <strcmp>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	85 c0                	test   eax,eax
c001a792:	0f 94 c0             	sete   al
c001a795:	84 c0                	test   al,al
c001a797:	74 0b                	je     c001a7a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a799:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7a1:	eb 0d                	jmp    c001a7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7a3:	90                   	nop
c001a7a4:	b8 08 00 00 00       	mov    eax,0x8
c001a7a9:	e9 ea 00 00 00       	jmp    c001a898 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7ae:	66 90                	xchg   ax,ax
c001a7b0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a7b7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a7bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7c0:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a7c7:	83 f8 ff             	cmp    eax,0xffffffff
c001a7ca:	75 34                	jne    c001a800 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a7cc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a7d0:	88 c2                	mov    dl,al
c001a7d2:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a7d7:	01 d0                	add    eax,edx
c001a7d9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a7dd:	8b 15 60 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027960
c001a7e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7e7:	89 14 85 80 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8680],edx
c001a7ee:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a7f3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a7f7:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a7fe:	eb 18                	jmp    c001a818 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a800:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a804:	88 c2                	mov    dl,al
c001a806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a80a:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a811:	01 d0                	add    eax,edx
c001a813:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a817:	90                   	nop
c001a818:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a81c:	88 04 24             	mov    BYTE PTR [esp],al
c001a81f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a827:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a82f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a834:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	68 00 20 00 00       	push   0x2000
c001a844:	e8 7a f1 fe ff       	call   c00099c3 <malloc>
c001a849:	83 c4 10             	add    esp,0x10
c001a84c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a850:	68 00 20 00 00       	push   0x2000
c001a855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a859:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a85d:	50                   	push   eax
c001a85e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a862:	50                   	push   eax
c001a863:	e8 39 cc fe ff       	call   c00074a1 <f_mkfs>
c001a868:	83 c4 10             	add    esp,0x10
c001a86b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a86f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a874:	75 0a                	jne    c001a880 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a876:	b8 00 00 00 00       	mov    eax,0x0
c001a87b:	eb 1b                	jmp    c001a898 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a87d:	8d 76 00             	lea    esi,[esi+0x0]
c001a880:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a885:	75 09                	jne    c001a890 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a887:	b8 09 00 00 00       	mov    eax,0x9
c001a88c:	eb 0a                	jmp    c001a898 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a88e:	66 90                	xchg   ax,ax
c001a890:	b8 01 00 00 00       	mov    eax,0x1
c001a895:	8d 76 00             	lea    esi,[esi+0x0]
c001a898:	83 c4 2c             	add    esp,0x2c
c001a89b:	c3                   	ret    

c001a89c <FAT::tryMount(LogicalDisk*, int)>:
c001a89c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8a2:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a8a7:	83 f8 14             	cmp    eax,0x14
c001a8aa:	75 18                	jne    c001a8c4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	68 88 4a 02 c0       	push   0xc0024a88
c001a8b4:	e8 30 9a ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	b0 00                	mov    al,0x0
c001a8be:	e9 e9 01 00 00       	jmp    c001aaac <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8c3:	90                   	nop
c001a8c4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a8cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a8d7:	3d 00 02 00 00       	cmp    eax,0x200
c001a8dc:	74 0a                	je     c001a8e8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a8de:	b0 00                	mov    al,0x0
c001a8e0:	e9 c7 01 00 00       	jmp    c001aaac <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a8f0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a8f7:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001a8fe:	83 f8 ff             	cmp    eax,0xffffffff
c001a901:	74 09                	je     c001a90c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a903:	b0 01                	mov    al,0x1
c001a905:	e9 a2 01 00 00       	jmp    c001aaac <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a90a:	66 90                	xchg   ax,ax
c001a90c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a916:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a91e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a925:	88 c2                	mov    dl,al
c001a927:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a92c:	01 d0                	add    eax,edx
c001a92e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a935:	8b 15 60 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027960
c001a93b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a942:	89 14 85 80 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8680],edx
c001a949:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001a94e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a955:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	68 54 02 00 00       	push   0x254
c001a964:	e8 5a f0 fe ff       	call   c00099c3 <malloc>
c001a969:	83 c4 10             	add    esp,0x10
c001a96c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a973:	83 ec 04             	sub    esp,0x4
c001a976:	6a 00                	push   0x0
c001a978:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a97f:	50                   	push   eax
c001a980:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a987:	e8 9d a4 fe ff       	call   c0004e29 <f_mount>
c001a98c:	83 c4 10             	add    esp,0x10
c001a98f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a996:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a99e:	74 1c                	je     c001a9bc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9a0:	83 ec 0c             	sub    esp,0xc
c001a9a3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9aa:	e8 34 f0 fe ff       	call   c00099e3 <rfree>
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	b0 00                	mov    al,0x0
c001a9b4:	e9 f3 00 00 00       	jmp    c001aaac <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	83 ec 04             	sub    esp,0x4
c001a9bf:	68 00 01 00 00       	push   0x100
c001a9c4:	6a 00                	push   0x0
c001a9c6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a9cd:	50                   	push   eax
c001a9ce:	e8 b1 5c fe ff       	call   c0000684 <memset>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	83 ec 08             	sub    esp,0x8
c001a9d9:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9e0:	50                   	push   eax
c001a9e1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a9e8:	50                   	push   eax
c001a9e9:	e8 92 5e fe ff       	call   c0000880 <strcat>
c001a9ee:	83 c4 10             	add    esp,0x10
c001a9f1:	83 ec 08             	sub    esp,0x8
c001a9f4:	68 96 4a 02 c0       	push   0xc0024a96
c001a9f9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa00:	50                   	push   eax
c001aa01:	e8 7a 5e fe ff       	call   c0000880 <strcat>
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	83 ec 04             	sub    esp,0x4
c001aa0c:	6a 01                	push   0x1
c001aa0e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa15:	50                   	push   eax
c001aa16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa1a:	50                   	push   eax
c001aa1b:	e8 6b a4 fe ff       	call   c0004e8b <f_open>
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa2a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa31:	85 c0                	test   eax,eax
c001aa33:	74 0b                	je     c001aa40 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa35:	78 31                	js     c001aa68 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa37:	83 e8 04             	sub    eax,0x4
c001aa3a:	83 f8 01             	cmp    eax,0x1
c001aa3d:	77 29                	ja     c001aa68 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa3f:	90                   	nop
c001aa40:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa48:	83 ec 0c             	sub    esp,0xc
c001aa4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa4f:	50                   	push   eax
c001aa50:	e8 88 af fe ff       	call   c00059dd <f_close>
c001aa55:	83 c4 10             	add    esp,0x10
c001aa58:	90                   	nop
c001aa59:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aa61:	74 41                	je     c001aaa4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aa63:	eb 33                	jmp    c001aa98 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aa65:	8d 76 00             	lea    esi,[esi+0x0]
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa72:	e8 6c ef fe ff       	call   c00099e3 <rfree>
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	83 ec 04             	sub    esp,0x4
c001aa7d:	6a 00                	push   0x0
c001aa7f:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa86:	50                   	push   eax
c001aa87:	6a 00                	push   0x0
c001aa89:	e8 9b a3 fe ff       	call   c0004e29 <f_mount>
c001aa8e:	83 c4 10             	add    esp,0x10
c001aa91:	b0 00                	mov    al,0x0
c001aa93:	eb 17                	jmp    c001aaac <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa95:	8d 76 00             	lea    esi,[esi+0x0]
c001aa98:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001aa9d:	40                   	inc    eax
c001aa9e:	a3 60 79 02 c0       	mov    ds:0xc0027960,eax
c001aaa3:	90                   	nop
c001aaa4:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aaab:	90                   	nop
c001aaac:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aab2:	c3                   	ret    
c001aab3:	90                   	nop

c001aab4 <FAT::allocateSwapfile(char const*, int)>:
c001aab4:	55                   	push   ebp
c001aab5:	57                   	push   edi
c001aab6:	56                   	push   esi
c001aab7:	53                   	push   ebx
c001aab8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aabe:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001aac9:	83 ec 0c             	sub    esp,0xc
c001aacc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aad3:	e8 eb ee fe ff       	call   c00099c3 <malloc>
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	89 c7                	mov    edi,eax
c001aadd:	a1 90 78 02 c0       	mov    eax,ds:0xc0027890
c001aae2:	83 ec 04             	sub    esp,0x4
c001aae5:	50                   	push   eax
c001aae6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001aaed:	57                   	push   edi
c001aaee:	e8 9f 24 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c001aaf3:	83 c4 10             	add    esp,0x10
c001aaf6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001aafd:	83 ec 04             	sub    esp,0x4
c001ab00:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab04:	50                   	push   eax
c001ab05:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab09:	50                   	push   eax
c001ab0a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab11:	e8 8c 27 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c001ab16:	83 c4 10             	add    esp,0x10
c001ab19:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab20:	c1 e0 14             	shl    eax,0x14
c001ab23:	89 c7                	mov    edi,eax
c001ab25:	89 c5                	mov    ebp,eax
c001ab27:	c1 fd 1f             	sar    ebp,0x1f
c001ab2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab32:	89 f9                	mov    ecx,edi
c001ab34:	31 c1                	xor    ecx,eax
c001ab36:	89 cb                	mov    ebx,ecx
c001ab38:	89 e9                	mov    ecx,ebp
c001ab3a:	31 d1                	xor    ecx,edx
c001ab3c:	89 ce                	mov    esi,ecx
c001ab3e:	89 f0                	mov    eax,esi
c001ab40:	09 d8                	or     eax,ebx
c001ab42:	0f 84 98 00 00 00    	je     c001abe0 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab52:	e8 17 26 ff ff       	call   c000d16e <File::unlink()>
c001ab57:	83 c4 10             	add    esp,0x10
c001ab5a:	83 ec 08             	sub    esp,0x8
c001ab5d:	6a 12                	push   0x12
c001ab5f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab66:	e8 8b 24 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c001ab6b:	83 c4 10             	add    esp,0x10
c001ab6e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab75:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ab7b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ab82:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab89:	c1 e0 14             	shl    eax,0x14
c001ab8c:	99                   	cdq    
c001ab8d:	6a 01                	push   0x1
c001ab8f:	52                   	push   edx
c001ab90:	50                   	push   eax
c001ab91:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ab98:	e8 f0 c4 fe ff       	call   c000708d <f_expand>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aba7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aba9:	83 c0 10             	add    eax,0x10
c001abac:	8b 00                	mov    eax,DWORD PTR [eax]
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abb5:	52                   	push   edx
c001abb6:	8d 54 24 30          	lea    edx,[esp+0x30]
c001abba:	52                   	push   edx
c001abbb:	6a 00                	push   0x0
c001abbd:	68 00 04 00 00       	push   0x400
c001abc2:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001abc9:	ff d0                	call   eax
c001abcb:	83 c4 20             	add    esp,0x20
c001abce:	83 ec 0c             	sub    esp,0xc
c001abd1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abd8:	e8 77 24 ff ff       	call   c000d054 <File::close()>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	83 ec 08             	sub    esp,0x8
c001abe3:	6a 01                	push   0x1
c001abe5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abec:	e8 05 24 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001abfd:	83 c0 0c             	add    eax,0xc
c001ac00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac02:	83 ec 0c             	sub    esp,0xc
c001ac05:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac09:	52                   	push   edx
c001ac0a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac0e:	52                   	push   edx
c001ac0f:	6a 00                	push   0x0
c001ac11:	6a 04                	push   0x4
c001ac13:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac1a:	ff d0                	call   eax
c001ac1c:	83 c4 20             	add    esp,0x20
c001ac1f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac26:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac2c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac33:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac3a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac40:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac47:	83 ec 0c             	sub    esp,0xc
c001ac4a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac51:	e8 fe 23 ff ff       	call   c000d054 <File::close()>
c001ac56:	83 c4 10             	add    esp,0x10
c001ac59:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ac60:	ba 00 00 00 00       	mov    edx,0x0
c001ac65:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ac6b:	5b                   	pop    ebx
c001ac6c:	5e                   	pop    esi
c001ac6d:	5f                   	pop    edi
c001ac6e:	5d                   	pop    ebp
c001ac6f:	c3                   	ret    

c001ac70 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ac70:	57                   	push   edi
c001ac71:	56                   	push   esi
c001ac72:	53                   	push   ebx
c001ac73:	81 ec 50 02 00 00    	sub    esp,0x250
c001ac79:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ac81:	74 0d                	je     c001ac90 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ac83:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ac8b:	75 0f                	jne    c001ac9c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ac8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac90:	b8 04 00 00 00       	mov    eax,0x4
c001ac95:	e9 36 01 00 00       	jmp    c001add0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ac9a:	66 90                	xchg   ax,ax
c001ac9c:	83 ec 08             	sub    esp,0x8
c001ac9f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001aca6:	50                   	push   eax
c001aca7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acae:	e8 34 b3 fe ff       	call   c0005fe7 <f_readdir>
c001acb3:	83 c4 10             	add    esp,0x10
c001acb6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001acbd:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001acc4:	83 ec 0c             	sub    esp,0xc
c001acc7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001acce:	83 c0 1a             	add    eax,0x1a
c001acd1:	50                   	push   eax
c001acd2:	e8 c9 59 fe ff       	call   c00006a0 <strlen>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	ba 00 00 00 00       	mov    edx,0x0
c001acdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ace3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ace7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001acee:	0f b6 c0             	movzx  eax,al
c001acf1:	83 e0 10             	and    eax,0x10
c001acf4:	74 0a                	je     c001ad00 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001acf6:	b8 02 00 00 00       	mov    eax,0x2
c001acfb:	eb 0b                	jmp    c001ad08 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001acfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ad00:	b8 01 00 00 00       	mov    eax,0x1
c001ad05:	8d 76 00             	lea    esi,[esi+0x0]
c001ad08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad0c:	83 ec 08             	sub    esp,0x8
c001ad0f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad16:	83 c0 1a             	add    eax,0x1a
c001ad19:	50                   	push   eax
c001ad1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad1e:	83 c0 10             	add    eax,0x10
c001ad21:	50                   	push   eax
c001ad22:	e8 19 5a fe ff       	call   c0000740 <strcpy>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad31:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad38:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad3c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad43:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad4a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad51:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ad58:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ad5f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ad66:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ad6d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ad74:	89 c6                	mov    esi,eax
c001ad76:	89 d7                	mov    edi,edx
c001ad78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad7a:	89 c8                	mov    eax,ecx
c001ad7c:	89 fa                	mov    edx,edi
c001ad7e:	89 f3                	mov    ebx,esi
c001ad80:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ad87:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ad8e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ad95:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ad9c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ada2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ada9:	84 c0                	test   al,al
c001adab:	75 07                	jne    c001adb4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001adad:	b8 07 00 00 00       	mov    eax,0x7
c001adb2:	eb 1c                	jmp    c001add0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adb4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001adbb:	85 c0                	test   eax,eax
c001adbd:	75 09                	jne    c001adc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001adbf:	b8 00 00 00 00       	mov    eax,0x0
c001adc4:	eb 0a                	jmp    c001add0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adc6:	66 90                	xchg   ax,ax
c001adc8:	b8 01 00 00 00       	mov    eax,0x1
c001adcd:	8d 76 00             	lea    esi,[esi+0x0]
c001add0:	81 c4 50 02 00 00    	add    esp,0x250
c001add6:	5b                   	pop    ebx
c001add7:	5e                   	pop    esi
c001add8:	5f                   	pop    edi
c001add9:	c3                   	ret    
c001adda:	66 90                	xchg   ax,ax

c001addc <FAT::read(void*, unsigned long, void*, int*)>:
c001addc:	83 ec 1c             	sub    esp,0x1c
c001addf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ade4:	74 0a                	je     c001adf0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ade6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001adeb:	75 0b                	jne    c001adf8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001aded:	8d 76 00             	lea    esi,[esi+0x0]
c001adf0:	b8 04 00 00 00       	mov    eax,0x4
c001adf5:	eb 41                	jmp    c001ae38 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001adf7:	90                   	nop
c001adf8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001adfc:	50                   	push   eax
c001adfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae09:	e8 b9 a4 fe ff       	call   c00052c7 <f_read>
c001ae0e:	83 c4 10             	add    esp,0x10
c001ae11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae19:	89 c2                	mov    edx,eax
c001ae1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae1f:	89 10                	mov    DWORD PTR [eax],edx
c001ae21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae25:	85 c0                	test   eax,eax
c001ae27:	75 07                	jne    c001ae30 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae29:	b8 00 00 00 00       	mov    eax,0x0
c001ae2e:	eb 08                	jmp    c001ae38 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae30:	b8 01 00 00 00       	mov    eax,0x1
c001ae35:	8d 76 00             	lea    esi,[esi+0x0]
c001ae38:	83 c4 1c             	add    esp,0x1c
c001ae3b:	c3                   	ret    

c001ae3c <FAT::write(void*, unsigned long, void*, int*)>:
c001ae3c:	83 ec 1c             	sub    esp,0x1c
c001ae3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae44:	74 0a                	je     c001ae50 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae4b:	75 0b                	jne    c001ae58 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	b8 04 00 00 00       	mov    eax,0x4
c001ae55:	eb 41                	jmp    c001ae98 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae57:	90                   	nop
c001ae58:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae5c:	50                   	push   eax
c001ae5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae69:	e8 d9 a6 fe ff       	call   c0005547 <f_write>
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae79:	89 c2                	mov    edx,eax
c001ae7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae7f:	89 10                	mov    DWORD PTR [eax],edx
c001ae81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae85:	85 c0                	test   eax,eax
c001ae87:	75 07                	jne    c001ae90 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ae89:	b8 00 00 00 00       	mov    eax,0x0
c001ae8e:	eb 08                	jmp    c001ae98 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae90:	b8 01 00 00 00       	mov    eax,0x1
c001ae95:	8d 76 00             	lea    esi,[esi+0x0]
c001ae98:	83 c4 1c             	add    esp,0x1c
c001ae9b:	c3                   	ret    

c001ae9c <FAT::close(void*)>:
c001ae9c:	83 ec 1c             	sub    esp,0x1c
c001ae9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aea4:	75 0a                	jne    c001aeb0 <FAT::close(void*)+0x14>
c001aea6:	b8 04 00 00 00       	mov    eax,0x4
c001aeab:	eb 3f                	jmp    c001aeec <FAT::close(void*)+0x50>
c001aead:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeb7:	e8 21 ab fe ff       	call   c00059dd <f_close>
c001aebc:	83 c4 10             	add    esp,0x10
c001aebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aec3:	83 ec 0c             	sub    esp,0xc
c001aec6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeca:	e8 04 eb fe ff       	call   c00099d3 <free>
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aed6:	85 c0                	test   eax,eax
c001aed8:	75 0a                	jne    c001aee4 <FAT::close(void*)+0x48>
c001aeda:	b8 00 00 00 00       	mov    eax,0x0
c001aedf:	eb 0b                	jmp    c001aeec <FAT::close(void*)+0x50>
c001aee1:	8d 76 00             	lea    esi,[esi+0x0]
c001aee4:	b8 01 00 00 00       	mov    eax,0x1
c001aee9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeec:	83 c4 1c             	add    esp,0x1c
c001aeef:	c3                   	ret    

c001aef0 <FAT::closeDir(void*)>:
c001aef0:	83 ec 1c             	sub    esp,0x1c
c001aef3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aef8:	75 0a                	jne    c001af04 <FAT::closeDir(void*)+0x14>
c001aefa:	b8 04 00 00 00       	mov    eax,0x4
c001aeff:	eb 3f                	jmp    c001af40 <FAT::closeDir(void*)+0x50>
c001af01:	8d 76 00             	lea    esi,[esi+0x0]
c001af04:	83 ec 0c             	sub    esp,0xc
c001af07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af0b:	e8 b5 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af10:	83 c4 10             	add    esp,0x10
c001af13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af17:	83 ec 0c             	sub    esp,0xc
c001af1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af1e:	e8 b0 ea fe ff       	call   c00099d3 <free>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af2a:	85 c0                	test   eax,eax
c001af2c:	75 0a                	jne    c001af38 <FAT::closeDir(void*)+0x48>
c001af2e:	b8 00 00 00 00       	mov    eax,0x0
c001af33:	eb 0b                	jmp    c001af40 <FAT::closeDir(void*)+0x50>
c001af35:	8d 76 00             	lea    esi,[esi+0x0]
c001af38:	b8 01 00 00 00       	mov    eax,0x1
c001af3d:	8d 76 00             	lea    esi,[esi+0x0]
c001af40:	83 c4 1c             	add    esp,0x1c
c001af43:	c3                   	ret    

c001af44 <FAT::seek(void*, unsigned long long)>:
c001af44:	83 ec 2c             	sub    esp,0x2c
c001af47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af57:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001af5c:	75 0a                	jne    c001af68 <FAT::seek(void*, unsigned long long)+0x24>
c001af5e:	b8 04 00 00 00       	mov    eax,0x4
c001af63:	eb 37                	jmp    c001af9c <FAT::seek(void*, unsigned long long)+0x58>
c001af65:	8d 76 00             	lea    esi,[esi+0x0]
c001af68:	83 ec 04             	sub    esp,0x4
c001af6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af73:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001af77:	e8 90 aa fe ff       	call   c0005a0c <f_lseek>
c001af7c:	83 c4 10             	add    esp,0x10
c001af7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af87:	85 c0                	test   eax,eax
c001af89:	75 09                	jne    c001af94 <FAT::seek(void*, unsigned long long)+0x50>
c001af8b:	b8 00 00 00 00       	mov    eax,0x0
c001af90:	eb 0a                	jmp    c001af9c <FAT::seek(void*, unsigned long long)+0x58>
c001af92:	66 90                	xchg   ax,ax
c001af94:	b8 01 00 00 00       	mov    eax,0x1
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	83 c4 2c             	add    esp,0x2c
c001af9f:	c3                   	ret    

c001afa0 <fatWrapperReadDisk>:
c001afa0:	83 ec 1c             	sub    esp,0x1c
c001afa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afa7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001afb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afbf:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c001afc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001afca:	83 ec 0c             	sub    esp,0xc
c001afcd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afd1:	52                   	push   edx
c001afd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afda:	50                   	push   eax
c001afdb:	e8 64 51 ff ff       	call   c0010144 <LogicalDisk::read(unsigned long long, int, void*)>
c001afe0:	83 c4 20             	add    esp,0x20
c001afe3:	83 c4 1c             	add    esp,0x1c
c001afe6:	c3                   	ret    
c001afe7:	90                   	nop

c001afe8 <fatWrapperWriteDisk>:
c001afe8:	83 ec 1c             	sub    esp,0x1c
c001afeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aff3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aff7:	89 04 24             	mov    DWORD PTR [esp],eax
c001affa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001affe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b002:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b007:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c001b00e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b012:	83 ec 0c             	sub    esp,0xc
c001b015:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b019:	52                   	push   edx
c001b01a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b01e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b022:	50                   	push   eax
c001b023:	e8 88 51 ff ff       	call   c00101b0 <LogicalDisk::write(unsigned long long, int, void*)>
c001b028:	83 c4 20             	add    esp,0x20
c001b02b:	83 c4 1c             	add    esp,0x1c
c001b02e:	c3                   	ret    
c001b02f:	90                   	nop

c001b030 <fatWrapperIoctl>:
c001b030:	53                   	push   ebx
c001b031:	83 ec 28             	sub    esp,0x28
c001b034:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b038:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b03c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b040:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b044:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b049:	75 31                	jne    c001b07c <fatWrapperIoctl+0x4c>
c001b04b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b04f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b053:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b058:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c001b05f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b065:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b06b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b06f:	66 89 02             	mov    WORD PTR [edx],ax
c001b072:	b8 00 00 00 00       	mov    eax,0x0
c001b077:	e9 bc 00 00 00       	jmp    c001b138 <fatWrapperIoctl+0x108>
c001b07c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b081:	75 6d                	jne    c001b0f0 <fatWrapperIoctl+0xc0>
c001b083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b08b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b090:	8b 04 85 60 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96a0]
c001b097:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b09d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0a3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0a9:	89 c8                	mov    eax,ecx
c001b0ab:	89 da                	mov    edx,ebx
c001b0ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0b1:	c1 e0 0a             	shl    eax,0xa
c001b0b4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b0b9:	8b 0c 8d 60 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd96a0]
c001b0c0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b0c6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b0cc:	89 cb                	mov    ebx,ecx
c001b0ce:	c1 fb 1f             	sar    ebx,0x1f
c001b0d1:	53                   	push   ebx
c001b0d2:	51                   	push   ecx
c001b0d3:	52                   	push   edx
c001b0d4:	50                   	push   eax
c001b0d5:	e8 0a 5e 00 00       	call   c0020ee4 <__udivdi3>
c001b0da:	83 c4 10             	add    esp,0x10
c001b0dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b0e1:	89 01                	mov    DWORD PTR [ecx],eax
c001b0e3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b0e6:	b8 00 00 00 00       	mov    eax,0x0
c001b0eb:	eb 4b                	jmp    c001b138 <fatWrapperIoctl+0x108>
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b0f5:	75 09                	jne    c001b100 <fatWrapperIoctl+0xd0>
c001b0f7:	b8 00 00 00 00       	mov    eax,0x0
c001b0fc:	eb 3a                	jmp    c001b138 <fatWrapperIoctl+0x108>
c001b0fe:	66 90                	xchg   ax,ax
c001b100:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b105:	75 19                	jne    c001b120 <fatWrapperIoctl+0xf0>
c001b107:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b10b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b10f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b113:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b119:	b8 00 00 00 00       	mov    eax,0x0
c001b11e:	eb 18                	jmp    c001b138 <fatWrapperIoctl+0x108>
c001b120:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b125:	75 09                	jne    c001b130 <fatWrapperIoctl+0x100>
c001b127:	b8 00 00 00 00       	mov    eax,0x0
c001b12c:	eb 0a                	jmp    c001b138 <fatWrapperIoctl+0x108>
c001b12e:	66 90                	xchg   ax,ax
c001b130:	b8 04 00 00 00       	mov    eax,0x4
c001b135:	8d 76 00             	lea    esi,[esi+0x0]
c001b138:	83 c4 28             	add    esp,0x28
c001b13b:	5b                   	pop    ebx
c001b13c:	c3                   	ret    
c001b13d:	90                   	nop
c001b13e:	66 90                	xchg   ax,ax

c001b140 <FAT::FAT()>:
c001b140:	83 ec 1c             	sub    esp,0x1c
c001b143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	50                   	push   eax
c001b14b:	e8 ee 1b ff ff       	call   c000cd3e <Filesystem::Filesystem()>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	ba ac 4a 02 c0       	mov    edx,0xc0024aac
c001b158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b15c:	89 10                	mov    DWORD PTR [eax],edx
c001b15e:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c001b168:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b170:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b175:	7f 15                	jg     c001b18c <FAT::FAT()+0x4c>
c001b177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b17b:	c7 04 85 80 79 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8680],0xffffffff
c001b186:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b18a:	eb e4                	jmp    c001b170 <FAT::FAT()+0x30>
c001b18c:	90                   	nop
c001b18d:	83 c4 1c             	add    esp,0x1c
c001b190:	c3                   	ret    
c001b191:	90                   	nop
c001b192:	66 90                	xchg   ax,ax

c001b194 <FAT::fixFilepath(char*)>:
c001b194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b198:	8a 00                	mov    al,BYTE PTR [eax]
c001b19a:	3c 40                	cmp    al,0x40
c001b19c:	7e 2e                	jle    c001b1cc <FAT::fixFilepath(char*)+0x38>
c001b19e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1a2:	8a 00                	mov    al,BYTE PTR [eax]
c001b1a4:	83 e8 41             	sub    eax,0x41
c001b1a7:	88 c2                	mov    dl,al
c001b1a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ad:	88 10                	mov    BYTE PTR [eax],dl
c001b1af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1b3:	8a 00                	mov    al,BYTE PTR [eax]
c001b1b5:	0f be c0             	movsx  eax,al
c001b1b8:	8b 04 85 80 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8680]
c001b1bf:	83 c0 30             	add    eax,0x30
c001b1c2:	88 c2                	mov    dl,al
c001b1c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1c8:	88 10                	mov    BYTE PTR [eax],dl
c001b1ca:	66 90                	xchg   ax,ax
c001b1cc:	90                   	nop
c001b1cd:	c3                   	ret    
c001b1ce:	66 90                	xchg   ax,ax

c001b1d0 <FAT::open(char const*, void**, FileOpenMode)>:
c001b1d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b1d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b1de:	74 0c                	je     c001b1ec <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b1e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b1e8:	75 0e                	jne    c001b1f8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b1ea:	66 90                	xchg   ax,ax
c001b1ec:	b8 04 00 00 00       	mov    eax,0x4
c001b1f1:	e9 06 01 00 00       	jmp    c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b1f6:	66 90                	xchg   ax,ax
c001b1f8:	83 ec 08             	sub    esp,0x8
c001b1fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b202:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b206:	50                   	push   eax
c001b207:	e8 34 55 fe ff       	call   c0000740 <strcpy>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	83 ec 08             	sub    esp,0x8
c001b212:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b216:	50                   	push   eax
c001b217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b21e:	e8 71 ff ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b22e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b235:	83 e0 01             	and    eax,0x1
c001b238:	74 0a                	je     c001b244 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b23a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b242:	66 90                	xchg   ax,ax
c001b244:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b24b:	83 e0 04             	and    eax,0x4
c001b24e:	74 10                	je     c001b260 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b250:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b258:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b260:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b267:	83 e0 02             	and    eax,0x2
c001b26a:	74 08                	je     c001b274 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b26c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b274:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b27b:	83 e0 08             	and    eax,0x8
c001b27e:	74 08                	je     c001b288 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b280:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b288:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b28f:	83 e0 10             	and    eax,0x10
c001b292:	74 08                	je     c001b29c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b294:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b29c:	83 ec 0c             	sub    esp,0xc
c001b29f:	68 50 02 00 00       	push   0x250
c001b2a4:	e8 1a e7 fe ff       	call   c00099c3 <malloc>
c001b2a9:	83 c4 10             	add    esp,0x10
c001b2ac:	89 c2                	mov    edx,eax
c001b2ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2b5:	89 10                	mov    DWORD PTR [eax],edx
c001b2b7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b2bf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2c8:	83 ec 04             	sub    esp,0x4
c001b2cb:	52                   	push   edx
c001b2cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b2d0:	52                   	push   edx
c001b2d1:	50                   	push   eax
c001b2d2:	e8 b4 9b fe ff       	call   c0004e8b <f_open>
c001b2d7:	83 c4 10             	add    esp,0x10
c001b2da:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b2e1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b2e9:	74 09                	je     c001b2f4 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b2eb:	b8 01 00 00 00       	mov    eax,0x1
c001b2f0:	eb 0a                	jmp    c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b2f2:	66 90                	xchg   ax,ax
c001b2f4:	b8 00 00 00 00       	mov    eax,0x0
c001b2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b302:	c3                   	ret    
c001b303:	90                   	nop

c001b304 <FAT::openDir(char const*, void**)>:
c001b304:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b30a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b312:	74 0c                	je     c001b320 <FAT::openDir(char const*, void**)+0x1c>
c001b314:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b31c:	75 0e                	jne    c001b32c <FAT::openDir(char const*, void**)+0x28>
c001b31e:	66 90                	xchg   ax,ax
c001b320:	b8 04 00 00 00       	mov    eax,0x4
c001b325:	e9 82 00 00 00       	jmp    c001b3ac <FAT::openDir(char const*, void**)+0xa8>
c001b32a:	66 90                	xchg   ax,ax
c001b32c:	83 ec 08             	sub    esp,0x8
c001b32f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b336:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b33a:	50                   	push   eax
c001b33b:	e8 00 54 fe ff       	call   c0000740 <strcpy>
c001b340:	83 c4 10             	add    esp,0x10
c001b343:	83 ec 08             	sub    esp,0x8
c001b346:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b34a:	50                   	push   eax
c001b34b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b352:	e8 3d fe ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	83 ec 0c             	sub    esp,0xc
c001b35d:	6a 4c                	push   0x4c
c001b35f:	e8 5f e6 fe ff       	call   c00099c3 <malloc>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	89 c2                	mov    edx,eax
c001b369:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b370:	89 10                	mov    DWORD PTR [eax],edx
c001b372:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b379:	8b 00                	mov    eax,DWORD PTR [eax]
c001b37b:	83 ec 08             	sub    esp,0x8
c001b37e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b382:	52                   	push   edx
c001b383:	50                   	push   eax
c001b384:	e8 3a ab fe ff       	call   c0005ec3 <f_opendir>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b393:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b39b:	74 07                	je     c001b3a4 <FAT::openDir(char const*, void**)+0xa0>
c001b39d:	b8 01 00 00 00       	mov    eax,0x1
c001b3a2:	eb 08                	jmp    c001b3ac <FAT::openDir(char const*, void**)+0xa8>
c001b3a4:	b8 00 00 00 00       	mov    eax,0x0
c001b3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3b2:	c3                   	ret    
c001b3b3:	90                   	nop

c001b3b4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3b4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3ba:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b3c2:	75 0c                	jne    c001b3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b3c4:	b8 04 00 00 00       	mov    eax,0x4
c001b3c9:	e9 d2 00 00 00       	jmp    c001b4a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b3ce:	66 90                	xchg   ax,ax
c001b3d0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b3d8:	75 0a                	jne    c001b3e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b3da:	b8 04 00 00 00       	mov    eax,0x4
c001b3df:	e9 bc 00 00 00       	jmp    c001b4a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b3e4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b3ec:	75 0a                	jne    c001b3f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b3ee:	b8 04 00 00 00       	mov    eax,0x4
c001b3f3:	e9 a8 00 00 00       	jmp    c001b4a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b3f8:	83 ec 08             	sub    esp,0x8
c001b3fb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b402:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b409:	50                   	push   eax
c001b40a:	e8 31 53 fe ff       	call   c0000740 <strcpy>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	83 ec 08             	sub    esp,0x8
c001b415:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b41c:	50                   	push   eax
c001b41d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b424:	e8 6b fd ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	83 ec 08             	sub    esp,0x8
c001b42f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b433:	50                   	push   eax
c001b434:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b43b:	50                   	push   eax
c001b43c:	e8 41 ac fe ff       	call   c0006082 <f_stat>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b44b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b452:	85 c0                	test   eax,eax
c001b454:	74 0a                	je     c001b460 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b456:	83 f8 04             	cmp    eax,0x4
c001b459:	74 35                	je     c001b490 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b45b:	eb 3b                	jmp    c001b498 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b45d:	8d 76 00             	lea    esi,[esi+0x0]
c001b460:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b464:	0f b6 c0             	movzx  eax,al
c001b467:	83 e0 10             	and    eax,0x10
c001b46a:	0f 95 c2             	setne  dl
c001b46d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b474:	88 10                	mov    BYTE PTR [eax],dl
c001b476:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b479:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b47d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b484:	89 01                	mov    DWORD PTR [ecx],eax
c001b486:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b489:	b8 00 00 00 00       	mov    eax,0x0
c001b48e:	eb 10                	jmp    c001b4a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b490:	b8 02 00 00 00       	mov    eax,0x2
c001b495:	eb 09                	jmp    c001b4a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b497:	90                   	nop
c001b498:	b8 01 00 00 00       	mov    eax,0x1
c001b49d:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4a6:	c3                   	ret    
c001b4a7:	90                   	nop

c001b4a8 <FAT::unlink(char const*)>:
c001b4a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4b6:	75 08                	jne    c001b4c0 <FAT::unlink(char const*)+0x18>
c001b4b8:	b8 04 00 00 00       	mov    eax,0x4
c001b4bd:	eb 61                	jmp    c001b520 <FAT::unlink(char const*)+0x78>
c001b4bf:	90                   	nop
c001b4c0:	83 ec 08             	sub    esp,0x8
c001b4c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4ce:	50                   	push   eax
c001b4cf:	e8 6c 52 fe ff       	call   c0000740 <strcpy>
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	83 ec 08             	sub    esp,0x8
c001b4da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4de:	50                   	push   eax
c001b4df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4e6:	e8 a9 fc ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b4eb:	83 c4 10             	add    esp,0x10
c001b4ee:	83 ec 0c             	sub    esp,0xc
c001b4f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4f5:	50                   	push   eax
c001b4f6:	e8 d9 ae fe ff       	call   c00063d4 <f_unlink>
c001b4fb:	83 c4 10             	add    esp,0x10
c001b4fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b505:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b50c:	85 c0                	test   eax,eax
c001b50e:	75 08                	jne    c001b518 <FAT::unlink(char const*)+0x70>
c001b510:	b8 00 00 00 00       	mov    eax,0x0
c001b515:	eb 09                	jmp    c001b520 <FAT::unlink(char const*)+0x78>
c001b517:	90                   	nop
c001b518:	b8 01 00 00 00       	mov    eax,0x1
c001b51d:	8d 76 00             	lea    esi,[esi+0x0]
c001b520:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b526:	c3                   	ret    
c001b527:	90                   	nop

c001b528 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b528:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b52e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b535:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b53c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b540:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b544:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b54c:	75 0a                	jne    c001b558 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b54e:	b8 04 00 00 00       	mov    eax,0x4
c001b553:	e9 30 01 00 00       	jmp    c001b688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b558:	83 ec 08             	sub    esp,0x8
c001b55b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b562:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b566:	50                   	push   eax
c001b567:	e8 d4 51 fe ff       	call   c0000740 <strcpy>
c001b56c:	83 c4 10             	add    esp,0x10
c001b56f:	83 ec 08             	sub    esp,0x8
c001b572:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b576:	50                   	push   eax
c001b577:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b57e:	e8 11 fc ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b583:	83 c4 10             	add    esp,0x10
c001b586:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b58e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b596:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b59b:	83 e0 01             	and    eax,0x1
c001b59e:	74 08                	je     c001b5a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5a0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5ad:	83 e0 02             	and    eax,0x2
c001b5b0:	74 0a                	je     c001b5bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5b2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b5ba:	66 90                	xchg   ax,ax
c001b5bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5c1:	83 e0 04             	and    eax,0x4
c001b5c4:	74 0a                	je     c001b5d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b5c6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b5ce:	66 90                	xchg   ax,ax
c001b5d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5d5:	83 e0 08             	and    eax,0x8
c001b5d8:	74 0a                	je     c001b5e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b5da:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b5e2:	66 90                	xchg   ax,ax
c001b5e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5e9:	83 e0 01             	and    eax,0x1
c001b5ec:	74 0a                	je     c001b5f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b5ee:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b5f6:	66 90                	xchg   ax,ax
c001b5f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5fd:	83 e0 02             	and    eax,0x2
c001b600:	74 0a                	je     c001b60c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b602:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b60a:	66 90                	xchg   ax,ax
c001b60c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b611:	83 e0 04             	and    eax,0x4
c001b614:	74 0a                	je     c001b620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b616:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b61e:	66 90                	xchg   ax,ax
c001b620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b625:	83 e0 08             	and    eax,0x8
c001b628:	74 0a                	je     c001b634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b62a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b632:	66 90                	xchg   ax,ax
c001b634:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b63b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b642:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b64a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b652:	83 ec 04             	sub    esp,0x4
c001b655:	52                   	push   edx
c001b656:	50                   	push   eax
c001b657:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b65b:	50                   	push   eax
c001b65c:	e8 15 b4 fe ff       	call   c0006a76 <f_chmod>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b66b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b672:	85 c0                	test   eax,eax
c001b674:	75 0a                	jne    c001b680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b676:	b8 00 00 00 00       	mov    eax,0x0
c001b67b:	eb 0b                	jmp    c001b688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b67d:	8d 76 00             	lea    esi,[esi+0x0]
c001b680:	b8 01 00 00 00       	mov    eax,0x1
c001b685:	8d 76 00             	lea    esi,[esi+0x0]
c001b688:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b68e:	c3                   	ret    
c001b68f:	90                   	nop

c001b690 <FAT::rename(char const*, char const*)>:
c001b690:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b696:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b69e:	74 0c                	je     c001b6ac <FAT::rename(char const*, char const*)+0x1c>
c001b6a0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6a8:	75 0e                	jne    c001b6b8 <FAT::rename(char const*, char const*)+0x28>
c001b6aa:	66 90                	xchg   ax,ax
c001b6ac:	b8 04 00 00 00       	mov    eax,0x4
c001b6b1:	e9 9e 00 00 00       	jmp    c001b754 <FAT::rename(char const*, char const*)+0xc4>
c001b6b6:	66 90                	xchg   ax,ax
c001b6b8:	83 ec 08             	sub    esp,0x8
c001b6bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b6c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b6c9:	50                   	push   eax
c001b6ca:	e8 71 50 fe ff       	call   c0000740 <strcpy>
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	83 ec 08             	sub    esp,0x8
c001b6d5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b6dc:	50                   	push   eax
c001b6dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b6e4:	e8 ab fa ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	83 ec 08             	sub    esp,0x8
c001b6ef:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b6f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6fa:	50                   	push   eax
c001b6fb:	e8 40 50 fe ff       	call   c0000740 <strcpy>
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	83 ec 08             	sub    esp,0x8
c001b706:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b70a:	50                   	push   eax
c001b70b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b712:	e8 7d fa ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	83 ec 08             	sub    esp,0x8
c001b71d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b721:	50                   	push   eax
c001b722:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b729:	50                   	push   eax
c001b72a:	e8 54 b0 fe ff       	call   c0006783 <f_rename>
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b739:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b740:	85 c0                	test   eax,eax
c001b742:	75 08                	jne    c001b74c <FAT::rename(char const*, char const*)+0xbc>
c001b744:	b8 00 00 00 00       	mov    eax,0x0
c001b749:	eb 09                	jmp    c001b754 <FAT::rename(char const*, char const*)+0xc4>
c001b74b:	90                   	nop
c001b74c:	b8 01 00 00 00       	mov    eax,0x1
c001b751:	8d 76 00             	lea    esi,[esi+0x0]
c001b754:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b75a:	c3                   	ret    
c001b75b:	90                   	nop

c001b75c <FAT::mkdir(char const*)>:
c001b75c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b762:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b76a:	75 08                	jne    c001b774 <FAT::mkdir(char const*)+0x18>
c001b76c:	b8 04 00 00 00       	mov    eax,0x4
c001b771:	eb 61                	jmp    c001b7d4 <FAT::mkdir(char const*)+0x78>
c001b773:	90                   	nop
c001b774:	83 ec 08             	sub    esp,0x8
c001b777:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b77e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b782:	50                   	push   eax
c001b783:	e8 b8 4f fe ff       	call   c0000740 <strcpy>
c001b788:	83 c4 10             	add    esp,0x10
c001b78b:	83 ec 08             	sub    esp,0x8
c001b78e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b792:	50                   	push   eax
c001b793:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b79a:	e8 f5 f9 ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b79f:	83 c4 10             	add    esp,0x10
c001b7a2:	83 ec 0c             	sub    esp,0xc
c001b7a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7a9:	50                   	push   eax
c001b7aa:	e8 a8 ad fe ff       	call   c0006557 <f_mkdir>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b7b9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b7c0:	85 c0                	test   eax,eax
c001b7c2:	75 08                	jne    c001b7cc <FAT::mkdir(char const*)+0x70>
c001b7c4:	b8 00 00 00 00       	mov    eax,0x0
c001b7c9:	eb 09                	jmp    c001b7d4 <FAT::mkdir(char const*)+0x78>
c001b7cb:	90                   	nop
c001b7cc:	b8 01 00 00 00       	mov    eax,0x1
c001b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b7da:	c3                   	ret    
c001b7db:	90                   	nop

c001b7dc <FAT::exists(char const*)>:
c001b7dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b7e2:	83 ec 08             	sub    esp,0x8
c001b7e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b7ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b7f0:	50                   	push   eax
c001b7f1:	e8 4a 4f fe ff       	call   c0000740 <strcpy>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	83 ec 08             	sub    esp,0x8
c001b7fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b800:	50                   	push   eax
c001b801:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b808:	e8 87 f9 ff ff       	call   c001b194 <FAT::fixFilepath(char*)>
c001b80d:	83 c4 10             	add    esp,0x10
c001b810:	83 ec 08             	sub    esp,0x8
c001b813:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b81a:	50                   	push   eax
c001b81b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b81f:	50                   	push   eax
c001b820:	e8 5d a8 fe ff       	call   c0006082 <f_stat>
c001b825:	83 c4 10             	add    esp,0x10
c001b828:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b82f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b836:	85 c0                	test   eax,eax
c001b838:	75 06                	jne    c001b840 <FAT::exists(char const*)+0x64>
c001b83a:	b0 01                	mov    al,0x1
c001b83c:	eb 06                	jmp    c001b844 <FAT::exists(char const*)+0x68>
c001b83e:	66 90                	xchg   ax,ax
c001b840:	b0 00                	mov    al,0x0
c001b842:	66 90                	xchg   ax,ax
c001b844:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b84a:	c3                   	ret    
c001b84b:	90                   	nop

c001b84c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b84c:	b8 08 00 00 00       	mov    eax,0x8
c001b851:	c3                   	ret    

c001b852 <ISO9660::seek(void*, unsigned long long)>:
c001b852:	53                   	push   ebx
c001b853:	b8 04 00 00 00       	mov    eax,0x4
c001b858:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b85c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b860:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b864:	85 d2                	test   edx,edx
c001b866:	74 17                	je     c001b87f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b868:	89 c8                	mov    eax,ecx
c001b86a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b86d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b870:	b8 01 00 00 00       	mov    eax,0x1
c001b875:	73 08                	jae    c001b87f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b877:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b87a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b87d:	31 c0                	xor    eax,eax
c001b87f:	5b                   	pop    ebx
c001b880:	c3                   	ret    
c001b881:	90                   	nop

c001b882 <ISO9660::tell(void*, unsigned long long*)>:
c001b882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b88a:	85 d2                	test   edx,edx
c001b88c:	74 12                	je     c001b8a0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b88e:	85 c0                	test   eax,eax
c001b890:	74 0e                	je     c001b8a0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b892:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b895:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b898:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b89b:	89 10                	mov    DWORD PTR [eax],edx
c001b89d:	31 c0                	xor    eax,eax
c001b89f:	c3                   	ret    
c001b8a0:	b8 04 00 00 00       	mov    eax,0x4
c001b8a5:	c3                   	ret    

c001b8a6 <ISO9660::getName()>:
c001b8a6:	b8 0c 4b 02 c0       	mov    eax,0xc0024b0c
c001b8ab:	c3                   	ret    

c001b8ac <ISO9660::stat(void*, unsigned long long*)>:
c001b8ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8b4:	85 d2                	test   edx,edx
c001b8b6:	74 12                	je     c001b8ca <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8b8:	85 c0                	test   eax,eax
c001b8ba:	74 0e                	je     c001b8ca <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8bc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b8bf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b8c2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8c5:	89 10                	mov    DWORD PTR [eax],edx
c001b8c7:	31 c0                	xor    eax,eax
c001b8c9:	c3                   	ret    
c001b8ca:	b8 04 00 00 00       	mov    eax,0x4
c001b8cf:	c3                   	ret    

c001b8d0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b8d0:	b8 01 00 00 00       	mov    eax,0x1
c001b8d5:	c3                   	ret    

c001b8d6 <ISO9660::unlink(char const*)>:
c001b8d6:	b8 01 00 00 00       	mov    eax,0x1
c001b8db:	c3                   	ret    

c001b8dc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b8dc:	b8 01 00 00 00       	mov    eax,0x1
c001b8e1:	c3                   	ret    

c001b8e2 <ISO9660::rename(char const*, char const*)>:
c001b8e2:	b8 01 00 00 00       	mov    eax,0x1
c001b8e7:	c3                   	ret    

c001b8e8 <ISO9660::mkdir(char const*)>:
c001b8e8:	b8 01 00 00 00       	mov    eax,0x1
c001b8ed:	c3                   	ret    

c001b8ee <ISO9660::close(void*)>:
c001b8ee:	83 ec 0c             	sub    esp,0xc
c001b8f1:	b8 04 00 00 00       	mov    eax,0x4
c001b8f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8fa:	85 d2                	test   edx,edx
c001b8fc:	74 0e                	je     c001b90c <ISO9660::close(void*)+0x1e>
c001b8fe:	83 ec 0c             	sub    esp,0xc
c001b901:	52                   	push   edx
c001b902:	e8 cc e0 fe ff       	call   c00099d3 <free>
c001b907:	83 c4 10             	add    esp,0x10
c001b90a:	31 c0                	xor    eax,eax
c001b90c:	83 c4 0c             	add    esp,0xc
c001b90f:	c3                   	ret    

c001b910 <ISO9660::closeDir(void*)>:
c001b910:	83 ec 0c             	sub    esp,0xc
c001b913:	b8 04 00 00 00       	mov    eax,0x4
c001b918:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b91c:	85 d2                	test   edx,edx
c001b91e:	74 0e                	je     c001b92e <ISO9660::closeDir(void*)+0x1e>
c001b920:	83 ec 0c             	sub    esp,0xc
c001b923:	52                   	push   edx
c001b924:	e8 aa e0 fe ff       	call   c00099d3 <free>
c001b929:	83 c4 10             	add    esp,0x10
c001b92c:	31 c0                	xor    eax,eax
c001b92e:	83 c4 0c             	add    esp,0xc
c001b931:	c3                   	ret    

c001b932 <ISO9660::~ISO9660()>:
c001b932:	83 ec 0c             	sub    esp,0xc
c001b935:	ba 30 4b 02 c0       	mov    edx,0xc0024b30
c001b93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93e:	89 10                	mov    DWORD PTR [eax],edx
c001b940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b944:	83 ec 0c             	sub    esp,0xc
c001b947:	50                   	push   eax
c001b948:	e8 15 14 ff ff       	call   c000cd62 <Filesystem::~Filesystem()>
c001b94d:	83 c4 10             	add    esp,0x10
c001b950:	90                   	nop
c001b951:	83 c4 0c             	add    esp,0xc
c001b954:	c3                   	ret    
c001b955:	90                   	nop

c001b956 <ISO9660::~ISO9660()>:
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	83 ec 0c             	sub    esp,0xc
c001b95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b960:	e8 cd ff ff ff       	call   c001b932 <ISO9660::~ISO9660()>
c001b965:	83 c4 10             	add    esp,0x10
c001b968:	83 ec 08             	sub    esp,0x8
c001b96b:	6a 08                	push   0x8
c001b96d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b971:	e8 d1 0f ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001b976:	83 c4 10             	add    esp,0x10
c001b979:	83 c4 0c             	add    esp,0xc
c001b97c:	c3                   	ret    

c001b97d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b97d:	55                   	push   ebp
c001b97e:	31 c9                	xor    ecx,ecx
c001b980:	57                   	push   edi
c001b981:	56                   	push   esi
c001b982:	53                   	push   ebx
c001b983:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b987:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b98b:	89 eb                	mov    ebx,ebp
c001b98d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b991:	39 ce                	cmp    esi,ecx
c001b993:	7e 17                	jle    c001b9ac <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b995:	31 d2                	xor    edx,edx
c001b997:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b99b:	7d 13                	jge    c001b9b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b99d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9a1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9a4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9a7:	75 0d                	jne    c001b9b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9a9:	42                   	inc    edx
c001b9aa:	eb eb                	jmp    c001b997 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9ac:	31 c0                	xor    eax,eax
c001b9ae:	eb 0a                	jmp    c001b9ba <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9b0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b9b4:	eb 04                	jmp    c001b9ba <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9b6:	41                   	inc    ecx
c001b9b7:	43                   	inc    ebx
c001b9b8:	eb d7                	jmp    c001b991 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b9ba:	5b                   	pop    ebx
c001b9bb:	5e                   	pop    esi
c001b9bc:	5f                   	pop    edi
c001b9bd:	5d                   	pop    ebp
c001b9be:	c3                   	ret    

c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b9bf:	57                   	push   edi
c001b9c0:	56                   	push   esi
c001b9c1:	53                   	push   ebx
c001b9c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9ca:	39 0d 60 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a60,ecx
c001b9d0:	75 08                	jne    c001b9da <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001b9d2:	38 05 94 5d 02 c0    	cmp    BYTE PTR ds:0xc0025d94,al
c001b9d8:	74 2b                	je     c001ba05 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001b9da:	83 ec 0c             	sub    esp,0xc
c001b9dd:	a2 94 5d 02 c0       	mov    ds:0xc0025d94,al
c001b9e2:	68 80 7a 02 c0       	push   0xc0027a80
c001b9e7:	0f be c0             	movsx  eax,al
c001b9ea:	6a 01                	push   0x1
c001b9ec:	89 0d 60 7a 02 c0    	mov    DWORD PTR ds:0xc0027a60,ecx
c001b9f2:	31 db                	xor    ebx,ebx
c001b9f4:	53                   	push   ebx
c001b9f5:	51                   	push   ecx
c001b9f6:	ff 34 85 5c 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd97a4]
c001b9fd:	e8 42 47 ff ff       	call   c0010144 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba02:	83 c4 20             	add    esp,0x20
c001ba05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba09:	be 80 7a 02 c0       	mov    esi,0xc0027a80
c001ba0e:	b9 00 08 00 00       	mov    ecx,0x800
c001ba13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba15:	5b                   	pop    ebx
c001ba16:	5e                   	pop    esi
c001ba17:	5f                   	pop    edi
c001ba18:	c3                   	ret    
c001ba19:	90                   	nop

c001ba1a <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba1a:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba20:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba27:	83 c0 41             	add    eax,0x41
c001ba2a:	0f be c0             	movsx  eax,al
c001ba2d:	50                   	push   eax
c001ba2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba32:	50                   	push   eax
c001ba33:	6a 10                	push   0x10
c001ba35:	e8 85 ff ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba3a:	83 c4 10             	add    esp,0x10
c001ba3d:	31 c0                	xor    eax,eax
c001ba3f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba44:	75 1d                	jne    c001ba63 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba46:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba4b:	75 16                	jne    c001ba63 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba4d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba52:	75 0f                	jne    c001ba63 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba54:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba59:	75 08                	jne    c001ba63 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba5b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ba60:	0f 94 c0             	sete   al
c001ba63:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ba69:	c3                   	ret    

c001ba6a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ba6a:	55                   	push   ebp
c001ba6b:	57                   	push   edi
c001ba6c:	56                   	push   esi
c001ba6d:	53                   	push   ebx
c001ba6e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001ba74:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001ba7b:	85 ed                	test   ebp,ebp
c001ba7d:	0f 84 da 01 00 00    	je     c001bc5d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ba83:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ba8b:	0f 84 cc 01 00 00    	je     c001bc5d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ba91:	b8 01 00 00 00       	mov    eax,0x1
c001ba96:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001ba9a:	0f 85 c2 01 00 00    	jne    c001bc62 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001baa0:	31 d2                	xor    edx,edx
c001baa2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001baa9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001baac:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001baaf:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bab2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bab9:	01 c8                	add    eax,ecx
c001babb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001babe:	11 da                	adc    edx,ebx
c001bac0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bac4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bac8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bacc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bad0:	19 d7                	sbb    edi,edx
c001bad2:	72 11                	jb     c001bae5 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bad4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bad7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bae3:	eb 0c                	jmp    c001baf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bae5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bae9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001baed:	29 ce                	sub    esi,ecx
c001baef:	19 df                	sbb    edi,ebx
c001baf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001baf4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001baf7:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bafb:	c1 e0 0b             	shl    eax,0xb
c001bafe:	01 c8                	add    eax,ecx
c001bb00:	11 da                	adc    edx,ebx
c001bb02:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb09:	51                   	push   ecx
c001bb0a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb0e:	50                   	push   eax
c001bb0f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb13:	53                   	push   ebx
c001bb14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb1c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb20:	50                   	push   eax
c001bb21:	e8 99 fe ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb26:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb29:	b8 00 08 00 00       	mov    eax,0x800
c001bb2e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb34:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb38:	29 d0                	sub    eax,edx
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	89 f9                	mov    ecx,edi
c001bb3f:	39 c6                	cmp    esi,eax
c001bb41:	83 d9 00             	sbb    ecx,0x0
c001bb44:	7d 1b                	jge    c001bb61 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb46:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb4b:	75 12                	jne    c001bb5f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb4d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb5a:	e9 fa 00 00 00       	jmp    c001bc59 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bb5f:	89 f0                	mov    eax,esi
c001bb61:	01 d3                	add    ebx,edx
c001bb63:	31 d2                	xor    edx,edx
c001bb65:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bb69:	39 c2                	cmp    edx,eax
c001bb6b:	7d 14                	jge    c001bb81 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bb6d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bb74:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bb78:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bb7b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bb7e:	42                   	inc    edx
c001bb7f:	eb e8                	jmp    c001bb69 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bb81:	89 c2                	mov    edx,eax
c001bb83:	85 c0                	test   eax,eax
c001bb85:	79 02                	jns    c001bb89 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bb87:	31 d2                	xor    edx,edx
c001bb89:	01 c2                	add    edx,eax
c001bb8b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bb8e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bb95:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bb99:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bb9d:	99                   	cdq    
c001bb9e:	01 c1                	add    ecx,eax
c001bba0:	11 d3                	adc    ebx,edx
c001bba2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bba6:	29 c6                	sub    esi,eax
c001bba8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbac:	19 d7                	sbb    edi,edx
c001bbae:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbb1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bbb5:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bbba:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bbbd:	b8 00 00 00 00       	mov    eax,0x0
c001bbc2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bbc6:	7d 43                	jge    c001bc0b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bbc8:	52                   	push   edx
c001bbc9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbcd:	50                   	push   eax
c001bbce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bbd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bbda:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbde:	50                   	push   eax
c001bbdf:	e8 db fd ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbe4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bbec:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bbf1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bbf9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc01:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	eb aa                	jmp    c001bbb5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc0f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc12:	74 2a                	je     c001bc3e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc14:	50                   	push   eax
c001bc15:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc19:	50                   	push   eax
c001bc1a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc1e:	56                   	push   esi
c001bc1f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc27:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc2b:	51                   	push   ecx
c001bc2c:	e8 8e fd ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc31:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc3b:	83 c4 10             	add    esp,0x10
c001bc3e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc45:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc4d:	89 18                	mov    DWORD PTR [eax],ebx
c001bc4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc53:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc56:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc59:	31 c0                	xor    eax,eax
c001bc5b:	eb 05                	jmp    c001bc62 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bc5d:	b8 04 00 00 00       	mov    eax,0x4
c001bc62:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bc68:	5b                   	pop    ebx
c001bc69:	5e                   	pop    esi
c001bc6a:	5f                   	pop    edi
c001bc6b:	5d                   	pop    ebp
c001bc6c:	c3                   	ret    
c001bc6d:	90                   	nop

c001bc6e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bc6e:	55                   	push   ebp
c001bc6f:	57                   	push   edi
c001bc70:	56                   	push   esi
c001bc71:	53                   	push   ebx
c001bc72:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bc78:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bc7f:	85 ed                	test   ebp,ebp
c001bc81:	0f 84 51 02 00 00    	je     c001bed8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bc87:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bc8f:	0f 84 43 02 00 00    	je     c001bed8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bc95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bc98:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bc9b:	75 0a                	jne    c001bca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bc9d:	b8 07 00 00 00       	mov    eax,0x7
c001bca2:	e9 36 02 00 00       	jmp    c001bedd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bca7:	50                   	push   eax
c001bca8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcac:	50                   	push   eax
c001bcad:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcb4:	53                   	push   ebx
c001bcb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bcb8:	c1 e0 0b             	shl    eax,0xb
c001bcbb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bcbe:	c1 e8 0b             	shr    eax,0xb
c001bcc1:	50                   	push   eax
c001bcc2:	e8 f8 fc ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bcc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bcca:	83 c4 10             	add    esp,0x10
c001bccd:	89 c1                	mov    ecx,eax
c001bccf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bcd2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bcd8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bcdb:	84 db                	test   bl,bl
c001bcdd:	0f 85 8b 00 00 00    	jne    c001bd6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bce3:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bce9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bcec:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bcf2:	29 c6                	sub    esi,eax
c001bcf4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bcf8:	89 f3                	mov    ebx,esi
c001bcfa:	89 f1                	mov    ecx,esi
c001bcfc:	c1 fb 1f             	sar    ebx,0x1f
c001bcff:	01 f0                	add    eax,esi
c001bd01:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd04:	11 da                	adc    edx,ebx
c001bd06:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd0d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd10:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd13:	89 d8                	mov    eax,ebx
c001bd15:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd19:	ba 00 00 00 00       	mov    edx,0x0
c001bd1e:	19 f8                	sbb    eax,edi
c001bd20:	b8 00 00 00 00       	mov    eax,0x0
c001bd25:	73 08                	jae    c001bd2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd27:	89 f0                	mov    eax,esi
c001bd29:	89 fa                	mov    edx,edi
c001bd2b:	29 c8                	sub    eax,ecx
c001bd2d:	19 da                	sbb    edx,ebx
c001bd2f:	89 d7                	mov    edi,edx
c001bd31:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd34:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd37:	09 c7                	or     edi,eax
c001bd39:	0f 84 5e ff ff ff    	je     c001bc9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd3f:	57                   	push   edi
c001bd40:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd44:	50                   	push   eax
c001bd45:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd4c:	53                   	push   ebx
c001bd4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd50:	c1 e0 0b             	shl    eax,0xb
c001bd53:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd57:	c1 e8 0b             	shr    eax,0xb
c001bd5a:	50                   	push   eax
c001bd5b:	e8 5f fc ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd60:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	25 ff 07 00 00       	and    eax,0x7ff
c001bd6b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bd6e:	31 ff                	xor    edi,edi
c001bd70:	56                   	push   esi
c001bd71:	6a 28                	push   0x28
c001bd73:	6a 00                	push   0x0
c001bd75:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bd79:	50                   	push   eax
c001bd7a:	e8 05 49 fe ff       	call   c0000684 <memset>
c001bd7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd82:	25 ff 07 00 00       	and    eax,0x7ff
c001bd87:	89 c6                	mov    esi,eax
c001bd89:	83 c6 21             	add    esi,0x21
c001bd8c:	83 d7 00             	adc    edi,0x0
c001bd8f:	83 c4 10             	add    esp,0x10
c001bd92:	31 c9                	xor    ecx,ecx
c001bd94:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bd9b:	83 f9 28             	cmp    ecx,0x28
c001bd9e:	88 04 24             	mov    BYTE PTR [esp],al
c001bda1:	0f 94 c2             	sete   dl
c001bda4:	88 d0                	mov    al,dl
c001bda6:	ba ff 07 00 00       	mov    edx,0x7ff
c001bdab:	39 f2                	cmp    edx,esi
c001bdad:	ba 00 00 00 00       	mov    edx,0x0
c001bdb2:	19 fa                	sbb    edx,edi
c001bdb4:	0f 92 c2             	setb   dl
c001bdb7:	09 c2                	or     edx,eax
c001bdb9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bdbd:	0f 94 c0             	sete   al
c001bdc0:	08 d0                	or     al,dl
c001bdc2:	75 16                	jne    c001bdda <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bdc4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bdc8:	74 10                	je     c001bdda <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bdca:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bdcd:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bdd1:	41                   	inc    ecx
c001bdd2:	83 c6 01             	add    esi,0x1
c001bdd5:	83 d7 00             	adc    edi,0x0
c001bdd8:	eb ba                	jmp    c001bd94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bdda:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bde1:	83 ec 0c             	sub    esp,0xc
c001bde4:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bde8:	56                   	push   esi
c001bde9:	e8 b2 48 fe ff       	call   c00006a0 <strlen>
c001bdee:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bdf5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bdf9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be01:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be04:	5a                   	pop    edx
c001be05:	25 ff 07 00 00       	and    eax,0x7ff
c001be0a:	59                   	pop    ecx
c001be0b:	01 f8                	add    eax,edi
c001be0d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be13:	83 e0 02             	and    eax,0x2
c001be16:	3c 01                	cmp    al,0x1
c001be18:	19 c0                	sbb    eax,eax
c001be1a:	83 c0 02             	add    eax,0x2
c001be1d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be21:	56                   	push   esi
c001be22:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be26:	50                   	push   eax
c001be27:	e8 14 49 fe ff       	call   c0000740 <strcpy>
c001be2c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	84 c0                	test   al,al
c001be35:	75 21                	jne    c001be58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be37:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be3f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be47:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be4f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be56:	eb 28                	jmp    c001be80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be58:	fe c8                	dec    al
c001be5a:	75 24                	jne    c001be80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be5c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001be64:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be6c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be74:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001be7b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001be80:	8d 74 24 40          	lea    esi,[esp+0x40]
c001be84:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001be8b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001be92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be94:	0f b6 f3             	movzx  esi,bl
c001be97:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001be9e:	31 db                	xor    ebx,ebx
c001bea0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bea6:	89 df                	mov    edi,ebx
c001bea8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001beab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beae:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001beb1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001beb4:	39 c6                	cmp    esi,eax
c001beb6:	19 d7                	sbb    edi,edx
c001beb8:	72 10                	jb     c001beca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001beba:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bec1:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bec8:	eb 0a                	jmp    c001bed4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001beca:	29 f0                	sub    eax,esi
c001becc:	19 da                	sbb    edx,ebx
c001bece:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bed1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bed4:	31 c0                	xor    eax,eax
c001bed6:	eb 05                	jmp    c001bedd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bed8:	b8 04 00 00 00       	mov    eax,0x4
c001bedd:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bee3:	5b                   	pop    ebx
c001bee4:	5e                   	pop    esi
c001bee5:	5f                   	pop    edi
c001bee6:	5d                   	pop    ebp
c001bee7:	c3                   	ret    

c001bee8 <readRoot(unsigned int*, unsigned int*, char)>:
c001bee8:	57                   	push   edi
c001bee9:	56                   	push   esi
c001beea:	81 ec 38 08 00 00    	sub    esp,0x838
c001bef0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bef8:	50                   	push   eax
c001bef9:	8d 44 24 38          	lea    eax,[esp+0x38]
c001befd:	50                   	push   eax
c001befe:	6a 10                	push   0x10
c001bf00:	e8 ba fa ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf05:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf0c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf10:	b9 22 00 00 00       	mov    ecx,0x22
c001bf15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf17:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf22:	89 10                	mov    DWORD PTR [eax],edx
c001bf24:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf2f:	89 10                	mov    DWORD PTR [eax],edx
c001bf31:	81 c4 44 08 00 00    	add    esp,0x844
c001bf37:	b0 01                	mov    al,0x1
c001bf39:	5e                   	pop    esi
c001bf3a:	5f                   	pop    edi
c001bf3b:	c3                   	ret    

c001bf3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf3c:	55                   	push   ebp
c001bf3d:	57                   	push   edi
c001bf3e:	56                   	push   esi
c001bf3f:	53                   	push   ebx
c001bf40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf46:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf4d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf58:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bf5c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf64:	75 03                	jne    c001bf69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf66:	83 c3 02             	add    ebx,0x2
c001bf69:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bf6c:	75 03                	jne    c001bf71 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bf6e:	43                   	inc    ebx
c001bf6f:	eb f8                	jmp    c001bf69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf71:	51                   	push   ecx
c001bf72:	68 00 01 00 00       	push   0x100
c001bf77:	6a 00                	push   0x0
c001bf79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf7d:	50                   	push   eax
c001bf7e:	e8 01 47 fe ff       	call   c0000684 <memset>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	31 d2                	xor    edx,edx
c001bf88:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bf8b:	84 c0                	test   al,al
c001bf8d:	74 21                	je     c001bfb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bf8f:	3c 2f                	cmp    al,0x2f
c001bf91:	75 0b                	jne    c001bf9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bf93:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bf97:	bd 01 00 00 00       	mov    ebp,0x1
c001bf9c:	eb 14                	jmp    c001bfb2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bf9e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfa1:	80 f9 19             	cmp    cl,0x19
c001bfa4:	77 03                	ja     c001bfa9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfa6:	83 e8 20             	sub    eax,0x20
c001bfa9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bfad:	42                   	inc    edx
c001bfae:	eb d8                	jmp    c001bf88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bfb0:	31 ed                	xor    ebp,ebp
c001bfb2:	83 ec 0c             	sub    esp,0xc
c001bfb5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bfbc:	e8 02 da fe ff       	call   c00099c3 <malloc>
c001bfc1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001bfc8:	89 c6                	mov    esi,eax
c001bfca:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001bfd0:	c1 ef 0b             	shr    edi,0xb
c001bfd3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bfda:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bfde:	83 c4 10             	add    esp,0x10
c001bfe1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001bfe6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfea:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001bff1:	74 28                	je     c001c01b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001bff3:	52                   	push   edx
c001bff4:	57                   	push   edi
c001bff5:	50                   	push   eax
c001bff6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bffa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c001:	e8 b9 f9 ff ff       	call   c001b9bf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c00a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c011:	05 00 08 00 00       	add    eax,0x800
c001c016:	83 c4 10             	add    esp,0x10
c001c019:	eb cb                	jmp    c001bfe6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c01b:	83 ec 0c             	sub    esp,0xc
c001c01e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c022:	57                   	push   edi
c001c023:	e8 78 46 fe ff       	call   c00006a0 <strlen>
c001c028:	50                   	push   eax
c001c029:	57                   	push   edi
c001c02a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c031:	56                   	push   esi
c001c032:	e8 46 f9 ff ff       	call   c001b97d <__memmem(unsigned char*, int, unsigned char*, int)>
c001c037:	83 c4 20             	add    esp,0x20
c001c03a:	85 c0                	test   eax,eax
c001c03c:	75 13                	jne    c001c051 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c03e:	83 ec 0c             	sub    esp,0xc
c001c041:	56                   	push   esi
c001c042:	e8 8c d9 fe ff       	call   c00099d3 <free>
c001c047:	83 c4 10             	add    esp,0x10
c001c04a:	31 c0                	xor    eax,eax
c001c04c:	e9 b3 00 00 00       	jmp    c001c104 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c051:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c055:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c059:	c1 e7 08             	shl    edi,0x8
c001c05c:	c1 e2 10             	shl    edx,0x10
c001c05f:	09 d7                	or     edi,edx
c001c061:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c065:	09 d7                	or     edi,edx
c001c067:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c06b:	c1 e2 18             	shl    edx,0x18
c001c06e:	09 d7                	or     edi,edx
c001c070:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c074:	89 d1                	mov    ecx,edx
c001c076:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c07a:	c1 e1 08             	shl    ecx,0x8
c001c07d:	c1 e2 10             	shl    edx,0x10
c001c080:	09 ca                	or     edx,ecx
c001c082:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c086:	09 ca                	or     edx,ecx
c001c088:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c08c:	c1 e1 18             	shl    ecx,0x18
c001c08f:	09 ca                	or     edx,ecx
c001c091:	89 e9                	mov    ecx,ebp
c001c093:	84 c9                	test   cl,cl
c001c095:	74 3c                	je     c001c0d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c097:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c09b:	83 ec 0c             	sub    esp,0xc
c001c09e:	56                   	push   esi
c001c09f:	e8 2f d9 fe ff       	call   c00099d3 <free>
c001c0a4:	83 c4 0c             	add    esp,0xc
c001c0a7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0ae:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0b3:	50                   	push   eax
c001c0b4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c0c6:	52                   	push   edx
c001c0c7:	57                   	push   edi
c001c0c8:	53                   	push   ebx
c001c0c9:	e8 6e fe ff ff       	call   c001bf3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c0ce:	83 c4 20             	add    esp,0x20
c001c0d1:	eb 31                	jmp    c001c104 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c0d3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c0d6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c0dd:	d0 e8                	shr    al,1
c001c0df:	89 3b                	mov    DWORD PTR [ebx],edi
c001c0e1:	83 e0 01             	and    eax,0x1
c001c0e4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c0eb:	83 ec 0c             	sub    esp,0xc
c001c0ee:	89 13                	mov    DWORD PTR [ebx],edx
c001c0f0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c0f7:	89 03                	mov    DWORD PTR [ebx],eax
c001c0f9:	56                   	push   esi
c001c0fa:	e8 d4 d8 fe ff       	call   c00099d3 <free>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	b0 01                	mov    al,0x1
c001c104:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c10a:	5b                   	pop    ebx
c001c10b:	5e                   	pop    esi
c001c10c:	5f                   	pop    edi
c001c10d:	5d                   	pop    ebp
c001c10e:	c3                   	ret    

c001c10f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c10f:	55                   	push   ebp
c001c110:	57                   	push   edi
c001c111:	56                   	push   esi
c001c112:	53                   	push   ebx
c001c113:	83 ec 20             	sub    esp,0x20
c001c116:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c11a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c11e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c122:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c12a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c132:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c137:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c13d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c143:	57                   	push   edi
c001c144:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c148:	50                   	push   eax
c001c149:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c14d:	50                   	push   eax
c001c14e:	e8 95 fd ff ff       	call   c001bee8 <readRoot(unsigned int*, unsigned int*, char)>
c001c153:	5a                   	pop    edx
c001c154:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c158:	e8 43 45 fe ff       	call   c00006a0 <strlen>
c001c15d:	83 c4 10             	add    esp,0x10
c001c160:	83 f8 03             	cmp    eax,0x3
c001c163:	77 17                	ja     c001c17c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c169:	89 03                	mov    DWORD PTR [ebx],eax
c001c16b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c16f:	89 06                	mov    DWORD PTR [esi],eax
c001c171:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c178:	b0 01                	mov    al,0x1
c001c17a:	eb 19                	jmp    c001c195 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c17c:	50                   	push   eax
c001c17d:	55                   	push   ebp
c001c17e:	57                   	push   edi
c001c17f:	56                   	push   esi
c001c180:	53                   	push   ebx
c001c181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c185:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c189:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c18d:	e8 aa fd ff ff       	call   c001bf3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c192:	83 c4 20             	add    esp,0x20
c001c195:	83 c4 1c             	add    esp,0x1c
c001c198:	5b                   	pop    ebx
c001c199:	5e                   	pop    esi
c001c19a:	5f                   	pop    edi
c001c19b:	5d                   	pop    ebp
c001c19c:	c3                   	ret    
c001c19d:	90                   	nop

c001c19e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c19e:	57                   	push   edi
c001c19f:	56                   	push   esi
c001c1a0:	53                   	push   ebx
c001c1a1:	83 ec 10             	sub    esp,0x10
c001c1a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1ac:	85 ff                	test   edi,edi
c001c1ae:	0f 84 8b 00 00 00    	je     c001c23f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1b4:	85 f6                	test   esi,esi
c001c1b6:	0f 84 83 00 00 00    	je     c001c23f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1bc:	b8 03 00 00 00       	mov    eax,0x3
c001c1c1:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c1c6:	75 7c                	jne    c001c244 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c1c8:	83 ec 0c             	sub    esp,0xc
c001c1cb:	6a 1c                	push   0x1c
c001c1cd:	e8 f1 d7 fe ff       	call   c00099c3 <malloc>
c001c1d2:	89 07                	mov    DWORD PTR [edi],eax
c001c1d4:	89 c3                	mov    ebx,eax
c001c1d6:	58                   	pop    eax
c001c1d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1db:	50                   	push   eax
c001c1dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c1df:	50                   	push   eax
c001c1e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1e4:	50                   	push   eax
c001c1e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1e9:	50                   	push   eax
c001c1ea:	56                   	push   esi
c001c1eb:	e8 1f ff ff ff       	call   c001c10f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c1f0:	83 c4 20             	add    esp,0x20
c001c1f3:	84 c0                	test   al,al
c001c1f5:	74 07                	je     c001c1fe <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c1f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c1fc:	74 0b                	je     c001c209 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c1fe:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c202:	b8 01 00 00 00       	mov    eax,0x1
c001c207:	eb 3b                	jmp    c001c244 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c20d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c211:	89 03                	mov    DWORD PTR [ebx],eax
c001c213:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c21a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c21e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c225:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c22c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c22f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c236:	8a 06                	mov    al,BYTE PTR [esi]
c001c238:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c23b:	31 c0                	xor    eax,eax
c001c23d:	eb 05                	jmp    c001c244 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c23f:	b8 04 00 00 00       	mov    eax,0x4
c001c244:	83 c4 10             	add    esp,0x10
c001c247:	5b                   	pop    ebx
c001c248:	5e                   	pop    esi
c001c249:	5f                   	pop    edi
c001c24a:	c3                   	ret    
c001c24b:	90                   	nop

c001c24c <ISO9660::exists(char const*)>:
c001c24c:	83 ec 28             	sub    esp,0x28
c001c24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c253:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c257:	52                   	push   edx
c001c258:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c25b:	52                   	push   edx
c001c25c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c260:	52                   	push   edx
c001c261:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c265:	52                   	push   edx
c001c266:	50                   	push   eax
c001c267:	e8 a3 fe ff ff       	call   c001c10f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c26c:	83 c4 3c             	add    esp,0x3c
c001c26f:	c3                   	ret    

c001c270 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c270:	56                   	push   esi
c001c271:	53                   	push   ebx
c001c272:	83 ec 14             	sub    esp,0x14
c001c275:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c279:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c27d:	85 db                	test   ebx,ebx
c001c27f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c283:	0f 94 c2             	sete   dl
c001c286:	85 f6                	test   esi,esi
c001c288:	0f 94 c0             	sete   al
c001c28b:	08 c2                	or     dl,al
c001c28d:	75 68                	jne    c001c2f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c28f:	85 c9                	test   ecx,ecx
c001c291:	74 64                	je     c001c2f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c293:	83 ec 0c             	sub    esp,0xc
c001c296:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c299:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c29d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2aa:	50                   	push   eax
c001c2ab:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2ae:	50                   	push   eax
c001c2af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2b3:	50                   	push   eax
c001c2b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2b8:	50                   	push   eax
c001c2b9:	51                   	push   ecx
c001c2ba:	e8 50 fe ff ff       	call   c001c10f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2bf:	83 c4 20             	add    esp,0x20
c001c2c2:	ba 01 00 00 00       	mov    edx,0x1
c001c2c7:	84 c0                	test   al,al
c001c2c9:	74 31                	je     c001c2fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2cf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2d6:	89 03                	mov    DWORD PTR [ebx],eax
c001c2d8:	ba 00 00 00 00       	mov    edx,0x0
c001c2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2e1:	85 c0                	test   eax,eax
c001c2e3:	0f 95 06             	setne  BYTE PTR [esi]
c001c2e6:	74 14                	je     c001c2fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2e8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2ee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2f5:	eb 05                	jmp    c001c2fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2f7:	ba 04 00 00 00       	mov    edx,0x4
c001c2fc:	83 c4 14             	add    esp,0x14
c001c2ff:	89 d0                	mov    eax,edx
c001c301:	5b                   	pop    ebx
c001c302:	5e                   	pop    esi
c001c303:	c3                   	ret    

c001c304 <ISO9660::openDir(char const*, void**)>:
c001c304:	57                   	push   edi
c001c305:	56                   	push   esi
c001c306:	53                   	push   ebx
c001c307:	83 ec 10             	sub    esp,0x10
c001c30a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c30e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c312:	85 ff                	test   edi,edi
c001c314:	74 7b                	je     c001c391 <ISO9660::openDir(char const*, void**)+0x8d>
c001c316:	85 f6                	test   esi,esi
c001c318:	74 77                	je     c001c391 <ISO9660::openDir(char const*, void**)+0x8d>
c001c31a:	83 ec 0c             	sub    esp,0xc
c001c31d:	6a 1c                	push   0x1c
c001c31f:	e8 9f d6 fe ff       	call   c00099c3 <malloc>
c001c324:	89 07                	mov    DWORD PTR [edi],eax
c001c326:	89 c3                	mov    ebx,eax
c001c328:	58                   	pop    eax
c001c329:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c32d:	50                   	push   eax
c001c32e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c331:	50                   	push   eax
c001c332:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c336:	50                   	push   eax
c001c337:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c33b:	50                   	push   eax
c001c33c:	56                   	push   esi
c001c33d:	e8 cd fd ff ff       	call   c001c10f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c342:	83 c4 20             	add    esp,0x20
c001c345:	84 c0                	test   al,al
c001c347:	74 07                	je     c001c350 <ISO9660::openDir(char const*, void**)+0x4c>
c001c349:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c34e:	75 0b                	jne    c001c35b <ISO9660::openDir(char const*, void**)+0x57>
c001c350:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c354:	b8 01 00 00 00       	mov    eax,0x1
c001c359:	eb 3b                	jmp    c001c396 <ISO9660::openDir(char const*, void**)+0x92>
c001c35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c35f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c363:	89 03                	mov    DWORD PTR [ebx],eax
c001c365:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c36c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c370:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c377:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c37e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c381:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c388:	8a 06                	mov    al,BYTE PTR [esi]
c001c38a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c38d:	31 c0                	xor    eax,eax
c001c38f:	eb 05                	jmp    c001c396 <ISO9660::openDir(char const*, void**)+0x92>
c001c391:	b8 04 00 00 00       	mov    eax,0x4
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	5b                   	pop    ebx
c001c39a:	5e                   	pop    esi
c001c39b:	5f                   	pop    edi
c001c39c:	c3                   	ret    
c001c39d:	90                   	nop

c001c39e <ISO9660::ISO9660()>:
c001c39e:	83 ec 0c             	sub    esp,0xc
c001c3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a5:	83 ec 0c             	sub    esp,0xc
c001c3a8:	50                   	push   eax
c001c3a9:	e8 90 09 ff ff       	call   c000cd3e <Filesystem::Filesystem()>
c001c3ae:	83 c4 10             	add    esp,0x10
c001c3b1:	ba 30 4b 02 c0       	mov    edx,0xc0024b30
c001c3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ba:	89 10                	mov    DWORD PTR [eax],edx
c001c3bc:	90                   	nop
c001c3bd:	83 c4 0c             	add    esp,0xc
c001c3c0:	c3                   	ret    
c001c3c1:	90                   	nop

c001c3c2 <SoundCard::beginPlayback()>:
c001c3c2:	c7 44 24 04 90 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024b90
c001c3ca:	e9 1a 7f ff ff       	jmp    c00142e9 <Krnl::panic(char const*)>
c001c3cf:	90                   	nop

c001c3d0 <SoundCard::stopPlayback()>:
c001c3d0:	c7 44 24 04 c4 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024bc4
c001c3d8:	e9 0c 7f ff ff       	jmp    c00142e9 <Krnl::panic(char const*)>
c001c3dd:	90                   	nop

c001c3de <SoundCard::SoundCard(char const*)>:
c001c3de:	83 ec 1c             	sub    esp,0x1c
c001c3e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3e5:	83 ec 08             	sub    esp,0x8
c001c3e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3ec:	50                   	push   eax
c001c3ed:	e8 80 1c ff ff       	call   c000e072 <Device::Device(char const*)>
c001c3f2:	83 c4 10             	add    esp,0x10
c001c3f5:	ba d0 4c 02 c0       	mov    edx,0xc0024cd0
c001c3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3fe:	89 10                	mov    DWORD PTR [eax],edx
c001c400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c404:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c40b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c40f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c41d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c42b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c439:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c443:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c44b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c450:	7f 19                	jg     c001c46b <SoundCard::SoundCard(char const*)+0x8d>
c001c452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c45a:	83 c2 54             	add    edx,0x54
c001c45d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c465:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c469:	eb e0                	jmp    c001c44b <SoundCard::SoundCard(char const*)+0x6d>
c001c46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46f:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c476:	90                   	nop
c001c477:	83 c4 1c             	add    esp,0x1c
c001c47a:	c3                   	ret    
c001c47b:	90                   	nop

c001c47c <SoundCard::~SoundCard()>:
c001c47c:	83 ec 0c             	sub    esp,0xc
c001c47f:	ba d0 4c 02 c0       	mov    edx,0xc0024cd0
c001c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c488:	89 10                	mov    DWORD PTR [eax],edx
c001c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	50                   	push   eax
c001c492:	e8 a5 18 ff ff       	call   c000dd3c <Device::~Device()>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	90                   	nop
c001c49b:	83 c4 0c             	add    esp,0xc
c001c49e:	c3                   	ret    
c001c49f:	90                   	nop

c001c4a0 <SoundCard::~SoundCard()>:
c001c4a0:	83 ec 0c             	sub    esp,0xc
c001c4a3:	83 ec 0c             	sub    esp,0xc
c001c4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4aa:	e8 cd ff ff ff       	call   c001c47c <SoundCard::~SoundCard()>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	83 ec 08             	sub    esp,0x8
c001c4b5:	68 e8 01 00 00       	push   0x1e8
c001c4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4be:	e8 84 04 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	83 c4 0c             	add    esp,0xc
c001c4c9:	c3                   	ret    

c001c4ca <SoundCard::configureRates(int, int, int)>:
c001c4ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4ce:	31 c0                	xor    eax,eax
c001c4d0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c4d7:	75 20                	jne    c001c4f9 <SoundCard::configureRates(int, int, int)+0x2f>
c001c4d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4dd:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c4e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4e7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f1:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c4f7:	b0 01                	mov    al,0x1
c001c4f9:	c3                   	ret    

c001c4fa <SoundCard::getSamples16(int, short*)>:
c001c4fa:	55                   	push   ebp
c001c4fb:	57                   	push   edi
c001c4fc:	31 ff                	xor    edi,edi
c001c4fe:	56                   	push   esi
c001c4ff:	53                   	push   ebx
c001c500:	83 ec 28             	sub    esp,0x28
c001c503:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c507:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c50b:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c50f:	68 f7 4b 02 c0       	push   0xc0024bf7
c001c514:	e8 0f 05 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c519:	83 c4 0c             	add    esp,0xc
c001c51c:	53                   	push   ebx
c001c51d:	6a 00                	push   0x0
c001c51f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c523:	e8 5c 41 fe ff       	call   c0000684 <memset>
c001c528:	58                   	pop    eax
c001c529:	5a                   	pop    edx
c001c52a:	53                   	push   ebx
c001c52b:	31 db                	xor    ebx,ebx
c001c52d:	68 16 4c 02 c0       	push   0xc0024c16
c001c532:	e8 f1 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c537:	83 c4 10             	add    esp,0x10
c001c53a:	52                   	push   edx
c001c53b:	52                   	push   edx
c001c53c:	53                   	push   ebx
c001c53d:	68 29 4c 02 c0       	push   0xc0024c29
c001c542:	e8 e1 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c547:	59                   	pop    ecx
c001c548:	58                   	pop    eax
c001c549:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c550:	68 41 4c 02 c0       	push   0xc0024c41
c001c555:	e8 ce 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c55a:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	85 c0                	test   eax,eax
c001c566:	74 44                	je     c001c5ac <SoundCard::getSamples16(int, short*)+0xb2>
c001c568:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c56c:	75 3e                	jne    c001c5ac <SoundCard::getSamples16(int, short*)+0xb2>
c001c56e:	50                   	push   eax
c001c56f:	50                   	push   eax
c001c570:	53                   	push   ebx
c001c571:	68 53 4c 02 c0       	push   0xc0024c53
c001c576:	e8 ad 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c57b:	56                   	push   esi
c001c57c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c580:	55                   	push   ebp
c001c581:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c588:	e8 6f 03 00 00       	call   c001c8fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c58d:	83 c4 18             	add    esp,0x18
c001c590:	50                   	push   eax
c001c591:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c595:	68 6a 4c 02 c0       	push   0xc0024c6a
c001c59a:	e8 89 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c59f:	83 c4 10             	add    esp,0x10
c001c5a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5a6:	39 c7                	cmp    edi,eax
c001c5a8:	7d 02                	jge    c001c5ac <SoundCard::getSamples16(int, short*)+0xb2>
c001c5aa:	89 c7                	mov    edi,eax
c001c5ac:	43                   	inc    ebx
c001c5ad:	83 fb 20             	cmp    ebx,0x20
c001c5b0:	75 88                	jne    c001c53a <SoundCard::getSamples16(int, short*)+0x40>
c001c5b2:	83 c4 1c             	add    esp,0x1c
c001c5b5:	89 f8                	mov    eax,edi
c001c5b7:	5b                   	pop    ebx
c001c5b8:	5e                   	pop    esi
c001c5b9:	5f                   	pop    edi
c001c5ba:	5d                   	pop    ebp
c001c5bb:	c3                   	ret    

c001c5bc <SoundCard::getSamples32(int, int*)>:
c001c5bc:	55                   	push   ebp
c001c5bd:	57                   	push   edi
c001c5be:	31 ff                	xor    edi,edi
c001c5c0:	56                   	push   esi
c001c5c1:	31 f6                	xor    esi,esi
c001c5c3:	53                   	push   ebx
c001c5c4:	83 ec 10             	sub    esp,0x10
c001c5c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c5cf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c5d3:	c1 e0 02             	shl    eax,0x2
c001c5d6:	50                   	push   eax
c001c5d7:	6a 00                	push   0x0
c001c5d9:	55                   	push   ebp
c001c5da:	e8 a5 40 fe ff       	call   c0000684 <memset>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c5e9:	85 c0                	test   eax,eax
c001c5eb:	74 1b                	je     c001c608 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5ed:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5f1:	75 15                	jne    c001c608 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5f3:	53                   	push   ebx
c001c5f4:	55                   	push   ebp
c001c5f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5f9:	50                   	push   eax
c001c5fa:	e8 f9 03 00 00       	call   c001c9f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	39 c6                	cmp    esi,eax
c001c604:	7d 02                	jge    c001c608 <SoundCard::getSamples32(int, int*)+0x4c>
c001c606:	89 c6                	mov    esi,eax
c001c608:	47                   	inc    edi
c001c609:	83 ff 20             	cmp    edi,0x20
c001c60c:	75 d4                	jne    c001c5e2 <SoundCard::getSamples32(int, int*)+0x26>
c001c60e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c614:	85 f6                	test   esi,esi
c001c616:	75 0f                	jne    c001c627 <SoundCard::getSamples32(int, int*)+0x6b>
c001c618:	84 c0                	test   al,al
c001c61a:	74 1b                	je     c001c637 <SoundCard::getSamples32(int, int*)+0x7b>
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c621:	53                   	push   ebx
c001c622:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c625:	eb 0d                	jmp    c001c634 <SoundCard::getSamples32(int, int*)+0x78>
c001c627:	84 c0                	test   al,al
c001c629:	75 0c                	jne    c001c637 <SoundCard::getSamples32(int, int*)+0x7b>
c001c62b:	83 ec 0c             	sub    esp,0xc
c001c62e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c630:	53                   	push   ebx
c001c631:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	83 c4 0c             	add    esp,0xc
c001c63a:	89 f0                	mov    eax,esi
c001c63c:	5b                   	pop    ebx
c001c63d:	5e                   	pop    esi
c001c63e:	5f                   	pop    edi
c001c63f:	5d                   	pop    ebp
c001c640:	c3                   	ret    
c001c641:	90                   	nop

c001c642 <SoundCard::addChannel(SoundPort*)>:
c001c642:	56                   	push   esi
c001c643:	53                   	push   ebx
c001c644:	53                   	push   ebx
c001c645:	31 db                	xor    ebx,ebx
c001c647:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c64b:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c653:	74 27                	je     c001c67c <SoundCard::addChannel(SoundPort*)+0x3a>
c001c655:	43                   	inc    ebx
c001c656:	83 fb 20             	cmp    ebx,0x20
c001c659:	75 f0                	jne    c001c64b <SoundCard::addChannel(SoundPort*)+0x9>
c001c65b:	83 ec 0c             	sub    esp,0xc
c001c65e:	83 cb ff             	or     ebx,0xffffffff
c001c661:	68 8f 4c 02 c0       	push   0xc0024c8f
c001c666:	e8 bd 03 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c66b:	c7 04 24 88 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c88
c001c672:	e8 72 7c ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	eb 1b                	jmp    c001c697 <SoundCard::addChannel(SoundPort*)+0x55>
c001c67c:	51                   	push   ecx
c001c67d:	51                   	push   ecx
c001c67e:	53                   	push   ebx
c001c67f:	68 a7 4c 02 c0       	push   0xc0024ca7
c001c684:	e8 9f 03 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c68d:	83 c4 10             	add    esp,0x10
c001c690:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c697:	89 d8                	mov    eax,ebx
c001c699:	5a                   	pop    edx
c001c69a:	5b                   	pop    ebx
c001c69b:	5e                   	pop    esi
c001c69c:	c3                   	ret    
c001c69d:	90                   	nop

c001c69e <SoundCard::removeChannel(int)>:
c001c69e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c6a6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c6b1:	c3                   	ret    
c001c6b2:	66 90                	xchg   ax,ax

c001c6b4 <SoundPort::SoundPort(int, int, int, int)>:
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6d2:	89 10                	mov    DWORD PTR [eax],edx
c001c6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c6dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6ea:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c6ef:	75 13                	jne    c001c704 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f7:	05 a0 0f 00 00       	add    eax,0xfa0
c001c6fc:	01 c0                	add    eax,eax
c001c6fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c702:	66 90                	xchg   ax,ax
c001c704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c708:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c70c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c713:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c721:	c1 e0 02             	shl    eax,0x2
c001c724:	83 ec 0c             	sub    esp,0xc
c001c727:	50                   	push   eax
c001c728:	e8 96 d2 fe ff       	call   c00099c3 <malloc>
c001c72d:	83 c4 10             	add    esp,0x10
c001c730:	89 c2                	mov    edx,eax
c001c732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c736:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c739:	90                   	nop
c001c73a:	83 c4 0c             	add    esp,0xc
c001c73d:	c3                   	ret    
c001c73e:	66 90                	xchg   ax,ax

c001c740 <SoundPort::~SoundPort()>:
c001c740:	83 ec 0c             	sub    esp,0xc
c001c743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c747:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c74a:	85 c0                	test   eax,eax
c001c74c:	74 1e                	je     c001c76c <SoundPort::~SoundPort()+0x2c>
c001c74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c752:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c755:	83 ec 0c             	sub    esp,0xc
c001c758:	50                   	push   eax
c001c759:	e8 75 d2 fe ff       	call   c00099d3 <free>
c001c75e:	83 c4 10             	add    esp,0x10
c001c761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c765:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c76c:	90                   	nop
c001c76d:	83 c4 0c             	add    esp,0xc
c001c770:	c3                   	ret    
c001c771:	90                   	nop
c001c772:	66 90                	xchg   ax,ax

c001c774 <SoundPort::unpause()>:
c001c774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c778:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c77c:	c3                   	ret    
c001c77d:	90                   	nop
c001c77e:	66 90                	xchg   ax,ax

c001c780 <SoundPort::pause()>:
c001c780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c784:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c788:	c3                   	ret    
c001c789:	90                   	nop
c001c78a:	66 90                	xchg   ax,ax

c001c78c <SoundPort::getBufferUsed()>:
c001c78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c790:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c793:	c3                   	ret    

c001c794 <SoundPort::getBufferSize()>:
c001c794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c798:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c79b:	c3                   	ret    

c001c79c <SoundPort::buffer16(short*, int)>:
c001c79c:	55                   	push   ebp
c001c79d:	57                   	push   edi
c001c79e:	56                   	push   esi
c001c79f:	53                   	push   ebx
c001c7a0:	83 ec 1c             	sub    esp,0x1c
c001c7a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c7ab:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c7ae:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c7b1:	0f 84 85 00 00 00    	je     c001c83c <SoundPort::buffer16(short*, int)+0xa0>
c001c7b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c7bb:	85 c9                	test   ecx,ecx
c001c7bd:	7e 7d                	jle    c001c83c <SoundPort::buffer16(short*, int)+0xa0>
c001c7bf:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c7c3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c7c6:	c1 e1 0f             	shl    ecx,0xf
c001c7c9:	8d 70 01             	lea    esi,[eax+0x1]
c001c7cc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c7cf:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c7d2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7d5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7d8:	74 6e                	je     c001c848 <SoundPort::buffer16(short*, int)+0xac>
c001c7da:	31 f6                	xor    esi,esi
c001c7dc:	eb 22                	jmp    c001c800 <SoundPort::buffer16(short*, int)+0x64>
c001c7de:	66 90                	xchg   ax,ax
c001c7e0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c7e5:	8d 79 01             	lea    edi,[ecx+0x1]
c001c7e8:	c1 e3 0f             	shl    ebx,0xf
c001c7eb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c7ee:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c7f1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c7f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7fa:	74 1c                	je     c001c818 <SoundPort::buffer16(short*, int)+0x7c>
c001c7fc:	89 c6                	mov    esi,eax
c001c7fe:	66 90                	xchg   ax,ax
c001c800:	8d 46 01             	lea    eax,[esi+0x1]
c001c803:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c807:	75 d7                	jne    c001c7e0 <SoundPort::buffer16(short*, int)+0x44>
c001c809:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c80d:	83 c4 1c             	add    esp,0x1c
c001c810:	5b                   	pop    ebx
c001c811:	5e                   	pop    esi
c001c812:	5f                   	pop    edi
c001c813:	5d                   	pop    ebp
c001c814:	c3                   	ret    
c001c815:	8d 76 00             	lea    esi,[esi+0x0]
c001c818:	8d 46 02             	lea    eax,[esi+0x2]
c001c81b:	90                   	nop
c001c81c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	68 fc 4c 02 c0       	push   0xc0024cfc
c001c828:	e8 fb 01 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c834:	83 c4 1c             	add    esp,0x1c
c001c837:	5b                   	pop    ebx
c001c838:	5e                   	pop    esi
c001c839:	5f                   	pop    edi
c001c83a:	5d                   	pop    ebp
c001c83b:	c3                   	ret    
c001c83c:	83 c4 1c             	add    esp,0x1c
c001c83f:	31 c0                	xor    eax,eax
c001c841:	5b                   	pop    ebx
c001c842:	5e                   	pop    esi
c001c843:	5f                   	pop    edi
c001c844:	5d                   	pop    ebp
c001c845:	c3                   	ret    
c001c846:	66 90                	xchg   ax,ax
c001c848:	b8 01 00 00 00       	mov    eax,0x1
c001c84d:	eb cd                	jmp    c001c81c <SoundPort::buffer16(short*, int)+0x80>
c001c84f:	90                   	nop

c001c850 <SoundPort::buffer32(int*, int)>:
c001c850:	55                   	push   ebp
c001c851:	57                   	push   edi
c001c852:	56                   	push   esi
c001c853:	53                   	push   ebx
c001c854:	83 ec 1c             	sub    esp,0x1c
c001c857:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c85b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c85f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c862:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c866:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c86a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c86d:	74 79                	je     c001c8e8 <SoundPort::buffer32(int*, int)+0x98>
c001c86f:	85 c0                	test   eax,eax
c001c871:	7e 75                	jle    c001c8e8 <SoundPort::buffer32(int*, int)+0x98>
c001c873:	8d 71 01             	lea    esi,[ecx+0x1]
c001c876:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c879:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c87c:	8b 37                	mov    esi,DWORD PTR [edi]
c001c87e:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c881:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c884:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c887:	74 6b                	je     c001c8f4 <SoundPort::buffer32(int*, int)+0xa4>
c001c889:	31 f6                	xor    esi,esi
c001c88b:	eb 1f                	jmp    c001c8ac <SoundPort::buffer32(int*, int)+0x5c>
c001c88d:	8d 76 00             	lea    esi,[esi+0x0]
c001c890:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c893:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c896:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c899:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c89c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c8a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8a6:	74 1c                	je     c001c8c4 <SoundPort::buffer32(int*, int)+0x74>
c001c8a8:	89 de                	mov    esi,ebx
c001c8aa:	66 90                	xchg   ax,ax
c001c8ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c8af:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c8b3:	75 db                	jne    c001c890 <SoundPort::buffer32(int*, int)+0x40>
c001c8b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8b9:	83 c4 1c             	add    esp,0x1c
c001c8bc:	5b                   	pop    ebx
c001c8bd:	5e                   	pop    esi
c001c8be:	5f                   	pop    edi
c001c8bf:	5d                   	pop    ebp
c001c8c0:	c3                   	ret    
c001c8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c4:	8d 46 02             	lea    eax,[esi+0x2]
c001c8c7:	90                   	nop
c001c8c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	68 17 4d 02 c0       	push   0xc0024d17
c001c8d4:	e8 4f 01 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8e0:	83 c4 1c             	add    esp,0x1c
c001c8e3:	5b                   	pop    ebx
c001c8e4:	5e                   	pop    esi
c001c8e5:	5f                   	pop    edi
c001c8e6:	5d                   	pop    ebp
c001c8e7:	c3                   	ret    
c001c8e8:	83 c4 1c             	add    esp,0x1c
c001c8eb:	31 c0                	xor    eax,eax
c001c8ed:	5b                   	pop    ebx
c001c8ee:	5e                   	pop    esi
c001c8ef:	5f                   	pop    edi
c001c8f0:	5d                   	pop    ebp
c001c8f1:	c3                   	ret    
c001c8f2:	66 90                	xchg   ax,ax
c001c8f4:	b8 01 00 00 00       	mov    eax,0x1
c001c8f9:	eb cd                	jmp    c001c8c8 <SoundPort::buffer32(int*, int)+0x78>
c001c8fb:	90                   	nop

c001c8fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c8fc:	57                   	push   edi
c001c8fd:	56                   	push   esi
c001c8fe:	53                   	push   ebx
c001c8ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c903:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c907:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c90d:	39 03                	cmp    DWORD PTR [ebx],eax
c001c90f:	74 13                	je     c001c924 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	68 6c 4d 02 c0       	push   0xc0024d6c
c001c919:	e8 cb 79 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001c91e:	83 c4 10             	add    esp,0x10
c001c921:	8d 76 00             	lea    esi,[esi+0x0]
c001c924:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c92a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c92d:	74 11                	je     c001c940 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c92f:	83 ec 0c             	sub    esp,0xc
c001c932:	68 32 4d 02 c0       	push   0xc0024d32
c001c937:	e8 ad 79 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	90                   	nop
c001c940:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c946:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c949:	74 11                	je     c001c95c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	68 32 4d 02 c0       	push   0xc0024d32
c001c953:	e8 91 79 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	90                   	nop
c001c95c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c95f:	89 c6                	mov    esi,eax
c001c961:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c965:	7e 05                	jle    c001c96c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c967:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c96b:	90                   	nop
c001c96c:	85 f6                	test   esi,esi
c001c96e:	7e 30                	jle    c001c9a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c970:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c974:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c977:	31 c9                	xor    ecx,ecx
c001c979:	01 d7                	add    edi,edx
c001c97b:	90                   	nop
c001c97c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c97f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c982:	85 c0                	test   eax,eax
c001c984:	79 06                	jns    c001c98c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c986:	05 ff 7f 00 00       	add    eax,0x7fff
c001c98b:	90                   	nop
c001c98c:	c1 f8 0f             	sar    eax,0xf
c001c98f:	83 c1 04             	add    ecx,0x4
c001c992:	66 01 02             	add    WORD PTR [edx],ax
c001c995:	83 c2 02             	add    edx,0x2
c001c998:	39 d7                	cmp    edi,edx
c001c99a:	75 e0                	jne    c001c97c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c99c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c99f:	90                   	nop
c001c9a0:	56                   	push   esi
c001c9a1:	89 c2                	mov    edx,eax
c001c9a3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c9aa:	29 f2                	sub    edx,esi
c001c9ac:	52                   	push   edx
c001c9ad:	50                   	push   eax
c001c9ae:	68 8c 4d 02 c0       	push   0xc0024d8c
c001c9b3:	e8 70 00 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c9b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9bb:	50                   	push   eax
c001c9bc:	01 f8                	add    eax,edi
c001c9be:	50                   	push   eax
c001c9bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9c2:	29 f0                	sub    eax,esi
c001c9c4:	c1 e0 02             	shl    eax,0x2
c001c9c7:	50                   	push   eax
c001c9c8:	68 bc 4d 02 c0       	push   0xc0024dbc
c001c9cd:	e8 56 00 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c9d2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c9d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9d8:	83 c4 1c             	add    esp,0x1c
c001c9db:	01 d7                	add    edi,edx
c001c9dd:	29 f0                	sub    eax,esi
c001c9df:	c1 e0 02             	shl    eax,0x2
c001c9e2:	50                   	push   eax
c001c9e3:	57                   	push   edi
c001c9e4:	52                   	push   edx
c001c9e5:	e8 d2 3b fe ff       	call   c00005bc <memmove>
c001c9ea:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c9ed:	83 c4 10             	add    esp,0x10
c001c9f0:	89 f0                	mov    eax,esi
c001c9f2:	5b                   	pop    ebx
c001c9f3:	5e                   	pop    esi
c001c9f4:	5f                   	pop    edi
c001c9f5:	c3                   	ret    
c001c9f6:	66 90                	xchg   ax,ax

c001c9f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c9f8:	57                   	push   edi
c001c9f9:	56                   	push   esi
c001c9fa:	53                   	push   ebx
c001c9fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca07:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ca0d:	39 06                	cmp    DWORD PTR [esi],eax
c001ca0f:	74 13                	je     c001ca24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ca11:	83 ec 0c             	sub    esp,0xc
c001ca14:	68 e0 4d 02 c0       	push   0xc0024de0
c001ca19:	e8 cb 78 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001ca1e:	83 c4 10             	add    esp,0x10
c001ca21:	8d 76 00             	lea    esi,[esi+0x0]
c001ca24:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ca2a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ca2d:	74 11                	je     c001ca40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	68 4e 4d 02 c0       	push   0xc0024d4e
c001ca37:	e8 ad 78 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001ca3c:	83 c4 10             	add    esp,0x10
c001ca3f:	90                   	nop
c001ca40:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca46:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca49:	74 11                	je     c001ca5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca4b:	83 ec 0c             	sub    esp,0xc
c001ca4e:	68 4e 4d 02 c0       	push   0xc0024d4e
c001ca53:	e8 91 78 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001ca58:	83 c4 10             	add    esp,0x10
c001ca5b:	90                   	nop
c001ca5c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ca5f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ca63:	7e 07                	jle    c001ca6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ca65:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ca69:	8d 76 00             	lea    esi,[esi+0x0]
c001ca6c:	85 ff                	test   edi,edi
c001ca6e:	7e 1c                	jle    c001ca8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ca70:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ca77:	31 c0                	xor    eax,eax
c001ca79:	8d 76 00             	lea    esi,[esi+0x0]
c001ca7c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca7f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ca82:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ca85:	83 c0 04             	add    eax,0x4
c001ca88:	39 c1                	cmp    ecx,eax
c001ca8a:	75 f0                	jne    c001ca7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ca8c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca8f:	50                   	push   eax
c001ca90:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca93:	29 f8                	sub    eax,edi
c001ca95:	c1 e0 02             	shl    eax,0x2
c001ca98:	50                   	push   eax
c001ca99:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ca9c:	50                   	push   eax
c001ca9d:	52                   	push   edx
c001ca9e:	e8 19 3b fe ff       	call   c00005bc <memmove>
c001caa3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001caa6:	83 c4 10             	add    esp,0x10
c001caa9:	89 f8                	mov    eax,edi
c001caab:	5b                   	pop    ebx
c001caac:	5e                   	pop    esi
c001caad:	5f                   	pop    edi
c001caae:	c3                   	ret    
c001caaf:	90                   	nop

c001cab0 <PCI::open(int, int, void*)>:
c001cab0:	83 ec 18             	sub    esp,0x18
c001cab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cabb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cac1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cac3:	50                   	push   eax
c001cac4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cac7:	31 c0                	xor    eax,eax
c001cac9:	83 c4 1c             	add    esp,0x1c
c001cacc:	c3                   	ret    
c001cacd:	90                   	nop

c001cace <PCI::close(int, int, void*)>:
c001cace:	31 c0                	xor    eax,eax
c001cad0:	c3                   	ret    
c001cad1:	90                   	nop

c001cad2 <PCI::PCI()>:
c001cad2:	83 ec 0c             	sub    esp,0xc
c001cad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad9:	83 ec 08             	sub    esp,0x8
c001cadc:	68 ff 4d 02 c0       	push   0xc0024dff
c001cae1:	50                   	push   eax
c001cae2:	e8 ed 0b ff ff       	call   c000d6d4 <Bus::Bus(char const*)>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	ba e8 4e 02 c0       	mov    edx,0xc0024ee8
c001caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf3:	89 10                	mov    DWORD PTR [eax],edx
c001caf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb07:	a3 80 82 02 c0       	mov    ds:0xc0028280,eax
c001cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb16:	0f b6 d0             	movzx  edx,al
c001cb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb2e:	0f b6 d0             	movzx  edx,al
c001cb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb35:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb44:	8d 50 01             	lea    edx,[eax+0x1]
c001cb47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb51:	0f b6 d0             	movzx  edx,al
c001cb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cb5c:	83 c9 c0             	or     ecx,0xffffffc0
c001cb5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cb63:	90                   	nop
c001cb64:	83 c4 0c             	add    esp,0xc
c001cb67:	c3                   	ret    

c001cb68 <PCI::readBAR8(unsigned int, int)>:
c001cb68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb70:	f6 c2 01             	test   dl,0x1
c001cb73:	74 07                	je     c001cb7c <PCI::readBAR8(unsigned int, int)+0x14>
c001cb75:	83 e2 fc             	and    edx,0xfffffffc
c001cb78:	01 c2                	add    edx,eax
c001cb7a:	ec                   	in     al,dx
c001cb7b:	c3                   	ret    
c001cb7c:	83 e2 f0             	and    edx,0xfffffff0
c001cb7f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cb82:	c3                   	ret    
c001cb83:	90                   	nop

c001cb84 <PCI::readBAR16(unsigned int, int)>:
c001cb84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb8c:	f6 c2 01             	test   dl,0x1
c001cb8f:	74 08                	je     c001cb99 <PCI::readBAR16(unsigned int, int)+0x15>
c001cb91:	83 e2 fc             	and    edx,0xfffffffc
c001cb94:	01 c2                	add    edx,eax
c001cb96:	66 ed                	in     ax,dx
c001cb98:	c3                   	ret    
c001cb99:	83 e2 f0             	and    edx,0xfffffff0
c001cb9c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cba0:	c3                   	ret    
c001cba1:	90                   	nop

c001cba2 <PCI::readBAR32(unsigned int, int)>:
c001cba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbaa:	f6 c2 01             	test   dl,0x1
c001cbad:	74 07                	je     c001cbb6 <PCI::readBAR32(unsigned int, int)+0x14>
c001cbaf:	83 e2 fc             	and    edx,0xfffffffc
c001cbb2:	01 c2                	add    edx,eax
c001cbb4:	ed                   	in     eax,dx
c001cbb5:	c3                   	ret    
c001cbb6:	83 e2 f0             	and    edx,0xfffffff0
c001cbb9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cbbc:	c3                   	ret    
c001cbbd:	90                   	nop

c001cbbe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cbbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbca:	f6 c2 01             	test   dl,0x1
c001cbcd:	74 07                	je     c001cbd6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cbcf:	83 e2 fc             	and    edx,0xfffffffc
c001cbd2:	01 ca                	add    edx,ecx
c001cbd4:	ee                   	out    dx,al
c001cbd5:	c3                   	ret    
c001cbd6:	83 e2 f0             	and    edx,0xfffffff0
c001cbd9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cbdc:	c3                   	ret    
c001cbdd:	90                   	nop

c001cbde <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cbde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbe6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbea:	f6 c2 01             	test   dl,0x1
c001cbed:	74 08                	je     c001cbf7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cbef:	83 e2 fc             	and    edx,0xfffffffc
c001cbf2:	01 ca                	add    edx,ecx
c001cbf4:	66 ef                	out    dx,ax
c001cbf6:	c3                   	ret    
c001cbf7:	83 e2 f0             	and    edx,0xfffffff0
c001cbfa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cbfe:	c3                   	ret    
c001cbff:	90                   	nop

c001cc00 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc0c:	f6 c2 01             	test   dl,0x1
c001cc0f:	74 07                	je     c001cc18 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cc11:	83 e2 fc             	and    edx,0xfffffffc
c001cc14:	01 ca                	add    edx,ecx
c001cc16:	ef                   	out    dx,eax
c001cc17:	c3                   	ret    
c001cc18:	83 e2 f0             	and    edx,0xfffffff0
c001cc1b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cc1e:	c3                   	ret    
c001cc1f:	90                   	nop

c001cc20 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc20:	55                   	push   ebp
c001cc21:	57                   	push   edi
c001cc22:	56                   	push   esi
c001cc23:	53                   	push   ebx
c001cc24:	83 ec 0c             	sub    esp,0xc
c001cc27:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc2b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cc2f:	89 f0                	mov    eax,esi
c001cc31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc35:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc39:	3c 07                	cmp    al,0x7
c001cc3b:	76 10                	jbe    c001cc4d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc3d:	83 ec 0c             	sub    esp,0xc
c001cc40:	68 07 4e 02 c0       	push   0xc0024e07
c001cc45:	e8 9f 76 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001cc4a:	83 c4 10             	add    esp,0x10
c001cc4d:	80 fb 0f             	cmp    bl,0xf
c001cc50:	76 10                	jbe    c001cc62 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	68 37 4e 02 c0       	push   0xc0024e37
c001cc5a:	e8 8a 76 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001cc5f:	83 c4 10             	add    esp,0x10
c001cc62:	8d 04 36             	lea    eax,[esi+esi*1]
c001cc65:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc6a:	83 c8 f0             	or     eax,0xfffffff0
c001cc6d:	ee                   	out    dx,al
c001cc6e:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cc73:	89 e8                	mov    eax,ebp
c001cc75:	ee                   	out    dx,al
c001cc76:	83 c4 0c             	add    esp,0xc
c001cc79:	89 d8                	mov    eax,ebx
c001cc7b:	66 81 e7 fc 00       	and    di,0xfc
c001cc80:	5b                   	pop    ebx
c001cc81:	c1 e0 08             	shl    eax,0x8
c001cc84:	5e                   	pop    esi
c001cc85:	09 f8                	or     eax,edi
c001cc87:	5f                   	pop    edi
c001cc88:	66 0d 00 c0          	or     ax,0xc000
c001cc8c:	5d                   	pop    ebp
c001cc8d:	c3                   	ret    

c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc8e:	57                   	push   edi
c001cc8f:	56                   	push   esi
c001cc90:	53                   	push   ebx
c001cc91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc99:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cc9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cca3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cca7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccab:	83 ff 01             	cmp    edi,0x1
c001ccae:	75 3e                	jne    c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ccb0:	89 de                	mov    esi,ebx
c001ccb2:	0f b6 c0             	movzx  eax,al
c001ccb5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ccbb:	c1 e0 10             	shl    eax,0x10
c001ccbe:	0f b6 c9             	movzx  ecx,cl
c001ccc1:	09 f0                	or     eax,esi
c001ccc3:	c1 e1 08             	shl    ecx,0x8
c001ccc6:	0f b6 d2             	movzx  edx,dl
c001ccc9:	09 c8                	or     eax,ecx
c001cccb:	c1 e2 0b             	shl    edx,0xb
c001ccce:	09 d0                	or     eax,edx
c001ccd0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccd5:	0d 00 00 00 80       	or     eax,0x80000000
c001ccda:	ef                   	out    dx,eax
c001ccdb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cce0:	ed                   	in     eax,dx
c001cce1:	83 e3 02             	and    ebx,0x2
c001cce4:	0f b6 cb             	movzx  ecx,bl
c001cce7:	c1 e1 03             	shl    ecx,0x3
c001ccea:	d3 e8                	shr    eax,cl
c001ccec:	eb 43                	jmp    c001cd31 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ccee:	83 ff 02             	cmp    edi,0x2
c001ccf1:	75 2c                	jne    c001cd1f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001ccf3:	83 ec 0c             	sub    esp,0xc
c001ccf6:	0f b6 c9             	movzx  ecx,cl
c001ccf9:	0f b6 d2             	movzx  edx,dl
c001ccfc:	0f b6 fb             	movzx  edi,bl
c001ccff:	0f b6 c0             	movzx  eax,al
c001cd02:	57                   	push   edi
c001cd03:	51                   	push   ecx
c001cd04:	52                   	push   edx
c001cd05:	50                   	push   eax
c001cd06:	56                   	push   esi
c001cd07:	e8 14 ff ff ff       	call   c001cc20 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd0c:	89 c2                	mov    edx,eax
c001cd0e:	ed                   	in     eax,dx
c001cd0f:	83 e3 02             	and    ebx,0x2
c001cd12:	83 c4 20             	add    esp,0x20
c001cd15:	0f b6 cb             	movzx  ecx,bl
c001cd18:	c1 e1 03             	shl    ecx,0x3
c001cd1b:	d3 e8                	shr    eax,cl
c001cd1d:	eb 12                	jmp    c001cd31 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	68 67 4e 02 c0       	push   0xc0024e67
c001cd27:	e8 bd 75 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	31 c0                	xor    eax,eax
c001cd31:	5b                   	pop    ebx
c001cd32:	5e                   	pop    esi
c001cd33:	5f                   	pop    edi
c001cd34:	c3                   	ret    
c001cd35:	90                   	nop

c001cd36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cd36:	83 ec 18             	sub    esp,0x18
c001cd39:	6a 00                	push   0x0
c001cd3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd40:	50                   	push   eax
c001cd41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd46:	50                   	push   eax
c001cd47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd4c:	50                   	push   eax
c001cd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd51:	e8 38 ff ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd56:	83 c4 2c             	add    esp,0x2c
c001cd59:	c3                   	ret    

c001cd5a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cd5a:	83 ec 18             	sub    esp,0x18
c001cd5d:	6a 0e                	push   0xe
c001cd5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd64:	50                   	push   eax
c001cd65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd6a:	50                   	push   eax
c001cd6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd70:	50                   	push   eax
c001cd71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd75:	e8 14 ff ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd7a:	83 c4 2c             	add    esp,0x2c
c001cd7d:	0f b6 c0             	movzx  eax,al
c001cd80:	c3                   	ret    
c001cd81:	90                   	nop

c001cd82 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cd82:	55                   	push   ebp
c001cd83:	57                   	push   edi
c001cd84:	56                   	push   esi
c001cd85:	53                   	push   ebx
c001cd86:	83 ec 18             	sub    esp,0x18
c001cd89:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cd8e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cd93:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cd98:	6a 0a                	push   0xa
c001cd9a:	56                   	push   esi
c001cd9b:	55                   	push   ebp
c001cd9c:	57                   	push   edi
c001cd9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cda1:	e8 e8 fe ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda6:	83 c4 14             	add    esp,0x14
c001cda9:	89 c3                	mov    ebx,eax
c001cdab:	6a 0a                	push   0xa
c001cdad:	0f b6 db             	movzx  ebx,bl
c001cdb0:	56                   	push   esi
c001cdb1:	55                   	push   ebp
c001cdb2:	57                   	push   edi
c001cdb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdb7:	e8 d2 fe ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdbc:	83 c4 2c             	add    esp,0x2c
c001cdbf:	25 00 ff 00 00       	and    eax,0xff00
c001cdc4:	09 d8                	or     eax,ebx
c001cdc6:	5b                   	pop    ebx
c001cdc7:	5e                   	pop    esi
c001cdc8:	5f                   	pop    edi
c001cdc9:	5d                   	pop    ebp
c001cdca:	c3                   	ret    
c001cdcb:	90                   	nop

c001cdcc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cdcc:	83 ec 18             	sub    esp,0x18
c001cdcf:	6a 08                	push   0x8
c001cdd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdd6:	50                   	push   eax
c001cdd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cddc:	50                   	push   eax
c001cddd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cde2:	50                   	push   eax
c001cde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cde7:	e8 a2 fe ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdec:	83 c4 2c             	add    esp,0x2c
c001cdef:	0f b6 c4             	movzx  eax,ah
c001cdf2:	c3                   	ret    
c001cdf3:	90                   	nop

c001cdf4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cdf4:	83 ec 18             	sub    esp,0x18
c001cdf7:	6a 08                	push   0x8
c001cdf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdfe:	50                   	push   eax
c001cdff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce04:	50                   	push   eax
c001ce05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce0a:	50                   	push   eax
c001ce0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce0f:	e8 7a fe ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce14:	83 c4 2c             	add    esp,0x2c
c001ce17:	c3                   	ret    

c001ce18 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ce18:	83 ec 18             	sub    esp,0x18
c001ce1b:	6a 3c                	push   0x3c
c001ce1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce22:	50                   	push   eax
c001ce23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce28:	50                   	push   eax
c001ce29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce2e:	50                   	push   eax
c001ce2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce33:	e8 56 fe ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce38:	83 c4 2c             	add    esp,0x2c
c001ce3b:	c3                   	ret    

c001ce3c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce3c:	83 ec 18             	sub    esp,0x18
c001ce3f:	6a 18                	push   0x18
c001ce41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce46:	50                   	push   eax
c001ce47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce4c:	50                   	push   eax
c001ce4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce52:	50                   	push   eax
c001ce53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce57:	e8 32 fe ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce5c:	83 c4 2c             	add    esp,0x2c
c001ce5f:	0f b6 c4             	movzx  eax,ah
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ce64:	55                   	push   ebp
c001ce65:	57                   	push   edi
c001ce66:	56                   	push   esi
c001ce67:	53                   	push   ebx
c001ce68:	83 ec 28             	sub    esp,0x28
c001ce6b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce6f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ce74:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ce79:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ce7e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ce85:	8d 43 12             	lea    eax,[ebx+0x12]
c001ce88:	83 c3 10             	add    ebx,0x10
c001ce8b:	0f b6 c0             	movzx  eax,al
c001ce8e:	0f b6 db             	movzx  ebx,bl
c001ce91:	50                   	push   eax
c001ce92:	51                   	push   ecx
c001ce93:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ce97:	57                   	push   edi
c001ce98:	55                   	push   ebp
c001ce99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce9d:	e8 ec fd ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cea2:	83 c4 14             	add    esp,0x14
c001cea5:	89 c6                	mov    esi,eax
c001cea7:	53                   	push   ebx
c001cea8:	c1 e6 10             	shl    esi,0x10
c001ceab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ceaf:	51                   	push   ecx
c001ceb0:	57                   	push   edi
c001ceb1:	55                   	push   ebp
c001ceb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ceb6:	e8 d3 fd ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cebb:	83 c4 3c             	add    esp,0x3c
c001cebe:	0f b7 c0             	movzx  eax,ax
c001cec1:	5b                   	pop    ebx
c001cec2:	09 f0                	or     eax,esi
c001cec4:	5e                   	pop    esi
c001cec5:	5f                   	pop    edi
c001cec6:	5d                   	pop    ebp
c001cec7:	c3                   	ret    

c001cec8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cec8:	55                   	push   ebp
c001cec9:	57                   	push   edi
c001ceca:	56                   	push   esi
c001cecb:	53                   	push   ebx
c001cecc:	83 ec 0c             	sub    esp,0xc
c001cecf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ced3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ced7:	89 f5                	mov    ebp,esi
c001ced9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cedf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cee3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cee7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ceeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ceef:	83 f9 01             	cmp    ecx,0x1
c001cef2:	75 5d                	jne    c001cf51 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cef4:	0f b6 c8             	movzx  ecx,al
c001cef7:	0f b6 d2             	movzx  edx,dl
c001cefa:	c1 e1 10             	shl    ecx,0x10
c001cefd:	c1 e2 0b             	shl    edx,0xb
c001cf00:	89 f0                	mov    eax,esi
c001cf02:	25 fc 00 00 00       	and    eax,0xfc
c001cf07:	09 c1                	or     ecx,eax
c001cf09:	89 e8                	mov    eax,ebp
c001cf0b:	0f b6 c0             	movzx  eax,al
c001cf0e:	c1 e0 08             	shl    eax,0x8
c001cf11:	09 c1                	or     ecx,eax
c001cf13:	09 d1                	or     ecx,edx
c001cf15:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf1a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cf20:	89 c8                	mov    eax,ecx
c001cf22:	ef                   	out    dx,eax
c001cf23:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf28:	ed                   	in     eax,dx
c001cf29:	0f b7 db             	movzx  ebx,bx
c001cf2c:	83 e6 02             	and    esi,0x2
c001cf2f:	74 0a                	je     c001cf3b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cf31:	0f b7 d0             	movzx  edx,ax
c001cf34:	c1 e3 10             	shl    ebx,0x10
c001cf37:	09 d3                	or     ebx,edx
c001cf39:	eb 05                	jmp    c001cf40 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf3b:	66 31 c0             	xor    ax,ax
c001cf3e:	09 c3                	or     ebx,eax
c001cf40:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf45:	89 c8                	mov    eax,ecx
c001cf47:	ef                   	out    dx,eax
c001cf48:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf4d:	89 d8                	mov    eax,ebx
c001cf4f:	eb 41                	jmp    c001cf92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf51:	83 f9 02             	cmp    ecx,0x2
c001cf54:	75 45                	jne    c001cf9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cf56:	83 ec 0c             	sub    esp,0xc
c001cf59:	0f b6 d2             	movzx  edx,dl
c001cf5c:	89 f1                	mov    ecx,esi
c001cf5e:	0f b6 c0             	movzx  eax,al
c001cf61:	0f b6 f1             	movzx  esi,cl
c001cf64:	89 e9                	mov    ecx,ebp
c001cf66:	56                   	push   esi
c001cf67:	0f b6 c9             	movzx  ecx,cl
c001cf6a:	51                   	push   ecx
c001cf6b:	52                   	push   edx
c001cf6c:	50                   	push   eax
c001cf6d:	57                   	push   edi
c001cf6e:	e8 ad fc ff ff       	call   c001cc20 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf73:	89 c2                	mov    edx,eax
c001cf75:	ed                   	in     eax,dx
c001cf76:	83 c4 20             	add    esp,0x20
c001cf79:	0f b7 db             	movzx  ebx,bx
c001cf7c:	f6 c2 02             	test   dl,0x2
c001cf7f:	74 0c                	je     c001cf8d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cf81:	0f b7 c8             	movzx  ecx,ax
c001cf84:	89 d8                	mov    eax,ebx
c001cf86:	c1 e0 10             	shl    eax,0x10
c001cf89:	09 c8                	or     eax,ecx
c001cf8b:	eb 05                	jmp    c001cf92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf8d:	66 31 c0             	xor    ax,ax
c001cf90:	09 d8                	or     eax,ebx
c001cf92:	ef                   	out    dx,eax
c001cf93:	83 c4 0c             	add    esp,0xc
c001cf96:	5b                   	pop    ebx
c001cf97:	5e                   	pop    esi
c001cf98:	5f                   	pop    edi
c001cf99:	5d                   	pop    ebp
c001cf9a:	c3                   	ret    
c001cf9b:	c7 44 24 20 67 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e67
c001cfa3:	83 c4 0c             	add    esp,0xc
c001cfa6:	5b                   	pop    ebx
c001cfa7:	5e                   	pop    esi
c001cfa8:	5f                   	pop    edi
c001cfa9:	5d                   	pop    ebp
c001cfaa:	e9 3a 73 ff ff       	jmp    c00142e9 <Krnl::panic(char const*)>
c001cfaf:	90                   	nop

c001cfb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cfb0:	55                   	push   ebp
c001cfb1:	57                   	push   edi
c001cfb2:	56                   	push   esi
c001cfb3:	53                   	push   ebx
c001cfb4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cfba:	80 3d 8c 82 02 c0 00 	cmp    BYTE PTR ds:0xc002828c,0x0
c001cfc1:	0f 85 84 00 00 00    	jne    c001d04b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001cfc7:	83 ec 0c             	sub    esp,0xc
c001cfca:	68 14 01 00 00       	push   0x114
c001cfcf:	e8 ef c9 fe ff       	call   c00099c3 <malloc>
c001cfd4:	83 c4 0c             	add    esp,0xc
c001cfd7:	89 c3                	mov    ebx,eax
c001cfd9:	ff 35 90 78 02 c0    	push   DWORD PTR ds:0xc0027890
c001cfdf:	68 6d 4e 02 c0       	push   0xc0024e6d
c001cfe4:	50                   	push   eax
c001cfe5:	e8 a8 ff fe ff       	call   c000cf92 <File::File(char const*, Process*)>
c001cfea:	5a                   	pop    edx
c001cfeb:	59                   	pop    ecx
c001cfec:	6a 01                	push   0x1
c001cfee:	53                   	push   ebx
c001cfef:	e8 02 00 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c001cff4:	83 c4 0c             	add    esp,0xc
c001cff7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cffb:	50                   	push   eax
c001cffc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d000:	50                   	push   eax
c001d001:	53                   	push   ebx
c001d002:	e8 9b 02 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c001d007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d00b:	40                   	inc    eax
c001d00c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d00f:	e8 af c9 fe ff       	call   c00099c3 <malloc>
c001d014:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d018:	a3 88 82 02 c0       	mov    ds:0xc0028288,eax
c001d01d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d021:	5e                   	pop    esi
c001d022:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d024:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d028:	51                   	push   ecx
c001d029:	50                   	push   eax
c001d02a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d02e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d032:	53                   	push   ebx
c001d033:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d036:	83 c4 14             	add    esp,0x14
c001d039:	53                   	push   ebx
c001d03a:	e8 15 00 ff ff       	call   c000d054 <File::close()>
c001d03f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	a3 84 82 02 c0       	mov    ds:0xc0028284,eax
c001d04b:	a1 84 82 02 c0       	mov    eax,ds:0xc0028284
c001d050:	8b 15 88 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028288
c001d056:	89 04 24             	mov    DWORD PTR [esp],eax
c001d059:	31 ff                	xor    edi,edi
c001d05b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d063:	31 f6                	xor    esi,esi
c001d065:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d06a:	31 db                	xor    ebx,ebx
c001d06c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d074:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d079:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d080:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d084:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d08b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d08f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d092:	0f 8e 6b 01 00 00    	jle    c001d203 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d098:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d09b:	d4 40                	aam    0x40
c001d09d:	d5 39                	aad    0x39
c001d09f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0a3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d0a7:	d4 40                	aam    0x40
c001d0a9:	d5 39                	aad    0x39
c001d0ab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d0af:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d0b3:	d4 40                	aam    0x40
c001d0b5:	d5 39                	aad    0x39
c001d0b7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d0bb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d0bf:	d4 40                	aam    0x40
c001d0c1:	d5 39                	aad    0x39
c001d0c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d0c7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d0cb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d0cf:	3c 56                	cmp    al,0x56
c001d0d1:	74 45                	je     c001d118 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d0d3:	d4 40                	aam    0x40
c001d0d5:	d5 39                	aad    0x39
c001d0d7:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d0da:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d0de:	0f b6 c9             	movzx  ecx,cl
c001d0e1:	c1 e1 04             	shl    ecx,0x4
c001d0e4:	d4 40                	aam    0x40
c001d0e6:	d5 39                	aad    0x39
c001d0e8:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0eb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d0ef:	0f b6 db             	movzx  ebx,bl
c001d0f2:	09 cb                	or     ebx,ecx
c001d0f4:	c1 e3 04             	shl    ebx,0x4
c001d0f7:	d4 40                	aam    0x40
c001d0f9:	d5 39                	aad    0x39
c001d0fb:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d0fe:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d102:	0f b6 c9             	movzx  ecx,cl
c001d105:	09 cb                	or     ebx,ecx
c001d107:	c1 e3 04             	shl    ebx,0x4
c001d10a:	89 d9                	mov    ecx,ebx
c001d10c:	d4 40                	aam    0x40
c001d10e:	d5 39                	aad    0x39
c001d110:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d113:	0f b6 db             	movzx  ebx,bl
c001d116:	09 cb                	or     ebx,ecx
c001d118:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d11c:	80 f9 44             	cmp    cl,0x44
c001d11f:	74 47                	je     c001d168 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d121:	88 c8                	mov    al,cl
c001d123:	d4 40                	aam    0x40
c001d125:	d5 39                	aad    0x39
c001d127:	83 e8 30             	sub    eax,0x30
c001d12a:	0f b6 e8             	movzx  ebp,al
c001d12d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d131:	c1 e5 04             	shl    ebp,0x4
c001d134:	d4 40                	aam    0x40
c001d136:	d5 39                	aad    0x39
c001d138:	83 e8 30             	sub    eax,0x30
c001d13b:	0f b6 f0             	movzx  esi,al
c001d13e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d142:	09 ee                	or     esi,ebp
c001d144:	c1 e6 04             	shl    esi,0x4
c001d147:	d4 40                	aam    0x40
c001d149:	d5 39                	aad    0x39
c001d14b:	83 e8 30             	sub    eax,0x30
c001d14e:	0f b6 e8             	movzx  ebp,al
c001d151:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d155:	09 ee                	or     esi,ebp
c001d157:	c1 e6 04             	shl    esi,0x4
c001d15a:	89 f5                	mov    ebp,esi
c001d15c:	d4 40                	aam    0x40
c001d15e:	d5 39                	aad    0x39
c001d160:	83 e8 30             	sub    eax,0x30
c001d163:	0f b6 f0             	movzx  esi,al
c001d166:	09 ee                	or     esi,ebp
c001d168:	83 c7 10             	add    edi,0x10
c001d16b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d16f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d172:	3c 0a                	cmp    al,0xa
c001d174:	74 09                	je     c001d17f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d176:	45                   	inc    ebp
c001d177:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d17a:	75 16                	jne    c001d192 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d17c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d17f:	3c 0a                	cmp    al,0xa
c001d181:	0f 94 c0             	sete   al
c001d184:	0f b6 c0             	movzx  eax,al
c001d187:	01 c7                	add    edi,eax
c001d189:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d18e:	75 0c                	jne    c001d19c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d190:	eb 15                	jmp    c001d1a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d192:	47                   	inc    edi
c001d193:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d196:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d19a:	eb d3                	jmp    c001d16f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d19c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d1a1:	0f 85 e8 fe ff ff    	jne    c001d08f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1a7:	80 f9 44             	cmp    cl,0x44
c001d1aa:	74 0b                	je     c001d1b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d1ac:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d1b1:	0f 85 d8 fe ff ff    	jne    c001d08f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1b7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d1bb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d1bf:	c1 e1 04             	shl    ecx,0x4
c001d1c2:	83 e8 30             	sub    eax,0x30
c001d1c5:	09 c8                	or     eax,ecx
c001d1c7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d1cb:	0f 85 be fe ff ff    	jne    c001d08f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1d1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d1d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d1d9:	c1 e1 04             	shl    ecx,0x4
c001d1dc:	83 e8 30             	sub    eax,0x30
c001d1df:	09 c8                	or     eax,ecx
c001d1e1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d1e5:	0f 85 a4 fe ff ff    	jne    c001d08f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1eb:	50                   	push   eax
c001d1ec:	50                   	push   eax
c001d1ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d1f1:	50                   	push   eax
c001d1f2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d1f9:	e8 42 35 fe ff       	call   c0000740 <strcpy>
c001d1fe:	83 c4 10             	add    esp,0x10
c001d201:	eb 15                	jmp    c001d218 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d203:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d20a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d215:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d218:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d21f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d225:	5b                   	pop    ebx
c001d226:	5e                   	pop    esi
c001d227:	5f                   	pop    edi
c001d228:	5d                   	pop    ebp
c001d229:	c3                   	ret    

c001d22a <PCI::checkBus(unsigned char)>:
c001d22a:	56                   	push   esi
c001d22b:	53                   	push   ebx
c001d22c:	31 db                	xor    ebx,ebx
c001d22e:	51                   	push   ecx
c001d22f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d234:	52                   	push   edx
c001d235:	53                   	push   ebx
c001d236:	43                   	inc    ebx
c001d237:	56                   	push   esi
c001d238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d23c:	e8 37 03 00 00       	call   c001d578 <PCI::checkDevice(unsigned char, unsigned char)>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	83 fb 20             	cmp    ebx,0x20
c001d247:	75 eb                	jne    c001d234 <PCI::checkBus(unsigned char)+0xa>
c001d249:	58                   	pop    eax
c001d24a:	5b                   	pop    ebx
c001d24b:	5e                   	pop    esi
c001d24c:	c3                   	ret    
c001d24d:	90                   	nop

c001d24e <PCI::foundDevice(PCIDeviceInfo)>:
c001d24e:	55                   	push   ebp
c001d24f:	57                   	push   edi
c001d250:	56                   	push   esi
c001d251:	53                   	push   ebx
c001d252:	83 ec 1c             	sub    esp,0x1c
c001d255:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d259:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d25f:	0f 84 52 01 00 00    	je     c001d3b7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d265:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d269:	66 81 f9 06 04       	cmp    cx,0x406
c001d26e:	75 2c                	jne    c001d29c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d270:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d275:	50                   	push   eax
c001d276:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d27b:	50                   	push   eax
c001d27c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d281:	50                   	push   eax
c001d282:	56                   	push   esi
c001d283:	e8 b4 fb ff ff       	call   c001ce3c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d288:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d28c:	0f b6 c0             	movzx  eax,al
c001d28f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d293:	83 c4 2c             	add    esp,0x2c
c001d296:	5b                   	pop    ebx
c001d297:	5e                   	pop    esi
c001d298:	5f                   	pop    edi
c001d299:	5d                   	pop    ebp
c001d29a:	eb 8e                	jmp    c001d22a <PCI::checkBus(unsigned char)>
c001d29c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2a0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d2a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d2aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2ae:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d2b2:	88 d3                	mov    bl,dl
c001d2b4:	85 c0                	test   eax,eax
c001d2b6:	74 33                	je     c001d2eb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d2b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2bb:	85 d2                	test   edx,edx
c001d2bd:	74 28                	je     c001d2e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d2bf:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d2c5:	31 ef                	xor    edi,ebp
c001d2c7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d2cd:	75 18                	jne    c001d2e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d2cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d2d3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d2d9:	75 0c                	jne    c001d2e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d2db:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d2e1:	0f 84 d0 00 00 00    	je     c001d3b7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2e9:	eb c9                	jmp    c001d2b4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d2eb:	66 81 f9 01 06       	cmp    cx,0x601
c001d2f0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d2f4:	75 19                	jne    c001d30f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d2f6:	83 ec 0c             	sub    esp,0xc
c001d2f9:	68 64 01 00 00       	push   0x164
c001d2fe:	e8 c0 c6 fe ff       	call   c00099c3 <malloc>
c001d303:	89 c5                	mov    ebp,eax
c001d305:	89 04 24             	mov    DWORD PTR [esp],eax
c001d308:	e8 7b 0e 00 00       	call   c001e188 <SATABus::SATABus()>
c001d30d:	eb 1e                	jmp    c001d32d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d30f:	66 81 f9 01 01       	cmp    cx,0x101
c001d314:	75 60                	jne    c001d376 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d316:	83 ec 0c             	sub    esp,0xc
c001d319:	68 70 02 00 00       	push   0x270
c001d31e:	e8 a0 c6 fe ff       	call   c00099c3 <malloc>
c001d323:	89 c5                	mov    ebp,eax
c001d325:	89 04 24             	mov    DWORD PTR [esp],eax
c001d328:	e8 0f 03 00 00       	call   c001d63c <IDE::IDE()>
c001d32d:	58                   	pop    eax
c001d32e:	5a                   	pop    edx
c001d32f:	55                   	push   ebp
c001d330:	56                   	push   esi
c001d331:	e8 38 0b ff ff       	call   c000de6e <Device::addChild(Device*)>
c001d336:	83 ec 1c             	sub    esp,0x1c
c001d339:	b9 09 00 00 00       	mov    ecx,0x9
c001d33e:	fc                   	cld    
c001d33f:	89 e7                	mov    edi,esp
c001d341:	89 de                	mov    esi,ebx
c001d343:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d345:	55                   	push   ebp
c001d346:	e8 35 0a ff ff       	call   c000dd80 <Device::preOpenPCI(PCIDeviceInfo)>
c001d34b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d34e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d352:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d35a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d362:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d36a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d36d:	83 c4 4c             	add    esp,0x4c
c001d370:	5b                   	pop    ebx
c001d371:	5e                   	pop    esi
c001d372:	5f                   	pop    edi
c001d373:	5d                   	pop    ebp
c001d374:	ff e0                	jmp    eax
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	68 58 01 00 00       	push   0x158
c001d37e:	e8 40 c6 fe ff       	call   c00099c3 <malloc>
c001d383:	89 c5                	mov    ebp,eax
c001d385:	58                   	pop    eax
c001d386:	5a                   	pop    edx
c001d387:	68 86 4e 02 c0       	push   0xc0024e86
c001d38c:	55                   	push   ebp
c001d38d:	e8 e6 0d ff ff       	call   c000e178 <DriverlessDevice::DriverlessDevice(char const*)>
c001d392:	59                   	pop    ecx
c001d393:	5f                   	pop    edi
c001d394:	55                   	push   ebp
c001d395:	56                   	push   esi
c001d396:	e8 d3 0a ff ff       	call   c000de6e <Device::addChild(Device*)>
c001d39b:	b9 09 00 00 00       	mov    ecx,0x9
c001d3a0:	fc                   	cld    
c001d3a1:	89 df                	mov    edi,ebx
c001d3a3:	89 de                	mov    esi,ebx
c001d3a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3a7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d3ab:	83 c4 2c             	add    esp,0x2c
c001d3ae:	5b                   	pop    ebx
c001d3af:	5e                   	pop    esi
c001d3b0:	5f                   	pop    edi
c001d3b1:	5d                   	pop    ebp
c001d3b2:	e9 c9 09 ff ff       	jmp    c000dd80 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3b7:	83 c4 1c             	add    esp,0x1c
c001d3ba:	5b                   	pop    ebx
c001d3bb:	5e                   	pop    esi
c001d3bc:	5f                   	pop    edi
c001d3bd:	5d                   	pop    ebp
c001d3be:	c3                   	ret    
c001d3bf:	90                   	nop

c001d3c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d3c0:	55                   	push   ebp
c001d3c1:	57                   	push   edi
c001d3c2:	56                   	push   esi
c001d3c3:	53                   	push   ebx
c001d3c4:	83 ec 68             	sub    esp,0x68
c001d3c7:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d3cb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d3d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d3dd:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d3e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d3ed:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d3f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3f6:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d3fb:	6a 0c                	push   0xc
c001d3fd:	57                   	push   edi
c001d3fe:	53                   	push   ebx
c001d3ff:	56                   	push   esi
c001d400:	55                   	push   ebp
c001d401:	e8 88 f8 ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d406:	83 c4 20             	add    esp,0x20
c001d409:	57                   	push   edi
c001d40a:	53                   	push   ebx
c001d40b:	56                   	push   esi
c001d40c:	55                   	push   ebp
c001d40d:	e8 70 f9 ff ff       	call   c001cd82 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d412:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d417:	57                   	push   edi
c001d418:	53                   	push   ebx
c001d419:	56                   	push   esi
c001d41a:	55                   	push   ebp
c001d41b:	e8 f8 f9 ff ff       	call   c001ce18 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d420:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d424:	83 c4 14             	add    esp,0x14
c001d427:	6a 3c                	push   0x3c
c001d429:	57                   	push   edi
c001d42a:	53                   	push   ebx
c001d42b:	56                   	push   esi
c001d42c:	55                   	push   ebp
c001d42d:	e8 5c f8 ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d432:	0f b6 c4             	movzx  eax,ah
c001d435:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d439:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d43d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d441:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001d446:	83 c4 20             	add    esp,0x20
c001d449:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d44f:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d456:	74 7c                	je     c001d4d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d458:	31 c0                	xor    eax,eax
c001d45a:	8b 15 68 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026368
c001d460:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d466:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d46c:	7e 66                	jle    c001d4d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d46e:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d471:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d478:	39 cb                	cmp    ebx,ecx
c001d47a:	75 55                	jne    c001d4d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d47c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d483:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d487:	75 48                	jne    c001d4d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d489:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d48d:	83 ec 0c             	sub    esp,0xc
c001d490:	68 a0 4e 02 c0       	push   0xc0024ea0
c001d495:	e8 8e f5 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001d49a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d49e:	8b 15 68 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026368
c001d4a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4a8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4ae:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d4b6:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d4ba:	52                   	push   edx
c001d4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4bf:	53                   	push   ebx
c001d4c0:	68 c5 4e 02 c0       	push   0xc0024ec5
c001d4c5:	e8 5e f5 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001d4ca:	83 c4 20             	add    esp,0x20
c001d4cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d4d1:	40                   	inc    eax
c001d4d2:	eb 86                	jmp    c001d45a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d4d4:	31 d2                	xor    edx,edx
c001d4d6:	83 ec 0c             	sub    esp,0xc
c001d4d9:	57                   	push   edi
c001d4da:	53                   	push   ebx
c001d4db:	56                   	push   esi
c001d4dc:	52                   	push   edx
c001d4dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d4e1:	55                   	push   ebp
c001d4e2:	e8 7d f9 ff ff       	call   c001ce64 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4eb:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d4ef:	42                   	inc    edx
c001d4f0:	83 c4 20             	add    esp,0x20
c001d4f3:	83 fa 06             	cmp    edx,0x6
c001d4f6:	75 de                	jne    c001d4d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d4f8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	86 e0                	xchg   al,ah
c001d502:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d507:	6a 02                	push   0x2
c001d509:	57                   	push   edi
c001d50a:	53                   	push   ebx
c001d50b:	56                   	push   esi
c001d50c:	55                   	push   ebp
c001d50d:	e8 7c f7 ff ff       	call   c001cc8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d512:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d517:	83 c4 20             	add    esp,0x20
c001d51a:	57                   	push   edi
c001d51b:	53                   	push   ebx
c001d51c:	56                   	push   esi
c001d51d:	55                   	push   ebp
c001d51e:	e8 a9 f8 ff ff       	call   c001cdcc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d523:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d527:	57                   	push   edi
c001d528:	53                   	push   ebx
c001d529:	56                   	push   esi
c001d52a:	55                   	push   ebp
c001d52b:	e8 06 f8 ff ff       	call   c001cd36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d530:	b9 09 00 00 00       	mov    ecx,0x9
c001d535:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d53a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d53e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d542:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d546:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d54a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d54e:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d552:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d556:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	fc                   	cld    
c001d55e:	89 e7                	mov    edi,esp
c001d560:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d564:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d566:	55                   	push   ebp
c001d567:	e8 e2 fc ff ff       	call   c001d24e <PCI::foundDevice(PCIDeviceInfo)>
c001d56c:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d572:	5b                   	pop    ebx
c001d573:	5e                   	pop    esi
c001d574:	5f                   	pop    edi
c001d575:	5d                   	pop    ebp
c001d576:	c3                   	ret    
c001d577:	90                   	nop

c001d578 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d578:	55                   	push   ebp
c001d579:	57                   	push   edi
c001d57a:	56                   	push   esi
c001d57b:	53                   	push   ebx
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d583:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d588:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d58d:	6a 00                	push   0x0
c001d58f:	56                   	push   esi
c001d590:	57                   	push   edi
c001d591:	55                   	push   ebp
c001d592:	e8 9f f7 ff ff       	call   c001cd36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d597:	6a 00                	push   0x0
c001d599:	56                   	push   esi
c001d59a:	57                   	push   edi
c001d59b:	55                   	push   ebp
c001d59c:	e8 1f fe ff ff       	call   c001d3c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5a1:	83 c4 20             	add    esp,0x20
c001d5a4:	6a 00                	push   0x0
c001d5a6:	56                   	push   esi
c001d5a7:	57                   	push   edi
c001d5a8:	55                   	push   ebp
c001d5a9:	e8 ac f7 ff ff       	call   c001cd5a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5ae:	83 c4 10             	add    esp,0x10
c001d5b1:	84 c0                	test   al,al
c001d5b3:	79 27                	jns    c001d5dc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d5b5:	bb 01 00 00 00       	mov    ebx,0x1
c001d5ba:	53                   	push   ebx
c001d5bb:	56                   	push   esi
c001d5bc:	57                   	push   edi
c001d5bd:	55                   	push   ebp
c001d5be:	e8 73 f7 ff ff       	call   c001cd36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5c3:	83 c4 10             	add    esp,0x10
c001d5c6:	66 40                	inc    ax
c001d5c8:	74 0c                	je     c001d5d6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d5ca:	53                   	push   ebx
c001d5cb:	56                   	push   esi
c001d5cc:	57                   	push   edi
c001d5cd:	55                   	push   ebp
c001d5ce:	e8 ed fd ff ff       	call   c001d3c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	43                   	inc    ebx
c001d5d7:	83 fb 08             	cmp    ebx,0x8
c001d5da:	75 de                	jne    c001d5ba <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d5dc:	83 c4 0c             	add    esp,0xc
c001d5df:	5b                   	pop    ebx
c001d5e0:	5e                   	pop    esi
c001d5e1:	5f                   	pop    edi
c001d5e2:	5d                   	pop    ebp
c001d5e3:	c3                   	ret    

c001d5e4 <PCI::detect()>:
c001d5e4:	56                   	push   esi
c001d5e5:	53                   	push   ebx
c001d5e6:	53                   	push   ebx
c001d5e7:	31 db                	xor    ebx,ebx
c001d5e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5ed:	6a 00                	push   0x0
c001d5ef:	6a 00                	push   0x0
c001d5f1:	6a 00                	push   0x0
c001d5f3:	56                   	push   esi
c001d5f4:	e8 61 f7 ff ff       	call   c001cd5a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	a8 80                	test   al,0x80
c001d5fe:	75 21                	jne    c001d621 <PCI::detect()+0x3d>
c001d600:	51                   	push   ecx
c001d601:	51                   	push   ecx
c001d602:	6a 00                	push   0x0
c001d604:	56                   	push   esi
c001d605:	e8 20 fc ff ff       	call   c001d22a <PCI::checkBus(unsigned char)>
c001d60a:	83 c4 10             	add    esp,0x10
c001d60d:	eb 24                	jmp    c001d633 <PCI::detect()+0x4f>
c001d60f:	52                   	push   edx
c001d610:	52                   	push   edx
c001d611:	53                   	push   ebx
c001d612:	43                   	inc    ebx
c001d613:	56                   	push   esi
c001d614:	e8 11 fc ff ff       	call   c001d22a <PCI::checkBus(unsigned char)>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	83 fb 08             	cmp    ebx,0x8
c001d61f:	74 12                	je     c001d633 <PCI::detect()+0x4f>
c001d621:	53                   	push   ebx
c001d622:	6a 00                	push   0x0
c001d624:	6a 00                	push   0x0
c001d626:	56                   	push   esi
c001d627:	e8 0a f7 ff ff       	call   c001cd36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d62c:	83 c4 10             	add    esp,0x10
c001d62f:	66 40                	inc    ax
c001d631:	74 dc                	je     c001d60f <PCI::detect()+0x2b>
c001d633:	58                   	pop    eax
c001d634:	5b                   	pop    ebx
c001d635:	5e                   	pop    esi
c001d636:	c3                   	ret    
c001d637:	90                   	nop

c001d638 <IDE::close(int, int, void*)>:
c001d638:	83 c8 ff             	or     eax,0xffffffff
c001d63b:	c3                   	ret    

c001d63c <IDE::IDE()>:
c001d63c:	83 ec 0c             	sub    esp,0xc
c001d63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d643:	83 ec 08             	sub    esp,0x8
c001d646:	68 0c 4f 02 c0       	push   0xc0024f0c
c001d64b:	50                   	push   eax
c001d64c:	e8 cb 0b ff ff       	call   c000e21c <HardDiskController::HardDiskController(char const*)>
c001d651:	83 c4 10             	add    esp,0x10
c001d654:	ba 9c 4f 02 c0       	mov    edx,0xc0024f9c
c001d659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65d:	89 10                	mov    DWORD PTR [eax],edx
c001d65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d663:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d66a:	90                   	nop
c001d66b:	83 c4 0c             	add    esp,0xc
c001d66e:	c3                   	ret    
c001d66f:	90                   	nop

c001d670 <IDE::prepareInterrupt(unsigned char)>:
c001d670:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d679:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d681:	c3                   	ret    

c001d682 <selectDrive(unsigned char, unsigned char)>:
c001d682:	c3                   	ret    
c001d683:	90                   	nop

c001d684 <IDE::getBase(unsigned char)>:
c001d684:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d68d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d695:	c3                   	ret    

c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d696:	55                   	push   ebp
c001d697:	57                   	push   edi
c001d698:	56                   	push   esi
c001d699:	53                   	push   ebx
c001d69a:	83 ec 1c             	sub    esp,0x1c
c001d69d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6a5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d6a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6b0:	80 f9 03             	cmp    cl,0x3
c001d6b3:	77 51                	ja     c001d706 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d6b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6b9:	0f b6 f2             	movzx  esi,dl
c001d6bc:	0f b6 db             	movzx  ebx,bl
c001d6bf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d6c2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d6c6:	83 ca 80             	or     edx,0xffffff80
c001d6c9:	0f b6 d2             	movzx  edx,dl
c001d6cc:	52                   	push   edx
c001d6cd:	6a 0c                	push   0xc
c001d6cf:	56                   	push   esi
c001d6d0:	57                   	push   edi
c001d6d1:	e8 c0 ff ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6d6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6df:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d6e3:	ee                   	out    dx,al
c001d6e4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d6e9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d6ed:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d6f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d6f5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d6fd:	83 c4 2c             	add    esp,0x2c
c001d700:	5b                   	pop    ebx
c001d701:	5e                   	pop    esi
c001d702:	5f                   	pop    edi
c001d703:	5d                   	pop    ebp
c001d704:	eb 90                	jmp    c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d706:	80 fb 07             	cmp    bl,0x7
c001d709:	77 12                	ja     c001d71d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d70b:	0f b6 d2             	movzx  edx,dl
c001d70e:	0f b6 db             	movzx  ebx,bl
c001d711:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d719:	89 da                	mov    edx,ebx
c001d71b:	eb 2f                	jmp    c001d74c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d71d:	80 fb 0d             	cmp    bl,0xd
c001d720:	77 13                	ja     c001d735 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d722:	0f b6 d2             	movzx  edx,dl
c001d725:	0f b6 db             	movzx  ebx,bl
c001d728:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d72f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d733:	eb 17                	jmp    c001d74c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d735:	80 fb 15             	cmp    bl,0x15
c001d738:	77 13                	ja     c001d74d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d73a:	0f b6 d2             	movzx  edx,dl
c001d73d:	0f b6 db             	movzx  ebx,bl
c001d740:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d748:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d74c:	ee                   	out    dx,al
c001d74d:	83 c4 1c             	add    esp,0x1c
c001d750:	5b                   	pop    ebx
c001d751:	5e                   	pop    esi
c001d752:	5f                   	pop    edi
c001d753:	5d                   	pop    ebp
c001d754:	c3                   	ret    
c001d755:	90                   	nop

c001d756 <IDE::read(unsigned char, unsigned char)>:
c001d756:	55                   	push   ebp
c001d757:	57                   	push   edi
c001d758:	56                   	push   esi
c001d759:	53                   	push   ebx
c001d75a:	83 ec 1c             	sub    esp,0x1c
c001d75d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d761:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d765:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d768:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d76c:	3c 03                	cmp    al,0x3
c001d76e:	77 43                	ja     c001d7b3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d770:	0f b6 f2             	movzx  esi,dl
c001d773:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d776:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d77a:	83 c8 80             	or     eax,0xffffff80
c001d77d:	0f b6 c0             	movzx  eax,al
c001d780:	50                   	push   eax
c001d781:	6a 0c                	push   0xc
c001d783:	56                   	push   esi
c001d784:	57                   	push   edi
c001d785:	e8 0c ff ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d78a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d78f:	0f b6 c3             	movzx  eax,bl
c001d792:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d796:	ec                   	in     al,dx
c001d797:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d79b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d7a0:	52                   	push   edx
c001d7a1:	6a 0c                	push   0xc
c001d7a3:	56                   	push   esi
c001d7a4:	57                   	push   edi
c001d7a5:	e8 ec fe ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7aa:	83 c4 20             	add    esp,0x20
c001d7ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d7b1:	eb 49                	jmp    c001d7fc <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7b3:	80 fb 07             	cmp    bl,0x7
c001d7b6:	77 12                	ja     c001d7ca <IDE::read(unsigned char, unsigned char)+0x74>
c001d7b8:	0f b6 d2             	movzx  edx,dl
c001d7bb:	0f b6 c3             	movzx  eax,bl
c001d7be:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d7c6:	89 c2                	mov    edx,eax
c001d7c8:	eb 31                	jmp    c001d7fb <IDE::read(unsigned char, unsigned char)+0xa5>
c001d7ca:	80 fb 0d             	cmp    bl,0xd
c001d7cd:	77 13                	ja     c001d7e2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d7cf:	0f b6 d2             	movzx  edx,dl
c001d7d2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d7d9:	0f b6 d3             	movzx  edx,bl
c001d7dc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d7e0:	eb 19                	jmp    c001d7fb <IDE::read(unsigned char, unsigned char)+0xa5>
c001d7e2:	31 c0                	xor    eax,eax
c001d7e4:	80 fb 15             	cmp    bl,0x15
c001d7e7:	77 13                	ja     c001d7fc <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7e9:	0f b6 d2             	movzx  edx,dl
c001d7ec:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d7f4:	0f b6 d3             	movzx  edx,bl
c001d7f7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d7fb:	ec                   	in     al,dx
c001d7fc:	83 c4 1c             	add    esp,0x1c
c001d7ff:	5b                   	pop    ebx
c001d800:	5e                   	pop    esi
c001d801:	5f                   	pop    edi
c001d802:	5d                   	pop    ebp
c001d803:	c3                   	ret    

c001d804 <IDE::waitInterrupt(unsigned char)>:
c001d804:	55                   	push   ebp
c001d805:	57                   	push   edi
c001d806:	56                   	push   esi
c001d807:	53                   	push   ebx
c001d808:	31 db                	xor    ebx,ebx
c001d80a:	83 ec 0c             	sub    esp,0xc
c001d80d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d811:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d816:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d81e:	89 e8                	mov    eax,ebp
c001d820:	84 c0                	test   al,al
c001d822:	75 30                	jne    c001d854 <IDE::waitInterrupt(unsigned char)+0x50>
c001d824:	50                   	push   eax
c001d825:	6a 0c                	push   0xc
c001d827:	56                   	push   esi
c001d828:	57                   	push   edi
c001d829:	e8 28 ff ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001d82e:	83 c4 10             	add    esp,0x10
c001d831:	a8 01                	test   al,0x1
c001d833:	75 27                	jne    c001d85c <IDE::waitInterrupt(unsigned char)+0x58>
c001d835:	f6 c3 04             	test   bl,0x4
c001d838:	75 12                	jne    c001d84c <IDE::waitInterrupt(unsigned char)+0x48>
c001d83a:	83 fb 32             	cmp    ebx,0x32
c001d83d:	7e 0d                	jle    c001d84c <IDE::waitInterrupt(unsigned char)+0x48>
c001d83f:	83 ec 0c             	sub    esp,0xc
c001d842:	6a 64                	push   0x64
c001d844:	e8 6b a9 ff ff       	call   c00181b4 <milliTenthSleep(unsigned int)>
c001d849:	83 c4 10             	add    esp,0x10
c001d84c:	83 fb 3c             	cmp    ebx,0x3c
c001d84f:	74 0b                	je     c001d85c <IDE::waitInterrupt(unsigned char)+0x58>
c001d851:	43                   	inc    ebx
c001d852:	eb c2                	jmp    c001d816 <IDE::waitInterrupt(unsigned char)+0x12>
c001d854:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d85c:	83 c4 0c             	add    esp,0xc
c001d85f:	89 e8                	mov    eax,ebp
c001d861:	5b                   	pop    ebx
c001d862:	5e                   	pop    esi
c001d863:	5f                   	pop    edi
c001d864:	5d                   	pop    ebp
c001d865:	c3                   	ret    

c001d866 <ideChannel0IRQHandler(regs*, void*)>:
c001d866:	83 ec 10             	sub    esp,0x10
c001d869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d86d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d874:	6a 07                	push   0x7
c001d876:	6a 00                	push   0x0
c001d878:	50                   	push   eax
c001d879:	e8 d8 fe ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001d87e:	83 c4 1c             	add    esp,0x1c
c001d881:	c3                   	ret    

c001d882 <ideChannel1IRQHandler(regs*, void*)>:
c001d882:	83 ec 10             	sub    esp,0x10
c001d885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d889:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d890:	6a 07                	push   0x7
c001d892:	6a 01                	push   0x1
c001d894:	50                   	push   eax
c001d895:	e8 bc fe ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001d89a:	83 c4 1c             	add    esp,0x1c
c001d89d:	c3                   	ret    

c001d89e <IDE::enableIRQs(unsigned char, bool)>:
c001d89e:	57                   	push   edi
c001d89f:	56                   	push   esi
c001d8a0:	be 04 00 00 00       	mov    esi,0x4
c001d8a5:	53                   	push   ebx
c001d8a6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d8ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8af:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d8b4:	0f 94 c0             	sete   al
c001d8b7:	d1 e0                	shl    eax,1
c001d8b9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d8c0:	0f b6 c0             	movzx  eax,al
c001d8c3:	50                   	push   eax
c001d8c4:	6a 0c                	push   0xc
c001d8c6:	57                   	push   edi
c001d8c7:	53                   	push   ebx
c001d8c8:	e8 c9 fd ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8cd:	83 c4 10             	add    esp,0x10
c001d8d0:	50                   	push   eax
c001d8d1:	6a 0c                	push   0xc
c001d8d3:	57                   	push   edi
c001d8d4:	53                   	push   ebx
c001d8d5:	e8 7c fe ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001d8da:	83 c4 10             	add    esp,0x10
c001d8dd:	4e                   	dec    esi
c001d8de:	75 f0                	jne    c001d8d0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d8e0:	5b                   	pop    ebx
c001d8e1:	5e                   	pop    esi
c001d8e2:	5f                   	pop    edi
c001d8e3:	c3                   	ret    

c001d8e4 <IDE::open(int, int, void*)>:
c001d8e4:	55                   	push   ebp
c001d8e5:	57                   	push   edi
c001d8e6:	56                   	push   esi
c001d8e7:	53                   	push   ebx
c001d8e8:	83 ec 1c             	sub    esp,0x1c
c001d8eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d8ef:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d8f8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d901:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d908:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d90f:	0f 85 b0 02 00 00    	jne    c001dbc5 <IDE::open(int, int, void*)+0x2e1>
c001d915:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d91b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d91f:	83 e0 7f             	and    eax,0x7f
c001d922:	3c 05                	cmp    al,0x5
c001d924:	74 04                	je     c001d92a <IDE::open(int, int, void*)+0x46>
c001d926:	3c 0f                	cmp    al,0xf
c001d928:	75 32                	jne    c001d95c <IDE::open(int, int, void*)+0x78>
c001d92a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d930:	83 e0 fc             	and    eax,0xfffffffc
c001d933:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d93a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d940:	83 e0 fc             	and    eax,0xfffffffc
c001d943:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d94a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d950:	83 e0 fc             	and    eax,0xfffffffc
c001d953:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d95a:	eb 14                	jmp    c001d970 <IDE::open(int, int, void*)+0x8c>
c001d95c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d966:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d970:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d977:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d97e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d982:	89 c6                	mov    esi,eax
c001d984:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d989:	c1 e6 10             	shl    esi,0x10
c001d98c:	89 e8                	mov    eax,ebp
c001d98e:	89 fa                	mov    edx,edi
c001d990:	c1 e0 0b             	shl    eax,0xb
c001d993:	09 f0                	or     eax,esi
c001d995:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d99c:	c1 e6 08             	shl    esi,0x8
c001d99f:	09 c6                	or     esi,eax
c001d9a1:	89 f0                	mov    eax,esi
c001d9a3:	0d 08 00 00 80       	or     eax,0x80000008
c001d9a8:	ef                   	out    dx,eax
c001d9a9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d9ae:	89 ca                	mov    edx,ecx
c001d9b0:	ed                   	in     eax,dx
c001d9b1:	c1 e8 10             	shr    eax,0x10
c001d9b4:	3d ff ff 00 00       	cmp    eax,0xffff
c001d9b9:	0f 84 f5 00 00 00    	je     c001dab4 <IDE::open(int, int, void*)+0x1d0>
c001d9bf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001d9c5:	89 fa                	mov    edx,edi
c001d9c7:	89 f0                	mov    eax,esi
c001d9c9:	ef                   	out    dx,eax
c001d9ca:	b0 fe                	mov    al,0xfe
c001d9cc:	89 ca                	mov    edx,ecx
c001d9ce:	ee                   	out    dx,al
c001d9cf:	89 f0                	mov    eax,esi
c001d9d1:	89 fa                	mov    edx,edi
c001d9d3:	ef                   	out    dx,eax
c001d9d4:	89 ca                	mov    edx,ecx
c001d9d6:	ed                   	in     eax,dx
c001d9d7:	3c fe                	cmp    al,0xfe
c001d9d9:	0f 85 a9 00 00 00    	jne    c001da88 <IDE::open(int, int, void*)+0x1a4>
c001d9df:	8b 15 68 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026368
c001d9e5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001d9ec:	74 33                	je     c001da21 <IDE::open(int, int, void*)+0x13d>
c001d9ee:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001d9f4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001d9f8:	40                   	inc    eax
c001d9f9:	83 ec 0c             	sub    esp,0xc
c001d9fc:	0f b6 c0             	movzx  eax,al
c001d9ff:	50                   	push   eax
c001da00:	55                   	push   ebp
c001da01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da05:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001da0b:	51                   	push   ecx
c001da0c:	e8 0f 44 ff ff       	call   c0011e20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001da11:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001da16:	83 c4 1c             	add    esp,0x1c
c001da19:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da1f:	eb 0a                	jmp    c001da2b <IDE::open(int, int, void*)+0x147>
c001da21:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da2b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da32:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da39:	c1 e1 10             	shl    ecx,0x10
c001da3c:	c1 e0 08             	shl    eax,0x8
c001da3f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da44:	09 c1                	or     ecx,eax
c001da46:	89 fa                	mov    edx,edi
c001da48:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da4f:	c1 e0 0b             	shl    eax,0xb
c001da52:	09 c1                	or     ecx,eax
c001da54:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da5a:	89 c8                	mov    eax,ecx
c001da5c:	ef                   	out    dx,eax
c001da5d:	be fc 0c 00 00       	mov    esi,0xcfc
c001da62:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001da68:	89 f2                	mov    edx,esi
c001da6a:	ee                   	out    dx,al
c001da6b:	89 c8                	mov    eax,ecx
c001da6d:	89 fa                	mov    edx,edi
c001da6f:	ef                   	out    dx,eax
c001da70:	89 f2                	mov    edx,esi
c001da72:	ed                   	in     eax,dx
c001da73:	0f b6 c0             	movzx  eax,al
c001da76:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001da7c:	74 46                	je     c001dac4 <IDE::open(int, int, void*)+0x1e0>
c001da7e:	83 ec 0c             	sub    esp,0xc
c001da81:	68 24 4f 02 c0       	push   0xc0024f24
c001da86:	eb 34                	jmp    c001dabc <IDE::open(int, int, void*)+0x1d8>
c001da88:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001da91:	75 17                	jne    c001daaa <IDE::open(int, int, void*)+0x1c6>
c001da93:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001da98:	74 07                	je     c001daa1 <IDE::open(int, int, void*)+0x1bd>
c001da9a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001da9f:	75 09                	jne    c001daaa <IDE::open(int, int, void*)+0x1c6>
c001daa1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001daa8:	eb 1a                	jmp    c001dac4 <IDE::open(int, int, void*)+0x1e0>
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	68 2c 4f 02 c0       	push   0xc0024f2c
c001dab2:	eb 08                	jmp    c001dabc <IDE::open(int, int, void*)+0x1d8>
c001dab4:	83 ec 0c             	sub    esp,0xc
c001dab7:	68 5d 4f 02 c0       	push   0xc0024f5d
c001dabc:	e8 28 68 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001dac1:	83 c4 10             	add    esp,0x10
c001dac4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001dacb:	79 1a                	jns    c001dae7 <IDE::open(int, int, void*)+0x203>
c001dacd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001dad3:	83 e0 fc             	and    eax,0xfffffffc
c001dad6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001dadd:	83 c0 08             	add    eax,0x8
c001dae0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001dae7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001daed:	89 c2                	mov    edx,eax
c001daef:	83 e2 0f             	and    edx,0xf
c001daf2:	66 83 fa 08          	cmp    dx,0x8
c001daf6:	75 0a                	jne    c001db02 <IDE::open(int, int, void*)+0x21e>
c001daf8:	83 e8 02             	sub    eax,0x2
c001dafb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db02:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001db08:	89 c2                	mov    edx,eax
c001db0a:	83 e2 0f             	and    edx,0xf
c001db0d:	66 83 fa 08          	cmp    dx,0x8
c001db11:	75 0a                	jne    c001db1d <IDE::open(int, int, void*)+0x239>
c001db13:	83 e8 02             	sub    eax,0x2
c001db16:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db1d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001db24:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db2b:	89 d0                	mov    eax,edx
c001db2d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db30:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db34:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db38:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db3b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db40:	0f b6 c9             	movzx  ecx,cl
c001db43:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db4a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db4d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db51:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db55:	8d 50 02             	lea    edx,[eax+0x2]
c001db58:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db5d:	0f b6 d2             	movzx  edx,dl
c001db60:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001db66:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db69:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db6d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001db71:	8d 48 03             	lea    ecx,[eax+0x3]
c001db74:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db79:	0f b6 c9             	movzx  ecx,cl
c001db7c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001db82:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db85:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db89:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001db8d:	8d 50 04             	lea    edx,[eax+0x4]
c001db90:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001db96:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db9b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dba2:	66 85 f6             	test   si,si
c001dba5:	74 5b                	je     c001dc02 <IDE::open(int, int, void*)+0x31e>
c001dba7:	0f b6 d2             	movzx  edx,dl
c001dbaa:	83 c0 05             	add    eax,0x5
c001dbad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbb0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbb4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dbb8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dbbe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbc3:	eb 3d                	jmp    c001dc02 <IDE::open(int, int, void*)+0x31e>
c001dbc5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dbcb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dbd2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dbd9:	66 05 06 02          	add    ax,0x206
c001dbdd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dbe4:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dbeb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dbf2:	66 05 06 02          	add    ax,0x206
c001dbf6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbfd:	e9 e5 fe ff ff       	jmp    c001dae7 <IDE::open(int, int, void*)+0x203>
c001dc02:	50                   	push   eax
c001dc03:	50                   	push   eax
c001dc04:	6a 00                	push   0x0
c001dc06:	53                   	push   ebx
c001dc07:	e8 64 fa ff ff       	call   c001d670 <IDE::prepareInterrupt(unsigned char)>
c001dc0c:	5a                   	pop    edx
c001dc0d:	59                   	pop    ecx
c001dc0e:	6a 01                	push   0x1
c001dc10:	53                   	push   ebx
c001dc11:	e8 5a fa ff ff       	call   c001d670 <IDE::prepareInterrupt(unsigned char)>
c001dc16:	83 c4 0c             	add    esp,0xc
c001dc19:	6a 00                	push   0x0
c001dc1b:	6a 00                	push   0x0
c001dc1d:	53                   	push   ebx
c001dc1e:	e8 7b fc ff ff       	call   c001d89e <IDE::enableIRQs(unsigned char, bool)>
c001dc23:	83 c4 0c             	add    esp,0xc
c001dc26:	6a 00                	push   0x0
c001dc28:	6a 01                	push   0x1
c001dc2a:	53                   	push   ebx
c001dc2b:	e8 6e fc ff ff       	call   c001d89e <IDE::enableIRQs(unsigned char, bool)>
c001dc30:	83 c4 10             	add    esp,0x10
c001dc33:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc3a:	74 34                	je     c001dc70 <IDE::open(int, int, void*)+0x38c>
c001dc3c:	83 ec 0c             	sub    esp,0xc
c001dc3f:	53                   	push   ebx
c001dc40:	6a 01                	push   0x1
c001dc42:	68 66 d8 01 c0       	push   0xc001d866
c001dc47:	6a 0e                	push   0xe
c001dc49:	53                   	push   ebx
c001dc4a:	e8 97 01 ff ff       	call   c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc4f:	83 c4 14             	add    esp,0x14
c001dc52:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc58:	53                   	push   ebx
c001dc59:	6a 01                	push   0x1
c001dc5b:	68 82 d8 01 c0       	push   0xc001d882
c001dc60:	6a 0f                	push   0xf
c001dc62:	53                   	push   ebx
c001dc63:	e8 7e 01 ff ff       	call   c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc68:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dc6e:	eb 38                	jmp    c001dca8 <IDE::open(int, int, void*)+0x3c4>
c001dc70:	83 ec 0c             	sub    esp,0xc
c001dc73:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dc7d:	53                   	push   ebx
c001dc7e:	6a 00                	push   0x0
c001dc80:	68 66 d8 01 c0       	push   0xc001d866
c001dc85:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dc8b:	53                   	push   ebx
c001dc8c:	e8 55 01 ff ff       	call   c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc91:	83 c4 14             	add    esp,0x14
c001dc94:	53                   	push   ebx
c001dc95:	6a 00                	push   0x0
c001dc97:	68 82 d8 01 c0       	push   0xc001d882
c001dc9c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dca2:	53                   	push   ebx
c001dca3:	e8 3e 01 ff ff       	call   c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dcaa:	83 c4 20             	add    esp,0x20
c001dcad:	83 ec 0c             	sub    esp,0xc
c001dcb0:	53                   	push   ebx
c001dcb1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dcb4:	83 c4 0c             	add    esp,0xc
c001dcb7:	6a 07                	push   0x7
c001dcb9:	6a 00                	push   0x0
c001dcbb:	53                   	push   ebx
c001dcbc:	e8 95 fa ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001dcc1:	83 c4 0c             	add    esp,0xc
c001dcc4:	6a 07                	push   0x7
c001dcc6:	6a 01                	push   0x1
c001dcc8:	53                   	push   ebx
c001dcc9:	e8 88 fa ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001dcce:	83 c4 0c             	add    esp,0xc
c001dcd1:	6a 01                	push   0x1
c001dcd3:	6a 00                	push   0x0
c001dcd5:	53                   	push   ebx
c001dcd6:	e8 c3 fb ff ff       	call   c001d89e <IDE::enableIRQs(unsigned char, bool)>
c001dcdb:	83 c4 0c             	add    esp,0xc
c001dcde:	6a 01                	push   0x1
c001dce0:	6a 01                	push   0x1
c001dce2:	53                   	push   ebx
c001dce3:	e8 b6 fb ff ff       	call   c001d89e <IDE::enableIRQs(unsigned char, bool)>
c001dce8:	83 c4 2c             	add    esp,0x2c
c001dceb:	31 c0                	xor    eax,eax
c001dced:	5b                   	pop    ebx
c001dcee:	5e                   	pop    esi
c001dcef:	5f                   	pop    edi
c001dcf0:	5d                   	pop    ebp
c001dcf1:	c3                   	ret    

c001dcf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dcf2:	55                   	push   ebp
c001dcf3:	57                   	push   edi
c001dcf4:	56                   	push   esi
c001dcf5:	53                   	push   ebx
c001dcf6:	83 ec 1c             	sub    esp,0x1c
c001dcf9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd01:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd04:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd0c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd10:	80 fa 03             	cmp    dl,0x3
c001dd13:	77 5d                	ja     c001dd72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dd15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd1d:	0f b6 db             	movzx  ebx,bl
c001dd20:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd23:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dd27:	83 ca 80             	or     edx,0xffffff80
c001dd2a:	0f b6 d2             	movzx  edx,dl
c001dd2d:	52                   	push   edx
c001dd2e:	6a 0c                	push   0xc
c001dd30:	53                   	push   ebx
c001dd31:	56                   	push   esi
c001dd32:	e8 5f f9 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd37:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dd3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd44:	0f b6 c0             	movzx  eax,al
c001dd47:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd4b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd4d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd52:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd56:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd5e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dd66:	83 c4 2c             	add    esp,0x2c
c001dd69:	5b                   	pop    ebx
c001dd6a:	5e                   	pop    esi
c001dd6b:	5f                   	pop    edi
c001dd6c:	5d                   	pop    ebp
c001dd6d:	e9 24 f9 ff ff       	jmp    c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd72:	3c 07                	cmp    al,0x7
c001dd74:	77 10                	ja     c001dd86 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001dd76:	0f b6 db             	movzx  ebx,bl
c001dd79:	0f b6 d0             	movzx  edx,al
c001dd7c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001dd84:	eb 2d                	jmp    c001ddb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dd86:	3c 0d                	cmp    al,0xd
c001dd88:	77 13                	ja     c001dd9d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001dd8a:	0f b6 db             	movzx  ebx,bl
c001dd8d:	0f b6 c0             	movzx  eax,al
c001dd90:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dd97:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dd9b:	eb 16                	jmp    c001ddb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dd9d:	3c 15                	cmp    al,0x15
c001dd9f:	77 14                	ja     c001ddb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dda1:	0f b6 db             	movzx  ebx,bl
c001dda4:	0f b6 c0             	movzx  eax,al
c001dda7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ddaf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ddb3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ddb5:	83 c4 1c             	add    esp,0x1c
c001ddb8:	5b                   	pop    ebx
c001ddb9:	5e                   	pop    esi
c001ddba:	5f                   	pop    edi
c001ddbb:	5d                   	pop    ebp
c001ddbc:	c3                   	ret    
c001ddbd:	90                   	nop

c001ddbe <IDE::detect()>:
c001ddbe:	55                   	push   ebp
c001ddbf:	57                   	push   edi
c001ddc0:	56                   	push   esi
c001ddc1:	53                   	push   ebx
c001ddc2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ddc8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ddcf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ddd6:	0f 85 97 02 00 00    	jne    c001e073 <IDE::detect()+0x2b5>
c001dddc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001dde3:	31 f6                	xor    esi,esi
c001dde5:	31 ed                	xor    ebp,ebp
c001dde7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ddef:	89 e8                	mov    eax,ebp
c001ddf1:	c1 e0 06             	shl    eax,0x6
c001ddf4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ddfc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de00:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de04:	c1 e0 04             	shl    eax,0x4
c001de07:	83 c8 a0             	or     eax,0xffffffa0
c001de0a:	0f b6 c0             	movzx  eax,al
c001de0d:	50                   	push   eax
c001de0e:	6a 06                	push   0x6
c001de10:	56                   	push   esi
c001de11:	53                   	push   ebx
c001de12:	e8 7f f8 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de17:	83 c4 0c             	add    esp,0xc
c001de1a:	6a 0c                	push   0xc
c001de1c:	56                   	push   esi
c001de1d:	53                   	push   ebx
c001de1e:	e8 33 f9 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de23:	83 c4 0c             	add    esp,0xc
c001de26:	6a 0c                	push   0xc
c001de28:	56                   	push   esi
c001de29:	53                   	push   ebx
c001de2a:	e8 27 f9 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de2f:	83 c4 0c             	add    esp,0xc
c001de32:	6a 0c                	push   0xc
c001de34:	56                   	push   esi
c001de35:	53                   	push   ebx
c001de36:	e8 1b f9 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de3b:	83 c4 0c             	add    esp,0xc
c001de3e:	6a 0c                	push   0xc
c001de40:	56                   	push   esi
c001de41:	53                   	push   ebx
c001de42:	e8 0f f9 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de47:	68 ec 00 00 00       	push   0xec
c001de4c:	6a 07                	push   0x7
c001de4e:	56                   	push   esi
c001de4f:	53                   	push   ebx
c001de50:	e8 41 f8 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de55:	83 c4 1c             	add    esp,0x1c
c001de58:	6a 0c                	push   0xc
c001de5a:	56                   	push   esi
c001de5b:	53                   	push   ebx
c001de5c:	e8 f5 f8 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de61:	83 c4 0c             	add    esp,0xc
c001de64:	6a 0c                	push   0xc
c001de66:	56                   	push   esi
c001de67:	53                   	push   ebx
c001de68:	e8 e9 f8 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de6d:	83 c4 0c             	add    esp,0xc
c001de70:	6a 0c                	push   0xc
c001de72:	56                   	push   esi
c001de73:	53                   	push   ebx
c001de74:	e8 dd f8 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de79:	83 c4 0c             	add    esp,0xc
c001de7c:	6a 0c                	push   0xc
c001de7e:	56                   	push   esi
c001de7f:	53                   	push   ebx
c001de80:	e8 d1 f8 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de85:	83 c4 0c             	add    esp,0xc
c001de88:	6a 0c                	push   0xc
c001de8a:	56                   	push   esi
c001de8b:	53                   	push   ebx
c001de8c:	e8 c5 f8 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	84 c0                	test   al,al
c001de96:	0f 84 5f 01 00 00    	je     c001dffb <IDE::detect()+0x23d>
c001de9c:	31 ff                	xor    edi,edi
c001de9e:	50                   	push   eax
c001de9f:	6a 0c                	push   0xc
c001dea1:	56                   	push   esi
c001dea2:	53                   	push   ebx
c001dea3:	e8 ae f8 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	a8 01                	test   al,0x1
c001dead:	0f 85 69 01 00 00    	jne    c001e01c <IDE::detect()+0x25e>
c001deb3:	84 c0                	test   al,al
c001deb5:	78 04                	js     c001debb <IDE::detect()+0xfd>
c001deb7:	a8 08                	test   al,0x8
c001deb9:	75 23                	jne    c001dede <IDE::detect()+0x120>
c001debb:	47                   	inc    edi
c001debc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001dec2:	7e da                	jle    c001de9e <IDE::detect()+0xe0>
c001dec4:	83 ec 0c             	sub    esp,0xc
c001dec7:	6a 32                	push   0x32
c001dec9:	e8 e6 a2 ff ff       	call   c00181b4 <milliTenthSleep(unsigned int)>
c001dece:	83 c4 10             	add    esp,0x10
c001ded1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ded7:	75 c5                	jne    c001de9e <IDE::detect()+0xe0>
c001ded9:	e9 3e 01 00 00       	jmp    c001e01c <IDE::detect()+0x25e>
c001dede:	31 c9                	xor    ecx,ecx
c001dee0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001dee4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001dee8:	83 ec 0c             	sub    esp,0xc
c001deeb:	68 80 00 00 00       	push   0x80
c001def0:	57                   	push   edi
c001def1:	6a 00                	push   0x0
c001def3:	56                   	push   esi
c001def4:	53                   	push   ebx
c001def5:	e8 f8 fd ff ff       	call   c001dcf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001defa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001deff:	89 e8                	mov    eax,ebp
c001df01:	89 d1                	mov    ecx,edx
c001df03:	c1 e0 06             	shl    eax,0x6
c001df06:	01 d8                	add    eax,ebx
c001df08:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001df0f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001df16:	89 f2                	mov    edx,esi
c001df18:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001df1e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001df22:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001df28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df2c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001df33:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001df3b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001df42:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df4a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df50:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001df57:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001df5d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001df61:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001df65:	83 c4 20             	add    esp,0x20
c001df68:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001df6b:	83 c0 02             	add    eax,0x2
c001df6e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001df74:	83 c7 02             	add    edi,0x2
c001df77:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001df7a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001df80:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001df84:	75 e2                	jne    c001df68 <IDE::detect()+0x1aa>
c001df86:	89 e8                	mov    eax,ebp
c001df88:	c1 e0 06             	shl    eax,0x6
c001df8b:	01 d8                	add    eax,ebx
c001df8d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001df93:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001df9a:	66 c1 ea 09          	shr    dx,0x9
c001df9e:	83 e2 01             	and    edx,0x1
c001dfa1:	84 c9                	test   cl,cl
c001dfa3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001dfa9:	75 22                	jne    c001dfcd <IDE::detect()+0x20f>
c001dfab:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001dfb2:	74 46                	je     c001dffa <IDE::detect()+0x23c>
c001dfb4:	83 ec 0c             	sub    esp,0xc
c001dfb7:	68 7c 01 00 00       	push   0x17c
c001dfbc:	e8 02 ba fe ff       	call   c00099c3 <malloc>
c001dfc1:	89 c7                	mov    edi,eax
c001dfc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfc6:	e8 13 05 00 00       	call   c001e4de <ATA::ATA()>
c001dfcb:	eb 17                	jmp    c001dfe4 <IDE::detect()+0x226>
c001dfcd:	83 ec 0c             	sub    esp,0xc
c001dfd0:	68 80 01 00 00       	push   0x180
c001dfd5:	e8 e9 b9 fe ff       	call   c00099c3 <malloc>
c001dfda:	89 c7                	mov    edi,eax
c001dfdc:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfdf:	e8 82 0b 00 00       	call   c001eb66 <ATAPI::ATAPI()>
c001dfe4:	5a                   	pop    edx
c001dfe5:	59                   	pop    ecx
c001dfe6:	57                   	push   edi
c001dfe7:	53                   	push   ebx
c001dfe8:	e8 81 fe fe ff       	call   c000de6e <Device::addChild(Device*)>
c001dfed:	8b 07                	mov    eax,DWORD PTR [edi]
c001dfef:	53                   	push   ebx
c001dff0:	55                   	push   ebp
c001dff1:	6a 00                	push   0x0
c001dff3:	57                   	push   edi
c001dff4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dff7:	83 c4 20             	add    esp,0x20
c001dffa:	45                   	inc    ebp
c001dffb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e000:	74 0d                	je     c001e00f <IDE::detect()+0x251>
c001e002:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e00a:	e9 e0 fd ff ff       	jmp    c001ddef <IDE::detect()+0x31>
c001e00f:	4e                   	dec    esi
c001e010:	74 61                	je     c001e073 <IDE::detect()+0x2b5>
c001e012:	be 01 00 00 00       	mov    esi,0x1
c001e017:	e9 cb fd ff ff       	jmp    c001dde7 <IDE::detect()+0x29>
c001e01c:	50                   	push   eax
c001e01d:	6a 04                	push   0x4
c001e01f:	56                   	push   esi
c001e020:	53                   	push   ebx
c001e021:	e8 30 f7 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001e026:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e02a:	83 c4 0c             	add    esp,0xc
c001e02d:	6a 05                	push   0x5
c001e02f:	56                   	push   esi
c001e030:	53                   	push   ebx
c001e031:	e8 20 f7 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001e036:	83 c4 10             	add    esp,0x10
c001e039:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e03d:	80 fa 14             	cmp    dl,0x14
c001e040:	75 04                	jne    c001e046 <IDE::detect()+0x288>
c001e042:	3c eb                	cmp    al,0xeb
c001e044:	eb 07                	jmp    c001e04d <IDE::detect()+0x28f>
c001e046:	3c 96                	cmp    al,0x96
c001e048:	75 b1                	jne    c001dffb <IDE::detect()+0x23d>
c001e04a:	80 fa 69             	cmp    dl,0x69
c001e04d:	75 ac                	jne    c001dffb <IDE::detect()+0x23d>
c001e04f:	68 a1 00 00 00       	push   0xa1
c001e054:	6a 07                	push   0x7
c001e056:	56                   	push   esi
c001e057:	53                   	push   ebx
c001e058:	e8 39 f6 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e05d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e064:	e8 4b a1 ff ff       	call   c00181b4 <milliTenthSleep(unsigned int)>
c001e069:	83 c4 10             	add    esp,0x10
c001e06c:	b1 01                	mov    cl,0x1
c001e06e:	e9 6d fe ff ff       	jmp    c001dee0 <IDE::detect()+0x122>
c001e073:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e079:	5b                   	pop    ebx
c001e07a:	5e                   	pop    esi
c001e07b:	5f                   	pop    edi
c001e07c:	5d                   	pop    ebp
c001e07d:	c3                   	ret    

c001e07e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e07e:	55                   	push   ebp
c001e07f:	57                   	push   edi
c001e080:	56                   	push   esi
c001e081:	53                   	push   ebx
c001e082:	83 ec 1c             	sub    esp,0x1c
c001e085:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e089:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e08d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e091:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e095:	88 c3                	mov    bl,al
c001e097:	84 c0                	test   al,al
c001e099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e09d:	0f 84 81 00 00 00    	je     c001e124 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0a3:	83 ec 0c             	sub    esp,0xc
c001e0a6:	68 87 4f 02 c0       	push   0xc0024f87
c001e0ab:	e8 78 e9 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0b7:	3c 01                	cmp    al,0x1
c001e0b9:	74 63                	je     c001e11e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e0bb:	3c 02                	cmp    al,0x2
c001e0bd:	75 53                	jne    c001e112 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e0bf:	d1 e6                	shl    esi,1
c001e0c1:	09 ee                	or     esi,ebp
c001e0c3:	50                   	push   eax
c001e0c4:	89 f0                	mov    eax,esi
c001e0c6:	6a 01                	push   0x1
c001e0c8:	0f b6 f0             	movzx  esi,al
c001e0cb:	c1 e6 06             	shl    esi,0x6
c001e0ce:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e0d6:	50                   	push   eax
c001e0d7:	57                   	push   edi
c001e0d8:	e8 79 f6 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001e0dd:	83 c4 10             	add    esp,0x10
c001e0e0:	a8 01                	test   al,0x1
c001e0e2:	74 02                	je     c001e0e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e0e4:	b3 07                	mov    bl,0x7
c001e0e6:	a8 02                	test   al,0x2
c001e0e8:	74 02                	je     c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e0ea:	b3 03                	mov    bl,0x3
c001e0ec:	a8 04                	test   al,0x4
c001e0ee:	74 02                	je     c001e0f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e0f0:	b3 14                	mov    bl,0x14
c001e0f2:	a8 08                	test   al,0x8
c001e0f4:	74 02                	je     c001e0f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e0f6:	b3 03                	mov    bl,0x3
c001e0f8:	a8 10                	test   al,0x10
c001e0fa:	74 02                	je     c001e0fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e0fc:	b3 15                	mov    bl,0x15
c001e0fe:	a8 20                	test   al,0x20
c001e100:	74 02                	je     c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e102:	b3 03                	mov    bl,0x3
c001e104:	a8 40                	test   al,0x40
c001e106:	74 02                	je     c001e10a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e108:	b3 16                	mov    bl,0x16
c001e10a:	84 c0                	test   al,al
c001e10c:	79 16                	jns    c001e124 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e10e:	b3 0d                	mov    bl,0xd
c001e110:	eb 12                	jmp    c001e124 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e112:	3c 03                	cmp    al,0x3
c001e114:	74 0c                	je     c001e122 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e116:	3c 04                	cmp    al,0x4
c001e118:	75 0a                	jne    c001e124 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e11a:	b3 08                	mov    bl,0x8
c001e11c:	eb 06                	jmp    c001e124 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e11e:	b3 13                	mov    bl,0x13
c001e120:	eb 02                	jmp    c001e124 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e122:	b3 17                	mov    bl,0x17
c001e124:	83 c4 1c             	add    esp,0x1c
c001e127:	88 d8                	mov    al,bl
c001e129:	5b                   	pop    ebx
c001e12a:	5e                   	pop    esi
c001e12b:	5f                   	pop    edi
c001e12c:	5d                   	pop    ebp
c001e12d:	c3                   	ret    

c001e12e <IDE::polling(unsigned char, unsigned int)>:
c001e12e:	57                   	push   edi
c001e12f:	56                   	push   esi
c001e130:	53                   	push   ebx
c001e131:	bb 04 00 00 00       	mov    ebx,0x4
c001e136:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e13a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e13f:	52                   	push   edx
c001e140:	6a 0c                	push   0xc
c001e142:	56                   	push   esi
c001e143:	57                   	push   edi
c001e144:	e8 0d f6 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001e149:	83 c4 10             	add    esp,0x10
c001e14c:	4b                   	dec    ebx
c001e14d:	75 f0                	jne    c001e13f <IDE::polling(unsigned char, unsigned int)+0x11>
c001e14f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e154:	50                   	push   eax
c001e155:	6a 0c                	push   0xc
c001e157:	56                   	push   esi
c001e158:	57                   	push   edi
c001e159:	e8 f8 f5 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001e15e:	83 c4 10             	add    esp,0x10
c001e161:	a8 01                	test   al,0x1
c001e163:	75 17                	jne    c001e17c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e165:	a8 20                	test   al,0x20
c001e167:	75 0f                	jne    c001e178 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e169:	4b                   	dec    ebx
c001e16a:	74 10                	je     c001e17c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e16c:	84 c0                	test   al,al
c001e16e:	78 e4                	js     c001e154 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e170:	a8 08                	test   al,0x8
c001e172:	74 e0                	je     c001e154 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e174:	31 c0                	xor    eax,eax
c001e176:	eb 06                	jmp    c001e17e <IDE::polling(unsigned char, unsigned int)+0x50>
c001e178:	b0 01                	mov    al,0x1
c001e17a:	eb 02                	jmp    c001e17e <IDE::polling(unsigned char, unsigned int)+0x50>
c001e17c:	b0 02                	mov    al,0x2
c001e17e:	5b                   	pop    ebx
c001e17f:	5e                   	pop    esi
c001e180:	5f                   	pop    edi
c001e181:	c3                   	ret    

c001e182 <SATABus::close(int, int, void*)>:
c001e182:	31 c0                	xor    eax,eax
c001e184:	c3                   	ret    
c001e185:	90                   	nop

c001e186 <SATABus::detect()>:
c001e186:	c3                   	ret    
c001e187:	90                   	nop

c001e188 <SATABus::SATABus()>:
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18f:	83 ec 08             	sub    esp,0x8
c001e192:	68 c0 4f 02 c0       	push   0xc0024fc0
c001e197:	50                   	push   eax
c001e198:	e8 7f 00 ff ff       	call   c000e21c <HardDiskController::HardDiskController(char const*)>
c001e19d:	83 c4 10             	add    esp,0x10
c001e1a0:	ba 14 50 02 c0       	mov    edx,0xc0025014
c001e1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a9:	89 10                	mov    DWORD PTR [eax],edx
c001e1ab:	83 ec 0c             	sub    esp,0xc
c001e1ae:	6a 50                	push   0x50
c001e1b0:	e8 02 bd fe ff       	call   c0009eb7 <Phys::allocateContiguousPages(int)>
c001e1b5:	83 c4 10             	add    esp,0x10
c001e1b8:	89 c2                	mov    edx,eax
c001e1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	6a 50                	push   0x50
c001e1c9:	e8 7f d4 fe ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	89 c2                	mov    edx,eax
c001e1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e1dd:	a1 d0 64 02 c0       	mov    eax,ds:0xc00264d0
c001e1e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1e6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e1ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1f0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1f6:	83 ec 0c             	sub    esp,0xc
c001e1f9:	6a 03                	push   0x3
c001e1fb:	6a 50                	push   0x50
c001e1fd:	51                   	push   ecx
c001e1fe:	52                   	push   edx
c001e1ff:	50                   	push   eax
c001e200:	e8 e5 dd fe ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e205:	83 c4 20             	add    esp,0x20
c001e208:	90                   	nop
c001e209:	83 c4 0c             	add    esp,0xc
c001e20c:	c3                   	ret    
c001e20d:	90                   	nop

c001e20e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e20e:	83 ec 0c             	sub    esp,0xc
c001e211:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e215:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e218:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e21b:	09 c2                	or     edx,eax
c001e21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e221:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e227:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e229:	31 c0                	xor    eax,eax
c001e22b:	c1 e9 08             	shr    ecx,0x8
c001e22e:	83 e1 0f             	and    ecx,0xf
c001e231:	39 c8                	cmp    eax,ecx
c001e233:	74 0a                	je     c001e23f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e235:	f6 c2 01             	test   dl,0x1
c001e238:	74 18                	je     c001e252 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e23a:	d1 ea                	shr    edx,1
c001e23c:	40                   	inc    eax
c001e23d:	eb f2                	jmp    c001e231 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e23f:	83 ec 0c             	sub    esp,0xc
c001e242:	68 e4 4f 02 c0       	push   0xc0024fe4
c001e247:	e8 9d 60 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001e24c:	83 c4 10             	add    esp,0x10
c001e24f:	83 c8 ff             	or     eax,0xffffffff
c001e252:	83 c4 0c             	add    esp,0xc
c001e255:	c3                   	ret    

c001e256 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e256:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e25a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e25d:	89 c2                	mov    edx,eax
c001e25f:	c1 ea 08             	shr    edx,0x8
c001e262:	83 e2 0f             	and    edx,0xf
c001e265:	fe ca                	dec    dl
c001e267:	75 31                	jne    c001e29a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e269:	83 e0 0f             	and    eax,0xf
c001e26c:	3c 03                	cmp    al,0x3
c001e26e:	75 2a                	jne    c001e29a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e270:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e273:	b8 02 00 00 00       	mov    eax,0x2
c001e278:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e27e:	74 1c                	je     c001e29c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e280:	b8 04 00 00 00       	mov    eax,0x4
c001e285:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e28b:	74 0f                	je     c001e29c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e28d:	31 c0                	xor    eax,eax
c001e28f:	83 fa 03             	cmp    edx,0x3
c001e292:	0f 94 c0             	sete   al
c001e295:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e299:	c3                   	ret    
c001e29a:	31 c0                	xor    eax,eax
c001e29c:	c3                   	ret    
c001e29d:	90                   	nop

c001e29e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2a5:	0f ba e2 0f          	bt     edx,0xf
c001e2a9:	72 f7                	jb     c001e2a2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e2ab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2ae:	83 ca 10             	or     edx,0x10
c001e2b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2b7:	83 ca 01             	or     edx,0x1
c001e2ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2bd:	c3                   	ret    

c001e2be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2c5:	83 e2 fe             	and    edx,0xfffffffe
c001e2c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2ce:	83 e2 ef             	and    edx,0xffffffef
c001e2d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2d7:	0f ba e2 0e          	bt     edx,0xe
c001e2db:	72 f7                	jb     c001e2d4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2e0:	0f ba e2 0f          	bt     edx,0xf
c001e2e4:	72 ee                	jb     c001e2d4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2e6:	c3                   	ret    
c001e2e7:	90                   	nop

c001e2e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e2e8:	55                   	push   ebp
c001e2e9:	57                   	push   edi
c001e2ea:	56                   	push   esi
c001e2eb:	53                   	push   ebx
c001e2ec:	83 ec 1c             	sub    esp,0x1c
c001e2ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e2f7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e2fb:	53                   	push   ebx
c001e2fc:	89 fd                	mov    ebp,edi
c001e2fe:	56                   	push   esi
c001e2ff:	c1 e5 0a             	shl    ebp,0xa
c001e302:	e8 b7 ff ff ff       	call   c001e2be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e307:	83 ec 0c             	sub    esp,0xc
c001e30a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e310:	01 e8                	add    eax,ebp
c001e312:	89 03                	mov    DWORD PTR [ebx],eax
c001e314:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e316:	68 00 04 00 00       	push   0x400
c001e31b:	6a 00                	push   0x0
c001e31d:	50                   	push   eax
c001e31e:	e8 61 23 fe ff       	call   c0000684 <memset>
c001e323:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e329:	89 fa                	mov    edx,edi
c001e32b:	01 e8                	add    eax,ebp
c001e32d:	c1 e7 0d             	shl    edi,0xd
c001e330:	89 03                	mov    DWORD PTR [ebx],eax
c001e332:	c1 e2 08             	shl    edx,0x8
c001e335:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e33c:	81 c2 00 80 00 00    	add    edx,0x8000
c001e342:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e346:	89 d0                	mov    eax,edx
c001e348:	83 c4 1c             	add    esp,0x1c
c001e34b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e351:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e354:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e357:	68 00 01 00 00       	push   0x100
c001e35c:	6a 00                	push   0x0
c001e35e:	50                   	push   eax
c001e35f:	e8 20 23 fe ff       	call   c0000684 <memset>
c001e364:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e368:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e36e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e374:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e378:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e37b:	83 c4 10             	add    esp,0x10
c001e37e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e385:	31 ff                	xor    edi,edi
c001e387:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e38d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e393:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e397:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e39d:	83 c5 20             	add    ebp,0x20
c001e3a0:	01 f8                	add    eax,edi
c001e3a2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e3a5:	52                   	push   edx
c001e3a6:	68 00 01 00 00       	push   0x100
c001e3ab:	6a 00                	push   0x0
c001e3ad:	50                   	push   eax
c001e3ae:	e8 d1 22 fe ff       	call   c0000684 <memset>
c001e3b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e3c0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e3c7:	01 f8                	add    eax,edi
c001e3c9:	81 c7 00 01 00 00    	add    edi,0x100
c001e3cf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e3d2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e3d8:	75 b3                	jne    c001e38d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e3da:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e3de:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e3e2:	83 c4 1c             	add    esp,0x1c
c001e3e5:	5b                   	pop    ebx
c001e3e6:	5e                   	pop    esi
c001e3e7:	5f                   	pop    edi
c001e3e8:	5d                   	pop    ebp
c001e3e9:	e9 b0 fe ff ff       	jmp    c001e29e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e3ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e3ee:	55                   	push   ebp
c001e3ef:	57                   	push   edi
c001e3f0:	56                   	push   esi
c001e3f1:	53                   	push   ebx
c001e3f2:	31 db                	xor    ebx,ebx
c001e3f4:	83 ec 0c             	sub    esp,0xc
c001e3f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e3ff:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e402:	f7 c7 01 00 00 00    	test   edi,0x1
c001e408:	74 7a                	je     c001e484 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e40a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e40e:	89 d8                	mov    eax,ebx
c001e410:	c1 e0 07             	shl    eax,0x7
c001e413:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e41a:	55                   	push   ebp
c001e41b:	56                   	push   esi
c001e41c:	e8 35 fe ff ff       	call   c001e256 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e421:	5a                   	pop    edx
c001e422:	83 f8 01             	cmp    eax,0x1
c001e425:	59                   	pop    ecx
c001e426:	75 21                	jne    c001e449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e428:	50                   	push   eax
c001e429:	53                   	push   ebx
c001e42a:	55                   	push   ebp
c001e42b:	56                   	push   esi
c001e42c:	e8 b7 fe ff ff       	call   c001e2e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e431:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e438:	e8 86 b5 fe ff       	call   c00099c3 <malloc>
c001e43d:	89 c5                	mov    ebp,eax
c001e43f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e442:	e8 7f 0d 00 00       	call   c001f1c6 <SATA::SATA()>
c001e447:	eb 24                	jmp    c001e46d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e449:	83 f8 04             	cmp    eax,0x4
c001e44c:	75 36                	jne    c001e484 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e44e:	51                   	push   ecx
c001e44f:	53                   	push   ebx
c001e450:	55                   	push   ebp
c001e451:	56                   	push   esi
c001e452:	e8 91 fe ff ff       	call   c001e2e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e457:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e45e:	e8 60 b5 fe ff       	call   c00099c3 <malloc>
c001e463:	89 c5                	mov    ebp,eax
c001e465:	89 04 24             	mov    DWORD PTR [esp],eax
c001e468:	e8 cf 10 00 00       	call   c001f53c <SATAPI::SATAPI()>
c001e46d:	58                   	pop    eax
c001e46e:	5a                   	pop    edx
c001e46f:	55                   	push   ebp
c001e470:	56                   	push   esi
c001e471:	e8 f8 f9 fe ff       	call   c000de6e <Device::addChild(Device*)>
c001e476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e479:	56                   	push   esi
c001e47a:	6a 00                	push   0x0
c001e47c:	53                   	push   ebx
c001e47d:	55                   	push   ebp
c001e47e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e481:	83 c4 20             	add    esp,0x20
c001e484:	d1 ef                	shr    edi,1
c001e486:	43                   	inc    ebx
c001e487:	83 fb 20             	cmp    ebx,0x20
c001e48a:	0f 85 72 ff ff ff    	jne    c001e402 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e490:	83 c4 0c             	add    esp,0xc
c001e493:	5b                   	pop    ebx
c001e494:	5e                   	pop    esi
c001e495:	5f                   	pop    edi
c001e496:	5d                   	pop    ebp
c001e497:	c3                   	ret    

c001e498 <SATABus::open(int, int, void*)>:
c001e498:	83 ec 14             	sub    esp,0x14
c001e49b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e49f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e4a5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e4ab:	52                   	push   edx
c001e4ac:	50                   	push   eax
c001e4ad:	e8 3c ff ff ff       	call   c001e3ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e4b2:	31 c0                	xor    eax,eax
c001e4b4:	83 c4 1c             	add    esp,0x1c
c001e4b7:	c3                   	ret    

c001e4b8 <ATA::close(int, int, void*)>:
c001e4b8:	83 ec 0c             	sub    esp,0xc
c001e4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4c5:	85 c0                	test   eax,eax
c001e4c7:	74 0c                	je     c001e4d5 <ATA::close(int, int, void*)+0x1d>
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	8b 10                	mov    edx,DWORD PTR [eax]
c001e4ce:	50                   	push   eax
c001e4cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e4d2:	83 c4 10             	add    esp,0x10
c001e4d5:	31 c0                	xor    eax,eax
c001e4d7:	83 c4 0c             	add    esp,0xc
c001e4da:	c3                   	ret    
c001e4db:	90                   	nop

c001e4dc <ATA::powerSaving(PowerSavingLevel)>:
c001e4dc:	c3                   	ret    
c001e4dd:	90                   	nop

c001e4de <ATA::ATA()>:
c001e4de:	83 ec 0c             	sub    esp,0xc
c001e4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e5:	83 ec 04             	sub    esp,0x4
c001e4e8:	68 00 02 00 00       	push   0x200
c001e4ed:	68 09 51 02 c0       	push   0xc0025109
c001e4f2:	50                   	push   eax
c001e4f3:	e8 ae fd fe ff       	call   c000e2a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e4f8:	83 c4 10             	add    esp,0x10
c001e4fb:	ba 8c 50 02 c0       	mov    edx,0xc002508c
c001e500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e504:	89 10                	mov    DWORD PTR [eax],edx
c001e506:	90                   	nop
c001e507:	83 c4 0c             	add    esp,0xc
c001e50a:	c3                   	ret    
c001e50b:	90                   	nop

c001e50c <ATA::flush(bool)>:
c001e50c:	53                   	push   ebx
c001e50d:	83 ec 08             	sub    esp,0x8
c001e510:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e519:	19 c0                	sbb    eax,eax
c001e51b:	83 e0 fd             	and    eax,0xfffffffd
c001e51e:	05 ea 00 00 00       	add    eax,0xea
c001e523:	50                   	push   eax
c001e524:	6a 07                	push   0x7
c001e526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e52d:	50                   	push   eax
c001e52e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e534:	e8 5d f1 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e539:	83 c4 0c             	add    esp,0xc
c001e53c:	6a 00                	push   0x0
c001e53e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e545:	50                   	push   eax
c001e546:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e54c:	e8 dd fb ff ff       	call   c001e12e <IDE::polling(unsigned char, unsigned int)>
c001e551:	83 c4 18             	add    esp,0x18
c001e554:	5b                   	pop    ebx
c001e555:	c3                   	ret    

c001e556 <ATA::readyForCommand()>:
c001e556:	56                   	push   esi
c001e557:	53                   	push   ebx
c001e558:	53                   	push   ebx
c001e559:	31 db                	xor    ebx,ebx
c001e55b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e55f:	51                   	push   ecx
c001e560:	6a 0c                	push   0xc
c001e562:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e569:	50                   	push   eax
c001e56a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e570:	e8 e1 f1 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001e575:	83 c4 10             	add    esp,0x10
c001e578:	a8 88                	test   al,0x88
c001e57a:	74 1f                	je     c001e59b <ATA::readyForCommand()+0x45>
c001e57c:	43                   	inc    ebx
c001e57d:	83 fb 63             	cmp    ebx,0x63
c001e580:	7e dd                	jle    c001e55f <ATA::readyForCommand()+0x9>
c001e582:	83 ec 0c             	sub    esp,0xc
c001e585:	6a 0a                	push   0xa
c001e587:	e8 28 9c ff ff       	call   c00181b4 <milliTenthSleep(unsigned int)>
c001e58c:	83 c4 10             	add    esp,0x10
c001e58f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e595:	75 c8                	jne    c001e55f <ATA::readyForCommand()+0x9>
c001e597:	31 c0                	xor    eax,eax
c001e599:	eb 02                	jmp    c001e59d <ATA::readyForCommand()+0x47>
c001e59b:	b0 01                	mov    al,0x1
c001e59d:	5a                   	pop    edx
c001e59e:	5b                   	pop    ebx
c001e59f:	5e                   	pop    esi
c001e5a0:	c3                   	ret    
c001e5a1:	90                   	nop

c001e5a2 <ATA::access(unsigned long long, int, void*, bool)>:
c001e5a2:	55                   	push   ebp
c001e5a3:	57                   	push   edi
c001e5a4:	56                   	push   esi
c001e5a5:	53                   	push   ebx
c001e5a6:	83 ec 38             	sub    esp,0x38
c001e5a9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e5ad:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e5b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e5b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e5b9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e5bd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e5c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e5c5:	68 38 50 02 c0       	push   0xc0025038
c001e5ca:	e8 59 e4 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e5cf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e5d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e5d9:	83 c4 10             	add    esp,0x10
c001e5dc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e5e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5e6:	c1 e0 06             	shl    eax,0x6
c001e5e9:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e5f1:	74 5d                	je     c001e650 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e5f3:	89 fa                	mov    edx,edi
c001e5f5:	89 f0                	mov    eax,esi
c001e5f7:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e5fb:	c1 ea 1c             	shr    edx,0x1c
c001e5fe:	89 d1                	mov    ecx,edx
c001e600:	09 c1                	or     ecx,eax
c001e602:	74 25                	je     c001e629 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e604:	31 ed                	xor    ebp,ebp
c001e606:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e60d:	89 fa                	mov    edx,edi
c001e60f:	89 f0                	mov    eax,esi
c001e611:	0f ad d0             	shrd   eax,edx,cl
c001e614:	d3 ea                	shr    edx,cl
c001e616:	f6 c1 20             	test   cl,0x20
c001e619:	74 02                	je     c001e61d <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e61b:	89 d0                	mov    eax,edx
c001e61d:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e621:	45                   	inc    ebp
c001e622:	83 fd 06             	cmp    ebp,0x6
c001e625:	75 df                	jne    c001e606 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e627:	eb 76                	jmp    c001e69f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e629:	89 f0                	mov    eax,esi
c001e62b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e630:	89 fa                	mov    edx,edi
c001e632:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e639:	0f ac d0 10          	shrd   eax,edx,0x10
c001e63d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e642:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e646:	c1 ee 18             	shr    esi,0x18
c001e649:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e64e:	eb 56                	jmp    c001e6a6 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e650:	6a 00                	push   0x0
c001e652:	6a 3f                	push   0x3f
c001e654:	57                   	push   edi
c001e655:	56                   	push   esi
c001e656:	e8 89 29 00 00       	call   c0020fe4 <__umoddi3>
c001e65b:	83 c4 10             	add    esp,0x10
c001e65e:	40                   	inc    eax
c001e65f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e663:	6a 00                	push   0x0
c001e665:	68 f0 03 00 00       	push   0x3f0
c001e66a:	57                   	push   edi
c001e66b:	56                   	push   esi
c001e66c:	e8 73 28 00 00       	call   c0020ee4 <__udivdi3>
c001e671:	83 c4 10             	add    esp,0x10
c001e674:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e679:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e680:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e685:	6a 00                	push   0x0
c001e687:	6a 3f                	push   0x3f
c001e689:	57                   	push   edi
c001e68a:	56                   	push   esi
c001e68b:	e8 54 28 00 00       	call   c0020ee4 <__udivdi3>
c001e690:	83 c4 10             	add    esp,0x10
c001e693:	89 c6                	mov    esi,eax
c001e695:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e69a:	83 e6 0f             	and    esi,0xf
c001e69d:	eb 07                	jmp    c001e6a6 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e69f:	31 f6                	xor    esi,esi
c001e6a1:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e6a6:	bf 01 00 00 00       	mov    edi,0x1
c001e6ab:	50                   	push   eax
c001e6ac:	6a 00                	push   0x0
c001e6ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6b5:	50                   	push   eax
c001e6b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e6ba:	e8 df f1 ff ff       	call   c001d89e <IDE::enableIRQs(unsigned char, bool)>
c001e6bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6c2:	e8 8f fe ff ff       	call   c001e556 <ATA::readyForCommand()>
c001e6c7:	83 c4 10             	add    esp,0x10
c001e6ca:	84 c0                	test   al,al
c001e6cc:	0f 84 bc 02 00 00    	je     c001e98e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e6d2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e6d8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e6de:	c1 e0 04             	shl    eax,0x4
c001e6e1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e6e8:	09 c6                	or     esi,eax
c001e6ea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e6ef:	75 05                	jne    c001e6f6 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e6f1:	83 ce a0             	or     esi,0xffffffa0
c001e6f4:	eb 03                	jmp    c001e6f9 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e6f6:	83 ce e0             	or     esi,0xffffffe0
c001e6f9:	89 f0                	mov    eax,esi
c001e6fb:	0f b6 f0             	movzx  esi,al
c001e6fe:	56                   	push   esi
c001e6ff:	6a 06                	push   0x6
c001e701:	51                   	push   ecx
c001e702:	52                   	push   edx
c001e703:	e8 8e ef ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e708:	83 c4 10             	add    esp,0x10
c001e70b:	6a 00                	push   0x0
c001e70d:	6a 01                	push   0x1
c001e70f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e716:	50                   	push   eax
c001e717:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e71d:	e8 74 ef ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e72a:	75 6e                	jne    c001e79a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e72c:	6a 00                	push   0x0
c001e72e:	6a 08                	push   0x8
c001e730:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e737:	50                   	push   eax
c001e738:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e73e:	e8 53 ef ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e743:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e748:	50                   	push   eax
c001e749:	6a 09                	push   0x9
c001e74b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e752:	50                   	push   eax
c001e753:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e759:	e8 38 ef ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e75e:	83 c4 20             	add    esp,0x20
c001e761:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e766:	50                   	push   eax
c001e767:	6a 0a                	push   0xa
c001e769:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e770:	50                   	push   eax
c001e771:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e777:	e8 1a ef ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e77c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e781:	50                   	push   eax
c001e782:	6a 0b                	push   0xb
c001e784:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e78b:	50                   	push   eax
c001e78c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e792:	e8 ff ee ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e797:	83 c4 20             	add    esp,0x20
c001e79a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e79f:	50                   	push   eax
c001e7a0:	6a 02                	push   0x2
c001e7a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7a9:	50                   	push   eax
c001e7aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b0:	e8 e1 ee ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7b5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e7ba:	50                   	push   eax
c001e7bb:	6a 03                	push   0x3
c001e7bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7c4:	50                   	push   eax
c001e7c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7cb:	e8 c6 ee ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d0:	83 c4 20             	add    esp,0x20
c001e7d3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e7d8:	50                   	push   eax
c001e7d9:	6a 04                	push   0x4
c001e7db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7e2:	50                   	push   eax
c001e7e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7e9:	e8 a8 ee ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7ee:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7f3:	50                   	push   eax
c001e7f4:	6a 05                	push   0x5
c001e7f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7fd:	50                   	push   eax
c001e7fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e804:	e8 8d ee ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e809:	83 c4 20             	add    esp,0x20
c001e80c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e811:	0f 94 c0             	sete   al
c001e814:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e819:	74 09                	je     c001e824 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e81b:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e822:	eb 07                	jmp    c001e82b <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e824:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e82b:	0f b6 c0             	movzx  eax,al
c001e82e:	50                   	push   eax
c001e82f:	6a 07                	push   0x7
c001e831:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e838:	50                   	push   eax
c001e839:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e83f:	e8 52 ee ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e844:	c7 04 24 45 50 02 c0 	mov    DWORD PTR [esp],0xc0025045
c001e84b:	e8 d8 e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e850:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e854:	83 c4 10             	add    esp,0x10
c001e857:	85 f6                	test   esi,esi
c001e859:	0f 84 f7 00 00 00    	je     c001e956 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e85f:	83 ec 0c             	sub    esp,0xc
c001e862:	68 48 50 02 c0       	push   0xc0025048
c001e867:	e8 bc e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e86c:	83 c4 0c             	add    esp,0xc
c001e86f:	6a 01                	push   0x1
c001e871:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e878:	50                   	push   eax
c001e879:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e87f:	e8 aa f8 ff ff       	call   c001e12e <IDE::polling(unsigned char, unsigned int)>
c001e884:	c7 04 24 4b 50 02 c0 	mov    DWORD PTR [esp],0xc002504b
c001e88b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e88f:	e8 94 e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e894:	83 c4 10             	add    esp,0x10
c001e897:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e89b:	84 c0                	test   al,al
c001e89d:	74 2b                	je     c001e8ca <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e89f:	0f b6 f8             	movzx  edi,al
c001e8a2:	57                   	push   edi
c001e8a3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e8aa:	50                   	push   eax
c001e8ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8b2:	50                   	push   eax
c001e8b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8b9:	e8 c0 f7 ff ff       	call   c001e07e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e8be:	c7 04 24 4e 50 02 c0 	mov    DWORD PTR [esp],0xc002504e
c001e8c5:	e9 bc 00 00 00       	jmp    c001e986 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e8ca:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e8cf:	74 50                	je     c001e921 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e8d1:	83 ec 0c             	sub    esp,0xc
c001e8d4:	31 ed                	xor    ebp,ebp
c001e8d6:	68 59 50 02 c0       	push   0xc0025059
c001e8db:	e8 48 e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e8e7:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e8eb:	50                   	push   eax
c001e8ec:	50                   	push   eax
c001e8ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8f4:	50                   	push   eax
c001e8f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8fb:	e8 84 ed ff ff       	call   c001d684 <IDE::getBase(unsigned char)>
c001e900:	89 c2                	mov    edx,eax
c001e902:	89 f8                	mov    eax,edi
c001e904:	66 ef                	out    dx,ax
c001e906:	45                   	inc    ebp
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e910:	75 d1                	jne    c001e8e3 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e912:	83 ec 0c             	sub    esp,0xc
c001e915:	68 5c 50 02 c0       	push   0xc002505c
c001e91a:	e8 09 e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e91f:	eb 24                	jmp    c001e945 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e921:	51                   	push   ecx
c001e922:	51                   	push   ecx
c001e923:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e92a:	50                   	push   eax
c001e92b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e931:	e8 4e ed ff ff       	call   c001d684 <IDE::getBase(unsigned char)>
c001e936:	b9 00 01 00 00       	mov    ecx,0x100
c001e93b:	89 c2                	mov    edx,eax
c001e93d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e941:	fc                   	cld    
c001e942:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	4e                   	dec    esi
c001e949:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e951:	e9 01 ff ff ff       	jmp    c001e857 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e956:	31 ff                	xor    edi,edi
c001e958:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e95d:	74 2f                	je     c001e98e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e95f:	83 ec 0c             	sub    esp,0xc
c001e962:	68 5f 50 02 c0       	push   0xc002505f
c001e967:	e8 bc e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e96c:	58                   	pop    eax
c001e96d:	31 c0                	xor    eax,eax
c001e96f:	5a                   	pop    edx
c001e970:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e975:	0f 94 c0             	sete   al
c001e978:	50                   	push   eax
c001e979:	53                   	push   ebx
c001e97a:	e8 8d fb ff ff       	call   c001e50c <ATA::flush(bool)>
c001e97f:	c7 04 24 62 50 02 c0 	mov    DWORD PTR [esp],0xc0025062
c001e986:	e8 9d e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	83 c4 2c             	add    esp,0x2c
c001e991:	89 f8                	mov    eax,edi
c001e993:	5b                   	pop    ebx
c001e994:	5e                   	pop    esi
c001e995:	5f                   	pop    edi
c001e996:	5d                   	pop    ebp
c001e997:	c3                   	ret    

c001e998 <ATA::read(unsigned long long, int, void*)>:
c001e998:	57                   	push   edi
c001e999:	b8 04 00 00 00       	mov    eax,0x4
c001e99e:	56                   	push   esi
c001e99f:	53                   	push   ebx
c001e9a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9a8:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e9b9:	77 25                	ja     c001e9e0 <ATA::read(unsigned long long, int, void*)+0x48>
c001e9bb:	b8 06 00 00 00       	mov    eax,0x6
c001e9c0:	85 f6                	test   esi,esi
c001e9c2:	74 1c                	je     c001e9e0 <ATA::read(unsigned long long, int, void*)+0x48>
c001e9c4:	50                   	push   eax
c001e9c5:	50                   	push   eax
c001e9c6:	6a 00                	push   0x0
c001e9c8:	56                   	push   esi
c001e9c9:	52                   	push   edx
c001e9ca:	53                   	push   ebx
c001e9cb:	51                   	push   ecx
c001e9cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e9d0:	e8 cd fb ff ff       	call   c001e5a2 <ATA::access(unsigned long long, int, void*, bool)>
c001e9d5:	83 c4 20             	add    esp,0x20
c001e9d8:	85 c0                	test   eax,eax
c001e9da:	0f 95 c0             	setne  al
c001e9dd:	0f b6 c0             	movzx  eax,al
c001e9e0:	5b                   	pop    ebx
c001e9e1:	5e                   	pop    esi
c001e9e2:	5f                   	pop    edi
c001e9e3:	c3                   	ret    

c001e9e4 <ATA::write(unsigned long long, int, void*)>:
c001e9e4:	55                   	push   ebp
c001e9e5:	57                   	push   edi
c001e9e6:	56                   	push   esi
c001e9e7:	53                   	push   ebx
c001e9e8:	83 ec 18             	sub    esp,0x18
c001e9eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e9ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e9f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e9f7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e9fb:	68 65 50 02 c0       	push   0xc0025065
c001ea00:	e8 23 e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ea05:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	b8 04 00 00 00       	mov    eax,0x4
c001ea10:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ea16:	77 25                	ja     c001ea3d <ATA::write(unsigned long long, int, void*)+0x59>
c001ea18:	b8 06 00 00 00       	mov    eax,0x6
c001ea1d:	85 f6                	test   esi,esi
c001ea1f:	74 1c                	je     c001ea3d <ATA::write(unsigned long long, int, void*)+0x59>
c001ea21:	50                   	push   eax
c001ea22:	50                   	push   eax
c001ea23:	6a 01                	push   0x1
c001ea25:	56                   	push   esi
c001ea26:	53                   	push   ebx
c001ea27:	55                   	push   ebp
c001ea28:	57                   	push   edi
c001ea29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea2d:	e8 70 fb ff ff       	call   c001e5a2 <ATA::access(unsigned long long, int, void*, bool)>
c001ea32:	83 c4 20             	add    esp,0x20
c001ea35:	85 c0                	test   eax,eax
c001ea37:	0f 95 c0             	setne  al
c001ea3a:	0f b6 c0             	movzx  eax,al
c001ea3d:	83 c4 0c             	add    esp,0xc
c001ea40:	5b                   	pop    ebx
c001ea41:	5e                   	pop    esi
c001ea42:	5f                   	pop    edi
c001ea43:	5d                   	pop    ebp
c001ea44:	c3                   	ret    
c001ea45:	90                   	nop

c001ea46 <ATA::detectCHS()>:
c001ea46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea4a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea50:	c1 e0 06             	shl    eax,0x6
c001ea53:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea59:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ea63:	c7 44 24 04 71 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025071
c001ea6b:	e9 79 58 ff ff       	jmp    c00142e9 <Krnl::panic(char const*)>

c001ea70 <ATA::open(int, int, void*)>:
c001ea70:	53                   	push   ebx
c001ea71:	83 ec 08             	sub    esp,0x8
c001ea74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea80:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ea86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea8c:	c1 e0 06             	shl    eax,0x6
c001ea8f:	01 d0                	add    eax,edx
c001ea91:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ea98:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ea9e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eaa5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eaaf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eab5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eabc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eac3:	75 0c                	jne    c001ead1 <ATA::open(int, int, void*)+0x61>
c001eac5:	83 ec 0c             	sub    esp,0xc
c001eac8:	53                   	push   ebx
c001eac9:	e8 78 ff ff ff       	call   c001ea46 <ATA::detectCHS()>
c001eace:	83 c4 10             	add    esp,0x10
c001ead1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ead7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eadd:	c1 e0 06             	shl    eax,0x6
c001eae0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eae7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eaf1:	d1 e8                	shr    eax,1
c001eaf3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eaf9:	6a 04                	push   0x4
c001eafb:	6a 0c                	push   0xc
c001eafd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb04:	50                   	push   eax
c001eb05:	52                   	push   edx
c001eb06:	e8 8b eb ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb0b:	90                   	nop
c001eb0c:	90                   	nop
c001eb0d:	6a 00                	push   0x0
c001eb0f:	6a 0c                	push   0xc
c001eb11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb18:	50                   	push   eax
c001eb19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb1f:	e8 72 eb ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb24:	83 c4 14             	add    esp,0x14
c001eb27:	53                   	push   ebx
c001eb28:	e8 e1 f7 fe ff       	call   c000e30e <PhysicalDisk::startCache()>
c001eb2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb30:	e8 15 18 ff ff       	call   c001034a <createPartitionsForDisk(PhysicalDisk*)>
c001eb35:	31 c0                	xor    eax,eax
c001eb37:	83 c4 18             	add    esp,0x18
c001eb3a:	5b                   	pop    ebx
c001eb3b:	c3                   	ret    

c001eb3c <ATAPI::write(unsigned long long, int, void*)>:
c001eb3c:	b8 03 00 00 00       	mov    eax,0x3
c001eb41:	c3                   	ret    

c001eb42 <ATAPI::close(int, int, void*)>:
c001eb42:	83 ec 0c             	sub    esp,0xc
c001eb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb4f:	85 c0                	test   eax,eax
c001eb51:	74 0c                	je     c001eb5f <ATAPI::close(int, int, void*)+0x1d>
c001eb53:	83 ec 0c             	sub    esp,0xc
c001eb56:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb58:	50                   	push   eax
c001eb59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb5c:	83 c4 10             	add    esp,0x10
c001eb5f:	31 c0                	xor    eax,eax
c001eb61:	83 c4 0c             	add    esp,0xc
c001eb64:	c3                   	ret    
c001eb65:	90                   	nop

c001eb66 <ATAPI::ATAPI()>:
c001eb66:	83 ec 0c             	sub    esp,0xc
c001eb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6d:	83 ec 04             	sub    esp,0x4
c001eb70:	68 00 08 00 00       	push   0x800
c001eb75:	68 a9 51 02 c0       	push   0xc00251a9
c001eb7a:	50                   	push   eax
c001eb7b:	e8 26 f7 fe ff       	call   c000e2a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eb80:	83 c4 10             	add    esp,0x10
c001eb83:	ba c4 50 02 c0       	mov    edx,0xc00250c4
c001eb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8c:	89 10                	mov    DWORD PTR [eax],edx
c001eb8e:	90                   	nop
c001eb8f:	83 c4 0c             	add    esp,0xc
c001eb92:	c3                   	ret    
c001eb93:	90                   	nop

c001eb94 <ATAPI::readyForCommand()>:
c001eb94:	56                   	push   esi
c001eb95:	53                   	push   ebx
c001eb96:	53                   	push   ebx
c001eb97:	31 db                	xor    ebx,ebx
c001eb99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb9d:	51                   	push   ecx
c001eb9e:	6a 0c                	push   0xc
c001eba0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eba7:	50                   	push   eax
c001eba8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ebae:	e8 a3 eb ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001ebb3:	83 c4 10             	add    esp,0x10
c001ebb6:	a8 88                	test   al,0x88
c001ebb8:	74 1f                	je     c001ebd9 <ATAPI::readyForCommand()+0x45>
c001ebba:	43                   	inc    ebx
c001ebbb:	83 fb 63             	cmp    ebx,0x63
c001ebbe:	7e dd                	jle    c001eb9d <ATAPI::readyForCommand()+0x9>
c001ebc0:	83 ec 0c             	sub    esp,0xc
c001ebc3:	6a 0a                	push   0xa
c001ebc5:	e8 ea 95 ff ff       	call   c00181b4 <milliTenthSleep(unsigned int)>
c001ebca:	83 c4 10             	add    esp,0x10
c001ebcd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ebd3:	75 c8                	jne    c001eb9d <ATAPI::readyForCommand()+0x9>
c001ebd5:	31 c0                	xor    eax,eax
c001ebd7:	eb 02                	jmp    c001ebdb <ATAPI::readyForCommand()+0x47>
c001ebd9:	b0 01                	mov    al,0x1
c001ebdb:	5a                   	pop    edx
c001ebdc:	5b                   	pop    ebx
c001ebdd:	5e                   	pop    esi
c001ebde:	c3                   	ret    
c001ebdf:	90                   	nop

c001ebe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ebe0:	55                   	push   ebp
c001ebe1:	57                   	push   edi
c001ebe2:	56                   	push   esi
c001ebe3:	53                   	push   ebx
c001ebe4:	83 ec 20             	sub    esp,0x20
c001ebe7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ebeb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ebef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ebf3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebf7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ebfb:	6a 01                	push   0x1
c001ebfd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec04:	50                   	push   eax
c001ec05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec0b:	e8 8e ec ff ff       	call   c001d89e <IDE::enableIRQs(unsigned char, bool)>
c001ec10:	5e                   	pop    esi
c001ec11:	58                   	pop    eax
c001ec12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec19:	50                   	push   eax
c001ec1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec20:	e8 4b ea ff ff       	call   c001d670 <IDE::prepareInterrupt(unsigned char)>
c001ec25:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec28:	e8 67 ff ff ff       	call   c001eb94 <ATAPI::readyForCommand()>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	84 c0                	test   al,al
c001ec32:	75 0a                	jne    c001ec3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ec34:	bb 01 00 00 00       	mov    ebx,0x1
c001ec39:	e9 57 02 00 00       	jmp    c001ee95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec3e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec44:	c1 e0 04             	shl    eax,0x4
c001ec47:	0f b6 c0             	movzx  eax,al
c001ec4a:	50                   	push   eax
c001ec4b:	6a 06                	push   0x6
c001ec4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec54:	50                   	push   eax
c001ec55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec5b:	e8 36 ea ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec60:	6a 00                	push   0x0
c001ec62:	6a 01                	push   0x1
c001ec64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec6b:	50                   	push   eax
c001ec6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec72:	e8 1f ea ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec77:	83 c4 20             	add    esp,0x20
c001ec7a:	0f b6 c3             	movzx  eax,bl
c001ec7d:	0f b6 df             	movzx  ebx,bh
c001ec80:	50                   	push   eax
c001ec81:	6a 04                	push   0x4
c001ec83:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec8a:	50                   	push   eax
c001ec8b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec91:	e8 00 ea ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec96:	53                   	push   ebx
c001ec97:	6a 05                	push   0x5
c001ec99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eca0:	50                   	push   eax
c001eca1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eca7:	e8 ea e9 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecac:	83 c4 20             	add    esp,0x20
c001ecaf:	68 a0 00 00 00       	push   0xa0
c001ecb4:	6a 07                	push   0x7
c001ecb6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecbd:	50                   	push   eax
c001ecbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecc4:	e8 cd e9 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecc9:	83 c4 0c             	add    esp,0xc
c001eccc:	6a 01                	push   0x1
c001ecce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecd5:	50                   	push   eax
c001ecd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecdc:	e8 4d f4 ff ff       	call   c001e12e <IDE::polling(unsigned char, unsigned int)>
c001ece1:	83 c4 10             	add    esp,0x10
c001ece4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ecea:	84 c0                	test   al,al
c001ecec:	74 23                	je     c001ed11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ecee:	0f b6 d8             	movzx  ebx,al
c001ecf1:	0f b6 d2             	movzx  edx,dl
c001ecf4:	53                   	push   ebx
c001ecf5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ecfc:	50                   	push   eax
c001ecfd:	52                   	push   edx
c001ecfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed04:	e8 75 f3 ff ff       	call   c001e07e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ed09:	83 c4 10             	add    esp,0x10
c001ed0c:	e9 84 01 00 00       	jmp    c001ee95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed11:	0f b6 d2             	movzx  edx,dl
c001ed14:	53                   	push   ebx
c001ed15:	53                   	push   ebx
c001ed16:	52                   	push   edx
c001ed17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed1d:	e8 62 e9 ff ff       	call   c001d684 <IDE::getBase(unsigned char)>
c001ed22:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed26:	b9 06 00 00 00       	mov    ecx,0x6
c001ed2b:	89 c2                	mov    edx,eax
c001ed2d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ed30:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed34:	83 c4 10             	add    esp,0x10
c001ed37:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed3d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed44:	85 db                	test   ebx,ebx
c001ed46:	0f 84 ec 00 00 00    	je     c001ee38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed4c:	51                   	push   ecx
c001ed4d:	51                   	push   ecx
c001ed4e:	52                   	push   edx
c001ed4f:	50                   	push   eax
c001ed50:	e8 af ea ff ff       	call   c001d804 <IDE::waitInterrupt(unsigned char)>
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	84 c0                	test   al,al
c001ed5a:	0f 84 d4 fe ff ff    	je     c001ec34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ed60:	56                   	push   esi
c001ed61:	56                   	push   esi
c001ed62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed69:	50                   	push   eax
c001ed6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed70:	e8 fb e8 ff ff       	call   c001d670 <IDE::prepareInterrupt(unsigned char)>
c001ed75:	83 c4 0c             	add    esp,0xc
c001ed78:	6a 04                	push   0x4
c001ed7a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed81:	50                   	push   eax
c001ed82:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed88:	e8 c9 e9 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001ed8d:	83 c4 0c             	add    esp,0xc
c001ed90:	89 c6                	mov    esi,eax
c001ed92:	6a 05                	push   0x5
c001ed94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed9b:	50                   	push   eax
c001ed9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eda2:	e8 af e9 ff ff       	call   c001d756 <IDE::read(unsigned char, unsigned char)>
c001eda7:	89 f1                	mov    ecx,esi
c001eda9:	0f b6 c0             	movzx  eax,al
c001edac:	0f b6 f1             	movzx  esi,cl
c001edaf:	c1 e0 08             	shl    eax,0x8
c001edb2:	09 c6                	or     esi,eax
c001edb4:	d1 fe                	sar    esi,1
c001edb6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001edba:	83 c4 10             	add    esp,0x10
c001edbd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001edc2:	74 41                	je     c001ee05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001edc4:	31 c9                	xor    ecx,ecx
c001edc6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edcc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001edd3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001edd7:	75 0a                	jne    c001ede3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001edd9:	01 c9                	add    ecx,ecx
c001eddb:	01 cd                	add    ebp,ecx
c001eddd:	4b                   	dec    ebx
c001edde:	e9 54 ff ff ff       	jmp    c001ed37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ede3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ede8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edec:	51                   	push   ecx
c001eded:	51                   	push   ecx
c001edee:	52                   	push   edx
c001edef:	50                   	push   eax
c001edf0:	e8 8f e8 ff ff       	call   c001d684 <IDE::getBase(unsigned char)>
c001edf5:	89 c2                	mov    edx,eax
c001edf7:	89 f0                	mov    eax,esi
c001edf9:	66 ef                	out    dx,ax
c001edfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001edff:	83 c4 10             	add    esp,0x10
c001ee02:	41                   	inc    ecx
c001ee03:	eb c1                	jmp    c001edc6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee05:	31 f6                	xor    esi,esi
c001ee07:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee0d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee14:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ee18:	75 06                	jne    c001ee20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ee1a:	01 f6                	add    esi,esi
c001ee1c:	01 f5                	add    ebp,esi
c001ee1e:	eb bd                	jmp    c001eddd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ee20:	51                   	push   ecx
c001ee21:	51                   	push   ecx
c001ee22:	52                   	push   edx
c001ee23:	50                   	push   eax
c001ee24:	e8 5b e8 ff ff       	call   c001d684 <IDE::getBase(unsigned char)>
c001ee29:	89 c2                	mov    edx,eax
c001ee2b:	66 ed                	in     ax,dx
c001ee2d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ee32:	83 c4 10             	add    esp,0x10
c001ee35:	46                   	inc    esi
c001ee36:	eb cf                	jmp    c001ee07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ee38:	51                   	push   ecx
c001ee39:	51                   	push   ecx
c001ee3a:	52                   	push   edx
c001ee3b:	50                   	push   eax
c001ee3c:	e8 c3 e9 ff ff       	call   c001d804 <IDE::waitInterrupt(unsigned char)>
c001ee41:	83 c4 10             	add    esp,0x10
c001ee44:	84 c0                	test   al,al
c001ee46:	0f 84 e8 fd ff ff    	je     c001ec34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee4c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee51:	52                   	push   edx
c001ee52:	52                   	push   edx
c001ee53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee5a:	50                   	push   eax
c001ee5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee61:	e8 0a e8 ff ff       	call   c001d670 <IDE::prepareInterrupt(unsigned char)>
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	50                   	push   eax
c001ee6a:	50                   	push   eax
c001ee6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee72:	50                   	push   eax
c001ee73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee79:	e8 06 e8 ff ff       	call   c001d684 <IDE::getBase(unsigned char)>
c001ee7e:	8d 50 07             	lea    edx,[eax+0x7]
c001ee81:	ec                   	in     al,dx
c001ee82:	83 c4 10             	add    esp,0x10
c001ee85:	a8 88                	test   al,0x88
c001ee87:	74 0a                	je     c001ee93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ee89:	4b                   	dec    ebx
c001ee8a:	75 dd                	jne    c001ee69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ee8c:	bb 02 00 00 00       	mov    ebx,0x2
c001ee91:	eb 02                	jmp    c001ee95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ee93:	31 db                	xor    ebx,ebx
c001ee95:	83 c4 1c             	add    esp,0x1c
c001ee98:	89 d8                	mov    eax,ebx
c001ee9a:	5b                   	pop    ebx
c001ee9b:	5e                   	pop    esi
c001ee9c:	5f                   	pop    edi
c001ee9d:	5d                   	pop    ebp
c001ee9e:	c3                   	ret    
c001ee9f:	90                   	nop

c001eea0 <ATAPI::diskRemoved()>:
c001eea0:	83 ec 18             	sub    esp,0x18
c001eea3:	68 b5 51 02 c0       	push   0xc00251b5
c001eea8:	e8 7b db fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001eead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeb1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001eeb8:	83 c4 1c             	add    esp,0x1c
c001eebb:	c3                   	ret    

c001eebc <ATAPI::eject()>:
c001eebc:	57                   	push   edi
c001eebd:	b9 03 00 00 00       	mov    ecx,0x3
c001eec2:	53                   	push   ebx
c001eec3:	83 ec 14             	sub    esp,0x14
c001eec6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001eeca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001eece:	fc                   	cld    
c001eecf:	31 c0                	xor    eax,eax
c001eed1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eed3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001eed8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eedd:	50                   	push   eax
c001eede:	50                   	push   eax
c001eedf:	6a 00                	push   0x0
c001eee1:	6a 00                	push   0x0
c001eee3:	6a 00                	push   0x0
c001eee5:	6a 02                	push   0x2
c001eee7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eeeb:	50                   	push   eax
c001eeec:	53                   	push   ebx
c001eeed:	e8 ee fc ff ff       	call   c001ebe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eef2:	83 c4 14             	add    esp,0x14
c001eef5:	53                   	push   ebx
c001eef6:	e8 a5 ff ff ff       	call   c001eea0 <ATAPI::diskRemoved()>
c001eefb:	83 c4 24             	add    esp,0x24
c001eefe:	31 c0                	xor    eax,eax
c001ef00:	5b                   	pop    ebx
c001ef01:	5f                   	pop    edi
c001ef02:	c3                   	ret    
c001ef03:	90                   	nop

c001ef04 <ATAPI::diskInserted()>:
c001ef04:	53                   	push   ebx
c001ef05:	83 ec 14             	sub    esp,0x14
c001ef08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ef0c:	68 cc 51 02 c0       	push   0xc00251cc
c001ef11:	e8 12 db fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ef16:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ef1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef20:	e8 e9 f3 fe ff       	call   c000e30e <PhysicalDisk::startCache()>
c001ef25:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ef29:	83 c4 18             	add    esp,0x18
c001ef2c:	5b                   	pop    ebx
c001ef2d:	e9 18 14 ff ff       	jmp    c001034a <createPartitionsForDisk(PhysicalDisk*)>

c001ef32 <ATAPI::detectMedia()>:
c001ef32:	56                   	push   esi
c001ef33:	53                   	push   ebx
c001ef34:	83 ec 28             	sub    esp,0x28
c001ef37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef3b:	6a 0c                	push   0xc
c001ef3d:	6a 00                	push   0x0
c001ef3f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ef43:	56                   	push   esi
c001ef44:	e8 3b 17 fe ff       	call   c0000684 <memset>
c001ef49:	58                   	pop    eax
c001ef4a:	5a                   	pop    edx
c001ef4b:	6a 00                	push   0x0
c001ef4d:	6a 00                	push   0x0
c001ef4f:	6a 00                	push   0x0
c001ef51:	6a 00                	push   0x0
c001ef53:	56                   	push   esi
c001ef54:	53                   	push   ebx
c001ef55:	e8 86 fc ff ff       	call   c001ebe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef5a:	83 c4 1c             	add    esp,0x1c
c001ef5d:	6a 0c                	push   0xc
c001ef5f:	6a 00                	push   0x0
c001ef61:	56                   	push   esi
c001ef62:	e8 1d 17 fe ff       	call   c0000684 <memset>
c001ef67:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ef6c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ef71:	59                   	pop    ecx
c001ef72:	58                   	pop    eax
c001ef73:	6a 01                	push   0x1
c001ef75:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ef79:	50                   	push   eax
c001ef7a:	6a 00                	push   0x0
c001ef7c:	6a 12                	push   0x12
c001ef7e:	56                   	push   esi
c001ef7f:	53                   	push   ebx
c001ef80:	e8 5b fc ff ff       	call   c001ebe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef85:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ef89:	83 c4 20             	add    esp,0x20
c001ef8c:	83 e0 7f             	and    eax,0x7f
c001ef8f:	3c 70                	cmp    al,0x70
c001ef91:	74 15                	je     c001efa8 <ATAPI::detectMedia()+0x76>
c001ef93:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ef9a:	75 0c                	jne    c001efa8 <ATAPI::detectMedia()+0x76>
c001ef9c:	83 ec 0c             	sub    esp,0xc
c001ef9f:	53                   	push   ebx
c001efa0:	e8 5f ff ff ff       	call   c001ef04 <ATAPI::diskInserted()>
c001efa5:	83 c4 10             	add    esp,0x10
c001efa8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001efac:	83 e0 0f             	and    eax,0xf
c001efaf:	3c 02                	cmp    al,0x2
c001efb1:	75 1b                	jne    c001efce <ATAPI::detectMedia()+0x9c>
c001efb3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001efb8:	75 2d                	jne    c001efe7 <ATAPI::detectMedia()+0xb5>
c001efba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efc1:	74 24                	je     c001efe7 <ATAPI::detectMedia()+0xb5>
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	53                   	push   ebx
c001efc7:	e8 d4 fe ff ff       	call   c001eea0 <ATAPI::diskRemoved()>
c001efcc:	eb 16                	jmp    c001efe4 <ATAPI::detectMedia()+0xb2>
c001efce:	84 c0                	test   al,al
c001efd0:	75 15                	jne    c001efe7 <ATAPI::detectMedia()+0xb5>
c001efd2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efd9:	75 0c                	jne    c001efe7 <ATAPI::detectMedia()+0xb5>
c001efdb:	83 ec 0c             	sub    esp,0xc
c001efde:	53                   	push   ebx
c001efdf:	e8 20 ff ff ff       	call   c001ef04 <ATAPI::diskInserted()>
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	83 c4 24             	add    esp,0x24
c001efea:	5b                   	pop    ebx
c001efeb:	5e                   	pop    esi
c001efec:	c3                   	ret    
c001efed:	90                   	nop

c001efee <ATAPI::open(int, int, void*)>:
c001efee:	53                   	push   ebx
c001efef:	83 ec 08             	sub    esp,0x8
c001eff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eff6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001effa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001effe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f004:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f00a:	c1 e0 06             	shl    eax,0x6
c001f00d:	01 d0                	add    eax,edx
c001f00f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f016:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f01c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f023:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f02d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f033:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f03a:	6a 04                	push   0x4
c001f03c:	6a 0c                	push   0xc
c001f03e:	51                   	push   ecx
c001f03f:	52                   	push   edx
c001f040:	e8 51 e6 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f045:	90                   	nop
c001f046:	90                   	nop
c001f047:	6a 00                	push   0x0
c001f049:	6a 0c                	push   0xc
c001f04b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f052:	50                   	push   eax
c001f053:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f059:	e8 38 e6 ff ff       	call   c001d696 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f05e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f065:	83 c4 14             	add    esp,0x14
c001f068:	53                   	push   ebx
c001f069:	e8 c4 fe ff ff       	call   c001ef32 <ATAPI::detectMedia()>
c001f06e:	31 c0                	xor    eax,eax
c001f070:	83 c4 18             	add    esp,0x18
c001f073:	5b                   	pop    ebx
c001f074:	c3                   	ret    
c001f075:	90                   	nop

c001f076 <ATAPI::read(unsigned long long, int, void*)>:
c001f076:	55                   	push   ebp
c001f077:	57                   	push   edi
c001f078:	56                   	push   esi
c001f079:	53                   	push   ebx
c001f07a:	83 ec 1c             	sub    esp,0x1c
c001f07d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f081:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f085:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f089:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f090:	74 41                	je     c001f0d3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f092:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f096:	b9 03 00 00 00       	mov    ecx,0x3
c001f09b:	fc                   	cld    
c001f09c:	31 c0                	xor    eax,eax
c001f09e:	86 fb                	xchg   bl,bh
c001f0a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f0a2:	c1 c3 10             	rol    ebx,0x10
c001f0a5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f0aa:	89 e8                	mov    eax,ebp
c001f0ac:	86 fb                	xchg   bl,bh
c001f0ae:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f0b2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f0b6:	50                   	push   eax
c001f0b7:	50                   	push   eax
c001f0b8:	55                   	push   ebp
c001f0b9:	c1 e5 0b             	shl    ebp,0xb
c001f0bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f0c0:	6a 00                	push   0x0
c001f0c2:	55                   	push   ebp
c001f0c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f0c7:	50                   	push   eax
c001f0c8:	56                   	push   esi
c001f0c9:	e8 12 fb ff ff       	call   c001ebe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f0ce:	83 c4 20             	add    esp,0x20
c001f0d1:	eb 1a                	jmp    c001f0ed <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f0d3:	83 ec 0c             	sub    esp,0xc
c001f0d6:	56                   	push   esi
c001f0d7:	e8 56 fe ff ff       	call   c001ef32 <ATAPI::detectMedia()>
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0e6:	75 aa                	jne    c001f092 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f0e8:	b8 02 00 00 00       	mov    eax,0x2
c001f0ed:	83 c4 1c             	add    esp,0x1c
c001f0f0:	5b                   	pop    ebx
c001f0f1:	5e                   	pop    esi
c001f0f2:	5f                   	pop    edi
c001f0f3:	5d                   	pop    ebp
c001f0f4:	c3                   	ret    
c001f0f5:	90                   	nop

c001f0f6 <SATA::close(int, int, void*)>:
c001f0f6:	83 ec 0c             	sub    esp,0xc
c001f0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f103:	85 c0                	test   eax,eax
c001f105:	74 0c                	je     c001f113 <SATA::close(int, int, void*)+0x1d>
c001f107:	83 ec 0c             	sub    esp,0xc
c001f10a:	8b 10                	mov    edx,DWORD PTR [eax]
c001f10c:	50                   	push   eax
c001f10d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f110:	83 c4 10             	add    esp,0x10
c001f113:	31 c0                	xor    eax,eax
c001f115:	83 c4 0c             	add    esp,0xc
c001f118:	c3                   	ret    
c001f119:	90                   	nop

c001f11a <SATA::powerSaving(PowerSavingLevel)>:
c001f11a:	c3                   	ret    
c001f11b:	90                   	nop

c001f11c <SATA::open(int, int, void*)>:
c001f11c:	56                   	push   esi
c001f11d:	53                   	push   ebx
c001f11e:	50                   	push   eax
c001f11f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f127:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f131:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f137:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f145:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f14f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f155:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f15c:	e8 5e ac fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f161:	89 c6                	mov    esi,eax
c001f163:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f169:	81 c6 00 10 00 00    	add    esi,0x1000
c001f16f:	e8 4b ac fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f174:	39 c6                	cmp    esi,eax
c001f176:	74 10                	je     c001f188 <SATA::open(int, int, void*)+0x6c>
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	68 f4 50 02 c0       	push   0xc00250f4
c001f180:	e8 64 51 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	6a 02                	push   0x2
c001f18d:	e8 bb c4 fe ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001f192:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f198:	6a 03                	push   0x3
c001f19a:	50                   	push   eax
c001f19b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f1a1:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c001f1a7:	e8 48 cb fe ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f1ac:	83 c4 14             	add    esp,0x14
c001f1af:	53                   	push   ebx
c001f1b0:	e8 59 f1 fe ff       	call   c000e30e <PhysicalDisk::startCache()>
c001f1b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1b8:	e8 8d 11 ff ff       	call   c001034a <createPartitionsForDisk(PhysicalDisk*)>
c001f1bd:	83 c4 14             	add    esp,0x14
c001f1c0:	31 c0                	xor    eax,eax
c001f1c2:	5b                   	pop    ebx
c001f1c3:	5e                   	pop    esi
c001f1c4:	c3                   	ret    
c001f1c5:	90                   	nop

c001f1c6 <SATA::SATA()>:
c001f1c6:	83 ec 0c             	sub    esp,0xc
c001f1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1cd:	83 ec 04             	sub    esp,0x4
c001f1d0:	68 00 02 00 00       	push   0x200
c001f1d5:	68 08 51 02 c0       	push   0xc0025108
c001f1da:	50                   	push   eax
c001f1db:	e8 c6 f0 fe ff       	call   c000e2a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f1e0:	83 c4 10             	add    esp,0x10
c001f1e3:	ba 78 51 02 c0       	mov    edx,0xc0025178
c001f1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ec:	89 10                	mov    DWORD PTR [eax],edx
c001f1ee:	90                   	nop
c001f1ef:	83 c4 0c             	add    esp,0xc
c001f1f2:	c3                   	ret    
c001f1f3:	90                   	nop

c001f1f4 <SATA::access(unsigned long long, int, void*, bool)>:
c001f1f4:	55                   	push   ebp
c001f1f5:	57                   	push   edi
c001f1f6:	56                   	push   esi
c001f1f7:	53                   	push   ebx
c001f1f8:	83 ec 2c             	sub    esp,0x2c
c001f1fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f1ff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f203:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f207:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f20b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f20f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f218:	7e 10                	jle    c001f22a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	68 18 51 02 c0       	push   0xc0025118
c001f222:	e8 c2 50 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f227:	83 c4 10             	add    esp,0x10
c001f22a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f230:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f236:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f240:	89 d0                	mov    eax,edx
c001f242:	c1 e0 07             	shl    eax,0x7
c001f245:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f249:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f253:	51                   	push   ecx
c001f254:	8d 42 02             	lea    eax,[edx+0x2]
c001f257:	51                   	push   ecx
c001f258:	c1 e0 07             	shl    eax,0x7
c001f25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f25f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f263:	50                   	push   eax
c001f264:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f26a:	e8 9f ef ff ff       	call   c001e20e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f26f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	b8 01 00 00 00       	mov    eax,0x1
c001f27b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f280:	0f 84 cb 01 00 00    	je     c001f451 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f286:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f28a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f28e:	c1 e0 09             	shl    eax,0x9
c001f291:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f296:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f29a:	74 0e                	je     c001f2aa <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f29c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f2a2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f2a6:	89 c1                	mov    ecx,eax
c001f2a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2ae:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f2b4:	8d 42 02             	lea    eax,[edx+0x2]
c001f2b7:	c1 e0 07             	shl    eax,0x7
c001f2ba:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f2be:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2c0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f2c6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f2cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2d0:	c1 e1 05             	shl    ecx,0x5
c001f2d3:	01 c8                	add    eax,ecx
c001f2d5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f2d9:	83 e1 01             	and    ecx,0x1
c001f2dc:	89 ce                	mov    esi,ecx
c001f2de:	8a 08                	mov    cl,BYTE PTR [eax]
c001f2e0:	c1 e6 06             	shl    esi,0x6
c001f2e3:	83 e1 bf             	and    ecx,0xffffffbf
c001f2e6:	09 f1                	or     ecx,esi
c001f2e8:	88 08                	mov    BYTE PTR [eax],cl
c001f2ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f2ec:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f2f2:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f2f8:	89 08                	mov    DWORD PTR [eax],ecx
c001f2fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f300:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f306:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f30c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f30f:	50                   	push   eax
c001f310:	68 90 00 00 00       	push   0x90
c001f315:	6a 00                	push   0x0
c001f317:	56                   	push   esi
c001f318:	e8 67 13 fe ff       	call   c0000684 <memset>
c001f31d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f323:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f327:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f32d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f331:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f335:	83 c4 10             	add    esp,0x10
c001f338:	48                   	dec    eax
c001f339:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f33e:	89 c1                	mov    ecx,eax
c001f340:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f346:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f34b:	09 c8                	or     eax,ecx
c001f34d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f353:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f356:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f35d:	66 25 00 7f          	and    ax,0x7f00
c001f361:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f365:	66 0d 27 80          	or     ax,0x8027
c001f369:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f36e:	66 89 06             	mov    WORD PTR [esi],ax
c001f371:	19 c0                	sbb    eax,eax
c001f373:	83 e0 f0             	and    eax,0xfffffff0
c001f376:	83 c0 35             	add    eax,0x35
c001f379:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f37c:	89 e8                	mov    eax,ebp
c001f37e:	c1 e8 10             	shr    eax,0x10
c001f381:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f384:	89 e8                	mov    eax,ebp
c001f386:	c1 e8 18             	shr    eax,0x18
c001f389:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f38c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f390:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f397:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f39a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f39e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f3a2:	89 d6                	mov    esi,edx
c001f3a4:	31 c0                	xor    eax,eax
c001f3a6:	c1 e6 07             	shl    esi,0x7
c001f3a9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f3ad:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f3b3:	80 e1 88             	and    cl,0x88
c001f3b6:	74 0a                	je     c001f3c2 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f3b8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f3bd:	74 0a                	je     c001f3c9 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f3bf:	40                   	inc    eax
c001f3c0:	eb eb                	jmp    c001f3ad <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f3c2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f3c7:	75 0a                	jne    c001f3d3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f3c9:	83 ec 0c             	sub    esp,0xc
c001f3cc:	68 51 51 02 c0       	push   0xc0025151
c001f3d1:	eb 56                	jmp    c001f429 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f3d3:	b8 01 00 00 00       	mov    eax,0x1
c001f3d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f3dc:	c1 e2 07             	shl    edx,0x7
c001f3df:	d3 e0                	shl    eax,cl
c001f3e1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f3e5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f3eb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f3f1:	85 c8                	test   eax,ecx
c001f3f3:	74 20                	je     c001f415 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f3f5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f3fb:	0f ba e1 1e          	bt     ecx,0x1e
c001f3ff:	73 ea                	jae    c001f3eb <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f401:	83 ec 0c             	sub    esp,0xc
c001f404:	68 5f 51 02 c0       	push   0xc002515f
c001f409:	e8 db 4e ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f40e:	83 c4 10             	add    esp,0x10
c001f411:	31 c0                	xor    eax,eax
c001f413:	eb 3c                	jmp    c001f451 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f415:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f41b:	0f ba e0 1e          	bt     eax,0x1e
c001f41f:	73 17                	jae    c001f438 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f421:	83 ec 0c             	sub    esp,0xc
c001f424:	68 5f 51 02 c0       	push   0xc002515f
c001f429:	e8 bb 4e ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f42e:	83 c4 10             	add    esp,0x10
c001f431:	b8 01 00 00 00       	mov    eax,0x1
c001f436:	eb 19                	jmp    c001f451 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f438:	31 c0                	xor    eax,eax
c001f43a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f43f:	75 10                	jne    c001f451 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f441:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f447:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f44b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f44f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f451:	83 c4 2c             	add    esp,0x2c
c001f454:	5b                   	pop    ebx
c001f455:	5e                   	pop    esi
c001f456:	5f                   	pop    edi
c001f457:	5d                   	pop    ebp
c001f458:	c3                   	ret    
c001f459:	90                   	nop

c001f45a <SATA::read(unsigned long long, int, void*)>:
c001f45a:	57                   	push   edi
c001f45b:	b8 04 00 00 00       	mov    eax,0x4
c001f460:	56                   	push   esi
c001f461:	53                   	push   ebx
c001f462:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f466:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f46a:	8d 7a ff             	lea    edi,[edx-0x1]
c001f46d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f471:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f475:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f47b:	77 25                	ja     c001f4a2 <SATA::read(unsigned long long, int, void*)+0x48>
c001f47d:	b8 06 00 00 00       	mov    eax,0x6
c001f482:	85 f6                	test   esi,esi
c001f484:	74 1c                	je     c001f4a2 <SATA::read(unsigned long long, int, void*)+0x48>
c001f486:	50                   	push   eax
c001f487:	50                   	push   eax
c001f488:	6a 00                	push   0x0
c001f48a:	56                   	push   esi
c001f48b:	52                   	push   edx
c001f48c:	53                   	push   ebx
c001f48d:	51                   	push   ecx
c001f48e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f492:	e8 5d fd ff ff       	call   c001f1f4 <SATA::access(unsigned long long, int, void*, bool)>
c001f497:	83 c4 20             	add    esp,0x20
c001f49a:	85 c0                	test   eax,eax
c001f49c:	0f 95 c0             	setne  al
c001f49f:	0f b6 c0             	movzx  eax,al
c001f4a2:	5b                   	pop    ebx
c001f4a3:	5e                   	pop    esi
c001f4a4:	5f                   	pop    edi
c001f4a5:	c3                   	ret    

c001f4a6 <SATA::write(unsigned long long, int, void*)>:
c001f4a6:	55                   	push   ebp
c001f4a7:	b8 04 00 00 00       	mov    eax,0x4
c001f4ac:	57                   	push   edi
c001f4ad:	56                   	push   esi
c001f4ae:	53                   	push   ebx
c001f4af:	83 ec 0c             	sub    esp,0xc
c001f4b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f4b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f4ba:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f4bd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f4c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f4c5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f4cb:	77 3d                	ja     c001f50a <SATA::write(unsigned long long, int, void*)+0x64>
c001f4cd:	b8 06 00 00 00       	mov    eax,0x6
c001f4d2:	85 ed                	test   ebp,ebp
c001f4d4:	74 34                	je     c001f50a <SATA::write(unsigned long long, int, void*)+0x64>
c001f4d6:	c1 e3 09             	shl    ebx,0x9
c001f4d9:	01 eb                	add    ebx,ebp
c001f4db:	89 d6                	mov    esi,edx
c001f4dd:	89 cf                	mov    edi,ecx
c001f4df:	83 c6 01             	add    esi,0x1
c001f4e2:	83 d7 00             	adc    edi,0x0
c001f4e5:	50                   	push   eax
c001f4e6:	50                   	push   eax
c001f4e7:	6a 01                	push   0x1
c001f4e9:	55                   	push   ebp
c001f4ea:	81 c5 00 02 00 00    	add    ebp,0x200
c001f4f0:	6a 01                	push   0x1
c001f4f2:	51                   	push   ecx
c001f4f3:	52                   	push   edx
c001f4f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f4f8:	e8 f7 fc ff ff       	call   c001f1f4 <SATA::access(unsigned long long, int, void*, bool)>
c001f4fd:	83 c4 20             	add    esp,0x20
c001f500:	89 f2                	mov    edx,esi
c001f502:	89 f9                	mov    ecx,edi
c001f504:	39 dd                	cmp    ebp,ebx
c001f506:	75 d3                	jne    c001f4db <SATA::write(unsigned long long, int, void*)+0x35>
c001f508:	31 c0                	xor    eax,eax
c001f50a:	83 c4 0c             	add    esp,0xc
c001f50d:	5b                   	pop    ebx
c001f50e:	5e                   	pop    esi
c001f50f:	5f                   	pop    edi
c001f510:	5d                   	pop    ebp
c001f511:	c3                   	ret    

c001f512 <SATAPI::write(unsigned long long, int, void*)>:
c001f512:	b8 03 00 00 00       	mov    eax,0x3
c001f517:	c3                   	ret    

c001f518 <SATAPI::close(int, int, void*)>:
c001f518:	83 ec 0c             	sub    esp,0xc
c001f51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f51f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f525:	85 c0                	test   eax,eax
c001f527:	74 0c                	je     c001f535 <SATAPI::close(int, int, void*)+0x1d>
c001f529:	83 ec 0c             	sub    esp,0xc
c001f52c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f52e:	50                   	push   eax
c001f52f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f532:	83 c4 10             	add    esp,0x10
c001f535:	31 c0                	xor    eax,eax
c001f537:	83 c4 0c             	add    esp,0xc
c001f53a:	c3                   	ret    
c001f53b:	90                   	nop

c001f53c <SATAPI::SATAPI()>:
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f543:	83 ec 04             	sub    esp,0x4
c001f546:	68 00 08 00 00       	push   0x800
c001f54b:	68 a8 51 02 c0       	push   0xc00251a8
c001f550:	50                   	push   eax
c001f551:	e8 50 ed fe ff       	call   c000e2a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f556:	83 c4 10             	add    esp,0x10
c001f559:	ba 54 52 02 c0       	mov    edx,0xc0025254
c001f55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f562:	89 10                	mov    DWORD PTR [eax],edx
c001f564:	90                   	nop
c001f565:	83 c4 0c             	add    esp,0xc
c001f568:	c3                   	ret    
c001f569:	90                   	nop

c001f56a <SATAPI::diskRemoved()>:
c001f56a:	83 ec 18             	sub    esp,0x18
c001f56d:	68 b4 51 02 c0       	push   0xc00251b4
c001f572:	e8 b1 d4 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001f577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f57b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f582:	83 c4 1c             	add    esp,0x1c
c001f585:	c3                   	ret    

c001f586 <SATAPI::diskInserted()>:
c001f586:	53                   	push   ebx
c001f587:	83 ec 14             	sub    esp,0x14
c001f58a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f58e:	68 cb 51 02 c0       	push   0xc00251cb
c001f593:	e8 90 d4 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001f598:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f59f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f5a2:	e8 67 ed fe ff       	call   c000e30e <PhysicalDisk::startCache()>
c001f5a7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f5ab:	83 c4 18             	add    esp,0x18
c001f5ae:	5b                   	pop    ebx
c001f5af:	e9 96 0d ff ff       	jmp    c001034a <createPartitionsForDisk(PhysicalDisk*)>

c001f5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f5b4:	55                   	push   ebp
c001f5b5:	57                   	push   edi
c001f5b6:	56                   	push   esi
c001f5b7:	53                   	push   ebx
c001f5b8:	83 ec 34             	sub    esp,0x34
c001f5bb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f5bf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f5c3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f5c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f5cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f5cf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f5d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f5df:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f5e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f5e9:	c1 e0 07             	shl    eax,0x7
c001f5ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f5f4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f5fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f602:	8d 58 02             	lea    ebx,[eax+0x2]
c001f605:	c1 e3 07             	shl    ebx,0x7
c001f608:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f60c:	53                   	push   ebx
c001f60d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f613:	e8 f6 eb ff ff       	call   c001e20e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f618:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	b8 01 00 00 00       	mov    eax,0x1
c001f624:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f629:	0f 84 85 01 00 00    	je     c001f7b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f62f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f635:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f637:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f63d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f643:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f647:	c1 e1 05             	shl    ecx,0x5
c001f64a:	01 c8                	add    eax,ecx
c001f64c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f64e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f654:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f65a:	89 08                	mov    DWORD PTR [eax],ecx
c001f65c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f662:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f668:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f66e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f671:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f674:	50                   	push   eax
c001f675:	68 90 00 00 00       	push   0x90
c001f67a:	6a 00                	push   0x0
c001f67c:	53                   	push   ebx
c001f67d:	e8 02 10 fe ff       	call   c0000684 <memset>
c001f682:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f686:	b9 0c 00 00 00       	mov    ecx,0xc
c001f68b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f68d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f693:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f697:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f69d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f6a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f6a5:	48                   	dec    eax
c001f6a6:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f6ab:	89 c1                	mov    ecx,eax
c001f6ad:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f6b3:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f6b8:	09 c8                	or     eax,ecx
c001f6ba:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f6c0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f6c3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f6ca:	66 25 00 7f          	and    ax,0x7f00
c001f6ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f6d2:	66 0d 27 80          	or     ax,0x8027
c001f6d6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f6da:	66 89 03             	mov    WORD PTR [ebx],ax
c001f6dd:	89 d0                	mov    eax,edx
c001f6df:	c1 ea 18             	shr    edx,0x18
c001f6e2:	c1 e8 10             	shr    eax,0x10
c001f6e5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f6e8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f6eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f6ef:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f6f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f6f6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f6f9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f6fd:	83 c4 10             	add    esp,0x10
c001f700:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f704:	31 c0                	xor    eax,eax
c001f706:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f70a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f710:	80 e2 88             	and    dl,0x88
c001f713:	74 0a                	je     c001f71f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f715:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f71a:	74 0a                	je     c001f726 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f71c:	40                   	inc    eax
c001f71d:	eb eb                	jmp    c001f70a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f71f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f724:	75 0f                	jne    c001f735 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f726:	83 ec 0c             	sub    esp,0xc
c001f729:	68 51 51 02 c0       	push   0xc0025151
c001f72e:	e8 b6 4b ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f733:	eb 3f                	jmp    c001f774 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f735:	ba 01 00 00 00       	mov    edx,0x1
c001f73a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f73e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f742:	d3 e2                	shl    edx,cl
c001f744:	c1 e0 07             	shl    eax,0x7
c001f747:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f74d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f751:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f757:	85 ca                	test   edx,ecx
c001f759:	74 23                	je     c001f77e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f75b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f761:	0f ba e1 1e          	bt     ecx,0x1e
c001f765:	73 ea                	jae    c001f751 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f767:	83 ec 0c             	sub    esp,0xc
c001f76a:	68 e3 51 02 c0       	push   0xc00251e3
c001f76f:	e8 b4 d2 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001f774:	83 c4 10             	add    esp,0x10
c001f777:	b8 01 00 00 00       	mov    eax,0x1
c001f77c:	eb 36                	jmp    c001f7b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f77e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f784:	0f ba e0 1e          	bt     eax,0x1e
c001f788:	73 0a                	jae    c001f794 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f78a:	83 ec 0c             	sub    esp,0xc
c001f78d:	68 f6 51 02 c0       	push   0xc00251f6
c001f792:	eb db                	jmp    c001f76f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f794:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f799:	74 17                	je     c001f7b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f79b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f7a0:	74 10                	je     c001f7b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7a2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f7a8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f7ac:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f7b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f7b2:	31 c0                	xor    eax,eax
c001f7b4:	83 c4 2c             	add    esp,0x2c
c001f7b7:	5b                   	pop    ebx
c001f7b8:	5e                   	pop    esi
c001f7b9:	5f                   	pop    edi
c001f7ba:	5d                   	pop    ebp
c001f7bb:	c3                   	ret    

c001f7bc <SATAPI::eject()>:
c001f7bc:	57                   	push   edi
c001f7bd:	b9 03 00 00 00       	mov    ecx,0x3
c001f7c2:	53                   	push   ebx
c001f7c3:	83 ec 14             	sub    esp,0x14
c001f7c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f7ca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f7ce:	fc                   	cld    
c001f7cf:	31 c0                	xor    eax,eax
c001f7d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f7d3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f7d8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f7dd:	50                   	push   eax
c001f7de:	6a 00                	push   0x0
c001f7e0:	6a 00                	push   0x0
c001f7e2:	6a 00                	push   0x0
c001f7e4:	6a 00                	push   0x0
c001f7e6:	6a 02                	push   0x2
c001f7e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7ec:	50                   	push   eax
c001f7ed:	53                   	push   ebx
c001f7ee:	e8 c1 fd ff ff       	call   c001f5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f7f3:	83 c4 14             	add    esp,0x14
c001f7f6:	53                   	push   ebx
c001f7f7:	e8 6e fd ff ff       	call   c001f56a <SATAPI::diskRemoved()>
c001f7fc:	83 c4 24             	add    esp,0x24
c001f7ff:	31 c0                	xor    eax,eax
c001f801:	5b                   	pop    ebx
c001f802:	5f                   	pop    edi
c001f803:	c3                   	ret    

c001f804 <SATAPI::detectMedia()>:
c001f804:	56                   	push   esi
c001f805:	53                   	push   ebx
c001f806:	83 ec 28             	sub    esp,0x28
c001f809:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f80d:	6a 0c                	push   0xc
c001f80f:	6a 00                	push   0x0
c001f811:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f815:	56                   	push   esi
c001f816:	e8 69 0e fe ff       	call   c0000684 <memset>
c001f81b:	83 c4 0c             	add    esp,0xc
c001f81e:	6a 00                	push   0x0
c001f820:	6a 00                	push   0x0
c001f822:	6a 00                	push   0x0
c001f824:	6a 00                	push   0x0
c001f826:	6a 00                	push   0x0
c001f828:	56                   	push   esi
c001f829:	53                   	push   ebx
c001f82a:	e8 85 fd ff ff       	call   c001f5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f82f:	83 c4 1c             	add    esp,0x1c
c001f832:	6a 0c                	push   0xc
c001f834:	6a 00                	push   0x0
c001f836:	56                   	push   esi
c001f837:	e8 48 0e fe ff       	call   c0000684 <memset>
c001f83c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f841:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f846:	83 c4 0c             	add    esp,0xc
c001f849:	6a 01                	push   0x1
c001f84b:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f84f:	50                   	push   eax
c001f850:	6a 00                	push   0x0
c001f852:	6a 00                	push   0x0
c001f854:	6a 12                	push   0x12
c001f856:	56                   	push   esi
c001f857:	53                   	push   ebx
c001f858:	e8 57 fd ff ff       	call   c001f5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f85d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f861:	83 c4 20             	add    esp,0x20
c001f864:	83 e0 7f             	and    eax,0x7f
c001f867:	3c 70                	cmp    al,0x70
c001f869:	74 15                	je     c001f880 <SATAPI::detectMedia()+0x7c>
c001f86b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f872:	75 0c                	jne    c001f880 <SATAPI::detectMedia()+0x7c>
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	53                   	push   ebx
c001f878:	e8 09 fd ff ff       	call   c001f586 <SATAPI::diskInserted()>
c001f87d:	83 c4 10             	add    esp,0x10
c001f880:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f884:	83 e0 0f             	and    eax,0xf
c001f887:	3c 02                	cmp    al,0x2
c001f889:	75 1b                	jne    c001f8a6 <SATAPI::detectMedia()+0xa2>
c001f88b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f890:	75 2d                	jne    c001f8bf <SATAPI::detectMedia()+0xbb>
c001f892:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f899:	74 24                	je     c001f8bf <SATAPI::detectMedia()+0xbb>
c001f89b:	83 ec 0c             	sub    esp,0xc
c001f89e:	53                   	push   ebx
c001f89f:	e8 c6 fc ff ff       	call   c001f56a <SATAPI::diskRemoved()>
c001f8a4:	eb 16                	jmp    c001f8bc <SATAPI::detectMedia()+0xb8>
c001f8a6:	84 c0                	test   al,al
c001f8a8:	75 15                	jne    c001f8bf <SATAPI::detectMedia()+0xbb>
c001f8aa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8b1:	75 0c                	jne    c001f8bf <SATAPI::detectMedia()+0xbb>
c001f8b3:	83 ec 0c             	sub    esp,0xc
c001f8b6:	53                   	push   ebx
c001f8b7:	e8 ca fc ff ff       	call   c001f586 <SATAPI::diskInserted()>
c001f8bc:	83 c4 10             	add    esp,0x10
c001f8bf:	83 c4 24             	add    esp,0x24
c001f8c2:	5b                   	pop    ebx
c001f8c3:	5e                   	pop    esi
c001f8c4:	c3                   	ret    
c001f8c5:	90                   	nop

c001f8c6 <SATAPI::open(int, int, void*)>:
c001f8c6:	56                   	push   esi
c001f8c7:	53                   	push   ebx
c001f8c8:	50                   	push   eax
c001f8c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f8cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f8d1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f8db:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f8e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8ef:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f8f9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f8ff:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f906:	e8 b4 a4 fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f90b:	89 c6                	mov    esi,eax
c001f90d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f913:	81 c6 00 10 00 00    	add    esi,0x1000
c001f919:	e8 a1 a4 fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f91e:	39 c6                	cmp    esi,eax
c001f920:	74 10                	je     c001f932 <SATAPI::open(int, int, void*)+0x6c>
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	68 0b 52 02 c0       	push   0xc002520b
c001f92a:	e8 ba 49 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f92f:	83 c4 10             	add    esp,0x10
c001f932:	83 ec 0c             	sub    esp,0xc
c001f935:	6a 02                	push   0x2
c001f937:	e8 11 bd fe ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001f93c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f942:	6a 03                	push   0x3
c001f944:	50                   	push   eax
c001f945:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f94b:	ff 35 d0 64 02 c0    	push   DWORD PTR ds:0xc00264d0
c001f951:	e8 9e c3 fe ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f956:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f95d:	83 c4 14             	add    esp,0x14
c001f960:	53                   	push   ebx
c001f961:	e8 9e fe ff ff       	call   c001f804 <SATAPI::detectMedia()>
c001f966:	83 c4 14             	add    esp,0x14
c001f969:	31 c0                	xor    eax,eax
c001f96b:	5b                   	pop    ebx
c001f96c:	5e                   	pop    esi
c001f96d:	c3                   	ret    

c001f96e <SATAPI::read(unsigned long long, int, void*)>:
c001f96e:	55                   	push   ebp
c001f96f:	57                   	push   edi
c001f970:	56                   	push   esi
c001f971:	53                   	push   ebx
c001f972:	83 ec 1c             	sub    esp,0x1c
c001f975:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f979:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f97d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f981:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f988:	74 19                	je     c001f9a3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f98a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f98f:	7e 2e                	jle    c001f9bf <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f991:	83 ec 0c             	sub    esp,0xc
c001f994:	68 21 52 02 c0       	push   0xc0025221
c001f999:	e8 4b 49 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	eb 1c                	jmp    c001f9bf <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9a3:	83 ec 0c             	sub    esp,0xc
c001f9a6:	55                   	push   ebp
c001f9a7:	e8 58 fe ff ff       	call   c001f804 <SATAPI::detectMedia()>
c001f9ac:	83 c4 10             	add    esp,0x10
c001f9af:	b8 02 00 00 00       	mov    eax,0x2
c001f9b4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9bb:	75 cd                	jne    c001f98a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f9bd:	eb 49                	jmp    c001fa08 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f9bf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f9c3:	b9 03 00 00 00       	mov    ecx,0x3
c001f9c8:	fc                   	cld    
c001f9c9:	31 c0                	xor    eax,eax
c001f9cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f9cd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f9d2:	89 d8                	mov    eax,ebx
c001f9d4:	86 e0                	xchg   al,ah
c001f9d6:	c1 c0 10             	rol    eax,0x10
c001f9d9:	86 e0                	xchg   al,ah
c001f9db:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001f9df:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001f9e3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f9e7:	50                   	push   eax
c001f9e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f9ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f9f0:	56                   	push   esi
c001f9f1:	53                   	push   ebx
c001f9f2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f9f6:	c1 e0 0b             	shl    eax,0xb
c001f9f9:	50                   	push   eax
c001f9fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9fe:	50                   	push   eax
c001f9ff:	55                   	push   ebp
c001fa00:	e8 af fb ff ff       	call   c001f5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa05:	83 c4 20             	add    esp,0x20
c001fa08:	83 c4 1c             	add    esp,0x1c
c001fa0b:	5b                   	pop    ebx
c001fa0c:	5e                   	pop    esi
c001fa0d:	5f                   	pop    edi
c001fa0e:	5d                   	pop    ebp
c001fa0f:	c3                   	ret    

c001fa10 <AVX::open(int, int, void*)>:
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	e8 30 11 00 00       	call   c0020b48 <avxInit>
c001fa18:	b8 00 00 00 00       	mov    eax,0x0
c001fa1d:	83 c4 0c             	add    esp,0xc
c001fa20:	c3                   	ret    
c001fa21:	90                   	nop
c001fa22:	66 90                	xchg   ax,ax

c001fa24 <AVX::close(int, int, void*)>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	e8 1d 11 00 00       	call   c0020b49 <avxClose>
c001fa2c:	b8 00 00 00 00       	mov    eax,0x0
c001fa31:	83 c4 0c             	add    esp,0xc
c001fa34:	c3                   	ret    
c001fa35:	90                   	nop
c001fa36:	66 90                	xchg   ax,ax

c001fa38 <AVX::available()>:
c001fa38:	83 ec 0c             	sub    esp,0xc
c001fa3b:	e8 00 11 00 00       	call   c0020b40 <avxDetect>
c001fa40:	85 c0                	test   eax,eax
c001fa42:	0f 95 c0             	setne  al
c001fa45:	83 c4 0c             	add    esp,0xc
c001fa48:	c3                   	ret    
c001fa49:	90                   	nop
c001fa4a:	66 90                	xchg   ax,ax

c001fa4c <AVX::save(void*)>:
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa53:	83 ec 0c             	sub    esp,0xc
c001fa56:	50                   	push   eax
c001fa57:	e8 ea 10 00 00       	call   c0020b46 <avxSave>
c001fa5c:	83 c4 10             	add    esp,0x10
c001fa5f:	90                   	nop
c001fa60:	83 c4 0c             	add    esp,0xc
c001fa63:	c3                   	ret    

c001fa64 <AVX::load(void*)>:
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa6b:	83 ec 0c             	sub    esp,0xc
c001fa6e:	50                   	push   eax
c001fa6f:	e8 d3 10 00 00       	call   c0020b47 <avxLoad>
c001fa74:	83 c4 10             	add    esp,0x10
c001fa77:	90                   	nop
c001fa78:	83 c4 0c             	add    esp,0xc
c001fa7b:	c3                   	ret    

c001fa7c <AVX::AVX()>:
c001fa7c:	83 ec 0c             	sub    esp,0xc
c001fa7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa83:	83 ec 08             	sub    esp,0x8
c001fa86:	68 84 52 02 c0       	push   0xc0025284
c001fa8b:	50                   	push   eax
c001fa8c:	e8 f3 e8 fe ff       	call   c000e384 <FPU::FPU(char const*)>
c001fa91:	83 c4 10             	add    esp,0x10
c001fa94:	ba 94 52 02 c0       	mov    edx,0xc0025294
c001fa99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9d:	89 10                	mov    DWORD PTR [eax],edx
c001fa9f:	90                   	nop
c001faa0:	83 c4 0c             	add    esp,0xc
c001faa3:	c3                   	ret    

c001faa4 <MMX::available()>:
c001faa4:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001faa9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001faaf:	83 e0 20             	and    eax,0x20
c001fab2:	84 c0                	test   al,al
c001fab4:	0f 95 c0             	setne  al
c001fab7:	c3                   	ret    

c001fab8 <MMX::open(int, int, void*)>:
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	e8 12 11 00 00       	call   c0020bd2 <x87Init>
c001fac0:	b8 00 00 00 00       	mov    eax,0x0
c001fac5:	83 c4 0c             	add    esp,0xc
c001fac8:	c3                   	ret    
c001fac9:	90                   	nop
c001faca:	66 90                	xchg   ax,ax

c001facc <MMX::close(int, int, void*)>:
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	e8 18 11 00 00       	call   c0020bec <x87Close>
c001fad4:	b8 00 00 00 00       	mov    eax,0x0
c001fad9:	83 c4 0c             	add    esp,0xc
c001fadc:	c3                   	ret    
c001fadd:	90                   	nop
c001fade:	66 90                	xchg   ax,ax

c001fae0 <MMX::save(void*)>:
c001fae0:	83 ec 0c             	sub    esp,0xc
c001fae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fae7:	83 ec 0c             	sub    esp,0xc
c001faea:	50                   	push   eax
c001faeb:	e8 d1 10 00 00       	call   c0020bc1 <x87Save>
c001faf0:	83 c4 10             	add    esp,0x10
c001faf3:	90                   	nop
c001faf4:	83 c4 0c             	add    esp,0xc
c001faf7:	c3                   	ret    

c001faf8 <MMX::load(void*)>:
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	50                   	push   eax
c001fb03:	e8 c2 10 00 00       	call   c0020bca <x87Load>
c001fb08:	83 c4 10             	add    esp,0x10
c001fb0b:	90                   	nop
c001fb0c:	83 c4 0c             	add    esp,0xc
c001fb0f:	c3                   	ret    

c001fb10 <MMX::MMX()>:
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	83 ec 08             	sub    esp,0x8
c001fb1a:	68 c4 52 02 c0       	push   0xc00252c4
c001fb1f:	50                   	push   eax
c001fb20:	e8 5f e8 fe ff       	call   c000e384 <FPU::FPU(char const*)>
c001fb25:	83 c4 10             	add    esp,0x10
c001fb28:	ba d4 52 02 c0       	mov    edx,0xc00252d4
c001fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb31:	89 10                	mov    DWORD PTR [eax],edx
c001fb33:	90                   	nop
c001fb34:	83 c4 0c             	add    esp,0xc
c001fb37:	c3                   	ret    

c001fb38 <SSE::open(int, int, void*)>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	e8 44 10 00 00       	call   c0020b84 <sseInit>
c001fb40:	b8 00 00 00 00       	mov    eax,0x0
c001fb45:	83 c4 0c             	add    esp,0xc
c001fb48:	c3                   	ret    
c001fb49:	90                   	nop
c001fb4a:	66 90                	xchg   ax,ax

c001fb4c <SSE::close(int, int, void*)>:
c001fb4c:	83 ec 0c             	sub    esp,0xc
c001fb4f:	e8 40 10 00 00       	call   c0020b94 <sseClose>
c001fb54:	b8 00 00 00 00       	mov    eax,0x0
c001fb59:	83 c4 0c             	add    esp,0xc
c001fb5c:	c3                   	ret    
c001fb5d:	90                   	nop
c001fb5e:	66 90                	xchg   ax,ax

c001fb60 <SSE::available()>:
c001fb60:	83 ec 1c             	sub    esp,0x1c
c001fb63:	e8 f8 0f 00 00       	call   c0020b60 <absolutelyNoChanceInHell>
c001fb68:	85 c0                	test   eax,eax
c001fb6a:	0f 95 c0             	setne  al
c001fb6d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fb71:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fb75:	83 c4 1c             	add    esp,0x1c
c001fb78:	c3                   	ret    
c001fb79:	90                   	nop
c001fb7a:	66 90                	xchg   ax,ax

c001fb7c <SSE::save(void*)>:
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	50                   	push   eax
c001fb87:	e8 ec 0f 00 00       	call   c0020b78 <sseSave>
c001fb8c:	83 c4 10             	add    esp,0x10
c001fb8f:	90                   	nop
c001fb90:	83 c4 0c             	add    esp,0xc
c001fb93:	c3                   	ret    

c001fb94 <SSE::load(void*)>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	50                   	push   eax
c001fb9f:	e8 da 0f 00 00       	call   c0020b7e <sseLoad>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	90                   	nop
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	c3                   	ret    

c001fbac <SSE::SSE()>:
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb3:	83 ec 08             	sub    esp,0x8
c001fbb6:	68 04 53 02 c0       	push   0xc0025304
c001fbbb:	50                   	push   eax
c001fbbc:	e8 c3 e7 fe ff       	call   c000e384 <FPU::FPU(char const*)>
c001fbc1:	83 c4 10             	add    esp,0x10
c001fbc4:	ba 14 53 02 c0       	mov    edx,0xc0025314
c001fbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcd:	89 10                	mov    DWORD PTR [eax],edx
c001fbcf:	90                   	nop
c001fbd0:	83 c4 0c             	add    esp,0xc
c001fbd3:	c3                   	ret    

c001fbd4 <x87::open(int, int, void*)>:
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	e8 f6 0f 00 00       	call   c0020bd2 <x87Init>
c001fbdc:	b8 00 00 00 00       	mov    eax,0x0
c001fbe1:	83 c4 0c             	add    esp,0xc
c001fbe4:	c3                   	ret    
c001fbe5:	90                   	nop
c001fbe6:	66 90                	xchg   ax,ax

c001fbe8 <x87::close(int, int, void*)>:
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	e8 fc 0f 00 00       	call   c0020bec <x87Close>
c001fbf0:	b8 00 00 00 00       	mov    eax,0x0
c001fbf5:	83 c4 0c             	add    esp,0xc
c001fbf8:	c3                   	ret    
c001fbf9:	90                   	nop
c001fbfa:	66 90                	xchg   ax,ax

c001fbfc <x87::available()>:
c001fbfc:	83 ec 0c             	sub    esp,0xc
c001fbff:	e8 a2 0f 00 00       	call   c0020ba6 <x87Detect>
c001fc04:	85 c0                	test   eax,eax
c001fc06:	0f 95 c0             	setne  al
c001fc09:	83 c4 0c             	add    esp,0xc
c001fc0c:	c3                   	ret    
c001fc0d:	90                   	nop
c001fc0e:	66 90                	xchg   ax,ax

c001fc10 <x87::save(void*)>:
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc17:	83 ec 0c             	sub    esp,0xc
c001fc1a:	50                   	push   eax
c001fc1b:	e8 a1 0f 00 00       	call   c0020bc1 <x87Save>
c001fc20:	83 c4 10             	add    esp,0x10
c001fc23:	90                   	nop
c001fc24:	83 c4 0c             	add    esp,0xc
c001fc27:	c3                   	ret    

c001fc28 <x87::load(void*)>:
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc2f:	83 ec 0c             	sub    esp,0xc
c001fc32:	50                   	push   eax
c001fc33:	e8 92 0f 00 00       	call   c0020bca <x87Load>
c001fc38:	83 c4 10             	add    esp,0x10
c001fc3b:	90                   	nop
c001fc3c:	83 c4 0c             	add    esp,0xc
c001fc3f:	c3                   	ret    

c001fc40 <x87::x87()>:
c001fc40:	83 ec 0c             	sub    esp,0xc
c001fc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc47:	83 ec 08             	sub    esp,0x8
c001fc4a:	68 44 53 02 c0       	push   0xc0025344
c001fc4f:	50                   	push   eax
c001fc50:	e8 2f e7 fe ff       	call   c000e384 <FPU::FPU(char const*)>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	ba 54 53 02 c0       	mov    edx,0xc0025354
c001fc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc61:	89 10                	mov    DWORD PTR [eax],edx
c001fc63:	90                   	nop
c001fc64:	83 c4 0c             	add    esp,0xc
c001fc67:	c3                   	ret    

c001fc68 <APIC::disable()>:
c001fc68:	90                   	nop
c001fc69:	c3                   	ret    

c001fc6a <APIC::close(int, int, void*)>:
c001fc6a:	55                   	push   ebp
c001fc6b:	89 e5                	mov    ebp,esp
c001fc6d:	83 ec 08             	sub    esp,0x8
c001fc70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc73:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc75:	83 c0 3c             	add    eax,0x3c
c001fc78:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc7a:	83 ec 0c             	sub    esp,0xc
c001fc7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc80:	ff d0                	call   eax
c001fc82:	83 c4 10             	add    esp,0x10
c001fc85:	b8 00 00 00 00       	mov    eax,0x0
c001fc8a:	c9                   	leave  
c001fc8b:	c3                   	ret    

c001fc8c <IOAPIC::close(int, int, void*)>:
c001fc8c:	b8 00 00 00 00       	mov    eax,0x0
c001fc91:	c3                   	ret    

c001fc92 <APIC::io_wait()>:
c001fc92:	eb 00                	jmp    c001fc94 <APIC::io_wait()+0x2>
c001fc94:	eb 00                	jmp    c001fc96 <APIC::io_wait()+0x4>
c001fc96:	90                   	nop
c001fc97:	c3                   	ret    

c001fc98 <APIC::getBase()>:
c001fc98:	55                   	push   ebp
c001fc99:	89 e5                	mov    ebp,esp
c001fc9b:	83 ec 18             	sub    esp,0x18
c001fc9e:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001fca3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fca9:	83 e0 08             	and    eax,0x8
c001fcac:	84 c0                	test   al,al
c001fcae:	75 07                	jne    c001fcb7 <APIC::getBase()+0x1f>
c001fcb0:	b8 00 00 00 00       	mov    eax,0x0
c001fcb5:	eb 21                	jmp    c001fcd8 <APIC::getBase()+0x40>
c001fcb7:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001fcbc:	83 ec 08             	sub    esp,0x8
c001fcbf:	6a 1b                	push   0x1b
c001fcc1:	50                   	push   eax
c001fcc2:	e8 5d 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fccd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fcd0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fcd3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fcd8:	c9                   	leave  
c001fcd9:	c3                   	ret    

c001fcda <APIC::eoi(unsigned char)>:
c001fcda:	55                   	push   ebp
c001fcdb:	89 e5                	mov    ebp,esp
c001fcdd:	83 ec 28             	sub    esp,0x28
c001fce0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fce3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcec:	e8 a7 ff ff ff       	call   c001fc98 <APIC::getBase()>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	05 b0 00 00 00       	add    eax,0xb0
c001fcf9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fcfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fcff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd05:	90                   	nop
c001fd06:	c9                   	leave  
c001fd07:	c3                   	ret    

c001fd08 <APIC::open(int, int, void*)>:
c001fd08:	55                   	push   ebp
c001fd09:	89 e5                	mov    ebp,esp
c001fd0b:	57                   	push   edi
c001fd0c:	56                   	push   esi
c001fd0d:	53                   	push   ebx
c001fd0e:	83 ec 2c             	sub    esp,0x2c
c001fd11:	83 ec 0c             	sub    esp,0xc
c001fd14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd17:	e8 7c ff ff ff       	call   c001fc98 <APIC::getBase()>
c001fd1c:	83 c4 10             	add    esp,0x10
c001fd1f:	89 c2                	mov    edx,eax
c001fd21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd24:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd2a:	0f b6 f8             	movzx  edi,al
c001fd2d:	89 d0                	mov    eax,edx
c001fd2f:	ba 00 00 00 00       	mov    edx,0x0
c001fd34:	89 c1                	mov    ecx,eax
c001fd36:	80 e5 ff             	and    ch,0xff
c001fd39:	89 cb                	mov    ebx,ecx
c001fd3b:	0f b6 f2             	movzx  esi,dl
c001fd3e:	89 d8                	mov    eax,ebx
c001fd40:	89 f2                	mov    edx,esi
c001fd42:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd45:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd48:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd4c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd50:	83 e0 00             	and    eax,0x0
c001fd53:	09 d0                	or     eax,edx
c001fd55:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd5c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd62:	8d 50 01             	lea    edx,[eax+0x1]
c001fd65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd68:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fd6e:	0f b6 d0             	movzx  edx,al
c001fd71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd74:	83 c2 08             	add    edx,0x8
c001fd77:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fd7b:	0f b6 c9             	movzx  ecx,cl
c001fd7e:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fd84:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd8e:	e8 05 ff ff ff       	call   c001fc98 <APIC::getBase()>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	05 f0 00 00 00       	add    eax,0xf0
c001fd9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fd9e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fda1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fda6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fdad:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fdb4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fdb7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fdba:	89 10                	mov    DWORD PTR [eax],edx
c001fdbc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fdc3:	a1 10 6c 02 c0       	mov    eax,ds:0xc0026c10
c001fdc8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fdcb:	7d 7c                	jge    c001fe49 <APIC::open(int, int, void*)+0x141>
c001fdcd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fdd0:	8b 04 85 20 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd93e0]
c001fdd7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fdda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fddd:	8b 04 85 20 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd93e0]
c001fde4:	c1 e8 08             	shr    eax,0x8
c001fde7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fdeb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fdee:	8b 04 85 20 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd93e0]
c001fdf5:	c1 e8 18             	shr    eax,0x18
c001fdf8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fdfb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fdff:	75 40                	jne    c001fe41 <APIC::open(int, int, void*)+0x139>
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe07:	e8 8c fe ff ff       	call   c001fc98 <APIC::getBase()>
c001fe0c:	83 c4 10             	add    esp,0x10
c001fe0f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fe13:	75 07                	jne    c001fe1c <APIC::open(int, int, void*)+0x114>
c001fe15:	ba 60 03 00 00       	mov    edx,0x360
c001fe1a:	eb 05                	jmp    c001fe21 <APIC::open(int, int, void*)+0x119>
c001fe1c:	ba 50 03 00 00       	mov    edx,0x350
c001fe21:	01 d0                	add    eax,edx
c001fe23:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fe26:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe29:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe2b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fe2e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fe35:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fe39:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe3c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fe3f:	89 10                	mov    DWORD PTR [eax],edx
c001fe41:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe44:	e9 7a ff ff ff       	jmp    c001fdc3 <APIC::open(int, int, void*)+0xbb>
c001fe49:	b8 00 00 00 00       	mov    eax,0x0
c001fe4e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe51:	5b                   	pop    ebx
c001fe52:	5e                   	pop    esi
c001fe53:	5f                   	pop    edi
c001fe54:	5d                   	pop    ebp
c001fe55:	c3                   	ret    

c001fe56 <IOAPIC::IOAPIC()>:
c001fe56:	83 ec 0c             	sub    esp,0xc
c001fe59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5d:	83 ec 08             	sub    esp,0x8
c001fe60:	68 84 53 02 c0       	push   0xc0025384
c001fe65:	50                   	push   eax
c001fe66:	e8 07 e2 fe ff       	call   c000e072 <Device::Device(char const*)>
c001fe6b:	83 c4 10             	add    esp,0x10
c001fe6e:	ba ac 54 02 c0       	mov    edx,0xc00254ac
c001fe73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe77:	89 10                	mov    DWORD PTR [eax],edx
c001fe79:	90                   	nop
c001fe7a:	83 c4 0c             	add    esp,0xc
c001fe7d:	c3                   	ret    

c001fe7e <APIC::APIC()>:
c001fe7e:	53                   	push   ebx
c001fe7f:	83 ec 18             	sub    esp,0x18
c001fe82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe86:	83 ec 08             	sub    esp,0x8
c001fe89:	68 8c 53 02 c0       	push   0xc002538c
c001fe8e:	50                   	push   eax
c001fe8f:	e8 56 e9 fe ff       	call   c000e7ea <InterruptController::InterruptController(char const*)>
c001fe94:	83 c4 10             	add    esp,0x10
c001fe97:	ba 64 54 02 c0       	mov    edx,0xc0025464
c001fe9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fea0:	89 10                	mov    DWORD PTR [eax],edx
c001fea2:	a0 e0 82 02 c0       	mov    al,ds:0xc00282e0
c001fea7:	83 f0 01             	xor    eax,0x1
c001feaa:	84 c0                	test   al,al
c001feac:	0f 84 a1 00 00 00    	je     c001ff53 <APIC::APIC()+0xd5>
c001feb2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001feb7:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c001febc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001fec0:	0f 83 86 00 00 00    	jae    c001ff4c <APIC::APIC()+0xce>
c001fec6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001fece:	83 ec 0c             	sub    esp,0xc
c001fed1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fed5:	e8 e9 9a fe ff       	call   c00099c3 <malloc>
c001feda:	83 c4 10             	add    esp,0x10
c001fedd:	89 c3                	mov    ebx,eax
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	53                   	push   ebx
c001fee3:	e8 6e ff ff ff       	call   c001fe56 <IOAPIC::IOAPIC()>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001feef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001fef4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fef8:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001feff:	a1 a0 82 02 c0       	mov    eax,ds:0xc00282a0
c001ff04:	40                   	inc    eax
c001ff05:	a3 a0 82 02 c0       	mov    ds:0xc00282a0,eax
c001ff0a:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c001ff0f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ff15:	83 ec 08             	sub    esp,0x8
c001ff18:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff1c:	50                   	push   eax
c001ff1d:	e8 4c df fe ff       	call   c000de6e <Device::addChild(Device*)>
c001ff22:	83 c4 10             	add    esp,0x10
c001ff25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff29:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff2b:	83 c0 08             	add    eax,0x8
c001ff2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff30:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ff35:	6a 00                	push   0x0
c001ff37:	6a 00                	push   0x0
c001ff39:	52                   	push   edx
c001ff3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff3e:	ff d0                	call   eax
c001ff40:	83 c4 10             	add    esp,0x10
c001ff43:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff47:	e9 6b ff ff ff       	jmp    c001feb7 <APIC::APIC()+0x39>
c001ff4c:	c6 05 e0 82 02 c0 01 	mov    BYTE PTR ds:0xc00282e0,0x1
c001ff53:	90                   	nop
c001ff54:	83 c4 18             	add    esp,0x18
c001ff57:	5b                   	pop    ebx
c001ff58:	c3                   	ret    
c001ff59:	90                   	nop

c001ff5a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ff5a:	55                   	push   ebp
c001ff5b:	89 e5                	mov    ebp,esp
c001ff5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ff66:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ff69:	72 1d                	jb     c001ff88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ff6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff6e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ff74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff77:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ff7d:	01 d0                	add    eax,edx
c001ff7f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ff82:	73 04                	jae    c001ff88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ff84:	b0 01                	mov    al,0x1
c001ff86:	eb 02                	jmp    c001ff8a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ff88:	b0 00                	mov    al,0x0
c001ff8a:	5d                   	pop    ebp
c001ff8b:	c3                   	ret    

c001ff8c <IOAPIC::read(int)>:
c001ff8c:	55                   	push   ebp
c001ff8d:	89 e5                	mov    ebp,esp
c001ff8f:	83 ec 10             	sub    esp,0x10
c001ff92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ff9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ff9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffa1:	0f b6 d0             	movzx  edx,al
c001ffa4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffa7:	89 10                	mov    DWORD PTR [eax],edx
c001ffa9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffac:	83 c0 10             	add    eax,0x10
c001ffaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffb1:	c9                   	leave  
c001ffb2:	c3                   	ret    
c001ffb3:	90                   	nop

c001ffb4 <IOAPIC::open(int, int, void*)>:
c001ffb4:	55                   	push   ebp
c001ffb5:	89 e5                	mov    ebp,esp
c001ffb7:	57                   	push   edi
c001ffb8:	56                   	push   esi
c001ffb9:	53                   	push   ebx
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	83 ec 0c             	sub    esp,0xc
c001ffc0:	68 b7 53 02 c0       	push   0xc00253b7
c001ffc5:	e8 5e ca fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ffca:	83 c4 10             	add    esp,0x10
c001ffcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ffd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ffd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffdc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffe2:	8b 14 85 00 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9300]
c001ffe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fff5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fffb:	8b 14 85 80 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9280]
c0020002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020005:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002000b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002000e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020017:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002001d:	0f b6 f8             	movzx  edi,al
c0020020:	89 d0                	mov    eax,edx
c0020022:	ba 00 00 00 00       	mov    edx,0x0
c0020027:	89 c1                	mov    ecx,eax
c0020029:	80 e5 ff             	and    ch,0xff
c002002c:	89 cb                	mov    ebx,ecx
c002002e:	0f b6 f2             	movzx  esi,dl
c0020031:	89 d8                	mov    eax,ebx
c0020033:	89 f2                	mov    edx,esi
c0020035:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020038:	8d 5f 08             	lea    ebx,[edi+0x8]
c002003b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002003f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020043:	83 e0 00             	and    eax,0x0
c0020046:	09 d0                	or     eax,edx
c0020048:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002004c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002004f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020055:	8d 50 01             	lea    edx,[eax+0x1]
c0020058:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002005b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020061:	0f b6 d0             	movzx  edx,al
c0020064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020067:	83 c2 08             	add    edx,0x8
c002006a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002006e:	0f b6 c9             	movzx  ecx,cl
c0020071:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020077:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002007b:	83 ec 08             	sub    esp,0x8
c002007e:	6a 01                	push   0x1
c0020080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020083:	e8 04 ff ff ff       	call   c001ff8c <IOAPIC::read(int)>
c0020088:	83 c4 10             	add    esp,0x10
c002008b:	c1 f8 10             	sar    eax,0x10
c002008e:	0f b6 c0             	movzx  eax,al
c0020091:	8d 50 01             	lea    edx,[eax+0x1]
c0020094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020097:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002009d:	b8 00 00 00 00       	mov    eax,0x0
c00200a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200a5:	5b                   	pop    ebx
c00200a6:	5e                   	pop    esi
c00200a7:	5f                   	pop    edi
c00200a8:	5d                   	pop    ebp
c00200a9:	c3                   	ret    

c00200aa <IOAPIC::write(int, int)>:
c00200aa:	55                   	push   ebp
c00200ab:	89 e5                	mov    ebp,esp
c00200ad:	83 ec 10             	sub    esp,0x10
c00200b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00200bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200bf:	0f b6 d0             	movzx  edx,al
c00200c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00200c5:	89 10                	mov    DWORD PTR [eax],edx
c00200c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00200ca:	8d 50 10             	lea    edx,[eax+0x10]
c00200cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00200d0:	89 02                	mov    DWORD PTR [edx],eax
c00200d2:	90                   	nop
c00200d3:	c9                   	leave  
c00200d4:	c3                   	ret    
c00200d5:	90                   	nop

c00200d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00200d6:	55                   	push   ebp
c00200d7:	89 e5                	mov    ebp,esp
c00200d9:	53                   	push   ebx
c00200da:	83 ec 2c             	sub    esp,0x2c
c00200dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200e0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00200e3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00200e6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00200e9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00200ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00200ef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00200f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00200f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00200f8:	88 d8                	mov    al,bl
c00200fa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00200fd:	88 c8                	mov    al,cl
c00200ff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020102:	88 d0                	mov    al,dl
c0020104:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020107:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002010b:	83 c0 08             	add    eax,0x8
c002010e:	01 c0                	add    eax,eax
c0020110:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020113:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020117:	83 c0 08             	add    eax,0x8
c002011a:	01 c0                	add    eax,eax
c002011c:	40                   	inc    eax
c002011d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020120:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020123:	50                   	push   eax
c0020124:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020127:	e8 60 fe ff ff       	call   c001ff8c <IOAPIC::read(int)>
c002012c:	83 c4 08             	add    esp,0x8
c002012f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020132:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020139:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002013c:	c1 e0 18             	shl    eax,0x18
c002013f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020142:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020145:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020148:	52                   	push   edx
c0020149:	50                   	push   eax
c002014a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002014d:	e8 58 ff ff ff       	call   c00200aa <IOAPIC::write(int, int)>
c0020152:	83 c4 0c             	add    esp,0xc
c0020155:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020158:	50                   	push   eax
c0020159:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002015c:	e8 2b fe ff ff       	call   c001ff8c <IOAPIC::read(int)>
c0020161:	83 c4 08             	add    esp,0x8
c0020164:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020167:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002016e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020175:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002017c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020180:	74 09                	je     c002018b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0020182:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020189:	eb 07                	jmp    c0020192 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002018b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020192:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020196:	74 09                	je     c00201a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020198:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002019f:	eb 07                	jmp    c00201a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00201a1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00201a8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00201af:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00201b3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00201b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00201b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201bc:	52                   	push   edx
c00201bd:	50                   	push   eax
c00201be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201c1:	e8 e4 fe ff ff       	call   c00200aa <IOAPIC::write(int, int)>
c00201c6:	83 c4 0c             	add    esp,0xc
c00201c9:	90                   	nop
c00201ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00201cd:	c9                   	leave  
c00201ce:	c3                   	ret    
c00201cf:	90                   	nop

c00201d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00201d0:	55                   	push   ebp
c00201d1:	89 e5                	mov    ebp,esp
c00201d3:	57                   	push   edi
c00201d4:	56                   	push   esi
c00201d5:	53                   	push   ebx
c00201d6:	83 ec 2c             	sub    esp,0x2c
c00201d9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00201dc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00201df:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00201e3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00201e7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201eb:	74 5a                	je     c0020247 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201ed:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00201f1:	7f 44                	jg     c0020237 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00201f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201f6:	05 60 5a 02 c0       	add    eax,0xc0025a60
c00201fb:	8a 00                	mov    al,BYTE PTR [eax]
c00201fd:	0f b6 c0             	movzx  eax,al
c0020200:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0020203:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020206:	66 8b 84 00 a0 6c 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9360]
c002020e:	0f b7 c0             	movzx  eax,ax
c0020211:	83 e0 02             	and    eax,0x2
c0020214:	85 c0                	test   eax,eax
c0020216:	74 04                	je     c002021c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0020218:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002021c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002021f:	66 8b 84 00 a0 6c 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9360]
c0020227:	0f b7 c0             	movzx  eax,ax
c002022a:	83 e0 08             	and    eax,0x8
c002022d:	85 c0                	test   eax,eax
c002022f:	74 16                	je     c0020247 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020231:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020235:	eb 10                	jmp    c0020247 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	68 c8 53 02 c0       	push   0xc00253c8
c002023f:	e8 a5 40 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0020244:	83 c4 10             	add    esp,0x10
c0020247:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002024b:	a1 a0 82 02 c0       	mov    eax,ds:0xc00282a0
c0020250:	83 ec 08             	sub    esp,0x8
c0020253:	50                   	push   eax
c0020254:	68 00 54 02 c0       	push   0xc0025400
c0020259:	e8 ca c7 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c002025e:	83 c4 10             	add    esp,0x10
c0020261:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020268:	a1 a0 82 02 c0       	mov    eax,ds:0xc00282a0
c002026d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0020270:	7d 67                	jge    c00202d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020272:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020275:	8b 04 85 c0 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7d40]
c002027c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002027f:	83 ec 08             	sub    esp,0x8
c0020282:	52                   	push   edx
c0020283:	50                   	push   eax
c0020284:	e8 d1 fc ff ff       	call   c001ff5a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	84 c0                	test   al,al
c002028e:	74 44                	je     c00202d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0020290:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020293:	8b 1c 85 c0 82 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7d40]
c002029a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002029e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00202a1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00202a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202a8:	83 c0 20             	add    eax,0x20
c00202ab:	0f b6 f0             	movzx  esi,al
c00202ae:	b8 00 00 00 00       	mov    eax,0x0
c00202b3:	99                   	cdq    
c00202b4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00202b7:	0f b6 c9             	movzx  ecx,cl
c00202ba:	83 ec 04             	sub    esp,0x4
c00202bd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00202c0:	57                   	push   edi
c00202c1:	56                   	push   esi
c00202c2:	52                   	push   edx
c00202c3:	50                   	push   eax
c00202c4:	51                   	push   ecx
c00202c5:	53                   	push   ebx
c00202c6:	e8 0b fe ff ff       	call   c00200d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00202cb:	83 c4 20             	add    esp,0x20
c00202ce:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00202d2:	eb 05                	jmp    c00202d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00202d4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00202d7:	eb 8f                	jmp    c0020268 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00202d9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00202dc:	83 f0 01             	xor    eax,0x1
c00202df:	84 c0                	test   al,al
c00202e1:	74 10                	je     c00202f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00202e3:	83 ec 0c             	sub    esp,0xc
c00202e6:	68 17 54 02 c0       	push   0xc0025417
c00202eb:	e8 f9 3f ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00202f0:	83 c4 10             	add    esp,0x10
c00202f3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00202f7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00202fe:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0020302:	7f 65                	jg     c0020369 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020307:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002030a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020311:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020314:	01 ca                	add    edx,ecx
c0020316:	83 c2 54             	add    edx,0x54
c0020319:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002031d:	85 c0                	test   eax,eax
c002031f:	75 43                	jne    c0020364 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0020321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020324:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020327:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002032e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020331:	01 ca                	add    edx,ecx
c0020333:	8d 4a 54             	lea    ecx,[edx+0x54]
c0020336:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020339:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002033d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020340:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020343:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002034a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002034d:	01 ca                	add    edx,ecx
c002034f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020355:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020358:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002035c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002035f:	83 e8 20             	sub    eax,0x20
c0020362:	eb 1a                	jmp    c002037e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0020364:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0020367:	eb 95                	jmp    c00202fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020369:	83 ec 0c             	sub    esp,0xc
c002036c:	68 24 54 02 c0       	push   0xc0025424
c0020371:	e8 73 3f ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0020376:	83 c4 10             	add    esp,0x10
c0020379:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002037e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020381:	5b                   	pop    ebx
c0020382:	5e                   	pop    esi
c0020383:	5f                   	pop    edi
c0020384:	5d                   	pop    ebp
c0020385:	c3                   	ret    

c0020386 <PIC::disable()>:
c0020386:	55                   	push   ebp
c0020387:	89 e5                	mov    ebp,esp
c0020389:	83 ec 10             	sub    esp,0x10
c002038c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0020392:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0020396:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020399:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002039d:	ee                   	out    dx,al
c002039e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00203a4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00203a8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00203ab:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00203af:	ee                   	out    dx,al
c00203b0:	90                   	nop
c00203b1:	c9                   	leave  
c00203b2:	c3                   	ret    
c00203b3:	90                   	nop

c00203b4 <PIC::close(int, int, void*)>:
c00203b4:	55                   	push   ebp
c00203b5:	89 e5                	mov    ebp,esp
c00203b7:	83 ec 08             	sub    esp,0x8
c00203ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00203bf:	83 c0 3c             	add    eax,0x3c
c00203c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00203c4:	83 ec 0c             	sub    esp,0xc
c00203c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00203ca:	ff d0                	call   eax
c00203cc:	83 c4 10             	add    esp,0x10
c00203cf:	b8 00 00 00 00       	mov    eax,0x0
c00203d4:	c9                   	leave  
c00203d5:	c3                   	ret    

c00203d6 <PIC::PIC()>:
c00203d6:	83 ec 0c             	sub    esp,0xc
c00203d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203dd:	83 ec 08             	sub    esp,0x8
c00203e0:	68 d0 54 02 c0       	push   0xc00254d0
c00203e5:	50                   	push   eax
c00203e6:	e8 ff e3 fe ff       	call   c000e7ea <InterruptController::InterruptController(char const*)>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	ba fc 54 02 c0       	mov    edx,0xc00254fc
c00203f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f7:	89 10                	mov    DWORD PTR [eax],edx
c00203f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020403:	0f b6 d0             	movzx  edx,al
c0020406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0020411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020415:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002041b:	0f b6 d0             	movzx  edx,al
c002041e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020422:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020431:	8d 50 01             	lea    edx,[eax+0x1]
c0020434:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020438:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002043e:	0f b6 d0             	movzx  edx,al
c0020441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020445:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020449:	83 e1 3f             	and    ecx,0x3f
c002044c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020454:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002045a:	0f b6 d0             	movzx  edx,al
c002045d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020461:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020472:	0f b6 d0             	movzx  edx,al
c0020475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020479:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002047e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020482:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020488:	8d 50 01             	lea    edx,[eax+0x1]
c002048b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002048f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020495:	0f b6 d0             	movzx  edx,al
c0020498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204a0:	83 e1 3f             	and    ecx,0x3f
c00204a3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204a7:	90                   	nop
c00204a8:	83 c4 0c             	add    esp,0xc
c00204ab:	c3                   	ret    

c00204ac <PIC::ioWait()>:
c00204ac:	eb 00                	jmp    c00204ae <PIC::ioWait()+0x2>
c00204ae:	eb 00                	jmp    c00204b0 <PIC::ioWait()+0x4>
c00204b0:	90                   	nop
c00204b1:	c3                   	ret    

c00204b2 <PIC::getIRQReg(int)>:
c00204b2:	55                   	push   ebp
c00204b3:	89 e5                	mov    ebp,esp
c00204b5:	83 ec 10             	sub    esp,0x10
c00204b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204bb:	0f b6 c0             	movzx  eax,al
c00204be:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00204c4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00204c7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00204ca:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00204ce:	ee                   	out    dx,al
c00204cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204d2:	0f b6 c0             	movzx  eax,al
c00204d5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00204db:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00204de:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00204e1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00204e5:	ee                   	out    dx,al
c00204e6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00204ec:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00204f0:	89 c2                	mov    edx,eax
c00204f2:	ec                   	in     al,dx
c00204f3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00204f6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00204f9:	0f b6 c0             	movzx  eax,al
c00204fc:	c1 e0 08             	shl    eax,0x8
c00204ff:	89 c1                	mov    ecx,eax
c0020501:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0020507:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002050b:	89 c2                	mov    edx,eax
c002050d:	ec                   	in     al,dx
c002050e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0020511:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020514:	0f b6 c0             	movzx  eax,al
c0020517:	09 c8                	or     eax,ecx
c0020519:	c9                   	leave  
c002051a:	c3                   	ret    
c002051b:	90                   	nop

c002051c <PIC::eoi(unsigned char)>:
c002051c:	55                   	push   ebp
c002051d:	89 e5                	mov    ebp,esp
c002051f:	83 ec 14             	sub    esp,0x14
c0020522:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020525:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0020528:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002052c:	75 1e                	jne    c002054c <PIC::eoi(unsigned char)+0x30>
c002052e:	6a 0b                	push   0xb
c0020530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020533:	e8 7a ff ff ff       	call   c00204b2 <PIC::getIRQReg(int)>
c0020538:	83 c4 08             	add    esp,0x8
c002053b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002053f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0020543:	25 80 00 00 00       	and    eax,0x80
c0020548:	85 c0                	test   eax,eax
c002054a:	74 5f                	je     c00205ab <PIC::eoi(unsigned char)+0x8f>
c002054c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0020550:	75 2d                	jne    c002057f <PIC::eoi(unsigned char)+0x63>
c0020552:	6a 0b                	push   0xb
c0020554:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020557:	e8 56 ff ff ff       	call   c00204b2 <PIC::getIRQReg(int)>
c002055c:	83 c4 08             	add    esp,0x8
c002055f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0020563:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020566:	66 85 c0             	test   ax,ax
c0020569:	78 14                	js     c002057f <PIC::eoi(unsigned char)+0x63>
c002056b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0020571:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0020575:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020578:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002057c:	ee                   	out    dx,al
c002057d:	eb 2d                	jmp    c00205ac <PIC::eoi(unsigned char)+0x90>
c002057f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020583:	76 12                	jbe    c0020597 <PIC::eoi(unsigned char)+0x7b>
c0020585:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002058b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002058f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020592:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020596:	ee                   	out    dx,al
c0020597:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002059d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00205a1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00205a4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00205a8:	ee                   	out    dx,al
c00205a9:	eb 01                	jmp    c00205ac <PIC::eoi(unsigned char)+0x90>
c00205ab:	90                   	nop
c00205ac:	c9                   	leave  
c00205ad:	c3                   	ret    

c00205ae <PIC::remap()>:
c00205ae:	55                   	push   ebp
c00205af:	89 e5                	mov    ebp,esp
c00205b1:	83 ec 48             	sub    esp,0x48
c00205b4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00205bb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00205c2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00205c8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00205cb:	89 c2                	mov    edx,eax
c00205cd:	ec                   	in     al,dx
c00205ce:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00205d1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00205d4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00205d7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00205dd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00205e0:	89 c2                	mov    edx,eax
c00205e2:	ec                   	in     al,dx
c00205e3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00205e6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00205e9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00205ec:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00205f2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00205f6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00205f9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00205fc:	ee                   	out    dx,al
c00205fd:	83 ec 0c             	sub    esp,0xc
c0020600:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020603:	e8 a4 fe ff ff       	call   c00204ac <PIC::ioWait()>
c0020608:	83 c4 10             	add    esp,0x10
c002060b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0020611:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020615:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0020618:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002061b:	ee                   	out    dx,al
c002061c:	83 ec 0c             	sub    esp,0xc
c002061f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020622:	e8 85 fe ff ff       	call   c00204ac <PIC::ioWait()>
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002062d:	0f b6 c0             	movzx  eax,al
c0020630:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0020636:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020639:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002063c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002063f:	ee                   	out    dx,al
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020646:	e8 61 fe ff ff       	call   c00204ac <PIC::ioWait()>
c002064b:	83 c4 10             	add    esp,0x10
c002064e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020651:	0f b6 c0             	movzx  eax,al
c0020654:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002065a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002065d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0020660:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020663:	ee                   	out    dx,al
c0020664:	83 ec 0c             	sub    esp,0xc
c0020667:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002066a:	e8 3d fe ff ff       	call   c00204ac <PIC::ioWait()>
c002066f:	83 c4 10             	add    esp,0x10
c0020672:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020678:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002067c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002067f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0020682:	ee                   	out    dx,al
c0020683:	83 ec 0c             	sub    esp,0xc
c0020686:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020689:	e8 1e fe ff ff       	call   c00204ac <PIC::ioWait()>
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0020697:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002069b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002069e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00206a1:	ee                   	out    dx,al
c00206a2:	83 ec 0c             	sub    esp,0xc
c00206a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206a8:	e8 ff fd ff ff       	call   c00204ac <PIC::ioWait()>
c00206ad:	83 c4 10             	add    esp,0x10
c00206b0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00206b6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00206ba:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00206bd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00206c0:	ee                   	out    dx,al
c00206c1:	83 ec 0c             	sub    esp,0xc
c00206c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206c7:	e8 e0 fd ff ff       	call   c00204ac <PIC::ioWait()>
c00206cc:	83 c4 10             	add    esp,0x10
c00206cf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00206d5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00206d9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00206dc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00206df:	ee                   	out    dx,al
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206e6:	e8 c1 fd ff ff       	call   c00204ac <PIC::ioWait()>
c00206eb:	83 c4 10             	add    esp,0x10
c00206ee:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00206f2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00206f8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00206fb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00206fe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020701:	ee                   	out    dx,al
c0020702:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0020706:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002070c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002070f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0020712:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020715:	ee                   	out    dx,al
c0020716:	90                   	nop
c0020717:	c9                   	leave  
c0020718:	c3                   	ret    
c0020719:	90                   	nop

c002071a <PIC::open(int, int, void*)>:
c002071a:	55                   	push   ebp
c002071b:	89 e5                	mov    ebp,esp
c002071d:	83 ec 18             	sub    esp,0x18
c0020720:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0020726:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002072a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002072d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020731:	ee                   	out    dx,al
c0020732:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020738:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002073c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002073f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020743:	ee                   	out    dx,al
c0020744:	83 ec 0c             	sub    esp,0xc
c0020747:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002074a:	e8 5f fe ff ff       	call   c00205ae <PIC::remap()>
c002074f:	83 c4 10             	add    esp,0x10
c0020752:	b8 00 00 00 00       	mov    eax,0x0
c0020757:	c9                   	leave  
c0020758:	c3                   	ret    
c0020759:	66 90                	xchg   ax,ax
c002075b:	90                   	nop

c002075c <APICTimer::close(int, int, void*)>:
c002075c:	b8 00 00 00 00       	mov    eax,0x0
c0020761:	c3                   	ret    
c0020762:	66 90                	xchg   ax,ax

c0020764 <apicTimerHandler(regs*, void*)>:
c0020764:	83 ec 0c             	sub    esp,0xc
c0020767:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002076b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002076d:	b8 10 27 00 00       	mov    eax,0x2710
c0020772:	ba 00 00 00 00       	mov    edx,0x0
c0020777:	f7 f1                	div    ecx
c0020779:	83 ec 0c             	sub    esp,0xc
c002077c:	50                   	push   eax
c002077d:	e8 73 ff fe ff       	call   c00106f5 <timerHandler(unsigned int)>
c0020782:	83 c4 10             	add    esp,0x10
c0020785:	90                   	nop
c0020786:	83 c4 0c             	add    esp,0xc
c0020789:	c3                   	ret    
c002078a:	66 90                	xchg   ax,ax

c002078c <APICTimer::write(int)>:
c002078c:	83 ec 1c             	sub    esp,0x1c
c002078f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020793:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020797:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002079d:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c00207a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207a8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	50                   	push   eax
c00207b2:	e8 e1 f4 ff ff       	call   c001fc98 <APIC::getBase()>
c00207b7:	83 c4 10             	add    esp,0x10
c00207ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207be:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c00207c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207cb:	05 e0 03 00 00       	add    eax,0x3e0
c00207d0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00207d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207da:	05 80 03 00 00       	add    eax,0x380
c00207df:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00207e5:	fb                   	sti    
c00207e6:	66 90                	xchg   ax,ax
c00207e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ec:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00207f2:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c00207f7:	39 c2                	cmp    edx,eax
c00207f9:	76 05                	jbe    c0020800 <APICTimer::write(int)+0x74>
c00207fb:	eb eb                	jmp    c00207e8 <APICTimer::write(int)+0x5c>
c00207fd:	8d 76 00             	lea    esi,[esi+0x0]
c0020800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020804:	05 20 03 00 00       	add    eax,0x320
c0020809:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002080f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020813:	05 90 03 00 00       	add    eax,0x390
c0020818:	8b 00                	mov    eax,DWORD PTR [eax]
c002081a:	f7 d0                	not    eax
c002081c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020820:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020828:	ba 00 00 00 00       	mov    edx,0x0
c002082d:	f7 f1                	div    ecx
c002082f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020836:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002083c:	0d 00 00 02 00       	or     eax,0x20000
c0020841:	89 c2                	mov    edx,eax
c0020843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020847:	05 20 03 00 00       	add    eax,0x320
c002084c:	89 10                	mov    DWORD PTR [eax],edx
c002084e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020852:	05 e0 03 00 00       	add    eax,0x3e0
c0020857:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002085d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020861:	05 80 03 00 00       	add    eax,0x380
c0020866:	89 c2                	mov    edx,eax
c0020868:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002086b:	89 02                	mov    DWORD PTR [edx],eax
c002086d:	90                   	nop
c002086e:	83 c4 1c             	add    esp,0x1c
c0020871:	c3                   	ret    
c0020872:	66 90                	xchg   ax,ax

c0020874 <APICTimer::open(int, int, void*)>:
c0020874:	57                   	push   edi
c0020875:	56                   	push   esi
c0020876:	53                   	push   ebx
c0020877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002087b:	8b 00                	mov    eax,DWORD PTR [eax]
c002087d:	83 c0 24             	add    eax,0x24
c0020880:	8b 00                	mov    eax,DWORD PTR [eax]
c0020882:	83 ec 08             	sub    esp,0x8
c0020885:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002088d:	ff d0                	call   eax
c002088f:	83 c4 10             	add    esp,0x10
c0020892:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0020897:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002089d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00208a3:	83 ec 0c             	sub    esp,0xc
c00208a6:	50                   	push   eax
c00208a7:	e8 ec f3 ff ff       	call   c001fc98 <APIC::getBase()>
c00208ac:	83 c4 10             	add    esp,0x10
c00208af:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00208b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00208bf:	0f b6 f8             	movzx  edi,al
c00208c2:	89 d0                	mov    eax,edx
c00208c4:	ba 00 00 00 00       	mov    edx,0x0
c00208c9:	89 c1                	mov    ecx,eax
c00208cb:	80 e5 ff             	and    ch,0xff
c00208ce:	89 cb                	mov    ebx,ecx
c00208d0:	0f b6 f2             	movzx  esi,dl
c00208d3:	89 d8                	mov    eax,ebx
c00208d5:	89 f2                	mov    edx,esi
c00208d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00208de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00208e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00208e6:	83 e0 00             	and    eax,0x0
c00208e9:	09 d0                	or     eax,edx
c00208eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00208ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00208f9:	8d 50 01             	lea    edx,[eax+0x1]
c00208fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020900:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020906:	0f b6 d0             	movzx  edx,al
c0020909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002090d:	83 c2 08             	add    edx,0x8
c0020910:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020914:	0f b6 c9             	movzx  ecx,cl
c0020917:	81 c9 00 00 01 00    	or     ecx,0x10000
c002091d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020925:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020929:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020933:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020937:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002093d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020941:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020947:	83 ec 0c             	sub    esp,0xc
c002094a:	51                   	push   ecx
c002094b:	6a 01                	push   0x1
c002094d:	68 64 07 02 c0       	push   0xc0020764
c0020952:	52                   	push   edx
c0020953:	50                   	push   eax
c0020954:	e8 8d d4 fe ff       	call   c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020959:	83 c4 20             	add    esp,0x20
c002095c:	89 c2                	mov    edx,eax
c002095e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020962:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020968:	b8 00 00 00 00       	mov    eax,0x0
c002096d:	5b                   	pop    ebx
c002096e:	5e                   	pop    esi
c002096f:	5f                   	pop    edi
c0020970:	c3                   	ret    
c0020971:	90                   	nop
c0020972:	66 90                	xchg   ax,ax

c0020974 <APICTimer::APICTimer()>:
c0020974:	83 ec 0c             	sub    esp,0xc
c0020977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097b:	83 ec 08             	sub    esp,0x8
c002097e:	68 3c 55 02 c0       	push   0xc002553c
c0020983:	50                   	push   eax
c0020984:	e8 db fc fe ff       	call   c0010664 <Timer::Timer(char const*)>
c0020989:	83 c4 10             	add    esp,0x10
c002098c:	ba 50 55 02 c0       	mov    edx,0xc0025550
c0020991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020995:	89 10                	mov    DWORD PTR [eax],edx
c0020997:	90                   	nop
c0020998:	83 c4 0c             	add    esp,0xc
c002099b:	c3                   	ret    

c002099c <PIT::write(int)>:
c002099c:	83 ec 10             	sub    esp,0x10
c002099f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00209ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209b1:	a3 e4 82 02 c0       	mov    ds:0xc00282e4,eax
c00209b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00209bb:	99                   	cdq    
c00209bc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00209c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209c4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00209cb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00209d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00209d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00209d9:	ee                   	out    dx,al
c00209da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209de:	0f b6 c0             	movzx  eax,al
c00209e1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00209e8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00209ec:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00209f0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00209f5:	ee                   	out    dx,al
c00209f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209fa:	c1 f8 08             	sar    eax,0x8
c00209fd:	0f b6 c0             	movzx  eax,al
c0020a00:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020a07:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020a0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a0f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020a14:	ee                   	out    dx,al
c0020a15:	90                   	nop
c0020a16:	83 c4 10             	add    esp,0x10
c0020a19:	c3                   	ret    
c0020a1a:	66 90                	xchg   ax,ax

c0020a1c <pitHandler(regs*, void*)>:
c0020a1c:	83 ec 0c             	sub    esp,0xc
c0020a1f:	8b 0d e4 82 02 c0    	mov    ecx,DWORD PTR ds:0xc00282e4
c0020a25:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020a2a:	99                   	cdq    
c0020a2b:	f7 f9                	idiv   ecx
c0020a2d:	83 ec 0c             	sub    esp,0xc
c0020a30:	50                   	push   eax
c0020a31:	e8 bf fc fe ff       	call   c00106f5 <timerHandler(unsigned int)>
c0020a36:	83 c4 10             	add    esp,0x10
c0020a39:	90                   	nop
c0020a3a:	83 c4 0c             	add    esp,0xc
c0020a3d:	c3                   	ret    
c0020a3e:	66 90                	xchg   ax,ax

c0020a40 <PIT::open(int, int, void*)>:
c0020a40:	83 ec 0c             	sub    esp,0xc
c0020a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a49:	83 c0 24             	add    eax,0x24
c0020a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a4e:	83 ec 08             	sub    esp,0x8
c0020a51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a59:	ff d0                	call   eax
c0020a5b:	83 c4 10             	add    esp,0x10
c0020a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a62:	83 ec 0c             	sub    esp,0xc
c0020a65:	6a 00                	push   0x0
c0020a67:	6a 01                	push   0x1
c0020a69:	68 1c 0a 02 c0       	push   0xc0020a1c
c0020a6e:	6a 00                	push   0x0
c0020a70:	50                   	push   eax
c0020a71:	e8 70 d3 fe ff       	call   c000dde6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020a76:	83 c4 20             	add    esp,0x20
c0020a79:	89 c2                	mov    edx,eax
c0020a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a7f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a85:	b8 00 00 00 00       	mov    eax,0x0
c0020a8a:	83 c4 0c             	add    esp,0xc
c0020a8d:	c3                   	ret    
c0020a8e:	66 90                	xchg   ax,ax

c0020a90 <PIT::close(int, int, void*)>:
c0020a90:	83 ec 0c             	sub    esp,0xc
c0020a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a97:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aa5:	6a 01                	push   0x1
c0020aa7:	68 1c 0a 02 c0       	push   0xc0020a1c
c0020aac:	6a 00                	push   0x0
c0020aae:	50                   	push   eax
c0020aaf:	e8 7c d3 fe ff       	call   c000de30 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020ab4:	83 c4 10             	add    esp,0x10
c0020ab7:	b8 00 00 00 00       	mov    eax,0x0
c0020abc:	83 c4 0c             	add    esp,0xc
c0020abf:	c3                   	ret    

c0020ac0 <PIT::PIT()>:
c0020ac0:	83 ec 0c             	sub    esp,0xc
c0020ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac7:	83 ec 08             	sub    esp,0x8
c0020aca:	68 78 55 02 c0       	push   0xc0025578
c0020acf:	50                   	push   eax
c0020ad0:	e8 8f fb fe ff       	call   c0010664 <Timer::Timer(char const*)>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	ba a0 55 02 c0       	mov    edx,0xc00255a0
c0020add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae1:	89 10                	mov    DWORD PTR [eax],edx
c0020ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020aed:	0f b6 d0             	movzx  edx,al
c0020af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020af4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b05:	0f b6 d0             	movzx  edx,al
c0020b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b15:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b1b:	8d 50 01             	lea    edx,[eax+0x1]
c0020b1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b22:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020b28:	0f b6 d0             	movzx  edx,al
c0020b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b2f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020b33:	83 e1 3f             	and    ecx,0x3f
c0020b36:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020b3a:	90                   	nop
c0020b3b:	83 c4 0c             	add    esp,0xc
c0020b3e:	c3                   	ret    
c0020b3f:	90                   	nop

c0020b40 <avxDetect>:
c0020b40:	b8 00 00 00 00       	mov    eax,0x0
c0020b45:	c3                   	ret    

c0020b46 <avxSave>:
c0020b46:	c3                   	ret    

c0020b47 <avxLoad>:
c0020b47:	c3                   	ret    

c0020b48 <avxInit>:
c0020b48:	c3                   	ret    

c0020b49 <avxClose>:
c0020b49:	c3                   	ret    

c0020b4a <wouldSheSayYes>:
c0020b4a:	c3                   	ret    
c0020b4b:	49                   	dec    ecx
c0020b4c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020b50:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020b54:	75 20                	jne    c0020b76 <sseDetect.noSSE+0x1>
c0020b56:	4e                   	dec    esi
c0020b57:	79 61                	jns    c0020bba <x87Detect+0x14>
c0020b59:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020b5e:	66 90                	xchg   ax,ax

c0020b60 <absolutelyNoChanceInHell>:
c0020b60:	b8 01 00 00 00       	mov    eax,0x1
c0020b65:	0f a2                	cpuid  
c0020b67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020b6d:	74 06                	je     c0020b75 <sseDetect.noSSE>
c0020b6f:	b8 01 00 00 00       	mov    eax,0x1
c0020b74:	c3                   	ret    

c0020b75 <sseDetect.noSSE>:
c0020b75:	31 c0                	xor    eax,eax
c0020b77:	c3                   	ret    

c0020b78 <sseSave>:
c0020b78:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020b7d:	c3                   	ret    

c0020b7e <sseLoad>:
c0020b7e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020b83:	c3                   	ret    

c0020b84 <sseInit>:
c0020b84:	e8 49 00 00 00       	call   c0020bd2 <x87Init>
c0020b89:	0f 20 e0             	mov    eax,cr4
c0020b8c:	66 0d 00 06          	or     ax,0x600
c0020b90:	0f 22 e0             	mov    cr4,eax
c0020b93:	c3                   	ret    

c0020b94 <sseClose>:
c0020b94:	c3                   	ret    
c0020b95:	66 90                	xchg   ax,ax
c0020b97:	66 90                	xchg   ax,ax
c0020b99:	66 90                	xchg   ax,ax
c0020b9b:	66 90                	xchg   ax,ax
c0020b9d:	66 90                	xchg   ax,ax
c0020b9f:	90                   	nop

c0020ba0 <value_37F>:
c0020ba0:	7f 03                	jg     c0020ba5 <value_37A+0x1>

c0020ba2 <value_37E>:
c0020ba2:	7e 03                	jle    c0020ba7 <x87Detect+0x1>

c0020ba4 <value_37A>:
c0020ba4:	7a 03                	jp     c0020ba9 <x87Detect+0x3>

c0020ba6 <x87Detect>:
c0020ba6:	b8 01 00 00 00       	mov    eax,0x1
c0020bab:	0f a2                	cpuid  
c0020bad:	f7 c2 01 00 00 00    	test   edx,0x1
c0020bb3:	74 06                	je     c0020bbb <x87Detect.nox87>
c0020bb5:	b8 01 00 00 00       	mov    eax,0x1
c0020bba:	c3                   	ret    

c0020bbb <x87Detect.nox87>:
c0020bbb:	b8 00 00 00 00       	mov    eax,0x0
c0020bc0:	c3                   	ret    

c0020bc1 <x87Save>:
c0020bc1:	55                   	push   ebp
c0020bc2:	89 e5                	mov    ebp,esp
c0020bc4:	9b dd 75 08          	fsave  [ebp+0x8]
c0020bc8:	c9                   	leave  
c0020bc9:	c3                   	ret    

c0020bca <x87Load>:
c0020bca:	55                   	push   ebp
c0020bcb:	89 e5                	mov    ebp,esp
c0020bcd:	dd 65 08             	frstor [ebp+0x8]
c0020bd0:	c9                   	leave  
c0020bd1:	c3                   	ret    

c0020bd2 <x87Init>:
c0020bd2:	9b db e3             	finit  
c0020bd5:	0f 20 c0             	mov    eax,cr0
c0020bd8:	66 25 fb ff          	and    ax,0xfffb
c0020bdc:	66 0d 22 00          	or     ax,0x22
c0020be0:	0f 22 c0             	mov    cr0,eax
c0020be3:	0f 06                	clts   
c0020be5:	d9 2d a4 0b 02 c0    	fldcw  WORD PTR ds:0xc0020ba4
c0020beb:	c3                   	ret    

c0020bec <x87Close>:
c0020bec:	c3                   	ret    
c0020bed:	66 90                	xchg   ax,ax
c0020bef:	90                   	nop

c0020bf0 <__do_global_ctors_aux>:
c0020bf0:	a1 8c 1d 02 c0       	mov    eax,ds:0xc0021d8c
c0020bf5:	83 f8 ff             	cmp    eax,0xffffffff
c0020bf8:	74 1a                	je     c0020c14 <__do_global_ctors_aux+0x24>
c0020bfa:	55                   	push   ebp
c0020bfb:	89 e5                	mov    ebp,esp
c0020bfd:	53                   	push   ebx
c0020bfe:	52                   	push   edx
c0020bff:	bb 8c 1d 02 c0       	mov    ebx,0xc0021d8c
c0020c04:	ff d0                	call   eax
c0020c06:	83 eb 04             	sub    ebx,0x4
c0020c09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c0b:	83 f8 ff             	cmp    eax,0xffffffff
c0020c0e:	75 f4                	jne    c0020c04 <__do_global_ctors_aux+0x14>
c0020c10:	58                   	pop    eax
c0020c11:	5b                   	pop    ebx
c0020c12:	5d                   	pop    ebp
c0020c13:	c3                   	ret    
c0020c14:	c3                   	ret    
c0020c15:	66 90                	xchg   ax,ax
c0020c17:	90                   	nop

c0020c18 <__divdi3>:
c0020c18:	55                   	push   ebp
c0020c19:	57                   	push   edi
c0020c1a:	56                   	push   esi
c0020c1b:	53                   	push   ebx
c0020c1c:	83 ec 1c             	sub    esp,0x1c
c0020c1f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020c23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c27:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020c2a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020c2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c36:	85 db                	test   ebx,ebx
c0020c38:	0f 88 8e 00 00 00    	js     c0020ccc <__divdi3+0xb4>
c0020c3e:	89 dd                	mov    ebp,ebx
c0020c40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c48:	89 d3                	mov    ebx,edx
c0020c4a:	85 d2                	test   edx,edx
c0020c4c:	79 0d                	jns    c0020c5b <__divdi3+0x43>
c0020c4e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020c52:	f7 d8                	neg    eax
c0020c54:	83 d2 00             	adc    edx,0x0
c0020c57:	f7 da                	neg    edx
c0020c59:	89 d3                	mov    ebx,edx
c0020c5b:	89 c7                	mov    edi,eax
c0020c5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c60:	85 db                	test   ebx,ebx
c0020c62:	75 48                	jne    c0020cac <__divdi3+0x94>
c0020c64:	39 ef                	cmp    edi,ebp
c0020c66:	76 24                	jbe    c0020c8c <__divdi3+0x74>
c0020c68:	89 ea                	mov    edx,ebp
c0020c6a:	f7 f7                	div    edi
c0020c6c:	89 c1                	mov    ecx,eax
c0020c6e:	31 f6                	xor    esi,esi
c0020c70:	89 c8                	mov    eax,ecx
c0020c72:	89 f2                	mov    edx,esi
c0020c74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c78:	85 c9                	test   ecx,ecx
c0020c7a:	74 07                	je     c0020c83 <__divdi3+0x6b>
c0020c7c:	f7 d8                	neg    eax
c0020c7e:	83 d2 00             	adc    edx,0x0
c0020c81:	f7 da                	neg    edx
c0020c83:	83 c4 1c             	add    esp,0x1c
c0020c86:	5b                   	pop    ebx
c0020c87:	5e                   	pop    esi
c0020c88:	5f                   	pop    edi
c0020c89:	5d                   	pop    ebp
c0020c8a:	c3                   	ret    
c0020c8b:	90                   	nop
c0020c8c:	85 ff                	test   edi,edi
c0020c8e:	75 0b                	jne    c0020c9b <__divdi3+0x83>
c0020c90:	b8 01 00 00 00       	mov    eax,0x1
c0020c95:	31 d2                	xor    edx,edx
c0020c97:	f7 f3                	div    ebx
c0020c99:	89 c7                	mov    edi,eax
c0020c9b:	31 d2                	xor    edx,edx
c0020c9d:	89 e8                	mov    eax,ebp
c0020c9f:	f7 f7                	div    edi
c0020ca1:	89 c6                	mov    esi,eax
c0020ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ca6:	f7 f7                	div    edi
c0020ca8:	89 c1                	mov    ecx,eax
c0020caa:	eb c4                	jmp    c0020c70 <__divdi3+0x58>
c0020cac:	39 eb                	cmp    ebx,ebp
c0020cae:	77 3c                	ja     c0020cec <__divdi3+0xd4>
c0020cb0:	0f bd f3             	bsr    esi,ebx
c0020cb3:	83 f6 1f             	xor    esi,0x1f
c0020cb6:	75 40                	jne    c0020cf8 <__divdi3+0xe0>
c0020cb8:	39 eb                	cmp    ebx,ebp
c0020cba:	72 09                	jb     c0020cc5 <__divdi3+0xad>
c0020cbc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020cbf:	0f 87 97 00 00 00    	ja     c0020d5c <__divdi3+0x144>
c0020cc5:	b9 01 00 00 00       	mov    ecx,0x1
c0020cca:	eb a4                	jmp    c0020c70 <__divdi3+0x58>
c0020ccc:	f7 d9                	neg    ecx
c0020cce:	83 d3 00             	adc    ebx,0x0
c0020cd1:	f7 db                	neg    ebx
c0020cd3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020cd6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020cda:	89 dd                	mov    ebp,ebx
c0020cdc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020ce4:	e9 5f ff ff ff       	jmp    c0020c48 <__divdi3+0x30>
c0020ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0020cec:	31 f6                	xor    esi,esi
c0020cee:	31 c9                	xor    ecx,ecx
c0020cf0:	e9 7b ff ff ff       	jmp    c0020c70 <__divdi3+0x58>
c0020cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0020cf8:	b8 20 00 00 00       	mov    eax,0x20
c0020cfd:	29 f0                	sub    eax,esi
c0020cff:	89 f1                	mov    ecx,esi
c0020d01:	d3 e3                	shl    ebx,cl
c0020d03:	89 fa                	mov    edx,edi
c0020d05:	88 c1                	mov    cl,al
c0020d07:	d3 ea                	shr    edx,cl
c0020d09:	09 da                	or     edx,ebx
c0020d0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d0f:	89 f1                	mov    ecx,esi
c0020d11:	d3 e7                	shl    edi,cl
c0020d13:	89 eb                	mov    ebx,ebp
c0020d15:	88 c1                	mov    cl,al
c0020d17:	d3 eb                	shr    ebx,cl
c0020d19:	89 f1                	mov    ecx,esi
c0020d1b:	d3 e5                	shl    ebp,cl
c0020d1d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020d20:	88 c1                	mov    cl,al
c0020d22:	d3 ea                	shr    edx,cl
c0020d24:	09 d5                	or     ebp,edx
c0020d26:	89 e8                	mov    eax,ebp
c0020d28:	89 da                	mov    edx,ebx
c0020d2a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020d2e:	89 d3                	mov    ebx,edx
c0020d30:	89 c5                	mov    ebp,eax
c0020d32:	f7 e7                	mul    edi
c0020d34:	39 d3                	cmp    ebx,edx
c0020d36:	72 18                	jb     c0020d50 <__divdi3+0x138>
c0020d38:	74 0a                	je     c0020d44 <__divdi3+0x12c>
c0020d3a:	89 e9                	mov    ecx,ebp
c0020d3c:	31 f6                	xor    esi,esi
c0020d3e:	e9 2d ff ff ff       	jmp    c0020c70 <__divdi3+0x58>
c0020d43:	90                   	nop
c0020d44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d47:	89 f1                	mov    ecx,esi
c0020d49:	d3 e7                	shl    edi,cl
c0020d4b:	39 c7                	cmp    edi,eax
c0020d4d:	73 eb                	jae    c0020d3a <__divdi3+0x122>
c0020d4f:	90                   	nop
c0020d50:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020d53:	31 f6                	xor    esi,esi
c0020d55:	e9 16 ff ff ff       	jmp    c0020c70 <__divdi3+0x58>
c0020d5a:	66 90                	xchg   ax,ax
c0020d5c:	31 c9                	xor    ecx,ecx
c0020d5e:	e9 0d ff ff ff       	jmp    c0020c70 <__divdi3+0x58>
c0020d63:	90                   	nop

c0020d64 <__moddi3>:
c0020d64:	55                   	push   ebp
c0020d65:	57                   	push   edi
c0020d66:	56                   	push   esi
c0020d67:	53                   	push   ebx
c0020d68:	83 ec 2c             	sub    esp,0x2c
c0020d6b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020d6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020d73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020d77:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020d7b:	85 db                	test   ebx,ebx
c0020d7d:	0f 88 85 00 00 00    	js     c0020e08 <__moddi3+0xa4>
c0020d83:	89 de                	mov    esi,ebx
c0020d85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020d8d:	89 d7                	mov    edi,edx
c0020d8f:	85 d2                	test   edx,edx
c0020d91:	79 09                	jns    c0020d9c <__moddi3+0x38>
c0020d93:	f7 d8                	neg    eax
c0020d95:	83 d2 00             	adc    edx,0x0
c0020d98:	f7 da                	neg    edx
c0020d9a:	89 d7                	mov    edi,edx
c0020d9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020da0:	89 cd                	mov    ebp,ecx
c0020da2:	85 ff                	test   edi,edi
c0020da4:	75 52                	jne    c0020df8 <__moddi3+0x94>
c0020da6:	89 c3                	mov    ebx,eax
c0020da8:	39 f0                	cmp    eax,esi
c0020daa:	76 24                	jbe    c0020dd0 <__moddi3+0x6c>
c0020dac:	89 c8                	mov    eax,ecx
c0020dae:	89 f2                	mov    edx,esi
c0020db0:	f7 f3                	div    ebx
c0020db2:	89 d6                	mov    esi,edx
c0020db4:	89 f0                	mov    eax,esi
c0020db6:	31 d2                	xor    edx,edx
c0020db8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020dbc:	85 c9                	test   ecx,ecx
c0020dbe:	74 07                	je     c0020dc7 <__moddi3+0x63>
c0020dc0:	f7 d8                	neg    eax
c0020dc2:	83 d2 00             	adc    edx,0x0
c0020dc5:	f7 da                	neg    edx
c0020dc7:	83 c4 2c             	add    esp,0x2c
c0020dca:	5b                   	pop    ebx
c0020dcb:	5e                   	pop    esi
c0020dcc:	5f                   	pop    edi
c0020dcd:	5d                   	pop    ebp
c0020dce:	c3                   	ret    
c0020dcf:	90                   	nop
c0020dd0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020dd4:	85 db                	test   ebx,ebx
c0020dd6:	75 0d                	jne    c0020de5 <__moddi3+0x81>
c0020dd8:	b8 01 00 00 00       	mov    eax,0x1
c0020ddd:	31 d2                	xor    edx,edx
c0020ddf:	f7 f7                	div    edi
c0020de1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020de5:	89 f0                	mov    eax,esi
c0020de7:	31 d2                	xor    edx,edx
c0020de9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020ded:	f7 f7                	div    edi
c0020def:	89 e8                	mov    eax,ebp
c0020df1:	f7 f7                	div    edi
c0020df3:	89 d6                	mov    esi,edx
c0020df5:	eb bd                	jmp    c0020db4 <__moddi3+0x50>
c0020df7:	90                   	nop
c0020df8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020dfc:	39 f7                	cmp    edi,esi
c0020dfe:	76 20                	jbe    c0020e20 <__moddi3+0xbc>
c0020e00:	89 c8                	mov    eax,ecx
c0020e02:	89 f2                	mov    edx,esi
c0020e04:	eb b2                	jmp    c0020db8 <__moddi3+0x54>
c0020e06:	66 90                	xchg   ax,ax
c0020e08:	f7 d9                	neg    ecx
c0020e0a:	83 d3 00             	adc    ebx,0x0
c0020e0d:	f7 db                	neg    ebx
c0020e0f:	89 de                	mov    esi,ebx
c0020e11:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020e19:	e9 6f ff ff ff       	jmp    c0020d8d <__moddi3+0x29>
c0020e1e:	66 90                	xchg   ax,ax
c0020e20:	0f bd c7             	bsr    eax,edi
c0020e23:	83 f0 1f             	xor    eax,0x1f
c0020e26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e2a:	75 24                	jne    c0020e50 <__moddi3+0xec>
c0020e2c:	39 f7                	cmp    edi,esi
c0020e2e:	72 06                	jb     c0020e36 <__moddi3+0xd2>
c0020e30:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020e34:	77 0c                	ja     c0020e42 <__moddi3+0xde>
c0020e36:	89 e9                	mov    ecx,ebp
c0020e38:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020e3c:	19 fe                	sbb    esi,edi
c0020e3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e46:	89 f2                	mov    edx,esi
c0020e48:	e9 6b ff ff ff       	jmp    c0020db8 <__moddi3+0x54>
c0020e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0020e50:	b8 20 00 00 00       	mov    eax,0x20
c0020e55:	89 c2                	mov    edx,eax
c0020e57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e5b:	29 da                	sub    edx,ebx
c0020e5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020e61:	88 d9                	mov    cl,bl
c0020e63:	d3 e7                	shl    edi,cl
c0020e65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e69:	88 d1                	mov    cl,dl
c0020e6b:	d3 e8                	shr    eax,cl
c0020e6d:	09 c7                	or     edi,eax
c0020e6f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020e73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e77:	89 d8                	mov    eax,ebx
c0020e79:	88 d9                	mov    cl,bl
c0020e7b:	d3 e7                	shl    edi,cl
c0020e7d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020e81:	89 f3                	mov    ebx,esi
c0020e83:	88 d1                	mov    cl,dl
c0020e85:	d3 eb                	shr    ebx,cl
c0020e87:	89 c7                	mov    edi,eax
c0020e89:	88 c1                	mov    cl,al
c0020e8b:	d3 e6                	shl    esi,cl
c0020e8d:	89 e8                	mov    eax,ebp
c0020e8f:	88 d1                	mov    cl,dl
c0020e91:	d3 e8                	shr    eax,cl
c0020e93:	09 f0                	or     eax,esi
c0020e95:	89 f9                	mov    ecx,edi
c0020e97:	d3 e5                	shl    ebp,cl
c0020e99:	89 da                	mov    edx,ebx
c0020e9b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020e9f:	89 d3                	mov    ebx,edx
c0020ea1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ea5:	89 c6                	mov    esi,eax
c0020ea7:	89 d1                	mov    ecx,edx
c0020ea9:	39 d3                	cmp    ebx,edx
c0020eab:	72 27                	jb     c0020ed4 <__moddi3+0x170>
c0020ead:	74 21                	je     c0020ed0 <__moddi3+0x16c>
c0020eaf:	29 f5                	sub    ebp,esi
c0020eb1:	19 cb                	sbb    ebx,ecx
c0020eb3:	89 de                	mov    esi,ebx
c0020eb5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020eb9:	d3 e6                	shl    esi,cl
c0020ebb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020ebf:	89 f9                	mov    ecx,edi
c0020ec1:	d3 ed                	shr    ebp,cl
c0020ec3:	09 ee                	or     esi,ebp
c0020ec5:	89 f0                	mov    eax,esi
c0020ec7:	d3 eb                	shr    ebx,cl
c0020ec9:	89 da                	mov    edx,ebx
c0020ecb:	e9 e8 fe ff ff       	jmp    c0020db8 <__moddi3+0x54>
c0020ed0:	39 c5                	cmp    ebp,eax
c0020ed2:	73 db                	jae    c0020eaf <__moddi3+0x14b>
c0020ed4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020ed8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020edc:	89 d1                	mov    ecx,edx
c0020ede:	89 c6                	mov    esi,eax
c0020ee0:	eb cd                	jmp    c0020eaf <__moddi3+0x14b>
c0020ee2:	66 90                	xchg   ax,ax

c0020ee4 <__udivdi3>:
c0020ee4:	55                   	push   ebp
c0020ee5:	57                   	push   edi
c0020ee6:	56                   	push   esi
c0020ee7:	53                   	push   ebx
c0020ee8:	83 ec 1c             	sub    esp,0x1c
c0020eeb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020eef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020ef3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020ef7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020efb:	85 d2                	test   edx,edx
c0020efd:	75 41                	jne    c0020f40 <__udivdi3+0x5c>
c0020eff:	39 f7                	cmp    edi,esi
c0020f01:	76 15                	jbe    c0020f18 <__udivdi3+0x34>
c0020f03:	89 e8                	mov    eax,ebp
c0020f05:	89 f2                	mov    edx,esi
c0020f07:	f7 f7                	div    edi
c0020f09:	31 db                	xor    ebx,ebx
c0020f0b:	89 da                	mov    edx,ebx
c0020f0d:	83 c4 1c             	add    esp,0x1c
c0020f10:	5b                   	pop    ebx
c0020f11:	5e                   	pop    esi
c0020f12:	5f                   	pop    edi
c0020f13:	5d                   	pop    ebp
c0020f14:	c3                   	ret    
c0020f15:	8d 76 00             	lea    esi,[esi+0x0]
c0020f18:	89 f9                	mov    ecx,edi
c0020f1a:	85 ff                	test   edi,edi
c0020f1c:	75 0b                	jne    c0020f29 <__udivdi3+0x45>
c0020f1e:	b8 01 00 00 00       	mov    eax,0x1
c0020f23:	31 d2                	xor    edx,edx
c0020f25:	f7 f7                	div    edi
c0020f27:	89 c1                	mov    ecx,eax
c0020f29:	31 d2                	xor    edx,edx
c0020f2b:	89 f0                	mov    eax,esi
c0020f2d:	f7 f1                	div    ecx
c0020f2f:	89 c3                	mov    ebx,eax
c0020f31:	89 e8                	mov    eax,ebp
c0020f33:	f7 f1                	div    ecx
c0020f35:	89 da                	mov    edx,ebx
c0020f37:	83 c4 1c             	add    esp,0x1c
c0020f3a:	5b                   	pop    ebx
c0020f3b:	5e                   	pop    esi
c0020f3c:	5f                   	pop    edi
c0020f3d:	5d                   	pop    ebp
c0020f3e:	c3                   	ret    
c0020f3f:	90                   	nop
c0020f40:	39 f2                	cmp    edx,esi
c0020f42:	77 1c                	ja     c0020f60 <__udivdi3+0x7c>
c0020f44:	0f bd da             	bsr    ebx,edx
c0020f47:	83 f3 1f             	xor    ebx,0x1f
c0020f4a:	75 24                	jne    c0020f70 <__udivdi3+0x8c>
c0020f4c:	39 f2                	cmp    edx,esi
c0020f4e:	72 08                	jb     c0020f58 <__udivdi3+0x74>
c0020f50:	39 ef                	cmp    edi,ebp
c0020f52:	0f 87 84 00 00 00    	ja     c0020fdc <__udivdi3+0xf8>
c0020f58:	b8 01 00 00 00       	mov    eax,0x1
c0020f5d:	eb ac                	jmp    c0020f0b <__udivdi3+0x27>
c0020f5f:	90                   	nop
c0020f60:	31 db                	xor    ebx,ebx
c0020f62:	31 c0                	xor    eax,eax
c0020f64:	89 da                	mov    edx,ebx
c0020f66:	83 c4 1c             	add    esp,0x1c
c0020f69:	5b                   	pop    ebx
c0020f6a:	5e                   	pop    esi
c0020f6b:	5f                   	pop    edi
c0020f6c:	5d                   	pop    ebp
c0020f6d:	c3                   	ret    
c0020f6e:	66 90                	xchg   ax,ax
c0020f70:	b8 20 00 00 00       	mov    eax,0x20
c0020f75:	29 d8                	sub    eax,ebx
c0020f77:	88 d9                	mov    cl,bl
c0020f79:	d3 e2                	shl    edx,cl
c0020f7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020f7f:	89 fa                	mov    edx,edi
c0020f81:	88 c1                	mov    cl,al
c0020f83:	d3 ea                	shr    edx,cl
c0020f85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020f89:	09 d1                	or     ecx,edx
c0020f8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f8f:	88 d9                	mov    cl,bl
c0020f91:	d3 e7                	shl    edi,cl
c0020f93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f97:	89 f7                	mov    edi,esi
c0020f99:	88 c1                	mov    cl,al
c0020f9b:	d3 ef                	shr    edi,cl
c0020f9d:	88 d9                	mov    cl,bl
c0020f9f:	d3 e6                	shl    esi,cl
c0020fa1:	89 ea                	mov    edx,ebp
c0020fa3:	88 c1                	mov    cl,al
c0020fa5:	d3 ea                	shr    edx,cl
c0020fa7:	09 d6                	or     esi,edx
c0020fa9:	89 f0                	mov    eax,esi
c0020fab:	89 fa                	mov    edx,edi
c0020fad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020fb1:	89 d7                	mov    edi,edx
c0020fb3:	89 c6                	mov    esi,eax
c0020fb5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020fb9:	39 d7                	cmp    edi,edx
c0020fbb:	72 13                	jb     c0020fd0 <__udivdi3+0xec>
c0020fbd:	74 09                	je     c0020fc8 <__udivdi3+0xe4>
c0020fbf:	89 f0                	mov    eax,esi
c0020fc1:	31 db                	xor    ebx,ebx
c0020fc3:	e9 43 ff ff ff       	jmp    c0020f0b <__udivdi3+0x27>
c0020fc8:	88 d9                	mov    cl,bl
c0020fca:	d3 e5                	shl    ebp,cl
c0020fcc:	39 c5                	cmp    ebp,eax
c0020fce:	73 ef                	jae    c0020fbf <__udivdi3+0xdb>
c0020fd0:	8d 46 ff             	lea    eax,[esi-0x1]
c0020fd3:	31 db                	xor    ebx,ebx
c0020fd5:	e9 31 ff ff ff       	jmp    c0020f0b <__udivdi3+0x27>
c0020fda:	66 90                	xchg   ax,ax
c0020fdc:	31 c0                	xor    eax,eax
c0020fde:	e9 28 ff ff ff       	jmp    c0020f0b <__udivdi3+0x27>
c0020fe3:	90                   	nop

c0020fe4 <__umoddi3>:
c0020fe4:	55                   	push   ebp
c0020fe5:	57                   	push   edi
c0020fe6:	56                   	push   esi
c0020fe7:	53                   	push   ebx
c0020fe8:	83 ec 1c             	sub    esp,0x1c
c0020feb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020fef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020ff3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020ff7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020ffb:	89 da                	mov    edx,ebx
c0020ffd:	85 c0                	test   eax,eax
c0020fff:	75 37                	jne    c0021038 <__umoddi3+0x54>
c0021001:	39 df                	cmp    edi,ebx
c0021003:	76 13                	jbe    c0021018 <__umoddi3+0x34>
c0021005:	89 f0                	mov    eax,esi
c0021007:	f7 f7                	div    edi
c0021009:	89 d0                	mov    eax,edx
c002100b:	31 d2                	xor    edx,edx
c002100d:	83 c4 1c             	add    esp,0x1c
c0021010:	5b                   	pop    ebx
c0021011:	5e                   	pop    esi
c0021012:	5f                   	pop    edi
c0021013:	5d                   	pop    ebp
c0021014:	c3                   	ret    
c0021015:	8d 76 00             	lea    esi,[esi+0x0]
c0021018:	89 fd                	mov    ebp,edi
c002101a:	85 ff                	test   edi,edi
c002101c:	75 0b                	jne    c0021029 <__umoddi3+0x45>
c002101e:	b8 01 00 00 00       	mov    eax,0x1
c0021023:	31 d2                	xor    edx,edx
c0021025:	f7 f7                	div    edi
c0021027:	89 c5                	mov    ebp,eax
c0021029:	89 d8                	mov    eax,ebx
c002102b:	31 d2                	xor    edx,edx
c002102d:	f7 f5                	div    ebp
c002102f:	89 f0                	mov    eax,esi
c0021031:	f7 f5                	div    ebp
c0021033:	89 d0                	mov    eax,edx
c0021035:	eb d4                	jmp    c002100b <__umoddi3+0x27>
c0021037:	90                   	nop
c0021038:	89 f1                	mov    ecx,esi
c002103a:	39 d8                	cmp    eax,ebx
c002103c:	76 0a                	jbe    c0021048 <__umoddi3+0x64>
c002103e:	89 f0                	mov    eax,esi
c0021040:	83 c4 1c             	add    esp,0x1c
c0021043:	5b                   	pop    ebx
c0021044:	5e                   	pop    esi
c0021045:	5f                   	pop    edi
c0021046:	5d                   	pop    ebp
c0021047:	c3                   	ret    
c0021048:	0f bd e8             	bsr    ebp,eax
c002104b:	83 f5 1f             	xor    ebp,0x1f
c002104e:	75 1c                	jne    c002106c <__umoddi3+0x88>
c0021050:	39 d8                	cmp    eax,ebx
c0021052:	72 04                	jb     c0021058 <__umoddi3+0x74>
c0021054:	39 f7                	cmp    edi,esi
c0021056:	77 08                	ja     c0021060 <__umoddi3+0x7c>
c0021058:	89 da                	mov    edx,ebx
c002105a:	29 fe                	sub    esi,edi
c002105c:	19 c2                	sbb    edx,eax
c002105e:	89 f1                	mov    ecx,esi
c0021060:	89 c8                	mov    eax,ecx
c0021062:	83 c4 1c             	add    esp,0x1c
c0021065:	5b                   	pop    ebx
c0021066:	5e                   	pop    esi
c0021067:	5f                   	pop    edi
c0021068:	5d                   	pop    ebp
c0021069:	c3                   	ret    
c002106a:	66 90                	xchg   ax,ax
c002106c:	ba 20 00 00 00       	mov    edx,0x20
c0021071:	29 ea                	sub    edx,ebp
c0021073:	89 e9                	mov    ecx,ebp
c0021075:	d3 e0                	shl    eax,cl
c0021077:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002107b:	89 f8                	mov    eax,edi
c002107d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021081:	88 d1                	mov    cl,dl
c0021083:	d3 e8                	shr    eax,cl
c0021085:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021089:	09 c1                	or     ecx,eax
c002108b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002108f:	89 e9                	mov    ecx,ebp
c0021091:	d3 e7                	shl    edi,cl
c0021093:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021097:	89 d8                	mov    eax,ebx
c0021099:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002109d:	88 d1                	mov    cl,dl
c002109f:	d3 e8                	shr    eax,cl
c00210a1:	89 c7                	mov    edi,eax
c00210a3:	89 e9                	mov    ecx,ebp
c00210a5:	d3 e3                	shl    ebx,cl
c00210a7:	89 f0                	mov    eax,esi
c00210a9:	88 d1                	mov    cl,dl
c00210ab:	d3 e8                	shr    eax,cl
c00210ad:	09 d8                	or     eax,ebx
c00210af:	89 e9                	mov    ecx,ebp
c00210b1:	d3 e6                	shl    esi,cl
c00210b3:	89 f3                	mov    ebx,esi
c00210b5:	89 fa                	mov    edx,edi
c00210b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00210bb:	89 d1                	mov    ecx,edx
c00210bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00210c1:	89 c6                	mov    esi,eax
c00210c3:	89 d7                	mov    edi,edx
c00210c5:	39 d1                	cmp    ecx,edx
c00210c7:	72 27                	jb     c00210f0 <__umoddi3+0x10c>
c00210c9:	74 21                	je     c00210ec <__umoddi3+0x108>
c00210cb:	89 ca                	mov    edx,ecx
c00210cd:	29 f3                	sub    ebx,esi
c00210cf:	19 fa                	sbb    edx,edi
c00210d1:	89 d0                	mov    eax,edx
c00210d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00210d7:	d3 e0                	shl    eax,cl
c00210d9:	89 e9                	mov    ecx,ebp
c00210db:	d3 eb                	shr    ebx,cl
c00210dd:	09 d8                	or     eax,ebx
c00210df:	d3 ea                	shr    edx,cl
c00210e1:	83 c4 1c             	add    esp,0x1c
c00210e4:	5b                   	pop    ebx
c00210e5:	5e                   	pop    esi
c00210e6:	5f                   	pop    edi
c00210e7:	5d                   	pop    ebp
c00210e8:	c3                   	ret    
c00210e9:	8d 76 00             	lea    esi,[esi+0x0]
c00210ec:	39 c3                	cmp    ebx,eax
c00210ee:	73 db                	jae    c00210cb <__umoddi3+0xe7>
c00210f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00210f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00210f8:	89 d7                	mov    edi,edx
c00210fa:	89 c6                	mov    esi,eax
c00210fc:	eb cd                	jmp    c00210cb <__umoddi3+0xe7>

Disassembly of section .init:

c00210fe <_init>:
c00210fe:	55                   	push   ebp
c00210ff:	89 e5                	mov    ebp,esp
c0021101:	e8 12 f0 fd ff       	call   c0000118 <frame_dummy>
c0021106:	e8 e5 fa ff ff       	call   c0020bf0 <__do_global_ctors_aux>
c002110b:	5d                   	pop    ebp
c002110c:	c3                   	ret    

Disassembly of section .fini:

c002110d <_fini>:
c002110d:	55                   	push   ebp
c002110e:	89 e5                	mov    ebp,esp
c0021110:	e8 93 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021115:	5d                   	pop    ebp
c0021116:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021118 <Computer::~Computer()>:
c0021118:	83 ec 0c             	sub    esp,0xc
c002111b:	ba 34 27 02 c0       	mov    edx,0xc0022734
c0021120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021124:	89 10                	mov    DWORD PTR [eax],edx
c0021126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112a:	83 ec 0c             	sub    esp,0xc
c002112d:	50                   	push   eax
c002112e:	e8 09 cc fe ff       	call   c000dd3c <Device::~Device()>
c0021133:	83 c4 10             	add    esp,0x10
c0021136:	90                   	nop
c0021137:	83 c4 0c             	add    esp,0xc
c002113a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002113c <Computer::~Computer()>:
c002113c:	83 ec 0c             	sub    esp,0xc
c002113f:	83 ec 0c             	sub    esp,0xc
c0021142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021146:	e8 cd ff ff ff       	call   c0021118 <Computer::~Computer()>
c002114b:	83 c4 10             	add    esp,0x10
c002114e:	83 ec 08             	sub    esp,0x8
c0021151:	68 ec 01 00 00       	push   0x1ec
c0021156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002115a:	e8 e8 b7 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c002115f:	83 c4 10             	add    esp,0x10
c0021162:	83 c4 0c             	add    esp,0xc
c0021165:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021166 <idleCommon()>:
c0021166:	83 ec 0c             	sub    esp,0xc
c0021169:	fa                   	cli    
c002116a:	ff 05 68 78 02 c0    	inc    DWORD PTR ds:0xc0027868
c0021170:	e8 47 6d ff ff       	call   c0017ebc <schedule()>
c0021175:	a1 68 78 02 c0       	mov    eax,ds:0xc0027868
c002117a:	48                   	dec    eax
c002117b:	a3 68 78 02 c0       	mov    ds:0xc0027868,eax
c0021180:	75 01                	jne    c0021183 <idleCommon()+0x1d>
c0021182:	fb                   	sti    
c0021183:	83 c4 0c             	add    esp,0xc
c0021186:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021188 <LinkedList<UnixFile>::~LinkedList()>:
c0021188:	90                   	nop
c0021189:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002118a <LinkedList<UnixFile>::LinkedList()>:
c002118a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002118e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021198:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002119f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211ca:	90                   	nop
c00211cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00211cc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00211cc:	83 ec 0c             	sub    esp,0xc
c00211cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00211d4:	75 10                	jne    c00211e6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00211d6:	83 ec 0c             	sub    esp,0xc
c00211d9:	68 0c 2a 02 c0       	push   0xc0022a0c
c00211de:	e8 06 31 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ec:	85 c0                	test   eax,eax
c00211ee:	74 34                	je     c0021224 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211f7:	85 c0                	test   eax,eax
c00211f9:	74 29                	je     c0021224 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021202:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021206:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002120d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021211:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021218:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002121b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021222:	eb 65                	jmp    c0021289 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021228:	8b 00                	mov    eax,DWORD PTR [eax]
c002122a:	85 c0                	test   eax,eax
c002122c:	75 4b                	jne    c0021279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021232:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021235:	85 c0                	test   eax,eax
c0021237:	75 40                	jne    c0021279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021241:	89 10                	mov    DWORD PTR [eax],edx
c0021243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021247:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002124b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021255:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021260:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021263:	85 c0                	test   eax,eax
c0021265:	74 22                	je     c0021289 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021267:	83 ec 0c             	sub    esp,0xc
c002126a:	68 2e 2a 02 c0       	push   0xc0022a2e
c002126f:	e8 75 30 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021274:	83 c4 10             	add    esp,0x10
c0021277:	eb 10                	jmp    c0021289 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021279:	83 ec 0c             	sub    esp,0xc
c002127c:	68 38 2a 02 c0       	push   0xc0022a38
c0021281:	e8 63 30 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021286:	83 c4 10             	add    esp,0x10
c0021289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021290:	8d 50 01             	lea    edx,[eax+0x1]
c0021293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021297:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002129a:	90                   	nop
c002129b:	83 c4 0c             	add    esp,0xc
c002129e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00212a0 <LinkedList<UnixFile>::getFirstElement()>:
c00212a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00212a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00212a8 <LinkedList<UnixFile>::removeFirst()>:
c00212a8:	83 ec 0c             	sub    esp,0xc
c00212ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212af:	8b 00                	mov    eax,DWORD PTR [eax]
c00212b1:	85 c0                	test   eax,eax
c00212b3:	75 12                	jne    c00212c7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00212b5:	83 ec 0c             	sub    esp,0xc
c00212b8:	68 44 2a 02 c0       	push   0xc0022a44
c00212bd:	e8 27 30 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00212c2:	83 c4 10             	add    esp,0x10
c00212c5:	eb 7e                	jmp    c0021345 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00212c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212d1:	85 c0                	test   eax,eax
c00212d3:	74 10                	je     c00212e5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00212d5:	83 ec 0c             	sub    esp,0xc
c00212d8:	68 8f 2a 02 c0       	push   0xc0022a8f
c00212dd:	e8 07 30 ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00212e2:	83 c4 10             	add    esp,0x10
c00212e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00212eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212ee:	85 c0                	test   eax,eax
c00212f0:	75 33                	jne    c0021325 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00212f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021300:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002130e:	83 f8 01             	cmp    eax,0x1
c0021311:	74 21                	je     c0021334 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021313:	83 ec 0c             	sub    esp,0xc
c0021316:	68 68 2a 02 c0       	push   0xc0022a68
c002131b:	e8 c9 2f ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021320:	83 c4 10             	add    esp,0x10
c0021323:	eb 0f                	jmp    c0021334 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021329:	8b 00                	mov    eax,DWORD PTR [eax]
c002132b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002132e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021332:	89 10                	mov    DWORD PTR [eax],edx
c0021334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021338:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002133b:	8d 50 ff             	lea    edx,[eax-0x1]
c002133e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021342:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021345:	83 c4 0c             	add    esp,0xc
c0021348:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002134a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002134a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002134e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021351:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021352 <DriverlessDevice::~DriverlessDevice()>:
c0021352:	ba 1c 33 02 c0       	mov    edx,0xc002331c
c0021357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002135b:	89 10                	mov    DWORD PTR [eax],edx
c002135d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021361:	50                   	push   eax
c0021362:	e8 d5 c9 fe ff       	call   c000dd3c <Device::~Device()>
c0021367:	83 c4 04             	add    esp,0x4
c002136a:	90                   	nop
c002136b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002136c <DriverlessDevice::~DriverlessDevice()>:
c002136c:	83 ec 0c             	sub    esp,0xc
c002136f:	83 ec 0c             	sub    esp,0xc
c0021372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021376:	e8 d7 ff ff ff       	call   c0021352 <DriverlessDevice::~DriverlessDevice()>
c002137b:	83 c4 10             	add    esp,0x10
c002137e:	83 ec 08             	sub    esp,0x8
c0021381:	68 58 01 00 00       	push   0x158
c0021386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002138a:	e8 b8 b5 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c002138f:	83 c4 10             	add    esp,0x10
c0021392:	83 c4 0c             	add    esp,0xc
c0021395:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021396 <LinkedList<Device>::addElement(Device*)>:
c0021396:	83 ec 0c             	sub    esp,0xc
c0021399:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002139e:	75 10                	jne    c00213b0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00213a0:	83 ec 0c             	sub    esp,0xc
c00213a3:	68 0c 2a 02 c0       	push   0xc0022a0c
c00213a8:	e8 3c 2f ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00213ad:	83 c4 10             	add    esp,0x10
c00213b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00213b6:	85 c0                	test   eax,eax
c00213b8:	74 3a                	je     c00213f4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00213ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213c1:	85 c0                	test   eax,eax
c00213c3:	74 2f                	je     c00213f4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00213c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213d0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00213d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00213e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213e8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00213f2:	eb 68                	jmp    c002145c <LinkedList<Device>::addElement(Device*)+0xc6>
c00213f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00213fa:	85 c0                	test   eax,eax
c00213fc:	75 4e                	jne    c002144c <LinkedList<Device>::addElement(Device*)+0xb6>
c00213fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021405:	85 c0                	test   eax,eax
c0021407:	75 43                	jne    c002144c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021411:	89 10                	mov    DWORD PTR [eax],edx
c0021413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021417:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002141b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002141e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021425:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002142f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021433:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021436:	85 c0                	test   eax,eax
c0021438:	74 22                	je     c002145c <LinkedList<Device>::addElement(Device*)+0xc6>
c002143a:	83 ec 0c             	sub    esp,0xc
c002143d:	68 2e 2a 02 c0       	push   0xc0022a2e
c0021442:	e8 a2 2e ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021447:	83 c4 10             	add    esp,0x10
c002144a:	eb 10                	jmp    c002145c <LinkedList<Device>::addElement(Device*)+0xc6>
c002144c:	83 ec 0c             	sub    esp,0xc
c002144f:	68 38 2a 02 c0       	push   0xc0022a38
c0021454:	e8 90 2e ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021459:	83 c4 10             	add    esp,0x10
c002145c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021460:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021463:	8d 50 01             	lea    edx,[eax+0x1]
c0021466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002146a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002146d:	90                   	nop
c002146e:	83 c4 0c             	add    esp,0xc
c0021471:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021472 <LinkedList<Device>::LinkedList()>:
c0021472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021476:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002147c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002148b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021496:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002149c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214ab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214b2:	90                   	nop
c00214b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00214b4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00214b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214ba:	85 c0                	test   eax,eax
c00214bc:	75 0e                	jne    c00214cc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00214be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214c5:	85 c0                	test   eax,eax
c00214c7:	75 03                	jne    c00214cc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00214c9:	b0 01                	mov    al,0x1
c00214cb:	c3                   	ret    
c00214cc:	b0 00                	mov    al,0x0
c00214ce:	90                   	nop
c00214cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00214d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00214d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00214d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00214d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00214d8:	83 ec 0c             	sub    esp,0xc
c00214db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214df:	8b 00                	mov    eax,DWORD PTR [eax]
c00214e1:	85 c0                	test   eax,eax
c00214e3:	75 17                	jne    c00214fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00214e5:	83 ec 0c             	sub    esp,0xc
c00214e8:	68 44 2a 02 c0       	push   0xc0022a44
c00214ed:	e8 f7 2d ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00214f2:	83 c4 10             	add    esp,0x10
c00214f5:	e9 92 00 00 00       	jmp    c002158c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00214fa:	66 90                	xchg   ax,ax
c00214fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021503:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021506:	85 c0                	test   eax,eax
c0021508:	0f 95 c0             	setne  al
c002150b:	84 c0                	test   al,al
c002150d:	74 11                	je     c0021520 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002150f:	83 ec 0c             	sub    esp,0xc
c0021512:	68 8f 2a 02 c0       	push   0xc0022a8f
c0021517:	e8 cd 2d ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c002151c:	83 c4 10             	add    esp,0x10
c002151f:	90                   	nop
c0021520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021524:	8b 00                	mov    eax,DWORD PTR [eax]
c0021526:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021529:	85 c0                	test   eax,eax
c002152b:	0f 94 c0             	sete   al
c002152e:	84 c0                	test   al,al
c0021530:	74 36                	je     c0021568 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002153c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021540:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002154b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002154e:	83 f8 01             	cmp    eax,0x1
c0021551:	74 25                	je     c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021553:	83 ec 0c             	sub    esp,0xc
c0021556:	68 68 2a 02 c0       	push   0xc0022a68
c002155b:	e8 89 2d ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021560:	83 c4 10             	add    esp,0x10
c0021563:	eb 13                	jmp    c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021565:	8d 76 00             	lea    esi,[esi+0x0]
c0021568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002156c:	8b 00                	mov    eax,DWORD PTR [eax]
c002156e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021575:	89 10                	mov    DWORD PTR [eax],edx
c0021577:	90                   	nop
c0021578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002157c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002157f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021586:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021589:	8d 76 00             	lea    esi,[esi+0x0]
c002158c:	83 c4 0c             	add    esp,0xc
c002158f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021590:	83 ec 0c             	sub    esp,0xc
c0021593:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021598:	75 12                	jne    c00215ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002159a:	83 ec 0c             	sub    esp,0xc
c002159d:	68 0c 2a 02 c0       	push   0xc0022a0c
c00215a2:	e8 42 2d ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	66 90                	xchg   ax,ax
c00215ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00215b2:	85 c0                	test   eax,eax
c00215b4:	74 36                	je     c00215ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00215b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215bd:	85 c0                	test   eax,eax
c00215bf:	74 2b                	je     c00215ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00215c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215cc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00215cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00215da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215e1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00215e8:	eb 6a                	jmp    c0021654 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00215ea:	66 90                	xchg   ax,ax
c00215ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f2:	85 c0                	test   eax,eax
c00215f4:	75 4e                	jne    c0021644 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00215f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215fd:	85 c0                	test   eax,eax
c00215ff:	75 43                	jne    c0021644 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021605:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021609:	89 10                	mov    DWORD PTR [eax],edx
c002160b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021613:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002161d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021628:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002162b:	85 c0                	test   eax,eax
c002162d:	74 25                	je     c0021654 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002162f:	83 ec 0c             	sub    esp,0xc
c0021632:	68 2e 2a 02 c0       	push   0xc0022a2e
c0021637:	e8 ad 2c ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c002163c:	83 c4 10             	add    esp,0x10
c002163f:	eb 13                	jmp    c0021654 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021641:	8d 76 00             	lea    esi,[esi+0x0]
c0021644:	83 ec 0c             	sub    esp,0xc
c0021647:	68 38 2a 02 c0       	push   0xc0022a38
c002164c:	e8 98 2c ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021651:	83 c4 10             	add    esp,0x10
c0021654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021658:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002165b:	8d 50 01             	lea    edx,[eax+0x1]
c002165e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021665:	90                   	nop
c0021666:	83 c4 0c             	add    esp,0xc
c0021669:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002166c <ACPI::~ACPI()>:
c002166c:	83 ec 0c             	sub    esp,0xc
c002166f:	ba ec 3d 02 c0       	mov    edx,0xc0023dec
c0021674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021678:	89 10                	mov    DWORD PTR [eax],edx
c002167a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002167e:	83 ec 0c             	sub    esp,0xc
c0021681:	50                   	push   eax
c0021682:	e8 b5 c6 fe ff       	call   c000dd3c <Device::~Device()>
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	90                   	nop
c002168b:	83 c4 0c             	add    esp,0xc
c002168e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021690 <ACPI::~ACPI()>:
c0021690:	83 ec 0c             	sub    esp,0xc
c0021693:	83 ec 0c             	sub    esp,0xc
c0021696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002169a:	e8 cd ff ff ff       	call   c002166c <ACPI::~ACPI()>
c002169f:	83 c4 10             	add    esp,0x10
c00216a2:	83 ec 08             	sub    esp,0x8
c00216a5:	68 64 12 00 00       	push   0x1264
c00216aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ae:	e8 94 b2 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00216b3:	83 c4 10             	add    esp,0x10
c00216b6:	83 c4 0c             	add    esp,0xc
c00216b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00216bc <LinkedList<Device>::~LinkedList()>:
c00216bc:	90                   	nop
c00216bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00216c0 <LinkedList<Device>::isEmpty()>:
c00216c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00216c6:	85 c0                	test   eax,eax
c00216c8:	75 0e                	jne    c00216d8 <LinkedList<Device>::isEmpty()+0x18>
c00216ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216d1:	85 c0                	test   eax,eax
c00216d3:	75 03                	jne    c00216d8 <LinkedList<Device>::isEmpty()+0x18>
c00216d5:	b0 01                	mov    al,0x1
c00216d7:	c3                   	ret    
c00216d8:	b0 00                	mov    al,0x0
c00216da:	90                   	nop
c00216db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00216dc <LinkedList<Device>::getFirstElement()>:
c00216dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00216e4 <LinkedList<Device>::removeFirst()>:
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00216ed:	85 c0                	test   eax,eax
c00216ef:	75 17                	jne    c0021708 <LinkedList<Device>::removeFirst()+0x24>
c00216f1:	83 ec 0c             	sub    esp,0xc
c00216f4:	68 44 2a 02 c0       	push   0xc0022a44
c00216f9:	e8 eb 2b ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c00216fe:	83 c4 10             	add    esp,0x10
c0021701:	e9 92 00 00 00       	jmp    c0021798 <LinkedList<Device>::removeFirst()+0xb4>
c0021706:	66 90                	xchg   ax,ax
c0021708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002170c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002170f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021715:	85 c0                	test   eax,eax
c0021717:	74 13                	je     c002172c <LinkedList<Device>::removeFirst()+0x48>
c0021719:	83 ec 0c             	sub    esp,0xc
c002171c:	68 8f 2a 02 c0       	push   0xc0022a8f
c0021721:	e8 c3 2b ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c0021726:	83 c4 10             	add    esp,0x10
c0021729:	8d 76 00             	lea    esi,[esi+0x0]
c002172c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021730:	8b 00                	mov    eax,DWORD PTR [eax]
c0021732:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021738:	85 c0                	test   eax,eax
c002173a:	75 34                	jne    c0021770 <LinkedList<Device>::removeFirst()+0x8c>
c002173c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021740:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002174a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021755:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021758:	83 f8 01             	cmp    eax,0x1
c002175b:	74 27                	je     c0021784 <LinkedList<Device>::removeFirst()+0xa0>
c002175d:	83 ec 0c             	sub    esp,0xc
c0021760:	68 68 2a 02 c0       	push   0xc0022a68
c0021765:	e8 7f 2b ff ff       	call   c00142e9 <Krnl::panic(char const*)>
c002176a:	83 c4 10             	add    esp,0x10
c002176d:	eb 15                	jmp    c0021784 <LinkedList<Device>::removeFirst()+0xa0>
c002176f:	90                   	nop
c0021770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021774:	8b 00                	mov    eax,DWORD PTR [eax]
c0021776:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002177c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021780:	89 10                	mov    DWORD PTR [eax],edx
c0021782:	66 90                	xchg   ax,ax
c0021784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021788:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002178b:	8d 50 ff             	lea    edx,[eax-0x1]
c002178e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021792:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021795:	8d 76 00             	lea    esi,[esi+0x0]
c0021798:	83 c4 0c             	add    esp,0xc
c002179b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002179c <CPU::~CPU()>:
c002179c:	83 ec 0c             	sub    esp,0xc
c002179f:	ba 88 41 02 c0       	mov    edx,0xc0024188
c00217a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a8:	89 10                	mov    DWORD PTR [eax],edx
c00217aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ae:	83 ec 0c             	sub    esp,0xc
c00217b1:	50                   	push   eax
c00217b2:	e8 85 c5 fe ff       	call   c000dd3c <Device::~Device()>
c00217b7:	83 c4 10             	add    esp,0x10
c00217ba:	90                   	nop
c00217bb:	83 c4 0c             	add    esp,0xc
c00217be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00217c0 <CPU::~CPU()>:
c00217c0:	83 ec 0c             	sub    esp,0xc
c00217c3:	83 ec 0c             	sub    esp,0xc
c00217c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217ca:	e8 cd ff ff ff       	call   c002179c <CPU::~CPU()>
c00217cf:	83 c4 10             	add    esp,0x10
c00217d2:	83 ec 08             	sub    esp,0x8
c00217d5:	68 98 11 00 00       	push   0x1198
c00217da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217de:	e8 64 b1 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00217e3:	83 c4 10             	add    esp,0x10
c00217e6:	83 c4 0c             	add    esp,0xc
c00217e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00217ec <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00217ec:	90                   	nop
c00217ed:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00217f0 <ThreadControlBlock::ThreadControlBlock()>:
c00217f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00217fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217ff:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002180a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021815:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002181c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021820:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002182b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002182f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021833:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021837:	90                   	nop
c0021838:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002183c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002183c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021840:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021855:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002185c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021860:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002186a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021875:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002187c:	90                   	nop
c002187d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021880 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021887:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021888 <Vm::_FPUState::_FPUState()>:
c0021888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021893:	90                   	nop
c0021894:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021896 <PCI::~PCI()>:
c0021896:	83 ec 0c             	sub    esp,0xc
c0021899:	ba e8 4e 02 c0       	mov    edx,0xc0024ee8
c002189e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a2:	89 10                	mov    DWORD PTR [eax],edx
c00218a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a8:	83 ec 0c             	sub    esp,0xc
c00218ab:	50                   	push   eax
c00218ac:	e8 5b be fe ff       	call   c000d70c <Bus::~Bus()>
c00218b1:	83 c4 10             	add    esp,0x10
c00218b4:	90                   	nop
c00218b5:	83 c4 0c             	add    esp,0xc
c00218b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00218ba <PCI::~PCI()>:
c00218ba:	83 ec 0c             	sub    esp,0xc
c00218bd:	83 ec 0c             	sub    esp,0xc
c00218c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218c4:	e8 cd ff ff ff       	call   c0021896 <PCI::~PCI()>
c00218c9:	83 c4 10             	add    esp,0x10
c00218cc:	83 ec 08             	sub    esp,0x8
c00218cf:	68 5c 01 00 00       	push   0x15c
c00218d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218d8:	e8 6a b0 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00218dd:	83 c4 10             	add    esp,0x10
c00218e0:	83 c4 0c             	add    esp,0xc
c00218e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00218e4 <IDE::~IDE()>:
c00218e4:	83 ec 0c             	sub    esp,0xc
c00218e7:	ba 9c 4f 02 c0       	mov    edx,0xc0024f9c
c00218ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f0:	89 10                	mov    DWORD PTR [eax],edx
c00218f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f6:	83 ec 0c             	sub    esp,0xc
c00218f9:	50                   	push   eax
c00218fa:	e8 55 c9 fe ff       	call   c000e254 <HardDiskController::~HardDiskController()>
c00218ff:	83 c4 10             	add    esp,0x10
c0021902:	90                   	nop
c0021903:	83 c4 0c             	add    esp,0xc
c0021906:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021908 <IDE::~IDE()>:
c0021908:	83 ec 0c             	sub    esp,0xc
c002190b:	83 ec 0c             	sub    esp,0xc
c002190e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021912:	e8 cd ff ff ff       	call   c00218e4 <IDE::~IDE()>
c0021917:	83 c4 10             	add    esp,0x10
c002191a:	83 ec 08             	sub    esp,0x8
c002191d:	68 70 02 00 00       	push   0x270
c0021922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021926:	e8 1c b0 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c002192b:	83 c4 10             	add    esp,0x10
c002192e:	83 c4 0c             	add    esp,0xc
c0021931:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021932 <SATABus::~SATABus()>:
c0021932:	83 ec 0c             	sub    esp,0xc
c0021935:	ba 14 50 02 c0       	mov    edx,0xc0025014
c002193a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002193e:	89 10                	mov    DWORD PTR [eax],edx
c0021940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021944:	83 ec 0c             	sub    esp,0xc
c0021947:	50                   	push   eax
c0021948:	e8 07 c9 fe ff       	call   c000e254 <HardDiskController::~HardDiskController()>
c002194d:	83 c4 10             	add    esp,0x10
c0021950:	90                   	nop
c0021951:	83 c4 0c             	add    esp,0xc
c0021954:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021956 <SATABus::~SATABus()>:
c0021956:	83 ec 0c             	sub    esp,0xc
c0021959:	83 ec 0c             	sub    esp,0xc
c002195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021960:	e8 cd ff ff ff       	call   c0021932 <SATABus::~SATABus()>
c0021965:	83 c4 10             	add    esp,0x10
c0021968:	83 ec 08             	sub    esp,0x8
c002196b:	68 64 01 00 00       	push   0x164
c0021970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021974:	e8 ce af fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021979:	83 c4 10             	add    esp,0x10
c002197c:	83 c4 0c             	add    esp,0xc
c002197f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021980 <ATA::~ATA()>:
c0021980:	83 ec 0c             	sub    esp,0xc
c0021983:	ba 8c 50 02 c0       	mov    edx,0xc002508c
c0021988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198c:	89 10                	mov    DWORD PTR [eax],edx
c002198e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021992:	83 ec 0c             	sub    esp,0xc
c0021995:	50                   	push   eax
c0021996:	e8 9b c9 fe ff       	call   c000e336 <PhysicalDisk::~PhysicalDisk()>
c002199b:	83 c4 10             	add    esp,0x10
c002199e:	90                   	nop
c002199f:	83 c4 0c             	add    esp,0xc
c00219a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00219a4 <ATA::~ATA()>:
c00219a4:	83 ec 0c             	sub    esp,0xc
c00219a7:	83 ec 0c             	sub    esp,0xc
c00219aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219ae:	e8 cd ff ff ff       	call   c0021980 <ATA::~ATA()>
c00219b3:	83 c4 10             	add    esp,0x10
c00219b6:	83 ec 08             	sub    esp,0x8
c00219b9:	68 7c 01 00 00       	push   0x17c
c00219be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c2:	e8 80 af fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00219c7:	83 c4 10             	add    esp,0x10
c00219ca:	83 c4 0c             	add    esp,0xc
c00219cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00219ce <ATAPI::~ATAPI()>:
c00219ce:	83 ec 0c             	sub    esp,0xc
c00219d1:	ba c4 50 02 c0       	mov    edx,0xc00250c4
c00219d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219da:	89 10                	mov    DWORD PTR [eax],edx
c00219dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e0:	83 ec 0c             	sub    esp,0xc
c00219e3:	50                   	push   eax
c00219e4:	e8 4d c9 fe ff       	call   c000e336 <PhysicalDisk::~PhysicalDisk()>
c00219e9:	83 c4 10             	add    esp,0x10
c00219ec:	90                   	nop
c00219ed:	83 c4 0c             	add    esp,0xc
c00219f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00219f2 <ATAPI::~ATAPI()>:
c00219f2:	83 ec 0c             	sub    esp,0xc
c00219f5:	83 ec 0c             	sub    esp,0xc
c00219f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219fc:	e8 cd ff ff ff       	call   c00219ce <ATAPI::~ATAPI()>
c0021a01:	83 c4 10             	add    esp,0x10
c0021a04:	83 ec 08             	sub    esp,0x8
c0021a07:	68 80 01 00 00       	push   0x180
c0021a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a10:	e8 32 af fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021a15:	83 c4 10             	add    esp,0x10
c0021a18:	83 c4 0c             	add    esp,0xc
c0021a1b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021a1c <SATA::~SATA()>:
c0021a1c:	83 ec 0c             	sub    esp,0xc
c0021a1f:	ba 78 51 02 c0       	mov    edx,0xc0025178
c0021a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a28:	89 10                	mov    DWORD PTR [eax],edx
c0021a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2e:	83 ec 0c             	sub    esp,0xc
c0021a31:	50                   	push   eax
c0021a32:	e8 ff c8 fe ff       	call   c000e336 <PhysicalDisk::~PhysicalDisk()>
c0021a37:	83 c4 10             	add    esp,0x10
c0021a3a:	90                   	nop
c0021a3b:	83 c4 0c             	add    esp,0xc
c0021a3e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a40 <SATA::~SATA()>:
c0021a40:	83 ec 0c             	sub    esp,0xc
c0021a43:	83 ec 0c             	sub    esp,0xc
c0021a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a4a:	e8 cd ff ff ff       	call   c0021a1c <SATA::~SATA()>
c0021a4f:	83 c4 10             	add    esp,0x10
c0021a52:	83 ec 08             	sub    esp,0x8
c0021a55:	68 7c 01 00 00       	push   0x17c
c0021a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a5e:	e8 e4 ae fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021a63:	83 c4 10             	add    esp,0x10
c0021a66:	83 c4 0c             	add    esp,0xc
c0021a69:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021a6a <SATAPI::~SATAPI()>:
c0021a6a:	83 ec 0c             	sub    esp,0xc
c0021a6d:	ba 54 52 02 c0       	mov    edx,0xc0025254
c0021a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a76:	89 10                	mov    DWORD PTR [eax],edx
c0021a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7c:	83 ec 0c             	sub    esp,0xc
c0021a7f:	50                   	push   eax
c0021a80:	e8 b1 c8 fe ff       	call   c000e336 <PhysicalDisk::~PhysicalDisk()>
c0021a85:	83 c4 10             	add    esp,0x10
c0021a88:	90                   	nop
c0021a89:	83 c4 0c             	add    esp,0xc
c0021a8c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021a8e <SATAPI::~SATAPI()>:
c0021a8e:	83 ec 0c             	sub    esp,0xc
c0021a91:	83 ec 0c             	sub    esp,0xc
c0021a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a98:	e8 cd ff ff ff       	call   c0021a6a <SATAPI::~SATAPI()>
c0021a9d:	83 c4 10             	add    esp,0x10
c0021aa0:	83 ec 08             	sub    esp,0x8
c0021aa3:	68 80 01 00 00       	push   0x180
c0021aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aac:	e8 96 ae fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021ab1:	83 c4 10             	add    esp,0x10
c0021ab4:	83 c4 0c             	add    esp,0xc
c0021ab7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021ab8 <AVX::~AVX()>:
c0021ab8:	83 ec 0c             	sub    esp,0xc
c0021abb:	ba 94 52 02 c0       	mov    edx,0xc0025294
c0021ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac4:	89 10                	mov    DWORD PTR [eax],edx
c0021ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aca:	83 ec 0c             	sub    esp,0xc
c0021acd:	50                   	push   eax
c0021ace:	e8 e9 c8 fe ff       	call   c000e3bc <FPU::~FPU()>
c0021ad3:	83 c4 10             	add    esp,0x10
c0021ad6:	90                   	nop
c0021ad7:	83 c4 0c             	add    esp,0xc
c0021ada:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021adc <AVX::~AVX()>:
c0021adc:	83 ec 0c             	sub    esp,0xc
c0021adf:	83 ec 0c             	sub    esp,0xc
c0021ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ae6:	e8 cd ff ff ff       	call   c0021ab8 <AVX::~AVX()>
c0021aeb:	83 c4 10             	add    esp,0x10
c0021aee:	83 ec 08             	sub    esp,0x8
c0021af1:	68 58 01 00 00       	push   0x158
c0021af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021afa:	e8 48 ae fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021aff:	83 c4 10             	add    esp,0x10
c0021b02:	83 c4 0c             	add    esp,0xc
c0021b05:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021b08 <MMX::~MMX()>:
c0021b08:	83 ec 0c             	sub    esp,0xc
c0021b0b:	ba d4 52 02 c0       	mov    edx,0xc00252d4
c0021b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b14:	89 10                	mov    DWORD PTR [eax],edx
c0021b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1a:	83 ec 0c             	sub    esp,0xc
c0021b1d:	50                   	push   eax
c0021b1e:	e8 99 c8 fe ff       	call   c000e3bc <FPU::~FPU()>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	90                   	nop
c0021b27:	83 c4 0c             	add    esp,0xc
c0021b2a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021b2c <MMX::~MMX()>:
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	83 ec 0c             	sub    esp,0xc
c0021b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b36:	e8 cd ff ff ff       	call   c0021b08 <MMX::~MMX()>
c0021b3b:	83 c4 10             	add    esp,0x10
c0021b3e:	83 ec 08             	sub    esp,0x8
c0021b41:	68 58 01 00 00       	push   0x158
c0021b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b4a:	e8 f8 ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021b4f:	83 c4 10             	add    esp,0x10
c0021b52:	83 c4 0c             	add    esp,0xc
c0021b55:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021b58 <SSE::~SSE()>:
c0021b58:	83 ec 0c             	sub    esp,0xc
c0021b5b:	ba 14 53 02 c0       	mov    edx,0xc0025314
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	89 10                	mov    DWORD PTR [eax],edx
c0021b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6a:	83 ec 0c             	sub    esp,0xc
c0021b6d:	50                   	push   eax
c0021b6e:	e8 49 c8 fe ff       	call   c000e3bc <FPU::~FPU()>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	90                   	nop
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021b7c <SSE::~SSE()>:
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b86:	e8 cd ff ff ff       	call   c0021b58 <SSE::~SSE()>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	83 ec 08             	sub    esp,0x8
c0021b91:	68 58 01 00 00       	push   0x158
c0021b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b9a:	e8 a8 ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	83 c4 0c             	add    esp,0xc
c0021ba5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021ba8 <x87::~x87()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	ba 54 53 02 c0       	mov    edx,0xc0025354
c0021bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb4:	89 10                	mov    DWORD PTR [eax],edx
c0021bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bba:	83 ec 0c             	sub    esp,0xc
c0021bbd:	50                   	push   eax
c0021bbe:	e8 f9 c7 fe ff       	call   c000e3bc <FPU::~FPU()>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	90                   	nop
c0021bc7:	83 c4 0c             	add    esp,0xc
c0021bca:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021bcc <x87::~x87()>:
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	83 ec 0c             	sub    esp,0xc
c0021bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd6:	e8 cd ff ff ff       	call   c0021ba8 <x87::~x87()>
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	83 ec 08             	sub    esp,0x8
c0021be1:	68 58 01 00 00       	push   0x158
c0021be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bea:	e8 58 ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	83 c4 0c             	add    esp,0xc
c0021bf5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021bf6 <IOAPIC::~IOAPIC()>:
c0021bf6:	83 ec 0c             	sub    esp,0xc
c0021bf9:	ba ac 54 02 c0       	mov    edx,0xc00254ac
c0021bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c02:	89 10                	mov    DWORD PTR [eax],edx
c0021c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c08:	83 ec 0c             	sub    esp,0xc
c0021c0b:	50                   	push   eax
c0021c0c:	e8 2b c1 fe ff       	call   c000dd3c <Device::~Device()>
c0021c11:	83 c4 10             	add    esp,0x10
c0021c14:	90                   	nop
c0021c15:	83 c4 0c             	add    esp,0xc
c0021c18:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021c1a <IOAPIC::~IOAPIC()>:
c0021c1a:	83 ec 0c             	sub    esp,0xc
c0021c1d:	83 ec 0c             	sub    esp,0xc
c0021c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c24:	e8 cd ff ff ff       	call   c0021bf6 <IOAPIC::~IOAPIC()>
c0021c29:	83 c4 10             	add    esp,0x10
c0021c2c:	83 ec 08             	sub    esp,0x8
c0021c2f:	68 68 01 00 00       	push   0x168
c0021c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c38:	e8 0a ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021c3d:	83 c4 10             	add    esp,0x10
c0021c40:	83 c4 0c             	add    esp,0xc
c0021c43:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c44 <APIC::~APIC()>:
c0021c44:	83 ec 0c             	sub    esp,0xc
c0021c47:	ba 64 54 02 c0       	mov    edx,0xc0025464
c0021c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c50:	89 10                	mov    DWORD PTR [eax],edx
c0021c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c56:	83 ec 0c             	sub    esp,0xc
c0021c59:	50                   	push   eax
c0021c5a:	e8 31 cc fe ff       	call   c000e890 <InterruptController::~InterruptController()>
c0021c5f:	83 c4 10             	add    esp,0x10
c0021c62:	90                   	nop
c0021c63:	83 c4 0c             	add    esp,0xc
c0021c66:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021c68 <APIC::~APIC()>:
c0021c68:	83 ec 0c             	sub    esp,0xc
c0021c6b:	83 ec 0c             	sub    esp,0xc
c0021c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c72:	e8 cd ff ff ff       	call   c0021c44 <APIC::~APIC()>
c0021c77:	83 c4 10             	add    esp,0x10
c0021c7a:	83 ec 08             	sub    esp,0x8
c0021c7d:	68 58 21 00 00       	push   0x2158
c0021c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c86:	e8 bc ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021c8b:	83 c4 10             	add    esp,0x10
c0021c8e:	83 c4 0c             	add    esp,0xc
c0021c91:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021c92 <PIC::~PIC()>:
c0021c92:	83 ec 0c             	sub    esp,0xc
c0021c95:	ba fc 54 02 c0       	mov    edx,0xc00254fc
c0021c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9e:	89 10                	mov    DWORD PTR [eax],edx
c0021ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca4:	83 ec 0c             	sub    esp,0xc
c0021ca7:	50                   	push   eax
c0021ca8:	e8 e3 cb fe ff       	call   c000e890 <InterruptController::~InterruptController()>
c0021cad:	83 c4 10             	add    esp,0x10
c0021cb0:	90                   	nop
c0021cb1:	83 c4 0c             	add    esp,0xc
c0021cb4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021cb6 <PIC::~PIC()>:
c0021cb6:	83 ec 0c             	sub    esp,0xc
c0021cb9:	83 ec 0c             	sub    esp,0xc
c0021cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc0:	e8 cd ff ff ff       	call   c0021c92 <PIC::~PIC()>
c0021cc5:	83 c4 10             	add    esp,0x10
c0021cc8:	83 ec 08             	sub    esp,0x8
c0021ccb:	68 58 21 00 00       	push   0x2158
c0021cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd4:	e8 6e ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	83 c4 0c             	add    esp,0xc
c0021cdf:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021ce0 <APICTimer::~APICTimer()>:
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	ba 50 55 02 c0       	mov    edx,0xc0025550
c0021ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cec:	89 10                	mov    DWORD PTR [eax],edx
c0021cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf2:	83 ec 0c             	sub    esp,0xc
c0021cf5:	50                   	push   eax
c0021cf6:	e8 a1 e9 fe ff       	call   c001069c <Timer::~Timer()>
c0021cfb:	83 c4 10             	add    esp,0x10
c0021cfe:	90                   	nop
c0021cff:	83 c4 0c             	add    esp,0xc
c0021d02:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021d04 <APICTimer::~APICTimer()>:
c0021d04:	83 ec 0c             	sub    esp,0xc
c0021d07:	83 ec 0c             	sub    esp,0xc
c0021d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d0e:	e8 cd ff ff ff       	call   c0021ce0 <APICTimer::~APICTimer()>
c0021d13:	83 c4 10             	add    esp,0x10
c0021d16:	83 ec 08             	sub    esp,0x8
c0021d19:	68 60 01 00 00       	push   0x160
c0021d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d22:	e8 20 ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021d27:	83 c4 10             	add    esp,0x10
c0021d2a:	83 c4 0c             	add    esp,0xc
c0021d2d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021d30 <PIT::~PIT()>:
c0021d30:	83 ec 0c             	sub    esp,0xc
c0021d33:	ba a0 55 02 c0       	mov    edx,0xc00255a0
c0021d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3c:	89 10                	mov    DWORD PTR [eax],edx
c0021d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	50                   	push   eax
c0021d46:	e8 51 e9 fe ff       	call   c001069c <Timer::~Timer()>
c0021d4b:	83 c4 10             	add    esp,0x10
c0021d4e:	90                   	nop
c0021d4f:	83 c4 0c             	add    esp,0xc
c0021d52:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021d54 <PIT::~PIT()>:
c0021d54:	83 ec 0c             	sub    esp,0xc
c0021d57:	83 ec 0c             	sub    esp,0xc
c0021d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d5e:	e8 cd ff ff ff       	call   c0021d30 <PIT::~PIT()>
c0021d63:	83 c4 10             	add    esp,0x10
c0021d66:	83 ec 08             	sub    esp,0x8
c0021d69:	68 5c 01 00 00       	push   0x15c
c0021d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d72:	e8 d0 ab fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	83 c4 0c             	add    esp,0xc
c0021d7d:	c3                   	ret    
