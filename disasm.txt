
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 86 02 00       	call   c00286e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 92 02 c0       	mov    ebx,0xc0029292
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 92 02 c0    	cmp    ebx,0xc00292a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 da 02 c0       	mov    eax,0xc002dab8
c0000049:	3d b8 da 02 c0       	cmp    eax,0xc002dab8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 da 02 c0       	push   0xc002dab8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 da 02 c0       	mov    eax,0xc002dab8
c0000075:	2d b8 da 02 c0       	sub    eax,0xc002dab8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 da 02 c0       	push   0xc002dab8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 92 02 c0       	mov    ebx,0xc00292a8
c00000bb:	81 eb a4 92 02 c0    	sub    ebx,0xc00292a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 92 02 c0       	mov    esi,0xc00292a4
c00000ca:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec e0 02 c0       	mov    ds:0xc002e0ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 da 02 c0       	push   0xc002dab8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 e0 02 c0       	push   0xc002e0f0
c000012c:	68 b8 da 02 c0       	push   0xc002dab8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 a1 d6 01 00       	call   c001da3c <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 15 2a 01 00       	call   c0012dc8 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 7f d6 01 00       	call   c001da3c <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 cd da 01 00       	call   c001dea9 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 7b e0 01 00       	call   c001e460 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 30 e5 02 c0 	lgdtd  ds:0xc002e530
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 f2 46 01 00       	call   c0014ccb <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 08 e1 02 c0       	mov    ds:0xc002e108,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 08 e1 02 c0    	mov    DWORD PTR ds:0xc002e108,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 08 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e108
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 c0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d40],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 c0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d40],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 c0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d40],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 c0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d40],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 c0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d40],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 20 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e120
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 24 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1edc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 24 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1edc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 4c e1 02 c0    	cmp    DWORD PTR ds:0xc002e14c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 5c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e15c
c0000e60:	c7 42 0c 54 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e154
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 5c e1 02 c0    	mov    DWORD PTR ds:0xc002e15c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 20 e1 02 c0 02 	test   BYTE PTR ds:0xc002e120,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 20 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e120
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 24 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1edc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 24 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1edc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 54 e1 02 c0 	lea    edx,[eax*8-0x3ffd1eac]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 60 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e160
c00011e2:	81 fb 54 e1 02 c0    	cmp    ebx,0xc002e154
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 54 e1 02 c0       	cmp    eax,0xc002e154
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 50 e1 02 c0    	cmp    DWORD PTR ds:0xc002e150,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 5c e1 02 c0       	mov    ds:0xc002e15c,eax
c000121e:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c0001223:	a3 50 e1 02 c0       	mov    ds:0xc002e150,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 54 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e154
c0001231:	c7 40 0c 54 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e154
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 54 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e154
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 18 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1ee8]
c0001282:	8b 14 95 20 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ee0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 20 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1ee0]
c000129d:	8b 14 95 20 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ee0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 54 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1bac],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 54 e1 02 c0 	lea    eax,[eax*8-0x3ffd1eac]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 5c e1 02 c0    	mov    DWORD PTR ds:0xc002e15c,ecx
c0001357:	89 0d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ecx
c000135d:	c7 41 08 54 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e154
c0001364:	c7 41 0c 54 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e154
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 4c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1eb4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 54 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bac]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 54 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bac]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 4c e1 02 c0 	lea    edx,[eax*4-0x3ffd1eb4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 54 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1bac],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 5c e1 02 c0    	mov    DWORD PTR ds:0xc002e15c,edi
c000142a:	89 3d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,edi
c0001430:	c7 47 08 54 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e154
c0001437:	c7 47 0c 54 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e154
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 50 e1 02 c0    	mov    DWORD PTR ds:0xc002e150,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 20 e1 02 c0       	mov    edx,0xc002e120
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 20 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e120,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 74 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e474
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 74 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e474,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 74 e4 02 c0    	mov    DWORD PTR ds:0xc002e474,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 4c e1 02 c0    	cmp    DWORD PTR ds:0xc002e14c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 20 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e120,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 7c e4 02 c0    	push   DWORD PTR ds:0xc002e47c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 20 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e120,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 7c e4 02 c0       	mov    eax,ds:0xc002e47c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 4c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e14c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 24 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1edc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 54 e1 02 c0       	mov    eax,0xc002e154
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 4c e4 02 c0       	cmp    eax,0xc002e44c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 70 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e470
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 84 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e484
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 94 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e494
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 c4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c3c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 20 e1 02 c0       	mov    eax,ds:0xc002e120
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 20 e1 02 c0       	mov    ds:0xc002e120,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 68 e4 02 c0    	mov    DWORD PTR ds:0xc002e468,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 6c e4 02 c0    	mov    DWORD PTR ds:0xc002e46c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 74 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e474,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 2c f2 01 00       	jmp    c0020e58 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 5d f2 01 00       	jmp    c0020e9f <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 85 f2 01 00       	jmp    c0020ee6 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 08 4b 02 00       	call   c0026a4c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 e0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b20]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 e0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b20]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 00 95 02 c0       	mov    edx,0xc0029500
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 38 c9 02 c0       	mov    edx,0xc002c938
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 0c 95 02 c0       	mov    edx,0xc002950c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 c0 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1b40]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 a0 e4 02 c0    	mov    ax,ds:0xc002e4a0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 a0 e4 02 c0    	mov    ds:0xc002e4a0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 05 39 02 00       	call   c0026a4c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 12 95 02 c0       	mov    eax,0xc0029512
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 60 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6ba0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 1b 95 02 c0       	mov    eax,0xc002951b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 e0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b20]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 d0 22 02 00       	call   c0026a4c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 c0 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b40]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 c0 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b40],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 97 0c 02 00       	call   c0026a4c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 7d 0c 02 00       	call   c0026a4c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 37 94 02 c0       	mov    eax,0xc0029437
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 30 94 02 c0       	mov    eax,0xc0029430
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 c0 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b40]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 20 94 02 c0       	mov    esi,0xc0029420
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 c0 f3 01 00       	call   c0026a4c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 00 95 02 c0       	mov    edx,0xc0029500
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 00 94 02 c0       	mov    edx,0xc0029400
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 22 95 02 c0       	mov    edx,0xc0029522
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 2e 95 02 c0       	mov    edx,0xc002952e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 42 95 02 c0       	mov    edx,0xc0029542
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 60 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029860
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 60 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029860
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 60 96 02 c0       	mov    eax,0xc0029660
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 a0 95 02 c0       	mov    eax,0xc00295a0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 60 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6aa0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 14 fd 01 00       	call   c002851f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 d7 fc 01 00       	call   c0028501 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 ab fc 01 00       	call   c002851f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 5e f3 01 00       	call   c0027c24 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 d8 fd 01 00       	call   c00286b0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 25 fc 01 00       	call   c002851f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 67 fb 01 00       	call   c002851f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 34 fb 01 00       	call   c0028501 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 21 fa 01 00       	call   c002851f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 e9 f9 01 00       	call   c0028501 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 60 99 02 c0       	mov    eax,0xc0029960
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 f5 f7 01 00       	call   c002851f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ba f7 01 00       	call   c0028501 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 c0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6240]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ca f4 01 00       	call   c00282b3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 48 ee 01 00       	call   c0027c50 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 04 f7 01 00       	call   c0028523 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 f2 f7 01 00       	call   c0028647 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 dc ed 01 00       	call   c0027c50 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 87 f6 01 00       	call   c002851d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 68 f6 01 00       	call   c0028521 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 f6 f7 01 00       	call   c00286d0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 a8 f3 01 00       	call   c00282b3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 26 ed 01 00       	call   c0027c50 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 e2 f5 01 00       	call   c0028523 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 d0 f6 01 00       	call   c0028647 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ba ec 01 00       	call   c0027c50 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 65 f5 01 00       	call   c002851d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 45 f5 01 00       	call   c0028521 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 d2 f6 01 00       	call   c00286d0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 80 f4 01 00       	call   c002851f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 3e f4 01 00       	call   c0028501 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 26 f4 01 00       	call   c002851f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 98 f1 01 00       	call   c00282b3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 9a e4 01 00       	call   c00275d3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 fd ea 01 00       	call   c0027c50 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 4f f1 01 00       	call   c00282b3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 55 e4 01 00       	call   c00275d3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 24 f1 01 00       	call   c00282b3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 74 f3 01 00       	call   c002851d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 51 ea 01 00       	call   c0027c24 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 cb f4 01 00       	call   c00286b0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 fa f2 01 00       	call   c0028501 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 f5 e9 01 00       	call   c0027c24 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 73 f0 01 00       	call   c00282b3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 f6 e9 01 00       	call   c0027c50 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 48 f0 01 00       	call   c00282b3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 af ec 01 00       	call   c0027f34 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 2e e3 01 00       	call   c00275d3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 8e dc 01 00       	call   c0026f68 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 65 f3 01 00       	call   c0028647 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 4e e9 01 00       	call   c0027c50 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 35 f3 01 00       	call   c0028647 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 a7 e2 01 00       	call   c00275d3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 e0 f1 01 00       	call   c0028523 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 c8 eb 01 00       	call   c0027f34 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 4e e2 01 00       	call   c00275d3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 34 f3 01 00       	call   c00286d0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 0e ef 01 00       	call   c00282b3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 65 e8 01 00       	call   c0027c24 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 44 f1 01 00       	call   c002851f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 dd e1 01 00       	call   c00275d3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 09 e8 01 00       	call   c0027c24 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 a3 f2 01 00       	call   c00286d0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 5c ee 01 00       	call   c00282b3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 d9 e7 01 00       	call   c0027c50 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 2c ee 01 00       	call   c00282b3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 32 e1 01 00       	call   c00275d3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 02 ee 01 00       	call   c00282b3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 54 f0 01 00       	call   c002851f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 2b e7 01 00       	call   c0027c24 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 a5 f1 01 00       	call   c00286b0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 d4 ef 01 00       	call   c0028501 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ce e6 01 00       	call   c0027c24 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 4c ed 01 00       	call   c00282b3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 cf e6 01 00       	call   c0027c50 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 21 ed 01 00       	call   c00282b3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 88 e9 01 00       	call   c0027f34 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 07 e0 01 00       	call   c00275d3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 57 d9 01 00       	call   c0026f68 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 2e f0 01 00       	call   c0028647 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 17 e6 01 00       	call   c0027c50 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 fe ef 01 00       	call   c0028647 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 70 df 01 00       	call   c00275d3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 a9 ee 01 00       	call   c0028523 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 90 e8 01 00       	call   c0027f34 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 0f df 01 00       	call   c00275d3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 f5 ef 01 00       	call   c00286d0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 cf eb 01 00       	call   c00282b3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 26 e5 01 00       	call   c0027c24 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 05 ee 01 00       	call   c002851f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 9e de 01 00       	call   c00275d3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ca e4 01 00       	call   c0027c24 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 3f eb 01 00       	call   c00282b3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 45 de 01 00       	call   c00275d3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 20 9e 02 c0       	mov    eax,0xc0029e20
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 34 9e 02 c0       	mov    eax,0xc0029e34
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ba e9 01 00       	call   c00282b3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 38 e3 01 00       	call   c0027c50 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ca d5 01 00       	call   c0026f68 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 a1 ec 01 00       	call   c0028647 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 8a e2 01 00       	call   c0027c50 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 6d ec 01 00       	call   c0028647 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 df db 01 00       	call   c00275d3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 3f ec 01 00       	call   c0028647 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 2e e2 01 00       	call   c0027c50 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 97 db 01 00       	call   c00275d3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 b8 d4 01 00       	call   c0026f68 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 8f eb 01 00       	call   c0028647 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 78 e1 01 00       	call   c0027c50 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 5b eb 01 00       	call   c0028647 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 cd da 01 00       	call   c00275d3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 2d eb 01 00       	call   c0028647 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 1c e1 01 00       	call   c0027c50 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 85 da 01 00       	call   c00275d3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 63 da 01 00       	call   c00275d3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 3f d3 01 00       	call   c0026f68 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 16 ea 01 00       	call   c0028647 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 ff df 01 00       	call   c0027c50 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 e2 e9 01 00       	call   c0028647 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 54 d9 01 00       	call   c00275d3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 b4 e9 01 00       	call   c0028647 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 9d df 01 00       	call   c0027c50 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 06 d9 01 00       	call   c00275d3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 66 e9 01 00       	call   c0028647 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 4f df 01 00       	call   c0027c50 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 b8 d8 01 00       	call   c00275d3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 cd d1 01 00       	call   c0026f68 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 a4 e8 01 00       	call   c0028647 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 8d de 01 00       	call   c0027c50 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 74 e8 01 00       	call   c0028647 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 e6 d7 01 00       	call   c00275d3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 46 e8 01 00       	call   c0028647 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 2f de 01 00       	call   c0027c50 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 98 d7 01 00       	call   c00275d3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 f8 e7 01 00       	call   c0028647 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 e1 dd 01 00       	call   c0027c50 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 4a d7 01 00       	call   c00275d3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 1e d7 01 00       	call   c00275d3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 7b dd 01 00       	call   c0027c50 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 37 e6 01 00       	call   c0028523 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 c6 d6 01 00       	call   c00275d3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 23 dd 01 00       	call   c0027c50 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 df e5 01 00       	call   c0028523 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 59 cf 01 00       	call   c0026f68 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 30 e6 01 00       	call   c0028647 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 19 dc 01 00       	call   c0027c50 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 fc e5 01 00       	call   c0028647 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 6e d5 01 00       	call   c00275d3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ce e5 01 00       	call   c0028647 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 b7 db 01 00       	call   c0027c50 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 20 d5 01 00       	call   c00275d3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 80 e5 01 00       	call   c0028647 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 69 db 01 00       	call   c0027c50 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 d2 d4 01 00       	call   c00275d3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 32 e5 01 00       	call   c0028647 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 1b db 01 00       	call   c0027c50 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 84 d4 01 00       	call   c00275d3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 e4 e4 01 00       	call   c0028647 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 cd da 01 00       	call   c0027c50 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 36 d4 01 00       	call   c00275d3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 38 cd 01 00       	call   c0026f68 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 0f e4 01 00       	call   c0028647 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 f8 d9 01 00       	call   c0027c50 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 df e3 01 00       	call   c0028647 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 51 d3 01 00       	call   c00275d3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 b1 e3 01 00       	call   c0028647 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 9a d9 01 00       	call   c0027c50 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 03 d3 01 00       	call   c00275d3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 63 e3 01 00       	call   c0028647 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 4c d9 01 00       	call   c0027c50 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 b5 d2 01 00       	call   c00275d3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 15 e3 01 00       	call   c0028647 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 fe d8 01 00       	call   c0027c50 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 67 d2 01 00       	call   c00275d3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 c7 e2 01 00       	call   c0028647 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 b0 d8 01 00       	call   c0027c50 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 19 d2 01 00       	call   c00275d3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 ed d1 01 00       	call   c00275d3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 4a d8 01 00       	call   c0027c50 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 06 e1 01 00       	call   c0028523 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 95 d1 01 00       	call   c00275d3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 f2 d7 01 00       	call   c0027c50 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 ae e0 01 00       	call   c0028523 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 3c d1 01 00       	call   c00275d3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 99 d7 01 00       	call   c0027c50 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 55 e0 01 00       	call   c0028523 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 e3 d0 01 00       	call   c00275d3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 40 d7 01 00       	call   c0027c50 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 fc df 01 00       	call   c0028523 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 5a c9 01 00       	call   c0026f68 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 31 e0 01 00       	call   c0028647 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 1a d6 01 00       	call   c0027c50 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 fd df 01 00       	call   c0028647 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 6f cf 01 00       	call   c00275d3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 cf df 01 00       	call   c0028647 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 b8 d5 01 00       	call   c0027c50 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 21 cf 01 00       	call   c00275d3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 81 df 01 00       	call   c0028647 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 6a d5 01 00       	call   c0027c50 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 d3 ce 01 00       	call   c00275d3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 33 df 01 00       	call   c0028647 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 1c d5 01 00       	call   c0027c50 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 85 ce 01 00       	call   c00275d3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 e5 de 01 00       	call   c0028647 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ce d4 01 00       	call   c0027c50 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 37 ce 01 00       	call   c00275d3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 97 de 01 00       	call   c0028647 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 80 d4 01 00       	call   c0027c50 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 e6 cd 01 00       	call   c00275d3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 46 de 01 00       	call   c0028647 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 2f d4 01 00       	call   c0027c50 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 98 cd 01 00       	call   c00275d3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 92 c6 01 00       	call   c0026f68 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 69 dd 01 00       	call   c0028647 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 52 d3 01 00       	call   c0027c50 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 32 dd 01 00       	call   c0028647 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 a4 cc 01 00       	call   c00275d3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 04 dd 01 00       	call   c0028647 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 ed d2 01 00       	call   c0027c50 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 56 cc 01 00       	call   c00275d3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 b6 dc 01 00       	call   c0028647 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 9f d2 01 00       	call   c0027c50 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 08 cc 01 00       	call   c00275d3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 68 dc 01 00       	call   c0028647 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 51 d2 01 00       	call   c0027c50 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ba cb 01 00       	call   c00275d3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 1a dc 01 00       	call   c0028647 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 03 d2 01 00       	call   c0027c50 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 6c cb 01 00       	call   c00275d3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 cc db 01 00       	call   c0028647 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 b5 d1 01 00       	call   c0027c50 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 1b cb 01 00       	call   c00275d3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 7b db 01 00       	call   c0028647 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 64 d1 01 00       	call   c0027c50 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 d3 ca 01 00       	call   c00275d3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 ac ca 01 00       	call   c00275d3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 0a d1 01 00       	call   c0027c50 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 c6 d9 01 00       	call   c0028523 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 55 ca 01 00       	call   c00275d3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 b3 d0 01 00       	call   c0027c50 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 6f d9 01 00       	call   c0028523 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 fd c9 01 00       	call   c00275d3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 5b d0 01 00       	call   c0027c50 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 17 d9 01 00       	call   c0028523 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 a5 c9 01 00       	call   c00275d3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 03 d0 01 00       	call   c0027c50 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 bf d8 01 00       	call   c0028523 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 4d c9 01 00       	call   c00275d3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 ab cf 01 00       	call   c0027c50 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 67 d8 01 00       	call   c0028523 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 fb c8 01 00       	call   c00275d3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 59 cf 01 00       	call   c0027c50 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 15 d8 01 00       	call   c0028523 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 29 c1 01 00       	call   c0026f68 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 00 d8 01 00       	call   c0028647 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 e9 cd 01 00       	call   c0027c50 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 d0 d7 01 00       	call   c0028647 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 42 c7 01 00       	call   c00275d3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 64 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd619c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 76 d7 01 00       	call   c0028647 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 5f cd 01 00       	call   c0027c50 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ca c6 01 00       	call   c00275d3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 17 d7 01 00       	call   c0028647 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 00 cd 01 00       	call   c0027c50 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 6b c6 01 00       	call   c00275d3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 b8 d6 01 00       	call   c0028647 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 a1 cc 01 00       	call   c0027c50 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 0c c6 01 00       	call   c00275d3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 59 d6 01 00       	call   c0028647 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 42 cc 01 00       	call   c0027c50 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 ad c5 01 00       	call   c00275d3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 fa d5 01 00       	call   c0028647 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 e3 cb 01 00       	call   c0027c50 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 4e c5 01 00       	call   c00275d3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 9b d5 01 00       	call   c0028647 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 84 cb 01 00       	call   c0027c50 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 ef c4 01 00       	call   c00275d3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 3c d5 01 00       	call   c0028647 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 25 cb 01 00       	call   c0027c50 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 90 c4 01 00       	call   c00275d3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 dd d4 01 00       	call   c0028647 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 c6 ca 01 00       	call   c0027c50 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 31 c4 01 00       	call   c00275d3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 3b bd 01 00       	call   c0026f68 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 12 d4 01 00       	call   c0028647 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 fb c9 01 00       	call   c0027c50 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 e2 d3 01 00       	call   c0028647 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 54 c3 01 00       	call   c00275d3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 80 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6180]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 87 d3 01 00       	call   c0028647 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 70 c9 01 00       	call   c0027c50 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 db c2 01 00       	call   c00275d3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 27 d3 01 00       	call   c0028647 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 10 c9 01 00       	call   c0027c50 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 7b c2 01 00       	call   c00275d3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 c7 d2 01 00       	call   c0028647 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 b0 c8 01 00       	call   c0027c50 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 1b c2 01 00       	call   c00275d3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 67 d2 01 00       	call   c0028647 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 50 c8 01 00       	call   c0027c50 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 bb c1 01 00       	call   c00275d3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 07 d2 01 00       	call   c0028647 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 f0 c7 01 00       	call   c0027c50 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 5b c1 01 00       	call   c00275d3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 a7 d1 01 00       	call   c0028647 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 90 c7 01 00       	call   c0027c50 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 fb c0 01 00       	call   c00275d3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 47 d1 01 00       	call   c0028647 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 30 c7 01 00       	call   c0027c50 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 9b c0 01 00       	call   c00275d3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 e7 d0 01 00       	call   c0028647 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 d0 c6 01 00       	call   c0027c50 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 3b c0 01 00       	call   c00275d3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 9c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6164]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 e0 bf 01 00       	call   c00275d3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 3d c6 01 00       	call   c0027c50 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 f9 ce 01 00       	call   c0028523 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 83 bf 01 00       	call   c00275d3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 e0 c5 01 00       	call   c0027c50 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 9c ce 01 00       	call   c0028523 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 26 bf 01 00       	call   c00275d3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 83 c5 01 00       	call   c0027c50 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 3f ce 01 00       	call   c0028523 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 c9 be 01 00       	call   c00275d3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 26 c5 01 00       	call   c0027c50 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 e2 cd 01 00       	call   c0028523 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 6c be 01 00       	call   c00275d3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 c9 c4 01 00       	call   c0027c50 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 85 cd 01 00       	call   c0028523 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 0f be 01 00       	call   c00275d3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 6c c4 01 00       	call   c0027c50 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 28 cd 01 00       	call   c0028523 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 b2 bd 01 00       	call   c00275d3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 0f c4 01 00       	call   c0027c50 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 cb cc 01 00       	call   c0028523 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 55 bd 01 00       	call   c00275d3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 b2 c3 01 00       	call   c0027c50 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 6e cc 01 00       	call   c0028523 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 6a c3 01 00       	call   c0027c50 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 da cd 01 00       	jmp    c00286d0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 4c ca 01 00       	call   c002851f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 0a ca 01 00       	call   c0028501 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 a1 c7 01 00       	call   c00282b3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 a2 ba 01 00       	call   c00275d3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 71 c7 01 00       	call   c00282b3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 d8 c3 01 00       	call   c0027f34 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 77 c9 01 00       	call   c0028501 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 7a c9 01 00       	call   c002851f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 4d c9 01 00       	call   c002851f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 46 c3 01 00       	call   c0027f34 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 c8 ca 01 00       	call   c00286d0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 a3 ca 01 00       	call   c00286d0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 7d c6 01 00       	call   c00282b3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 d4 bf 01 00       	call   c0027c24 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 b3 c8 01 00       	call   c002851f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 4c b9 01 00       	call   c00275d3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 70 bf 01 00       	call   c0027c24 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 0a ca 01 00       	call   c00286d0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 4a c2 01 00       	call   c0027f34 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 c7 b8 01 00       	call   c00275d3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 f3 c4 01 00       	call   c00282b3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 f3 b7 01 00       	call   c00275d3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 d3 b7 01 00       	call   c00275d3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 a3 c4 01 00       	call   c00282b3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 f3 c6 01 00       	call   c002851d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 d2 bd 01 00       	call   c0027c24 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 4c c8 01 00       	call   c00286b0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 7b c6 01 00       	call   c0028501 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 79 bd 01 00       	call   c0027c24 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 f7 c3 01 00       	call   c00282b3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 7a bd 01 00       	call   c0027c50 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 cc c3 01 00       	call   c00282b3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 33 c0 01 00       	call   c0027f34 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 b2 b6 01 00       	call   c00275d3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 7c c3 01 00       	call   c00282b3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 c8 c5 01 00       	call   c002851f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 bd bc 01 00       	call   c0027c50 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 8f bc 01 00       	call   c0027c50 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 c8 c2 01 00       	call   c00282b3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 2c bf 01 00       	call   c0027f34 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 f4 be 01 00       	call   c0027f34 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 73 b5 01 00       	call   c00275d3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 58 c6 01 00       	call   c00286d0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 32 c2 01 00       	call   c00282b3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 89 bb 01 00       	call   c0027c24 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 68 c4 01 00       	call   c002851f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 00 b5 01 00       	call   c00275d3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 24 bb 01 00       	call   c0027c24 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 be c5 01 00       	call   c00286d0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 87 c3 01 00       	call   c002851f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 45 c3 01 00       	call   c0028501 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 dc c0 01 00       	call   c00282b3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 dd b3 01 00       	call   c00275d3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 ac c0 01 00       	call   c00282b3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 13 bd 01 00       	call   c0027f34 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 b2 c2 01 00       	call   c0028501 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 b5 c2 01 00       	call   c002851f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 88 c2 01 00       	call   c002851f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 81 bc 01 00       	call   c0027f34 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 03 c4 01 00       	call   c00286d0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 de c3 01 00       	call   c00286d0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 b8 bf 01 00       	call   c00282b3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 0f b9 01 00       	call   c0027c24 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 ee c1 01 00       	call   c002851f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 87 b2 01 00       	call   c00275d3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 ab b8 01 00       	call   c0027c24 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 45 c3 01 00       	call   c00286d0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 85 bb 01 00       	call   c0027f34 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 02 b2 01 00       	call   c00275d3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 2d be 01 00       	call   c00282b3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 2d b1 01 00       	call   c00275d3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 0d b1 01 00       	call   c00275d3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 dd bd 01 00       	call   c00282b3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 2d c0 01 00       	call   c002851d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 0b b7 01 00       	call   c0027c24 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 85 c1 01 00       	call   c00286b0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 b4 bf 01 00       	call   c0028501 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 b1 b6 01 00       	call   c0027c24 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 2f bd 01 00       	call   c00282b3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 b2 b6 01 00       	call   c0027c50 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 04 bd 01 00       	call   c00282b3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 6b b9 01 00       	call   c0027f34 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 ea af 01 00       	call   c00275d3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 b4 bc 01 00       	call   c00282b3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 00 bf 01 00       	call   c002851f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 f5 b5 01 00       	call   c0027c50 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 c7 b5 01 00       	call   c0027c50 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 fe bb 01 00       	call   c00282b3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 62 b8 01 00       	call   c0027f34 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 2f b8 01 00       	call   c0027f34 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 ae ae 01 00       	call   c00275d3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 93 bf 01 00       	call   c00286d0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 6d bb 01 00       	call   c00282b3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 c4 b4 01 00       	call   c0027c24 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 a3 bd 01 00       	call   c002851f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 3b ae 01 00       	call   c00275d3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 5f b4 01 00       	call   c0027c24 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 f9 be 01 00       	call   c00286d0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 c2 bc 01 00       	call   c002851f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 80 bc 01 00       	call   c0028501 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 17 ba 01 00       	call   c00282b3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 18 ad 01 00       	call   c00275d3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 e7 b9 01 00       	call   c00282b3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 4e b6 01 00       	call   c0027f34 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 ed bb 01 00       	call   c0028501 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 f0 bb 01 00       	call   c002851f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 c3 bb 01 00       	call   c002851f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 bc b5 01 00       	call   c0027f34 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 3e bd 01 00       	call   c00286d0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 19 bd 01 00       	call   c00286d0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 f3 b8 01 00       	call   c00282b3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 4a b2 01 00       	call   c0027c24 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 29 bb 01 00       	call   c002851f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 c2 ab 01 00       	call   c00275d3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 e6 b1 01 00       	call   c0027c24 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 80 bc 01 00       	call   c00286d0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 c0 b4 01 00       	call   c0027f34 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 3d ab 01 00       	call   c00275d3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 68 b7 01 00       	call   c00282b3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 68 aa 01 00       	call   c00275d3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 48 aa 01 00       	call   c00275d3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 18 b7 01 00       	call   c00282b3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 68 b9 01 00       	call   c002851d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 46 b0 01 00       	call   c0027c24 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 c0 ba 01 00       	call   c00286b0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 ef b8 01 00       	call   c0028501 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 ec af 01 00       	call   c0027c24 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 6a b6 01 00       	call   c00282b3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 ed af 01 00       	call   c0027c50 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 3f b6 01 00       	call   c00282b3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 a6 b2 01 00       	call   c0027f34 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 25 a9 01 00       	call   c00275d3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 ef b5 01 00       	call   c00282b3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 3b b8 01 00       	call   c002851f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 30 af 01 00       	call   c0027c50 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 02 af 01 00       	call   c0027c50 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 39 b5 01 00       	call   c00282b3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 9d b1 01 00       	call   c0027f34 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 6a b1 01 00       	call   c0027f34 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 e9 a7 01 00       	call   c00275d3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ce b8 01 00       	call   c00286d0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 a8 b4 01 00       	call   c00282b3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 ff ad 01 00       	call   c0027c24 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 de b6 01 00       	call   c002851f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 76 a7 01 00       	call   c00275d3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 9a ad 01 00       	call   c0027c24 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 34 b8 01 00       	call   c00286d0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 fd b5 01 00       	call   c002851f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 bb b5 01 00       	call   c0028501 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 52 b3 01 00       	call   c00282b3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 53 a6 01 00       	call   c00275d3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 22 b3 01 00       	call   c00282b3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 89 af 01 00       	call   c0027f34 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 28 b5 01 00       	call   c0028501 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 2b b5 01 00       	call   c002851f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 fe b4 01 00       	call   c002851f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 f7 ae 01 00       	call   c0027f34 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 79 b6 01 00       	call   c00286d0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 54 b6 01 00       	call   c00286d0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 2e b2 01 00       	call   c00282b3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 85 ab 01 00       	call   c0027c24 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 64 b4 01 00       	call   c002851f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 fd a4 01 00       	call   c00275d3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 21 ab 01 00       	call   c0027c24 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 bb b5 01 00       	call   c00286d0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 fb ad 01 00       	call   c0027f34 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 78 a4 01 00       	call   c00275d3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 a3 b0 01 00       	call   c00282b3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 a3 a3 01 00       	call   c00275d3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 83 a3 01 00       	call   c00275d3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 53 b0 01 00       	call   c00282b3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 a3 b2 01 00       	call   c002851d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 81 a9 01 00       	call   c0027c24 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 fb b3 01 00       	call   c00286b0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 2a b2 01 00       	call   c0028501 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 27 a9 01 00       	call   c0027c24 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 a5 af 01 00       	call   c00282b3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 28 a9 01 00       	call   c0027c50 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 7a af 01 00       	call   c00282b3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 e1 ab 01 00       	call   c0027f34 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 60 a2 01 00       	call   c00275d3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 2a af 01 00       	call   c00282b3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 76 b1 01 00       	call   c002851f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 6b a8 01 00       	call   c0027c50 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 3d a8 01 00       	call   c0027c50 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 74 ae 01 00       	call   c00282b3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 d8 aa 01 00       	call   c0027f34 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 a5 aa 01 00       	call   c0027f34 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 24 a1 01 00       	call   c00275d3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 09 b2 01 00       	call   c00286d0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 e3 ad 01 00       	call   c00282b3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 3a a7 01 00       	call   c0027c24 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 19 b0 01 00       	call   c002851f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 b1 a0 01 00       	call   c00275d3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 d5 a6 01 00       	call   c0027c24 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 6f b1 01 00       	call   c00286d0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 35 af 01 00       	call   c002851f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 f3 ae 01 00       	call   c0028501 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 8a ac 01 00       	call   c00282b3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 8b 9f 01 00       	call   c00275d3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 5a ac 01 00       	call   c00282b3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 c1 a8 01 00       	call   c0027f34 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 60 ae 01 00       	call   c0028501 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 63 ae 01 00       	call   c002851f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 36 ae 01 00       	call   c002851f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 2f a8 01 00       	call   c0027f34 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 b1 af 01 00       	call   c00286d0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 88 af 01 00       	call   c00286d0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 62 ab 01 00       	call   c00282b3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 b9 a4 01 00       	call   c0027c24 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 98 ad 01 00       	call   c002851f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 31 9e 01 00       	call   c00275d3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 59 a4 01 00       	call   c0027c24 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 f3 ae 01 00       	call   c00286d0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 34 a7 01 00       	call   c0027f34 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 b1 9d 01 00       	call   c00275d3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 dd a9 01 00       	call   c00282b3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 dd 9c 01 00       	call   c00275d3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 bd 9c 01 00       	call   c00275d3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 8d a9 01 00       	call   c00282b3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 c1 ab 01 00       	call   c0028501 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 b8 a2 01 00       	call   c0027c24 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 32 ad 01 00       	call   c00286b0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 61 ab 01 00       	call   c0028501 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 5b a2 01 00       	call   c0027c24 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 d9 a8 01 00       	call   c00282b3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 5c a2 01 00       	call   c0027c50 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 ae a8 01 00       	call   c00282b3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 15 a5 01 00       	call   c0027f34 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 94 9b 01 00       	call   c00275d3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 5e a8 01 00       	call   c00282b3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 aa aa 01 00       	call   c002851f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 9f a1 01 00       	call   c0027c50 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 71 a1 01 00       	call   c0027c50 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 b5 a7 01 00       	call   c00282b3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 1c a4 01 00       	call   c0027f34 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 05 a1 01 00       	call   c0027c50 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 c1 a9 01 00       	call   c0028523 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 b4 a3 01 00       	call   c0027f34 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 33 9a 01 00       	call   c00275d3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 18 ab 01 00       	call   c00286d0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 f2 a6 01 00       	call   c00282b3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 49 a0 01 00       	call   c0027c24 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 28 a9 01 00       	call   c002851f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 c0 99 01 00       	call   c00275d3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 e8 9f 01 00       	call   c0027c24 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 82 aa 01 00       	call   c00286d0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 c4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd613c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 b8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6148]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 3d a7 01 00       	call   c002851f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 fb a6 01 00       	call   c0028501 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 e7 a6 01 00       	call   c002851f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 59 a4 01 00       	call   c00282b3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 d7 9d 01 00       	call   c0027c50 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 29 a4 01 00       	call   c00282b3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 2f 97 01 00       	call   c00275d3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 fe a3 01 00       	call   c00282b3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 4e a6 01 00       	call   c002851d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 2f 9d 01 00       	call   c0027c24 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 a9 a7 01 00       	call   c00286b0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 d8 a5 01 00       	call   c0028501 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 d7 9c 01 00       	call   c0027c24 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 55 a3 01 00       	call   c00282b3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 d8 9c 01 00       	call   c0027c50 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 2a a3 01 00       	call   c00282b3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 91 9f 01 00       	call   c0027f34 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 10 96 01 00       	call   c00275d3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 38 9f 01 00       	call   c0027f34 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 be 95 01 00       	call   c00275d3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 a4 a6 01 00       	call   c00286d0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 7e a2 01 00       	call   c00282b3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 d5 9b 01 00       	call   c0027c24 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 b4 a4 01 00       	call   c002851f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 4d 95 01 00       	call   c00275d3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 79 9b 01 00       	call   c0027c24 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 13 a6 01 00       	call   c00286d0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 c8 a1 01 00       	call   c00282b3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 45 9b 01 00       	call   c0027c50 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 96 a1 01 00       	call   c00282b3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 9c 94 01 00       	call   c00275d3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 6c a1 01 00       	call   c00282b3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 c0 a3 01 00       	call   c0028521 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 99 9a 01 00       	call   c0027c24 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 13 a5 01 00       	call   c00286b0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 42 a3 01 00       	call   c0028501 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 40 9a 01 00       	call   c0027c24 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 be a0 01 00       	call   c00282b3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 41 9a 01 00       	call   c0027c50 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 93 a0 01 00       	call   c00282b3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 fa 9c 01 00       	call   c0027f34 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 79 93 01 00       	call   c00275d3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 95 9c 01 00       	call   c0027f34 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 14 93 01 00       	call   c00275d3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 fa a3 01 00       	call   c00286d0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 d4 9f 01 00       	call   c00282b3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 2b 99 01 00       	call   c0027c24 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 0a a2 01 00       	call   c002851f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 a3 92 01 00       	call   c00275d3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 cf 98 01 00       	call   c0027c24 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 40 9f 01 00       	call   c00282b3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 46 92 01 00       	call   c00275d3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 ef 9f 02 c0       	mov    eax,0xc0029fef
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 26 a0 02 c0       	push   0xc002a026
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 28 e5 02 c0       	mov    eax,0xc002e528
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 2f a0 02 c0       	push   0xc002a02f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 4c 6a 02 c0       	mov    eax,0xc0026a4c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 39 a0 02 c0       	push   0xc002a039
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 80 67 02 c0       	mov    eax,0xc0026780
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 42 a0 02 c0       	push   0xc002a042
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 4c 6b 02 c0       	mov    eax,0xc0026b4c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 4c a0 02 c0       	push   0xc002a04c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 cc 68 02 c0       	mov    eax,0xc00268cc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 55 a0 02 c0       	push   0xc002a055
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 2c e5 02 c0       	mov    eax,0xc002e52c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 62 a0 02 c0       	push   0xc002a062
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 2d e5 02 c0       	mov    eax,0xc002e52d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 63 5f 00 00       	call   c0014586 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c000e668:	68 6f a0 02 c0       	push   0xc002a06f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 35 f6 00 00       	call   c001dcaa <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 1e f9 00 00       	call   c001dfa8 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 06 e8 01 c0       	push   0xc001e806
c000e693:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c000e699:	e8 0a f9 00 00       	call   c001dfa8 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c000e6a6:	c6 05 2d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e52d,0x1
c000e6ad:	e8 d5 04 01 00       	call   c001eb87 <Vm::initialise8086()>
c000e6b2:	e8 b7 4c 00 00       	call   c001336e <Fs::initVFS()>
c000e6b7:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 67 df 00 00       	call   c001c63a <Sys::loadSyscalls()>
c000e6d3:	e8 8a be 00 00       	call   c001a562 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 7c a0 02 c0       	push   0xc002a07c
c000e6e2:	68 85 a0 02 c0       	push   0xc002a085
c000e6e7:	e8 9c cb 00 00       	call   c001b288 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 62 57 00 00       	call   c0013e56 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 55 5e 00 00       	call   c001455a <Device::loadDriversForAll()>
c000e705:	e8 9e b9 00 00       	call   c001a0a8 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 8d a0 02 c0       	push   0xc002a08d
c000e719:	e8 b0 f0 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 db f2 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 d8 fb 00 00       	call   c001e30c <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 a9 a0 02 c0       	push   0xc002a0a9
c000e749:	50                   	push   eax
c000e74a:	e8 b1 5e 00 00       	call   c0014600 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 41 e5 02 c0 04 	test   BYTE PTR ds:0xc002e541,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 33 7e 01 00       	call   c0026716 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 9c a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 75 a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 53 a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 31 a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 40 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e540,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 3f a3 00 00       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 1a a3 00 00       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 9d 7c 01 00       	call   c00266d0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 5a 7c 01 00       	call   c00266b0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 36 a3 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 b9 a0 02 c0       	push   0xc002a0b9
c000eaaf:	e8 36 45 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 cc a0 02 c0       	push   0xc002a0cc
c000ead2:	e8 13 45 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 dd a0 02 c0       	push   0xc002a0dd
c000eaf5:	e8 f0 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ee a0 02 c0       	push   0xc002a0ee
c000eb18:	e8 cd 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 ff a0 02 c0       	push   0xc002a0ff
c000eb3b:	e8 aa 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 10 a1 02 c0       	push   0xc002a110
c000eb5e:	e8 87 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 21 a1 02 c0       	push   0xc002a121
c000eb81:	e8 64 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 32 a1 02 c0       	push   0xc002a132
c000eba4:	e8 41 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 43 a1 02 c0       	push   0xc002a143
c000ebc7:	e8 1e 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 54 a1 02 c0       	push   0xc002a154
c000ebea:	e8 fb 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 65 a1 02 c0       	push   0xc002a165
c000ec0d:	e8 d8 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 76 a1 02 c0       	push   0xc002a176
c000ec30:	e8 b5 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 87 a1 02 c0       	push   0xc002a187
c000ec53:	e8 92 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 98 a1 02 c0       	push   0xc002a198
c000ec76:	e8 6f 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 a9 a1 02 c0       	push   0xc002a1a9
c000ec99:	e8 4c 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 ba a1 02 c0       	push   0xc002a1ba
c000ecbc:	e8 29 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 cb a1 02 c0       	push   0xc002a1cb
c000ecdf:	e8 06 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 dc a1 02 c0       	push   0xc002a1dc
c000ed02:	e8 e3 42 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 ed a1 02 c0       	push   0xc002a1ed
c000ed21:	e8 c4 42 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 1c bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc1c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 b3 42 00 00       	jmp    c0012fea <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 fe a1 02 c0       	push   0xc002a1fe
c000ee0a:	e8 8c b8 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 04 a2 02 c0       	push   0xc002a204
c000ee42:	e8 54 b8 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 40 e5 02 c0 04 	test   BYTE PTR ds:0xc002e540,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 64 d4 02 c0 	sete   BYTE PTR ds:0xc002d464
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 d5 93 00 00       	call   c001828a <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 4c 55 00 00       	call   c0014410 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 7e 9f 00 00       	call   c0018e72 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 0d 55 00 00       	call   c0014410 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 77 5a 00 00       	call   c0014996 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 dd 54 00 00       	call   c0014410 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 53 f1 00 00       	call   c001e0a8 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 0a a2 02 c0       	push   0xc002a20a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 47 40 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 1b a2 02 c0       	push   0xc002a21b
c000efc0:	e8 d6 b6 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 28 a2 02 c0       	push   0xc002a228
c000efd5:	e8 c1 b6 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 32 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a232
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 aa b6 00 00       	jmp    c001a69b <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 6c a2 02 c0       	push   0xc002a26c
c000f086:	e8 5f 3f 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 32 e5 02 c0       	mov    ds:0xc002e532,eax
c000f0c7:	66 89 15 30 e5 02 c0 	mov    WORD PTR ds:0xc002e530,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 9a ec 00 00       	call   c001de78 <unlockScheduler()>
c000f1de:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 24 95 01 00       	call   c0028750 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 1b 95 01 00       	call   c0028750 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 38 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e538,0x7ff
c000f323:	a3 3a e5 02 c0       	mov    ds:0xc002e53a,eax
c000f328:	0f 01 1d 38 e5 02 c0 	lidtd  ds:0xc002e538
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 69 28 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 9a 2e 00 00       	call   c00124ba <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 d6 1e 00 00       	call   c0011514 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 07 1f 00 00       	call   c0011554 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 4c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d44c
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 88 a2 02 c0       	push   0xc002a288
c000f6f4:	e8 f1 38 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 4c d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d44c,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 5f 27 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 4c d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d44c
c000f727:	e8 d5 07 00 00       	call   c000ff01 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 81 2c 00 00       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 4c d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d44c
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 b8 a2 02 c0       	push   0xc002a2b8
c000f7ad:	e8 e9 ae 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 bd a2 02 c0       	push   0xc002a2bd
c000f7c3:	e8 d3 ae 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 9d e6 00 00       	call   c001de76 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 8e e6 00 00       	call   c001de78 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 83 26 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 b0 2c 00 00       	call   c00124ba <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 68 26 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 53 29 00 00       	call   c0012176 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 60 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d460
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 f6 0c 00 00       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 b8 0c 00 00       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 4f 0d 00 00       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 60 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d460
c000fb46:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 60 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d460,0x8000
c000fba0:	c6 05 c0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5c0,0x1
c000fba7:	c7 05 f8 e5 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e5f8,0xc000fa13
c000fbb1:	c7 05 e4 e5 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e5e4,0xc000f89a
c000fbbb:	c7 05 e0 e5 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e5e0,0xc000f8e5
c000fbc5:	c7 05 ec e5 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e5ec,0xc000fa59
c000fbcf:	c7 05 f4 e5 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e5f4,0xc000f963
c000fbd9:	c7 05 e8 e5 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e5e8,0xc000f9c1
c000fbe3:	c7 05 f0 e5 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e5f0,0xc000f9c2
c000fbed:	c7 05 fc e5 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e5fc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 36 0a 00 00       	call   c0010640 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 c4 a2 02 c0       	push   0xc002a2c4
c000fc4a:	e8 9b 33 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 95 04 00 00       	call   c00100fb <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 37 21 00 00       	call   c0011da2 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 1d bc 02 c0       	push   0xc002bc1d
c000fc92:	e8 04 aa 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 40 e5 02 c0    	mov    DWORD PTR ds:0xc002e540,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 07 23 00 00       	call   c0011fb4 <VAS::VAS()>
c000fcad:	89 1d ac e6 02 c0    	mov    DWORD PTR ds:0xc002e6ac,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 db a2 02 c0 	mov    DWORD PTR [esp],0xc002a2db
c000fcbf:	e8 26 33 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 58 21 00 00       	call   c0011e21 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 28 e5 02 c0    	mov    DWORD PTR ds:0xc002e528,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 f8 a2 02 c0       	push   0xc002a2f8
c000fced:	e8 f8 32 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 42 25 00 00       	call   c001224e <VAS::~VAS()>
c000fd0c:	c7 04 24 0b a3 02 c0 	mov    DWORD PTR [esp],0xc002a30b
c000fd13:	e8 83 a9 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 80 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a80],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 80 e5 02 c0       	mov    esi,0xc002e580
c000fd89:	8d 90 80 e5 02 c0    	lea    edx,[eax-0x3ffd1a80]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 80 e5 02 c0    	lea    eax,[edx-0x3ffd1a80]
c000fdef:	8d 94 11 80 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a80]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 50 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d450
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 50 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d450
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 50 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d450
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 76                	jbe    c000fede <Phys::freePage(unsigned long)+0x86>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 7a                	je     c000fef0 <Phys::freePage(unsigned long)+0x98>
c000fe76:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 70 e5 02 c0       	mov    ds:0xc002e570,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 74 e5 02 c0    	idiv   DWORD PTR ds:0xc002e574
c000fe91:	39 05 6c e5 02 c0    	cmp    DWORD PTR ds:0xc002e56c,eax
c000fe97:	75 32                	jne    c000fecb <Phys::freePage(unsigned long)+0x73>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 0c             	add    esp,0xc
c000fea7:	a1 74 e5 02 c0       	mov    eax,ds:0xc002e574
c000feac:	c1 e0 02             	shl    eax,0x2
c000feaf:	50                   	push   eax
c000feb0:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000feb5:	c1 e0 02             	shl    eax,0x2
c000feb8:	50                   	push   eax
c000feb9:	68 88 a3 02 c0       	push   0xc002a388
c000febe:	e8 27 31 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fec3:	83 c4 10             	add    esp,0x10
c000fec6:	83 c4 08             	add    esp,0x8
c000fec9:	5b                   	pop    ebx
c000feca:	c3                   	ret    
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c000fed3:	50                   	push   eax
c000fed4:	e8 fb 0a 00 00       	call   c00109d4 <VgaText::updateRAMUsageDisplay(int)>
c000fed9:	83 c4 10             	add    esp,0x10
c000fedc:	eb bb                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000fede:	68 00 10 00 00       	push   0x1000
c000fee3:	53                   	push   ebx
c000fee4:	e8 d9 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee9:	59                   	pop    ecx
c000feea:	5b                   	pop    ebx
c000feeb:	83 c4 08             	add    esp,0x8
c000feee:	5b                   	pop    ebx
c000feef:	c3                   	ret    
c000fef0:	c7 44 24 10 26 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a326
c000fef8:	83 c4 08             	add    esp,0x8
c000fefb:	5b                   	pop    ebx
c000fefc:	e9 9a a7 00 00       	jmp    c001a69b <Krnl::panic(char const*)>

c000ff01 <Phys::allocatePage()>:
c000ff01:	56                   	push   esi
c000ff02:	53                   	push   ebx
c000ff03:	83 ec 14             	sub    esp,0x14
c000ff06:	8b 35 64 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e564
c000ff0c:	89 f3                	mov    ebx,esi
c000ff0e:	eb 0a                	jmp    c000ff1a <Phys::allocatePage()+0x19>
c000ff10:	89 1d 64 e5 02 c0    	mov    DWORD PTR ds:0xc002e564,ebx
c000ff16:	39 de                	cmp    esi,ebx
c000ff18:	74 24                	je     c000ff3e <Phys::allocatePage()+0x3d>
c000ff1a:	53                   	push   ebx
c000ff1b:	e8 1c ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff20:	59                   	pop    ecx
c000ff21:	84 c0                	test   al,al
c000ff23:	74 5e                	je     c000ff83 <Phys::allocatePage()+0x82>
c000ff25:	43                   	inc    ebx
c000ff26:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff2c:	75 e2                	jne    c000ff10 <Phys::allocatePage()+0xf>
c000ff2e:	31 db                	xor    ebx,ebx
c000ff30:	c7 05 64 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e564,0x0
c000ff3a:	39 de                	cmp    esi,ebx
c000ff3c:	75 dc                	jne    c000ff1a <Phys::allocatePage()+0x19>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 3c a3 02 c0       	push   0xc002a33c
c000ff46:	e8 9f 30 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ff4b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff52:	e8 c8 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	0f 85 ce 00 00 00    	jne    c0010030 <Phys::allocatePage()+0x12f>
c000ff62:	83 ec 0c             	sub    esp,0xc
c000ff65:	68 4d a3 02 c0       	push   0xc002a34d
c000ff6a:	e8 2c a7 00 00       	call   c001a69b <Krnl::panic(char const*)>
c000ff6f:	83 c4 10             	add    esp,0x10
c000ff72:	8b 1d 64 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e564
c000ff78:	53                   	push   ebx
c000ff79:	e8 be fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff7e:	59                   	pop    ecx
c000ff7f:	84 c0                	test   al,al
c000ff81:	75 a2                	jne    c000ff25 <Phys::allocatePage()+0x24>
c000ff83:	6a 01                	push   0x1
c000ff85:	53                   	push   ebx
c000ff86:	e8 7f fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff8b:	83 ec 0c             	sub    esp,0xc
c000ff8e:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000ff93:	8b 0d 74 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e574
c000ff99:	40                   	inc    eax
c000ff9a:	8d 14 8d 00 00 00 00 	lea    edx,[ecx*4+0x0]
c000ffa1:	a3 70 e5 02 c0       	mov    ds:0xc002e570,eax
c000ffa6:	52                   	push   edx
c000ffa7:	c1 e0 02             	shl    eax,0x2
c000ffaa:	50                   	push   eax
c000ffab:	68 b0 a3 02 c0       	push   0xc002a3b0
c000ffb0:	e8 35 30 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ffb5:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000ffba:	83 c4 20             	add    esp,0x20
c000ffbd:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc0:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc3:	c1 e0 02             	shl    eax,0x2
c000ffc6:	99                   	cdq    
c000ffc7:	f7 3d 74 e5 02 c0    	idiv   DWORD PTR ds:0xc002e574
c000ffcd:	39 05 6c e5 02 c0    	cmp    DWORD PTR ds:0xc002e56c,eax
c000ffd3:	75 61                	jne    c0010036 <Phys::allocatePage()+0x135>
c000ffd5:	83 f8 32             	cmp    eax,0x32
c000ffd8:	7e 4e                	jle    c0010028 <Phys::allocatePage()+0x127>
c000ffda:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000ffe1:	75 45                	jne    c0010028 <Phys::allocatePage()+0x127>
c000ffe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffe8:	85 c0                	test   eax,eax
c000ffea:	74 1f                	je     c001000b <Phys::allocatePage()+0x10a>
c000ffec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffef:	85 c0                	test   eax,eax
c000fff1:	74 18                	je     c001000b <Phys::allocatePage()+0x10a>
c000fff3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000fff9:	85 c0                	test   eax,eax
c000fffb:	74 0e                	je     c001000b <Phys::allocatePage()+0x10a>
c000fffd:	52                   	push   edx
c000fffe:	6a 10                	push   0x10
c0010000:	6a 04                	push   0x4
c0010002:	50                   	push   eax
c0010003:	e8 98 2b 00 00       	call   c0012ba0 <VAS::scanForEviction(int, int)>
c0010008:	83 c4 10             	add    esp,0x10
c001000b:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c0010010:	8d 04 80             	lea    eax,[eax+eax*4]
c0010013:	8d 04 80             	lea    eax,[eax+eax*4]
c0010016:	c1 e0 02             	shl    eax,0x2
c0010019:	99                   	cdq    
c001001a:	f7 3d 74 e5 02 c0    	idiv   DWORD PTR ds:0xc002e574
c0010020:	39 05 6c e5 02 c0    	cmp    DWORD PTR ds:0xc002e56c,eax
c0010026:	75 2e                	jne    c0010056 <Phys::allocatePage()+0x155>
c0010028:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c001002d:	c1 e0 0c             	shl    eax,0xc
c0010030:	83 c4 14             	add    esp,0x14
c0010033:	5b                   	pop    ebx
c0010034:	5e                   	pop    esi
c0010035:	c3                   	ret    
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c001003e:	50                   	push   eax
c001003f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010043:	e8 8c 09 00 00       	call   c00109d4 <VgaText::updateRAMUsageDisplay(int)>
c0010048:	83 c4 10             	add    esp,0x10
c001004b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001004f:	83 f8 32             	cmp    eax,0x32
c0010052:	7e d4                	jle    c0010028 <Phys::allocatePage()+0x127>
c0010054:	eb 84                	jmp    c000ffda <Phys::allocatePage()+0xd9>
c0010056:	83 ec 0c             	sub    esp,0xc
c0010059:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c001005e:	50                   	push   eax
c001005f:	e8 70 09 00 00       	call   c00109d4 <VgaText::updateRAMUsageDisplay(int)>
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	eb bf                	jmp    c0010028 <Phys::allocatePage()+0x127>

c0010069 <Phys::allocateContiguousPages(int)>:
c0010069:	57                   	push   edi
c001006a:	56                   	push   esi
c001006b:	53                   	push   ebx
c001006c:	31 db                	xor    ebx,ebx
c001006e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010072:	e8 ff dd 00 00       	call   c001de76 <lockScheduler()>
c0010077:	85 db                	test   ebx,ebx
c0010079:	75 11                	jne    c001008c <Phys::allocateContiguousPages(int)+0x23>
c001007b:	e8 81 fe ff ff       	call   c000ff01 <Phys::allocatePage()>
c0010080:	83 ff 01             	cmp    edi,0x1
c0010083:	89 c6                	mov    esi,eax
c0010085:	74 21                	je     c00100a8 <Phys::allocateContiguousPages(int)+0x3f>
c0010087:	bb 01 00 00 00       	mov    ebx,0x1
c001008c:	e8 70 fe ff ff       	call   c000ff01 <Phys::allocatePage()>
c0010091:	89 da                	mov    edx,ebx
c0010093:	c1 e2 0c             	shl    edx,0xc
c0010096:	01 f2                	add    edx,esi
c0010098:	39 c2                	cmp    edx,eax
c001009a:	74 17                	je     c00100b3 <Phys::allocateContiguousPages(int)+0x4a>
c001009c:	bb 01 00 00 00       	mov    ebx,0x1
c00100a1:	89 c6                	mov    esi,eax
c00100a3:	83 ff 01             	cmp    edi,0x1
c00100a6:	75 e4                	jne    c001008c <Phys::allocateContiguousPages(int)+0x23>
c00100a8:	e8 cb dd 00 00       	call   c001de78 <unlockScheduler()>
c00100ad:	89 f0                	mov    eax,esi
c00100af:	5b                   	pop    ebx
c00100b0:	5e                   	pop    esi
c00100b1:	5f                   	pop    edi
c00100b2:	c3                   	ret    
c00100b3:	43                   	inc    ebx
c00100b4:	39 fb                	cmp    ebx,edi
c00100b6:	75 bf                	jne    c0010077 <Phys::allocateContiguousPages(int)+0xe>
c00100b8:	e8 bb dd 00 00       	call   c001de78 <unlockScheduler()>
c00100bd:	89 f0                	mov    eax,esi
c00100bf:	5b                   	pop    ebx
c00100c0:	5e                   	pop    esi
c00100c1:	5f                   	pop    edi
c00100c2:	c3                   	ret    

c00100c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100c3:	56                   	push   esi
c00100c4:	53                   	push   ebx
c00100c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100c9:	39 1d 68 e5 02 c0    	cmp    DWORD PTR ds:0xc002e568,ebx
c00100cf:	73 06                	jae    c00100d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100d1:	89 1d 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,ebx
c00100d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100db:	c1 eb 0c             	shr    ebx,0xc
c00100de:	c1 e8 0c             	shr    eax,0xc
c00100e1:	39 d8                	cmp    eax,ebx
c00100e3:	73 13                	jae    c00100f8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100e5:	6a 00                	push   0x0
c00100e7:	8d 70 01             	lea    esi,[eax+0x1]
c00100ea:	50                   	push   eax
c00100eb:	e8 1a fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100f0:	5a                   	pop    edx
c00100f1:	89 f0                	mov    eax,esi
c00100f3:	59                   	pop    ecx
c00100f4:	39 f3                	cmp    ebx,esi
c00100f6:	75 ed                	jne    c00100e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100f8:	5b                   	pop    ebx
c00100f9:	5e                   	pop    esi
c00100fa:	c3                   	ret    

c00100fb <Phys::physicalMemorySetup(unsigned int)>:
c00100fb:	55                   	push   ebp
c00100fc:	57                   	push   edi
c00100fd:	56                   	push   esi
c00100fe:	53                   	push   ebx
c00100ff:	31 db                	xor    ebx,ebx
c0010101:	83 ec 40             	sub    esp,0x40
c0010104:	6a 30                	push   0x30
c0010106:	6a 00                	push   0x0
c0010108:	68 80 e5 02 c0       	push   0xc002e580
c001010d:	e8 66 06 ff ff       	call   c0000778 <memset>
c0010112:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010116:	25 00 f0 ff ff       	and    eax,0xfffff000
c001011b:	05 00 10 00 00       	add    eax,0x1000
c0010120:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010124:	83 c4 10             	add    esp,0x10
c0010127:	83 ec 08             	sub    esp,0x8
c001012a:	6a 01                	push   0x1
c001012c:	53                   	push   ebx
c001012d:	43                   	inc    ebx
c001012e:	e8 d7 fc ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001013c:	75 e9                	jne    c0010127 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001013e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010145:	66 85 c0             	test   ax,ax
c0010148:	0f 84 8e 01 00 00    	je     c00102dc <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001014e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010152:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001015a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001015e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010163:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010167:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001016f:	eb 15                	jmp    c0010186 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010171:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010175:	83 c3 18             	add    ebx,0x18
c0010178:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001017c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010180:	0f 84 66 01 00 00    	je     c00102ec <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010186:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010189:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001018c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001018f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010193:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010197:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010199:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001019c:	01 f0                	add    eax,esi
c001019e:	55                   	push   ebp
c001019f:	11 fa                	adc    edx,edi
c00101a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101ad:	56                   	push   esi
c00101ae:	68 d8 a3 02 c0       	push   0xc002a3d8
c00101b3:	e8 32 2e 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00101b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101bc:	83 c4 10             	add    esp,0x10
c00101bf:	09 f8                	or     eax,edi
c00101c1:	0f 85 25 01 00 00    	jne    c00102ec <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101c7:	4d                   	dec    ebp
c00101c8:	75 a7                	jne    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ca:	ba 00 00 08 00       	mov    edx,0x80000
c00101cf:	89 c1                	mov    ecx,eax
c00101d1:	39 f2                	cmp    edx,esi
c00101d3:	19 f9                	sbb    ecx,edi
c00101d5:	0f 82 a7 00 00 00    	jb     c0010282 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101db:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101df:	89 c1                	mov    ecx,eax
c00101e1:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101e5:	0f 83 97 00 00 00    	jae    c0010282 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101eb:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101f4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101f8:	39 fa                	cmp    edx,edi
c00101fa:	19 e8                	sbb    eax,ebp
c00101fc:	0f 82 14 01 00 00    	jb     c0010316 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010202:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010206:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001020a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010210:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010215:	83 d5 ff             	adc    ebp,0xffffffff
c0010218:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001021c:	31 c0                	xor    eax,eax
c001021e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010222:	39 fa                	cmp    edx,edi
c0010224:	89 c1                	mov    ecx,eax
c0010226:	19 e9                	sbb    ecx,ebp
c0010228:	0f 83 43 ff ff ff    	jae    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022e:	be 00 00 08 00       	mov    esi,0x80000
c0010233:	50                   	push   eax
c0010234:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010238:	57                   	push   edi
c0010239:	56                   	push   esi
c001023a:	68 fc a3 02 c0       	push   0xc002a3fc
c001023f:	e8 a6 2d 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010244:	5a                   	pop    edx
c0010245:	59                   	pop    ecx
c0010246:	57                   	push   edi
c0010247:	56                   	push   esi
c0010248:	e8 76 fe ff ff       	call   c00100c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001024d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010251:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010255:	83 c4 0c             	add    esp,0xc
c0010258:	0f ac d0 0c          	shrd   eax,edx,0xc
c001025c:	03 05 74 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e574
c0010262:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010269:	a3 74 e5 02 c0       	mov    ds:0xc002e574,eax
c001026e:	52                   	push   edx
c001026f:	50                   	push   eax
c0010270:	68 69 a3 02 c0       	push   0xc002a369
c0010275:	e8 70 2d 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	e9 ef fe ff ff       	jmp    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010282:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001028a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001028e:	39 ea                	cmp    edx,ebp
c0010290:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010294:	0f 82 d7 fe ff ff    	jb     c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001029a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001029f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102a3:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102a7:	0f 83 c4 fe ff ff    	jae    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102ad:	39 ee                	cmp    esi,ebp
c00102af:	89 f8                	mov    eax,edi
c00102b1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102b5:	0f 83 78 ff ff ff    	jae    c0010233 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102c7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102cb:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102d7:	e9 57 ff ff ff       	jmp    c0010233 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102dc:	83 ec 0c             	sub    esp,0xc
c00102df:	68 5b a3 02 c0       	push   0xc002a35b
c00102e4:	e8 b2 a3 00 00       	call   c001a69b <Krnl::panic(char const*)>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	bb 40 01 00 00       	mov    ebx,0x140
c00102f1:	83 ec 08             	sub    esp,0x8
c00102f4:	6a 00                	push   0x0
c00102f6:	53                   	push   ebx
c00102f7:	43                   	inc    ebx
c00102f8:	e8 0d fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102fd:	ff 05 74 e5 02 c0    	inc    DWORD PTR ds:0xc002e574
c0010303:	83 c4 10             	add    esp,0x10
c0010306:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001030c:	75 e3                	jne    c00102f1 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001030e:	83 c4 3c             	add    esp,0x3c
c0010311:	5b                   	pop    ebx
c0010312:	5e                   	pop    esi
c0010313:	5f                   	pop    edi
c0010314:	5d                   	pop    ebp
c0010315:	c3                   	ret    
c0010316:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001031e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010326:	e9 d7 fe ff ff       	jmp    c0010202 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001032b:	90                   	nop

c001032c <Pipe::isAtty()>:
c001032c:	31 c0                	xor    eax,eax
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <Pipe::~Pipe()>:
c0010330:	83 ec 0c             	sub    esp,0xc
c0010333:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c0010338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033c:	89 10                	mov    DWORD PTR [eax],edx
c001033e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010342:	83 ec 0c             	sub    esp,0xc
c0010345:	50                   	push   eax
c0010346:	e8 37 16 00 00       	call   c0011982 <UnixFile::~UnixFile()>
c001034b:	83 c4 10             	add    esp,0x10
c001034e:	90                   	nop
c001034f:	83 c4 0c             	add    esp,0xc
c0010352:	c3                   	ret    
c0010353:	90                   	nop

c0010354 <Pipe::~Pipe()>:
c0010354:	83 ec 0c             	sub    esp,0xc
c0010357:	83 ec 0c             	sub    esp,0xc
c001035a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035e:	e8 cd ff ff ff       	call   c0010330 <Pipe::~Pipe()>
c0010363:	83 c4 10             	add    esp,0x10
c0010366:	83 ec 08             	sub    esp,0x8
c0010369:	6a 20                	push   0x20
c001036b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001036f:	e8 96 2b 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	83 c4 0c             	add    esp,0xc
c001037a:	c3                   	ret    
c001037b:	90                   	nop

c001037c <Pipe::read(unsigned long long, void*, int*)>:
c001037c:	55                   	push   ebp
c001037d:	57                   	push   edi
c001037e:	56                   	push   esi
c001037f:	53                   	push   ebx
c0010380:	83 ec 1c             	sub    esp,0x1c
c0010383:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010387:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001038b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001038f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010392:	89 c8                	mov    eax,ecx
c0010394:	99                   	cdq    
c0010395:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010399:	74 19                	je     c00103b4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001039b:	39 f9                	cmp    ecx,edi
c001039d:	89 d1                	mov    ecx,edx
c001039f:	19 f1                	sbb    ecx,esi
c00103a1:	73 11                	jae    c00103b4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103a3:	e8 ce da 00 00       	call   c001de76 <lockScheduler()>
c00103a8:	e8 05 de 00 00       	call   c001e1b2 <schedule()>
c00103ad:	e8 c6 da 00 00       	call   c001de78 <unlockScheduler()>
c00103b2:	eb db                	jmp    c001038f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103b4:	39 f8                	cmp    eax,edi
c00103b6:	89 d1                	mov    ecx,edx
c00103b8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103bc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103c0:	19 f1                	sbb    ecx,esi
c00103c2:	73 08                	jae    c00103cc <Pipe::read(unsigned long long, void*, int*)+0x50>
c00103c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cf:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d2:	29 c6                	sub    esi,eax
c00103d4:	89 f1                	mov    ecx,esi
c00103d6:	c1 f9 1f             	sar    ecx,0x1f
c00103d9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103dd:	89 ca                	mov    edx,ecx
c00103df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103e3:	19 d1                	sbb    ecx,edx
c00103e5:	73 04                	jae    c00103eb <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103e7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103eb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ef:	89 fd                	mov    ebp,edi
c00103f1:	29 f5                	sub    ebp,esi
c00103f3:	85 f6                	test   esi,esi
c00103f5:	74 12                	je     c0010409 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103f7:	52                   	push   edx
c00103f8:	56                   	push   esi
c00103f9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103fc:	50                   	push   eax
c00103fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010401:	e8 3e 03 ff ff       	call   c0000744 <memcpy>
c0010406:	83 c4 10             	add    esp,0x10
c0010409:	85 ed                	test   ebp,ebp
c001040b:	74 12                	je     c001041f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001040d:	50                   	push   eax
c001040e:	55                   	push   ebp
c001040f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010412:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010416:	56                   	push   esi
c0010417:	e8 28 03 ff ff       	call   c0000744 <memcpy>
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010422:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010425:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010428:	99                   	cdq    
c0010429:	89 f7                	mov    edi,esi
c001042b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001042f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010433:	c1 ff 1f             	sar    edi,0x1f
c0010436:	57                   	push   edi
c0010437:	56                   	push   esi
c0010438:	52                   	push   edx
c0010439:	50                   	push   eax
c001043a:	e8 0d 67 01 00       	call   c0026b4c <__umoddi3>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010445:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001044a:	75 10                	jne    c001045c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001044c:	83 ec 0c             	sub    esp,0xc
c001044f:	68 25 a4 02 c0       	push   0xc002a425
c0010454:	e8 42 a2 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010460:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010464:	89 10                	mov    DWORD PTR [eax],edx
c0010466:	83 c4 1c             	add    esp,0x1c
c0010469:	31 c0                	xor    eax,eax
c001046b:	5b                   	pop    ebx
c001046c:	5e                   	pop    esi
c001046d:	5f                   	pop    edi
c001046e:	5d                   	pop    ebp
c001046f:	c3                   	ret    

c0010470 <Pipe::write(unsigned long long, void*, int*)>:
c0010470:	55                   	push   ebp
c0010471:	57                   	push   edi
c0010472:	56                   	push   esi
c0010473:	53                   	push   ebx
c0010474:	83 ec 1c             	sub    esp,0x1c
c0010477:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001047b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001047f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010483:	89 04 24             	mov    DWORD PTR [esp],eax
c0010486:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010489:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001048c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010490:	89 de                	mov    esi,ebx
c0010492:	89 df                	mov    edi,ebx
c0010494:	c1 ff 1f             	sar    edi,0x1f
c0010497:	01 c6                	add    esi,eax
c0010499:	89 c8                	mov    eax,ecx
c001049b:	11 d7                	adc    edi,edx
c001049d:	99                   	cdq    
c001049e:	39 f1                	cmp    ecx,esi
c00104a0:	89 d0                	mov    eax,edx
c00104a2:	19 f8                	sbb    eax,edi
c00104a4:	b8 01 00 00 00       	mov    eax,0x1
c00104a9:	0f 82 80 00 00 00    	jb     c001052f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104b5:	01 d8                	add    eax,ebx
c00104b7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104bb:	99                   	cdq    
c00104bc:	f7 f9                	idiv   ecx
c00104be:	29 d1                	sub    ecx,edx
c00104c0:	89 d7                	mov    edi,edx
c00104c2:	89 c8                	mov    eax,ecx
c00104c4:	99                   	cdq    
c00104c5:	39 ce                	cmp    esi,ecx
c00104c7:	19 d3                	sbb    ebx,edx
c00104c9:	bb 00 00 00 00       	mov    ebx,0x0
c00104ce:	72 04                	jb     c00104d4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104d0:	89 f3                	mov    ebx,esi
c00104d2:	29 cb                	sub    ebx,ecx
c00104d4:	89 f1                	mov    ecx,esi
c00104d6:	29 d9                	sub    ecx,ebx
c00104d8:	74 1a                	je     c00104f4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104da:	52                   	push   edx
c00104db:	51                   	push   ecx
c00104dc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104e4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104e7:	57                   	push   edi
c00104e8:	e8 57 02 ff ff       	call   c0000744 <memcpy>
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104f4:	85 db                	test   ebx,ebx
c00104f6:	74 12                	je     c001050a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104f8:	50                   	push   eax
c00104f9:	53                   	push   ebx
c00104fa:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104fe:	51                   	push   ecx
c00104ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010502:	e8 3d 02 ff ff       	call   c0000744 <memcpy>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001050d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010512:	75 10                	jne    c0010524 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010514:	83 ec 0c             	sub    esp,0xc
c0010517:	68 41 a4 02 c0       	push   0xc002a441
c001051c:	e8 7a a1 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010528:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001052b:	89 38                	mov    DWORD PTR [eax],edi
c001052d:	31 c0                	xor    eax,eax
c001052f:	83 c4 1c             	add    esp,0x1c
c0010532:	5b                   	pop    ebx
c0010533:	5e                   	pop    esi
c0010534:	5f                   	pop    edi
c0010535:	5d                   	pop    ebp
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <Pipe::Pipe(int)>:
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053f:	83 ec 08             	sub    esp,0x8
c0010542:	6a 00                	push   0x0
c0010544:	50                   	push   eax
c0010545:	e8 56 12 00 00       	call   c00117a0 <UnixFile::UnixFile(int)>
c001054a:	83 c4 10             	add    esp,0x10
c001054d:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c0010552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010556:	89 10                	mov    DWORD PTR [eax],edx
c0010558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010560:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010567:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010579:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001057d:	83 ec 0c             	sub    esp,0xc
c0010580:	50                   	push   eax
c0010581:	e8 ba f2 ff ff       	call   c000f840 <malloc>
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	89 c2                	mov    edx,eax
c001058b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001059a:	90                   	nop
c001059b:	83 c4 0c             	add    esp,0xc
c001059e:	c3                   	ret    
c001059f:	90                   	nop

c00105a0 <VgaText::isAtty()>:
c00105a0:	b0 01                	mov    al,0x1
c00105a2:	c3                   	ret    
c00105a3:	90                   	nop

c00105a4 <VgaText::~VgaText()>:
c00105a4:	83 ec 0c             	sub    esp,0xc
c00105a7:	ba 24 a5 02 c0       	mov    edx,0xc002a524
c00105ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b0:	89 10                	mov    DWORD PTR [eax],edx
c00105b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b6:	83 ec 0c             	sub    esp,0xc
c00105b9:	50                   	push   eax
c00105ba:	e8 c3 13 00 00       	call   c0011982 <UnixFile::~UnixFile()>
c00105bf:	83 c4 10             	add    esp,0x10
c00105c2:	90                   	nop
c00105c3:	83 c4 0c             	add    esp,0xc
c00105c6:	c3                   	ret    
c00105c7:	90                   	nop

c00105c8 <VgaText::~VgaText()>:
c00105c8:	83 ec 0c             	sub    esp,0xc
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d2:	e8 cd ff ff ff       	call   c00105a4 <VgaText::~VgaText()>
c00105d7:	83 c4 10             	add    esp,0x10
c00105da:	83 ec 08             	sub    esp,0x8
c00105dd:	68 60 12 00 00       	push   0x1260
c00105e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e6:	e8 1f 29 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c00105eb:	83 c4 10             	add    esp,0x10
c00105ee:	83 c4 0c             	add    esp,0xc
c00105f1:	c3                   	ret    

c00105f2 <VgaText::read(unsigned long long, void*, int*)>:
c00105f2:	83 ec 10             	sub    esp,0x10
c00105f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010601:	e8 96 5d 00 00       	call   c001639c <readKeyboard(VgaText*, char*, unsigned long)>
c0010606:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001060a:	89 02                	mov    DWORD PTR [edx],eax
c001060c:	31 c0                	xor    eax,eax
c001060e:	83 c4 1c             	add    esp,0x1c
c0010611:	c3                   	ret    

c0010612 <setTerminalScrollLock(bool)>:
c0010612:	c3                   	ret    

c0010613 <addToTerminalCycle(VgaText*)>:
c0010613:	8b 15 00 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e600
c0010619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061d:	85 d2                	test   edx,edx
c001061f:	75 0c                	jne    c001062d <addToTerminalCycle(VgaText*)+0x1a>
c0010621:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010627:	a3 00 e6 02 c0       	mov    ds:0xc002e600,eax
c001062c:	c3                   	ret    
c001062d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010633:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010639:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001063f:	c3                   	ret    

c0010640 <installVgaTextImplementation()>:
c0010640:	83 ec 10             	sub    esp,0x10
c0010643:	6a 20                	push   0x20
c0010645:	6a 00                	push   0x0
c0010647:	68 e0 e5 02 c0       	push   0xc002e5e0
c001064c:	e8 27 01 ff ff       	call   c0000778 <memset>
c0010651:	83 c4 1c             	add    esp,0x1c
c0010654:	c3                   	ret    

c0010655 <scrollTerminalScrollLock(int)>:
c0010655:	c3                   	ret    

c0010656 <VgaText::load()>:
c0010656:	53                   	push   ebx
c0010657:	31 c0                	xor    eax,eax
c0010659:	83 ec 58             	sub    esp,0x58
c001065c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010660:	89 e2                	mov    edx,esp
c0010662:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010666:	40                   	inc    eax
c0010667:	83 f8 50             	cmp    eax,0x50
c001066a:	75 f6                	jne    c0010662 <VgaText::load()+0xc>
c001066c:	31 c0                	xor    eax,eax
c001066e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010675:	84 c9                	test   cl,cl
c0010677:	74 06                	je     c001067f <VgaText::load()+0x29>
c0010679:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001067c:	40                   	inc    eax
c001067d:	eb ef                	jmp    c001066e <VgaText::load()+0x18>
c001067f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 09                	je     c0010692 <VgaText::load()+0x3c>
c0010689:	51                   	push   ecx
c001068a:	51                   	push   ecx
c001068b:	52                   	push   edx
c001068c:	53                   	push   ebx
c001068d:	ff d0                	call   eax
c001068f:	83 c4 10             	add    esp,0x10
c0010692:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010698:	85 c0                	test   eax,eax
c001069a:	74 09                	je     c00106a5 <VgaText::load()+0x4f>
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	53                   	push   ebx
c00106a0:	ff d0                	call   eax
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	83 c4 58             	add    esp,0x58
c00106a8:	5b                   	pop    ebx
c00106a9:	c3                   	ret    

c00106aa <VgaText::updateCursor()>:
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	39 05 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,eax
c00106b4:	75 0c                	jne    c00106c2 <VgaText::updateCursor()+0x18>
c00106b6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00106bc:	85 c0                	test   eax,eax
c00106be:	74 02                	je     c00106c2 <VgaText::updateCursor()+0x18>
c00106c0:	ff e0                	jmp    eax
c00106c2:	c3                   	ret    
c00106c3:	90                   	nop

c00106c4 <VgaText::showCursor(bool)>:
c00106c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106cc:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::disableBlink(bool)>:
c00106d4:	56                   	push   esi
c00106d5:	53                   	push   ebx
c00106d6:	51                   	push   ecx
c00106d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106df:	39 1d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebx
c00106e5:	75 18                	jne    c00106ff <VgaText::disableBlink(bool)+0x2b>
c00106e7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106ed:	85 c0                	test   eax,eax
c00106ef:	74 0e                	je     c00106ff <VgaText::disableBlink(bool)+0x2b>
c00106f1:	89 f1                	mov    ecx,esi
c00106f3:	52                   	push   edx
c00106f4:	52                   	push   edx
c00106f5:	0f b6 d1             	movzx  edx,cl
c00106f8:	52                   	push   edx
c00106f9:	53                   	push   ebx
c00106fa:	ff d0                	call   eax
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	89 f0                	mov    eax,esi
c0010701:	83 f0 01             	xor    eax,0x1
c0010704:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001070a:	58                   	pop    eax
c001070b:	5b                   	pop    ebx
c001070c:	5e                   	pop    esi
c001070d:	c3                   	ret    

c001070e <VgaText::doANSI_SGR(int)>:
c001070e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010716:	85 d2                	test   edx,edx
c0010718:	75 14                	jne    c001072e <VgaText::doANSI_SGR(int)+0x20>
c001071a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010720:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010726:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001072c:	eb 65                	jmp    c0010793 <VgaText::doANSI_SGR(int)+0x85>
c001072e:	83 fa 07             	cmp    edx,0x7
c0010731:	75 14                	jne    c0010747 <VgaText::doANSI_SGR(int)+0x39>
c0010733:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010739:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001073f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010745:	eb 4c                	jmp    c0010793 <VgaText::doANSI_SGR(int)+0x85>
c0010747:	83 fa 1b             	cmp    edx,0x1b
c001074a:	74 ce                	je     c001071a <VgaText::doANSI_SGR(int)+0xc>
c001074c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001074f:	83 f9 07             	cmp    ecx,0x7
c0010752:	77 09                	ja     c001075d <VgaText::doANSI_SGR(int)+0x4f>
c0010754:	8b 14 8d 80 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b80]
c001075b:	eb 20                	jmp    c001077d <VgaText::doANSI_SGR(int)+0x6f>
c001075d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010760:	83 f9 07             	cmp    ecx,0x7
c0010763:	77 09                	ja     c001076e <VgaText::doANSI_SGR(int)+0x60>
c0010765:	8b 14 8d 80 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b80]
c001076c:	eb 25                	jmp    c0010793 <VgaText::doANSI_SGR(int)+0x85>
c001076e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010771:	83 f9 07             	cmp    ecx,0x7
c0010774:	77 0e                	ja     c0010784 <VgaText::doANSI_SGR(int)+0x76>
c0010776:	8b 14 95 38 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cc8]
c001077d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010783:	c3                   	ret    
c0010784:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010787:	83 f9 07             	cmp    ecx,0x7
c001078a:	77 0d                	ja     c0010799 <VgaText::doANSI_SGR(int)+0x8b>
c001078c:	8b 14 95 10 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cf0]
c0010793:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010799:	c3                   	ret    

c001079a <VgaText::setDefaultBgColour(VgaColour)>:
c001079a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001079e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107a2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00107a8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107ae:	c3                   	ret    
c00107af:	90                   	nop

c00107b0 <VgaText::setDefaultFgColour(VgaColour)>:
c00107b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107b8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00107be:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107c4:	c3                   	ret    
c00107c5:	90                   	nop

c00107c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107c6:	53                   	push   ebx
c00107c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107d3:	51                   	push   ecx
c00107d4:	e8 c1 ff ff ff       	call   c001079a <VgaText::setDefaultBgColour(VgaColour)>
c00107d9:	58                   	pop    eax
c00107da:	5a                   	pop    edx
c00107db:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107df:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107e3:	5b                   	pop    ebx
c00107e4:	eb ca                	jmp    c00107b0 <VgaText::setDefaultFgColour(VgaColour)>

c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107e6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107ea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ef:	83 e0 0f             	and    eax,0xf
c00107f2:	c1 e2 04             	shl    edx,0x4
c00107f5:	09 d0                	or     eax,edx
c00107f7:	c3                   	ret    

c00107f8 <VgaText::scrollScreen()>:
c00107f8:	57                   	push   edi
c00107f9:	56                   	push   esi
c00107fa:	be 01 00 00 00       	mov    esi,0x1
c00107ff:	53                   	push   ebx
c0010800:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010804:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001080a:	31 ff                	xor    edi,edi
c001080c:	01 d9                	add    ecx,ebx
c001080e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010811:	83 fe 17             	cmp    esi,0x17
c0010814:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001081a:	75 28                	jne    c0010844 <VgaText::scrollScreen()+0x4c>
c001081c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010822:	74 1c                	je     c0010840 <VgaText::scrollScreen()+0x48>
c0010824:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001082b:	50                   	push   eax
c001082c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010833:	50                   	push   eax
c0010834:	e8 ad ff ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010839:	5a                   	pop    edx
c001083a:	5a                   	pop    edx
c001083b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001083e:	eb 04                	jmp    c0010844 <VgaText::scrollScreen()+0x4c>
c0010840:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010844:	47                   	inc    edi
c0010845:	41                   	inc    ecx
c0010846:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001084c:	75 c0                	jne    c001080e <VgaText::scrollScreen()+0x16>
c001084e:	46                   	inc    esi
c001084f:	83 fe 18             	cmp    esi,0x18
c0010852:	75 b0                	jne    c0010804 <VgaText::scrollScreen()+0xc>
c0010854:	39 1d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebx
c001085a:	75 24                	jne    c0010880 <VgaText::scrollScreen()+0x88>
c001085c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010863:	74 08                	je     c001086d <VgaText::scrollScreen()+0x75>
c0010865:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001086b:	eb 13                	jmp    c0010880 <VgaText::scrollScreen()+0x88>
c001086d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010873:	85 c0                	test   eax,eax
c0010875:	74 09                	je     c0010880 <VgaText::scrollScreen()+0x88>
c0010877:	83 ec 0c             	sub    esp,0xc
c001087a:	53                   	push   ebx
c001087b:	ff d0                	call   eax
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010884:	5b                   	pop    ebx
c0010885:	5e                   	pop    esi
c0010886:	5f                   	pop    edi
c0010887:	e9 1e fe ff ff       	jmp    c00106aa <VgaText::updateCursor()>

c001088c <VgaText::combineCharAndColour(char, unsigned char)>:
c001088c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010891:	c1 e0 08             	shl    eax,0x8
c0010894:	89 c2                	mov    edx,eax
c0010896:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001089b:	09 d0                	or     eax,edx
c001089d:	c3                   	ret    

c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001089e:	53                   	push   ebx
c001089f:	83 ec 08             	sub    esp,0x8
c00108a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00108a6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108ab:	50                   	push   eax
c00108ac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108b1:	50                   	push   eax
c00108b2:	e8 2f ff ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c00108b7:	5a                   	pop    edx
c00108b8:	0f b6 c0             	movzx  eax,al
c00108bb:	5b                   	pop    ebx
c00108bc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00108c1:	50                   	push   eax
c00108c2:	53                   	push   ebx
c00108c3:	e8 c4 ff ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c00108c8:	5a                   	pop    edx
c00108c9:	5a                   	pop    edx
c00108ca:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108d0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108d4:	0f b7 d2             	movzx  edx,dx
c00108d7:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00108dc:	39 0d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ecx
c00108e2:	75 14                	jne    c00108f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108e4:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108ea:	85 c0                	test   eax,eax
c00108ec:	74 0a                	je     c00108f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108f2:	83 c4 08             	add    esp,0x8
c00108f5:	5b                   	pop    ebx
c00108f6:	ff e0                	jmp    eax
c00108f8:	83 c4 08             	add    esp,0x8
c00108fb:	5b                   	pop    ebx
c00108fc:	c3                   	ret    
c00108fd:	90                   	nop

c00108fe <VgaText::getCursorX()>:
c00108fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010902:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <VgaText::getCursorY()>:
c001090a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010914:	c3                   	ret    
c0010915:	90                   	nop

c0010916 <VgaText::setCursor(int, int)>:
c0010916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001091e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010928:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001092e:	e9 77 fd ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010933:	90                   	nop

c0010934 <VgaText::setCursorX(int)>:
c0010934:	83 ec 10             	sub    esp,0x10
c0010937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001093b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010945:	50                   	push   eax
c0010946:	e8 cb ff ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c001094b:	83 c4 1c             	add    esp,0x1c
c001094e:	c3                   	ret    
c001094f:	90                   	nop

c0010950 <VgaText::setCursorY(int)>:
c0010950:	83 ec 10             	sub    esp,0x10
c0010953:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001095b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010961:	50                   	push   eax
c0010962:	e8 af ff ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c0010967:	83 c4 1c             	add    esp,0x1c
c001096a:	c3                   	ret    
c001096b:	90                   	nop

c001096c <VgaText::incrementCursor(bool)>:
c001096c:	56                   	push   esi
c001096d:	53                   	push   ebx
c001096e:	51                   	push   ecx
c001096f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010973:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010977:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001097d:	40                   	inc    eax
c001097e:	83 f8 50             	cmp    eax,0x50
c0010981:	74 08                	je     c001098b <VgaText::incrementCursor(bool)+0x1f>
c0010983:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010989:	eb 33                	jmp    c00109be <VgaText::incrementCursor(bool)+0x52>
c001098b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010991:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001099b:	8d 50 01             	lea    edx,[eax+0x1]
c001099e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109a4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109aa:	75 12                	jne    c00109be <VgaText::incrementCursor(bool)+0x52>
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109b5:	53                   	push   ebx
c00109b6:	e8 3d fe ff ff       	call   c00107f8 <VgaText::scrollScreen()>
c00109bb:	83 c4 10             	add    esp,0x10
c00109be:	89 f0                	mov    eax,esi
c00109c0:	84 c0                	test   al,al
c00109c2:	74 0c                	je     c00109d0 <VgaText::incrementCursor(bool)+0x64>
c00109c4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109c8:	5a                   	pop    edx
c00109c9:	5b                   	pop    ebx
c00109ca:	5e                   	pop    esi
c00109cb:	e9 da fc ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c00109d0:	58                   	pop    eax
c00109d1:	5b                   	pop    ebx
c00109d2:	5e                   	pop    esi
c00109d3:	c3                   	ret    

c00109d4 <VgaText::updateRAMUsageDisplay(int)>:
c00109d4:	56                   	push   esi
c00109d5:	8b 35 60 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d460
c00109db:	53                   	push   ebx
c00109dc:	bb 0a 00 00 00       	mov    ebx,0xa
c00109e1:	6a 0f                	push   0xf
c00109e3:	6a 00                	push   0x0
c00109e5:	e8 fc fd ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ea:	5a                   	pop    edx
c00109eb:	59                   	pop    ecx
c00109ec:	0f b6 c8             	movzx  ecx,al
c00109ef:	51                   	push   ecx
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	99                   	cdq    
c00109f5:	f7 fb                	idiv   ebx
c00109f7:	89 d3                	mov    ebx,edx
c00109f9:	83 c0 30             	add    eax,0x30
c00109fc:	83 c3 30             	add    ebx,0x30
c00109ff:	0f be c0             	movsx  eax,al
c0010a02:	0f b6 db             	movzx  ebx,bl
c0010a05:	50                   	push   eax
c0010a06:	e8 81 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0b:	5a                   	pop    edx
c0010a0c:	5a                   	pop    edx
c0010a0d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010a14:	51                   	push   ecx
c0010a15:	53                   	push   ebx
c0010a16:	e8 71 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1b:	5b                   	pop    ebx
c0010a1c:	5a                   	pop    edx
c0010a1d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010a24:	51                   	push   ecx
c0010a25:	6a 25                	push   0x25
c0010a27:	e8 60 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2c:	59                   	pop    ecx
c0010a2d:	5b                   	pop    ebx
c0010a2e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a35:	5b                   	pop    ebx
c0010a36:	5e                   	pop    esi
c0010a37:	c3                   	ret    

c0010a38 <VgaText::updateDiskUsage()>:
c0010a38:	55                   	push   ebp
c0010a39:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a3e:	57                   	push   edi
c0010a3f:	8b 3d 60 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d460
c0010a45:	56                   	push   esi
c0010a46:	53                   	push   ebx
c0010a47:	6a 0f                	push   0xf
c0010a49:	6a 00                	push   0x0
c0010a4b:	e8 96 fd ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a50:	5a                   	pop    edx
c0010a51:	0f b6 d8             	movzx  ebx,al
c0010a54:	59                   	pop    ecx
c0010a55:	8b 35 88 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032888
c0010a5b:	53                   	push   ebx
c0010a5c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a61:	89 f0                	mov    eax,esi
c0010a63:	99                   	cdq    
c0010a64:	f7 fd                	idiv   ebp
c0010a66:	99                   	cdq    
c0010a67:	f7 f9                	idiv   ecx
c0010a69:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6c:	0f b6 c0             	movzx  eax,al
c0010a6f:	50                   	push   eax
c0010a70:	e8 17 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a75:	5d                   	pop    ebp
c0010a76:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a7b:	5a                   	pop    edx
c0010a7c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a80:	53                   	push   ebx
c0010a81:	89 f0                	mov    eax,esi
c0010a83:	99                   	cdq    
c0010a84:	f7 fd                	idiv   ebp
c0010a86:	99                   	cdq    
c0010a87:	f7 f9                	idiv   ecx
c0010a89:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8c:	0f b6 c0             	movzx  eax,al
c0010a8f:	50                   	push   eax
c0010a90:	e8 f7 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a95:	5d                   	pop    ebp
c0010a96:	bd 64 00 00 00       	mov    ebp,0x64
c0010a9b:	5a                   	pop    edx
c0010a9c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010aa3:	53                   	push   ebx
c0010aa4:	89 f0                	mov    eax,esi
c0010aa6:	99                   	cdq    
c0010aa7:	f7 fd                	idiv   ebp
c0010aa9:	99                   	cdq    
c0010aaa:	f7 f9                	idiv   ecx
c0010aac:	8d 42 30             	lea    eax,[edx+0x30]
c0010aaf:	0f b6 c0             	movzx  eax,al
c0010ab2:	50                   	push   eax
c0010ab3:	e8 d4 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab8:	5d                   	pop    ebp
c0010ab9:	5a                   	pop    edx
c0010aba:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010ac1:	53                   	push   ebx
c0010ac2:	89 f0                	mov    eax,esi
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	89 d6                	mov    esi,edx
c0010ac9:	99                   	cdq    
c0010aca:	f7 f9                	idiv   ecx
c0010acc:	8d 42 30             	lea    eax,[edx+0x30]
c0010acf:	0f b6 c0             	movzx  eax,al
c0010ad2:	50                   	push   eax
c0010ad3:	e8 b4 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad8:	5d                   	pop    ebp
c0010ad9:	5a                   	pop    edx
c0010ada:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010ae1:	53                   	push   ebx
c0010ae2:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae5:	0f b6 f0             	movzx  esi,al
c0010ae8:	56                   	push   esi
c0010ae9:	e8 9e fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010aee:	5e                   	pop    esi
c0010aef:	8b 35 84 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032884
c0010af5:	5d                   	pop    ebp
c0010af6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010afd:	bd 10 27 00 00       	mov    ebp,0x2710
c0010b02:	53                   	push   ebx
c0010b03:	89 f0                	mov    eax,esi
c0010b05:	99                   	cdq    
c0010b06:	f7 fd                	idiv   ebp
c0010b08:	99                   	cdq    
c0010b09:	f7 f9                	idiv   ecx
c0010b0b:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0e:	0f b6 c0             	movzx  eax,al
c0010b11:	50                   	push   eax
c0010b12:	e8 75 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b17:	5a                   	pop    edx
c0010b18:	5d                   	pop    ebp
c0010b19:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010b20:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010b25:	53                   	push   ebx
c0010b26:	89 f0                	mov    eax,esi
c0010b28:	99                   	cdq    
c0010b29:	f7 fd                	idiv   ebp
c0010b2b:	99                   	cdq    
c0010b2c:	f7 f9                	idiv   ecx
c0010b2e:	8d 42 30             	lea    eax,[edx+0x30]
c0010b31:	0f b6 c0             	movzx  eax,al
c0010b34:	50                   	push   eax
c0010b35:	e8 52 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3a:	5a                   	pop    edx
c0010b3b:	5d                   	pop    ebp
c0010b3c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b43:	bd 64 00 00 00       	mov    ebp,0x64
c0010b48:	53                   	push   ebx
c0010b49:	89 f0                	mov    eax,esi
c0010b4b:	99                   	cdq    
c0010b4c:	f7 fd                	idiv   ebp
c0010b4e:	99                   	cdq    
c0010b4f:	f7 f9                	idiv   ecx
c0010b51:	83 c2 30             	add    edx,0x30
c0010b54:	0f b6 d2             	movzx  edx,dl
c0010b57:	52                   	push   edx
c0010b58:	e8 2f fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b5d:	5a                   	pop    edx
c0010b5e:	5d                   	pop    ebp
c0010b5f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b66:	53                   	push   ebx
c0010b67:	89 f0                	mov    eax,esi
c0010b69:	99                   	cdq    
c0010b6a:	f7 f9                	idiv   ecx
c0010b6c:	89 d6                	mov    esi,edx
c0010b6e:	99                   	cdq    
c0010b6f:	f7 f9                	idiv   ecx
c0010b71:	8d 42 30             	lea    eax,[edx+0x30]
c0010b74:	0f b6 c0             	movzx  eax,al
c0010b77:	50                   	push   eax
c0010b78:	e8 0f fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b7d:	5a                   	pop    edx
c0010b7e:	59                   	pop    ecx
c0010b7f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b86:	53                   	push   ebx
c0010b87:	8d 46 30             	lea    eax,[esi+0x30]
c0010b8a:	0f b6 f0             	movzx  esi,al
c0010b8d:	56                   	push   esi
c0010b8e:	e8 f9 fc ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b93:	5b                   	pop    ebx
c0010b94:	5e                   	pop    esi
c0010b95:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b9c:	5b                   	pop    ebx
c0010b9d:	5e                   	pop    esi
c0010b9e:	5f                   	pop    edi
c0010b9f:	5d                   	pop    ebp
c0010ba0:	c3                   	ret    
c0010ba1:	90                   	nop

c0010ba2 <VgaText::updateTitle()>:
c0010ba2:	53                   	push   ebx
c0010ba3:	31 c0                	xor    eax,eax
c0010ba5:	83 ec 58             	sub    esp,0x58
c0010ba8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010bac:	89 e1                	mov    ecx,esp
c0010bae:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010bb2:	40                   	inc    eax
c0010bb3:	83 f8 50             	cmp    eax,0x50
c0010bb6:	75 f6                	jne    c0010bae <VgaText::updateTitle()+0xc>
c0010bb8:	31 c0                	xor    eax,eax
c0010bba:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010bc1:	84 db                	test   bl,bl
c0010bc3:	74 06                	je     c0010bcb <VgaText::updateTitle()+0x29>
c0010bc5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010bc8:	40                   	inc    eax
c0010bc9:	eb ef                	jmp    c0010bba <VgaText::updateTitle()+0x18>
c0010bcb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010bd1:	85 c0                	test   eax,eax
c0010bd3:	74 09                	je     c0010bde <VgaText::updateTitle()+0x3c>
c0010bd5:	53                   	push   ebx
c0010bd6:	53                   	push   ebx
c0010bd7:	51                   	push   ecx
c0010bd8:	52                   	push   edx
c0010bd9:	ff d0                	call   eax
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	e8 55 fe ff ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c0010be3:	83 c4 58             	add    esp,0x58
c0010be6:	5b                   	pop    ebx
c0010be7:	c3                   	ret    

c0010be8 <VgaText::setTitleTextColour(VgaColour)>:
c0010be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bf0:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bf6:	eb aa                	jmp    c0010ba2 <VgaText::updateTitle()>

c0010bf8 <VgaText::setTitleColour(VgaColour)>:
c0010bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c00:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010c06:	eb 9a                	jmp    c0010ba2 <VgaText::updateTitle()>

c0010c08 <VgaText::setTitle(char*)>:
c0010c08:	53                   	push   ebx
c0010c09:	83 ec 10             	sub    esp,0x10
c0010c0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c14:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010c1a:	50                   	push   eax
c0010c1b:	e8 14 fc fe ff       	call   c0000834 <strcpy>
c0010c20:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010c24:	83 c4 18             	add    esp,0x18
c0010c27:	5b                   	pop    ebx
c0010c28:	e9 75 ff ff ff       	jmp    c0010ba2 <VgaText::updateTitle()>
c0010c2d:	90                   	nop

c0010c2e <VgaText::decrementCursor(bool)>:
c0010c2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c36:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010c3c:	85 c0                	test   eax,eax
c0010c3e:	74 07                	je     c0010c47 <VgaText::decrementCursor(bool)+0x19>
c0010c40:	48                   	dec    eax
c0010c41:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c47:	84 c9                	test   cl,cl
c0010c49:	74 09                	je     c0010c54 <VgaText::decrementCursor(bool)+0x26>
c0010c4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c4f:	e9 56 fa ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010c54:	c3                   	ret    
c0010c55:	90                   	nop

c0010c56 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c56:	53                   	push   ebx
c0010c57:	83 ec 08             	sub    esp,0x8
c0010c5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c6a:	3c 07                	cmp    al,0x7
c0010c6c:	75 2a                	jne    c0010c98 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c6e:	a1 b4 e6 02 c0       	mov    eax,ds:0xc002e6b4
c0010c73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c7b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c83:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c8f:	83 c4 08             	add    esp,0x8
c0010c92:	5b                   	pop    ebx
c0010c93:	e9 50 31 00 00       	jmp    c0013de8 <Buzzer::beep(int, int, bool)>
c0010c98:	3c 0d                	cmp    al,0xd
c0010c9a:	75 0c                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c9c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010ca6:	eb 3b                	jmp    c0010ce3 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010ca8:	3c 0a                	cmp    al,0xa
c0010caa:	75 40                	jne    c0010cec <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010cac:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010cb2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010cbc:	8d 50 01             	lea    edx,[eax+0x1]
c0010cbf:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010cc5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010ccb:	75 12                	jne    c0010cdf <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010ccd:	83 ec 0c             	sub    esp,0xc
c0010cd0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010cd6:	53                   	push   ebx
c0010cd7:	e8 1c fb ff ff       	call   c00107f8 <VgaText::scrollScreen()>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ce3:	83 c4 08             	add    esp,0x8
c0010ce6:	5b                   	pop    ebx
c0010ce7:	e9 be f9 ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010cec:	3c 08                	cmp    al,0x8
c0010cee:	75 31                	jne    c0010d21 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cf0:	50                   	push   eax
c0010cf1:	50                   	push   eax
c0010cf2:	6a 01                	push   0x1
c0010cf4:	53                   	push   ebx
c0010cf5:	e8 34 ff ff ff       	call   c0010c2e <VgaText::decrementCursor(bool)>
c0010cfa:	5a                   	pop    edx
c0010cfb:	59                   	pop    ecx
c0010cfc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d02:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d08:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d0e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d14:	6a 20                	push   0x20
c0010d16:	53                   	push   ebx
c0010d17:	e8 82 fb ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d1c:	83 c4 28             	add    esp,0x28
c0010d1f:	5b                   	pop    ebx
c0010d20:	c3                   	ret    
c0010d21:	83 ec 08             	sub    esp,0x8
c0010d24:	0f be c0             	movsx  eax,al
c0010d27:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d2d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d33:	51                   	push   ecx
c0010d34:	52                   	push   edx
c0010d35:	50                   	push   eax
c0010d36:	53                   	push   ebx
c0010d37:	e8 62 fb ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d3c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d40:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d48:	83 c4 28             	add    esp,0x28
c0010d4b:	5b                   	pop    ebx
c0010d4c:	e9 1b fc ff ff       	jmp    c001096c <VgaText::incrementCursor(bool)>
c0010d51:	90                   	nop

c0010d52 <VgaText::isShowingCursor()>:
c0010d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d56:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d5c:	c3                   	ret    
c0010d5d:	90                   	nop

c0010d5e <VgaText::isBlinkDisabled()>:
c0010d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d62:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d68:	83 f0 01             	xor    eax,0x1
c0010d6b:	c3                   	ret    

c0010d6c <VgaText::setCursorHeight(int)>:
c0010d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d74:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d7a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d85:	e9 3a f9 ff ff       	jmp    c00106c4 <VgaText::showCursor(bool)>

c0010d8a <VgaText::getCursorHeight()>:
c0010d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d8e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d94:	c3                   	ret    

c0010d95 <setActiveTerminal(VgaText*)>:
c0010d95:	53                   	push   ebx
c0010d96:	83 ec 08             	sub    esp,0x8
c0010d99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d9d:	85 db                	test   ebx,ebx
c0010d9f:	75 11                	jne    c0010db2 <setActiveTerminal(VgaText*)+0x1d>
c0010da1:	c7 44 24 10 7c a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a47c
c0010da9:	83 c4 08             	add    esp,0x8
c0010dac:	5b                   	pop    ebx
c0010dad:	e9 e9 98 00 00       	jmp    c001a69b <Krnl::panic(char const*)>
c0010db2:	50                   	push   eax
c0010db3:	50                   	push   eax
c0010db4:	53                   	push   ebx
c0010db5:	68 8a a4 02 c0       	push   0xc002a48a
c0010dba:	e8 2b 22 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010dbf:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	85 c0                	test   eax,eax
c0010dc9:	74 0c                	je     c0010dd7 <setActiveTerminal(VgaText*)+0x42>
c0010dcb:	83 ec 0c             	sub    esp,0xc
c0010dce:	50                   	push   eax
c0010dcf:	e8 d6 f8 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010dd4:	83 c4 10             	add    esp,0x10
c0010dd7:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c0010ddd:	51                   	push   ecx
c0010dde:	51                   	push   ecx
c0010ddf:	53                   	push   ebx
c0010de0:	68 a2 a4 02 c0       	push   0xc002a4a2
c0010de5:	e8 00 22 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010dea:	83 c4 0c             	add    esp,0xc
c0010ded:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010df3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010df9:	53                   	push   ebx
c0010dfa:	e8 17 fb ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c0010dff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e02:	e8 57 ff ff ff       	call   c0010d5e <VgaText::isBlinkDisabled()>
c0010e07:	5a                   	pop    edx
c0010e08:	0f b6 c0             	movzx  eax,al
c0010e0b:	59                   	pop    ecx
c0010e0c:	50                   	push   eax
c0010e0d:	53                   	push   ebx
c0010e0e:	e8 c1 f8 ff ff       	call   c00106d4 <VgaText::disableBlink(bool)>
c0010e13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e16:	e8 6f ff ff ff       	call   c0010d8a <VgaText::getCursorHeight()>
c0010e1b:	5a                   	pop    edx
c0010e1c:	59                   	pop    ecx
c0010e1d:	50                   	push   eax
c0010e1e:	53                   	push   ebx
c0010e1f:	e8 48 ff ff ff       	call   c0010d6c <VgaText::setCursorHeight(int)>
c0010e24:	83 c4 10             	add    esp,0x10
c0010e27:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e2e:	75 0a                	jne    c0010e3a <setActiveTerminal(VgaText*)+0xa5>
c0010e30:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e3e:	83 c4 08             	add    esp,0x8
c0010e41:	5b                   	pop    ebx
c0010e42:	e9 0f f8 ff ff       	jmp    c0010656 <VgaText::load()>

c0010e47 <doTerminalCycle()>:
c0010e47:	83 ec 18             	sub    esp,0x18
c0010e4a:	a1 00 e6 02 c0       	mov    eax,ds:0xc002e600
c0010e4f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e55:	50                   	push   eax
c0010e56:	a3 00 e6 02 c0       	mov    ds:0xc002e600,eax
c0010e5b:	e8 35 ff ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c0010e60:	83 c4 1c             	add    esp,0x1c
c0010e63:	c3                   	ret    

c0010e64 <VgaText::doUpdate()>:
c0010e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e68:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e6e:	85 c0                	test   eax,eax
c0010e70:	74 02                	je     c0010e74 <VgaText::doUpdate()+0x10>
c0010e72:	ff e0                	jmp    eax
c0010e74:	c3                   	ret    
c0010e75:	90                   	nop

c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e76:	55                   	push   ebp
c0010e77:	57                   	push   edi
c0010e78:	56                   	push   esi
c0010e79:	53                   	push   ebx
c0010e7a:	83 ec 1c             	sub    esp,0x1c
c0010e7d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e81:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e86:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e8d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e90:	50                   	push   eax
c0010e91:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e96:	50                   	push   eax
c0010e97:	e8 4a f9 ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e9c:	59                   	pop    ecx
c0010e9d:	0f b6 c0             	movzx  eax,al
c0010ea0:	5b                   	pop    ebx
c0010ea1:	31 c9                	xor    ecx,ecx
c0010ea3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010eaf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eb9:	0f b7 db             	movzx  ebx,bx
c0010ebc:	01 db                	add    ebx,ebx
c0010ebe:	01 fb                	add    ebx,edi
c0010ec0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010ec3:	84 c0                	test   al,al
c0010ec5:	0f 84 38 01 00 00    	je     c0011003 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010ecb:	3c 0d                	cmp    al,0xd
c0010ecd:	75 0f                	jne    c0010ede <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010ecf:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ed9:	e9 1f 01 00 00       	jmp    c0010ffd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ede:	3c 0a                	cmp    al,0xa
c0010ee0:	75 5b                	jne    c0010f3d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ee2:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ee8:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ef2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ef5:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010efb:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010f01:	75 12                	jne    c0010f15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010f03:	83 ec 0c             	sub    esp,0xc
c0010f06:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010f0c:	55                   	push   ebp
c0010f0d:	e8 e6 f8 ff ff       	call   c00107f8 <VgaText::scrollScreen()>
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	83 ec 0c             	sub    esp,0xc
c0010f18:	55                   	push   ebp
c0010f19:	e8 8c f7 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010f1e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2f:	31 c9                	xor    ecx,ecx
c0010f31:	0f b7 db             	movzx  ebx,bx
c0010f34:	01 db                	add    ebx,ebx
c0010f36:	01 fb                	add    ebx,edi
c0010f38:	e9 c0 00 00 00       	jmp    c0010ffd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f3d:	3c 08                	cmp    al,0x8
c0010f3f:	75 4e                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f41:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f45:	53                   	push   ebx
c0010f46:	53                   	push   ebx
c0010f47:	6a 01                	push   0x1
c0010f49:	55                   	push   ebp
c0010f4a:	e8 df fc ff ff       	call   c0010c2e <VgaText::decrementCursor(bool)>
c0010f4f:	58                   	pop    eax
c0010f50:	5a                   	pop    edx
c0010f51:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f57:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f5d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f63:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f69:	6a 20                	push   0x20
c0010f6b:	55                   	push   ebp
c0010f6c:	e8 2d f9 ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f71:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f79:	83 c4 20             	add    esp,0x20
c0010f7c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f82:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f86:	0f b7 db             	movzx  ebx,bx
c0010f89:	01 db                	add    ebx,ebx
c0010f8b:	01 fb                	add    ebx,edi
c0010f8d:	eb 6e                	jmp    c0010ffd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f8f:	51                   	push   ecx
c0010f90:	51                   	push   ecx
c0010f91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f95:	50                   	push   eax
c0010f96:	e8 f1 f8 ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010f9b:	83 c4 10             	add    esp,0x10
c0010f9e:	66 89 03             	mov    WORD PTR [ebx],ax
c0010fa1:	39 2d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebp
c0010fa7:	75 2a                	jne    c0010fd3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fa9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010faf:	85 c0                	test   eax,eax
c0010fb1:	74 20                	je     c0010fd3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fb3:	52                   	push   edx
c0010fb4:	52                   	push   edx
c0010fb5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010fbb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010fc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fc9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010fcc:	51                   	push   ecx
c0010fcd:	55                   	push   ebp
c0010fce:	ff d0                	call   eax
c0010fd0:	83 c4 20             	add    esp,0x20
c0010fd3:	83 c3 02             	add    ebx,0x2
c0010fd6:	50                   	push   eax
c0010fd7:	50                   	push   eax
c0010fd8:	6a 00                	push   0x0
c0010fda:	55                   	push   ebp
c0010fdb:	e8 8c f9 ff ff       	call   c001096c <VgaText::incrementCursor(bool)>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fea:	75 0f                	jne    c0010ffb <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fec:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ff4:	0f b7 db             	movzx  ebx,bx
c0010ff7:	01 db                	add    ebx,ebx
c0010ff9:	01 fb                	add    ebx,edi
c0010ffb:	b1 01                	mov    cl,0x1
c0010ffd:	46                   	inc    esi
c0010ffe:	e9 bd fe ff ff       	jmp    c0010ec0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0011003:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0011007:	83 ec 0c             	sub    esp,0xc
c001100a:	55                   	push   ebp
c001100b:	e8 9a f6 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0011017:	84 c9                	test   cl,cl
c0011019:	74 0c                	je     c0011027 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	55                   	push   ebp
c001101f:	e8 40 fe ff ff       	call   c0010e64 <VgaText::doUpdate()>
c0011024:	83 c4 10             	add    esp,0x10
c0011027:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001102e:	83 c4 1c             	add    esp,0x1c
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	5f                   	pop    edi
c0011034:	5d                   	pop    ebp
c0011035:	c3                   	ret    

c0011036 <VgaText::clearScreen()>:
c0011036:	57                   	push   edi
c0011037:	56                   	push   esi
c0011038:	31 f6                	xor    esi,esi
c001103a:	53                   	push   ebx
c001103b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001103f:	52                   	push   edx
c0011040:	6a 00                	push   0x0
c0011042:	6a 00                	push   0x0
c0011044:	53                   	push   ebx
c0011045:	e8 cc f8 ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c001104a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001105a:	7e 26                	jle    c0011082 <VgaText::clearScreen()+0x4c>
c001105c:	31 ff                	xor    edi,edi
c001105e:	50                   	push   eax
c001105f:	50                   	push   eax
c0011060:	56                   	push   esi
c0011061:	57                   	push   edi
c0011062:	47                   	inc    edi
c0011063:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011069:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001106f:	6a 20                	push   0x20
c0011071:	53                   	push   ebx
c0011072:	e8 27 f8 ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011077:	83 c4 20             	add    esp,0x20
c001107a:	83 ff 50             	cmp    edi,0x50
c001107d:	75 df                	jne    c001105e <VgaText::clearScreen()+0x28>
c001107f:	46                   	inc    esi
c0011080:	eb d2                	jmp    c0011054 <VgaText::clearScreen()+0x1e>
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	53                   	push   ebx
c0011086:	e8 d9 fd ff ff       	call   c0010e64 <VgaText::doUpdate()>
c001108b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011092:	83 c4 10             	add    esp,0x10
c0011095:	5b                   	pop    ebx
c0011096:	5e                   	pop    esi
c0011097:	5f                   	pop    edi
c0011098:	c3                   	ret    
c0011099:	90                   	nop

c001109a <VgaText::putchar(char)>:
c001109a:	56                   	push   esi
c001109b:	53                   	push   ebx
c001109c:	83 ec 14             	sub    esp,0x14
c001109f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00110a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110a7:	3c 5b                	cmp    al,0x5b
c00110a9:	75 21                	jne    c00110cc <VgaText::putchar(char)+0x32>
c00110ab:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00110b2:	74 28                	je     c00110dc <VgaText::putchar(char)+0x42>
c00110b4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00110bd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00110c7:	e9 e2 00 00 00       	jmp    c00111ae <VgaText::putchar(char)+0x114>
c00110cc:	3c 1b                	cmp    al,0x1b
c00110ce:	75 0c                	jne    c00110dc <VgaText::putchar(char)+0x42>
c00110d0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00110d7:	e9 d2 00 00 00       	jmp    c00111ae <VgaText::putchar(char)+0x114>
c00110dc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110e2:	84 c9                	test   cl,cl
c00110e4:	0f 84 ab 00 00 00    	je     c0011195 <VgaText::putchar(char)+0xfb>
c00110ea:	8d 50 c0             	lea    edx,[eax-0x40]
c00110ed:	80 fa 3e             	cmp    dl,0x3e
c00110f0:	0f 87 82 00 00 00    	ja     c0011178 <VgaText::putchar(char)+0xde>
c00110f6:	3c 6d                	cmp    al,0x6d
c00110f8:	75 4d                	jne    c0011147 <VgaText::putchar(char)+0xad>
c00110fa:	31 f6                	xor    esi,esi
c00110fc:	31 d2                	xor    edx,edx
c00110fe:	31 c0                	xor    eax,eax
c0011100:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011106:	7e 30                	jle    c0011138 <VgaText::putchar(char)+0x9e>
c0011108:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011110:	80 fa 3b             	cmp    dl,0x3b
c0011113:	75 17                	jne    c001112c <VgaText::putchar(char)+0x92>
c0011115:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011119:	50                   	push   eax
c001111a:	53                   	push   ebx
c001111b:	e8 ee f5 ff ff       	call   c001070e <VgaText::doANSI_SGR(int)>
c0011120:	59                   	pop    ecx
c0011121:	31 d2                	xor    edx,edx
c0011123:	58                   	pop    eax
c0011124:	31 c0                	xor    eax,eax
c0011126:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001112a:	eb 09                	jmp    c0011135 <VgaText::putchar(char)+0x9b>
c001112c:	6b c0 0a             	imul   eax,eax,0xa
c001112f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011133:	88 ca                	mov    dl,cl
c0011135:	46                   	inc    esi
c0011136:	eb c8                	jmp    c0011100 <VgaText::putchar(char)+0x66>
c0011138:	84 d2                	test   dl,dl
c001113a:	74 31                	je     c001116d <VgaText::putchar(char)+0xd3>
c001113c:	50                   	push   eax
c001113d:	53                   	push   ebx
c001113e:	e8 cb f5 ff ff       	call   c001070e <VgaText::doANSI_SGR(int)>
c0011143:	58                   	pop    eax
c0011144:	5a                   	pop    edx
c0011145:	eb 26                	jmp    c001116d <VgaText::putchar(char)+0xd3>
c0011147:	3c 4a                	cmp    al,0x4a
c0011149:	75 22                	jne    c001116d <VgaText::putchar(char)+0xd3>
c001114b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011152:	75 19                	jne    c001116d <VgaText::putchar(char)+0xd3>
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	53                   	push   ebx
c0011158:	e8 d9 fe ff ff       	call   c0011036 <VgaText::clearScreen()>
c001115d:	83 c4 0c             	add    esp,0xc
c0011160:	6a 00                	push   0x0
c0011162:	6a 00                	push   0x0
c0011164:	53                   	push   ebx
c0011165:	e8 ac f7 ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011176:	eb 36                	jmp    c00111ae <VgaText::putchar(char)+0x114>
c0011178:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001117e:	83 fa 0e             	cmp    edx,0xe
c0011181:	7f 2b                	jg     c00111ae <VgaText::putchar(char)+0x114>
c0011183:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011186:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001118c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011193:	eb 19                	jmp    c00111ae <VgaText::putchar(char)+0x114>
c0011195:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001119b:	0f be c0             	movsx  eax,al
c001119e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00111a4:	50                   	push   eax
c00111a5:	53                   	push   ebx
c00111a6:	e8 ab fa ff ff       	call   c0010c56 <VgaText::putchar(char, VgaColour, VgaColour)>
c00111ab:	83 c4 10             	add    esp,0x10
c00111ae:	83 c4 14             	add    esp,0x14
c00111b1:	5b                   	pop    ebx
c00111b2:	5e                   	pop    esi
c00111b3:	c3                   	ret    

c00111b4 <VgaText::puts(char const*)>:
c00111b4:	53                   	push   ebx
c00111b5:	83 ec 08             	sub    esp,0x8
c00111b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00111bf:	84 c0                	test   al,al
c00111c1:	74 12                	je     c00111d5 <VgaText::puts(char const*)+0x21>
c00111c3:	43                   	inc    ebx
c00111c4:	51                   	push   ecx
c00111c5:	51                   	push   ecx
c00111c6:	50                   	push   eax
c00111c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cb:	e8 ca fe ff ff       	call   c001109a <VgaText::putchar(char)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	eb e7                	jmp    c00111bc <VgaText::puts(char const*)+0x8>
c00111d5:	83 c4 08             	add    esp,0x8
c00111d8:	5b                   	pop    ebx
c00111d9:	c3                   	ret    

c00111da <VgaText::putx(unsigned int)>:
c00111da:	57                   	push   edi
c00111db:	b9 11 00 00 00       	mov    ecx,0x11
c00111e0:	56                   	push   esi
c00111e1:	be be a4 02 c0       	mov    esi,0xc002a4be
c00111e6:	53                   	push   ebx
c00111e7:	83 ec 20             	sub    esp,0x20
c00111ea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111ee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111f2:	fc                   	cld    
c00111f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111f5:	be 08 00 00 00       	mov    esi,0x8
c00111fa:	50                   	push   eax
c00111fb:	50                   	push   eax
c00111fc:	89 d8                	mov    eax,ebx
c00111fe:	c1 e3 04             	shl    ebx,0x4
c0011201:	c1 e8 1c             	shr    eax,0x1c
c0011204:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011209:	50                   	push   eax
c001120a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001120e:	e8 87 fe ff ff       	call   c001109a <VgaText::putchar(char)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	4e                   	dec    esi
c0011217:	75 e1                	jne    c00111fa <VgaText::putx(unsigned int)+0x20>
c0011219:	83 c4 20             	add    esp,0x20
c001121c:	5b                   	pop    ebx
c001121d:	5e                   	pop    esi
c001121e:	5f                   	pop    edi
c001121f:	c3                   	ret    

c0011220 <VgaText::VgaText(char const*)>:
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	83 ec 08             	sub    esp,0x8
c001122a:	6a 00                	push   0x0
c001122c:	50                   	push   eax
c001122d:	e8 6e 05 00 00       	call   c00117a0 <UnixFile::UnixFile(int)>
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	ba 24 a5 02 c0       	mov    edx,0xc002a524
c001123a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123e:	89 10                	mov    DWORD PTR [eax],edx
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011252:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011260:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011276:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011292:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00112ae:	bb e0 e5 02 c0       	mov    ebx,0xc002e5e0
c00112b3:	b8 08 00 00 00       	mov    eax,0x8
c00112b8:	fc                   	cld    
c00112b9:	89 d7                	mov    edi,edx
c00112bb:	89 de                	mov    esi,ebx
c00112bd:	89 c1                	mov    ecx,eax
c00112bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c5:	05 1e 10 00 00       	add    eax,0x101e
c00112ca:	83 ec 08             	sub    esp,0x8
c00112cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d1:	50                   	push   eax
c00112d2:	e8 5d f5 fe ff       	call   c0000834 <strcpy>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112de:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ec:	83 c0 0c             	add    eax,0xc
c00112ef:	83 ec 04             	sub    esp,0x4
c00112f2:	68 00 0f 00 00       	push   0xf00
c00112f7:	6a 00                	push   0x0
c00112f9:	50                   	push   eax
c00112fa:	e8 79 f4 fe ff       	call   c0000778 <memset>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	83 ec 04             	sub    esp,0x4
c0011305:	6a 00                	push   0x0
c0011307:	6a 07                	push   0x7
c0011309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130d:	e8 b4 f4 ff ff       	call   c00107c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	83 ec 08             	sub    esp,0x8
c0011318:	6a 02                	push   0x2
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 49 fa ff ff       	call   c0010d6c <VgaText::setCursorHeight(int)>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	6a 00                	push   0x0
c001132b:	6a 00                	push   0x0
c001132d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011331:	e8 e0 f5 ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	83 ec 08             	sub    esp,0x8
c001133c:	6a 01                	push   0x1
c001133e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011342:	e8 7d f3 ff ff       	call   c00106c4 <VgaText::showCursor(bool)>
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	83 ec 08             	sub    esp,0x8
c001134d:	6a 01                	push   0x1
c001134f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011353:	e8 7c f3 ff ff       	call   c00106d4 <VgaText::disableBlink(bool)>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	83 ec 0c             	sub    esp,0xc
c001135e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011362:	e8 cf fc ff ff       	call   c0011036 <VgaText::clearScreen()>
c0011367:	83 c4 10             	add    esp,0x10
c001136a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011379:	05 9e 10 00 00       	add    eax,0x109e
c001137e:	83 ec 04             	sub    esp,0x4
c0011381:	68 96 00 00 00       	push   0x96
c0011386:	6a 00                	push   0x0
c0011388:	50                   	push   eax
c0011389:	e8 ea f3 fe ff       	call   c0000778 <memset>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011395:	05 34 11 00 00       	add    eax,0x1134
c001139a:	83 ec 04             	sub    esp,0x4
c001139d:	68 2c 01 00 00       	push   0x12c
c00113a2:	6a 00                	push   0x0
c00113a4:	50                   	push   eax
c00113a5:	e8 ce f3 fe ff       	call   c0000778 <memset>
c00113aa:	83 c4 10             	add    esp,0x10
c00113ad:	90                   	nop
c00113ae:	5b                   	pop    ebx
c00113af:	5e                   	pop    esi
c00113b0:	5f                   	pop    edi
c00113b1:	c3                   	ret    

c00113b2 <VgaText::receiveKey(unsigned char)>:
c00113b2:	55                   	push   ebp
c00113b3:	57                   	push   edi
c00113b4:	56                   	push   esi
c00113b5:	53                   	push   ebx
c00113b6:	83 ec 1c             	sub    esp,0x1c
c00113b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113c1:	84 db                	test   bl,bl
c00113c3:	0f 84 c9 00 00 00    	je     c0011492 <VgaText::receiveKey(unsigned char)+0xe0>
c00113c9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00113cf:	80 fb 08             	cmp    bl,0x8
c00113d2:	75 2c                	jne    c0011400 <VgaText::receiveKey(unsigned char)+0x4e>
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	57                   	push   edi
c00113d8:	e8 b7 f3 fe ff       	call   c0000794 <strlen>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	85 c0                	test   eax,eax
c00113e2:	74 41                	je     c0011425 <VgaText::receiveKey(unsigned char)+0x73>
c00113e4:	50                   	push   eax
c00113e5:	50                   	push   eax
c00113e6:	6a 08                	push   0x8
c00113e8:	56                   	push   esi
c00113e9:	e8 ac fc ff ff       	call   c001109a <VgaText::putchar(char)>
c00113ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113f1:	e8 9e f3 fe ff       	call   c0000794 <strlen>
c00113f6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113fe:	eb 22                	jmp    c0011422 <VgaText::receiveKey(unsigned char)+0x70>
c0011400:	0f be c3             	movsx  eax,bl
c0011403:	52                   	push   edx
c0011404:	52                   	push   edx
c0011405:	50                   	push   eax
c0011406:	56                   	push   esi
c0011407:	e8 8e fc ff ff       	call   c001109a <VgaText::putchar(char)>
c001140c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011410:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011415:	59                   	pop    ecx
c0011416:	5d                   	pop    ebp
c0011417:	8d 44 24 16          	lea    eax,[esp+0x16]
c001141b:	50                   	push   eax
c001141c:	57                   	push   edi
c001141d:	e8 52 f5 fe ff       	call   c0000974 <strcat>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001142c:	75 05                	jne    c0011433 <VgaText::receiveKey(unsigned char)+0x81>
c001142e:	80 fb 0a             	cmp    bl,0xa
c0011431:	75 53                	jne    c0011486 <VgaText::receiveKey(unsigned char)+0xd4>
c0011433:	83 ec 0c             	sub    esp,0xc
c0011436:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001143c:	53                   	push   ebx
c001143d:	e8 52 f3 fe ff       	call   c0000794 <strlen>
c0011442:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011445:	89 c5                	mov    ebp,eax
c0011447:	e8 48 f3 fe ff       	call   c0000794 <strlen>
c001144c:	83 c4 10             	add    esp,0x10
c001144f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011453:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011458:	76 10                	jbe    c001146a <VgaText::receiveKey(unsigned char)+0xb8>
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	68 cf a4 02 c0       	push   0xc002a4cf
c0011462:	e8 34 92 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	50                   	push   eax
c001146b:	50                   	push   eax
c001146c:	57                   	push   edi
c001146d:	53                   	push   ebx
c001146e:	e8 01 f5 fe ff       	call   c0000974 <strcat>
c0011473:	83 c4 0c             	add    esp,0xc
c0011476:	68 96 00 00 00       	push   0x96
c001147b:	6a 00                	push   0x0
c001147d:	57                   	push   edi
c001147e:	e8 f5 f2 fe ff       	call   c0000778 <memset>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	83 ec 0c             	sub    esp,0xc
c0011489:	56                   	push   esi
c001148a:	e8 d5 f9 ff ff       	call   c0010e64 <VgaText::doUpdate()>
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	83 c4 1c             	add    esp,0x1c
c0011495:	5b                   	pop    ebx
c0011496:	5e                   	pop    esi
c0011497:	5f                   	pop    edi
c0011498:	5d                   	pop    ebp
c0011499:	c3                   	ret    

c001149a <VgaText::write(unsigned long long, void*, int*)>:
c001149a:	55                   	push   ebp
c001149b:	57                   	push   edi
c001149c:	56                   	push   esi
c001149d:	53                   	push   ebx
c001149e:	83 ec 0c             	sub    esp,0xc
c00114a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114a5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114ad:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00114b4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114b7:	39 eb                	cmp    ebx,ebp
c00114b9:	74 13                	je     c00114ce <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114bb:	43                   	inc    ebx
c00114bc:	50                   	push   eax
c00114bd:	50                   	push   eax
c00114be:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114c2:	50                   	push   eax
c00114c3:	56                   	push   esi
c00114c4:	e8 d1 fb ff ff       	call   c001109a <VgaText::putchar(char)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	eb e9                	jmp    c00114b7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00114d8:	56                   	push   esi
c00114d9:	e8 86 f9 ff ff       	call   c0010e64 <VgaText::doUpdate()>
c00114de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114e2:	89 38                	mov    DWORD PTR [eax],edi
c00114e4:	83 c4 1c             	add    esp,0x1c
c00114e7:	31 c0                	xor    eax,eax
c00114e9:	5b                   	pop    ebx
c00114ea:	5e                   	pop    esi
c00114eb:	5f                   	pop    edi
c00114ec:	5d                   	pop    ebp
c00114ed:	c3                   	ret    

c00114ee <newTerminal(char*)>:
c00114ee:	83 ec 28             	sub    esp,0x28
c00114f1:	68 60 12 00 00       	push   0x1260
c00114f6:	e8 45 e3 ff ff       	call   c000f840 <malloc>
c00114fb:	5a                   	pop    edx
c00114fc:	59                   	pop    ecx
c00114fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011501:	50                   	push   eax
c0011502:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011506:	e8 15 fd ff ff       	call   c0011220 <VgaText::VgaText(char const*)>
c001150b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001150f:	83 c4 2c             	add    esp,0x2c
c0011512:	c3                   	ret    
c0011513:	90                   	nop

c0011514 <TSS::TSS()>:
c0011514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011518:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001151f:	90                   	nop
c0011520:	c3                   	ret    
c0011521:	90                   	nop

c0011522 <TSS::setESP(unsigned long)>:
c0011522:	55                   	push   ebp
c0011523:	89 e5                	mov    ebp,esp
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001152e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011531:	90                   	nop
c0011532:	5d                   	pop    ebp
c0011533:	c3                   	ret    

c0011534 <TSS::flush()>:
c0011534:	55                   	push   ebp
c0011535:	89 e5                	mov    ebp,esp
c0011537:	83 ec 10             	sub    esp,0x10
c001153a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153d:	8b 00                	mov    eax,DWORD PTR [eax]
c001153f:	83 c8 03             	or     eax,0x3
c0011542:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011546:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001154a:	66 89 d0             	mov    ax,dx
c001154d:	0f 00 d8             	ltr    ax
c0011550:	90                   	nop
c0011551:	c9                   	leave  
c0011552:	c3                   	ret    
c0011553:	90                   	nop

c0011554 <TSS::setup(unsigned long, unsigned long)>:
c0011554:	55                   	push   ebp
c0011555:	89 e5                	mov    ebp,esp
c0011557:	83 ec 18             	sub    esp,0x18
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	6a 68                	push   0x68
c001155f:	e8 dc e2 ff ff       	call   c000f840 <malloc>
c0011564:	83 c4 10             	add    esp,0x10
c0011567:	89 c2                	mov    edx,eax
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001156f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011572:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011575:	83 ec 04             	sub    esp,0x4
c0011578:	6a 68                	push   0x68
c001157a:	6a 00                	push   0x0
c001157c:	50                   	push   eax
c001157d:	e8 f6 f1 fe ff       	call   c0000778 <memset>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011594:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011597:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001159d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115a6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115af:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00115b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00115c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00115cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00115d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115df:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115eb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011600:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011603:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011606:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001160f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011619:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001161c:	0f 20 da             	mov    edx,cr3
c001161f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011622:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011625:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	50                   	push   eax
c0011632:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011635:	50                   	push   eax
c0011636:	e8 e3 d9 ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	83 ec 08             	sub    esp,0x8
c0011641:	6a 68                	push   0x68
c0011643:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011646:	50                   	push   eax
c0011647:	e8 ee d9 ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001164c:	83 c4 10             	add    esp,0x10
c001164f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011653:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011656:	83 e0 0f             	and    eax,0xf
c0011659:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001165c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001165f:	83 c8 40             	or     eax,0x40
c0011662:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011665:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001166a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011670:	05 78 01 00 00       	add    eax,0x178
c0011675:	83 ec 04             	sub    esp,0x4
c0011678:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001167b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001167e:	50                   	push   eax
c001167f:	e8 ea d9 ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	89 c2                	mov    edx,eax
c0011689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168c:	89 10                	mov    DWORD PTR [eax],edx
c001168e:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0011693:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011699:	05 78 01 00 00       	add    eax,0x178
c001169e:	83 ec 0c             	sub    esp,0xc
c00116a1:	50                   	push   eax
c00116a2:	e8 0b da ff ff       	call   c000f0b2 <GDT::flush()>
c00116a7:	83 c4 10             	add    esp,0x10
c00116aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00116af:	83 ec 08             	sub    esp,0x8
c00116b2:	50                   	push   eax
c00116b3:	68 38 a5 02 c0       	push   0xc002a538
c00116b8:	e8 2d 19 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00116c5:	c9                   	leave  
c00116c6:	c3                   	ret    
c00116c7:	90                   	nop

c00116c8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00116c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116d8:	75 08                	jne    c00116e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00116da:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116e0:	eb 38                	jmp    c001171a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116e2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116e7:	75 17                	jne    c0011700 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00116f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116fd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011700:	89 c1                	mov    ecx,eax
c0011702:	83 e1 fd             	and    ecx,0xfffffffd
c0011705:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001170b:	74 cd                	je     c00116da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001170d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011712:	83 e0 ef             	and    eax,0xffffffef
c0011715:	83 f8 08             	cmp    eax,0x8
c0011718:	76 c0                	jbe    c00116da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001171a:	31 c0                	xor    eax,eax
c001171c:	c3                   	ret    
c001171d:	90                   	nop

c001171e <ReservedFilename::isAtty()>:
c001171e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011722:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011725:	31 c0                	xor    eax,eax
c0011727:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001172d:	74 09                	je     c0011738 <ReservedFilename::isAtty()+0x1a>
c001172f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011735:	0f 94 c0             	sete   al
c0011738:	c3                   	ret    
c0011739:	90                   	nop

c001173a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001173a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011745:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011749:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001174e:	75 08                	jne    c0011758 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011750:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011756:	eb 3d                	jmp    c0011795 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011758:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001175d:	75 17                	jne    c0011776 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001175f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011764:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011767:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001176d:	8b 10                	mov    edx,DWORD PTR [eax]
c001176f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011773:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011776:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001177b:	75 04                	jne    c0011781 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001177d:	89 0a                	mov    DWORD PTR [edx],ecx
c001177f:	eb 14                	jmp    c0011795 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011781:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011786:	74 c8                	je     c0011750 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011788:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001178d:	83 e0 ef             	and    eax,0xffffffef
c0011790:	83 f8 08             	cmp    eax,0x8
c0011793:	76 bb                	jbe    c0011750 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011795:	31 c0                	xor    eax,eax
c0011797:	c3                   	ret    

c0011798 <UnixFile::getFileDescriptor()>:
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001179f:	c3                   	ret    

c00117a0 <UnixFile::UnixFile(int)>:
c00117a0:	53                   	push   ebx
c00117a1:	83 ec 28             	sub    esp,0x28
c00117a4:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c00117a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ad:	89 10                	mov    DWORD PTR [eax],edx
c00117af:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00117b7:	0f 8f 8c 01 00 00    	jg     c0011949 <UnixFile::UnixFile(int)+0x1a9>
c00117bd:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c00117c2:	8d 50 01             	lea    edx,[eax+0x1]
c00117c5:	89 15 c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,edx
c00117cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117cf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00117d9:	68 98 e6 02 c0       	push   0xc002e698
c00117de:	e8 dd 6f 01 00       	call   c00287c0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	a0 94 e6 02 c0       	mov    al,ds:0xc002e694
c00117eb:	83 f0 01             	xor    eax,0x1
c00117ee:	84 c0                	test   al,al
c00117f0:	0f 84 54 01 00 00    	je     c001194a <UnixFile::UnixFile(int)+0x1aa>
c00117f6:	c6 05 94 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e694,0x1
c00117fd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001180c:	e8 2f e0 ff ff       	call   c000f840 <malloc>
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	89 c3                	mov    ebx,eax
c0011816:	83 ec 08             	sub    esp,0x8
c0011819:	68 03 ff ff 0f       	push   0xfffff03
c001181e:	53                   	push   ebx
c001181f:	e8 2c 01 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011824:	83 c4 10             	add    esp,0x10
c0011827:	89 1d 8c e6 02 c0    	mov    DWORD PTR ds:0xc002e68c,ebx
c001182d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011835:	83 ec 0c             	sub    esp,0xc
c0011838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183c:	e8 ff df ff ff       	call   c000f840 <malloc>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	89 c3                	mov    ebx,eax
c0011846:	83 ec 08             	sub    esp,0x8
c0011849:	68 01 ff ff 0f       	push   0xfffff01
c001184e:	53                   	push   ebx
c001184f:	e8 fc 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	89 1d 90 e6 02 c0    	mov    DWORD PTR ds:0xc002e690,ebx
c001185d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011865:	83 ec 0c             	sub    esp,0xc
c0011868:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001186c:	e8 cf df ff ff       	call   c000f840 <malloc>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	89 c3                	mov    ebx,eax
c0011876:	83 ec 08             	sub    esp,0x8
c0011879:	68 00 ff ff 0f       	push   0xfffff00
c001187e:	53                   	push   ebx
c001187f:	e8 cc 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011884:	83 c4 10             	add    esp,0x10
c0011887:	89 1d 84 e6 02 c0    	mov    DWORD PTR ds:0xc002e684,ebx
c001188d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011895:	83 ec 0c             	sub    esp,0xc
c0011898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001189c:	e8 9f df ff ff       	call   c000f840 <malloc>
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	89 c3                	mov    ebx,eax
c00118a6:	83 ec 08             	sub    esp,0x8
c00118a9:	68 02 ff ff 0f       	push   0xfffff02
c00118ae:	53                   	push   ebx
c00118af:	e8 9c 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	89 1d 88 e6 02 c0    	mov    DWORD PTR ds:0xc002e688,ebx
c00118bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118c5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00118ca:	7f 7e                	jg     c001194a <UnixFile::UnixFile(int)+0x1aa>
c00118cc:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00118d4:	83 ec 0c             	sub    esp,0xc
c00118d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118db:	e8 60 df ff ff       	call   c000f840 <malloc>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	89 c3                	mov    ebx,eax
c00118e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e9:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118ee:	83 ec 08             	sub    esp,0x8
c00118f1:	50                   	push   eax
c00118f2:	53                   	push   ebx
c00118f3:	e8 58 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ff:	89 1c 85 60 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19a0],ebx
c0011906:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011915:	e8 26 df ff ff       	call   c000f840 <malloc>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	89 c3                	mov    ebx,eax
c001191f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011923:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011928:	83 ec 08             	sub    esp,0x8
c001192b:	50                   	push   eax
c001192c:	53                   	push   ebx
c001192d:	e8 1e 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011939:	89 1c 85 20 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19e0],ebx
c0011940:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011944:	e9 7c ff ff ff       	jmp    c00118c5 <UnixFile::UnixFile(int)+0x125>
c0011949:	90                   	nop
c001194a:	83 c4 28             	add    esp,0x28
c001194d:	5b                   	pop    ebx
c001194e:	c3                   	ret    
c001194f:	90                   	nop

c0011950 <ReservedFilename::ReservedFilename(int)>:
c0011950:	83 ec 0c             	sub    esp,0xc
c0011953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011957:	83 ec 08             	sub    esp,0x8
c001195a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195e:	50                   	push   eax
c001195f:	e8 3c fe ff ff       	call   c00117a0 <UnixFile::UnixFile(int)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	ba 40 a6 02 c0       	mov    edx,0xc002a640
c001196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011970:	89 10                	mov    DWORD PTR [eax],edx
c0011972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011976:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001197a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001197d:	90                   	nop
c001197e:	83 c4 0c             	add    esp,0xc
c0011981:	c3                   	ret    

c0011982 <UnixFile::~UnixFile()>:
c0011982:	83 ec 1c             	sub    esp,0x1c
c0011985:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c001198a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001198e:	89 10                	mov    DWORD PTR [eax],edx
c0011990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011997:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001199c:	7f 73                	jg     c0011a11 <UnixFile::~UnixFile()+0x8f>
c001199e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119a6:	83 ec 0c             	sub    esp,0xc
c00119a9:	68 98 e6 02 c0       	push   0xc002e698
c00119ae:	e8 e1 6e 01 00       	call   c0028894 <LinkedList<UnixFile>::getFirstElement()>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	68 98 e6 02 c0       	push   0xc002e698
c00119c2:	e8 d5 6e 01 00       	call   c002889c <LinkedList<UnixFile>::removeFirst()>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119ce:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00119d2:	74 40                	je     c0011a14 <UnixFile::~UnixFile()+0x92>
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119db:	68 98 e6 02 c0       	push   0xc002e698
c00119e0:	e8 db 6d 01 00       	call   c00287c0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ec:	8d 50 01             	lea    edx,[eax+0x1]
c00119ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f3:	3d 88 13 00 00       	cmp    eax,0x1388
c00119f8:	0f 94 c0             	sete   al
c00119fb:	84 c0                	test   al,al
c00119fd:	74 a7                	je     c00119a6 <UnixFile::~UnixFile()+0x24>
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	68 fc a5 02 c0       	push   0xc002a5fc
c0011a07:	e8 8f 8c 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	eb 95                	jmp    c00119a6 <UnixFile::~UnixFile()+0x24>
c0011a11:	90                   	nop
c0011a12:	eb 01                	jmp    c0011a15 <UnixFile::~UnixFile()+0x93>
c0011a14:	90                   	nop
c0011a15:	90                   	nop
c0011a16:	83 c4 1c             	add    esp,0x1c
c0011a19:	c3                   	ret    

c0011a1a <UnixFile::~UnixFile()>:
c0011a1a:	83 ec 0c             	sub    esp,0xc
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a24:	e8 59 ff ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	83 ec 08             	sub    esp,0x8
c0011a2f:	6a 0c                	push   0xc
c0011a31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a35:	e8 d0 14 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 c4 0c             	add    esp,0xc
c0011a40:	c3                   	ret    
c0011a41:	90                   	nop

c0011a42 <ReservedFilename::~ReservedFilename()>:
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	ba 40 a6 02 c0       	mov    edx,0xc002a640
c0011a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4e:	89 10                	mov    DWORD PTR [eax],edx
c0011a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a54:	83 ec 0c             	sub    esp,0xc
c0011a57:	50                   	push   eax
c0011a58:	e8 25 ff ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c0011a5d:	83 c4 10             	add    esp,0x10
c0011a60:	90                   	nop
c0011a61:	83 c4 0c             	add    esp,0xc
c0011a64:	c3                   	ret    
c0011a65:	90                   	nop

c0011a66 <ReservedFilename::~ReservedFilename()>:
c0011a66:	83 ec 0c             	sub    esp,0xc
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a70:	e8 cd ff ff ff       	call   c0011a42 <ReservedFilename::~ReservedFilename()>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	83 ec 08             	sub    esp,0x8
c0011a7b:	6a 0c                	push   0xc
c0011a7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a81:	e8 84 14 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	83 c4 0c             	add    esp,0xc
c0011a8c:	c3                   	ret    

c0011a8d <getFromFileDescriptor(int)>:
c0011a8d:	53                   	push   ebx
c0011a8e:	83 ec 08             	sub    esp,0x8
c0011a91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a95:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a9b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011aa1:	7f 2c                	jg     c0011acf <getFromFileDescriptor(int)+0x42>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	68 98 e6 02 c0       	push   0xc002e698
c0011aab:	e8 e4 6d 01 00       	call   c0028894 <LinkedList<UnixFile>::getFirstElement()>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	85 c0                	test   eax,eax
c0011ab5:	75 04                	jne    c0011abb <getFromFileDescriptor(int)+0x2e>
c0011ab7:	31 c0                	xor    eax,eax
c0011ab9:	eb 6e                	jmp    c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011abb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011abe:	74 69                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011ac0:	52                   	push   edx
c0011ac1:	52                   	push   edx
c0011ac2:	50                   	push   eax
c0011ac3:	68 98 e6 02 c0       	push   0xc002e698
c0011ac8:	e8 71 6e 01 00       	call   c002893e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011acd:	eb e1                	jmp    c0011ab0 <getFromFileDescriptor(int)+0x23>
c0011acf:	a1 8c e6 02 c0       	mov    eax,ds:0xc002e68c
c0011ad4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011ada:	74 4d                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011adc:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c0011ae1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011ae7:	74 40                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011ae9:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0011aee:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011af4:	74 33                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011af6:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0011afb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011b01:	74 26                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011b03:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011b09:	83 f8 08             	cmp    eax,0x8
c0011b0c:	77 09                	ja     c0011b17 <getFromFileDescriptor(int)+0x8a>
c0011b0e:	8b 04 85 60 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19a0]
c0011b15:	eb 12                	jmp    c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011b17:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011b1d:	83 fb 08             	cmp    ebx,0x8
c0011b20:	77 95                	ja     c0011ab7 <getFromFileDescriptor(int)+0x2a>
c0011b22:	8b 04 9d 20 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd19e0]
c0011b29:	83 c4 08             	add    esp,0x8
c0011b2c:	5b                   	pop    ebx
c0011b2d:	c3                   	ret    

c0011b2e <__static_initialization_and_destruction_0(int, int)>:
c0011b2e:	83 ec 0c             	sub    esp,0xc
c0011b31:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b36:	75 34                	jne    c0011b6c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b38:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b40:	75 2a                	jne    c0011b6c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	68 98 e6 02 c0       	push   0xc002e698
c0011b4a:	e8 19 6c 01 00       	call   c0028768 <LinkedList<UnixFile>::LinkedList()>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	83 ec 04             	sub    esp,0x4
c0011b55:	68 48 d4 02 c0       	push   0xc002d448
c0011b5a:	68 98 e6 02 c0       	push   0xc002e698
c0011b5f:	68 66 87 02 c0       	push   0xc0028766
c0011b64:	e8 1b 13 00 00       	call   c0012e84 <__cxa_atexit>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	90                   	nop
c0011b6d:	83 c4 0c             	add    esp,0xc
c0011b70:	c3                   	ret    

c0011b71 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b71:	83 ec 0c             	sub    esp,0xc
c0011b74:	83 ec 08             	sub    esp,0x8
c0011b77:	68 ff ff 00 00       	push   0xffff
c0011b7c:	6a 01                	push   0x1
c0011b7e:	e8 ab ff ff ff       	call   c0011b2e <__static_initialization_and_destruction_0(int, int)>
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	83 c4 0c             	add    esp,0xc
c0011b89:	c3                   	ret    

c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b8a:	53                   	push   ebx
c0011b8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b93:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b99:	89 c8                	mov    eax,ecx
c0011b9b:	d1 e8                	shr    eax,1
c0011b9d:	03 05 c8 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4c8
c0011ba3:	83 e1 01             	and    ecx,0x1
c0011ba6:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ba8:	75 09                	jne    c0011bb3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011baa:	83 e2 f0             	and    edx,0xfffffff0
c0011bad:	09 da                	or     edx,ebx
c0011baf:	88 10                	mov    BYTE PTR [eax],dl
c0011bb1:	5b                   	pop    ebx
c0011bb2:	c3                   	ret    
c0011bb3:	c1 e3 04             	shl    ebx,0x4
c0011bb6:	83 e2 0f             	and    edx,0xf
c0011bb9:	09 da                	or     edx,ebx
c0011bbb:	88 10                	mov    BYTE PTR [eax],dl
c0011bbd:	5b                   	pop    ebx
c0011bbe:	c3                   	ret    

c0011bbf <Virt::getPageState(unsigned long)>:
c0011bbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc3:	8b 0d c8 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4c8
c0011bc9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011bcf:	89 d0                	mov    eax,edx
c0011bd1:	d1 e8                	shr    eax,1
c0011bd3:	83 e2 01             	and    edx,0x1
c0011bd6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011bd9:	75 04                	jne    c0011bdf <Virt::getPageState(unsigned long)+0x20>
c0011bdb:	83 e0 0f             	and    eax,0xf
c0011bde:	c3                   	ret    
c0011bdf:	c0 e8 04             	shr    al,0x4
c0011be2:	c3                   	ret    

c0011be3 <Virt::allocateKernelVirtualPages(int)>:
c0011be3:	55                   	push   ebp
c0011be4:	31 ed                	xor    ebp,ebp
c0011be6:	57                   	push   edi
c0011be7:	56                   	push   esi
c0011be8:	53                   	push   ebx
c0011be9:	31 db                	xor    ebx,ebx
c0011beb:	83 ec 1c             	sub    esp,0x1c
c0011bee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bf2:	8b 3d c4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c4
c0011bf8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bfd:	57                   	push   edi
c0011bfe:	e8 bc ff ff ff       	call   c0011bbf <Virt::getPageState(unsigned long)>
c0011c03:	5a                   	pop    edx
c0011c04:	84 c0                	test   al,al
c0011c06:	75 3a                	jne    c0011c42 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011c08:	85 db                	test   ebx,ebx
c0011c0a:	75 02                	jne    c0011c0e <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011c0c:	89 fd                	mov    ebp,edi
c0011c0e:	43                   	inc    ebx
c0011c0f:	39 f3                	cmp    ebx,esi
c0011c11:	74 5a                	je     c0011c6d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011c13:	47                   	inc    edi
c0011c14:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c1a:	76 31                	jbe    c0011c4d <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011c1c:	c7 05 c4 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d4c4,0xc8000
c0011c26:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c2b:	75 28                	jne    c0011c55 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c2d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c32:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c37:	57                   	push   edi
c0011c38:	e8 82 ff ff ff       	call   c0011bbf <Virt::getPageState(unsigned long)>
c0011c3d:	5a                   	pop    edx
c0011c3e:	84 c0                	test   al,al
c0011c40:	74 c6                	je     c0011c08 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c42:	31 db                	xor    ebx,ebx
c0011c44:	47                   	inc    edi
c0011c45:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c4b:	77 cf                	ja     c0011c1c <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c4d:	89 3d c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,edi
c0011c53:	eb a8                	jmp    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	68 54 a6 02 c0       	push   0xc002a654
c0011c5d:	e8 39 8a 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011c62:	8b 3d c4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c4
c0011c68:	83 c4 10             	add    esp,0x10
c0011c6b:	eb 90                	jmp    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c6d:	89 2d c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,ebp
c0011c73:	4b                   	dec    ebx
c0011c74:	74 5f                	je     c0011cd5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c76:	85 f6                	test   esi,esi
c0011c78:	74 3d                	je     c0011cb7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c7a:	89 e8                	mov    eax,ebp
c0011c7c:	31 db                	xor    ebx,ebx
c0011c7e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c81:	eb 14                	jmp    c0011c97 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c83:	6a 01                	push   0x1
c0011c85:	43                   	inc    ebx
c0011c86:	50                   	push   eax
c0011c87:	e8 fe fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8c:	58                   	pop    eax
c0011c8d:	39 f3                	cmp    ebx,esi
c0011c8f:	5a                   	pop    edx
c0011c90:	74 25                	je     c0011cb7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c92:	a1 c4 d4 02 c0       	mov    eax,ds:0xc002d4c4
c0011c97:	8d 50 01             	lea    edx,[eax+0x1]
c0011c9a:	85 db                	test   ebx,ebx
c0011c9c:	89 15 c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,edx
c0011ca2:	74 20                	je     c0011cc4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ca4:	39 df                	cmp    edi,ebx
c0011ca6:	75 db                	jne    c0011c83 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ca8:	6a 03                	push   0x3
c0011caa:	43                   	inc    ebx
c0011cab:	50                   	push   eax
c0011cac:	e8 d9 fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cb1:	59                   	pop    ecx
c0011cb2:	39 f3                	cmp    ebx,esi
c0011cb4:	58                   	pop    eax
c0011cb5:	75 db                	jne    c0011c92 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cb7:	83 c4 1c             	add    esp,0x1c
c0011cba:	89 e8                	mov    eax,ebp
c0011cbc:	5b                   	pop    ebx
c0011cbd:	c1 e0 0c             	shl    eax,0xc
c0011cc0:	5e                   	pop    esi
c0011cc1:	5f                   	pop    edi
c0011cc2:	5d                   	pop    ebp
c0011cc3:	c3                   	ret    
c0011cc4:	6a 02                	push   0x2
c0011cc6:	bb 01 00 00 00       	mov    ebx,0x1
c0011ccb:	50                   	push   eax
c0011ccc:	e8 b9 fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cd1:	58                   	pop    eax
c0011cd2:	5a                   	pop    edx
c0011cd3:	eb bd                	jmp    c0011c92 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cd5:	6a 04                	push   0x4
c0011cd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0011cda:	55                   	push   ebp
c0011cdb:	a3 c4 d4 02 c0       	mov    ds:0xc002d4c4,eax
c0011ce0:	e8 a5 fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ce5:	59                   	pop    ecx
c0011ce6:	89 e8                	mov    eax,ebp
c0011ce8:	5b                   	pop    ebx
c0011ce9:	c1 e0 0c             	shl    eax,0xc
c0011cec:	83 c4 1c             	add    esp,0x1c
c0011cef:	5b                   	pop    ebx
c0011cf0:	5e                   	pop    esi
c0011cf1:	5f                   	pop    edi
c0011cf2:	5d                   	pop    ebp
c0011cf3:	c3                   	ret    

c0011cf4 <Virt::freeSwapfilePage(unsigned long)>:
c0011cf4:	53                   	push   ebx
c0011cf5:	8b 15 a8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a8
c0011cfb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cff:	b8 01 00 00 00       	mov    eax,0x1
c0011d04:	89 cb                	mov    ebx,ecx
c0011d06:	d3 e0                	shl    eax,cl
c0011d08:	c1 eb 05             	shr    ebx,0x5
c0011d0b:	f7 d0                	not    eax
c0011d0d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011d10:	5b                   	pop    ebx
c0011d11:	c3                   	ret    

c0011d12 <Virt::swapIDToSector(unsigned long)>:
c0011d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d16:	0f af 05 cc d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d4cc
c0011d1d:	03 05 d4 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4d4
c0011d23:	c3                   	ret    

c0011d24 <Virt::allocateSwapfilePage()>:
c0011d24:	55                   	push   ebp
c0011d25:	31 d2                	xor    edx,edx
c0011d27:	57                   	push   edi
c0011d28:	56                   	push   esi
c0011d29:	53                   	push   ebx
c0011d2a:	83 ec 0c             	sub    esp,0xc
c0011d2d:	8b 0d cc d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4cc
c0011d33:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011d38:	f7 f1                	div    ecx
c0011d3a:	39 0d d0 d4 02 c0    	cmp    DWORD PTR ds:0xc002d4d0,ecx
c0011d40:	72 2d                	jb     c0011d6f <Virt::allocateSwapfilePage()+0x4b>
c0011d42:	8b 35 a8 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6a8
c0011d48:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d4a:	f6 c2 01             	test   dl,0x1
c0011d4d:	74 3c                	je     c0011d8b <Virt::allocateSwapfilePage()+0x67>
c0011d4f:	31 c9                	xor    ecx,ecx
c0011d51:	bf 01 00 00 00       	mov    edi,0x1
c0011d56:	eb 12                	jmp    c0011d6a <Virt::allocateSwapfilePage()+0x46>
c0011d58:	89 fd                	mov    ebp,edi
c0011d5a:	89 ca                	mov    edx,ecx
c0011d5c:	d3 e5                	shl    ebp,cl
c0011d5e:	c1 ea 05             	shr    edx,0x5
c0011d61:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d64:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d66:	85 ea                	test   edx,ebp
c0011d68:	74 2a                	je     c0011d94 <Virt::allocateSwapfilePage()+0x70>
c0011d6a:	41                   	inc    ecx
c0011d6b:	39 c8                	cmp    eax,ecx
c0011d6d:	77 e9                	ja     c0011d58 <Virt::allocateSwapfilePage()+0x34>
c0011d6f:	83 ec 0c             	sub    esp,0xc
c0011d72:	68 1b a8 02 c0       	push   0xc002a81b
c0011d77:	e8 1f 89 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	31 c9                	xor    ecx,ecx
c0011d81:	83 c4 0c             	add    esp,0xc
c0011d84:	89 c8                	mov    eax,ecx
c0011d86:	5b                   	pop    ebx
c0011d87:	5e                   	pop    esi
c0011d88:	5f                   	pop    edi
c0011d89:	5d                   	pop    ebp
c0011d8a:	c3                   	ret    
c0011d8b:	89 f3                	mov    ebx,esi
c0011d8d:	bd 01 00 00 00       	mov    ebp,0x1
c0011d92:	31 c9                	xor    ecx,ecx
c0011d94:	09 ea                	or     edx,ebp
c0011d96:	89 c8                	mov    eax,ecx
c0011d98:	89 13                	mov    DWORD PTR [ebx],edx
c0011d9a:	83 c4 0c             	add    esp,0xc
c0011d9d:	5b                   	pop    ebx
c0011d9e:	5e                   	pop    esi
c0011d9f:	5f                   	pop    edi
c0011da0:	5d                   	pop    ebp
c0011da1:	c3                   	ret    

c0011da2 <Virt::virtualMemorySetup()>:
c0011da2:	53                   	push   ebx
c0011da3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	6a 0f                	push   0xf
c0011dad:	53                   	push   ebx
c0011dae:	43                   	inc    ebx
c0011daf:	e8 d6 fd ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db4:	59                   	pop    ecx
c0011db5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dbb:	58                   	pop    eax
c0011dbc:	75 ed                	jne    c0011dab <Virt::virtualMemorySetup()+0x9>
c0011dbe:	83 ec 08             	sub    esp,0x8
c0011dc1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011dc6:	68 00 00 00 c8       	push   0xc8000000
c0011dcb:	68 32 a8 02 c0       	push   0xc002a832
c0011dd0:	e8 15 12 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011dd5:	58                   	pop    eax
c0011dd6:	5a                   	pop    edx
c0011dd7:	68 00 f0 ff ef       	push   0xeffff000
c0011ddc:	68 46 a8 02 c0       	push   0xc002a846
c0011de1:	e8 04 12 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	83 ec 08             	sub    esp,0x8
c0011dec:	6a 00                	push   0x0
c0011dee:	53                   	push   ebx
c0011def:	43                   	inc    ebx
c0011df0:	e8 95 fd ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dfe:	75 e9                	jne    c0011de9 <Virt::virtualMemorySetup()+0x47>
c0011e00:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011e05:	83 ec 08             	sub    esp,0x8
c0011e08:	6a 0f                	push   0xf
c0011e0a:	53                   	push   ebx
c0011e0b:	43                   	inc    ebx
c0011e0c:	e8 79 fd ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011e1a:	75 e9                	jne    c0011e05 <Virt::virtualMemorySetup()+0x63>
c0011e1c:	83 c4 08             	add    esp,0x8
c0011e1f:	5b                   	pop    ebx
c0011e20:	c3                   	ret    

c0011e21 <Virt::swappingSetup()>:
c0011e21:	83 ec 14             	sub    esp,0x14
c0011e24:	31 d2                	xor    edx,edx
c0011e26:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011e2b:	f7 35 cc d4 02 c0    	div    DWORD PTR ds:0xc002d4cc
c0011e31:	c1 e8 05             	shr    eax,0x5
c0011e34:	50                   	push   eax
c0011e35:	68 5a a8 02 c0       	push   0xc002a85a
c0011e3a:	e8 ab 11 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011e3f:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011e44:	31 d2                	xor    edx,edx
c0011e46:	f7 35 cc d4 02 c0    	div    DWORD PTR ds:0xc002d4cc
c0011e4c:	c1 e8 05             	shr    eax,0x5
c0011e4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e52:	e8 e9 d9 ff ff       	call   c000f840 <malloc>
c0011e57:	83 c4 0c             	add    esp,0xc
c0011e5a:	89 c1                	mov    ecx,eax
c0011e5c:	a3 a8 e6 02 c0       	mov    ds:0xc002e6a8,eax
c0011e61:	31 d2                	xor    edx,edx
c0011e63:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011e68:	f7 35 cc d4 02 c0    	div    DWORD PTR ds:0xc002d4cc
c0011e6e:	c1 e8 05             	shr    eax,0x5
c0011e71:	50                   	push   eax
c0011e72:	6a 00                	push   0x0
c0011e74:	51                   	push   ecx
c0011e75:	e8 fe e8 fe ff       	call   c0000778 <memset>
c0011e7a:	83 c4 1c             	add    esp,0x1c
c0011e7d:	c3                   	ret    

c0011e7e <Virt::getAKernelVAS()>:
c0011e7e:	a1 ac e6 02 c0       	mov    eax,ds:0xc002e6ac
c0011e83:	c3                   	ret    

c0011e84 <Virt::setupPageSwapping(int)>:
c0011e84:	57                   	push   edi
c0011e85:	56                   	push   esi
c0011e86:	53                   	push   ebx
c0011e87:	83 ec 1c             	sub    esp,0x1c
c0011e8a:	68 14 01 00 00       	push   0x114
c0011e8f:	e8 ac d9 ff ff       	call   c000f840 <malloc>
c0011e94:	83 c4 0c             	add    esp,0xc
c0011e97:	89 c6                	mov    esi,eax
c0011e99:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c0011e9f:	68 75 a8 02 c0       	push   0xc002a875
c0011ea4:	50                   	push   eax
c0011ea5:	e8 98 16 00 00       	call   c0013542 <File::File(char const*, Process*)>
c0011eaa:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ead:	e8 6c 18 00 00       	call   c001371e <File::unlink()>
c0011eb2:	58                   	pop    eax
c0011eb3:	5a                   	pop    edx
c0011eb4:	6a 12                	push   0x12
c0011eb6:	56                   	push   esi
c0011eb7:	e8 ea 16 00 00       	call   c00135a6 <File::open(FileOpenMode)>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	85 c0                	test   eax,eax
c0011ec1:	0f 85 ca 00 00 00    	jne    c0011f91 <Virt::setupPageSwapping(int)+0x10d>
c0011ec7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ecb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ed3:	c1 e3 08             	shl    ebx,0x8
c0011ed6:	83 ec 0c             	sub    esp,0xc
c0011ed9:	68 00 00 01 00       	push   0x10000
c0011ede:	e8 5d d9 ff ff       	call   c000f840 <malloc>
c0011ee3:	83 c4 0c             	add    esp,0xc
c0011ee6:	89 c7                	mov    edi,eax
c0011ee8:	68 00 00 01 00       	push   0x10000
c0011eed:	6a 00                	push   0x0
c0011eef:	50                   	push   eax
c0011ef0:	e8 83 e8 fe ff       	call   c0000778 <memset>
c0011ef5:	83 c4 10             	add    esp,0x10
c0011ef8:	85 db                	test   ebx,ebx
c0011efa:	79 03                	jns    c0011eff <Virt::setupPageSwapping(int)+0x7b>
c0011efc:	83 c3 0f             	add    ebx,0xf
c0011eff:	c1 fb 04             	sar    ebx,0x4
c0011f02:	4b                   	dec    ebx
c0011f03:	83 fb ff             	cmp    ebx,0xffffffff
c0011f06:	74 4b                	je     c0011f53 <Virt::setupPageSwapping(int)+0xcf>
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f0d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f11:	52                   	push   edx
c0011f12:	57                   	push   edi
c0011f13:	6a 00                	push   0x0
c0011f15:	68 00 00 01 00       	push   0x10000
c0011f1a:	56                   	push   esi
c0011f1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f1e:	83 c4 20             	add    esp,0x20
c0011f21:	85 c0                	test   eax,eax
c0011f23:	75 59                	jne    c0011f7e <Virt::setupPageSwapping(int)+0xfa>
c0011f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f29:	3d 00 00 01 00       	cmp    eax,0x10000
c0011f2e:	74 d2                	je     c0011f02 <Virt::setupPageSwapping(int)+0x7e>
c0011f30:	83 ec 08             	sub    esp,0x8
c0011f33:	4b                   	dec    ebx
c0011f34:	50                   	push   eax
c0011f35:	68 c8 a8 02 c0       	push   0xc002a8c8
c0011f3a:	e8 ab 10 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011f3f:	c7 04 24 d1 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8d1
c0011f46:	e8 50 87 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	83 fb ff             	cmp    ebx,0xffffffff
c0011f51:	75 b5                	jne    c0011f08 <Virt::setupPageSwapping(int)+0x84>
c0011f53:	83 ec 0c             	sub    esp,0xc
c0011f56:	56                   	push   esi
c0011f57:	e8 a8 16 00 00       	call   c0013604 <File::close()>
c0011f5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f5f:	e8 fc d8 ff ff       	call   c000f860 <rfree>
c0011f64:	83 c4 10             	add    esp,0x10
c0011f67:	85 f6                	test   esi,esi
c0011f69:	74 0c                	je     c0011f77 <Virt::setupPageSwapping(int)+0xf3>
c0011f6b:	83 ec 0c             	sub    esp,0xc
c0011f6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f70:	56                   	push   esi
c0011f71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f74:	83 c4 10             	add    esp,0x10
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	5b                   	pop    ebx
c0011f7b:	5e                   	pop    esi
c0011f7c:	5f                   	pop    edi
c0011f7d:	c3                   	ret    
c0011f7e:	83 ec 08             	sub    esp,0x8
c0011f81:	50                   	push   eax
c0011f82:	68 b0 a8 02 c0       	push   0xc002a8b0
c0011f87:	e8 5e 10 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	eb 94                	jmp    c0011f25 <Virt::setupPageSwapping(int)+0xa1>
c0011f91:	83 ec 08             	sub    esp,0x8
c0011f94:	50                   	push   eax
c0011f95:	68 8c a8 02 c0       	push   0xc002a88c
c0011f9a:	e8 4b 10 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011f9f:	c7 04 24 95 a8 02 c0 	mov    DWORD PTR [esp],0xc002a895
c0011fa6:	e8 f0 86 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011fab:	83 c4 10             	add    esp,0x10
c0011fae:	e9 14 ff ff ff       	jmp    c0011ec7 <Virt::setupPageSwapping(int)+0x43>
c0011fb3:	90                   	nop

c0011fb4 <VAS::VAS()>:
c0011fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc3:	a3 ac e6 02 c0       	mov    ds:0xc002e6ac,eax
c0011fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fcc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011fd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fdb:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fe2:	90                   	nop
c0011fe3:	c3                   	ret    

c0011fe4 <VAS::VAS(VAS*)>:
c0011fe4:	83 ec 0c             	sub    esp,0xc
c0011fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011feb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ff2:	83 ec 0c             	sub    esp,0xc
c0011ff5:	68 74 a6 02 c0       	push   0xc002a674
c0011ffa:	e8 9c 86 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	90                   	nop
c0012003:	83 c4 0c             	add    esp,0xc
c0012006:	c3                   	ret    
c0012007:	90                   	nop

c0012008 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001200c:	89 c2                	mov    edx,eax
c001200e:	c1 e8 0a             	shr    eax,0xa
c0012011:	c1 ea 16             	shr    edx,0x16
c0012014:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012019:	19 c9                	sbb    ecx,ecx
c001201b:	c1 e2 0c             	shl    edx,0xc
c001201e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012024:	25 fc 0f 00 00       	and    eax,0xffc
c0012029:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012030:	01 d0                	add    eax,edx
c0012032:	c3                   	ret    
c0012033:	90                   	nop

c0012034 <VAS::getPageTableEntry(unsigned long)>:
c0012034:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012038:	89 ca                	mov    edx,ecx
c001203a:	c1 e9 0a             	shr    ecx,0xa
c001203d:	c1 ea 16             	shr    edx,0x16
c0012040:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012046:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001204c:	c1 e0 0c             	shl    eax,0xc
c001204f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012052:	c3                   	ret    

c0012053 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012053:	57                   	push   edi
c0012054:	56                   	push   esi
c0012055:	be 01 00 00 00       	mov    esi,0x1
c001205a:	53                   	push   ebx
c001205b:	83 ec 10             	sub    esp,0x10
c001205e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012062:	c1 eb 0c             	shr    ebx,0xc
c0012065:	eb 3f                	jmp    c00120a6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012067:	e8 12 fe ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001206c:	83 ec 08             	sub    esp,0x8
c001206f:	57                   	push   edi
c0012070:	50                   	push   eax
c0012071:	e8 be ff ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	8b 00                	mov    eax,DWORD PTR [eax]
c001207b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001207f:	f6 c4 04             	test   ah,0x4
c0012082:	75 5f                	jne    c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012084:	80 fa 04             	cmp    dl,0x4
c0012087:	74 78                	je     c0012101 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012089:	80 fa 02             	cmp    dl,0x2
c001208c:	0f 84 88 00 00 00    	je     c001211a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012092:	80 fa 03             	cmp    dl,0x3
c0012095:	0f 84 ad 00 00 00    	je     c0012148 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001209b:	fe ca                	dec    dl
c001209d:	0f 84 92 00 00 00    	je     c0012135 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120a3:	43                   	inc    ebx
c00120a4:	31 f6                	xor    esi,esi
c00120a6:	53                   	push   ebx
c00120a7:	e8 13 fb ff ff       	call   c0011bbf <Virt::getPageState(unsigned long)>
c00120ac:	5f                   	pop    edi
c00120ad:	89 df                	mov    edi,ebx
c00120af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00120b3:	c1 e7 0c             	shl    edi,0xc
c00120b6:	84 c0                	test   al,al
c00120b8:	75 ad                	jne    c0012067 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00120ba:	83 ec 0c             	sub    esp,0xc
c00120bd:	68 d7 a8 02 c0       	push   0xc002a8d7
c00120c2:	e8 d4 85 00 00       	call   c001a69b <Krnl::panic(char const*)>
c00120c7:	e8 b2 fd ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c00120cc:	5a                   	pop    edx
c00120cd:	59                   	pop    ecx
c00120ce:	57                   	push   edi
c00120cf:	50                   	push   eax
c00120d0:	e8 5f ff ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120da:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120de:	f6 c4 04             	test   ah,0x4
c00120e1:	74 c0                	je     c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ec:	83 ec 0c             	sub    esp,0xc
c00120ef:	50                   	push   eax
c00120f0:	e8 63 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120fc:	80 fa 04             	cmp    dl,0x4
c00120ff:	75 88                	jne    c0012089 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012101:	89 f0                	mov    eax,esi
c0012103:	84 c0                	test   al,al
c0012105:	75 47                	jne    c001214e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012107:	c7 44 24 20 98 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a698
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	5b                   	pop    ebx
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	e9 81 85 00 00       	jmp    c001a69b <Krnl::panic(char const*)>
c001211a:	89 f0                	mov    eax,esi
c001211c:	84 c0                	test   al,al
c001211e:	75 15                	jne    c0012135 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012120:	83 ec 0c             	sub    esp,0xc
c0012123:	68 f3 a8 02 c0       	push   0xc002a8f3
c0012128:	e8 6e 85 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	e9 6e ff ff ff       	jmp    c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012135:	83 ec 08             	sub    esp,0x8
c0012138:	6a 00                	push   0x0
c001213a:	53                   	push   ebx
c001213b:	e8 4a fa ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	e9 5b ff ff ff       	jmp    c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012148:	89 f0                	mov    eax,esi
c001214a:	84 c0                	test   al,al
c001214c:	75 15                	jne    c0012163 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001214e:	83 ec 08             	sub    esp,0x8
c0012151:	6a 00                	push   0x0
c0012153:	53                   	push   ebx
c0012154:	e8 31 fa ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	83 c4 10             	add    esp,0x10
c001215f:	5b                   	pop    ebx
c0012160:	5e                   	pop    esi
c0012161:	5f                   	pop    edi
c0012162:	c3                   	ret    
c0012163:	c7 44 24 20 0f a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a90f
c001216b:	83 c4 10             	add    esp,0x10
c001216e:	5b                   	pop    ebx
c001216f:	5e                   	pop    esi
c0012170:	5f                   	pop    edi
c0012171:	e9 25 85 00 00       	jmp    c001a69b <Krnl::panic(char const*)>

c0012176 <VAS::freeAllocatedPages(unsigned long)>:
c0012176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001217a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001217e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012182:	74 09                	je     c001218d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012184:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012188:	e9 c6 fe ff ff       	jmp    c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001218d:	c7 44 24 04 bc a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6bc
c0012195:	e9 50 0e 00 00       	jmp    c0012fea <Dbg::kprintf(char const*, ...)>

c001219a <VAS::virtualToPhysical(unsigned long)>:
c001219a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001219e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00121a2:	e8 8d fe ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c00121a7:	5a                   	pop    edx
c00121a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121aa:	59                   	pop    ecx
c00121ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b0:	c3                   	ret    
c00121b1:	90                   	nop

c00121b2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00121b2:	55                   	push   ebp
c00121b3:	57                   	push   edi
c00121b4:	56                   	push   esi
c00121b5:	53                   	push   ebx
c00121b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00121ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00121be:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00121c2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00121c6:	85 db                	test   ebx,ebx
c00121c8:	7e 22                	jle    c00121ec <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00121ca:	c1 e3 0c             	shl    ebx,0xc
c00121cd:	01 f3                	add    ebx,esi
c00121cf:	56                   	push   esi
c00121d0:	81 c6 00 10 00 00    	add    esi,0x1000
c00121d6:	55                   	push   ebp
c00121d7:	e8 58 fe ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c00121dc:	5a                   	pop    edx
c00121dd:	59                   	pop    ecx
c00121de:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121e0:	21 f9                	and    ecx,edi
c00121e2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121e6:	39 f3                	cmp    ebx,esi
c00121e8:	89 08                	mov    DWORD PTR [eax],ecx
c00121ea:	75 e3                	jne    c00121cf <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ec:	5b                   	pop    ebx
c00121ed:	5e                   	pop    esi
c00121ee:	5f                   	pop    edi
c00121ef:	5d                   	pop    ebp
c00121f0:	c3                   	ret    
c00121f1:	90                   	nop

c00121f2 <VAS::setToWriteCombining(unsigned long, int)>:
c00121f2:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00121f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121fd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012204:	75 01                	jne    c0012207 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012206:	c3                   	ret    
c0012207:	68 80 00 00 00       	push   0x80
c001220c:	6a ff                	push   0xffffffff
c001220e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001221a:	e8 93 ff ff ff       	call   c00121b2 <VAS::reflagRange(unsigned long, int, int, int)>
c001221f:	83 c4 14             	add    esp,0x14
c0012222:	c3                   	ret    
c0012223:	90                   	nop

c0012224 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012224:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012229:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001222d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012234:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012237:	19 c0                	sbb    eax,eax
c0012239:	83 ca 03             	or     edx,0x3
c001223c:	83 e0 fc             	and    eax,0xfffffffc
c001223f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012246:	0f 20 d8             	mov    eax,cr3
c0012249:	0f 22 d8             	mov    cr3,eax
c001224c:	c3                   	ret    
c001224d:	90                   	nop

c001224e <VAS::~VAS()>:
c001224e:	83 ec 2c             	sub    esp,0x2c
c0012251:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012259:	e8 18 bc 00 00       	call   c001de76 <lockScheduler()>
c001225e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012263:	8b 00                	mov    eax,DWORD PTR [eax]
c0012265:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012268:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001226e:	83 ec 04             	sub    esp,0x4
c0012271:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012275:	6a 01                	push   0x1
c0012277:	50                   	push   eax
c0012278:	e8 a7 ff ff ff       	call   c0012224 <VAS::mapOtherVASIn(bool, VAS*)>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012288:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012290:	0f 8f d7 00 00 00    	jg     c001236d <VAS::~VAS()+0x11f>
c0012296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001229d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a1:	c1 e2 02             	shl    edx,0x2
c00122a4:	01 d0                	add    eax,edx
c00122a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122b0:	83 e0 01             	and    eax,0x1
c00122b3:	0f 84 ab 00 00 00    	je     c0012364 <VAS::~VAS()+0x116>
c00122b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00122c1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00122c9:	7f 75                	jg     c0012340 <VAS::~VAS()+0xf2>
c00122cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122cf:	c1 e0 0a             	shl    eax,0xa
c00122d2:	89 c2                	mov    edx,eax
c00122d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d8:	01 d0                	add    eax,edx
c00122da:	c1 e0 0c             	shl    eax,0xc
c00122dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122eb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122f1:	83 ec 04             	sub    esp,0x4
c00122f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122f8:	6a 01                	push   0x1
c00122fa:	50                   	push   eax
c00122fb:	e8 08 fd ff ff       	call   c0012008 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012307:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001230b:	8b 00                	mov    eax,DWORD PTR [eax]
c001230d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012315:	25 01 04 00 00       	and    eax,0x401
c001231a:	3d 01 04 00 00       	cmp    eax,0x401
c001231f:	75 19                	jne    c001233a <VAS::~VAS()+0xec>
c0012321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012325:	25 00 f0 ff ff       	and    eax,0xfffff000
c001232a:	83 ec 0c             	sub    esp,0xc
c001232d:	50                   	push   eax
c001232e:	e8 25 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001233e:	eb 81                	jmp    c00122c1 <VAS::~VAS()+0x73>
c0012340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012344:	25 00 04 00 00       	and    eax,0x400
c0012349:	74 19                	je     c0012364 <VAS::~VAS()+0x116>
c001234b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	50                   	push   eax
c0012358:	e8 fb da ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012364:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012368:	e9 1b ff ff ff       	jmp    c0012288 <VAS::~VAS()+0x3a>
c001236d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012371:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012374:	83 ec 0c             	sub    esp,0xc
c0012377:	50                   	push   eax
c0012378:	e8 d6 fc ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012384:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012387:	83 ec 0c             	sub    esp,0xc
c001238a:	50                   	push   eax
c001238b:	e8 c8 da ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001239b:	c1 e0 02             	shl    eax,0x2
c001239e:	83 ec 08             	sub    esp,0x8
c00123a1:	50                   	push   eax
c00123a2:	68 e0 a6 02 c0       	push   0xc002a6e0
c00123a7:	e8 3e 0c 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	e8 c4 ba 00 00       	call   c001de78 <unlockScheduler()>
c00123b4:	90                   	nop
c00123b5:	83 c4 2c             	add    esp,0x2c
c00123b8:	c3                   	ret    
c00123b9:	90                   	nop

c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>:
c00123ba:	55                   	push   ebp
c00123bb:	57                   	push   edi
c00123bc:	56                   	push   esi
c00123bd:	53                   	push   ebx
c00123be:	83 ec 1c             	sub    esp,0x1c
c00123c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00123c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123c9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00123cf:	77 08                	ja     c00123d9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00123d1:	0f 20 d8             	mov    eax,cr3
c00123d4:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00123d7:	75 47                	jne    c0012420 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00123d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dd:	09 d8                	or     eax,ebx
c00123df:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e4:	75 57                	jne    c001243d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123e6:	89 de                	mov    esi,ebx
c00123e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123eb:	c1 ee 16             	shr    esi,0x16
c00123ee:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123f5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123f9:	74 54                	je     c001244f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123ff:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012405:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012409:	c1 e6 0c             	shl    esi,0xc
c001240c:	c1 eb 0a             	shr    ebx,0xa
c001240f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012415:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012418:	83 c4 1c             	add    esp,0x1c
c001241b:	5b                   	pop    ebx
c001241c:	5e                   	pop    esi
c001241d:	5f                   	pop    edi
c001241e:	5d                   	pop    ebp
c001241f:	c3                   	ret    
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	68 00 a7 02 c0       	push   0xc002a700
c0012428:	e8 bd 0b 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012434:	09 d8                	or     eax,ebx
c0012436:	a9 ff 0f 00 00       	test   eax,0xfff
c001243b:	74 a9                	je     c00123e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001243d:	83 ec 0c             	sub    esp,0xc
c0012440:	68 68 a7 02 c0       	push   0xc002a768
c0012445:	e8 51 82 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	eb 97                	jmp    c00123e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001244f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012453:	e8 a9 da ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012458:	89 c5                	mov    ebp,eax
c001245a:	e8 1f fa ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001245f:	83 ec 0c             	sub    esp,0xc
c0012462:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012466:	6a 01                	push   0x1
c0012468:	e8 76 f7 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c001246d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012474:	6a 01                	push   0x1
c0012476:	50                   	push   eax
c0012477:	55                   	push   ebp
c0012478:	81 cd 07 04 00 00    	or     ebp,0x407
c001247e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012482:	51                   	push   ecx
c0012483:	e8 26 02 00 00       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012488:	83 c4 1c             	add    esp,0x1c
c001248b:	68 00 10 00 00       	push   0x1000
c0012490:	6a 00                	push   0x0
c0012492:	50                   	push   eax
c0012493:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012497:	e8 dc e2 fe ff       	call   c0000778 <memset>
c001249c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00124a0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00124a3:	e8 ab fb ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c00124a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124ac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00124b5:	e9 41 ff ff ff       	jmp    c00123fb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00124ba <VAS::allocatePages(int, int)>:
c00124ba:	55                   	push   ebp
c00124bb:	57                   	push   edi
c00124bc:	56                   	push   esi
c00124bd:	53                   	push   ebx
c00124be:	83 ec 1c             	sub    esp,0x1c
c00124c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124c5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00124ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124d6:	83 e0 01             	and    eax,0x1
c00124d9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00124dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124e1:	0f 85 cc 00 00 00    	jne    c00125b3 <VAS::allocatePages(int, int)+0xf9>
c00124e7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124ee:	85 c0                	test   eax,eax
c00124f0:	0f 84 a1 00 00 00    	je     c0012597 <VAS::allocatePages(int, int)+0xdd>
c00124f6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124fe:	c1 e6 0c             	shl    esi,0xc
c0012501:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012505:	85 c0                	test   eax,eax
c0012507:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001250a:	7e 33                	jle    c001253f <VAS::allocatePages(int, int)+0x85>
c001250c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012510:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012514:	81 cd 00 04 00 00    	or     ebp,0x400
c001251a:	e8 e2 d9 ff ff       	call   c000ff01 <Phys::allocatePage()>
c001251f:	55                   	push   ebp
c0012520:	53                   	push   ebx
c0012521:	50                   	push   eax
c0012522:	57                   	push   edi
c0012523:	e8 92 fe ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012530:	74 03                	je     c0012535 <VAS::allocatePages(int, int)+0x7b>
c0012532:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012535:	81 c3 00 10 00 00    	add    ebx,0x1000
c001253b:	39 de                	cmp    esi,ebx
c001253d:	75 db                	jne    c001251a <VAS::allocatePages(int, int)+0x60>
c001253f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012544:	75 12                	jne    c0012558 <VAS::allocatePages(int, int)+0x9e>
c0012546:	0f 20 d8             	mov    eax,cr3
c0012549:	0f 22 d8             	mov    cr3,eax
c001254c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012550:	83 c4 1c             	add    esp,0x1c
c0012553:	5b                   	pop    ebx
c0012554:	5e                   	pop    esi
c0012555:	5f                   	pop    edi
c0012556:	5d                   	pop    ebp
c0012557:	c3                   	ret    
c0012558:	c1 ee 0a             	shr    esi,0xa
c001255b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001255f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012565:	c1 eb 0a             	shr    ebx,0xa
c0012568:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001256e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012574:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001257a:	39 c3                	cmp    ebx,eax
c001257c:	77 ce                	ja     c001254c <VAS::allocatePages(int, int)+0x92>
c001257e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012587:	39 d8                	cmp    eax,ebx
c0012589:	73 f3                	jae    c001257e <VAS::allocatePages(int, int)+0xc4>
c001258b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001258f:	83 c4 1c             	add    esp,0x1c
c0012592:	5b                   	pop    ebx
c0012593:	5e                   	pop    esi
c0012594:	5f                   	pop    edi
c0012595:	5d                   	pop    ebp
c0012596:	c3                   	ret    
c0012597:	83 ec 0c             	sub    esp,0xc
c001259a:	68 8c a7 02 c0       	push   0xc002a78c
c001259f:	e8 f7 80 00 00       	call   c001a69b <Krnl::panic(char const*)>
c00125a4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00125a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125ab:	83 c4 10             	add    esp,0x10
c00125ae:	e9 43 ff ff ff       	jmp    c00124f6 <VAS::allocatePages(int, int)+0x3c>
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125ba:	e8 24 f6 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c00125bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00125cb:	0f 87 9b 00 00 00    	ja     c001266c <VAS::allocatePages(int, int)+0x1b2>
c00125d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125d5:	85 d2                	test   edx,edx
c00125d7:	7e 3c                	jle    c0012615 <VAS::allocatePages(int, int)+0x15b>
c00125d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125dd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125e5:	c1 e5 0c             	shl    ebp,0xc
c00125e8:	81 ce 00 04 00 00    	or     esi,0x400
c00125ee:	01 dd                	add    ebp,ebx
c00125f0:	e8 0c d9 ff ff       	call   c000ff01 <Phys::allocatePage()>
c00125f5:	56                   	push   esi
c00125f6:	53                   	push   ebx
c00125f7:	50                   	push   eax
c00125f8:	57                   	push   edi
c00125f9:	e8 bc fd ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012606:	74 03                	je     c001260b <VAS::allocatePages(int, int)+0x151>
c0012608:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012611:	39 dd                	cmp    ebp,ebx
c0012613:	75 db                	jne    c00125f0 <VAS::allocatePages(int, int)+0x136>
c0012615:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001261a:	0f 84 26 ff ff ff    	je     c0012546 <VAS::allocatePages(int, int)+0x8c>
c0012620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012624:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012628:	89 d3                	mov    ebx,edx
c001262a:	c1 e0 0c             	shl    eax,0xc
c001262d:	c1 eb 0a             	shr    ebx,0xa
c0012630:	01 d0                	add    eax,edx
c0012632:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012638:	c1 e8 0a             	shr    eax,0xa
c001263b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012641:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012646:	2d 00 00 40 00       	sub    eax,0x400000
c001264b:	39 c3                	cmp    ebx,eax
c001264d:	0f 87 f9 fe ff ff    	ja     c001254c <VAS::allocatePages(int, int)+0x92>
c0012653:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012656:	81 c3 00 10 00 00    	add    ebx,0x1000
c001265c:	39 d8                	cmp    eax,ebx
c001265e:	73 f3                	jae    c0012653 <VAS::allocatePages(int, int)+0x199>
c0012660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012664:	83 c4 1c             	add    esp,0x1c
c0012667:	5b                   	pop    ebx
c0012668:	5e                   	pop    esi
c0012669:	5f                   	pop    edi
c001266a:	5d                   	pop    ebp
c001266b:	c3                   	ret    
c001266c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012671:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012677:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001267e:	0f 84 4d ff ff ff    	je     c00125d1 <VAS::allocatePages(int, int)+0x117>
c0012684:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001268c:	e9 40 ff ff ff       	jmp    c00125d1 <VAS::allocatePages(int, int)+0x117>
c0012691:	90                   	nop

c0012692 <VAS::setCPUSpecific(unsigned long)>:
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	6a 05                	push   0x5
c0012697:	68 00 00 40 c2       	push   0xc2400000
c001269c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a4:	e8 11 fd ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 1c             	add    esp,0x1c
c00126ac:	c3                   	ret    
c00126ad:	90                   	nop

c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00126ae:	55                   	push   ebp
c00126af:	57                   	push   edi
c00126b0:	56                   	push   esi
c00126b1:	53                   	push   ebx
c00126b2:	83 ec 1c             	sub    esp,0x1c
c00126b5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00126ba:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126c4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00126c8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00126ce:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00126d2:	83 e0 01             	and    eax,0x1
c00126d5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00126d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126dd:	85 c0                	test   eax,eax
c00126df:	7e 39                	jle    c001271a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126e5:	89 f3                	mov    ebx,esi
c00126e7:	c1 e0 0c             	shl    eax,0xc
c00126ea:	01 f0                	add    eax,esi
c00126ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126f0:	55                   	push   ebp
c00126f1:	53                   	push   ebx
c00126f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f6:	29 f0                	sub    eax,esi
c00126f8:	01 d8                	add    eax,ebx
c00126fa:	50                   	push   eax
c00126fb:	57                   	push   edi
c00126fc:	e8 b9 fc ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012709:	74 03                	je     c001270e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001270b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001270e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012714:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012718:	75 d6                	jne    c00126f0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001271a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001271f:	75 10                	jne    c0012731 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012721:	0f 20 d8             	mov    eax,cr3
c0012724:	0f 22 d8             	mov    cr3,eax
c0012727:	83 c4 1c             	add    esp,0x1c
c001272a:	89 f0                	mov    eax,esi
c001272c:	5b                   	pop    ebx
c001272d:	5e                   	pop    esi
c001272e:	5f                   	pop    edi
c001272f:	5d                   	pop    ebp
c0012730:	c3                   	ret    
c0012731:	89 f3                	mov    ebx,esi
c0012733:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012737:	c1 eb 0a             	shr    ebx,0xa
c001273a:	c1 e0 0c             	shl    eax,0xc
c001273d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012743:	01 f0                	add    eax,esi
c0012745:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001274b:	c1 e8 0a             	shr    eax,0xa
c001274e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012753:	2d 00 00 40 00       	sub    eax,0x400000
c0012758:	39 c3                	cmp    ebx,eax
c001275a:	77 cb                	ja     c0012727 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001275c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001275f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012765:	39 d8                	cmp    eax,ebx
c0012767:	73 f3                	jae    c001275c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012769:	83 c4 1c             	add    esp,0x1c
c001276c:	89 f0                	mov    eax,esi
c001276e:	5b                   	pop    ebx
c001276f:	5e                   	pop    esi
c0012770:	5f                   	pop    edi
c0012771:	5d                   	pop    ebp
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012774:	55                   	push   ebp
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	83 ec 1c             	sub    esp,0x1c
c001277b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001277f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012783:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012787:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001278b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012790:	75 4a                	jne    c00127dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012792:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012796:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012799:	c1 eb 16             	shr    ebx,0x16
c001279c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00127a3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00127a7:	74 4d                	je     c00127f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00127a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00127ad:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00127b1:	c1 e8 0a             	shr    eax,0xa
c00127b4:	80 fa 01             	cmp    dl,0x1
c00127b7:	19 d2                	sbb    edx,edx
c00127b9:	c1 e3 0c             	shl    ebx,0xc
c00127bc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00127c0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00127c6:	25 fc 0f 00 00       	and    eax,0xffc
c00127cb:	01 d8                	add    eax,ebx
c00127cd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00127d4:	83 c4 1c             	add    esp,0x1c
c00127d7:	5b                   	pop    ebx
c00127d8:	5e                   	pop    esi
c00127d9:	5f                   	pop    edi
c00127da:	5d                   	pop    ebp
c00127db:	c3                   	ret    
c00127dc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	68 b8 a7 02 c0       	push   0xc002a7b8
c00127e8:	e8 ae 7e 00 00       	call   c001a69b <Krnl::panic(char const*)>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127f4:	eb 9c                	jmp    c0012792 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127fa:	e8 02 d7 ff ff       	call   c000ff01 <Phys::allocatePage()>
c00127ff:	89 c5                	mov    ebp,eax
c0012801:	e8 78 f6 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0012806:	83 ec 0c             	sub    esp,0xc
c0012809:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001280d:	6a 01                	push   0x1
c001280f:	e8 cf f3 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0012814:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001281b:	6a 01                	push   0x1
c001281d:	50                   	push   eax
c001281e:	55                   	push   ebp
c001281f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012825:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012829:	51                   	push   ecx
c001282a:	e8 7f fe ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001282f:	83 c4 1c             	add    esp,0x1c
c0012832:	68 00 10 00 00       	push   0x1000
c0012837:	6a 00                	push   0x0
c0012839:	50                   	push   eax
c001283a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001283e:	e8 35 df fe ff       	call   c0000778 <memset>
c0012843:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012847:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001284a:	e8 04 f8 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001284f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012852:	83 c4 10             	add    esp,0x10
c0012855:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012858:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001285c:	e9 48 ff ff ff       	jmp    c00127a9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012861:	90                   	nop

c0012862 <VAS::VAS(bool)>:
c0012862:	53                   	push   ebx
c0012863:	83 ec 28             	sub    esp,0x28
c0012866:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001286a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001286e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012872:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001287d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012881:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012884:	e8 78 d6 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012889:	89 c2                	mov    edx,eax
c001288b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001288f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012892:	e8 e7 f5 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0012897:	89 c3                	mov    ebx,eax
c0012899:	83 ec 0c             	sub    esp,0xc
c001289c:	6a 01                	push   0x1
c001289e:	e8 40 f3 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	89 c2                	mov    edx,eax
c00128a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128af:	83 ec 0c             	sub    esp,0xc
c00128b2:	6a 03                	push   0x3
c00128b4:	6a 01                	push   0x1
c00128b6:	52                   	push   edx
c00128b7:	50                   	push   eax
c00128b8:	53                   	push   ebx
c00128b9:	e8 f0 fd ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00128be:	83 c4 20             	add    esp,0x20
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00128ca:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00128d2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00128da:	7f 1c                	jg     c00128f8 <VAS::VAS(bool)+0x96>
c00128dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128e7:	c1 e2 02             	shl    edx,0x2
c00128ea:	01 d0                	add    eax,edx
c00128ec:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128f6:	eb da                	jmp    c00128d2 <VAS::VAS(bool)+0x70>
c00128f8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012900:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012908:	7f 7a                	jg     c0012984 <VAS::VAS(bool)+0x122>
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	2d 00 02 00 00       	sub    eax,0x200
c0012913:	c1 e0 0c             	shl    eax,0xc
c0012916:	83 c8 03             	or     eax,0x3
c0012919:	89 c2                	mov    edx,eax
c001291b:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012926:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001292c:	83 e0 10             	and    eax,0x10
c001292f:	84 c0                	test   al,al
c0012931:	74 07                	je     c001293a <VAS::VAS(bool)+0xd8>
c0012933:	b8 00 01 00 00       	mov    eax,0x100
c0012938:	eb 05                	jmp    c001293f <VAS::VAS(bool)+0xdd>
c001293a:	b8 00 00 00 00       	mov    eax,0x0
c001293f:	09 d0                	or     eax,edx
c0012941:	89 c1                	mov    ecx,eax
c0012943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001294a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001294e:	c1 e2 02             	shl    edx,0x2
c0012951:	01 d0                	add    eax,edx
c0012953:	89 ca                	mov    edx,ecx
c0012955:	89 10                	mov    DWORD PTR [eax],edx
c0012957:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001295b:	2d 40 03 00 00       	sub    eax,0x340
c0012960:	83 f8 7f             	cmp    eax,0x7f
c0012963:	77 16                	ja     c001297b <VAS::VAS(bool)+0x119>
c0012965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012969:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001296c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012970:	c1 e2 02             	shl    edx,0x2
c0012973:	01 d0                	add    eax,edx
c0012975:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001297b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001297f:	e9 7c ff ff ff       	jmp    c0012900 <VAS::VAS(bool)+0x9e>
c0012984:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012989:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001298f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012995:	83 e0 10             	and    eax,0x10
c0012998:	84 c0                	test   al,al
c001299a:	74 07                	je     c00129a3 <VAS::VAS(bool)+0x141>
c001299c:	b8 03 41 00 00       	mov    eax,0x4103
c00129a1:	eb 05                	jmp    c00129a8 <VAS::VAS(bool)+0x146>
c00129a3:	b8 03 40 00 00       	mov    eax,0x4003
c00129a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00129ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00129af:	81 c2 20 0c 00 00    	add    edx,0xc20
c00129b5:	89 02                	mov    DWORD PTR [edx],eax
c00129b7:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00129bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00129c8:	83 ec 08             	sub    esp,0x8
c00129cb:	50                   	push   eax
c00129cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129d0:	e8 bd fc ff ff       	call   c0012692 <VAS::setCPUSpecific(unsigned long)>
c00129d5:	83 c4 10             	add    esp,0x10
c00129d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129dc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129df:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00129e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129f0:	83 e0 10             	and    eax,0x10
c00129f3:	84 c0                	test   al,al
c00129f5:	74 07                	je     c00129fe <VAS::VAS(bool)+0x19c>
c00129f7:	b8 00 01 00 00       	mov    eax,0x100
c00129fc:	eb 05                	jmp    c0012a03 <VAS::VAS(bool)+0x1a1>
c00129fe:	b8 00 00 00 00       	mov    eax,0x0
c0012a03:	09 c2                	or     edx,eax
c0012a05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a0c:	05 fc 0f 00 00       	add    eax,0xffc
c0012a11:	83 ca 03             	or     edx,0x3
c0012a14:	89 10                	mov    DWORD PTR [eax],edx
c0012a16:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012a1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a21:	83 ec 0c             	sub    esp,0xc
c0012a24:	50                   	push   eax
c0012a25:	e8 d2 1c 00 00       	call   c00146fc <Device::getName()>
c0012a2a:	83 c4 10             	add    esp,0x10
c0012a2d:	83 ec 08             	sub    esp,0x8
c0012a30:	68 29 a9 02 c0       	push   0xc002a929
c0012a35:	50                   	push   eax
c0012a36:	e8 85 de fe ff       	call   c00008c0 <strcmp>
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	85 c0                	test   eax,eax
c0012a40:	0f 94 c0             	sete   al
c0012a43:	84 c0                	test   al,al
c0012a45:	74 70                	je     c0012ab7 <VAS::VAS(bool)+0x255>
c0012a47:	e8 0d b4 00 00       	call   c001de59 <disableIRQs()>
c0012a4c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012a51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a57:	05 7c 09 00 00       	add    eax,0x97c
c0012a5c:	83 ec 0c             	sub    esp,0xc
c0012a5f:	50                   	push   eax
c0012a60:	e8 57 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a65:	83 c4 10             	add    esp,0x10
c0012a68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a6d:	89 c3                	mov    ebx,eax
c0012a6f:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012a74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a7a:	05 7c 09 00 00       	add    eax,0x97c
c0012a7f:	83 ec 0c             	sub    esp,0xc
c0012a82:	50                   	push   eax
c0012a83:	e8 34 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	83 ec 08             	sub    esp,0x8
c0012a8e:	50                   	push   eax
c0012a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a93:	e8 9c f5 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012aa2:	6a 11                	push   0x11
c0012aa4:	53                   	push   ebx
c0012aa5:	50                   	push   eax
c0012aa6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012aaa:	e8 0b f9 ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0012aaf:	83 c4 10             	add    esp,0x10
c0012ab2:	e8 b0 b3 00 00       	call   c001de67 <enableIRQs()>
c0012ab7:	90                   	nop
c0012ab8:	83 c4 28             	add    esp,0x28
c0012abb:	5b                   	pop    ebx
c0012abc:	c3                   	ret    
c0012abd:	90                   	nop

c0012abe <VAS::evict(unsigned long)>:
c0012abe:	55                   	push   ebp
c0012abf:	57                   	push   edi
c0012ac0:	56                   	push   esi
c0012ac1:	53                   	push   ebx
c0012ac2:	83 ec 1c             	sub    esp,0x1c
c0012ac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012acd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ad1:	e8 a0 b3 00 00       	call   c001de76 <lockScheduler()>
c0012ad6:	83 ec 08             	sub    esp,0x8
c0012ad9:	55                   	push   ebp
c0012ada:	68 dc a7 02 c0       	push   0xc002a7dc
c0012adf:	e8 06 05 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ae4:	e8 3b f2 ff ff       	call   c0011d24 <Virt::allocateSwapfilePage()>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	89 c7                	mov    edi,eax
c0012aee:	a1 cc d4 02 c0       	mov    eax,ds:0xc002d4cc
c0012af3:	85 c0                	test   eax,eax
c0012af5:	7e 3d                	jle    c0012b34 <VAS::evict(unsigned long)+0x76>
c0012af7:	89 ee                	mov    esi,ebp
c0012af9:	31 db                	xor    ebx,ebx
c0012afb:	83 ec 0c             	sub    esp,0xc
c0012afe:	57                   	push   edi
c0012aff:	e8 0e f2 ff ff       	call   c0011d12 <Virt::swapIDToSector(unsigned long)>
c0012b04:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b07:	01 d8                	add    eax,ebx
c0012b09:	6a 01                	push   0x1
c0012b0b:	31 d2                	xor    edx,edx
c0012b0d:	43                   	inc    ebx
c0012b0e:	52                   	push   edx
c0012b0f:	81 c6 00 02 00 00    	add    esi,0x200
c0012b15:	50                   	push   eax
c0012b16:	0f be 05 d8 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d4d8
c0012b1d:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0012b24:	e8 4d 3d 00 00       	call   c0016876 <LogicalDisk::write(unsigned long long, int, void*)>
c0012b29:	83 c4 20             	add    esp,0x20
c0012b2c:	39 1d cc d4 02 c0    	cmp    DWORD PTR ds:0xc002d4cc,ebx
c0012b32:	7f c7                	jg     c0012afb <VAS::evict(unsigned long)+0x3d>
c0012b34:	83 ec 08             	sub    esp,0x8
c0012b37:	c1 e7 0b             	shl    edi,0xb
c0012b3a:	55                   	push   ebp
c0012b3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b3f:	e8 f0 f4 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012b44:	5a                   	pop    edx
c0012b45:	89 c3                	mov    ebx,eax
c0012b47:	59                   	pop    ecx
c0012b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b4f:	50                   	push   eax
c0012b50:	68 37 a9 02 c0       	push   0xc002a937
c0012b55:	e8 90 04 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012b5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b61:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b64:	e8 ef d2 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b69:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b6b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b71:	09 d7                	or     edi,edx
c0012b73:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b75:	5b                   	pop    ebx
c0012b76:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0012b7b:	5e                   	pop    esi
c0012b7c:	40                   	inc    eax
c0012b7d:	50                   	push   eax
c0012b7e:	a3 a4 e6 02 c0       	mov    ds:0xc002e6a4,eax
c0012b83:	68 4f a9 02 c0       	push   0xc002a94f
c0012b88:	e8 5d 04 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012b8d:	0f 20 d8             	mov    eax,cr3
c0012b90:	0f 22 d8             	mov    cr3,eax
c0012b93:	83 c4 2c             	add    esp,0x2c
c0012b96:	5b                   	pop    ebx
c0012b97:	5e                   	pop    esi
c0012b98:	5f                   	pop    edi
c0012b99:	5d                   	pop    ebp
c0012b9a:	e9 d9 b2 00 00       	jmp    c001de78 <unlockScheduler()>
c0012b9f:	90                   	nop

c0012ba0 <VAS::scanForEviction(int, int)>:
c0012ba0:	55                   	push   ebp
c0012ba1:	57                   	push   edi
c0012ba2:	56                   	push   esi
c0012ba3:	53                   	push   ebx
c0012ba4:	83 ec 1c             	sub    esp,0x1c
c0012ba7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012bab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012baf:	85 db                	test   ebx,ebx
c0012bb1:	75 08                	jne    c0012bbb <VAS::scanForEviction(int, int)+0x1b>
c0012bb3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012bbb:	bb 00 00 40 00       	mov    ebx,0x400000
c0012bc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bc8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012bd0:	31 ff                	xor    edi,edi
c0012bd2:	eb 13                	jmp    c0012be7 <VAS::scanForEviction(int, int)+0x47>
c0012bd4:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012bd9:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bdf:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012be5:	74 67                	je     c0012c4e <VAS::scanForEviction(int, int)+0xae>
c0012be7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012bea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012bee:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012bf2:	74 e0                	je     c0012bd4 <VAS::scanForEviction(int, int)+0x34>
c0012bf4:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012bfa:	eb 0a                	jmp    c0012c06 <VAS::scanForEviction(int, int)+0x66>
c0012bfc:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012c02:	39 eb                	cmp    ebx,ebp
c0012c04:	74 ce                	je     c0012bd4 <VAS::scanForEviction(int, int)+0x34>
c0012c06:	55                   	push   ebp
c0012c07:	56                   	push   esi
c0012c08:	e8 27 f4 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012c0d:	5a                   	pop    edx
c0012c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c10:	59                   	pop    ecx
c0012c11:	89 c2                	mov    edx,eax
c0012c13:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c19:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c1f:	75 db                	jne    c0012bfc <VAS::scanForEviction(int, int)+0x5c>
c0012c21:	a8 01                	test   al,0x1
c0012c23:	74 d7                	je     c0012bfc <VAS::scanForEviction(int, int)+0x5c>
c0012c25:	89 f8                	mov    eax,edi
c0012c27:	99                   	cdq    
c0012c28:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012c2c:	85 d2                	test   edx,edx
c0012c2e:	74 03                	je     c0012c33 <VAS::scanForEviction(int, int)+0x93>
c0012c30:	47                   	inc    edi
c0012c31:	eb c9                	jmp    c0012bfc <VAS::scanForEviction(int, int)+0x5c>
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	55                   	push   ebp
c0012c37:	56                   	push   esi
c0012c38:	e8 81 fe ff ff       	call   c0012abe <VAS::evict(unsigned long)>
c0012c3d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012c4c:	75 e2                	jne    c0012c30 <VAS::scanForEviction(int, int)+0x90>
c0012c4e:	83 c4 1c             	add    esp,0x1c
c0012c51:	5b                   	pop    ebx
c0012c52:	5e                   	pop    esi
c0012c53:	5f                   	pop    edi
c0012c54:	5d                   	pop    ebp
c0012c55:	c3                   	ret    

c0012c56 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012c56:	55                   	push   ebp
c0012c57:	57                   	push   edi
c0012c58:	56                   	push   esi
c0012c59:	53                   	push   ebx
c0012c5a:	83 ec 14             	sub    esp,0x14
c0012c5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c61:	68 6d a9 02 c0       	push   0xc002a96d
c0012c66:	e8 7f 03 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012c6b:	e8 06 b2 00 00       	call   c001de76 <lockScheduler()>
c0012c70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012c74:	5f                   	pop    edi
c0012c75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c7b:	5d                   	pop    ebp
c0012c7c:	53                   	push   ebx
c0012c7d:	68 81 a9 02 c0       	push   0xc002a981
c0012c82:	e8 63 03 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	85 db                	test   ebx,ebx
c0012c8c:	74 33                	je     c0012cc1 <VAS::tryLoadBackOffDisk(unsigned long)+0x6b>
c0012c8e:	83 ec 08             	sub    esp,0x8
c0012c91:	53                   	push   ebx
c0012c92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c96:	e8 99 f3 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	89 c6                	mov    esi,eax
c0012ca0:	85 c0                	test   eax,eax
c0012ca2:	74 0e                	je     c0012cb2 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ca6:	25 01 04 00 00       	and    eax,0x401
c0012cab:	3d 00 04 00 00       	cmp    eax,0x400
c0012cb0:	74 19                	je     c0012ccb <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012cb2:	e8 c1 b1 00 00       	call   c001de78 <unlockScheduler()>
c0012cb7:	31 c0                	xor    eax,eax
c0012cb9:	83 c4 0c             	add    esp,0xc
c0012cbc:	5b                   	pop    ebx
c0012cbd:	5e                   	pop    esi
c0012cbe:	5f                   	pop    edi
c0012cbf:	5d                   	pop    ebp
c0012cc0:	c3                   	ret    
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	31 c0                	xor    eax,eax
c0012cc6:	5b                   	pop    ebx
c0012cc7:	5e                   	pop    esi
c0012cc8:	5f                   	pop    edi
c0012cc9:	5d                   	pop    ebp
c0012cca:	c3                   	ret    
c0012ccb:	83 ec 08             	sub    esp,0x8
c0012cce:	53                   	push   ebx
c0012ccf:	68 95 a9 02 c0       	push   0xc002a995
c0012cd4:	e8 11 03 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012cd9:	c6 05 60 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e560,0x1
c0012ce0:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012ce2:	e8 1a d2 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012ce7:	c1 ed 0b             	shr    ebp,0xb
c0012cea:	c6 05 60 e5 02 c0 00 	mov    BYTE PTR ds:0xc002e560,0x0
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	8b 16                	mov    edx,DWORD PTR [esi]
c0012cf6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012cfc:	09 c2                	or     edx,eax
c0012cfe:	81 ca 01 08 00 00    	or     edx,0x801
c0012d04:	89 16                	mov    DWORD PTR [esi],edx
c0012d06:	8b 35 cc d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4cc
c0012d0c:	85 f6                	test   esi,esi
c0012d0e:	7e 3d                	jle    c0012d4d <VAS::tryLoadBackOffDisk(unsigned long)+0xf7>
c0012d10:	89 df                	mov    edi,ebx
c0012d12:	31 f6                	xor    esi,esi
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	55                   	push   ebp
c0012d18:	e8 f5 ef ff ff       	call   c0011d12 <Virt::swapIDToSector(unsigned long)>
c0012d1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d20:	01 f0                	add    eax,esi
c0012d22:	6a 01                	push   0x1
c0012d24:	31 d2                	xor    edx,edx
c0012d26:	46                   	inc    esi
c0012d27:	52                   	push   edx
c0012d28:	81 c7 00 02 00 00    	add    edi,0x200
c0012d2e:	50                   	push   eax
c0012d2f:	0f be 05 d8 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d4d8
c0012d36:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0012d3d:	e8 c8 3a 00 00       	call   c001680a <LogicalDisk::read(unsigned long long, int, void*)>
c0012d42:	83 c4 20             	add    esp,0x20
c0012d45:	39 35 cc d4 02 c0    	cmp    DWORD PTR ds:0xc002d4cc,esi
c0012d4b:	7f c7                	jg     c0012d14 <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012d4d:	83 ec 08             	sub    esp,0x8
c0012d50:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0012d55:	48                   	dec    eax
c0012d56:	50                   	push   eax
c0012d57:	a3 a4 e6 02 c0       	mov    ds:0xc002e6a4,eax
c0012d5c:	68 fc a7 02 c0       	push   0xc002a7fc
c0012d61:	e8 84 02 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012d66:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d69:	e8 86 ef ff ff       	call   c0011cf4 <Virt::freeSwapfilePage(unsigned long)>
c0012d6e:	e8 05 b1 00 00       	call   c001de78 <unlockScheduler()>
c0012d73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d77:	83 c4 10             	add    esp,0x10
c0012d7a:	25 ff 0f 00 00       	and    eax,0xfff
c0012d7f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012d84:	77 1e                	ja     c0012da4 <VAS::tryLoadBackOffDisk(unsigned long)+0x14e>
c0012d86:	50                   	push   eax
c0012d87:	6a 01                	push   0x1
c0012d89:	6a 01                	push   0x1
c0012d8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d8f:	e8 0c fe ff ff       	call   c0012ba0 <VAS::scanForEviction(int, int)>
c0012d94:	0f 20 d8             	mov    eax,cr3
c0012d97:	0f 22 d8             	mov    cr3,eax
c0012d9a:	b0 01                	mov    al,0x1
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	e9 15 ff ff ff       	jmp    c0012cb9 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012dad:	68 ab a9 02 c0       	push   0xc002a9ab
c0012db2:	e8 33 02 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012db7:	5a                   	pop    edx
c0012db8:	59                   	pop    ecx
c0012db9:	53                   	push   ebx
c0012dba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012dbe:	e8 93 fe ff ff       	call   c0012c56 <VAS::tryLoadBackOffDisk(unsigned long)>
c0012dc3:	83 c4 10             	add    esp,0x10
c0012dc6:	eb be                	jmp    c0012d86 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>

c0012dc8 <mapVASFirstTime>:
c0012dc8:	55                   	push   ebp
c0012dc9:	57                   	push   edi
c0012dca:	56                   	push   esi
c0012dcb:	53                   	push   ebx
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012dd7:	4a                   	dec    edx
c0012dd8:	0f 84 8e 00 00 00    	je     c0012e6c <mapVASFirstTime+0xa4>
c0012dde:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012de1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012de4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012de9:	c1 e5 15             	shl    ebp,0x15
c0012dec:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012df1:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012df7:	29 eb                	sub    ebx,ebp
c0012df9:	29 ee                	sub    esi,ebp
c0012dfb:	e8 01 d1 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	68 03 04 00 00       	push   0x403
c0012e08:	6a 01                	push   0x1
c0012e0a:	53                   	push   ebx
c0012e0b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e11:	50                   	push   eax
c0012e12:	57                   	push   edi
c0012e13:	e8 96 f8 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e18:	83 c4 20             	add    esp,0x20
c0012e1b:	39 f3                	cmp    ebx,esi
c0012e1d:	75 dc                	jne    c0012dfb <mapVASFirstTime+0x33>
c0012e1f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e24:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e29:	29 ee                	sub    esi,ebp
c0012e2b:	29 e8                	sub    eax,ebp
c0012e2d:	89 c5                	mov    ebp,eax
c0012e2f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e33:	19 db                	sbb    ebx,ebx
c0012e35:	e8 c7 d0 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012e3a:	83 e3 04             	and    ebx,0x4
c0012e3d:	83 ec 0c             	sub    esp,0xc
c0012e40:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e46:	53                   	push   ebx
c0012e47:	6a 01                	push   0x1
c0012e49:	56                   	push   esi
c0012e4a:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e50:	50                   	push   eax
c0012e51:	57                   	push   edi
c0012e52:	e8 57 f8 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e57:	83 c4 20             	add    esp,0x20
c0012e5a:	39 f5                	cmp    ebp,esi
c0012e5c:	75 d1                	jne    c0012e2f <mapVASFirstTime+0x67>
c0012e5e:	0f 20 d8             	mov    eax,cr3
c0012e61:	0f 22 d8             	mov    cr3,eax
c0012e64:	83 c4 0c             	add    esp,0xc
c0012e67:	5b                   	pop    ebx
c0012e68:	5e                   	pop    esi
c0012e69:	5f                   	pop    edi
c0012e6a:	5d                   	pop    ebp
c0012e6b:	c3                   	ret    
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	68 bf a9 02 c0       	push   0xc002a9bf
c0012e74:	e8 71 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	83 c4 0c             	add    esp,0xc
c0012e7f:	5b                   	pop    ebx
c0012e80:	5e                   	pop    esi
c0012e81:	5f                   	pop    edi
c0012e82:	5d                   	pop    ebp
c0012e83:	c3                   	ret    

c0012e84 <__cxa_atexit>:
c0012e84:	31 c0                	xor    eax,eax
c0012e86:	c3                   	ret    

c0012e87 <__cxa_finalize>:
c0012e87:	c3                   	ret    

c0012e88 <__stack_chk_fail>:
c0012e88:	55                   	push   ebp
c0012e89:	89 e5                	mov    ebp,esp
c0012e8b:	83 ec 14             	sub    esp,0x14
c0012e8e:	68 d8 a9 02 c0       	push   0xc002a9d8
c0012e93:	e8 52 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012e98:	58                   	pop    eax
c0012e99:	5a                   	pop    edx
c0012e9a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e9d:	68 28 aa 02 c0       	push   0xc002aa28
c0012ea2:	e8 43 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ea7:	59                   	pop    ecx
c0012ea8:	58                   	pop    eax
c0012ea9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eac:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012eaf:	68 28 aa 02 c0       	push   0xc002aa28
c0012eb4:	e8 31 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012eb9:	5a                   	pop    edx
c0012eba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ebd:	59                   	pop    ecx
c0012ebe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ec0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ec3:	68 28 aa 02 c0       	push   0xc002aa28
c0012ec8:	e8 1d 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ecd:	5a                   	pop    edx
c0012ece:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ed1:	59                   	pop    ecx
c0012ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ed9:	68 28 aa 02 c0       	push   0xc002aa28
c0012ede:	e8 07 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ee3:	c7 04 24 30 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa30
c0012eea:	e8 ac 77 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	c9                   	leave  
c0012ef3:	c3                   	ret    

c0012ef4 <__cxa_pure_virtual>:
c0012ef4:	83 ec 18             	sub    esp,0x18
c0012ef7:	68 48 aa 02 c0       	push   0xc002aa48
c0012efc:	e8 9a 77 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0012f01:	83 c4 1c             	add    esp,0x1c
c0012f04:	c3                   	ret    

c0012f05 <operator new[](unsigned long)>:
c0012f05:	e9 36 c9 ff ff       	jmp    c000f840 <malloc>

c0012f0a <operator delete(void*, unsigned long)>:
c0012f0a:	e9 51 c9 ff ff       	jmp    c000f860 <rfree>

c0012f0f <operator delete[](void*)>:
c0012f0f:	e9 4c c9 ff ff       	jmp    c000f860 <rfree>

c0012f14 <operator delete[](void*, unsigned long)>:
c0012f14:	e9 47 c9 ff ff       	jmp    c000f860 <rfree>

c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f19:	57                   	push   edi
c0012f1a:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f1f:	56                   	push   esi
c0012f20:	be 5c aa 02 c0       	mov    esi,0xc002aa5c
c0012f25:	53                   	push   ebx
c0012f26:	83 ec 40             	sub    esp,0x40
c0012f29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f2d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f31:	fc                   	cld    
c0012f32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f34:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f38:	83 f9 3e             	cmp    ecx,0x3e
c0012f3b:	7e 05                	jle    c0012f42 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f3d:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f42:	89 df                	mov    edi,ebx
c0012f44:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f48:	eb 02                	jmp    c0012f4c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f4a:	89 c7                	mov    edi,eax
c0012f4c:	31 d2                	xor    edx,edx
c0012f4e:	46                   	inc    esi
c0012f4f:	89 f8                	mov    eax,edi
c0012f51:	f7 f1                	div    ecx
c0012f53:	39 cf                	cmp    edi,ecx
c0012f55:	73 f3                	jae    c0012f4a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f57:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f5a:	eb 02                	jmp    c0012f5e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f5c:	89 c3                	mov    ebx,eax
c0012f5e:	31 d2                	xor    edx,edx
c0012f60:	4e                   	dec    esi
c0012f61:	89 d8                	mov    eax,ebx
c0012f63:	f7 f1                	div    ecx
c0012f65:	39 cb                	cmp    ebx,ecx
c0012f67:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f6b:	88 16                	mov    BYTE PTR [esi],dl
c0012f6d:	73 ed                	jae    c0012f5c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f73:	83 c4 40             	add    esp,0x40
c0012f76:	5b                   	pop    ebx
c0012f77:	5e                   	pop    esi
c0012f78:	5f                   	pop    edi
c0012f79:	c3                   	ret    

c0012f7a <Dbg::logc(char)>:
c0012f7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f7e:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f83:	ec                   	in     al,dx
c0012f84:	a8 20                	test   al,0x20
c0012f86:	74 fb                	je     c0012f83 <Dbg::logc(char)+0x9>
c0012f88:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f8d:	88 c8                	mov    al,cl
c0012f8f:	ee                   	out    dx,al
c0012f90:	c3                   	ret    

c0012f91 <Dbg::logs(char*)>:
c0012f91:	53                   	push   ebx
c0012f92:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f96:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f99:	84 c0                	test   al,al
c0012f9b:	74 0f                	je     c0012fac <Dbg::logs(char*)+0x1b>
c0012f9d:	50                   	push   eax
c0012f9e:	43                   	inc    ebx
c0012f9f:	e8 d6 ff ff ff       	call   c0012f7a <Dbg::logc(char)>
c0012fa4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fa7:	5a                   	pop    edx
c0012fa8:	84 c0                	test   al,al
c0012faa:	75 f1                	jne    c0012f9d <Dbg::logs(char*)+0xc>
c0012fac:	5b                   	pop    ebx
c0012fad:	c3                   	ret    

c0012fae <Dbg::logWriteInt(unsigned int)>:
c0012fae:	83 ec 10             	sub    esp,0x10
c0012fb1:	6a 0a                	push   0xa
c0012fb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fb7:	50                   	push   eax
c0012fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbc:	e8 58 ff ff ff       	call   c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fc1:	50                   	push   eax
c0012fc2:	e8 ca ff ff ff       	call   c0012f91 <Dbg::logs(char*)>
c0012fc7:	83 c4 20             	add    esp,0x20
c0012fca:	c3                   	ret    

c0012fcb <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fcb:	83 ec 10             	sub    esp,0x10
c0012fce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fd6:	50                   	push   eax
c0012fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fdb:	e8 39 ff ff ff       	call   c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fe0:	50                   	push   eax
c0012fe1:	e8 ab ff ff ff       	call   c0012f91 <Dbg::logs(char*)>
c0012fe6:	83 c4 20             	add    esp,0x20
c0012fe9:	c3                   	ret    

c0012fea <Dbg::kprintf(char const*, ...)>:
c0012fea:	55                   	push   ebp
c0012feb:	57                   	push   edi
c0012fec:	56                   	push   esi
c0012fed:	53                   	push   ebx
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ff5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ff9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ffd:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013000:	84 c0                	test   al,al
c0013002:	74 4a                	je     c001304e <Dbg::kprintf(char const*, ...)+0x64>
c0013004:	31 db                	xor    ebx,ebx
c0013006:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013009:	3c 25                	cmp    al,0x25
c001300b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001300e:	0f 85 e4 00 00 00    	jne    c00130f8 <Dbg::kprintf(char const*, ...)+0x10e>
c0013014:	83 c3 02             	add    ebx,0x2
c0013017:	8a 07                	mov    al,BYTE PTR [edi]
c0013019:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001301c:	83 e8 25             	sub    eax,0x25
c001301f:	3c 53                	cmp    al,0x53
c0013021:	0f 87 ba 00 00 00    	ja     c00130e1 <Dbg::kprintf(char const*, ...)+0xf7>
c0013027:	0f b6 c0             	movzx  eax,al
c001302a:	ff 24 85 9c aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5564]
c0013031:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013035:	89 c8                	mov    eax,ecx
c0013037:	83 c1 04             	add    ecx,0x4
c001303a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001303e:	ff 30                	push   DWORD PTR [eax]
c0013040:	e8 4c ff ff ff       	call   c0012f91 <Dbg::logs(char*)>
c0013045:	58                   	pop    eax
c0013046:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001304a:	84 c0                	test   al,al
c001304c:	75 b8                	jne    c0013006 <Dbg::kprintf(char const*, ...)+0x1c>
c001304e:	83 c4 0c             	add    esp,0xc
c0013051:	5b                   	pop    ebx
c0013052:	5e                   	pop    esi
c0013053:	5f                   	pop    edi
c0013054:	5d                   	pop    ebp
c0013055:	c3                   	ret    
c0013056:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001305a:	89 d0                	mov    eax,edx
c001305c:	83 c2 04             	add    edx,0x4
c001305f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013063:	ff 30                	push   DWORD PTR [eax]
c0013065:	e8 44 ff ff ff       	call   c0012fae <Dbg::logWriteInt(unsigned int)>
c001306a:	58                   	pop    eax
c001306b:	eb d9                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c001306d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013071:	89 d0                	mov    eax,edx
c0013073:	83 c2 04             	add    edx,0x4
c0013076:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013079:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001307d:	50                   	push   eax
c001307e:	e8 f7 fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c0013083:	58                   	pop    eax
c0013084:	eb c0                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c0013086:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001308a:	89 c8                	mov    eax,ecx
c001308c:	83 c1 04             	add    ecx,0x4
c001308f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013093:	ff 30                	push   DWORD PTR [eax]
c0013095:	e8 14 ff ff ff       	call   c0012fae <Dbg::logWriteInt(unsigned int)>
c001309a:	5f                   	pop    edi
c001309b:	eb a9                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c001309d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130a1:	89 c8                	mov    eax,ecx
c00130a3:	83 c1 04             	add    ecx,0x4
c00130a6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130aa:	6a 10                	push   0x10
c00130ac:	ff 30                	push   DWORD PTR [eax]
c00130ae:	e8 18 ff ff ff       	call   c0012fcb <Dbg::logWriteIntBase(unsigned int, int)>
c00130b3:	59                   	pop    ecx
c00130b4:	5f                   	pop    edi
c00130b5:	eb 8f                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130bb:	89 d0                	mov    eax,edx
c00130bd:	83 c2 08             	add    edx,0x8
c00130c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130c4:	6a 10                	push   0x10
c00130c6:	ff 30                	push   DWORD PTR [eax]
c00130c8:	e8 fe fe ff ff       	call   c0012fcb <Dbg::logWriteIntBase(unsigned int, int)>
c00130cd:	58                   	pop    eax
c00130ce:	5a                   	pop    edx
c00130cf:	e9 72 ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130d4:	6a 25                	push   0x25
c00130d6:	e8 9f fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c00130db:	58                   	pop    eax
c00130dc:	e9 65 ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130e1:	6a 25                	push   0x25
c00130e3:	e8 92 fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c00130e8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130eb:	50                   	push   eax
c00130ec:	e8 89 fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c00130f1:	5a                   	pop    edx
c00130f2:	59                   	pop    ecx
c00130f3:	e9 4e ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130f8:	50                   	push   eax
c00130f9:	89 eb                	mov    ebx,ebp
c00130fb:	e8 7a fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c0013100:	89 fd                	mov    ebp,edi
c0013102:	58                   	pop    eax
c0013103:	e9 3e ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>

c0013108 <File::read(unsigned long long, void*, int*)>:
c0013108:	53                   	push   ebx
c0013109:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001310d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013111:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013118:	3c 19                	cmp    al,0x19
c001311a:	77 35                	ja     c0013151 <File::read(unsigned long long, void*, int*)+0x49>
c001311c:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0013123:	85 c0                	test   eax,eax
c0013125:	74 2a                	je     c0013151 <File::read(unsigned long long, void*, int*)+0x49>
c0013127:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001312d:	85 c0                	test   eax,eax
c001312f:	74 20                	je     c0013151 <File::read(unsigned long long, void*, int*)+0x49>
c0013131:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013135:	74 21                	je     c0013158 <File::read(unsigned long long, void*, int*)+0x50>
c0013137:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013139:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001313d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013143:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013147:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001314b:	5b                   	pop    ebx
c001314c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001314f:	ff e0                	jmp    eax
c0013151:	b8 0b 00 00 00       	mov    eax,0xb
c0013156:	eb 05                	jmp    c001315d <File::read(unsigned long long, void*, int*)+0x55>
c0013158:	b8 05 00 00 00       	mov    eax,0x5
c001315d:	5b                   	pop    ebx
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <File::write(unsigned long long, void*, int*)>:
c0013160:	53                   	push   ebx
c0013161:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013165:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013169:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013170:	3c 19                	cmp    al,0x19
c0013172:	77 35                	ja     c00131a9 <File::write(unsigned long long, void*, int*)+0x49>
c0013174:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001317b:	85 c0                	test   eax,eax
c001317d:	74 2a                	je     c00131a9 <File::write(unsigned long long, void*, int*)+0x49>
c001317f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013185:	85 c0                	test   eax,eax
c0013187:	74 20                	je     c00131a9 <File::write(unsigned long long, void*, int*)+0x49>
c0013189:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001318d:	74 21                	je     c00131b0 <File::write(unsigned long long, void*, int*)+0x50>
c001318f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013191:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013195:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001319b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001319f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131a3:	5b                   	pop    ebx
c00131a4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131a7:	ff e0                	jmp    eax
c00131a9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ae:	eb 05                	jmp    c00131b5 <File::write(unsigned long long, void*, int*)+0x55>
c00131b0:	b8 05 00 00 00       	mov    eax,0x5
c00131b5:	5b                   	pop    ebx
c00131b6:	c3                   	ret    
c00131b7:	90                   	nop

c00131b8 <Directory::read(unsigned long long, void*, int*)>:
c00131b8:	53                   	push   ebx
c00131b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131c1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131c8:	3c 19                	cmp    al,0x19
c00131ca:	77 35                	ja     c0013201 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131cc:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c00131d3:	85 c0                	test   eax,eax
c00131d5:	74 2a                	je     c0013201 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131dd:	85 c0                	test   eax,eax
c00131df:	74 20                	je     c0013201 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e5:	74 21                	je     c0013208 <Directory::read(unsigned long long, void*, int*)+0x50>
c00131e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131ed:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131fb:	5b                   	pop    ebx
c00131fc:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131ff:	ff e0                	jmp    eax
c0013201:	b8 0b 00 00 00       	mov    eax,0xb
c0013206:	eb 05                	jmp    c001320d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013208:	b8 05 00 00 00       	mov    eax,0x5
c001320d:	5b                   	pop    ebx
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <Directory::write(unsigned long long, void*, int*)>:
c0013210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013214:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001321b:	b8 0b 00 00 00       	mov    eax,0xb
c0013220:	80 fa 19             	cmp    dl,0x19
c0013223:	77 18                	ja     c001323d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013225:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c001322c:	85 d2                	test   edx,edx
c001322e:	74 0d                	je     c001323d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013230:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013237:	19 c0                	sbb    eax,eax
c0013239:	83 e0 0a             	and    eax,0xa
c001323c:	40                   	inc    eax
c001323d:	c3                   	ret    

c001323e <File::isAtty()>:
c001323e:	31 c0                	xor    eax,eax
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <Directory::isAtty()>:
c0013242:	31 c0                	xor    eax,eax
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013246:	b8 0a 00 00 00       	mov    eax,0xa
c001324b:	c3                   	ret    

c001324c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001324c:	b8 0a 00 00 00       	mov    eax,0xa
c0013251:	c3                   	ret    

c0013252 <File::~File()>:
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c001325a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325e:	89 10                	mov    DWORD PTR [eax],edx
c0013260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013264:	83 ec 0c             	sub    esp,0xc
c0013267:	50                   	push   eax
c0013268:	e8 15 e7 ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	90                   	nop
c0013271:	83 c4 0c             	add    esp,0xc
c0013274:	c3                   	ret    
c0013275:	90                   	nop

c0013276 <File::~File()>:
c0013276:	83 ec 0c             	sub    esp,0xc
c0013279:	83 ec 0c             	sub    esp,0xc
c001327c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013280:	e8 cd ff ff ff       	call   c0013252 <File::~File()>
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	83 ec 08             	sub    esp,0x8
c001328b:	68 14 01 00 00       	push   0x114
c0013290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013294:	e8 71 fc ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	83 c4 0c             	add    esp,0xc
c001329f:	c3                   	ret    

c00132a0 <Directory::~Directory()>:
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	ba 74 ac 02 c0       	mov    edx,0xc002ac74
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	89 10                	mov    DWORD PTR [eax],edx
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	83 ec 0c             	sub    esp,0xc
c00132b5:	50                   	push   eax
c00132b6:	e8 c7 e6 ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	90                   	nop
c00132bf:	83 c4 0c             	add    esp,0xc
c00132c2:	c3                   	ret    
c00132c3:	90                   	nop

c00132c4 <Directory::~Directory()>:
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	83 ec 0c             	sub    esp,0xc
c00132ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ce:	e8 cd ff ff ff       	call   c00132a0 <Directory::~Directory()>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	68 14 01 00 00       	push   0x114
c00132de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e2:	e8 23 fc ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00132e7:	83 c4 10             	add    esp,0x10
c00132ea:	83 c4 0c             	add    esp,0xc
c00132ed:	c3                   	ret    

c00132ee <Filesystem::Filesystem()>:
c00132ee:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c00132f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132f7:	89 10                	mov    DWORD PTR [eax],edx
c00132f9:	8b 15 b0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6b0
c00132ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013303:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001330a:	a3 b0 e6 02 c0       	mov    ds:0xc002e6b0,eax
c001330f:	90                   	nop
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <Filesystem::~Filesystem()>:
c0013312:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0013317:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001331b:	89 10                	mov    DWORD PTR [eax],edx
c001331d:	90                   	nop
c001331e:	c3                   	ret    
c001331f:	90                   	nop

c0013320 <Filesystem::~Filesystem()>:
c0013320:	83 ec 0c             	sub    esp,0xc
c0013323:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013327:	e8 e6 ff ff ff       	call   c0013312 <Filesystem::~Filesystem()>
c001332c:	83 c4 04             	add    esp,0x4
c001332f:	83 ec 08             	sub    esp,0x8
c0013332:	6a 08                	push   0x8
c0013334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013338:	e8 cd fb ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001333d:	83 c4 10             	add    esp,0x10
c0013340:	83 c4 0c             	add    esp,0xc
c0013343:	c3                   	ret    

c0013344 <Fs::getcwd(Process*, char*, int)>:
c0013344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013348:	31 c0                	xor    eax,eax
c001334a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001334d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013351:	7d 15                	jge    c0013368 <Fs::getcwd(Process*, char*, int)+0x24>
c0013353:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013357:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001335e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013361:	84 c9                	test   cl,cl
c0013363:	74 06                	je     c001336b <Fs::getcwd(Process*, char*, int)+0x27>
c0013365:	40                   	inc    eax
c0013366:	eb e2                	jmp    c001334a <Fs::getcwd(Process*, char*, int)+0x6>
c0013368:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001336b:	31 c0                	xor    eax,eax
c001336d:	c3                   	ret    

c001336e <Fs::initVFS()>:
c001336e:	83 ec 18             	sub    esp,0x18
c0013371:	6a 08                	push   0x8
c0013373:	e8 c8 c4 ff ff       	call   c000f840 <malloc>
c0013378:	89 04 24             	mov    DWORD PTR [esp],eax
c001337b:	e8 6a dc 00 00       	call   c0020fea <FAT::FAT()>
c0013380:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013387:	e8 b4 c4 ff ff       	call   c000f840 <malloc>
c001338c:	89 04 24             	mov    DWORD PTR [esp],eax
c001338f:	e8 ae ee 00 00       	call   c0022242 <ISO9660::ISO9660()>
c0013394:	83 c4 1c             	add    esp,0x1c
c0013397:	c3                   	ret    

c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013398:	55                   	push   ebp
c0013399:	57                   	push   edi
c001339a:	56                   	push   esi
c001339b:	53                   	push   ebx
c001339c:	81 ec 10 04 00 00    	sub    esp,0x410
c00133a2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133a9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133b0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00133b7:	68 00 04 00 00       	push   0x400
c00133bc:	6a 00                	push   0x0
c00133be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133c2:	56                   	push   esi
c00133c3:	e8 b0 d3 fe ff       	call   c0000778 <memset>
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133cf:	75 0b                	jne    c00133dc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133d1:	50                   	push   eax
c00133d2:	50                   	push   eax
c00133d3:	57                   	push   edi
c00133d4:	56                   	push   esi
c00133d5:	e8 5a d4 fe ff       	call   c0000834 <strcpy>
c00133da:	eb 41                	jmp    c001341d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133dc:	8a 07                	mov    al,BYTE PTR [edi]
c00133de:	3c 5c                	cmp    al,0x5c
c00133e0:	74 04                	je     c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133e2:	3c 2f                	cmp    al,0x2f
c00133e4:	75 18                	jne    c00133fe <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133e6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133e9:	3c 60                	cmp    al,0x60
c00133eb:	7e 03                	jle    c00133f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133ed:	83 e8 20             	sub    eax,0x20
c00133f0:	88 04 24             	mov    BYTE PTR [esp],al
c00133f3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133fa:	50                   	push   eax
c00133fb:	50                   	push   eax
c00133fc:	eb 18                	jmp    c0013416 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133fe:	50                   	push   eax
c00133ff:	50                   	push   eax
c0013400:	55                   	push   ebp
c0013401:	56                   	push   esi
c0013402:	e8 2d d4 fe ff       	call   c0000834 <strcpy>
c0013407:	5a                   	pop    edx
c0013408:	59                   	pop    ecx
c0013409:	68 0d c3 02 c0       	push   0xc002c30d
c001340e:	56                   	push   esi
c001340f:	e8 60 d5 fe ff       	call   c0000974 <strcat>
c0013414:	5d                   	pop    ebp
c0013415:	58                   	pop    eax
c0013416:	57                   	push   edi
c0013417:	56                   	push   esi
c0013418:	e8 57 d5 fe ff       	call   c0000974 <strcat>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013423:	3c 60                	cmp    al,0x60
c0013425:	7e 03                	jle    c001342a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013427:	83 e8 20             	sub    eax,0x20
c001342a:	88 04 24             	mov    BYTE PTR [esp],al
c001342d:	88 03                	mov    BYTE PTR [ebx],al
c001342f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013436:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001343c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013440:	bf 03 00 00 00       	mov    edi,0x3
c0013445:	b8 03 00 00 00       	mov    eax,0x3
c001344a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001344d:	84 d2                	test   dl,dl
c001344f:	0f 84 91 00 00 00    	je     c00134e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013455:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013458:	80 fa 5c             	cmp    dl,0x5c
c001345b:	74 05                	je     c0013462 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001345d:	80 fa 2f             	cmp    dl,0x2f
c0013460:	75 12                	jne    c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013462:	89 c5                	mov    ebp,eax
c0013464:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013469:	74 09                	je     c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001346b:	40                   	inc    eax
c001346c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013470:	89 cf                	mov    edi,ecx
c0013472:	eb d6                	jmp    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013474:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013479:	75 5b                	jne    c00134d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001347b:	80 fa 2e             	cmp    dl,0x2e
c001347e:	75 56                	jne    c00134d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013480:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013484:	74 19                	je     c001349f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013486:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001348b:	74 53                	je     c00134e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001348d:	89 f9                	mov    ecx,edi
c001348f:	41                   	inc    ecx
c0013490:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013493:	80 fa 2f             	cmp    dl,0x2f
c0013496:	74 f7                	je     c001348f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013498:	80 fa 5c             	cmp    dl,0x5c
c001349b:	74 f2                	je     c001348f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001349d:	eb d1                	jmp    c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001349f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134a4:	74 3a                	je     c00134e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134a6:	83 f8 03             	cmp    eax,0x3
c00134a9:	74 c5                	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ab:	41                   	inc    ecx
c00134ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134af:	80 fa 2f             	cmp    dl,0x2f
c00134b2:	74 f7                	je     c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134b4:	80 fa 5c             	cmp    dl,0x5c
c00134b7:	74 f2                	je     c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134b9:	48                   	dec    eax
c00134ba:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134be:	75 06                	jne    c00134c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134c0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134c4:	eb f3                	jmp    c00134b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134ca:	74 07                	je     c00134d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134d0:	48                   	dec    eax
c00134d1:	eb f3                	jmp    c00134c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134d3:	40                   	inc    eax
c00134d4:	eb 9a                	jmp    c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134d6:	80 fa 2f             	cmp    dl,0x2f
c00134d9:	74 95                	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134db:	80 fa 5c             	cmp    dl,0x5c
c00134de:	74 90                	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134e3:	40                   	inc    eax
c00134e4:	eb 8a                	jmp    c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	53                   	push   ebx
c00134ee:	e8 a1 d2 fe ff       	call   c0000794 <strlen>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134fb:	75 26                	jne    c0013523 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	53                   	push   ebx
c0013501:	e8 8e d2 fe ff       	call   c0000794 <strlen>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001350e:	74 26                	je     c0013536 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	53                   	push   ebx
c0013514:	e8 7b d2 fe ff       	call   c0000794 <strlen>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013521:	eb c7                	jmp    c00134ea <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013523:	83 ec 0c             	sub    esp,0xc
c0013526:	53                   	push   ebx
c0013527:	e8 68 d2 fe ff       	call   c0000794 <strlen>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013534:	74 c7                	je     c00134fd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013536:	81 c4 0c 04 00 00    	add    esp,0x40c
c001353c:	5b                   	pop    ebx
c001353d:	5e                   	pop    esi
c001353e:	5f                   	pop    edi
c001353f:	5d                   	pop    ebp
c0013540:	c3                   	ret    
c0013541:	90                   	nop

c0013542 <File::File(char const*, Process*)>:
c0013542:	83 ec 0c             	sub    esp,0xc
c0013545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013549:	83 ec 08             	sub    esp,0x8
c001354c:	6a 00                	push   0x0
c001354e:	50                   	push   eax
c001354f:	e8 4c e2 ff ff       	call   c00117a0 <UnixFile::UnixFile(int)>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c001355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013560:	89 10                	mov    DWORD PTR [eax],edx
c0013562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013566:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001356c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013570:	83 c0 0d             	add    eax,0xd
c0013573:	83 ec 04             	sub    esp,0x4
c0013576:	52                   	push   edx
c0013577:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001357b:	50                   	push   eax
c001357c:	e8 17 fe ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013581:	83 c4 10             	add    esp,0x10
c0013584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013588:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001358b:	8d 50 bf             	lea    edx,[eax-0x41]
c001358e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013592:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135a0:	90                   	nop
c00135a1:	83 c4 0c             	add    esp,0xc
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <File::open(FileOpenMode)>:
c00135a6:	53                   	push   ebx
c00135a7:	b8 0b 00 00 00       	mov    eax,0xb
c00135ac:	83 ec 08             	sub    esp,0x8
c00135af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135ba:	80 fa 19             	cmp    dl,0x19
c00135bd:	77 40                	ja     c00135ff <File::open(FileOpenMode)+0x59>
c00135bf:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c00135c6:	85 d2                	test   edx,edx
c00135c8:	74 35                	je     c00135ff <File::open(FileOpenMode)+0x59>
c00135ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d0:	85 d2                	test   edx,edx
c00135d2:	74 2b                	je     c00135ff <File::open(FileOpenMode)+0x59>
c00135d4:	b8 06 00 00 00       	mov    eax,0x6
c00135d9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135dd:	75 20                	jne    c00135ff <File::open(FileOpenMode)+0x59>
c00135df:	8b 02                	mov    eax,DWORD PTR [edx]
c00135e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135eb:	51                   	push   ecx
c00135ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135ef:	51                   	push   ecx
c00135f0:	52                   	push   edx
c00135f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	85 c0                	test   eax,eax
c00135f9:	75 04                	jne    c00135ff <File::open(FileOpenMode)+0x59>
c00135fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135ff:	83 c4 08             	add    esp,0x8
c0013602:	5b                   	pop    ebx
c0013603:	c3                   	ret    

c0013604 <File::close()>:
c0013604:	53                   	push   ebx
c0013605:	b8 0b 00 00 00       	mov    eax,0xb
c001360a:	83 ec 08             	sub    esp,0x8
c001360d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013611:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013618:	80 fa 19             	cmp    dl,0x19
c001361b:	77 41                	ja     c001365e <File::close()+0x5a>
c001361d:	8b 1c 95 40 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd14c0]
c0013624:	85 db                	test   ebx,ebx
c0013626:	74 36                	je     c001365e <File::close()+0x5a>
c0013628:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001362f:	74 2d                	je     c001365e <File::close()+0x5a>
c0013631:	b8 05 00 00 00       	mov    eax,0x5
c0013636:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001363a:	74 22                	je     c001365e <File::close()+0x5a>
c001363c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013640:	8b 04 95 40 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd14c0]
c0013647:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001364d:	53                   	push   ebx
c001364e:	53                   	push   ebx
c001364f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013651:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013657:	50                   	push   eax
c0013658:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001365b:	83 c4 10             	add    esp,0x10
c001365e:	83 c4 08             	add    esp,0x8
c0013661:	5b                   	pop    ebx
c0013662:	c3                   	ret    
c0013663:	90                   	nop

c0013664 <File::seek(unsigned long long)>:
c0013664:	56                   	push   esi
c0013665:	53                   	push   ebx
c0013666:	b8 0b 00 00 00       	mov    eax,0xb
c001366b:	51                   	push   ecx
c001366c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013670:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013674:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001367b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001367f:	80 fa 19             	cmp    dl,0x19
c0013682:	77 31                	ja     c00136b5 <File::seek(unsigned long long)+0x51>
c0013684:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c001368b:	85 d2                	test   edx,edx
c001368d:	74 26                	je     c00136b5 <File::seek(unsigned long long)+0x51>
c001368f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013695:	85 d2                	test   edx,edx
c0013697:	74 1c                	je     c00136b5 <File::seek(unsigned long long)+0x51>
c0013699:	b8 05 00 00 00       	mov    eax,0x5
c001369e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136a2:	74 11                	je     c00136b5 <File::seek(unsigned long long)+0x51>
c00136a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00136a6:	53                   	push   ebx
c00136a7:	51                   	push   ecx
c00136a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136ae:	52                   	push   edx
c00136af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136b2:	83 c4 10             	add    esp,0x10
c00136b5:	5a                   	pop    edx
c00136b6:	5b                   	pop    ebx
c00136b7:	5e                   	pop    esi
c00136b8:	c3                   	ret    
c00136b9:	90                   	nop

c00136ba <File::tell(unsigned long long*)>:
c00136ba:	83 ec 0c             	sub    esp,0xc
c00136bd:	b8 0b 00 00 00       	mov    eax,0xb
c00136c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136cd:	80 fa 19             	cmp    dl,0x19
c00136d0:	77 34                	ja     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136d2:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c00136d9:	85 d2                	test   edx,edx
c00136db:	74 29                	je     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136e3:	85 d2                	test   edx,edx
c00136e5:	74 1f                	je     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136e7:	b8 05 00 00 00       	mov    eax,0x5
c00136ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136f0:	74 14                	je     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136f2:	50                   	push   eax
c00136f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00136f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136ff:	52                   	push   edx
c0013700:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	83 c4 0c             	add    esp,0xc
c0013709:	c3                   	ret    

c001370a <File::rewind()>:
c001370a:	83 ec 10             	sub    esp,0x10
c001370d:	6a 00                	push   0x0
c001370f:	6a 00                	push   0x0
c0013711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013715:	e8 4a ff ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001371a:	83 c4 1c             	add    esp,0x1c
c001371d:	c3                   	ret    

c001371e <File::unlink()>:
c001371e:	83 ec 0c             	sub    esp,0xc
c0013721:	b8 0b 00 00 00       	mov    eax,0xb
c0013726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013731:	80 f9 19             	cmp    cl,0x19
c0013734:	77 2f                	ja     c0013765 <File::unlink()+0x47>
c0013736:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c001373d:	85 c9                	test   ecx,ecx
c001373f:	74 24                	je     c0013765 <File::unlink()+0x47>
c0013741:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013747:	85 c9                	test   ecx,ecx
c0013749:	74 1a                	je     c0013765 <File::unlink()+0x47>
c001374b:	b8 06 00 00 00       	mov    eax,0x6
c0013750:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013754:	75 0f                	jne    c0013765 <File::unlink()+0x47>
c0013756:	83 c2 0d             	add    edx,0xd
c0013759:	50                   	push   eax
c001375a:	50                   	push   eax
c001375b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001375d:	52                   	push   edx
c001375e:	51                   	push   ecx
c001375f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	83 c4 0c             	add    esp,0xc
c0013768:	c3                   	ret    
c0013769:	90                   	nop

c001376a <File::rename(char const*)>:
c001376a:	83 ec 0c             	sub    esp,0xc
c001376d:	b8 0b 00 00 00       	mov    eax,0xb
c0013772:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013776:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001377d:	80 f9 19             	cmp    cl,0x19
c0013780:	77 32                	ja     c00137b4 <File::rename(char const*)+0x4a>
c0013782:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013789:	85 c9                	test   ecx,ecx
c001378b:	74 27                	je     c00137b4 <File::rename(char const*)+0x4a>
c001378d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013793:	85 c9                	test   ecx,ecx
c0013795:	74 1d                	je     c00137b4 <File::rename(char const*)+0x4a>
c0013797:	b8 06 00 00 00       	mov    eax,0x6
c001379c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137a0:	75 12                	jne    c00137b4 <File::rename(char const*)+0x4a>
c00137a2:	83 c2 0d             	add    edx,0xd
c00137a5:	50                   	push   eax
c00137a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ac:	52                   	push   edx
c00137ad:	51                   	push   ecx
c00137ae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	83 c4 0c             	add    esp,0xc
c00137b7:	c3                   	ret    

c00137b8 <File::chfatattr(unsigned char, unsigned char)>:
c00137b8:	57                   	push   edi
c00137b9:	b8 0b 00 00 00       	mov    eax,0xb
c00137be:	56                   	push   esi
c00137bf:	53                   	push   ebx
c00137c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137d3:	80 f9 19             	cmp    cl,0x19
c00137d6:	77 37                	ja     c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137d8:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c00137df:	85 c9                	test   ecx,ecx
c00137e1:	74 2c                	je     c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e9:	85 c9                	test   ecx,ecx
c00137eb:	74 22                	je     c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137ed:	b8 06 00 00 00       	mov    eax,0x6
c00137f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137f6:	75 17                	jne    c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137fa:	89 f0                	mov    eax,esi
c00137fc:	83 c2 0d             	add    edx,0xd
c00137ff:	0f b6 f0             	movzx  esi,al
c0013802:	0f b6 db             	movzx  ebx,bl
c0013805:	56                   	push   esi
c0013806:	53                   	push   ebx
c0013807:	52                   	push   edx
c0013808:	51                   	push   ecx
c0013809:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	5b                   	pop    ebx
c0013810:	5e                   	pop    esi
c0013811:	5f                   	pop    edi
c0013812:	c3                   	ret    
c0013813:	90                   	nop

c0013814 <File::exists()>:
c0013814:	83 ec 0c             	sub    esp,0xc
c0013817:	31 c0                	xor    eax,eax
c0013819:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001381d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013824:	80 f9 19             	cmp    cl,0x19
c0013827:	77 24                	ja     c001384d <File::exists()+0x39>
c0013829:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013830:	85 c9                	test   ecx,ecx
c0013832:	74 19                	je     c001384d <File::exists()+0x39>
c0013834:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001383a:	85 c9                	test   ecx,ecx
c001383c:	74 0f                	je     c001384d <File::exists()+0x39>
c001383e:	83 c2 0d             	add    edx,0xd
c0013841:	50                   	push   eax
c0013842:	50                   	push   eax
c0013843:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013845:	52                   	push   edx
c0013846:	51                   	push   ecx
c0013847:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	83 c4 0c             	add    esp,0xc
c0013850:	c3                   	ret    
c0013851:	90                   	nop

c0013852 <File::stat(unsigned long long*, bool*)>:
c0013852:	56                   	push   esi
c0013853:	53                   	push   ebx
c0013854:	50                   	push   eax
c0013855:	b8 0b 00 00 00       	mov    eax,0xb
c001385a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001385e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013862:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013869:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001386d:	80 f9 19             	cmp    cl,0x19
c0013870:	77 3d                	ja     c00138af <File::stat(unsigned long long*, bool*)+0x5d>
c0013872:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013879:	85 c9                	test   ecx,ecx
c001387b:	74 32                	je     c00138af <File::stat(unsigned long long*, bool*)+0x5d>
c001387d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013883:	85 c9                	test   ecx,ecx
c0013885:	74 28                	je     c00138af <File::stat(unsigned long long*, bool*)+0x5d>
c0013887:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013889:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001388d:	74 13                	je     c00138a2 <File::stat(unsigned long long*, bool*)+0x50>
c001388f:	83 ec 04             	sub    esp,0x4
c0013892:	56                   	push   esi
c0013893:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013899:	51                   	push   ecx
c001389a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001389d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138a0:	eb 0a                	jmp    c00138ac <File::stat(unsigned long long*, bool*)+0x5a>
c00138a2:	53                   	push   ebx
c00138a3:	83 c2 0d             	add    edx,0xd
c00138a6:	56                   	push   esi
c00138a7:	52                   	push   edx
c00138a8:	51                   	push   ecx
c00138a9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	5a                   	pop    edx
c00138b0:	5b                   	pop    ebx
c00138b1:	5e                   	pop    esi
c00138b2:	c3                   	ret    

c00138b3 <Fs::setcwd(Process*, char*)>:
c00138b3:	55                   	push   ebp
c00138b4:	57                   	push   edi
c00138b5:	56                   	push   esi
c00138b6:	53                   	push   ebx
c00138b7:	81 ec 20 02 00 00    	sub    esp,0x220
c00138bd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138c4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138ca:	57                   	push   edi
c00138cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138d2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138d6:	56                   	push   esi
c00138d7:	e8 bc fa ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00138df:	e8 b0 ce fe ff       	call   c0000794 <strlen>
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	83 f8 02             	cmp    eax,0x2
c00138ea:	77 17                	ja     c0013903 <Fs::setcwd(Process*, char*)+0x50>
c00138ec:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138f1:	83 e8 41             	sub    eax,0x41
c00138f4:	83 f8 19             	cmp    eax,0x19
c00138f7:	76 24                	jbe    c001391d <Fs::setcwd(Process*, char*)+0x6a>
c00138f9:	b8 03 00 00 00       	mov    eax,0x3
c00138fe:	e9 e0 00 00 00       	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c0013903:	83 ec 0c             	sub    esp,0xc
c0013906:	56                   	push   esi
c0013907:	e8 88 ce fe ff       	call   c0000794 <strlen>
c001390c:	83 c4 10             	add    esp,0x10
c001390f:	83 f8 03             	cmp    eax,0x3
c0013912:	75 34                	jne    c0013948 <Fs::setcwd(Process*, char*)+0x95>
c0013914:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013919:	75 2d                	jne    c0013948 <Fs::setcwd(Process*, char*)+0x95>
c001391b:	eb cf                	jmp    c00138ec <Fs::setcwd(Process*, char*)+0x39>
c001391d:	8b 14 85 40 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd14c0]
c0013924:	b8 05 00 00 00       	mov    eax,0x5
c0013929:	85 d2                	test   edx,edx
c001392b:	0f 84 b2 00 00 00    	je     c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c0013931:	b8 06 00 00 00       	mov    eax,0x6
c0013936:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001393d:	0f 85 92 00 00 00    	jne    c00139d5 <Fs::setcwd(Process*, char*)+0x122>
c0013943:	e9 9b 00 00 00       	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	68 14 01 00 00       	push   0x114
c0013950:	e8 eb be ff ff       	call   c000f840 <malloc>
c0013955:	83 c4 0c             	add    esp,0xc
c0013958:	89 c3                	mov    ebx,eax
c001395a:	55                   	push   ebp
c001395b:	56                   	push   esi
c001395c:	50                   	push   eax
c001395d:	e8 e0 fb ff ff       	call   c0013542 <File::File(char const*, Process*)>
c0013962:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013967:	83 c4 0c             	add    esp,0xc
c001396a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001396e:	50                   	push   eax
c001396f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013973:	50                   	push   eax
c0013974:	53                   	push   ebx
c0013975:	e8 d8 fe ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001397a:	83 c4 10             	add    esp,0x10
c001397d:	83 f8 02             	cmp    eax,0x2
c0013980:	74 04                	je     c0013986 <Fs::setcwd(Process*, char*)+0xd3>
c0013982:	85 c0                	test   eax,eax
c0013984:	74 1c                	je     c00139a2 <Fs::setcwd(Process*, char*)+0xef>
c0013986:	b8 01 00 00 00       	mov    eax,0x1
c001398b:	85 db                	test   ebx,ebx
c001398d:	74 54                	je     c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c001398f:	83 ec 0c             	sub    esp,0xc
c0013992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013994:	53                   	push   ebx
c0013995:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013998:	83 c4 10             	add    esp,0x10
c001399b:	b8 01 00 00 00       	mov    eax,0x1
c00139a0:	eb 41                	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c00139a2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139a7:	75 1c                	jne    c00139c5 <Fs::setcwd(Process*, char*)+0x112>
c00139a9:	b8 02 00 00 00       	mov    eax,0x2
c00139ae:	85 db                	test   ebx,ebx
c00139b0:	74 31                	je     c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c00139b2:	83 ec 0c             	sub    esp,0xc
c00139b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b7:	53                   	push   ebx
c00139b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	b8 02 00 00 00       	mov    eax,0x2
c00139c3:	eb 1e                	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c00139c5:	85 db                	test   ebx,ebx
c00139c7:	74 0c                	je     c00139d5 <Fs::setcwd(Process*, char*)+0x122>
c00139c9:	83 ec 0c             	sub    esp,0xc
c00139cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139ce:	53                   	push   ebx
c00139cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139d2:	83 c4 10             	add    esp,0x10
c00139d5:	50                   	push   eax
c00139d6:	50                   	push   eax
c00139d7:	56                   	push   esi
c00139d8:	57                   	push   edi
c00139d9:	e8 56 ce fe ff       	call   c0000834 <strcpy>
c00139de:	83 c4 10             	add    esp,0x10
c00139e1:	31 c0                	xor    eax,eax
c00139e3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139e9:	5b                   	pop    ebx
c00139ea:	5e                   	pop    esi
c00139eb:	5f                   	pop    edi
c00139ec:	5d                   	pop    ebp
c00139ed:	c3                   	ret    

c00139ee <Directory::Directory(char const*, Process*)>:
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f5:	83 ec 08             	sub    esp,0x8
c00139f8:	6a 00                	push   0x0
c00139fa:	50                   	push   eax
c00139fb:	e8 a0 dd ff ff       	call   c00117a0 <UnixFile::UnixFile(int)>
c0013a00:	83 c4 10             	add    esp,0x10
c0013a03:	ba 74 ac 02 c0       	mov    edx,0xc002ac74
c0013a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0c:	89 10                	mov    DWORD PTR [eax],edx
c0013a0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	83 c0 0d             	add    eax,0xd
c0013a1f:	83 ec 04             	sub    esp,0x4
c0013a22:	52                   	push   edx
c0013a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a27:	50                   	push   eax
c0013a28:	e8 6b f9 ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a34:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a37:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a48:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a4c:	90                   	nop
c0013a4d:	83 c4 0c             	add    esp,0xc
c0013a50:	c3                   	ret    
c0013a51:	90                   	nop

c0013a52 <Directory::open()>:
c0013a52:	53                   	push   ebx
c0013a53:	b8 0b 00 00 00       	mov    eax,0xb
c0013a58:	83 ec 08             	sub    esp,0x8
c0013a5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a5f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a66:	80 fa 19             	cmp    dl,0x19
c0013a69:	77 3d                	ja     c0013aa8 <Directory::open()+0x56>
c0013a6b:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013a72:	85 d2                	test   edx,edx
c0013a74:	74 32                	je     c0013aa8 <Directory::open()+0x56>
c0013a76:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a7c:	85 d2                	test   edx,edx
c0013a7e:	74 28                	je     c0013aa8 <Directory::open()+0x56>
c0013a80:	b8 06 00 00 00       	mov    eax,0x6
c0013a85:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a89:	75 1d                	jne    c0013aa8 <Directory::open()+0x56>
c0013a8b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a91:	50                   	push   eax
c0013a92:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a94:	51                   	push   ecx
c0013a95:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a98:	51                   	push   ecx
c0013a99:	52                   	push   edx
c0013a9a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	85 c0                	test   eax,eax
c0013aa2:	75 04                	jne    c0013aa8 <Directory::open()+0x56>
c0013aa4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013aa8:	83 c4 08             	add    esp,0x8
c0013aab:	5b                   	pop    ebx
c0013aac:	c3                   	ret    
c0013aad:	90                   	nop

c0013aae <Directory::close()>:
c0013aae:	53                   	push   ebx
c0013aaf:	b8 0b 00 00 00       	mov    eax,0xb
c0013ab4:	83 ec 08             	sub    esp,0x8
c0013ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013abb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ac2:	80 fa 19             	cmp    dl,0x19
c0013ac5:	77 41                	ja     c0013b08 <Directory::close()+0x5a>
c0013ac7:	8b 1c 95 40 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd14c0]
c0013ace:	85 db                	test   ebx,ebx
c0013ad0:	74 36                	je     c0013b08 <Directory::close()+0x5a>
c0013ad2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013ad9:	74 2d                	je     c0013b08 <Directory::close()+0x5a>
c0013adb:	b8 05 00 00 00       	mov    eax,0x5
c0013ae0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013ae4:	74 22                	je     c0013b08 <Directory::close()+0x5a>
c0013ae6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013aea:	8b 04 95 40 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd14c0]
c0013af1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013af7:	53                   	push   ebx
c0013af8:	53                   	push   ebx
c0013af9:	8b 10                	mov    edx,DWORD PTR [eax]
c0013afb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b01:	50                   	push   eax
c0013b02:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b05:	83 c4 10             	add    esp,0x10
c0013b08:	83 c4 08             	add    esp,0x8
c0013b0b:	5b                   	pop    ebx
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Directory::unlink()>:
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	b8 0b 00 00 00       	mov    eax,0xb
c0013b16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b21:	80 f9 19             	cmp    cl,0x19
c0013b24:	77 2f                	ja     c0013b55 <Directory::unlink()+0x47>
c0013b26:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013b2d:	85 c9                	test   ecx,ecx
c0013b2f:	74 24                	je     c0013b55 <Directory::unlink()+0x47>
c0013b31:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b37:	85 c9                	test   ecx,ecx
c0013b39:	74 1a                	je     c0013b55 <Directory::unlink()+0x47>
c0013b3b:	b8 06 00 00 00       	mov    eax,0x6
c0013b40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b44:	75 0f                	jne    c0013b55 <Directory::unlink()+0x47>
c0013b46:	83 c2 0d             	add    edx,0xd
c0013b49:	50                   	push   eax
c0013b4a:	50                   	push   eax
c0013b4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b4d:	52                   	push   edx
c0013b4e:	51                   	push   ecx
c0013b4f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Directory::rename(char const*)>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b6d:	80 f9 19             	cmp    cl,0x19
c0013b70:	77 32                	ja     c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b72:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013b79:	85 c9                	test   ecx,ecx
c0013b7b:	74 27                	je     c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b83:	85 c9                	test   ecx,ecx
c0013b85:	74 1d                	je     c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b87:	b8 06 00 00 00       	mov    eax,0x6
c0013b8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b90:	75 12                	jne    c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b92:	83 c2 0d             	add    edx,0xd
c0013b95:	50                   	push   eax
c0013b96:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b9c:	52                   	push   edx
c0013b9d:	51                   	push   ecx
c0013b9e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	83 c4 0c             	add    esp,0xc
c0013ba7:	c3                   	ret    

c0013ba8 <Directory::exists()>:
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	31 c0                	xor    eax,eax
c0013bad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb8:	80 f9 19             	cmp    cl,0x19
c0013bbb:	77 24                	ja     c0013be1 <Directory::exists()+0x39>
c0013bbd:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013bc4:	85 c9                	test   ecx,ecx
c0013bc6:	74 19                	je     c0013be1 <Directory::exists()+0x39>
c0013bc8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bce:	85 c9                	test   ecx,ecx
c0013bd0:	74 0f                	je     c0013be1 <Directory::exists()+0x39>
c0013bd2:	83 c2 0d             	add    edx,0xd
c0013bd5:	50                   	push   eax
c0013bd6:	50                   	push   eax
c0013bd7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd9:	52                   	push   edx
c0013bda:	51                   	push   ecx
c0013bdb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	83 c4 0c             	add    esp,0xc
c0013be4:	c3                   	ret    
c0013be5:	90                   	nop

c0013be6 <Directory::read(dirent*)>:
c0013be6:	83 ec 1c             	sub    esp,0x1c
c0013be9:	b8 0b 00 00 00       	mov    eax,0xb
c0013bee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bf2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bf9:	80 fa 19             	cmp    dl,0x19
c0013bfc:	77 30                	ja     c0013c2e <Directory::read(dirent*)+0x48>
c0013bfe:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013c05:	85 d2                	test   edx,edx
c0013c07:	74 25                	je     c0013c2e <Directory::read(dirent*)+0x48>
c0013c09:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c10:	74 1c                	je     c0013c2e <Directory::read(dirent*)+0x48>
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c17:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c1b:	52                   	push   edx
c0013c1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c20:	6a 00                	push   0x0
c0013c22:	68 10 01 00 00       	push   0x110
c0013c27:	51                   	push   ecx
c0013c28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c2b:	83 c4 20             	add    esp,0x20
c0013c2e:	83 c4 1c             	add    esp,0x1c
c0013c31:	c3                   	ret    

c0013c32 <Directory::create()>:
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	b8 0b 00 00 00       	mov    eax,0xb
c0013c3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c3e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c45:	80 f9 19             	cmp    cl,0x19
c0013c48:	77 2f                	ja     c0013c79 <Directory::create()+0x47>
c0013c4a:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013c51:	85 c9                	test   ecx,ecx
c0013c53:	74 24                	je     c0013c79 <Directory::create()+0x47>
c0013c55:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c5b:	85 c9                	test   ecx,ecx
c0013c5d:	74 1a                	je     c0013c79 <Directory::create()+0x47>
c0013c5f:	b8 06 00 00 00       	mov    eax,0x6
c0013c64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c68:	75 0f                	jne    c0013c79 <Directory::create()+0x47>
c0013c6a:	83 c2 0d             	add    edx,0xd
c0013c6d:	50                   	push   eax
c0013c6e:	50                   	push   eax
c0013c6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c71:	52                   	push   edx
c0013c72:	51                   	push   ecx
c0013c73:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	83 c4 0c             	add    esp,0xc
c0013c7c:	c3                   	ret    
c0013c7d:	90                   	nop

c0013c7e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c7e:	b8 0a 00 00 00       	mov    eax,0xa
c0013c83:	c3                   	ret    

c0013c84 <Bus::Bus(char const*)>:
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8b:	83 ec 08             	sub    esp,0x8
c0013c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c92:	50                   	push   eax
c0013c93:	e8 68 09 00 00       	call   c0014600 <Device::Device(char const*)>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c0013ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca4:	89 10                	mov    DWORD PTR [eax],edx
c0013ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013caa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013cb4:	90                   	nop
c0013cb5:	83 c4 0c             	add    esp,0xc
c0013cb8:	c3                   	ret    
c0013cb9:	90                   	nop

c0013cba <Bus::~Bus()>:
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c0013cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc6:	89 10                	mov    DWORD PTR [eax],edx
c0013cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ccc:	83 ec 0c             	sub    esp,0xc
c0013ccf:	50                   	push   eax
c0013cd0:	e8 0d 06 00 00       	call   c00142e2 <Device::~Device()>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	90                   	nop
c0013cd9:	83 c4 0c             	add    esp,0xc
c0013cdc:	c3                   	ret    
c0013cdd:	90                   	nop

c0013cde <Bus::~Bus()>:
c0013cde:	83 ec 0c             	sub    esp,0xc
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce8:	e8 cd ff ff ff       	call   c0013cba <Bus::~Bus()>
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	83 ec 08             	sub    esp,0x8
c0013cf3:	68 58 01 00 00       	push   0x158
c0013cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cfc:	e8 09 f2 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013d01:	83 c4 10             	add    esp,0x10
c0013d04:	83 c4 0c             	add    esp,0xc
c0013d07:	c3                   	ret    

c0013d08 <Buzzer::Buzzer(char const*)>:
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0f:	83 ec 08             	sub    esp,0x8
c0013d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d16:	50                   	push   eax
c0013d17:	e8 e4 08 00 00       	call   c0014600 <Device::Device(char const*)>
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	ba bc ac 02 c0       	mov    edx,0xc002acbc
c0013d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d28:	89 10                	mov    DWORD PTR [eax],edx
c0013d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d46:	90                   	nop
c0013d47:	83 c4 0c             	add    esp,0xc
c0013d4a:	c3                   	ret    
c0013d4b:	90                   	nop

c0013d4c <Buzzer::~Buzzer()>:
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	ba bc ac 02 c0       	mov    edx,0xc002acbc
c0013d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d58:	89 10                	mov    DWORD PTR [eax],edx
c0013d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	50                   	push   eax
c0013d62:	e8 7b 05 00 00       	call   c00142e2 <Device::~Device()>
c0013d67:	83 c4 10             	add    esp,0x10
c0013d6a:	90                   	nop
c0013d6b:	83 c4 0c             	add    esp,0xc
c0013d6e:	c3                   	ret    
c0013d6f:	90                   	nop

c0013d70 <Buzzer::~Buzzer()>:
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	83 ec 0c             	sub    esp,0xc
c0013d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d7a:	e8 cd ff ff ff       	call   c0013d4c <Buzzer::~Buzzer()>
c0013d7f:	83 c4 10             	add    esp,0x10
c0013d82:	83 ec 08             	sub    esp,0x8
c0013d85:	68 5c 01 00 00       	push   0x15c
c0013d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d8e:	e8 77 f1 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013d93:	83 c4 10             	add    esp,0x10
c0013d96:	83 c4 0c             	add    esp,0xc
c0013d99:	c3                   	ret    

c0013d9a <Buzzer::stop()>:
c0013d9a:	83 ec 14             	sub    esp,0x14
c0013d9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013da3:	6a 00                	push   0x0
c0013da5:	50                   	push   eax
c0013da6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da9:	83 c4 1c             	add    esp,0x1c
c0013dac:	c3                   	ret    

c0013dad <beepThread(void*)>:
c0013dad:	53                   	push   ebx
c0013dae:	83 ec 08             	sub    esp,0x8
c0013db1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db5:	e8 be a0 00 00       	call   c001de78 <unlockScheduler()>
c0013dba:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013dbf:	52                   	push   edx
c0013dc0:	52                   	push   edx
c0013dc1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013dc7:	52                   	push   edx
c0013dc8:	50                   	push   eax
c0013dc9:	e8 f8 a5 00 00       	call   c001e3c6 <nanoSleep(unsigned long long)>
c0013dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd1:	e8 c4 ff ff ff       	call   c0013d9a <Buzzer::stop()>
c0013dd6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013dde:	83 c4 18             	add    esp,0x18
c0013de1:	5b                   	pop    ebx
c0013de2:	e9 25 a5 00 00       	jmp    c001e30c <blockTask(TaskState)>
c0013de7:	90                   	nop

c0013de8 <Buzzer::beep(int, int, bool)>:
c0013de8:	57                   	push   edi
c0013de9:	56                   	push   esi
c0013dea:	53                   	push   ebx
c0013deb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013def:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013df3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013df7:	52                   	push   edx
c0013df8:	52                   	push   edx
c0013df9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dff:	56                   	push   esi
c0013e00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	89 f8                	mov    eax,edi
c0013e08:	84 c0                	test   al,al
c0013e0a:	74 1f                	je     c0013e2b <Buzzer::beep(int, int, bool)+0x43>
c0013e0c:	50                   	push   eax
c0013e0d:	50                   	push   eax
c0013e0e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e14:	99                   	cdq    
c0013e15:	52                   	push   edx
c0013e16:	50                   	push   eax
c0013e17:	e8 aa a5 00 00       	call   c001e3c6 <nanoSleep(unsigned long long)>
c0013e1c:	83 c4 10             	add    esp,0x10
c0013e1f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e23:	5b                   	pop    ebx
c0013e24:	5e                   	pop    esi
c0013e25:	5f                   	pop    edi
c0013e26:	e9 6f ff ff ff       	jmp    c0013d9a <Buzzer::stop()>
c0013e2b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e31:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0013e36:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e3e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e42:	c7 44 24 14 ad 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013dad
c0013e4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e4e:	5b                   	pop    ebx
c0013e4f:	5e                   	pop    esi
c0013e50:	5f                   	pop    edi
c0013e51:	e9 52 a1 00 00       	jmp    c001dfa8 <Process::createThread(void (*)(void*), void*, int)>

c0013e56 <User::loadClockSettings(int)>:
c0013e56:	53                   	push   ebx
c0013e57:	83 ec 14             	sub    esp,0x14
c0013e5a:	68 14 01 00 00       	push   0x114
c0013e5f:	e8 dc b9 ff ff       	call   c000f840 <malloc>
c0013e64:	83 c4 0c             	add    esp,0xc
c0013e67:	89 c3                	mov    ebx,eax
c0013e69:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c0013e6f:	68 e4 ac 02 c0       	push   0xc002ace4
c0013e74:	50                   	push   eax
c0013e75:	e8 c8 f6 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c0013e7a:	58                   	pop    eax
c0013e7b:	5a                   	pop    edx
c0013e7c:	6a 01                	push   0x1
c0013e7e:	53                   	push   ebx
c0013e7f:	e8 22 f7 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c0013e84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e87:	e8 78 f7 ff ff       	call   c0013604 <File::close()>
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	85 db                	test   ebx,ebx
c0013e91:	74 0f                	je     c0013ea2 <User::loadClockSettings(int)+0x4c>
c0013e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e9c:	83 c4 08             	add    esp,0x8
c0013e9f:	5b                   	pop    ebx
c0013ea0:	ff e0                	jmp    eax
c0013ea2:	83 c4 08             	add    esp,0x8
c0013ea5:	5b                   	pop    ebx
c0013ea6:	c3                   	ret    
c0013ea7:	90                   	nop

c0013ea8 <Clock::Clock(char const*)>:
c0013ea8:	83 ec 0c             	sub    esp,0xc
c0013eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eaf:	83 ec 08             	sub    esp,0x8
c0013eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb6:	50                   	push   eax
c0013eb7:	e8 44 07 00 00       	call   c0014600 <Device::Device(char const*)>
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	89 10                	mov    DWORD PTR [eax],edx
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ed8:	90                   	nop
c0013ed9:	83 c4 0c             	add    esp,0xc
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Clock::~Clock()>:
c0013ede:	83 ec 0c             	sub    esp,0xc
c0013ee1:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eea:	89 10                	mov    DWORD PTR [eax],edx
c0013eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	50                   	push   eax
c0013ef4:	e8 e9 03 00 00       	call   c00142e2 <Device::~Device()>
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	90                   	nop
c0013efd:	83 c4 0c             	add    esp,0xc
c0013f00:	c3                   	ret    
c0013f01:	90                   	nop

c0013f02 <Clock::~Clock()>:
c0013f02:	83 ec 0c             	sub    esp,0xc
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f0c:	e8 cd ff ff ff       	call   c0013ede <Clock::~Clock()>
c0013f11:	83 c4 10             	add    esp,0x10
c0013f14:	83 ec 08             	sub    esp,0x8
c0013f17:	68 58 01 00 00       	push   0x158
c0013f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f20:	e8 e5 ef ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	83 c4 0c             	add    esp,0xc
c0013f2b:	c3                   	ret    

c0013f2c <Clock::timeInSecondsLocal()>:
c0013f2c:	53                   	push   ebx
c0013f2d:	83 ec 14             	sub    esp,0x14
c0013f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f34:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f36:	50                   	push   eax
c0013f37:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f3a:	0f b6 0d b8 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6b8
c0013f41:	03 0d bc e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6bc
c0013f47:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f4d:	89 cb                	mov    ebx,ecx
c0013f4f:	c1 fb 1f             	sar    ebx,0x1f
c0013f52:	01 c8                	add    eax,ecx
c0013f54:	11 da                	adc    edx,ebx
c0013f56:	83 c4 10             	add    esp,0x10
c0013f59:	31 c9                	xor    ecx,ecx
c0013f5b:	80 3d b9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6b9,0x0
c0013f62:	74 05                	je     c0013f69 <Clock::timeInSecondsLocal()+0x3d>
c0013f64:	b9 08 07 00 00       	mov    ecx,0x708
c0013f69:	31 db                	xor    ebx,ebx
c0013f6b:	01 c8                	add    eax,ecx
c0013f6d:	11 da                	adc    edx,ebx
c0013f6f:	83 c4 08             	add    esp,0x8
c0013f72:	5b                   	pop    ebx
c0013f73:	c3                   	ret    

c0013f74 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f74:	57                   	push   edi
c0013f75:	56                   	push   esi
c0013f76:	53                   	push   ebx
c0013f77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f85:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f88:	0f b6 05 b8 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e6b8
c0013f8f:	03 05 bc e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6bc
c0013f95:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f9b:	99                   	cdq    
c0013f9c:	29 c6                	sub    esi,eax
c0013f9e:	19 d7                	sbb    edi,edx
c0013fa0:	89 f0                	mov    eax,esi
c0013fa2:	89 fa                	mov    edx,edi
c0013fa4:	31 f6                	xor    esi,esi
c0013fa6:	80 3d b9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6b9,0x0
c0013fad:	74 05                	je     c0013fb4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013faf:	be 08 07 00 00       	mov    esi,0x708
c0013fb4:	31 ff                	xor    edi,edi
c0013fb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013fba:	29 f0                	sub    eax,esi
c0013fbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fc0:	19 fa                	sbb    edx,edi
c0013fc2:	89 d8                	mov    eax,ebx
c0013fc4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fc8:	5b                   	pop    ebx
c0013fc9:	5e                   	pop    esi
c0013fca:	5f                   	pop    edi
c0013fcb:	ff e0                	jmp    eax

c0013fcd <datetimeToSeconds(datetime_t)>:
c0013fcd:	55                   	push   ebp
c0013fce:	57                   	push   edi
c0013fcf:	56                   	push   esi
c0013fd0:	53                   	push   ebx
c0013fd1:	83 ec 14             	sub    esp,0x14
c0013fd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fd8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013fdc:	89 d3                	mov    ebx,edx
c0013fde:	0f b6 c6             	movzx  eax,dh
c0013fe1:	c1 eb 10             	shr    ebx,0x10
c0013fe4:	48                   	dec    eax
c0013fe5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013fea:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013fee:	0f b6 f5             	movzx  esi,ch
c0013ff1:	89 cf                	mov    edi,ecx
c0013ff3:	6b f6 3c             	imul   esi,esi,0x3c
c0013ff6:	c1 ef 10             	shr    edi,0x10
c0013ff9:	0f b6 c9             	movzx  ecx,cl
c0013ffc:	89 f8                	mov    eax,edi
c0013ffe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014004:	0f b6 f8             	movzx  edi,al
c0014007:	0f b6 d2             	movzx  edx,dl
c001400a:	01 fe                	add    esi,edi
c001400c:	01 f1                	add    ecx,esi
c001400e:	0f b7 f3             	movzx  esi,bx
c0014011:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014015:	c1 f9 1f             	sar    ecx,0x1f
c0014018:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001401d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014021:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0014026:	8b 0c 8d 40 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52c0]
c001402d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014031:	76 29                	jbe    c001405c <datetimeToSeconds(datetime_t)+0x8f>
c0014033:	f6 c3 03             	test   bl,0x3
c0014036:	75 24                	jne    c001405c <datetimeToSeconds(datetime_t)+0x8f>
c0014038:	31 d2                	xor    edx,edx
c001403a:	bf 64 00 00 00       	mov    edi,0x64
c001403f:	89 d8                	mov    eax,ebx
c0014041:	66 f7 f7             	div    di
c0014044:	66 85 d2             	test   dx,dx
c0014047:	75 12                	jne    c001405b <datetimeToSeconds(datetime_t)+0x8e>
c0014049:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001404f:	bf 90 01 00 00       	mov    edi,0x190
c0014054:	99                   	cdq    
c0014055:	f7 ff                	idiv   edi
c0014057:	85 d2                	test   edx,edx
c0014059:	75 01                	jne    c001405c <datetimeToSeconds(datetime_t)+0x8f>
c001405b:	41                   	inc    ecx
c001405c:	66 83 fb 46          	cmp    bx,0x46
c0014060:	76 45                	jbe    c00140a7 <datetimeToSeconds(datetime_t)+0xda>
c0014062:	bb 46 00 00 00       	mov    ebx,0x46
c0014067:	bf 64 00 00 00       	mov    edi,0x64
c001406c:	bd 90 01 00 00       	mov    ebp,0x190
c0014071:	b8 6d 01 00 00       	mov    eax,0x16d
c0014076:	f6 c3 03             	test   bl,0x3
c0014079:	75 23                	jne    c001409e <datetimeToSeconds(datetime_t)+0xd1>
c001407b:	89 d8                	mov    eax,ebx
c001407d:	99                   	cdq    
c001407e:	f7 ff                	idiv   edi
c0014080:	b8 6e 01 00 00       	mov    eax,0x16e
c0014085:	85 d2                	test   edx,edx
c0014087:	75 15                	jne    c001409e <datetimeToSeconds(datetime_t)+0xd1>
c0014089:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001408f:	99                   	cdq    
c0014090:	f7 fd                	idiv   ebp
c0014092:	83 fa 01             	cmp    edx,0x1
c0014095:	19 c0                	sbb    eax,eax
c0014097:	f7 d0                	not    eax
c0014099:	05 6e 01 00 00       	add    eax,0x16e
c001409e:	01 c1                	add    ecx,eax
c00140a0:	43                   	inc    ebx
c00140a1:	39 f3                	cmp    ebx,esi
c00140a3:	7c cc                	jl     c0014071 <datetimeToSeconds(datetime_t)+0xa4>
c00140a5:	eb 35                	jmp    c00140dc <datetimeToSeconds(datetime_t)+0x10f>
c00140a7:	74 33                	je     c00140dc <datetimeToSeconds(datetime_t)+0x10f>
c00140a9:	b8 45 00 00 00       	mov    eax,0x45
c00140ae:	89 c2                	mov    edx,eax
c00140b0:	83 e2 03             	and    edx,0x3
c00140b3:	39 f0                	cmp    eax,esi
c00140b5:	7e 0f                	jle    c00140c6 <datetimeToSeconds(datetime_t)+0xf9>
c00140b7:	83 fa 01             	cmp    edx,0x1
c00140ba:	19 d2                	sbb    edx,edx
c00140bc:	48                   	dec    eax
c00140bd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140c4:	eb e8                	jmp    c00140ae <datetimeToSeconds(datetime_t)+0xe1>
c00140c6:	b8 6d 01 00 00       	mov    eax,0x16d
c00140cb:	85 d2                	test   edx,edx
c00140cd:	75 0b                	jne    c00140da <datetimeToSeconds(datetime_t)+0x10d>
c00140cf:	66 83 fb 01          	cmp    bx,0x1
c00140d3:	19 c0                	sbb    eax,eax
c00140d5:	05 6e 01 00 00       	add    eax,0x16e
c00140da:	29 c1                	sub    ecx,eax
c00140dc:	b8 80 51 01 00       	mov    eax,0x15180
c00140e1:	f7 e9                	imul   ecx
c00140e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140eb:	83 c4 14             	add    esp,0x14
c00140ee:	5b                   	pop    ebx
c00140ef:	5e                   	pop    esi
c00140f0:	5f                   	pop    edi
c00140f1:	5d                   	pop    ebp
c00140f2:	c3                   	ret    
c00140f3:	90                   	nop

c00140f4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140f4:	57                   	push   edi
c00140f5:	56                   	push   esi
c00140f6:	53                   	push   ebx
c00140f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00140fd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014100:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014108:	e8 c0 fe ff ff       	call   c0013fcd <datetimeToSeconds(datetime_t)>
c001410d:	59                   	pop    ecx
c001410e:	0f b6 0d b8 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6b8
c0014115:	5b                   	pop    ebx
c0014116:	03 0d bc e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6bc
c001411c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014122:	89 cb                	mov    ebx,ecx
c0014124:	c1 fb 1f             	sar    ebx,0x1f
c0014127:	29 c8                	sub    eax,ecx
c0014129:	19 da                	sbb    edx,ebx
c001412b:	31 c9                	xor    ecx,ecx
c001412d:	80 3d b9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6b9,0x0
c0014134:	74 05                	je     c001413b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014136:	b9 08 07 00 00       	mov    ecx,0x708
c001413b:	31 db                	xor    ebx,ebx
c001413d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014141:	29 c8                	sub    eax,ecx
c0014143:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014147:	19 da                	sbb    edx,ebx
c0014149:	89 f8                	mov    eax,edi
c001414b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001414f:	5b                   	pop    ebx
c0014150:	5e                   	pop    esi
c0014151:	5f                   	pop    edi
c0014152:	ff e0                	jmp    eax

c0014154 <secondsToDatetime(unsigned long long)>:
c0014154:	55                   	push   ebp
c0014155:	57                   	push   edi
c0014156:	56                   	push   esi
c0014157:	53                   	push   ebx
c0014158:	83 ec 1c             	sub    esp,0x1c
c001415b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001415f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014163:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014167:	6a 00                	push   0x0
c0014169:	68 80 51 01 00       	push   0x15180
c001416e:	55                   	push   ebp
c001416f:	57                   	push   edi
c0014170:	e8 d7 28 01 00       	call   c0026a4c <__udivdi3>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001417e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014182:	6a 00                	push   0x0
c0014184:	68 80 51 01 00       	push   0x15180
c0014189:	55                   	push   ebp
c001418a:	57                   	push   edi
c001418b:	bf 10 0e 00 00       	mov    edi,0xe10
c0014190:	e8 b7 29 01 00       	call   c0026b4c <__umoddi3>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	99                   	cdq    
c0014199:	f7 ff                	idiv   edi
c001419b:	bf 3c 00 00 00       	mov    edi,0x3c
c00141a0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141a3:	89 d0                	mov    eax,edx
c00141a5:	99                   	cdq    
c00141a6:	f7 ff                	idiv   edi
c00141a8:	85 db                	test   ebx,ebx
c00141aa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141ad:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141b0:	79 11                	jns    c00141c3 <secondsToDatetime(unsigned long long)+0x6f>
c00141b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00141b6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141bc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141c1:	eb 07                	jmp    c00141ca <secondsToDatetime(unsigned long long)+0x76>
c00141c3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141c8:	89 d8                	mov    eax,ebx
c00141ca:	bf b4 05 00 00       	mov    edi,0x5b4
c00141cf:	99                   	cdq    
c00141d0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141d5:	f7 f9                	idiv   ecx
c00141d7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141e0:	31 d2                	xor    edx,edx
c00141e2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141ea:	01 c3                	add    ebx,eax
c00141ec:	89 d8                	mov    eax,ebx
c00141ee:	f7 f1                	div    ecx
c00141f0:	31 d2                	xor    edx,edx
c00141f2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141f5:	89 d8                	mov    eax,ebx
c00141f7:	f7 f7                	div    edi
c00141f9:	31 d2                	xor    edx,edx
c00141fb:	29 c1                	sub    ecx,eax
c00141fd:	89 d8                	mov    eax,ebx
c00141ff:	f7 f5                	div    ebp
c0014201:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014206:	29 c1                	sub    ecx,eax
c0014208:	31 d2                	xor    edx,edx
c001420a:	89 c8                	mov    eax,ecx
c001420c:	f7 f5                	div    ebp
c001420e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014217:	31 d2                	xor    edx,edx
c0014219:	89 c8                	mov    eax,ecx
c001421b:	f7 f5                	div    ebp
c001421d:	31 d2                	xor    edx,edx
c001421f:	01 c3                	add    ebx,eax
c0014221:	89 c8                	mov    eax,ecx
c0014223:	f7 f7                	div    edi
c0014225:	bf 99 00 00 00       	mov    edi,0x99
c001422a:	29 c3                	sub    ebx,eax
c001422c:	31 d2                	xor    edx,edx
c001422e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014236:	29 c3                	sub    ebx,eax
c0014238:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001423b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001423e:	bb 05 00 00 00       	mov    ebx,0x5
c0014243:	83 c1 02             	add    ecx,0x2
c0014246:	89 c8                	mov    eax,ecx
c0014248:	f7 f7                	div    edi
c001424a:	31 d2                	xor    edx,edx
c001424c:	89 c7                	mov    edi,eax
c001424e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014254:	83 c0 02             	add    eax,0x2
c0014257:	f7 f3                	div    ebx
c0014259:	89 eb                	mov    ebx,ebp
c001425b:	29 c3                	sub    ebx,eax
c001425d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014263:	88 1e                	mov    BYTE PTR [esi],bl
c0014265:	19 c0                	sbb    eax,eax
c0014267:	31 d2                	xor    edx,edx
c0014269:	83 e0 0c             	and    eax,0xc
c001426c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014270:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014278:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001427c:	83 f9 01             	cmp    ecx,0x1
c001427f:	0f 96 c2             	setbe  dl
c0014282:	41                   	inc    ecx
c0014283:	01 d0                	add    eax,edx
c0014285:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014288:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001428c:	83 c4 1c             	add    esp,0x1c
c001428f:	89 f0                	mov    eax,esi
c0014291:	5b                   	pop    ebx
c0014292:	5e                   	pop    esi
c0014293:	5f                   	pop    edi
c0014294:	5d                   	pop    ebp
c0014295:	c2 04 00             	ret    0x4

c0014298 <Clock::timeInDatetimeLocal()>:
c0014298:	53                   	push   ebx
c0014299:	83 ec 14             	sub    esp,0x14
c001429c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142a4:	e8 83 fc ff ff       	call   c0013f2c <Clock::timeInSecondsLocal()>
c00142a9:	83 c4 0c             	add    esp,0xc
c00142ac:	52                   	push   edx
c00142ad:	50                   	push   eax
c00142ae:	53                   	push   ebx
c00142af:	e8 a0 fe ff ff       	call   c0014154 <secondsToDatetime(unsigned long long)>
c00142b4:	89 d8                	mov    eax,ebx
c00142b6:	83 c4 14             	add    esp,0x14
c00142b9:	5b                   	pop    ebx
c00142ba:	c2 04 00             	ret    0x4
c00142bd:	90                   	nop

c00142be <Device::hibernate()>:
c00142be:	c3                   	ret    
c00142bf:	90                   	nop

c00142c0 <Device::wake()>:
c00142c0:	c3                   	ret    
c00142c1:	90                   	nop

c00142c2 <Device::detect()>:
c00142c2:	c3                   	ret    
c00142c3:	90                   	nop

c00142c4 <Device::disableLegacy()>:
c00142c4:	c3                   	ret    
c00142c5:	90                   	nop

c00142c6 <Device::powerSaving(PowerSavingLevel)>:
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <DriverlessDevice::close(int, int, void*)>:
c00142c8:	31 c0                	xor    eax,eax
c00142ca:	c3                   	ret    
c00142cb:	90                   	nop

c00142cc <DriverlessDevice::detect()>:
c00142cc:	c3                   	ret    
c00142cd:	90                   	nop

c00142ce <DriverlessDevice::open(int, int, void*)>:
c00142ce:	83 ec 18             	sub    esp,0x18
c00142d1:	68 70 ad 02 c0       	push   0xc002ad70
c00142d6:	e8 c0 63 00 00       	call   c001a69b <Krnl::panic(char const*)>
c00142db:	83 c8 ff             	or     eax,0xffffffff
c00142de:	83 c4 1c             	add    esp,0x1c
c00142e1:	c3                   	ret    

c00142e2 <Device::~Device()>:
c00142e2:	ba 98 ad 02 c0       	mov    edx,0xc002ad98
c00142e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142eb:	89 10                	mov    DWORD PTR [eax],edx
c00142ed:	90                   	nop
c00142ee:	c3                   	ret    
c00142ef:	90                   	nop

c00142f0 <Device::~Device()>:
c00142f0:	83 ec 0c             	sub    esp,0xc
c00142f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142f7:	e8 e6 ff ff ff       	call   c00142e2 <Device::~Device()>
c00142fc:	83 c4 04             	add    esp,0x4
c00142ff:	83 ec 08             	sub    esp,0x8
c0014302:	68 58 01 00 00       	push   0x158
c0014307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001430b:	e8 fa eb ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	83 c4 0c             	add    esp,0xc
c0014316:	c3                   	ret    
c0014317:	90                   	nop

c0014318 <Device::findAndLoadDriver()>:
c0014318:	c3                   	ret    
c0014319:	90                   	nop

c001431a <Device::preOpenPCI(PCIDeviceInfo)>:
c001431a:	57                   	push   edi
c001431b:	b9 09 00 00 00       	mov    ecx,0x9
c0014320:	56                   	push   esi
c0014321:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014325:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014329:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014333:	81 c7 18 01 00 00    	add    edi,0x118
c0014339:	fc                   	cld    
c001433a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001433c:	5e                   	pop    esi
c001433d:	5f                   	pop    edi
c001433e:	c3                   	ret    
c001433f:	90                   	nop

c0014340 <Device::preOpenACPI(void*, char*, char*)>:
c0014340:	56                   	push   esi
c0014341:	53                   	push   ebx
c0014342:	83 ec 08             	sub    esp,0x8
c0014345:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014349:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001434d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001435b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014361:	6a 1e                	push   0x1e
c0014363:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014369:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001436d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014373:	50                   	push   eax
c0014374:	e8 cb c3 fe ff       	call   c0000744 <memcpy>
c0014379:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001437d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014381:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014389:	83 c4 14             	add    esp,0x14
c001438c:	5b                   	pop    ebx
c001438d:	5e                   	pop    esi
c001438e:	e9 b1 c3 fe ff       	jmp    c0000744 <memcpy>
c0014393:	90                   	nop

c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014398:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001439d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143a4:	75 0b                	jne    c00143b1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00143a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143af:	eb 1e                	jmp    c00143cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143b1:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00143b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143bc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143c4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143cc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143cf:	ff e0                	jmp    eax
c00143d1:	90                   	nop

c00143d2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143d6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143db:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143e2:	75 0b                	jne    c00143ef <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00143e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ea:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143ed:	eb 1e                	jmp    c001440d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143ef:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00143f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143fa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014400:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014402:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001440a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001440d:	ff e0                	jmp    eax
c001440f:	90                   	nop

c0014410 <Device::addChild(Device*)>:
c0014410:	53                   	push   ebx
c0014411:	83 ec 08             	sub    esp,0x8
c0014414:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014418:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001441c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014422:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014428:	8b 13                	mov    edx,DWORD PTR [ebx]
c001442a:	85 d2                	test   edx,edx
c001442c:	74 04                	je     c0014432 <Device::addChild(Device*)+0x22>
c001442e:	89 d3                	mov    ebx,edx
c0014430:	eb f6                	jmp    c0014428 <Device::addChild(Device*)+0x18>
c0014432:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014435:	83 ec 0c             	sub    esp,0xc
c0014438:	6a 08                	push   0x8
c001443a:	e8 01 b4 ff ff       	call   c000f840 <malloc>
c001443f:	89 03                	mov    DWORD PTR [ebx],eax
c0014441:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014447:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001444e:	83 c4 18             	add    esp,0x18
c0014451:	5b                   	pop    ebx
c0014452:	c3                   	ret    
c0014453:	90                   	nop

c0014454 <Device::removeAllChildren()>:
c0014454:	56                   	push   esi
c0014455:	53                   	push   ebx
c0014456:	52                   	push   edx
c0014457:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001445b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014461:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014464:	74 17                	je     c001447d <Device::removeAllChildren()+0x29>
c0014466:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014469:	85 c0                	test   eax,eax
c001446b:	74 0c                	je     c0014479 <Device::removeAllChildren()+0x25>
c001446d:	83 ec 0c             	sub    esp,0xc
c0014470:	8b 10                	mov    edx,DWORD PTR [eax]
c0014472:	50                   	push   eax
c0014473:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014476:	83 c4 10             	add    esp,0x10
c0014479:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001447b:	eb e4                	jmp    c0014461 <Device::removeAllChildren()+0xd>
c001447d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014483:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014489:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001448f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014496:	58                   	pop    eax
c0014497:	5b                   	pop    ebx
c0014498:	5e                   	pop    esi
c0014499:	c3                   	ret    

c001449a <Device::hibernateAll()>:
c001449a:	53                   	push   ebx
c001449b:	83 ec 14             	sub    esp,0x14
c001449e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a4:	53                   	push   ebx
c00144a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ae:	83 c4 10             	add    esp,0x10
c00144b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b4:	74 0f                	je     c00144c5 <Device::hibernateAll()+0x2b>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144bc:	e8 d9 ff ff ff       	call   c001449a <Device::hibernateAll()>
c00144c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c3:	eb e9                	jmp    c00144ae <Device::hibernateAll()+0x14>
c00144c5:	83 c4 08             	add    esp,0x8
c00144c8:	5b                   	pop    ebx
c00144c9:	c3                   	ret    

c00144ca <Device::wakeAll()>:
c00144ca:	53                   	push   ebx
c00144cb:	83 ec 14             	sub    esp,0x14
c00144ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d4:	53                   	push   ebx
c00144d5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144e4:	74 0f                	je     c00144f5 <Device::wakeAll()+0x2b>
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ec:	e8 d9 ff ff ff       	call   c00144ca <Device::wakeAll()>
c00144f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f3:	eb e9                	jmp    c00144de <Device::wakeAll()+0x14>
c00144f5:	83 c4 08             	add    esp,0x8
c00144f8:	5b                   	pop    ebx
c00144f9:	c3                   	ret    

c00144fa <Device::detectAll()>:
c00144fa:	53                   	push   ebx
c00144fb:	83 ec 14             	sub    esp,0x14
c00144fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014502:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014504:	53                   	push   ebx
c0014505:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014508:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014514:	74 0f                	je     c0014525 <Device::detectAll()+0x2b>
c0014516:	83 ec 0c             	sub    esp,0xc
c0014519:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001451c:	e8 d9 ff ff ff       	call   c00144fa <Device::detectAll()>
c0014521:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014523:	eb e9                	jmp    c001450e <Device::detectAll()+0x14>
c0014525:	83 c4 08             	add    esp,0x8
c0014528:	5b                   	pop    ebx
c0014529:	c3                   	ret    

c001452a <Device::disableLegacyAll()>:
c001452a:	53                   	push   ebx
c001452b:	83 ec 14             	sub    esp,0x14
c001452e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014532:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014534:	53                   	push   ebx
c0014535:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014538:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001453e:	83 c4 10             	add    esp,0x10
c0014541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014544:	74 0f                	je     c0014555 <Device::disableLegacyAll()+0x2b>
c0014546:	83 ec 0c             	sub    esp,0xc
c0014549:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001454c:	e8 d9 ff ff ff       	call   c001452a <Device::disableLegacyAll()>
c0014551:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014553:	eb e9                	jmp    c001453e <Device::disableLegacyAll()+0x14>
c0014555:	83 c4 08             	add    esp,0x8
c0014558:	5b                   	pop    ebx
c0014559:	c3                   	ret    

c001455a <Device::loadDriversForAll()>:
c001455a:	53                   	push   ebx
c001455b:	83 ec 08             	sub    esp,0x8
c001455e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014562:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014568:	8b 18                	mov    ebx,DWORD PTR [eax]
c001456a:	85 db                	test   ebx,ebx
c001456c:	74 12                	je     c0014580 <Device::loadDriversForAll()+0x26>
c001456e:	83 ec 0c             	sub    esp,0xc
c0014571:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014574:	e8 e1 ff ff ff       	call   c001455a <Device::loadDriversForAll()>
c0014579:	83 c4 10             	add    esp,0x10
c001457c:	89 d8                	mov    eax,ebx
c001457e:	eb e8                	jmp    c0014568 <Device::loadDriversForAll()+0xe>
c0014580:	83 c4 08             	add    esp,0x8
c0014583:	5b                   	pop    ebx
c0014584:	c3                   	ret    
c0014585:	90                   	nop

c0014586 <Device::closeAll()>:
c0014586:	53                   	push   ebx
c0014587:	83 ec 08             	sub    esp,0x8
c001458a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001458e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014590:	6a 00                	push   0x0
c0014592:	6a 00                	push   0x0
c0014594:	6a 00                	push   0x0
c0014596:	53                   	push   ebx
c0014597:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001459a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145a0:	83 c4 10             	add    esp,0x10
c00145a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145a6:	74 0f                	je     c00145b7 <Device::closeAll()+0x31>
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145ae:	e8 d3 ff ff ff       	call   c0014586 <Device::closeAll()>
c00145b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145b5:	eb e9                	jmp    c00145a0 <Device::closeAll()+0x1a>
c00145b7:	83 c4 08             	add    esp,0x8
c00145ba:	5b                   	pop    ebx
c00145bb:	c3                   	ret    

c00145bc <Device::powerSavingAll(PowerSavingLevel)>:
c00145bc:	56                   	push   esi
c00145bd:	53                   	push   ebx
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145c5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145dc:	74 0f                	je     c00145ed <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145de:	52                   	push   edx
c00145df:	52                   	push   edx
c00145e0:	56                   	push   esi
c00145e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145e4:	e8 d3 ff ff ff       	call   c00145bc <Device::powerSavingAll(PowerSavingLevel)>
c00145e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145eb:	eb e9                	jmp    c00145d6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145ed:	58                   	pop    eax
c00145ee:	5b                   	pop    ebx
c00145ef:	5e                   	pop    esi
c00145f0:	c3                   	ret    
c00145f1:	90                   	nop

c00145f2 <Device::setName(char const*)>:
c00145f2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145fa:	e9 35 c2 fe ff       	jmp    c0000834 <strcpy>
c00145ff:	90                   	nop

c0014600 <Device::Device(char const*)>:
c0014600:	83 ec 1c             	sub    esp,0x1c
c0014603:	ba 98 ad 02 c0       	mov    edx,0xc002ad98
c0014608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460c:	89 10                	mov    DWORD PTR [eax],edx
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001462a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014646:	83 ec 08             	sub    esp,0x8
c0014649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001464d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014651:	e8 9c ff ff ff       	call   c00145f2 <Device::setName(char const*)>
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014661:	83 ec 0c             	sub    esp,0xc
c0014664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014668:	e8 d3 b1 ff ff       	call   c000f840 <malloc>
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014676:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001467d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014681:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014691:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146f6:	90                   	nop
c00146f7:	83 c4 1c             	add    esp,0x1c
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <Device::getName()>:
c00146fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014700:	05 d0 00 00 00       	add    eax,0xd0
c0014705:	c3                   	ret    

c0014706 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470d:	83 ec 08             	sub    esp,0x8
c0014710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014714:	50                   	push   eax
c0014715:	e8 e6 fe ff ff       	call   c0014600 <Device::Device(char const*)>
c001471a:	83 c4 10             	add    esp,0x10
c001471d:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	89 10                	mov    DWORD PTR [eax],edx
c0014728:	90                   	nop
c0014729:	83 c4 0c             	add    esp,0xc
c001472c:	c3                   	ret    
c001472d:	90                   	nop

c001472e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001472e:	57                   	push   edi
c001472f:	56                   	push   esi
c0014730:	53                   	push   ebx
c0014731:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014735:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014739:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001473d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014743:	75 0c                	jne    c0014751 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014745:	52                   	push   edx
c0014746:	52                   	push   edx
c0014747:	53                   	push   ebx
c0014748:	56                   	push   esi
c0014749:	e8 3c 42 01 00       	call   c002898a <LinkedList<Device>::addElement(Device*)>
c001474e:	83 c4 10             	add    esp,0x10
c0014751:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014757:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001475a:	74 12                	je     c001476e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001475c:	50                   	push   eax
c001475d:	57                   	push   edi
c001475e:	56                   	push   esi
c001475f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014762:	e8 c7 ff ff ff       	call   c001472e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014767:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014769:	83 c4 10             	add    esp,0x10
c001476c:	eb e9                	jmp    c0014757 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001476e:	5b                   	pop    ebx
c001476f:	5e                   	pop    esi
c0014770:	5f                   	pop    edi
c0014771:	c3                   	ret    

c0014772 <getDevicesOfType(DeviceType)>:
c0014772:	53                   	push   ebx
c0014773:	83 ec 14             	sub    esp,0x14
c0014776:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001477a:	53                   	push   ebx
c001477b:	e8 e6 42 01 00       	call   c0028a66 <LinkedList<Device>::LinkedList()>
c0014780:	83 c4 0c             	add    esp,0xc
c0014783:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014787:	53                   	push   ebx
c0014788:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c001478e:	e8 9b ff ff ff       	call   c001472e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014793:	89 d8                	mov    eax,ebx
c0014795:	83 c4 18             	add    esp,0x18
c0014798:	5b                   	pop    ebx
c0014799:	c2 04 00             	ret    0x4

c001479c <HardDiskController::HardDiskController(char const*)>:
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a3:	83 ec 08             	sub    esp,0x8
c00147a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147aa:	50                   	push   eax
c00147ab:	e8 50 fe ff ff       	call   c0014600 <Device::Device(char const*)>
c00147b0:	83 c4 10             	add    esp,0x10
c00147b3:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	89 10                	mov    DWORD PTR [eax],edx
c00147be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147cc:	90                   	nop
c00147cd:	83 c4 0c             	add    esp,0xc
c00147d0:	c3                   	ret    
c00147d1:	90                   	nop

c00147d2 <HardDiskController::~HardDiskController()>:
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	89 10                	mov    DWORD PTR [eax],edx
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	50                   	push   eax
c00147e8:	e8 f5 fa ff ff       	call   c00142e2 <Device::~Device()>
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	90                   	nop
c00147f1:	83 c4 0c             	add    esp,0xc
c00147f4:	c3                   	ret    
c00147f5:	90                   	nop

c00147f6 <HardDiskController::~HardDiskController()>:
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	83 ec 0c             	sub    esp,0xc
c00147fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014800:	e8 cd ff ff ff       	call   c00147d2 <HardDiskController::~HardDiskController()>
c0014805:	83 c4 10             	add    esp,0x10
c0014808:	83 ec 08             	sub    esp,0x8
c001480b:	68 58 01 00 00       	push   0x158
c0014810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014814:	e8 f1 e6 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0014819:	83 c4 10             	add    esp,0x10
c001481c:	83 c4 0c             	add    esp,0xc
c001481f:	c3                   	ret    

c0014820 <PhysicalDisk::eject()>:
c0014820:	83 ec 18             	sub    esp,0x18
c0014823:	68 14 ae 02 c0       	push   0xc002ae14
c0014828:	e8 bd e7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001482d:	83 c8 ff             	or     eax,0xffffffff
c0014830:	83 c4 1c             	add    esp,0x1c
c0014833:	c3                   	ret    

c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014834:	83 ec 0c             	sub    esp,0xc
c0014837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483b:	83 ec 08             	sub    esp,0x8
c001483e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014842:	50                   	push   eax
c0014843:	e8 b8 fd ff ff       	call   c0014600 <Device::Device(char const*)>
c0014848:	83 c4 10             	add    esp,0x10
c001484b:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0014850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014854:	89 10                	mov    DWORD PTR [eax],edx
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014865:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001486c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014870:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001487a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014882:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014896:	90                   	nop
c0014897:	83 c4 0c             	add    esp,0xc
c001489a:	c3                   	ret    
c001489b:	90                   	nop

c001489c <PhysicalDisk::startCache()>:
c001489c:	56                   	push   esi
c001489d:	53                   	push   ebx
c001489e:	83 ec 10             	sub    esp,0x10
c00148a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148a5:	6a 44                	push   0x44
c00148a7:	e8 94 af ff ff       	call   c000f840 <malloc>
c00148ac:	89 c6                	mov    esi,eax
c00148ae:	58                   	pop    eax
c00148af:	5a                   	pop    edx
c00148b0:	53                   	push   ebx
c00148b1:	56                   	push   esi
c00148b2:	e8 39 27 00 00       	call   c0016ff0 <VCache::VCache(PhysicalDisk*)>
c00148b7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148bd:	83 c4 14             	add    esp,0x14
c00148c0:	5b                   	pop    ebx
c00148c1:	5e                   	pop    esi
c00148c2:	c3                   	ret    
c00148c3:	90                   	nop

c00148c4 <PhysicalDisk::~PhysicalDisk()>:
c00148c4:	83 ec 0c             	sub    esp,0xc
c00148c7:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c00148cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d0:	89 10                	mov    DWORD PTR [eax],edx
c00148d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d6:	83 ec 0c             	sub    esp,0xc
c00148d9:	50                   	push   eax
c00148da:	e8 03 fa ff ff       	call   c00142e2 <Device::~Device()>
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	90                   	nop
c00148e3:	83 c4 0c             	add    esp,0xc
c00148e6:	c3                   	ret    
c00148e7:	90                   	nop

c00148e8 <PhysicalDisk::~PhysicalDisk()>:
c00148e8:	83 ec 0c             	sub    esp,0xc
c00148eb:	83 ec 0c             	sub    esp,0xc
c00148ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f2:	e8 cd ff ff ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	83 ec 08             	sub    esp,0x8
c00148fd:	68 6c 01 00 00       	push   0x16c
c0014902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014906:	e8 ff e5 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	83 c4 0c             	add    esp,0xc
c0014911:	c3                   	ret    

c0014912 <FPU::FPU(char const*)>:
c0014912:	83 ec 0c             	sub    esp,0xc
c0014915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014919:	83 ec 08             	sub    esp,0x8
c001491c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014920:	50                   	push   eax
c0014921:	e8 da fc ff ff       	call   c0014600 <Device::Device(char const*)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c001492e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014932:	89 10                	mov    DWORD PTR [eax],edx
c0014934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014938:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014942:	90                   	nop
c0014943:	83 c4 0c             	add    esp,0xc
c0014946:	c3                   	ret    
c0014947:	90                   	nop

c0014948 <FPU::~FPU()>:
c0014948:	83 ec 0c             	sub    esp,0xc
c001494b:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c0014950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014954:	89 10                	mov    DWORD PTR [eax],edx
c0014956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001495a:	83 ec 0c             	sub    esp,0xc
c001495d:	50                   	push   eax
c001495e:	e8 7f f9 ff ff       	call   c00142e2 <Device::~Device()>
c0014963:	83 c4 10             	add    esp,0x10
c0014966:	90                   	nop
c0014967:	83 c4 0c             	add    esp,0xc
c001496a:	c3                   	ret    
c001496b:	90                   	nop

c001496c <FPU::~FPU()>:
c001496c:	83 ec 0c             	sub    esp,0xc
c001496f:	83 ec 0c             	sub    esp,0xc
c0014972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014976:	e8 cd ff ff ff       	call   c0014948 <FPU::~FPU()>
c001497b:	83 c4 10             	add    esp,0x10
c001497e:	83 ec 08             	sub    esp,0x8
c0014981:	68 58 01 00 00       	push   0x158
c0014986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001498a:	e8 7b e5 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	83 c4 0c             	add    esp,0xc
c0014995:	c3                   	ret    

c0014996 <setupFPU()>:
c0014996:	53                   	push   ebx
c0014997:	83 ec 08             	sub    esp,0x8
c001499a:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c00149a0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149a7:	74 19                	je     c00149c2 <setupFPU()+0x2c>
c00149a9:	83 ec 0c             	sub    esp,0xc
c00149ac:	68 58 01 00 00       	push   0x158
c00149b1:	e8 8a ae ff ff       	call   c000f840 <malloc>
c00149b6:	89 c3                	mov    ebx,eax
c00149b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149bb:	e8 1c 0c 01 00       	call   c00255dc <AVX::AVX()>
c00149c0:	eb 5b                	jmp    c0014a1d <setupFPU()+0x87>
c00149c2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149c8:	84 c0                	test   al,al
c00149ca:	79 19                	jns    c00149e5 <setupFPU()+0x4f>
c00149cc:	83 ec 0c             	sub    esp,0xc
c00149cf:	68 58 01 00 00       	push   0x158
c00149d4:	e8 67 ae ff ff       	call   c000f840 <malloc>
c00149d9:	89 c3                	mov    ebx,eax
c00149db:	89 04 24             	mov    DWORD PTR [esp],eax
c00149de:	e8 1f 0d 01 00       	call   c0025702 <SSE::SSE()>
c00149e3:	eb 38                	jmp    c0014a1d <setupFPU()+0x87>
c00149e5:	a8 20                	test   al,0x20
c00149e7:	74 19                	je     c0014a02 <setupFPU()+0x6c>
c00149e9:	83 ec 0c             	sub    esp,0xc
c00149ec:	68 58 01 00 00       	push   0x158
c00149f1:	e8 4a ae ff ff       	call   c000f840 <malloc>
c00149f6:	89 c3                	mov    ebx,eax
c00149f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149fb:	e8 6c 0c 01 00       	call   c002566c <MMX::MMX()>
c0014a00:	eb 1b                	jmp    c0014a1d <setupFPU()+0x87>
c0014a02:	a8 10                	test   al,0x10
c0014a04:	74 1c                	je     c0014a22 <setupFPU()+0x8c>
c0014a06:	83 ec 0c             	sub    esp,0xc
c0014a09:	68 58 01 00 00       	push   0x158
c0014a0e:	e8 2d ae ff ff       	call   c000f840 <malloc>
c0014a13:	89 c3                	mov    ebx,eax
c0014a15:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a18:	e8 73 0d 01 00       	call   c0025790 <x87::x87()>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	eb 24                	jmp    c0014a46 <setupFPU()+0xb0>
c0014a22:	83 e0 ef             	and    eax,0xffffffef
c0014a25:	83 ec 0c             	sub    esp,0xc
c0014a28:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a2e:	68 74 ae 02 c0       	push   0xc002ae74
c0014a33:	e8 b2 e5 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014a38:	0f 20 c0             	mov    eax,cr0
c0014a3b:	83 c8 04             	or     eax,0x4
c0014a3e:	0f 22 c0             	mov    cr0,eax
c0014a41:	31 db                	xor    ebx,ebx
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	89 d8                	mov    eax,ebx
c0014a48:	83 c4 08             	add    esp,0x8
c0014a4b:	5b                   	pop    ebx
c0014a4c:	c3                   	ret    
c0014a4d:	90                   	nop

c0014a4e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a56:	c1 e0 04             	shl    eax,0x4
c0014a59:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a5d:	8d 50 10             	lea    edx,[eax+0x10]
c0014a60:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a66:	74 08                	je     c0014a70 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a68:	83 c0 04             	add    eax,0x4
c0014a6b:	39 d0                	cmp    eax,edx
c0014a6d:	75 f1                	jne    c0014a60 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a6f:	c3                   	ret    
c0014a70:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a7a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a84:	eb e2                	jmp    c0014a68 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a86 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a86:	57                   	push   edi
c0014a87:	31 c0                	xor    eax,eax
c0014a89:	56                   	push   esi
c0014a8a:	53                   	push   ebx
c0014a8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a97:	89 da                	mov    edx,ebx
c0014a99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a9d:	c1 e2 04             	shl    edx,0x4
c0014aa0:	01 ca                	add    edx,ecx
c0014aa2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014aaa:	74 16                	je     c0014ac2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014aac:	40                   	inc    eax
c0014aad:	83 f8 04             	cmp    eax,0x4
c0014ab0:	75 f0                	jne    c0014aa2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014ab2:	c7 44 24 10 b8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aeb8
c0014aba:	5b                   	pop    ebx
c0014abb:	5e                   	pop    esi
c0014abc:	5f                   	pop    edi
c0014abd:	e9 d9 5b 00 00       	jmp    c001a69b <Krnl::panic(char const*)>
c0014ac2:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014ac5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014ac8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014ace:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014ad4:	5b                   	pop    ebx
c0014ad5:	5e                   	pop    esi
c0014ad6:	5f                   	pop    edi
c0014ad7:	c3                   	ret    

c0014ad8 <doubleFault(regs*, void*)>:
c0014ad8:	55                   	push   ebp
c0014ad9:	89 e5                	mov    ebp,esp
c0014adb:	83 ec 08             	sub    esp,0x8
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	68 f3 ae 02 c0       	push   0xc002aef3
c0014ae6:	e8 b0 5b 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0014aeb:	83 c4 10             	add    esp,0x10
c0014aee:	90                   	nop
c0014aef:	c9                   	leave  
c0014af0:	c3                   	ret    
c0014af1:	90                   	nop

c0014af2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014af2:	56                   	push   esi
c0014af3:	53                   	push   ebx
c0014af4:	50                   	push   eax
c0014af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014afd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b02:	75 35                	jne    c0014b39 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b04:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b07:	31 d2                	xor    edx,edx
c0014b09:	89 c1                	mov    ecx,eax
c0014b0b:	c1 e1 04             	shl    ecx,0x4
c0014b0e:	01 f1                	add    ecx,esi
c0014b10:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b18:	74 3e                	je     c0014b58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b1a:	42                   	inc    edx
c0014b1b:	83 fa 04             	cmp    edx,0x4
c0014b1e:	75 f0                	jne    c0014b10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	68 38 af 02 c0       	push   0xc002af38
c0014b28:	e8 6e 5b 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b35:	5a                   	pop    edx
c0014b36:	5b                   	pop    ebx
c0014b37:	5e                   	pop    esi
c0014b38:	c3                   	ret    
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	56                   	push   esi
c0014b3d:	e8 ba fb ff ff       	call   c00146fc <Device::getName()>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b48:	75 ba                	jne    c0014b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b4a:	83 fb 0f             	cmp    ebx,0xf
c0014b4d:	7f 29                	jg     c0014b78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b4f:	0f b6 9b 80 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2880]
c0014b56:	eb ac                	jmp    c0014b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b58:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b5f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b6c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b72:	89 d8                	mov    eax,ebx
c0014b74:	5a                   	pop    edx
c0014b75:	5b                   	pop    ebx
c0014b76:	5e                   	pop    esi
c0014b77:	c3                   	ret    
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	68 00 af 02 c0       	push   0xc002af00
c0014b80:	e8 16 5b 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	e9 77 ff ff ff       	jmp    c0014b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b8d:	90                   	nop

c0014b8e <InterruptController::clearAllHandlers(int, bool)>:
c0014b8e:	56                   	push   esi
c0014b8f:	53                   	push   ebx
c0014b90:	52                   	push   edx
c0014b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b99:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b9e:	75 61                	jne    c0014c01 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ba0:	8d 46 20             	lea    eax,[esi+0x20]
c0014ba3:	c1 e6 04             	shl    esi,0x4
c0014ba6:	c1 e0 04             	shl    eax,0x4
c0014ba9:	01 de                	add    esi,ebx
c0014bab:	01 d8                	add    eax,ebx
c0014bad:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014bb7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014bc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014bcb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bd5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bdf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014be9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bf3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014bfd:	58                   	pop    eax
c0014bfe:	5b                   	pop    ebx
c0014bff:	5e                   	pop    esi
c0014c00:	c3                   	ret    
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	53                   	push   ebx
c0014c05:	e8 f2 fa ff ff       	call   c00146fc <Device::getName()>
c0014c0a:	83 c4 10             	add    esp,0x10
c0014c0d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c10:	75 8e                	jne    c0014ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c12:	83 fe 0f             	cmp    esi,0xf
c0014c15:	7f 09                	jg     c0014c20 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c17:	0f b6 b6 80 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2880]
c0014c1e:	eb 80                	jmp    c0014ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c20:	83 ec 0c             	sub    esp,0xc
c0014c23:	68 74 af 02 c0       	push   0xc002af74
c0014c28:	e8 6e 5a 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	e9 6b ff ff ff       	jmp    c0014ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c35:	90                   	nop

c0014c36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c36:	56                   	push   esi
c0014c37:	53                   	push   ebx
c0014c38:	52                   	push   edx
c0014c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c46:	75 3a                	jne    c0014c82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c4c:	8d 50 20             	lea    edx,[eax+0x20]
c0014c4f:	c1 e2 04             	shl    edx,0x4
c0014c52:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c55:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c59:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c5f:	74 0b                	je     c0014c6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c61:	83 c0 04             	add    eax,0x4
c0014c64:	39 d0                	cmp    eax,edx
c0014c66:	75 f1                	jne    c0014c59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c68:	58                   	pop    eax
c0014c69:	5b                   	pop    ebx
c0014c6a:	5e                   	pop    esi
c0014c6b:	c3                   	ret    
c0014c6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c80:	eb df                	jmp    c0014c61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c82:	83 ec 0c             	sub    esp,0xc
c0014c85:	56                   	push   esi
c0014c86:	e8 71 fa ff ff       	call   c00146fc <Device::getName()>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c91:	75 b5                	jne    c0014c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c93:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c98:	7f 11                	jg     c0014cab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c9e:	0f b6 80 80 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2880]
c0014ca5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ca9:	eb 9d                	jmp    c0014c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cab:	83 ec 0c             	sub    esp,0xc
c0014cae:	68 74 af 02 c0       	push   0xc002af74
c0014cb3:	e8 e3 59 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	eb 8b                	jmp    c0014c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014cbd <nmiHandler(regs*, void*)>:
c0014cbd:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0014cc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cc6:	e9 c1 a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014ccb <int_handler>:
c0014ccb:	55                   	push   ebp
c0014ccc:	57                   	push   edi
c0014ccd:	56                   	push   esi
c0014cce:	53                   	push   ebx
c0014ccf:	83 ec 0c             	sub    esp,0xc
c0014cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cd6:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c0014cdd:	74 0b                	je     c0014cea <int_handler+0x1f>
c0014cdf:	fa                   	cli    
c0014ce0:	f4                   	hlt    
c0014ce1:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c0014ce8:	75 f5                	jne    c0014cdf <int_handler+0x14>
c0014cea:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0014cef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cf2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cf8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014cfe:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d01:	83 f8 17             	cmp    eax,0x17
c0014d04:	77 13                	ja     c0014d19 <int_handler+0x4e>
c0014d06:	83 ec 08             	sub    esp,0x8
c0014d09:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d0b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d0e:	0f b6 c0             	movzx  eax,al
c0014d11:	50                   	push   eax
c0014d12:	57                   	push   edi
c0014d13:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	83 c3 15             	add    ebx,0x15
c0014d1c:	c1 e3 04             	shl    ebx,0x4
c0014d1f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d23:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d2a:	31 db                	xor    ebx,ebx
c0014d2c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d30:	85 c0                	test   eax,eax
c0014d32:	74 13                	je     c0014d47 <int_handler+0x7c>
c0014d34:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d37:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d3b:	74 1c                	je     c0014d59 <int_handler+0x8e>
c0014d3d:	83 ec 08             	sub    esp,0x8
c0014d40:	52                   	push   edx
c0014d41:	56                   	push   esi
c0014d42:	ff d0                	call   eax
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	43                   	inc    ebx
c0014d48:	83 fb 04             	cmp    ebx,0x4
c0014d4b:	75 df                	jne    c0014d2c <int_handler+0x61>
c0014d4d:	83 c4 0c             	add    esp,0xc
c0014d50:	31 c0                	xor    eax,eax
c0014d52:	5b                   	pop    ebx
c0014d53:	31 d2                	xor    edx,edx
c0014d55:	5e                   	pop    esi
c0014d56:	5f                   	pop    edi
c0014d57:	5d                   	pop    ebp
c0014d58:	c3                   	ret    
c0014d59:	83 ec 08             	sub    esp,0x8
c0014d5c:	52                   	push   edx
c0014d5d:	56                   	push   esi
c0014d5e:	ff d0                	call   eax
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	83 c4 0c             	add    esp,0xc
c0014d66:	5b                   	pop    ebx
c0014d67:	5e                   	pop    esi
c0014d68:	5f                   	pop    edi
c0014d69:	5d                   	pop    ebp
c0014d6a:	c3                   	ret    
c0014d6b:	90                   	nop

c0014d6c <InterruptController::InterruptController(char const*)>:
c0014d6c:	83 ec 1c             	sub    esp,0x1c
c0014d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d73:	83 ec 08             	sub    esp,0x8
c0014d76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d7a:	50                   	push   eax
c0014d7b:	e8 80 f8 ff ff       	call   c0014600 <Device::Device(char const*)>
c0014d80:	83 c4 10             	add    esp,0x10
c0014d83:	ba 1c b2 02 c0       	mov    edx,0xc002b21c
c0014d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8c:	89 10                	mov    DWORD PTR [eax],edx
c0014d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d92:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014da4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014dac:	7f 5e                	jg     c0014e0c <InterruptController::InterruptController(char const*)+0xa0>
c0014dae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014db6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014dbb:	7f 49                	jg     c0014e06 <InterruptController::InterruptController(char const*)+0x9a>
c0014dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dc5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dd0:	01 ca                	add    edx,ecx
c0014dd2:	83 c2 54             	add    edx,0x54
c0014dd5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014de5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014df0:	01 ca                	add    edx,ecx
c0014df2:	81 c2 54 04 00 00    	add    edx,0x454
c0014df8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e00:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e04:	eb b0                	jmp    c0014db6 <InterruptController::InterruptController(char const*)+0x4a>
c0014e06:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e0a:	eb 98                	jmp    c0014da4 <InterruptController::InterruptController(char const*)+0x38>
c0014e0c:	90                   	nop
c0014e0d:	83 c4 1c             	add    esp,0x1c
c0014e10:	c3                   	ret    
c0014e11:	90                   	nop

c0014e12 <InterruptController::~InterruptController()>:
c0014e12:	83 ec 0c             	sub    esp,0xc
c0014e15:	ba 1c b2 02 c0       	mov    edx,0xc002b21c
c0014e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e1e:	89 10                	mov    DWORD PTR [eax],edx
c0014e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e24:	83 ec 0c             	sub    esp,0xc
c0014e27:	50                   	push   eax
c0014e28:	e8 b5 f4 ff ff       	call   c00142e2 <Device::~Device()>
c0014e2d:	83 c4 10             	add    esp,0x10
c0014e30:	90                   	nop
c0014e31:	83 c4 0c             	add    esp,0xc
c0014e34:	c3                   	ret    
c0014e35:	90                   	nop

c0014e36 <InterruptController::~InterruptController()>:
c0014e36:	83 ec 0c             	sub    esp,0xc
c0014e39:	83 ec 0c             	sub    esp,0xc
c0014e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e40:	e8 cd ff ff ff       	call   c0014e12 <InterruptController::~InterruptController()>
c0014e45:	83 c4 10             	add    esp,0x10
c0014e48:	83 ec 08             	sub    esp,0x8
c0014e4b:	68 58 21 00 00       	push   0x2158
c0014e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e54:	e8 b1 e0 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0014e59:	83 c4 10             	add    esp,0x10
c0014e5c:	83 c4 0c             	add    esp,0xc
c0014e5f:	c3                   	ret    

c0014e60 <displayDebugInfo(regs*)>:
c0014e60:	55                   	push   ebp
c0014e61:	57                   	push   edi
c0014e62:	56                   	push   esi
c0014e63:	53                   	push   ebx
c0014e64:	83 ec 24             	sub    esp,0x24
c0014e67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e6b:	0f 20 c2             	mov    edx,cr0
c0014e6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e72:	0f 20 d7             	mov    edi,cr2
c0014e75:	0f 20 de             	mov    esi,cr3
c0014e78:	0f 20 e5             	mov    ebp,cr4
c0014e7b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e7e:	68 ae af 02 c0       	push   0xc002afae
c0014e83:	e8 62 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014e88:	59                   	pop    ecx
c0014e89:	58                   	pop    eax
c0014e8a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e8d:	68 b9 af 02 c0       	push   0xc002afb9
c0014e92:	e8 53 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014e97:	58                   	pop    eax
c0014e98:	5a                   	pop    edx
c0014e99:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e9c:	68 c4 af 02 c0       	push   0xc002afc4
c0014ea1:	e8 44 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ea6:	59                   	pop    ecx
c0014ea7:	58                   	pop    eax
c0014ea8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014eab:	68 cf af 02 c0       	push   0xc002afcf
c0014eb0:	e8 35 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014eb5:	58                   	pop    eax
c0014eb6:	5a                   	pop    edx
c0014eb7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014eba:	68 da af 02 c0       	push   0xc002afda
c0014ebf:	e8 26 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ec4:	59                   	pop    ecx
c0014ec5:	58                   	pop    eax
c0014ec6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ec9:	68 e5 af 02 c0       	push   0xc002afe5
c0014ece:	e8 17 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ed3:	58                   	pop    eax
c0014ed4:	5a                   	pop    edx
c0014ed5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ed8:	68 f0 af 02 c0       	push   0xc002aff0
c0014edd:	e8 08 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ee2:	59                   	pop    ecx
c0014ee3:	58                   	pop    eax
c0014ee4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ee7:	68 fb af 02 c0       	push   0xc002affb
c0014eec:	e8 f9 e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ef1:	58                   	pop    eax
c0014ef2:	5a                   	pop    edx
c0014ef3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ef6:	68 06 b0 02 c0       	push   0xc002b006
c0014efb:	e8 ea e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f00:	59                   	pop    ecx
c0014f01:	58                   	pop    eax
c0014f02:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f05:	68 15 b0 02 c0       	push   0xc002b015
c0014f0a:	e8 db e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f0f:	58                   	pop    eax
c0014f10:	5a                   	pop    edx
c0014f11:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f14:	68 20 b0 02 c0       	push   0xc002b020
c0014f19:	e8 cc e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f1e:	59                   	pop    ecx
c0014f1f:	58                   	pop    eax
c0014f20:	57                   	push   edi
c0014f21:	68 2b b0 02 c0       	push   0xc002b02b
c0014f26:	e8 bf e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f2b:	58                   	pop    eax
c0014f2c:	5a                   	pop    edx
c0014f2d:	56                   	push   esi
c0014f2e:	68 36 b0 02 c0       	push   0xc002b036
c0014f33:	e8 b2 e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f38:	59                   	pop    ecx
c0014f39:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f44:	e8 4c be ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c0014f49:	58                   	pop    eax
c0014f4a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f4d:	5a                   	pop    edx
c0014f4e:	c1 e0 05             	shl    eax,0x5
c0014f51:	05 e0 d4 02 c0       	add    eax,0xc002d4e0
c0014f56:	50                   	push   eax
c0014f57:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f62:	e8 4d c2 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014f67:	59                   	pop    ecx
c0014f68:	58                   	pop    eax
c0014f69:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f6e:	68 41 b0 02 c0       	push   0xc002b041
c0014f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f79:	e8 36 c2 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014f7e:	58                   	pop    eax
c0014f7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f84:	5a                   	pop    edx
c0014f85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f88:	83 c0 0c             	add    eax,0xc
c0014f8b:	50                   	push   eax
c0014f8c:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f97:	e8 18 c2 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014f9c:	59                   	pop    ecx
c0014f9d:	58                   	pop    eax
c0014f9e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fa3:	68 4a b0 02 c0       	push   0xc002b04a
c0014fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fae:	e8 01 c2 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014fb3:	58                   	pop    eax
c0014fb4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fb9:	5a                   	pop    edx
c0014fba:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014fbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc3:	e8 12 c2 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0014fc8:	59                   	pop    ecx
c0014fc9:	58                   	pop    eax
c0014fca:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fcf:	68 52 b0 02 c0       	push   0xc002b052
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 d5 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014fdf:	58                   	pop    eax
c0014fe0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fe5:	5a                   	pop    edx
c0014fe6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fef:	e8 e6 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0014ff4:	59                   	pop    ecx
c0014ff5:	58                   	pop    eax
c0014ff6:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014ffb:	68 5a b0 02 c0       	push   0xc002b05a
c0015000:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015006:	e8 a9 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001500b:	58                   	pop    eax
c001500c:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015011:	5a                   	pop    edx
c0015012:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0015015:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501b:	e8 ba c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015020:	59                   	pop    ecx
c0015021:	58                   	pop    eax
c0015022:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015027:	68 62 b0 02 c0       	push   0xc002b062
c001502c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015032:	e8 7d c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015037:	58                   	pop    eax
c0015038:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001503d:	5a                   	pop    edx
c001503e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015047:	e8 8e c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001504c:	59                   	pop    ecx
c001504d:	58                   	pop    eax
c001504e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015053:	68 6a b0 02 c0       	push   0xc002b06a
c0015058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505e:	e8 51 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015063:	58                   	pop    eax
c0015064:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015069:	5a                   	pop    edx
c001506a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001506d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015073:	e8 62 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015078:	59                   	pop    ecx
c0015079:	58                   	pop    eax
c001507a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001507f:	68 72 b0 02 c0       	push   0xc002b072
c0015084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508a:	e8 25 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001508f:	58                   	pop    eax
c0015090:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015095:	5a                   	pop    edx
c0015096:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015099:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509f:	e8 36 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00150a4:	59                   	pop    ecx
c00150a5:	58                   	pop    eax
c00150a6:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150ab:	68 7a b0 02 c0       	push   0xc002b07a
c00150b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b6:	e8 f9 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00150bb:	58                   	pop    eax
c00150bc:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150c1:	5a                   	pop    edx
c00150c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150c6:	52                   	push   edx
c00150c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cd:	e8 08 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00150d2:	59                   	pop    ecx
c00150d3:	58                   	pop    eax
c00150d4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150d9:	68 83 b0 02 c0       	push   0xc002b083
c00150de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e4:	e8 cb c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00150e9:	58                   	pop    eax
c00150ea:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150ef:	5a                   	pop    edx
c00150f0:	57                   	push   edi
c00150f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f7:	e8 de c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00150fc:	59                   	pop    ecx
c00150fd:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015102:	5f                   	pop    edi
c0015103:	68 8b b0 02 c0       	push   0xc002b08b
c0015108:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510e:	e8 a1 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015113:	58                   	pop    eax
c0015114:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015119:	5a                   	pop    edx
c001511a:	56                   	push   esi
c001511b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015121:	e8 b4 c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015126:	59                   	pop    ecx
c0015127:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001512c:	5e                   	pop    esi
c001512d:	68 93 b0 02 c0       	push   0xc002b093
c0015132:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015138:	e8 77 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001513d:	5f                   	pop    edi
c001513e:	58                   	pop    eax
c001513f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015144:	55                   	push   ebp
c0015145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514b:	e8 8a c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015150:	58                   	pop    eax
c0015151:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015156:	5a                   	pop    edx
c0015157:	68 9b b0 02 c0       	push   0xc002b09b
c001515c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015162:	e8 4d c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015167:	0f 21 c0             	mov    eax,db0
c001516a:	59                   	pop    ecx
c001516b:	5e                   	pop    esi
c001516c:	50                   	push   eax
c001516d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015172:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015178:	e8 5d c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001517d:	5f                   	pop    edi
c001517e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015183:	5d                   	pop    ebp
c0015184:	68 a4 b0 02 c0       	push   0xc002b0a4
c0015189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518f:	e8 20 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015194:	0f 21 c8             	mov    eax,db1
c0015197:	5a                   	pop    edx
c0015198:	59                   	pop    ecx
c0015199:	50                   	push   eax
c001519a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001519f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a5:	e8 30 c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00151aa:	5e                   	pop    esi
c00151ab:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151b0:	5f                   	pop    edi
c00151b1:	68 ac b0 02 c0       	push   0xc002b0ac
c00151b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151bc:	e8 f3 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00151c1:	0f 21 d0             	mov    eax,db2
c00151c4:	5d                   	pop    ebp
c00151c5:	5a                   	pop    edx
c00151c6:	50                   	push   eax
c00151c7:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d2:	e8 03 c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00151d7:	59                   	pop    ecx
c00151d8:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151dd:	5e                   	pop    esi
c00151de:	68 b4 b0 02 c0       	push   0xc002b0b4
c00151e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e9:	e8 c6 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00151ee:	0f 21 d8             	mov    eax,db3
c00151f1:	5f                   	pop    edi
c00151f2:	5d                   	pop    ebp
c00151f3:	50                   	push   eax
c00151f4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ff:	e8 d6 bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015204:	58                   	pop    eax
c0015205:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001520a:	5a                   	pop    edx
c001520b:	68 bc b0 02 c0       	push   0xc002b0bc
c0015210:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015216:	e8 99 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001521b:	0f 21 f0             	mov    eax,db6
c001521e:	59                   	pop    ecx
c001521f:	5e                   	pop    esi
c0015220:	50                   	push   eax
c0015221:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015226:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001522c:	e8 a9 bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015231:	5f                   	pop    edi
c0015232:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015237:	5d                   	pop    ebp
c0015238:	68 c4 b0 02 c0       	push   0xc002b0c4
c001523d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015243:	e8 6c bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015248:	0f 21 f8             	mov    eax,db7
c001524b:	5a                   	pop    edx
c001524c:	59                   	pop    ecx
c001524d:	50                   	push   eax
c001524e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015259:	e8 7c bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001525e:	5e                   	pop    esi
c001525f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015262:	e8 16 85 00 00       	call   c001d77d <Thr::getDriverNameFromAddress(unsigned long)>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	85 c0                	test   eax,eax
c001526c:	74 7d                	je     c00152eb <displayDebugInfo(regs*)+0x48b>
c001526e:	89 c6                	mov    esi,eax
c0015270:	50                   	push   eax
c0015271:	50                   	push   eax
c0015272:	56                   	push   esi
c0015273:	68 cc b0 02 c0       	push   0xc002b0cc
c0015278:	e8 6d dd ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001527d:	5a                   	pop    edx
c001527e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015283:	59                   	pop    ecx
c0015284:	68 da b0 02 c0       	push   0xc002b0da
c0015289:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001528f:	e8 20 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015294:	5f                   	pop    edi
c0015295:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001529a:	5d                   	pop    ebp
c001529b:	56                   	push   esi
c001529c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152a2:	e8 0d bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00152a7:	58                   	pop    eax
c00152a8:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152ad:	5a                   	pop    edx
c00152ae:	68 e6 b0 02 c0       	push   0xc002b0e6
c00152b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152b9:	e8 f6 be ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00152be:	59                   	pop    ecx
c00152bf:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152c4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152ca:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152cd:	e8 e2 84 00 00       	call   c001d7b4 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152d2:	5b                   	pop    ebx
c00152d3:	5d                   	pop    ebp
c00152d4:	50                   	push   eax
c00152d5:	57                   	push   edi
c00152d6:	e8 ff be ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00152db:	58                   	pop    eax
c00152dc:	5a                   	pop    edx
c00152dd:	56                   	push   esi
c00152de:	68 f2 b0 02 c0       	push   0xc002b0f2
c00152e3:	e8 02 dd ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	fa                   	cli    
c00152ec:	f4                   	hlt    
c00152ed:	eb fe                	jmp    c00152ed <displayDebugInfo(regs*)+0x48d>

c00152ef <x87EmulHandler(regs*, void*)>:
c00152ef:	53                   	push   ebx
c00152f0:	83 ec 14             	sub    esp,0x14
c00152f3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152f7:	53                   	push   ebx
c00152f8:	e8 0d a8 00 00       	call   c001fb0a <Vm::x87Handler(regs*)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	84 c0                	test   al,al
c0015302:	74 05                	je     c0015309 <x87EmulHandler(regs*, void*)+0x1a>
c0015304:	83 c4 08             	add    esp,0x8
c0015307:	5b                   	pop    ebx
c0015308:	c3                   	ret    
c0015309:	83 ec 0c             	sub    esp,0xc
c001530c:	68 02 b1 02 c0       	push   0xc002b102
c0015311:	e8 d4 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015319:	e8 42 fb ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c001531e <gpFault(regs*, void*)>:
c001531e:	53                   	push   ebx
c001531f:	83 ec 14             	sub    esp,0x14
c0015322:	c7 05 d8 e6 02 c0 87 ee 01 c0 	mov    DWORD PTR ds:0xc002e6d8,0xc001ee87
c001532c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015330:	53                   	push   ebx
c0015331:	e8 51 9b 00 00       	call   c001ee87 <Vm::faultHandler(regs*)>
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	84 c0                	test   al,al
c001533b:	74 05                	je     c0015342 <gpFault(regs*, void*)+0x24>
c001533d:	83 c4 08             	add    esp,0x8
c0015340:	5b                   	pop    ebx
c0015341:	c3                   	ret    
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	68 18 b1 02 c0       	push   0xc002b118
c001534a:	e8 9b dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001534f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015352:	e8 09 fb ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c0015357 <pgFault(regs*, void*)>:
c0015357:	53                   	push   ebx
c0015358:	83 ec 14             	sub    esp,0x14
c001535b:	68 33 b1 02 c0       	push   0xc002b133
c0015360:	e8 85 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015365:	0f 20 d3             	mov    ebx,cr2
c0015368:	58                   	pop    eax
c0015369:	5a                   	pop    edx
c001536a:	53                   	push   ebx
c001536b:	68 40 b1 02 c0       	push   0xc002b140
c0015370:	e8 75 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015375:	59                   	pop    ecx
c0015376:	58                   	pop    eax
c0015377:	53                   	push   ebx
c0015378:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001537d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015380:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015386:	e8 cb d8 ff ff       	call   c0012c56 <VAS::tryLoadBackOffDisk(unsigned long)>
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	84 c0                	test   al,al
c0015390:	74 05                	je     c0015397 <pgFault(regs*, void*)+0x40>
c0015392:	83 c4 08             	add    esp,0x8
c0015395:	5b                   	pop    ebx
c0015396:	c3                   	ret    
c0015397:	83 ec 0c             	sub    esp,0xc
c001539a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001539e:	e8 bd fa ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c00153a3 <otherISRHandler(regs*, void*)>:
c00153a3:	53                   	push   ebx
c00153a4:	83 ec 0c             	sub    esp,0xc
c00153a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153ab:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153ae:	50                   	push   eax
c00153af:	50                   	push   eax
c00153b0:	68 4c b1 02 c0       	push   0xc002b14c
c00153b5:	e8 30 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00153ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153bd:	e8 9e fa ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c00153c2 <opcodeFault(regs*, void*)>:
c00153c2:	55                   	push   ebp
c00153c3:	89 e5                	mov    ebp,esp
c00153c5:	56                   	push   esi
c00153c6:	53                   	push   ebx
c00153c7:	83 ec 40             	sub    esp,0x40
c00153ca:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00153cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153d5:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153db:	84 c0                	test   al,al
c00153dd:	74 24                	je     c0015403 <opcodeFault(regs*, void*)+0x41>
c00153df:	83 ec 0c             	sub    esp,0xc
c00153e2:	68 6c b1 02 c0       	push   0xc002b16c
c00153e7:	e8 fe db ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f5:	8d 50 19             	lea    edx,[eax+0x19]
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153fe:	e9 be 05 00 00       	jmp    c00159c1 <opcodeFault(regs*, void*)+0x5ff>
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015409:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001540c:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015410:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015417:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001541d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015420:	8a 00                	mov    al,BYTE PTR [eax]
c0015422:	3c f0                	cmp    al,0xf0
c0015424:	75 17                	jne    c001543d <opcodeFault(regs*, void*)+0x7b>
c0015426:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542f:	8d 50 01             	lea    edx,[eax+0x1]
c0015432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015435:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015438:	e9 da 00 00 00       	jmp    c0015517 <opcodeFault(regs*, void*)+0x155>
c001543d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015440:	8a 00                	mov    al,BYTE PTR [eax]
c0015442:	3c f2                	cmp    al,0xf2
c0015444:	74 09                	je     c001544f <opcodeFault(regs*, void*)+0x8d>
c0015446:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015449:	8a 00                	mov    al,BYTE PTR [eax]
c001544b:	3c f3                	cmp    al,0xf3
c001544d:	75 1b                	jne    c001546a <opcodeFault(regs*, void*)+0xa8>
c001544f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015453:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015459:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001545c:	8d 50 01             	lea    edx,[eax+0x1]
c001545f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015462:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015465:	e9 ad 00 00 00       	jmp    c0015517 <opcodeFault(regs*, void*)+0x155>
c001546a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546d:	8a 00                	mov    al,BYTE PTR [eax]
c001546f:	3c 66                	cmp    al,0x66
c0015471:	75 1f                	jne    c0015492 <opcodeFault(regs*, void*)+0xd0>
c0015473:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015477:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001547b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015481:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015484:	8d 50 01             	lea    edx,[eax+0x1]
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001548d:	e9 85 00 00 00       	jmp    c0015517 <opcodeFault(regs*, void*)+0x155>
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	8a 00                	mov    al,BYTE PTR [eax]
c0015497:	3c 67                	cmp    al,0x67
c0015499:	75 18                	jne    c00154b3 <opcodeFault(regs*, void*)+0xf1>
c001549b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001549f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a8:	8d 50 01             	lea    edx,[eax+0x1]
c00154ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b1:	eb 64                	jmp    c0015517 <opcodeFault(regs*, void*)+0x155>
c00154b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b6:	8a 00                	mov    al,BYTE PTR [eax]
c00154b8:	3c 2e                	cmp    al,0x2e
c00154ba:	74 09                	je     c00154c5 <opcodeFault(regs*, void*)+0x103>
c00154bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bf:	8a 00                	mov    al,BYTE PTR [eax]
c00154c1:	3c 3e                	cmp    al,0x3e
c00154c3:	75 18                	jne    c00154dd <opcodeFault(regs*, void*)+0x11b>
c00154c5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154c9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d2:	8d 50 01             	lea    edx,[eax+0x1]
c00154d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154db:	eb 3a                	jmp    c0015517 <opcodeFault(regs*, void*)+0x155>
c00154dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e0:	8a 00                	mov    al,BYTE PTR [eax]
c00154e2:	3c 36                	cmp    al,0x36
c00154e4:	74 1b                	je     c0015501 <opcodeFault(regs*, void*)+0x13f>
c00154e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e9:	8a 00                	mov    al,BYTE PTR [eax]
c00154eb:	3c 26                	cmp    al,0x26
c00154ed:	74 12                	je     c0015501 <opcodeFault(regs*, void*)+0x13f>
c00154ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f2:	8a 00                	mov    al,BYTE PTR [eax]
c00154f4:	3c 64                	cmp    al,0x64
c00154f6:	74 09                	je     c0015501 <opcodeFault(regs*, void*)+0x13f>
c00154f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fb:	8a 00                	mov    al,BYTE PTR [eax]
c00154fd:	3c 65                	cmp    al,0x65
c00154ff:	75 16                	jne    c0015517 <opcodeFault(regs*, void*)+0x155>
c0015501:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015505:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001550e:	8d 50 01             	lea    edx,[eax+0x1]
c0015511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015514:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015517:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551a:	8a 00                	mov    al,BYTE PTR [eax]
c001551c:	3c 0f                	cmp    al,0xf
c001551e:	0f 85 ad 00 00 00    	jne    c00155d1 <opcodeFault(regs*, void*)+0x20f>
c0015524:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015527:	40                   	inc    eax
c0015528:	8a 00                	mov    al,BYTE PTR [eax]
c001552a:	3c c2                	cmp    al,0xc2
c001552c:	74 0e                	je     c001553c <opcodeFault(regs*, void*)+0x17a>
c001552e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015531:	40                   	inc    eax
c0015532:	8a 00                	mov    al,BYTE PTR [eax]
c0015534:	3c c3                	cmp    al,0xc3
c0015536:	0f 85 95 00 00 00    	jne    c00155d1 <opcodeFault(regs*, void*)+0x20f>
c001553c:	83 ec 0c             	sub    esp,0xc
c001553f:	68 8f b1 02 c0       	push   0xc002b18f
c0015544:	e8 a1 da ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015552:	8d 50 01             	lea    edx,[eax+0x1]
c0015555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015558:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001555b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001555e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015561:	8a 00                	mov    al,BYTE PTR [eax]
c0015563:	8d 50 fe             	lea    edx,[eax-0x2]
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	88 10                	mov    BYTE PTR [eax],dl
c001556b:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001556e:	50                   	push   eax
c001556f:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015572:	50                   	push   eax
c0015573:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015576:	50                   	push   eax
c0015577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001557a:	e8 e3 47 00 00       	call   c0019d62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015585:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015588:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001558b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001558e:	01 d0                	add    eax,edx
c0015590:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015596:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015599:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001559c:	48                   	dec    eax
c001559d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00155a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	83 ec 04             	sub    esp,0x4
c00155af:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155b2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155b5:	50                   	push   eax
c00155b6:	e8 f9 ab fe ff       	call   c00001b4 <voodooXADD>
c00155bb:	83 c4 10             	add    esp,0x10
c00155be:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00155c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00155c4:	01 c2                	add    edx,eax
c00155c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155cc:	e9 f0 03 00 00       	jmp    c00159c1 <opcodeFault(regs*, void*)+0x5ff>
c00155d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d4:	8a 00                	mov    al,BYTE PTR [eax]
c00155d6:	3c 0f                	cmp    al,0xf
c00155d8:	0f 85 8b 01 00 00    	jne    c0015769 <opcodeFault(regs*, void*)+0x3a7>
c00155de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e1:	40                   	inc    eax
c00155e2:	8a 00                	mov    al,BYTE PTR [eax]
c00155e4:	3c c7                	cmp    al,0xc7
c00155e6:	0f 86 7d 01 00 00    	jbe    c0015769 <opcodeFault(regs*, void*)+0x3a7>
c00155ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ef:	40                   	inc    eax
c00155f0:	8a 00                	mov    al,BYTE PTR [eax]
c00155f2:	3c cf                	cmp    al,0xcf
c00155f4:	0f 87 6f 01 00 00    	ja     c0015769 <opcodeFault(regs*, void*)+0x3a7>
c00155fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fd:	40                   	inc    eax
c00155fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015600:	83 c0 38             	add    eax,0x38
c0015603:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015606:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001560a:	75 0b                	jne    c0015617 <opcodeFault(regs*, void*)+0x255>
c001560c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015612:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015615:	eb 75                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c0015617:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001561b:	75 0b                	jne    c0015628 <opcodeFault(regs*, void*)+0x266>
c001561d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015620:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015623:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015626:	eb 64                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c0015628:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001562c:	75 0b                	jne    c0015639 <opcodeFault(regs*, void*)+0x277>
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015634:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015637:	eb 53                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c0015639:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001563d:	75 0b                	jne    c001564a <opcodeFault(regs*, void*)+0x288>
c001563f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015642:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015645:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015648:	eb 42                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c001564a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001564e:	75 0b                	jne    c001565b <opcodeFault(regs*, void*)+0x299>
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015656:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015659:	eb 31                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c001565b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001565f:	75 0b                	jne    c001566c <opcodeFault(regs*, void*)+0x2aa>
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015667:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001566a:	eb 20                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c001566c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015670:	75 0b                	jne    c001567d <opcodeFault(regs*, void*)+0x2bb>
c0015672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015675:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015678:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001567b:	eb 0f                	jmp    c001568c <opcodeFault(regs*, void*)+0x2ca>
c001567d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015681:	75 09                	jne    c001568c <opcodeFault(regs*, void*)+0x2ca>
c0015683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015686:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015689:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001568c:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015690:	74 10                	je     c00156a2 <opcodeFault(regs*, void*)+0x2e0>
c0015692:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015699:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00156a0:	eb 2d                	jmp    c00156cf <opcodeFault(regs*, void*)+0x30d>
c00156a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156a5:	c1 e0 18             	shl    eax,0x18
c00156a8:	89 c2                	mov    edx,eax
c00156aa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156ad:	c1 e0 08             	shl    eax,0x8
c00156b0:	25 00 00 ff 00       	and    eax,0xff0000
c00156b5:	09 c2                	or     edx,eax
c00156b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156ba:	c1 e8 08             	shr    eax,0x8
c00156bd:	25 00 ff 00 00       	and    eax,0xff00
c00156c2:	09 c2                	or     edx,eax
c00156c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156c7:	c1 e8 18             	shr    eax,0x18
c00156ca:	09 d0                	or     eax,edx
c00156cc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156cf:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156d3:	75 0b                	jne    c00156e0 <opcodeFault(regs*, void*)+0x31e>
c00156d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156db:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156de:	eb 75                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c00156e0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156e4:	75 0b                	jne    c00156f1 <opcodeFault(regs*, void*)+0x32f>
c00156e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156ef:	eb 64                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c00156f1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156f5:	75 0b                	jne    c0015702 <opcodeFault(regs*, void*)+0x340>
c00156f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156fd:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015700:	eb 53                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c0015702:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015706:	75 0b                	jne    c0015713 <opcodeFault(regs*, void*)+0x351>
c0015708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001570e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015711:	eb 42                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c0015713:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015717:	75 0b                	jne    c0015724 <opcodeFault(regs*, void*)+0x362>
c0015719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001571f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015722:	eb 31                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c0015724:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015728:	75 0b                	jne    c0015735 <opcodeFault(regs*, void*)+0x373>
c001572a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015730:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015733:	eb 20                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c0015735:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015739:	75 0b                	jne    c0015746 <opcodeFault(regs*, void*)+0x384>
c001573b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015741:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015744:	eb 0f                	jmp    c0015755 <opcodeFault(regs*, void*)+0x393>
c0015746:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001574a:	75 09                	jne    c0015755 <opcodeFault(regs*, void*)+0x393>
c001574c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015752:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015758:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001575b:	8d 50 02             	lea    edx,[eax+0x2]
c001575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015761:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015764:	e9 58 02 00 00       	jmp    c00159c1 <opcodeFault(regs*, void*)+0x5ff>
c0015769:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001576c:	8a 00                	mov    al,BYTE PTR [eax]
c001576e:	3c 0f                	cmp    al,0xf
c0015770:	0f 85 76 01 00 00    	jne    c00158ec <opcodeFault(regs*, void*)+0x52a>
c0015776:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015779:	40                   	inc    eax
c001577a:	8a 00                	mov    al,BYTE PTR [eax]
c001577c:	3c c7                	cmp    al,0xc7
c001577e:	0f 85 68 01 00 00    	jne    c00158ec <opcodeFault(regs*, void*)+0x52a>
c0015784:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001578d:	8d 50 01             	lea    edx,[eax+0x1]
c0015790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015793:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015796:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015799:	50                   	push   eax
c001579a:	8d 45 bb             	lea    eax,[ebp-0x45]
c001579d:	50                   	push   eax
c001579e:	8d 45 bc             	lea    eax,[ebp-0x44]
c00157a1:	50                   	push   eax
c00157a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157a5:	e8 b8 45 00 00       	call   c0019d62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157b0:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157b3:	83 f0 01             	xor    eax,0x1
c00157b6:	84 c0                	test   al,al
c00157b8:	0f 84 2e 01 00 00    	je     c00158ec <opcodeFault(regs*, void*)+0x52a>
c00157be:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00157c1:	3c 01                	cmp    al,0x1
c00157c3:	0f 85 23 01 00 00    	jne    c00158ec <opcodeFault(regs*, void*)+0x52a>
c00157c9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157cc:	83 f0 01             	xor    eax,0x1
c00157cf:	84 c0                	test   al,al
c00157d1:	0f 84 15 01 00 00    	je     c00158ec <opcodeFault(regs*, void*)+0x52a>
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157dd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157e0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157e7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157ed:	89 c2                	mov    edx,eax
c00157ef:	b8 00 00 00 00       	mov    eax,0x0
c00157f4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157f7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015800:	ba 00 00 00 00       	mov    edx,0x0
c0015805:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015808:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015811:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015814:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001581b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001581e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015821:	89 c2                	mov    edx,eax
c0015823:	b8 00 00 00 00       	mov    eax,0x0
c0015828:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001582b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001582e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015831:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015834:	ba 00 00 00 00       	mov    edx,0x0
c0015839:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001583c:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001583f:	e8 32 86 00 00       	call   c001de76 <lockScheduler()>
c0015844:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015847:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001584a:	8b 00                	mov    eax,DWORD PTR [eax]
c001584c:	89 c1                	mov    ecx,eax
c001584e:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015851:	89 cb                	mov    ebx,ecx
c0015853:	89 d0                	mov    eax,edx
c0015855:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015858:	89 c6                	mov    esi,eax
c001585a:	89 f0                	mov    eax,esi
c001585c:	09 d8                	or     eax,ebx
c001585e:	85 c0                	test   eax,eax
c0015860:	75 21                	jne    c0015883 <opcodeFault(regs*, void*)+0x4c1>
c0015862:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015865:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015868:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001586b:	89 01                	mov    DWORD PTR [ecx],eax
c001586d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015873:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015876:	83 c8 40             	or     eax,0x40
c0015879:	89 c2                	mov    edx,eax
c001587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015881:	eb 3e                	jmp    c00158c1 <opcodeFault(regs*, void*)+0x4ff>
c0015883:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015886:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015889:	8b 00                	mov    eax,DWORD PTR [eax]
c001588b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001588e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015891:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015897:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001589a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001589d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00158a0:	89 d0                	mov    eax,edx
c00158a2:	31 d2                	xor    edx,edx
c00158a4:	89 c3                	mov    ebx,eax
c00158a6:	89 d6                	mov    esi,edx
c00158a8:	89 da                	mov    edx,ebx
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158b6:	83 e0 bf             	and    eax,0xffffffbf
c00158b9:	89 c2                	mov    edx,eax
c00158bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158be:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158c1:	e8 b2 85 00 00       	call   c001de78 <unlockScheduler()>
c00158c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cc:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158cf:	01 c2                	add    edx,eax
c00158d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158d7:	83 ec 0c             	sub    esp,0xc
c00158da:	68 9e b1 02 c0       	push   0xc002b19e
c00158df:	e8 06 d7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	e9 d5 00 00 00       	jmp    c00159c1 <opcodeFault(regs*, void*)+0x5ff>
c00158ec:	83 ec 0c             	sub    esp,0xc
c00158ef:	68 b1 b1 02 c0       	push   0xc002b1b1
c00158f4:	e8 f1 d6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00158f9:	83 c4 10             	add    esp,0x10
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015905:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015908:	c1 e0 04             	shl    eax,0x4
c001590b:	01 d0                	add    eax,edx
c001590d:	83 c0 03             	add    eax,0x3
c0015910:	8a 00                	mov    al,BYTE PTR [eax]
c0015912:	0f b6 d8             	movzx  ebx,al
c0015915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015918:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001591b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015921:	c1 e0 04             	shl    eax,0x4
c0015924:	01 d0                	add    eax,edx
c0015926:	83 c0 02             	add    eax,0x2
c0015929:	8a 00                	mov    al,BYTE PTR [eax]
c001592b:	0f b6 c8             	movzx  ecx,al
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015937:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001593a:	c1 e0 04             	shl    eax,0x4
c001593d:	01 d0                	add    eax,edx
c001593f:	40                   	inc    eax
c0015940:	8a 00                	mov    al,BYTE PTR [eax]
c0015942:	0f b6 d0             	movzx  edx,al
c0015945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015948:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015951:	c1 e0 04             	shl    eax,0x4
c0015954:	01 f0                	add    eax,esi
c0015956:	8a 00                	mov    al,BYTE PTR [eax]
c0015958:	0f b6 c0             	movzx  eax,al
c001595b:	83 ec 0c             	sub    esp,0xc
c001595e:	53                   	push   ebx
c001595f:	51                   	push   ecx
c0015960:	52                   	push   edx
c0015961:	50                   	push   eax
c0015962:	68 c4 b1 02 c0       	push   0xc002b1c4
c0015967:	e8 7e d6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001596c:	83 c4 20             	add    esp,0x20
c001596f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015972:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015975:	83 c0 03             	add    eax,0x3
c0015978:	8a 00                	mov    al,BYTE PTR [eax]
c001597a:	0f b6 d8             	movzx  ebx,al
c001597d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015980:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015983:	83 c0 02             	add    eax,0x2
c0015986:	8a 00                	mov    al,BYTE PTR [eax]
c0015988:	0f b6 c8             	movzx  ecx,al
c001598b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015991:	40                   	inc    eax
c0015992:	8a 00                	mov    al,BYTE PTR [eax]
c0015994:	0f b6 d0             	movzx  edx,al
c0015997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001599d:	8a 00                	mov    al,BYTE PTR [eax]
c001599f:	0f b6 c0             	movzx  eax,al
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	53                   	push   ebx
c00159a6:	51                   	push   ecx
c00159a7:	52                   	push   edx
c00159a8:	50                   	push   eax
c00159a9:	68 ec b1 02 c0       	push   0xc002b1ec
c00159ae:	e8 37 d6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00159b3:	83 c4 20             	add    esp,0x20
c00159b6:	83 ec 0c             	sub    esp,0xc
c00159b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159bc:	e8 9f f4 ff ff       	call   c0014e60 <displayDebugInfo(regs*)>
c00159c1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00159c4:	5b                   	pop    ebx
c00159c5:	5e                   	pop    esi
c00159c6:	5d                   	pop    ebp
c00159c7:	c3                   	ret    

c00159c8 <displayProgramFault(char const*)>:
c00159c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159d0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159d6:	85 c0                	test   eax,eax
c00159d8:	74 15                	je     c00159ef <displayProgramFault(char const*)+0x27>
c00159da:	83 ec 0c             	sub    esp,0xc
c00159dd:	6a 04                	push   0x4
c00159df:	6a 0f                	push   0xf
c00159e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159e5:	50                   	push   eax
c00159e6:	e8 8b b4 ff ff       	call   c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159eb:	83 c4 1c             	add    esp,0x1c
c00159ee:	c3                   	ret    
c00159ef:	c3                   	ret    

c00159f0 <setupInterruptController()>:
c00159f0:	55                   	push   ebp
c00159f1:	89 e5                	mov    ebp,esp
c00159f3:	53                   	push   ebx
c00159f4:	83 ec 24             	sub    esp,0x24
c00159f7:	b8 00 00 00 00       	mov    eax,0x0
c00159fc:	85 c0                	test   eax,eax
c00159fe:	0f 95 c0             	setne  al
c0015a01:	84 c0                	test   al,al
c0015a03:	74 5b                	je     c0015a60 <setupInterruptController()+0x70>
c0015a05:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a12:	e8 29 9e ff ff       	call   c000f840 <malloc>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	89 c3                	mov    ebx,eax
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	53                   	push   ebx
c0015a20:	e8 a9 ff 00 00       	call   c00259ce <APIC::APIC()>
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a2b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a2e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a33:	83 c0 08             	add    eax,0x8
c0015a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a38:	6a 00                	push   0x0
c0015a3a:	6a 00                	push   0x0
c0015a3c:	6a 00                	push   0x0
c0015a3e:	52                   	push   edx
c0015a3f:	ff d0                	call   eax
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015a49:	83 ec 08             	sub    esp,0x8
c0015a4c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a4f:	50                   	push   eax
c0015a50:	e8 bb e9 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0015a55:	83 c4 10             	add    esp,0x10
c0015a58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a5b:	e9 52 03 00 00       	jmp    c0015db2 <setupInterruptController()+0x3c2>
c0015a60:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015a65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a6b:	83 e0 01             	and    eax,0x1
c0015a6e:	84 c0                	test   al,al
c0015a70:	0f 95 c0             	setne  al
c0015a73:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a76:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a7d:	83 ec 0c             	sub    esp,0xc
c0015a80:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a83:	e8 b8 9d ff ff       	call   c000f840 <malloc>
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	89 c3                	mov    ebx,eax
c0015a8d:	83 ec 0c             	sub    esp,0xc
c0015a90:	53                   	push   ebx
c0015a91:	e8 90 04 01 00       	call   c0025f26 <PIC::PIC()>
c0015a96:	83 c4 10             	add    esp,0x10
c0015a99:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a9c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa4:	83 c0 08             	add    eax,0x8
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	6a 00                	push   0x0
c0015aab:	6a 00                	push   0x0
c0015aad:	6a 00                	push   0x0
c0015aaf:	52                   	push   edx
c0015ab0:	ff d0                	call   eax
c0015ab2:	83 c4 10             	add    esp,0x10
c0015ab5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015ab9:	74 73                	je     c0015b2e <setupInterruptController()+0x13e>
c0015abb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac3:	83 c0 0c             	add    eax,0xc
c0015ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac8:	6a 00                	push   0x0
c0015aca:	6a 00                	push   0x0
c0015acc:	6a 00                	push   0x0
c0015ace:	52                   	push   edx
c0015acf:	ff d0                	call   eax
c0015ad1:	83 c4 10             	add    esp,0x10
c0015ad4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ad8:	74 15                	je     c0015aef <setupInterruptController()+0xff>
c0015ada:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015add:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adf:	83 c0 04             	add    eax,0x4
c0015ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae4:	83 ec 0c             	sub    esp,0xc
c0015ae7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aea:	ff d0                	call   eax
c0015aec:	83 c4 10             	add    esp,0x10
c0015aef:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015af6:	83 ec 0c             	sub    esp,0xc
c0015af9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015afc:	e8 3f 9d ff ff       	call   c000f840 <malloc>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	89 c3                	mov    ebx,eax
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	53                   	push   ebx
c0015b0a:	e8 bf fe 00 00       	call   c00259ce <APIC::APIC()>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b15:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1d:	83 c0 08             	add    eax,0x8
c0015b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b22:	6a 00                	push   0x0
c0015b24:	6a 00                	push   0x0
c0015b26:	6a 00                	push   0x0
c0015b28:	52                   	push   edx
c0015b29:	ff d0                	call   eax
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015b33:	83 ec 08             	sub    esp,0x8
c0015b36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b39:	50                   	push   eax
c0015b3a:	e8 d1 e8 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	83 c0 24             	add    eax,0x24
c0015b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4c:	6a 00                	push   0x0
c0015b4e:	68 a3 53 01 c0       	push   0xc00153a3
c0015b53:	6a 00                	push   0x0
c0015b55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b58:	ff d0                	call   eax
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	83 c0 24             	add    eax,0x24
c0015b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b67:	6a 00                	push   0x0
c0015b69:	68 a3 53 01 c0       	push   0xc00153a3
c0015b6e:	6a 01                	push   0x1
c0015b70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b73:	ff d0                	call   eax
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	83 c0 24             	add    eax,0x24
c0015b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b82:	6a 00                	push   0x0
c0015b84:	68 bd 4c 01 c0       	push   0xc0014cbd
c0015b89:	6a 02                	push   0x2
c0015b8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8e:	ff d0                	call   eax
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	83 c0 24             	add    eax,0x24
c0015b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9d:	6a 00                	push   0x0
c0015b9f:	68 a3 53 01 c0       	push   0xc00153a3
c0015ba4:	6a 03                	push   0x3
c0015ba6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba9:	ff d0                	call   eax
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	83 c0 24             	add    eax,0x24
c0015bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb8:	6a 00                	push   0x0
c0015bba:	68 a3 53 01 c0       	push   0xc00153a3
c0015bbf:	6a 04                	push   0x4
c0015bc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc4:	ff d0                	call   eax
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	83 c0 24             	add    eax,0x24
c0015bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd3:	6a 00                	push   0x0
c0015bd5:	68 a3 53 01 c0       	push   0xc00153a3
c0015bda:	6a 05                	push   0x5
c0015bdc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdf:	ff d0                	call   eax
c0015be1:	83 c4 10             	add    esp,0x10
c0015be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	83 c0 24             	add    eax,0x24
c0015bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bee:	6a 00                	push   0x0
c0015bf0:	68 c2 53 01 c0       	push   0xc00153c2
c0015bf5:	6a 06                	push   0x6
c0015bf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfa:	ff d0                	call   eax
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	83 c0 24             	add    eax,0x24
c0015c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c09:	6a 00                	push   0x0
c0015c0b:	68 ef 52 01 c0       	push   0xc00152ef
c0015c10:	6a 07                	push   0x7
c0015c12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c15:	ff d0                	call   eax
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1f:	83 c0 24             	add    eax,0x24
c0015c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c24:	6a 00                	push   0x0
c0015c26:	68 d8 4a 01 c0       	push   0xc0014ad8
c0015c2b:	6a 08                	push   0x8
c0015c2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c30:	ff d0                	call   eax
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3a:	83 c0 24             	add    eax,0x24
c0015c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3f:	6a 00                	push   0x0
c0015c41:	68 a3 53 01 c0       	push   0xc00153a3
c0015c46:	6a 09                	push   0x9
c0015c48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4b:	ff d0                	call   eax
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c55:	83 c0 24             	add    eax,0x24
c0015c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5a:	6a 00                	push   0x0
c0015c5c:	68 a3 53 01 c0       	push   0xc00153a3
c0015c61:	6a 0a                	push   0xa
c0015c63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c66:	ff d0                	call   eax
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c70:	83 c0 24             	add    eax,0x24
c0015c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c75:	6a 00                	push   0x0
c0015c77:	68 a3 53 01 c0       	push   0xc00153a3
c0015c7c:	6a 0b                	push   0xb
c0015c7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c81:	ff d0                	call   eax
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8b:	83 c0 24             	add    eax,0x24
c0015c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c90:	6a 00                	push   0x0
c0015c92:	68 a3 53 01 c0       	push   0xc00153a3
c0015c97:	6a 0c                	push   0xc
c0015c99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9c:	ff d0                	call   eax
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca6:	83 c0 24             	add    eax,0x24
c0015ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cab:	6a 00                	push   0x0
c0015cad:	68 1e 53 01 c0       	push   0xc001531e
c0015cb2:	6a 0d                	push   0xd
c0015cb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb7:	ff d0                	call   eax
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc1:	83 c0 24             	add    eax,0x24
c0015cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc6:	6a 00                	push   0x0
c0015cc8:	68 57 53 01 c0       	push   0xc0015357
c0015ccd:	6a 0e                	push   0xe
c0015ccf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd2:	ff d0                	call   eax
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdc:	83 c0 24             	add    eax,0x24
c0015cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce1:	6a 00                	push   0x0
c0015ce3:	68 a3 53 01 c0       	push   0xc00153a3
c0015ce8:	6a 0f                	push   0xf
c0015cea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ced:	ff d0                	call   eax
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf7:	83 c0 24             	add    eax,0x24
c0015cfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfc:	6a 00                	push   0x0
c0015cfe:	68 a3 53 01 c0       	push   0xc00153a3
c0015d03:	6a 10                	push   0x10
c0015d05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d08:	ff d0                	call   eax
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d12:	83 c0 24             	add    eax,0x24
c0015d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d17:	6a 00                	push   0x0
c0015d19:	68 a3 53 01 c0       	push   0xc00153a3
c0015d1e:	6a 11                	push   0x11
c0015d20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d23:	ff d0                	call   eax
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2d:	83 c0 24             	add    eax,0x24
c0015d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d32:	6a 00                	push   0x0
c0015d34:	68 a3 53 01 c0       	push   0xc00153a3
c0015d39:	6a 12                	push   0x12
c0015d3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d3e:	ff d0                	call   eax
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d48:	83 c0 24             	add    eax,0x24
c0015d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4d:	6a 00                	push   0x0
c0015d4f:	68 a3 53 01 c0       	push   0xc00153a3
c0015d54:	6a 13                	push   0x13
c0015d56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d59:	ff d0                	call   eax
c0015d5b:	83 c4 10             	add    esp,0x10
c0015d5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d63:	83 c0 24             	add    eax,0x24
c0015d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d68:	6a 00                	push   0x0
c0015d6a:	68 a3 53 01 c0       	push   0xc00153a3
c0015d6f:	6a 14                	push   0x14
c0015d71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d74:	ff d0                	call   eax
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d7e:	83 c0 24             	add    eax,0x24
c0015d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d83:	6a 00                	push   0x0
c0015d85:	68 a3 53 01 c0       	push   0xc00153a3
c0015d8a:	6a 1e                	push   0x1e
c0015d8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d8f:	ff d0                	call   eax
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d99:	83 c0 24             	add    eax,0x24
c0015d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d9e:	6a 00                	push   0x0
c0015da0:	68 25 c8 01 c0       	push   0xc001c825
c0015da5:	6a 60                	push   0x60
c0015da7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015daa:	ff d0                	call   eax
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015db2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015db5:	c9                   	leave  
c0015db6:	c3                   	ret    
c0015db7:	90                   	nop

c0015db8 <InterruptController::convertLegacyIRQNumber(int)>:
c0015db8:	55                   	push   ebp
c0015db9:	89 e5                	mov    ebp,esp
c0015dbb:	83 ec 08             	sub    esp,0x8
c0015dbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc1:	83 ec 0c             	sub    esp,0xc
c0015dc4:	50                   	push   eax
c0015dc5:	e8 32 e9 ff ff       	call   c00146fc <Device::getName()>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	8a 00                	mov    al,BYTE PTR [eax]
c0015dcf:	3c 41                	cmp    al,0x41
c0015dd1:	0f 94 c0             	sete   al
c0015dd4:	84 c0                	test   al,al
c0015dd6:	74 28                	je     c0015e00 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dd8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015ddc:	7f 12                	jg     c0015df0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015dde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015de1:	05 80 d7 02 c0       	add    eax,0xc002d780
c0015de6:	8a 00                	mov    al,BYTE PTR [eax]
c0015de8:	0f b6 c0             	movzx  eax,al
c0015deb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015dee:	eb 10                	jmp    c0015e00 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	68 00 af 02 c0       	push   0xc002af00
c0015df8:	e8 9e 48 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0015dfd:	83 c4 10             	add    esp,0x10
c0015e00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e03:	c9                   	leave  
c0015e04:	c3                   	ret    
c0015e05:	90                   	nop

c0015e06 <startGUI(void*)>:
c0015e06:	55                   	push   ebp
c0015e07:	89 e5                	mov    ebp,esp
c0015e09:	53                   	push   ebx
c0015e0a:	83 ec 04             	sub    esp,0x4
c0015e0d:	e8 66 80 00 00       	call   c001de78 <unlockScheduler()>
c0015e12:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e18:	83 ec 08             	sub    esp,0x8
c0015e1b:	6a 01                	push   0x1
c0015e1d:	68 5c b2 02 c0       	push   0xc002b25c
c0015e22:	e8 a7 79 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	83 ec 08             	sub    esp,0x8
c0015e2d:	53                   	push   ebx
c0015e2e:	50                   	push   eax
c0015e2f:	e8 ce 7b 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c0015e34:	83 c4 10             	add    esp,0x10
c0015e37:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e3d:	83 ec 08             	sub    esp,0x8
c0015e40:	6a 01                	push   0x1
c0015e42:	68 76 b2 02 c0       	push   0xc002b276
c0015e47:	e8 82 79 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	83 ec 08             	sub    esp,0x8
c0015e52:	53                   	push   ebx
c0015e53:	50                   	push   eax
c0015e54:	e8 a9 7b 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c0015e59:	83 c4 10             	add    esp,0x10
c0015e5c:	90                   	nop
c0015e5d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e60:	c9                   	leave  
c0015e61:	c3                   	ret    

c0015e62 <startGUIVESA(void*)>:
c0015e62:	55                   	push   ebp
c0015e63:	89 e5                	mov    ebp,esp
c0015e65:	53                   	push   ebx
c0015e66:	83 ec 04             	sub    esp,0x4
c0015e69:	e8 0a 80 00 00       	call   c001de78 <unlockScheduler()>
c0015e6e:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e74:	83 ec 08             	sub    esp,0x8
c0015e77:	6a 01                	push   0x1
c0015e79:	68 90 b2 02 c0       	push   0xc002b290
c0015e7e:	e8 4b 79 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c0015e83:	83 c4 10             	add    esp,0x10
c0015e86:	83 ec 08             	sub    esp,0x8
c0015e89:	53                   	push   ebx
c0015e8a:	50                   	push   eax
c0015e8b:	e8 72 7b 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e99:	83 ec 08             	sub    esp,0x8
c0015e9c:	6a 01                	push   0x1
c0015e9e:	68 76 b2 02 c0       	push   0xc002b276
c0015ea3:	e8 26 79 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c0015ea8:	83 c4 10             	add    esp,0x10
c0015eab:	83 ec 08             	sub    esp,0x8
c0015eae:	53                   	push   ebx
c0015eaf:	50                   	push   eax
c0015eb0:	e8 4d 7b 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	90                   	nop
c0015eb9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ebc:	c9                   	leave  
c0015ebd:	c3                   	ret    

c0015ebe <sendKeyToTerminal(unsigned char)>:
c0015ebe:	55                   	push   ebp
c0015ebf:	89 e5                	mov    ebp,esp
c0015ec1:	83 ec 28             	sub    esp,0x28
c0015ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015eca:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0015ecf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ed3:	83 ec 08             	sub    esp,0x8
c0015ed6:	52                   	push   edx
c0015ed7:	50                   	push   eax
c0015ed8:	e8 d5 b4 ff ff       	call   c00113b2 <VgaText::receiveKey(unsigned char)>
c0015edd:	83 c4 10             	add    esp,0x10
c0015ee0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ee4:	75 41                	jne    c0015f27 <sendKeyToTerminal(unsigned char)+0x69>
c0015ee6:	e8 b2 7f 00 00       	call   c001de9d <lockStuff()>
c0015eeb:	a1 e0 e6 02 c0       	mov    eax,ds:0xc002e6e0
c0015ef0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ef3:	c7 05 e0 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6e0,0x0
c0015efd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015f01:	74 1f                	je     c0015f22 <sendKeyToTerminal(unsigned char)+0x64>
c0015f03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f06:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f12:	83 ec 0c             	sub    esp,0xc
c0015f15:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f18:	e8 71 85 00 00       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c0015f1d:	83 c4 10             	add    esp,0x10
c0015f20:	eb db                	jmp    c0015efd <sendKeyToTerminal(unsigned char)+0x3f>
c0015f22:	e8 10 83 00 00       	call   c001e237 <unlockStuff()>
c0015f27:	90                   	nop
c0015f28:	c9                   	leave  
c0015f29:	c3                   	ret    

c0015f2a <sendKeyboardToken(KeyboardToken)>:
c0015f2a:	55                   	push   ebp
c0015f2b:	89 e5                	mov    ebp,esp
c0015f2d:	83 ec 18             	sub    esp,0x18
c0015f30:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f36:	0f b7 c0             	movzx  eax,ax
c0015f39:	83 f2 01             	xor    edx,0x1
c0015f3c:	88 90 00 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1900],dl
c0015f42:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015f47:	85 c0                	test   eax,eax
c0015f49:	74 24                	je     c0015f6f <sendKeyboardToken(KeyboardToken)+0x45>
c0015f4b:	8b 0d e8 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6e8
c0015f51:	83 ec 04             	sub    esp,0x4
c0015f54:	68 00 e7 02 c0       	push   0xc002e700
c0015f59:	83 ec 08             	sub    esp,0x8
c0015f5c:	89 e2                	mov    edx,esp
c0015f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f61:	89 02                	mov    DWORD PTR [edx],eax
c0015f63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f66:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f6a:	ff d1                	call   ecx
c0015f6c:	83 c4 10             	add    esp,0x10
c0015f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f72:	66 3d 03 02          	cmp    ax,0x203
c0015f76:	75 07                	jne    c0015f7f <sendKeyboardToken(KeyboardToken)+0x55>
c0015f78:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c0015f7d:	84 c0                	test   al,al
c0015f7f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f83:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f86:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0015f8b:	38 c2                	cmp    dl,al
c0015f8d:	74 1c                	je     c0015fab <sendKeyboardToken(KeyboardToken)+0x81>
c0015f8f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f92:	a2 08 eb 02 c0       	mov    ds:0xc002eb08,al
c0015f97:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0015f9c:	0f b6 c0             	movzx  eax,al
c0015f9f:	83 ec 0c             	sub    esp,0xc
c0015fa2:	50                   	push   eax
c0015fa3:	e8 6a a6 ff ff       	call   c0010612 <setTerminalScrollLock(bool)>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fae:	84 c0                	test   al,al
c0015fb0:	0f 84 ae 00 00 00    	je     c0016064 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb9:	66 3d 10 03          	cmp    ax,0x310
c0015fbd:	75 06                	jne    c0015fc5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fbf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc8:	66 3d 11 03          	cmp    ax,0x311
c0015fcc:	75 06                	jne    c0015fd4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fce:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 12 03          	cmp    ax,0x312
c0015fdb:	75 06                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fdd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 13 03          	cmp    ax,0x313
c0015fea:	75 06                	jne    c0015ff2 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fec:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff5:	66 3d 14 03          	cmp    ax,0x314
c0015ff9:	75 06                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ffb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 15 03          	cmp    ax,0x315
c0016008:	75 06                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0xe6>
c001600a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 16 03          	cmp    ax,0x316
c0016017:	75 06                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0xf5>
c0016019:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 17 03          	cmp    ax,0x317
c0016026:	75 06                	jne    c001602e <sendKeyboardToken(KeyboardToken)+0x104>
c0016028:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001602e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016031:	66 3d 18 03          	cmp    ax,0x318
c0016035:	75 06                	jne    c001603d <sendKeyboardToken(KeyboardToken)+0x113>
c0016037:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001603d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016040:	66 3d 19 03          	cmp    ax,0x319
c0016044:	75 06                	jne    c001604c <sendKeyboardToken(KeyboardToken)+0x122>
c0016046:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001604c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604f:	66 3d 1a 03          	cmp    ax,0x31a
c0016053:	0f 85 c9 00 00 00    	jne    c0016122 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016059:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001605f:	e9 be 00 00 00       	jmp    c0016122 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016067:	66 3d 10 03          	cmp    ax,0x310
c001606b:	75 0a                	jne    c0016077 <sendKeyboardToken(KeyboardToken)+0x14d>
c001606d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016073:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607a:	66 3d 11 03          	cmp    ax,0x311
c001607e:	75 0a                	jne    c001608a <sendKeyboardToken(KeyboardToken)+0x160>
c0016080:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016086:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608d:	66 3d 12 03          	cmp    ax,0x312
c0016091:	75 0a                	jne    c001609d <sendKeyboardToken(KeyboardToken)+0x173>
c0016093:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016099:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a0:	66 3d 13 03          	cmp    ax,0x313
c00160a4:	75 0a                	jne    c00160b0 <sendKeyboardToken(KeyboardToken)+0x186>
c00160a6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b3:	66 3d 14 03          	cmp    ax,0x314
c00160b7:	75 0a                	jne    c00160c3 <sendKeyboardToken(KeyboardToken)+0x199>
c00160b9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c6:	66 3d 15 03          	cmp    ax,0x315
c00160ca:	75 0a                	jne    c00160d6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160cc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d9:	66 3d 16 03          	cmp    ax,0x316
c00160dd:	75 0a                	jne    c00160e9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160df:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ec:	66 3d 17 03          	cmp    ax,0x317
c00160f0:	75 0a                	jne    c00160fc <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160f2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ff:	66 3d 18 03          	cmp    ax,0x318
c0016103:	75 0a                	jne    c001610f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016105:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001610b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001610f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016112:	66 3d 19 03          	cmp    ax,0x319
c0016116:	75 0a                	jne    c0016122 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016118:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001611e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016125:	66 3d 00 02          	cmp    ax,0x200
c0016129:	75 2c                	jne    c0016157 <sendKeyboardToken(KeyboardToken)+0x22d>
c001612b:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c0016130:	83 f0 01             	xor    eax,0x1
c0016133:	84 c0                	test   al,al
c0016135:	74 20                	je     c0016157 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016137:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001613c:	6a 01                	push   0x1
c001613e:	6a 00                	push   0x0
c0016140:	68 06 5e 01 c0       	push   0xc0015e06
c0016145:	50                   	push   eax
c0016146:	e8 5d 7e 00 00       	call   c001dfa8 <Process::createThread(void (*)(void*), void*, int)>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c0016155:	eb 33                	jmp    c001618a <sendKeyboardToken(KeyboardToken)+0x260>
c0016157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615a:	66 3d 01 02          	cmp    ax,0x201
c001615e:	75 2a                	jne    c001618a <sendKeyboardToken(KeyboardToken)+0x260>
c0016160:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c0016165:	83 f0 01             	xor    eax,0x1
c0016168:	84 c0                	test   al,al
c001616a:	74 1e                	je     c001618a <sendKeyboardToken(KeyboardToken)+0x260>
c001616c:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0016171:	6a 01                	push   0x1
c0016173:	6a 00                	push   0x0
c0016175:	68 62 5e 01 c0       	push   0xc0015e62
c001617a:	50                   	push   eax
c001617b:	e8 28 7e 00 00       	call   c001dfa8 <Process::createThread(void (*)(void*), void*, int)>
c0016180:	83 c4 10             	add    esp,0x10
c0016183:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c001618a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618d:	66 3d 1d 03          	cmp    ax,0x31d
c0016191:	75 06                	jne    c0016199 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016193:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619c:	66 3d 1c 03          	cmp    ax,0x31c
c00161a0:	75 06                	jne    c00161a8 <sendKeyboardToken(KeyboardToken)+0x27e>
c00161a2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ab:	66 3d 1b 03          	cmp    ax,0x31b
c00161af:	75 06                	jne    c00161b7 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161b1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ba:	66 3d 1e 03          	cmp    ax,0x31e
c00161be:	75 06                	jne    c00161c6 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161c0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c9:	66 3d 1f 03          	cmp    ax,0x31f
c00161cd:	75 06                	jne    c00161d5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161cf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d8:	66 3d 1a 03          	cmp    ax,0x31a
c00161dc:	75 06                	jne    c00161e4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161de:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161e4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161eb:	83 f0 01             	xor    eax,0x1
c00161ee:	84 c0                	test   al,al
c00161f0:	74 77                	je     c0016269 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161f2:	a0 01 e8 02 c0       	mov    al,ds:0xc002e801
c00161f7:	84 c0                	test   al,al
c00161f9:	74 41                	je     c001623c <sendKeyboardToken(KeyboardToken)+0x312>
c00161fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ff:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016203:	74 2b                	je     c0016230 <sendKeyboardToken(KeyboardToken)+0x306>
c0016205:	8b 15 04 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb04
c001620b:	89 d0                	mov    eax,edx
c001620d:	c1 e0 02             	shl    eax,0x2
c0016210:	01 d0                	add    eax,edx
c0016212:	01 c0                	add    eax,eax
c0016214:	a3 04 eb 02 c0       	mov    ds:0xc002eb04,eax
c0016219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621c:	0f b7 c0             	movzx  eax,ax
c001621f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016222:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016227:	01 d0                	add    eax,edx
c0016229:	a3 04 eb 02 c0       	mov    ds:0xc002eb04,eax
c001622e:	eb 6d                	jmp    c001629d <sendKeyboardToken(KeyboardToken)+0x373>
c0016230:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c001623a:	eb 61                	jmp    c001629d <sendKeyboardToken(KeyboardToken)+0x373>
c001623c:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016241:	85 c0                	test   eax,eax
c0016243:	74 18                	je     c001625d <sendKeyboardToken(KeyboardToken)+0x333>
c0016245:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c001624a:	0f b6 c0             	movzx  eax,al
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	50                   	push   eax
c0016251:	e8 68 fc ff ff       	call   c0015ebe <sendKeyToTerminal(unsigned char)>
c0016256:	83 c4 10             	add    esp,0x10
c0016259:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001625d:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0016267:	eb 34                	jmp    c001629d <sendKeyboardToken(KeyboardToken)+0x373>
c0016269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626c:	66 3d 01 01          	cmp    ax,0x101
c0016270:	75 2b                	jne    c001629d <sendKeyboardToken(KeyboardToken)+0x373>
c0016272:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016277:	85 c0                	test   eax,eax
c0016279:	74 18                	je     c0016293 <sendKeyboardToken(KeyboardToken)+0x369>
c001627b:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016280:	0f b6 c0             	movzx  eax,al
c0016283:	83 ec 0c             	sub    esp,0xc
c0016286:	50                   	push   eax
c0016287:	e8 32 fc ff ff       	call   c0015ebe <sendKeyToTerminal(unsigned char)>
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016293:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c001629d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162a0:	83 f0 01             	xor    eax,0x1
c00162a3:	84 c0                	test   al,al
c00162a5:	74 4c                	je     c00162f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162aa:	83 f0 01             	xor    eax,0x1
c00162ad:	84 c0                	test   al,al
c00162af:	74 42                	je     c00162f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b1:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c00162b6:	83 f0 01             	xor    eax,0x1
c00162b9:	84 c0                	test   al,al
c00162bb:	74 36                	je     c00162f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c0:	66 83 f8 1f          	cmp    ax,0x1f
c00162c4:	76 09                	jbe    c00162cf <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c9:	66 83 f8 7e          	cmp    ax,0x7e
c00162cd:	76 12                	jbe    c00162e1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d2:	66 83 f8 0a          	cmp    ax,0xa
c00162d6:	74 09                	je     c00162e1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162db:	66 83 f8 08          	cmp    ax,0x8
c00162df:	75 12                	jne    c00162f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e4:	0f b6 c0             	movzx  eax,al
c00162e7:	83 ec 0c             	sub    esp,0xc
c00162ea:	50                   	push   eax
c00162eb:	e8 ce fb ff ff       	call   c0015ebe <sendKeyToTerminal(unsigned char)>
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162f6:	83 f0 01             	xor    eax,0x1
c00162f9:	84 c0                	test   al,al
c00162fb:	74 4f                	je     c001634c <sendKeyboardToken(KeyboardToken)+0x422>
c00162fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016300:	83 f0 01             	xor    eax,0x1
c0016303:	84 c0                	test   al,al
c0016305:	74 45                	je     c001634c <sendKeyboardToken(KeyboardToken)+0x422>
c0016307:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c001630c:	84 c0                	test   al,al
c001630e:	74 3c                	je     c001634c <sendKeyboardToken(KeyboardToken)+0x422>
c0016310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016313:	66 83 f8 3f          	cmp    ax,0x3f
c0016317:	76 33                	jbe    c001634c <sendKeyboardToken(KeyboardToken)+0x422>
c0016319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631c:	66 83 f8 7f          	cmp    ax,0x7f
c0016320:	77 2a                	ja     c001634c <sendKeyboardToken(KeyboardToken)+0x422>
c0016322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016325:	88 c2                	mov    dl,al
c0016327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632a:	66 83 f8 5f          	cmp    ax,0x5f
c001632e:	76 04                	jbe    c0016334 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016330:	b0 20                	mov    al,0x20
c0016332:	eb 02                	jmp    c0016336 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016334:	b0 00                	mov    al,0x0
c0016336:	29 c2                	sub    edx,eax
c0016338:	88 d0                	mov    al,dl
c001633a:	83 e8 40             	sub    eax,0x40
c001633d:	0f b6 c0             	movzx  eax,al
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	50                   	push   eax
c0016344:	e8 75 fb ff ff       	call   c0015ebe <sendKeyToTerminal(unsigned char)>
c0016349:	83 c4 10             	add    esp,0x10
c001634c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634f:	66 3d 00 03          	cmp    ax,0x300
c0016353:	75 0f                	jne    c0016364 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016355:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016358:	83 f0 01             	xor    eax,0x1
c001635b:	84 c0                	test   al,al
c001635d:	74 05                	je     c0016364 <sendKeyboardToken(KeyboardToken)+0x43a>
c001635f:	e8 e3 aa ff ff       	call   c0010e47 <doTerminalCycle()>
c0016364:	90                   	nop
c0016365:	c9                   	leave  
c0016366:	c3                   	ret    

c0016367 <clearInternalKeybuffer(VgaText*)>:
c0016367:	55                   	push   ebp
c0016368:	89 e5                	mov    ebp,esp
c001636a:	83 ec 08             	sub    esp,0x8
c001636d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016370:	05 34 11 00 00       	add    eax,0x1134
c0016375:	83 ec 0c             	sub    esp,0xc
c0016378:	50                   	push   eax
c0016379:	e8 16 a4 fe ff       	call   c0000794 <strlen>
c001637e:	83 c4 10             	add    esp,0x10
c0016381:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016384:	81 c2 34 11 00 00    	add    edx,0x1134
c001638a:	83 ec 04             	sub    esp,0x4
c001638d:	50                   	push   eax
c001638e:	6a 00                	push   0x0
c0016390:	52                   	push   edx
c0016391:	e8 e2 a3 fe ff       	call   c0000778 <memset>
c0016396:	83 c4 10             	add    esp,0x10
c0016399:	90                   	nop
c001639a:	c9                   	leave  
c001639b:	c3                   	ret    

c001639c <readKeyboard(VgaText*, char*, unsigned long)>:
c001639c:	55                   	push   ebp
c001639d:	89 e5                	mov    ebp,esp
c001639f:	83 ec 18             	sub    esp,0x18
c00163a2:	fb                   	sti    
c00163a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163aa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163ae:	0f 84 8a 00 00 00    	je     c001643e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163bd:	84 c0                	test   al,al
c00163bf:	75 11                	jne    c00163d2 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00163c1:	e8 b0 7a 00 00       	call   c001de76 <lockScheduler()>
c00163c6:	e8 e7 7d 00 00       	call   c001e1b2 <schedule()>
c00163cb:	e8 a8 7a 00 00       	call   c001de78 <unlockScheduler()>
c00163d0:	eb e2                	jmp    c00163b4 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163d5:	8d 50 01             	lea    edx,[eax+0x1]
c00163d8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163de:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163e4:	88 10                	mov    BYTE PTR [eax],dl
c00163e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163e9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163ef:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163f5:	05 34 11 00 00       	add    eax,0x1134
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	50                   	push   eax
c00163fe:	e8 91 a3 fe ff       	call   c0000794 <strlen>
c0016403:	83 c4 10             	add    esp,0x10
c0016406:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016409:	81 c2 34 11 00 00    	add    edx,0x1134
c001640f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016412:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016415:	81 c2 34 11 00 00    	add    edx,0x1134
c001641b:	83 ec 04             	sub    esp,0x4
c001641e:	50                   	push   eax
c001641f:	51                   	push   ecx
c0016420:	52                   	push   edx
c0016421:	e8 56 a2 fe ff       	call   c000067c <memmove>
c0016426:	83 c4 10             	add    esp,0x10
c0016429:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001642c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001642f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016433:	0f 85 71 ff ff ff    	jne    c00163aa <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016439:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001643c:	eb 03                	jmp    c0016441 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001643e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016441:	c9                   	leave  
c0016442:	c3                   	ret    
c0016443:	90                   	nop

c0016444 <Keyboard::Keyboard(char const*)>:
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644b:	83 ec 08             	sub    esp,0x8
c001644e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016452:	50                   	push   eax
c0016453:	e8 a8 e1 ff ff       	call   c0014600 <Device::Device(char const*)>
c0016458:	83 c4 10             	add    esp,0x10
c001645b:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c0016460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016464:	89 10                	mov    DWORD PTR [eax],edx
c0016466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016474:	c6 05 e4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6e4,0x1
c001647b:	90                   	nop
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    

c0016480 <Keyboard::~Keyboard()>:
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c0016488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648c:	89 10                	mov    DWORD PTR [eax],edx
c001648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	50                   	push   eax
c0016496:	e8 47 de ff ff       	call   c00142e2 <Device::~Device()>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	90                   	nop
c001649f:	83 c4 0c             	add    esp,0xc
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <Keyboard::~Keyboard()>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	83 ec 0c             	sub    esp,0xc
c00164aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ae:	e8 cd ff ff ff       	call   c0016480 <Keyboard::~Keyboard()>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	68 5c 01 00 00       	push   0x15c
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	e8 43 ca ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00164c7:	83 c4 10             	add    esp,0x10
c00164ca:	83 c4 0c             	add    esp,0xc
c00164cd:	c3                   	ret    

c00164ce <LogicalDisk::close(int, int, void*)>:
c00164ce:	83 c8 ff             	or     eax,0xffffffff
c00164d1:	c3                   	ret    

c00164d2 <LogicalDisk::~LogicalDisk()>:
c00164d2:	83 ec 0c             	sub    esp,0xc
c00164d5:	ba 64 b3 02 c0       	mov    edx,0xc002b364
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	89 10                	mov    DWORD PTR [eax],edx
c00164e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	50                   	push   eax
c00164e8:	e8 f5 dd ff ff       	call   c00142e2 <Device::~Device()>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	90                   	nop
c00164f1:	83 c4 0c             	add    esp,0xc
c00164f4:	c3                   	ret    
c00164f5:	90                   	nop

c00164f6 <LogicalDisk::~LogicalDisk()>:
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	83 ec 0c             	sub    esp,0xc
c00164fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016500:	e8 cd ff ff ff       	call   c00164d2 <LogicalDisk::~LogicalDisk()>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	83 ec 08             	sub    esp,0x8
c001650b:	68 74 01 00 00       	push   0x174
c0016510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016514:	e8 f1 c9 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0016519:	83 c4 10             	add    esp,0x10
c001651c:	83 c4 0c             	add    esp,0xc
c001651f:	c3                   	ret    

c0016520 <LogicalDisk::open(int, int, void*)>:
c0016520:	83 ec 18             	sub    esp,0x18
c0016523:	68 e0 b2 02 c0       	push   0xc002b2e0
c0016528:	e8 6e 41 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001652d:	83 c8 ff             	or     eax,0xffffffff
c0016530:	83 c4 1c             	add    esp,0x1c
c0016533:	c3                   	ret    

c0016534 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016534:	53                   	push   ebx
c0016535:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001653d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016541:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016547:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001654d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016553:	77 10                	ja     c0016565 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016555:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001655b:	89 d3                	mov    ebx,edx
c001655d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016563:	72 05                	jb     c001656a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016565:	83 c8 ff             	or     eax,0xffffffff
c0016568:	89 c2                	mov    edx,eax
c001656a:	5b                   	pop    ebx
c001656b:	c3                   	ret    

c001656c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001656c:	56                   	push   esi
c001656d:	83 c8 ff             	or     eax,0xffffffff
c0016570:	53                   	push   ebx
c0016571:	89 c2                	mov    edx,eax
c0016573:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016577:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001657b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001657f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016585:	77 27                	ja     c00165ae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016587:	89 d8                	mov    eax,ebx
c0016589:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001658f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016595:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001659a:	89 c2                	mov    edx,eax
c001659c:	73 10                	jae    c00165ae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001659e:	89 c8                	mov    eax,ecx
c00165a0:	89 da                	mov    edx,ebx
c00165a2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165a8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165ae:	5b                   	pop    ebx
c00165af:	5e                   	pop    esi
c00165b0:	c3                   	ret    
c00165b1:	90                   	nop

c00165b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165b2:	83 ec 1c             	sub    esp,0x1c
c00165b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00165cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d8:	83 ec 08             	sub    esp,0x8
c00165db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165df:	50                   	push   eax
c00165e0:	e8 1b e0 ff ff       	call   c0014600 <Device::Device(char const*)>
c00165e5:	83 c4 10             	add    esp,0x10
c00165e8:	ba 64 b3 02 c0       	mov    edx,0xc002b364
c00165ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f1:	89 10                	mov    DWORD PTR [eax],edx
c00165f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016602:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016617:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001661b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001661f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016623:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016629:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001662f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016636:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001663a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016640:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001664e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016658:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016662:	90                   	nop
c0016663:	83 c4 1c             	add    esp,0x1c
c0016666:	c3                   	ret    
c0016667:	90                   	nop

c0016668 <LogicalDisk::assignDriveLetter()>:
c0016668:	55                   	push   ebp
c0016669:	57                   	push   edi
c001666a:	56                   	push   esi
c001666b:	53                   	push   ebx
c001666c:	83 ec 14             	sub    esp,0x14
c001666f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016673:	8b 3d 20 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb20
c0016679:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001667f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016683:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016689:	8b 3d 24 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb24
c001668f:	3c 01                	cmp    al,0x1
c0016691:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016695:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016699:	19 c0                	sbb    eax,eax
c001669b:	83 e0 02             	and    eax,0x2
c001669e:	83 c0 41             	add    eax,0x41
c00166a1:	0f be e8             	movsx  ebp,al
c00166a4:	3c 43                	cmp    al,0x43
c00166a6:	75 10                	jne    c00166b8 <LogicalDisk::assignDriveLetter()+0x50>
c00166a8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166af:	75 5d                	jne    c001670e <LogicalDisk::assignDriveLetter()+0xa6>
c00166b1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166b6:	75 56                	jne    c001670e <LogicalDisk::assignDriveLetter()+0xa6>
c00166b8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166bb:	ba 01 00 00 00       	mov    edx,0x1
c00166c0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166c4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166c8:	d3 e2                	shl    edx,cl
c00166ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166ce:	89 d7                	mov    edi,edx
c00166d0:	89 d6                	mov    esi,edx
c00166d2:	c1 ff 1f             	sar    edi,0x1f
c00166d5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166d9:	21 f9                	and    ecx,edi
c00166db:	09 d1                	or     ecx,edx
c00166dd:	75 2f                	jne    c001670e <LogicalDisk::assignDriveLetter()+0xa6>
c00166df:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166e7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166ed:	09 f2                	or     edx,esi
c00166ef:	89 15 20 eb 02 c0    	mov    DWORD PTR ds:0xc002eb20,edx
c00166f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166f9:	09 fa                	or     edx,edi
c00166fb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166ff:	89 15 24 eb 02 c0    	mov    DWORD PTR ds:0xc002eb24,edx
c0016705:	89 1c bd 40 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd14c0],ebx
c001670c:	eb 08                	jmp    c0016716 <LogicalDisk::assignDriveLetter()+0xae>
c001670e:	45                   	inc    ebp
c001670f:	40                   	inc    eax
c0016710:	3c 5b                	cmp    al,0x5b
c0016712:	75 90                	jne    c00166a4 <LogicalDisk::assignDriveLetter()+0x3c>
c0016714:	31 c0                	xor    eax,eax
c0016716:	83 c4 14             	add    esp,0x14
c0016719:	5b                   	pop    ebx
c001671a:	5e                   	pop    esi
c001671b:	5f                   	pop    edi
c001671c:	5d                   	pop    ebp
c001671d:	c3                   	ret    

c001671e <LogicalDisk::mount()>:
c001671e:	56                   	push   esi
c001671f:	53                   	push   ebx
c0016720:	51                   	push   ecx
c0016721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016725:	8b 1d b0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6b0
c001672b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016735:	85 db                	test   ebx,ebx
c0016737:	74 50                	je     c0016789 <LogicalDisk::mount()+0x6b>
c0016739:	e8 23 77 00 00       	call   c001de61 <getIRQNestingLevel()>
c001673e:	52                   	push   edx
c001673f:	52                   	push   edx
c0016740:	50                   	push   eax
c0016741:	68 04 b3 02 c0       	push   0xc002b304
c0016746:	e8 9f c8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001674b:	83 c4 0c             	add    esp,0xc
c001674e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016755:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016757:	83 e8 41             	sub    eax,0x41
c001675a:	50                   	push   eax
c001675b:	56                   	push   esi
c001675c:	53                   	push   ebx
c001675d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016760:	83 c4 10             	add    esp,0x10
c0016763:	84 c0                	test   al,al
c0016765:	74 08                	je     c001676f <LogicalDisk::mount()+0x51>
c0016767:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001676d:	eb 1c                	jmp    c001678b <LogicalDisk::mount()+0x6d>
c001676f:	e8 ed 76 00 00       	call   c001de61 <getIRQNestingLevel()>
c0016774:	51                   	push   ecx
c0016775:	51                   	push   ecx
c0016776:	50                   	push   eax
c0016777:	68 1f b3 02 c0       	push   0xc002b31f
c001677c:	e8 69 c8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0016781:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	eb ac                	jmp    c0016735 <LogicalDisk::mount()+0x17>
c0016789:	31 c0                	xor    eax,eax
c001678b:	5a                   	pop    edx
c001678c:	5b                   	pop    ebx
c001678d:	5e                   	pop    esi
c001678e:	c3                   	ret    
c001678f:	90                   	nop

c0016790 <LogicalDisk::unmount()>:
c0016790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016794:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001679e:	c3                   	ret    
c001679f:	90                   	nop

c00167a0 <LogicalDisk::eject()>:
c00167a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167a4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00167ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167b3:	90                   	nop

c00167b4 <LogicalDisk::unassignDriveLetter()>:
c00167b4:	57                   	push   edi
c00167b5:	56                   	push   esi
c00167b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167ba:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167c1:	84 c9                	test   cl,cl
c00167c3:	75 0f                	jne    c00167d4 <LogicalDisk::unassignDriveLetter()+0x20>
c00167c5:	c7 44 24 0c 3a b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b33a
c00167cd:	5e                   	pop    esi
c00167ce:	5f                   	pop    edi
c00167cf:	e9 c7 3e 00 00       	jmp    c001a69b <Krnl::panic(char const*)>
c00167d4:	83 e9 41             	sub    ecx,0x41
c00167d7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167de:	b8 01 00 00 00       	mov    eax,0x1
c00167e3:	c7 04 8d 40 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd14c0],0x0
c00167ee:	d3 e0                	shl    eax,cl
c00167f0:	89 c7                	mov    edi,eax
c00167f2:	f7 d0                	not    eax
c00167f4:	c1 ff 1f             	sar    edi,0x1f
c00167f7:	21 05 20 eb 02 c0    	and    DWORD PTR ds:0xc002eb20,eax
c00167fd:	89 fe                	mov    esi,edi
c00167ff:	f7 d6                	not    esi
c0016801:	21 35 24 eb 02 c0    	and    DWORD PTR ds:0xc002eb24,esi
c0016807:	5e                   	pop    esi
c0016808:	5f                   	pop    edi
c0016809:	c3                   	ret    

c001680a <LogicalDisk::read(unsigned long long, int, void*)>:
c001680a:	57                   	push   edi
c001680b:	56                   	push   esi
c001680c:	53                   	push   ebx
c001680d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016815:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016819:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001681d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016823:	77 41                	ja     c0016866 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016825:	99                   	cdq    
c0016826:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001682c:	01 c8                	add    eax,ecx
c001682e:	11 da                	adc    edx,ebx
c0016830:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016836:	19 d7                	sbb    edi,edx
c0016838:	72 33                	jb     c001686d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001683a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016840:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016846:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001684a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001684e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016854:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001685a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001685e:	5b                   	pop    ebx
c001685f:	5e                   	pop    esi
c0016860:	5f                   	pop    edi
c0016861:	e9 b0 0a 00 00       	jmp    c0017316 <VCache::read(unsigned long long, int, void*)>
c0016866:	b8 05 00 00 00       	mov    eax,0x5
c001686b:	eb 05                	jmp    c0016872 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001686d:	b8 07 00 00 00       	mov    eax,0x7
c0016872:	5b                   	pop    ebx
c0016873:	5e                   	pop    esi
c0016874:	5f                   	pop    edi
c0016875:	c3                   	ret    

c0016876 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016876:	57                   	push   edi
c0016877:	56                   	push   esi
c0016878:	53                   	push   ebx
c0016879:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001687d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016881:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016889:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001688f:	77 41                	ja     c00168d2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016891:	99                   	cdq    
c0016892:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016898:	01 c8                	add    eax,ecx
c001689a:	11 da                	adc    edx,ebx
c001689c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168a2:	19 d7                	sbb    edi,edx
c00168a4:	72 33                	jb     c00168d9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168a6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168ac:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168b6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168ba:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168ca:	5b                   	pop    ebx
c00168cb:	5e                   	pop    esi
c00168cc:	5f                   	pop    edi
c00168cd:	e9 4e 09 00 00       	jmp    c0017220 <VCache::write(unsigned long long, int, void*)>
c00168d2:	b8 05 00 00 00       	mov    eax,0x5
c00168d7:	eb 05                	jmp    c00168de <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168d9:	b8 07 00 00 00       	mov    eax,0x7
c00168de:	5b                   	pop    ebx
c00168df:	5e                   	pop    esi
c00168e0:	5f                   	pop    edi
c00168e1:	c3                   	ret    

c00168e2 <Mouse::Mouse(char const*)>:
c00168e2:	83 ec 0c             	sub    esp,0xc
c00168e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e9:	83 ec 08             	sub    esp,0x8
c00168ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f0:	50                   	push   eax
c00168f1:	e8 0a dd ff ff       	call   c0014600 <Device::Device(char const*)>
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c00168fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016902:	89 10                	mov    DWORD PTR [eax],edx
c0016904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016908:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016912:	90                   	nop
c0016913:	83 c4 0c             	add    esp,0xc
c0016916:	c3                   	ret    
c0016917:	90                   	nop

c0016918 <Mouse::~Mouse()>:
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0016920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016924:	89 10                	mov    DWORD PTR [eax],edx
c0016926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	50                   	push   eax
c001692e:	e8 af d9 ff ff       	call   c00142e2 <Device::~Device()>
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	90                   	nop
c0016937:	83 c4 0c             	add    esp,0xc
c001693a:	c3                   	ret    
c001693b:	90                   	nop

c001693c <Mouse::~Mouse()>:
c001693c:	83 ec 0c             	sub    esp,0xc
c001693f:	83 ec 0c             	sub    esp,0xc
c0016942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016946:	e8 cd ff ff ff       	call   c0016918 <Mouse::~Mouse()>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	83 ec 08             	sub    esp,0x8
c0016951:	68 58 01 00 00       	push   0x158
c0016956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001695a:	e8 ab c5 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	83 c4 0c             	add    esp,0xc
c0016965:	c3                   	ret    

c0016966 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016966:	55                   	push   ebp
c0016967:	57                   	push   edi
c0016968:	56                   	push   esi
c0016969:	53                   	push   ebx
c001696a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016970:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016977:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001697e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016985:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001698c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016990:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016994:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001699b:	e8 5c dd ff ff       	call   c00146fc <Device::getName()>
c00169a0:	5a                   	pop    edx
c00169a1:	59                   	pop    ecx
c00169a2:	50                   	push   eax
c00169a3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169a7:	55                   	push   ebp
c00169a8:	e8 87 9e fe ff       	call   c0000834 <strcpy>
c00169ad:	5b                   	pop    ebx
c00169ae:	58                   	pop    eax
c00169af:	68 b4 b3 02 c0       	push   0xc002b3b4
c00169b4:	55                   	push   ebp
c00169b5:	e8 ba 9f fe ff       	call   c0000974 <strcat>
c00169ba:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169c1:	e8 7a 8e ff ff       	call   c000f840 <malloc>
c00169c6:	83 c4 0c             	add    esp,0xc
c00169c9:	89 c3                	mov    ebx,eax
c00169cb:	57                   	push   edi
c00169cc:	56                   	push   esi
c00169cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169d5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169dc:	55                   	push   ebp
c00169dd:	50                   	push   eax
c00169de:	e8 cf fb ff ff       	call   c00165b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169e3:	83 c4 14             	add    esp,0x14
c00169e6:	53                   	push   ebx
c00169e7:	e8 7c fc ff ff       	call   c0016668 <LogicalDisk::assignDriveLetter()>
c00169ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169ef:	89 c6                	mov    esi,eax
c00169f1:	e8 28 fd ff ff       	call   c001671e <LogicalDisk::mount()>
c00169f6:	58                   	pop    eax
c00169f7:	5a                   	pop    edx
c00169f8:	53                   	push   ebx
c00169f9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a00:	e8 0b da ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016a05:	59                   	pop    ecx
c0016a06:	89 f0                	mov    eax,esi
c0016a08:	5b                   	pop    ebx
c0016a09:	0f be f0             	movsx  esi,al
c0016a0c:	56                   	push   esi
c0016a0d:	68 bf b3 02 c0       	push   0xc002b3bf
c0016a12:	e8 d3 c5 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0016a17:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a1d:	5b                   	pop    ebx
c0016a1e:	5e                   	pop    esi
c0016a1f:	5f                   	pop    edi
c0016a20:	5d                   	pop    ebp
c0016a21:	c3                   	ret    

c0016a22 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a22:	55                   	push   ebp
c0016a23:	57                   	push   edi
c0016a24:	56                   	push   esi
c0016a25:	53                   	push   ebx
c0016a26:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a2c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a33:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a39:	3d 00 02 00 00       	cmp    eax,0x200
c0016a3e:	74 27                	je     c0016a67 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a40:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a46:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a4c:	83 ec 10             	sub    esp,0x10
c0016a4f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a53:	99                   	cdq    
c0016a54:	c1 e6 0a             	shl    esi,0xa
c0016a57:	52                   	push   edx
c0016a58:	89 fd                	mov    ebp,edi
c0016a5a:	50                   	push   eax
c0016a5b:	55                   	push   ebp
c0016a5c:	56                   	push   esi
c0016a5d:	e8 ea ff 00 00       	call   c0026a4c <__udivdi3>
c0016a62:	e9 b1 00 00 00       	jmp    c0016b18 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a67:	83 ec 0c             	sub    esp,0xc
c0016a6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a6c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a70:	56                   	push   esi
c0016a71:	6a 01                	push   0x1
c0016a73:	6a 00                	push   0x0
c0016a75:	6a 00                	push   0x0
c0016a77:	53                   	push   ebx
c0016a78:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a7b:	83 c4 20             	add    esp,0x20
c0016a7e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a86:	75 0a                	jne    c0016a92 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a88:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a90:	74 2c                	je     c0016abe <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a92:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a98:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aa4:	83 ec 10             	sub    esp,0x10
c0016aa7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aab:	89 f7                	mov    edi,esi
c0016aad:	c1 e0 0a             	shl    eax,0xa
c0016ab0:	c1 ff 1f             	sar    edi,0x1f
c0016ab3:	57                   	push   edi
c0016ab4:	56                   	push   esi
c0016ab5:	52                   	push   edx
c0016ab6:	50                   	push   eax
c0016ab7:	e8 90 ff 00 00       	call   c0026a4c <__udivdi3>
c0016abc:	eb 5a                	jmp    c0016b18 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016abe:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ac5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016acc:	83 e1 7f             	and    ecx,0x7f
c0016acf:	83 e0 7f             	and    eax,0x7f
c0016ad2:	01 c1                	add    ecx,eax
c0016ad4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016adb:	83 e0 7f             	and    eax,0x7f
c0016ade:	01 c1                	add    ecx,eax
c0016ae0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ae7:	83 e0 7f             	and    eax,0x7f
c0016aea:	00 c1                	add    cl,al
c0016aec:	74 41                	je     c0016b2f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016aee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016af4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016afa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b00:	83 ec 10             	sub    esp,0x10
c0016b03:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b07:	89 f7                	mov    edi,esi
c0016b09:	c1 e0 0a             	shl    eax,0xa
c0016b0c:	c1 ff 1f             	sar    edi,0x1f
c0016b0f:	57                   	push   edi
c0016b10:	56                   	push   esi
c0016b11:	52                   	push   edx
c0016b12:	50                   	push   eax
c0016b13:	e8 34 ff 00 00       	call   c0026a4c <__udivdi3>
c0016b18:	83 c4 14             	add    esp,0x14
c0016b1b:	52                   	push   edx
c0016b1c:	50                   	push   eax
c0016b1d:	6a 00                	push   0x0
c0016b1f:	6a 00                	push   0x0
c0016b21:	53                   	push   ebx
c0016b22:	e8 3f fe ff ff       	call   c0016966 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b27:	83 c4 20             	add    esp,0x20
c0016b2a:	e9 79 01 00 00       	jmp    c0016ca8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b2f:	89 f0                	mov    eax,esi
c0016b31:	31 f6                	xor    esi,esi
c0016b33:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b3a:	75 02                	jne    c0016b3e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b3c:	89 f1                	mov    ecx,esi
c0016b3e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b45:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b4c:	c1 e2 08             	shl    edx,0x8
c0016b4f:	c1 e7 10             	shl    edi,0x10
c0016b52:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b5a:	09 fa                	or     edx,edi
c0016b5c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b64:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b6b:	83 c0 10             	add    eax,0x10
c0016b6e:	09 fa                	or     edx,edi
c0016b70:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b77:	c1 e7 18             	shl    edi,0x18
c0016b7a:	09 fa                	or     edx,edi
c0016b7c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b83:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b87:	c1 e7 10             	shl    edi,0x10
c0016b8a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b91:	c1 e2 08             	shl    edx,0x8
c0016b94:	09 fa                	or     edx,edi
c0016b96:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b9d:	09 fa                	or     edx,edi
c0016b9f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ba6:	c1 e7 18             	shl    edi,0x18
c0016ba9:	09 fa                	or     edx,edi
c0016bab:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016baf:	46                   	inc    esi
c0016bb0:	83 fe 04             	cmp    esi,0x4
c0016bb3:	0f 85 7a ff ff ff    	jne    c0016b33 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bbd:	83 f0 01             	xor    eax,0x1
c0016bc0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bc4:	75 57                	jne    c0016c1d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bca:	83 f0 01             	xor    eax,0x1
c0016bcd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bd1:	75 4a                	jne    c0016c1d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bd3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bd7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bdf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016be7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bed:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bf3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bf9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bfd:	89 f7                	mov    edi,esi
c0016bff:	c1 e0 0a             	shl    eax,0xa
c0016c02:	c1 ff 1f             	sar    edi,0x1f
c0016c05:	57                   	push   edi
c0016c06:	56                   	push   esi
c0016c07:	52                   	push   edx
c0016c08:	50                   	push   eax
c0016c09:	e8 3e fe 00 00       	call   c0026a4c <__udivdi3>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c19:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c1d:	84 c9                	test   cl,cl
c0016c1f:	74 53                	je     c0016c74 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c21:	0f b6 c9             	movzx  ecx,cl
c0016c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c3c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c40:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c54:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c58:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c5c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c60:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c6c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c70:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c74:	31 ed                	xor    ebp,ebp
c0016c76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c7e:	89 f8                	mov    eax,edi
c0016c80:	09 f0                	or     eax,esi
c0016c82:	74 1e                	je     c0016ca2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c84:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c88:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c8c:	89 d1                	mov    ecx,edx
c0016c8e:	09 c1                	or     ecx,eax
c0016c90:	74 10                	je     c0016ca2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c92:	83 ec 0c             	sub    esp,0xc
c0016c95:	57                   	push   edi
c0016c96:	56                   	push   esi
c0016c97:	52                   	push   edx
c0016c98:	50                   	push   eax
c0016c99:	53                   	push   ebx
c0016c9a:	e8 c7 fc ff ff       	call   c0016966 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c9f:	83 c4 20             	add    esp,0x20
c0016ca2:	45                   	inc    ebp
c0016ca3:	83 fd 04             	cmp    ebp,0x4
c0016ca6:	75 ce                	jne    c0016c76 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016ca8:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cae:	5b                   	pop    ebx
c0016caf:	5e                   	pop    esi
c0016cb0:	5f                   	pop    edi
c0016cb1:	5d                   	pop    ebp
c0016cb2:	c3                   	ret    
c0016cb3:	90                   	nop

c0016cb4 <Serial::Serial(char const*)>:
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbb:	83 ec 08             	sub    esp,0x8
c0016cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc2:	50                   	push   eax
c0016cc3:	e8 38 d9 ff ff       	call   c0014600 <Device::Device(char const*)>
c0016cc8:	83 c4 10             	add    esp,0x10
c0016ccb:	ba ec b3 02 c0       	mov    edx,0xc002b3ec
c0016cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd4:	89 10                	mov    DWORD PTR [eax],edx
c0016cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cda:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ce4:	90                   	nop
c0016ce5:	83 c4 0c             	add    esp,0xc
c0016ce8:	c3                   	ret    
c0016ce9:	90                   	nop

c0016cea <Serial::~Serial()>:
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	ba ec b3 02 c0       	mov    edx,0xc002b3ec
c0016cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf6:	89 10                	mov    DWORD PTR [eax],edx
c0016cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	50                   	push   eax
c0016d00:	e8 dd d5 ff ff       	call   c00142e2 <Device::~Device()>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	90                   	nop
c0016d09:	83 c4 0c             	add    esp,0xc
c0016d0c:	c3                   	ret    
c0016d0d:	90                   	nop

c0016d0e <Serial::~Serial()>:
c0016d0e:	83 ec 0c             	sub    esp,0xc
c0016d11:	83 ec 0c             	sub    esp,0xc
c0016d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d18:	e8 cd ff ff ff       	call   c0016cea <Serial::~Serial()>
c0016d1d:	83 c4 10             	add    esp,0x10
c0016d20:	83 ec 08             	sub    esp,0x8
c0016d23:	68 58 01 00 00       	push   0x158
c0016d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2c:	e8 d9 c1 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	83 c4 0c             	add    esp,0xc
c0016d37:	c3                   	ret    

c0016d38 <Timer::Timer(char const*)>:
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3f:	83 ec 08             	sub    esp,0x8
c0016d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d46:	50                   	push   eax
c0016d47:	e8 b4 d8 ff ff       	call   c0014600 <Device::Device(char const*)>
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	89 10                	mov    DWORD PTR [eax],edx
c0016d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d68:	90                   	nop
c0016d69:	83 c4 0c             	add    esp,0xc
c0016d6c:	c3                   	ret    
c0016d6d:	90                   	nop

c0016d6e <Timer::~Timer()>:
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c0016d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7a:	89 10                	mov    DWORD PTR [eax],edx
c0016d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d80:	83 ec 0c             	sub    esp,0xc
c0016d83:	50                   	push   eax
c0016d84:	e8 59 d5 ff ff       	call   c00142e2 <Device::~Device()>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	90                   	nop
c0016d8d:	83 c4 0c             	add    esp,0xc
c0016d90:	c3                   	ret    
c0016d91:	90                   	nop

c0016d92 <Timer::~Timer()>:
c0016d92:	83 ec 0c             	sub    esp,0xc
c0016d95:	83 ec 0c             	sub    esp,0xc
c0016d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9c:	e8 cd ff ff ff       	call   c0016d6e <Timer::~Timer()>
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	83 ec 08             	sub    esp,0x8
c0016da7:	68 5c 01 00 00       	push   0x15c
c0016dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db0:	e8 55 c1 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0016db5:	83 c4 10             	add    esp,0x10
c0016db8:	83 c4 0c             	add    esp,0xc
c0016dbb:	c3                   	ret    

c0016dbc <Timer::read()>:
c0016dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dc6:	c3                   	ret    

c0016dc7 <timerHandler(unsigned long long)>:
c0016dc7:	55                   	push   ebp
c0016dc8:	57                   	push   edi
c0016dc9:	56                   	push   esi
c0016dca:	53                   	push   ebx
c0016dcb:	83 ec 0c             	sub    esp,0xc
c0016dce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dd2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dd6:	01 35 b0 eb 02 c0    	add    DWORD PTR ds:0xc002ebb0,esi
c0016ddc:	11 3d b4 eb 02 c0    	adc    DWORD PTR ds:0xc002ebb4,edi
c0016de2:	80 3d 2d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e52d,0x0
c0016de9:	0f 84 07 01 00 00    	je     c0016ef6 <timerHandler(unsigned long long)+0x12f>
c0016def:	e8 a9 70 00 00       	call   c001de9d <lockStuff()>
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016dfc:	e8 bd 1c 01 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e01:	c7 04 24 7c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a7c
c0016e08:	89 c3                	mov    ebx,eax
c0016e0a:	e8 b7 1c 01 00       	call   c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	84 c0                	test   al,al
c0016e14:	74 60                	je     c0016e76 <timerHandler(unsigned long long)+0xaf>
c0016e16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e1c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e1f:	85 c0                	test   eax,eax
c0016e21:	0f 85 91 00 00 00    	jne    c0016eb8 <timerHandler(unsigned long long)+0xf1>
c0016e27:	e9 be 00 00 00       	jmp    c0016eea <timerHandler(unsigned long long)+0x123>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	55                   	push   ebp
c0016e30:	e8 59 76 00 00       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	39 eb                	cmp    ebx,ebp
c0016e3a:	75 12                	jne    c0016e4e <timerHandler(unsigned long long)+0x87>
c0016e3c:	83 ec 0c             	sub    esp,0xc
c0016e3f:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e44:	e8 75 1c 01 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e49:	89 c3                	mov    ebx,eax
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e56:	e8 6b 1c 01 00       	call   c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	84 c0                	test   al,al
c0016e60:	75 b4                	jne    c0016e16 <timerHandler(unsigned long long)+0x4f>
c0016e62:	83 ec 0c             	sub    esp,0xc
c0016e65:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e6a:	e8 4f 1c 01 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e6f:	83 c4 10             	add    esp,0x10
c0016e72:	39 d8                	cmp    eax,ebx
c0016e74:	74 a0                	je     c0016e16 <timerHandler(unsigned long long)+0x4f>
c0016e76:	83 ec 0c             	sub    esp,0xc
c0016e79:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e7e:	e8 3b 1c 01 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e83:	c7 04 24 7c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a7c
c0016e8a:	89 c5                	mov    ebp,eax
c0016e8c:	e8 51 1c 01 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e91:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e9a:	39 15 b0 eb 02 c0    	cmp    DWORD PTR ds:0xc002ebb0,edx
c0016ea0:	a1 b4 eb 02 c0       	mov    eax,ds:0xc002ebb4
c0016ea5:	19 c8                	sbb    eax,ecx
c0016ea7:	73 83                	jae    c0016e2c <timerHandler(unsigned long long)+0x65>
c0016ea9:	50                   	push   eax
c0016eaa:	50                   	push   eax
c0016eab:	55                   	push   ebp
c0016eac:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016eb1:	e8 da 1c 01 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016eb6:	eb 93                	jmp    c0016e4b <timerHandler(unsigned long long)+0x84>
c0016eb8:	80 3d 2c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e52c,0x0
c0016ebf:	74 29                	je     c0016eea <timerHandler(unsigned long long)+0x123>
c0016ec1:	39 c6                	cmp    esi,eax
c0016ec3:	bb 00 00 00 00       	mov    ebx,0x0
c0016ec8:	19 df                	sbb    edi,ebx
c0016eca:	72 19                	jb     c0016ee5 <timerHandler(unsigned long long)+0x11e>
c0016ecc:	e8 a5 6f 00 00       	call   c001de76 <lockScheduler()>
c0016ed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ed9:	e8 d4 72 00 00       	call   c001e1b2 <schedule()>
c0016ede:	e8 95 6f 00 00       	call   c001de78 <unlockScheduler()>
c0016ee3:	eb 05                	jmp    c0016eea <timerHandler(unsigned long long)+0x123>
c0016ee5:	29 f0                	sub    eax,esi
c0016ee7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016eea:	83 c4 0c             	add    esp,0xc
c0016eed:	5b                   	pop    ebx
c0016eee:	5e                   	pop    esi
c0016eef:	5f                   	pop    edi
c0016ef0:	5d                   	pop    ebp
c0016ef1:	e9 41 73 00 00       	jmp    c001e237 <unlockStuff()>
c0016ef6:	83 c4 0c             	add    esp,0xc
c0016ef9:	5b                   	pop    ebx
c0016efa:	5e                   	pop    esi
c0016efb:	5f                   	pop    edi
c0016efc:	5d                   	pop    ebp
c0016efd:	c3                   	ret    

c0016efe <setupTimer(int)>:
c0016efe:	57                   	push   edi
c0016eff:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0016f04:	56                   	push   esi
c0016f05:	53                   	push   ebx
c0016f06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f10:	83 ec 0c             	sub    esp,0xc
c0016f13:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f19:	e8 de d7 ff ff       	call   c00146fc <Device::getName()>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f24:	0f 85 8d 00 00 00    	jne    c0016fb7 <setupTimer(int)+0xb9>
c0016f2a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0016f2f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f36:	74 7f                	je     c0016fb7 <setupTimer(int)+0xb9>
c0016f38:	83 ec 0c             	sub    esp,0xc
c0016f3b:	68 5c 01 00 00       	push   0x15c
c0016f40:	e8 fb 88 ff ff       	call   c000f840 <malloc>
c0016f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f48:	89 c3                	mov    ebx,eax
c0016f4a:	e8 e1 f6 00 00       	call   c0026630 <PIT::PIT()>
c0016f4f:	59                   	pop    ecx
c0016f50:	5f                   	pop    edi
c0016f51:	53                   	push   ebx
c0016f52:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0016f58:	e8 b3 d4 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016f5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f5f:	6a 00                	push   0x0
c0016f61:	6a 00                	push   0x0
c0016f63:	56                   	push   esi
c0016f64:	53                   	push   ebx
c0016f65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f68:	83 c4 14             	add    esp,0x14
c0016f6b:	68 60 01 00 00       	push   0x160
c0016f70:	e8 cb 88 ff ff       	call   c000f840 <malloc>
c0016f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f78:	89 c7                	mov    edi,eax
c0016f7a:	e8 61 f5 00 00       	call   c00264e0 <APICTimer::APICTimer()>
c0016f7f:	6a 00                	push   0x0
c0016f81:	6a 00                	push   0x0
c0016f83:	56                   	push   esi
c0016f84:	57                   	push   edi
c0016f85:	e8 58 f4 00 00       	call   c00263e2 <APICTimer::open(int, int, void*)>
c0016f8a:	83 c4 20             	add    esp,0x20
c0016f8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f8f:	6a 00                	push   0x0
c0016f91:	6a 00                	push   0x0
c0016f93:	6a 00                	push   0x0
c0016f95:	53                   	push   ebx
c0016f96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f99:	58                   	pop    eax
c0016f9a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0016f9f:	5a                   	pop    edx
c0016fa0:	57                   	push   edi
c0016fa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fa7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fad:	e8 5e d4 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016fb2:	83 c4 10             	add    esp,0x10
c0016fb5:	eb 33                	jmp    c0016fea <setupTimer(int)+0xec>
c0016fb7:	83 ec 0c             	sub    esp,0xc
c0016fba:	68 5c 01 00 00       	push   0x15c
c0016fbf:	e8 7c 88 ff ff       	call   c000f840 <malloc>
c0016fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc7:	89 c3                	mov    ebx,eax
c0016fc9:	e8 62 f6 00 00       	call   c0026630 <PIT::PIT()>
c0016fce:	58                   	pop    eax
c0016fcf:	5a                   	pop    edx
c0016fd0:	53                   	push   ebx
c0016fd1:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0016fd7:	e8 34 d4 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016fdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fde:	6a 00                	push   0x0
c0016fe0:	6a 00                	push   0x0
c0016fe2:	56                   	push   esi
c0016fe3:	53                   	push   ebx
c0016fe4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fe7:	83 c4 20             	add    esp,0x20
c0016fea:	89 d8                	mov    eax,ebx
c0016fec:	5b                   	pop    ebx
c0016fed:	5e                   	pop    esi
c0016fee:	5f                   	pop    edi
c0016fef:	c3                   	ret    

c0016ff0 <VCache::VCache(PhysicalDisk*)>:
c0016ff0:	53                   	push   ebx
c0016ff1:	83 ec 18             	sub    esp,0x18
c0016ff4:	ba 60 b4 02 c0       	mov    edx,0xc002b460
c0016ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffd:	89 10                	mov    DWORD PTR [eax],edx
c0016fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017003:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001700a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017019:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017020:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017032:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017048:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001704c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017050:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017057:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017072:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017081:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017089:	83 ec 0c             	sub    esp,0xc
c001708c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017090:	e8 ab 87 ff ff       	call   c000f840 <malloc>
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	89 c3                	mov    ebx,eax
c001709a:	83 ec 0c             	sub    esp,0xc
c001709d:	53                   	push   ebx
c001709e:	e8 f3 6e 00 00       	call   c001df96 <Mutex::Mutex()>
c00170a3:	83 c4 10             	add    esp,0x10
c00170a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170e8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170eb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017100:	05 00 01 00 00       	add    eax,0x100
c0017105:	c1 e0 04             	shl    eax,0x4
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	50                   	push   eax
c001710c:	e8 2f 87 ff ff       	call   c000f840 <malloc>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	89 c2                	mov    edx,eax
c0017116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001711d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017121:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017130:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017134:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001713a:	c1 e0 07             	shl    eax,0x7
c001713d:	83 ec 0c             	sub    esp,0xc
c0017140:	50                   	push   eax
c0017141:	e8 fa 86 ff ff       	call   c000f840 <malloc>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	89 c2                	mov    edx,eax
c001714b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001714f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017152:	90                   	nop
c0017153:	83 c4 18             	add    esp,0x18
c0017156:	5b                   	pop    ebx
c0017157:	c3                   	ret    

c0017158 <VCache::invalidateReadBuffer()>:
c0017158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001715c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017162:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017166:	c3                   	ret    
c0017167:	90                   	nop

c0017168 <VCache::writeWriteBuffer()>:
c0017168:	53                   	push   ebx
c0017169:	83 ec 14             	sub    esp,0x14
c001716c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017170:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017173:	8b 10                	mov    edx,DWORD PTR [eax]
c0017175:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017178:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001717b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001717e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017181:	50                   	push   eax
c0017182:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017185:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001718c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017193:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017197:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001719e:	83 c4 28             	add    esp,0x28
c00171a1:	5b                   	pop    ebx
c00171a2:	c3                   	ret    
c00171a3:	90                   	nop

c00171a4 <VCache::~VCache()>:
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	ba 60 b4 02 c0       	mov    edx,0xc002b460
c00171ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b0:	89 10                	mov    DWORD PTR [eax],edx
c00171b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171b9:	84 c0                	test   al,al
c00171bb:	74 0f                	je     c00171cc <VCache::~VCache()+0x28>
c00171bd:	83 ec 0c             	sub    esp,0xc
c00171c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171c4:	e8 9f ff ff ff       	call   c0017168 <VCache::writeWriteBuffer()>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171d3:	83 ec 0c             	sub    esp,0xc
c00171d6:	50                   	push   eax
c00171d7:	e8 74 86 ff ff       	call   c000f850 <free>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171e6:	83 ec 0c             	sub    esp,0xc
c00171e9:	50                   	push   eax
c00171ea:	e8 61 86 ff ff       	call   c000f850 <free>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	90                   	nop
c00171f3:	83 c4 0c             	add    esp,0xc
c00171f6:	c3                   	ret    
c00171f7:	90                   	nop

c00171f8 <VCache::~VCache()>:
c00171f8:	83 ec 0c             	sub    esp,0xc
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017202:	e8 9d ff ff ff       	call   c00171a4 <VCache::~VCache()>
c0017207:	83 c4 10             	add    esp,0x10
c001720a:	83 ec 08             	sub    esp,0x8
c001720d:	6a 44                	push   0x44
c001720f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017213:	e8 f2 bc ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0017218:	83 c4 10             	add    esp,0x10
c001721b:	83 c4 0c             	add    esp,0xc
c001721e:	c3                   	ret    
c001721f:	90                   	nop

c0017220 <VCache::write(unsigned long long, int, void*)>:
c0017220:	55                   	push   ebp
c0017221:	57                   	push   edi
c0017222:	56                   	push   esi
c0017223:	53                   	push   ebx
c0017224:	83 ec 28             	sub    esp,0x28
c0017227:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001722b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001722f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017233:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017237:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001723a:	e8 b9 71 00 00       	call   c001e3f8 <Semaphore::acquire()>
c001723f:	83 c4 10             	add    esp,0x10
c0017242:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017246:	74 0c                	je     c0017254 <VCache::write(unsigned long long, int, void*)+0x34>
c0017248:	83 ec 0c             	sub    esp,0xc
c001724b:	53                   	push   ebx
c001724c:	e8 07 ff ff ff       	call   c0017158 <VCache::invalidateReadBuffer()>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017258:	74 66                	je     c00172c0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001725a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001725d:	99                   	cdq    
c001725e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017262:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017265:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017268:	89 c1                	mov    ecx,eax
c001726a:	89 d0                	mov    eax,edx
c001726c:	31 f1                	xor    ecx,esi
c001726e:	31 f8                	xor    eax,edi
c0017270:	89 ca                	mov    edx,ecx
c0017272:	09 c2                	or     edx,eax
c0017274:	75 3e                	jne    c00172b4 <VCache::write(unsigned long long, int, void*)+0x94>
c0017276:	83 fd 01             	cmp    ebp,0x1
c0017279:	75 39                	jne    c00172b4 <VCache::write(unsigned long long, int, void*)+0x94>
c001727b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001727e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017284:	51                   	push   ecx
c0017285:	50                   	push   eax
c0017286:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001728a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001728e:	0f af c8             	imul   ecx,eax
c0017291:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017294:	51                   	push   ecx
c0017295:	e8 aa 94 fe ff       	call   c0000744 <memcpy>
c001729a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001729d:	83 c4 10             	add    esp,0x10
c00172a0:	40                   	inc    eax
c00172a1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172a4:	83 c0 80             	add    eax,0xffffff80
c00172a7:	75 57                	jne    c0017300 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172a9:	83 ec 0c             	sub    esp,0xc
c00172ac:	53                   	push   ebx
c00172ad:	e8 b6 fe ff ff       	call   c0017168 <VCache::writeWriteBuffer()>
c00172b2:	eb 34                	jmp    c00172e8 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172b4:	83 ec 0c             	sub    esp,0xc
c00172b7:	53                   	push   ebx
c00172b8:	e8 ab fe ff ff       	call   c0017168 <VCache::writeWriteBuffer()>
c00172bd:	83 c4 10             	add    esp,0x10
c00172c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c3:	83 fd 7f             	cmp    ebp,0x7f
c00172c6:	7f 25                	jg     c00172ed <VCache::write(unsigned long long, int, void*)+0xcd>
c00172c8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172cb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172ce:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172d1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172d5:	52                   	push   edx
c00172d6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172e3:	e8 5c 94 fe ff       	call   c0000744 <memcpy>
c00172e8:	83 c4 10             	add    esp,0x10
c00172eb:	eb 13                	jmp    c0017300 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172ed:	83 ec 0c             	sub    esp,0xc
c00172f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00172f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172f6:	55                   	push   ebp
c00172f7:	57                   	push   edi
c00172f8:	56                   	push   esi
c00172f9:	50                   	push   eax
c00172fa:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172fd:	83 c4 20             	add    esp,0x20
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017306:	e8 9b 76 00 00       	call   c001e9a6 <Semaphore::release()>
c001730b:	83 c4 2c             	add    esp,0x2c
c001730e:	31 c0                	xor    eax,eax
c0017310:	5b                   	pop    ebx
c0017311:	5e                   	pop    esi
c0017312:	5f                   	pop    edi
c0017313:	5d                   	pop    ebp
c0017314:	c3                   	ret    
c0017315:	90                   	nop

c0017316 <VCache::read(unsigned long long, int, void*)>:
c0017316:	55                   	push   ebp
c0017317:	57                   	push   edi
c0017318:	56                   	push   esi
c0017319:	53                   	push   ebx
c001731a:	83 ec 28             	sub    esp,0x28
c001731d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017321:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017325:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001732d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017331:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017335:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017339:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001733c:	e8 b7 70 00 00       	call   c001e3f8 <Semaphore::acquire()>
c0017341:	83 c4 10             	add    esp,0x10
c0017344:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017348:	74 0c                	je     c0017356 <VCache::read(unsigned long long, int, void*)+0x40>
c001734a:	83 ec 0c             	sub    esp,0xc
c001734d:	53                   	push   ebx
c001734e:	e8 15 fe ff ff       	call   c0017168 <VCache::writeWriteBuffer()>
c0017353:	83 c4 10             	add    esp,0x10
c0017356:	83 fe 01             	cmp    esi,0x1
c0017359:	0f 85 80 00 00 00    	jne    c00173df <VCache::read(unsigned long long, int, void*)+0xc9>
c001735f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017362:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017369:	75 74                	jne    c00173df <VCache::read(unsigned long long, int, void*)+0xc9>
c001736b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001736e:	89 d1                	mov    ecx,edx
c0017370:	f7 d9                	neg    ecx
c0017372:	89 cf                	mov    edi,ecx
c0017374:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017378:	c1 ff 1f             	sar    edi,0x1f
c001737b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001737e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017382:	89 ce                	mov    esi,ecx
c0017384:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017388:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001738c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017390:	89 cf                	mov    edi,ecx
c0017392:	74 0a                	je     c001739e <VCache::read(unsigned long long, int, void*)+0x88>
c0017394:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017397:	75 05                	jne    c001739e <VCache::read(unsigned long long, int, void*)+0x88>
c0017399:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001739c:	74 1c                	je     c00173ba <VCache::read(unsigned long long, int, void*)+0xa4>
c001739e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173a2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173a5:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173a8:	83 ec 0c             	sub    esp,0xc
c00173ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173ad:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173b0:	52                   	push   edx
c00173b1:	57                   	push   edi
c00173b2:	56                   	push   esi
c00173b3:	50                   	push   eax
c00173b4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173b7:	83 c4 20             	add    esp,0x20
c00173ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173bd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173c3:	50                   	push   eax
c00173c4:	52                   	push   edx
c00173c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c8:	48                   	dec    eax
c00173c9:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173cd:	0f af c2             	imul   eax,edx
c00173d0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173d3:	50                   	push   eax
c00173d4:	55                   	push   ebp
c00173d5:	e8 6a 93 fe ff       	call   c0000744 <memcpy>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	eb 21                	jmp    c0017400 <VCache::read(unsigned long long, int, void*)+0xea>
c00173df:	83 ec 0c             	sub    esp,0xc
c00173e2:	53                   	push   ebx
c00173e3:	e8 70 fd ff ff       	call   c0017158 <VCache::invalidateReadBuffer()>
c00173e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00173ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173f0:	56                   	push   esi
c00173f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173f9:	50                   	push   eax
c00173fa:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173fd:	83 c4 20             	add    esp,0x20
c0017400:	83 ec 0c             	sub    esp,0xc
c0017403:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017406:	e8 9b 75 00 00       	call   c001e9a6 <Semaphore::release()>
c001740b:	83 c4 2c             	add    esp,0x2c
c001740e:	31 c0                	xor    eax,eax
c0017410:	5b                   	pop    ebx
c0017411:	5e                   	pop    esi
c0017412:	5f                   	pop    edi
c0017413:	5d                   	pop    ebp
c0017414:	c3                   	ret    
c0017415:	90                   	nop

c0017416 <Video::putrect(int, int, int, int, unsigned int)>:
c0017416:	55                   	push   ebp
c0017417:	57                   	push   edi
c0017418:	56                   	push   esi
c0017419:	53                   	push   ebx
c001741a:	83 ec 1c             	sub    esp,0x1c
c001741d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017421:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017425:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017429:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001742d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017435:	01 df                	add    edi,ebx
c0017437:	39 fb                	cmp    ebx,edi
c0017439:	7d 1f                	jge    c001745a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001743b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001743f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017443:	7d 12                	jge    c0017457 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017445:	8b 16                	mov    edx,DWORD PTR [esi]
c0017447:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001744b:	53                   	push   ebx
c001744c:	55                   	push   ebp
c001744d:	45                   	inc    ebp
c001744e:	56                   	push   esi
c001744f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017452:	83 c4 10             	add    esp,0x10
c0017455:	eb e8                	jmp    c001743f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017457:	43                   	inc    ebx
c0017458:	eb dd                	jmp    c0017437 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001745a:	83 c4 1c             	add    esp,0x1c
c001745d:	5b                   	pop    ebx
c001745e:	5e                   	pop    esi
c001745f:	5f                   	pop    edi
c0017460:	5d                   	pop    ebp
c0017461:	c3                   	ret    

c0017462 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017462:	55                   	push   ebp
c0017463:	57                   	push   edi
c0017464:	31 ff                	xor    edi,edi
c0017466:	56                   	push   esi
c0017467:	53                   	push   ebx
c0017468:	83 ec 1c             	sub    esp,0x1c
c001746b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001746f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017473:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001747a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001747f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017483:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017487:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001748b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001748e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017492:	01 f9                	add    ecx,edi
c0017494:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017498:	7d 2f                	jge    c00174c9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001749a:	31 f6                	xor    esi,esi
c001749c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174a0:	01 f2                	add    edx,esi
c00174a2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174a6:	7d 1a                	jge    c00174c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174ab:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174ae:	46                   	inc    esi
c00174af:	51                   	push   ecx
c00174b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174b4:	52                   	push   edx
c00174b5:	55                   	push   ebp
c00174b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174c0:	eb da                	jmp    c001749c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174c2:	47                   	inc    edi
c00174c3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174c7:	eb c5                	jmp    c001748e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174c9:	83 c4 1c             	add    esp,0x1c
c00174cc:	5b                   	pop    ebx
c00174cd:	5e                   	pop    esi
c00174ce:	5f                   	pop    edi
c00174cf:	5d                   	pop    ebp
c00174d0:	c3                   	ret    
c00174d1:	90                   	nop

c00174d2 <Video::blit(unsigned int*, int, int, int, int)>:
c00174d2:	55                   	push   ebp
c00174d3:	57                   	push   edi
c00174d4:	56                   	push   esi
c00174d5:	53                   	push   ebx
c00174d6:	83 ec 1c             	sub    esp,0x1c
c00174d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174e1:	85 c0                	test   eax,eax
c00174e3:	79 02                	jns    c00174e7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174e5:	31 c0                	xor    eax,eax
c00174e7:	c1 e0 02             	shl    eax,0x2
c00174ea:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174f6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174fa:	39 d8                	cmp    eax,ebx
c00174fc:	7e 49                	jle    c0017547 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174fe:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017504:	7c 41                	jl     c0017547 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017506:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001750a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001750e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017512:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017516:	39 f9                	cmp    ecx,edi
c0017518:	7e 22                	jle    c001753c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001751a:	83 c5 04             	add    ebp,0x4
c001751d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017523:	7c 14                	jl     c0017539 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017525:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017527:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001752a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017532:	56                   	push   esi
c0017533:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017536:	83 c4 10             	add    esp,0x10
c0017539:	47                   	inc    edi
c001753a:	eb d2                	jmp    c001750e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001753c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017540:	43                   	inc    ebx
c0017541:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017545:	eb ab                	jmp    c00174f2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017547:	83 c4 1c             	add    esp,0x1c
c001754a:	5b                   	pop    ebx
c001754b:	5e                   	pop    esi
c001754c:	5f                   	pop    edi
c001754d:	5d                   	pop    ebp
c001754e:	c3                   	ret    
c001754f:	90                   	nop

c0017550 <Video::clearScreen(unsigned int)>:
c0017550:	57                   	push   edi
c0017551:	56                   	push   esi
c0017552:	53                   	push   ebx
c0017553:	31 db                	xor    ebx,ebx
c0017555:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017559:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001755f:	7e 1f                	jle    c0017580 <Video::clearScreen(unsigned int)+0x30>
c0017561:	31 ff                	xor    edi,edi
c0017563:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017569:	7e 12                	jle    c001757d <Video::clearScreen(unsigned int)+0x2d>
c001756b:	8b 06                	mov    eax,DWORD PTR [esi]
c001756d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017571:	53                   	push   ebx
c0017572:	57                   	push   edi
c0017573:	47                   	inc    edi
c0017574:	56                   	push   esi
c0017575:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017578:	83 c4 10             	add    esp,0x10
c001757b:	eb e6                	jmp    c0017563 <Video::clearScreen(unsigned int)+0x13>
c001757d:	43                   	inc    ebx
c001757e:	eb d9                	jmp    c0017559 <Video::clearScreen(unsigned int)+0x9>
c0017580:	5b                   	pop    ebx
c0017581:	5e                   	pop    esi
c0017582:	5f                   	pop    edi
c0017583:	c3                   	ret    

c0017584 <Video::putpixel(int, int, unsigned int)>:
c0017584:	c7 44 24 04 68 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b468
c001758c:	e9 0a 31 00 00       	jmp    c001a69b <Krnl::panic(char const*)>
c0017591:	90                   	nop

c0017592 <Video::Video(char const*)>:
c0017592:	83 ec 0c             	sub    esp,0xc
c0017595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017599:	83 ec 08             	sub    esp,0x8
c001759c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175a0:	50                   	push   eax
c00175a1:	e8 5a d0 ff ff       	call   c0014600 <Device::Device(char const*)>
c00175a6:	83 c4 10             	add    esp,0x10
c00175a9:	ba ec b4 02 c0       	mov    edx,0xc002b4ec
c00175ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b2:	89 10                	mov    DWORD PTR [eax],edx
c00175b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175c2:	90                   	nop
c00175c3:	83 c4 0c             	add    esp,0xc
c00175c6:	c3                   	ret    
c00175c7:	90                   	nop

c00175c8 <Video::~Video()>:
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	ba ec b4 02 c0       	mov    edx,0xc002b4ec
c00175d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d4:	89 10                	mov    DWORD PTR [eax],edx
c00175d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175da:	83 ec 0c             	sub    esp,0xc
c00175dd:	50                   	push   eax
c00175de:	e8 ff cc ff ff       	call   c00142e2 <Device::~Device()>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	90                   	nop
c00175e7:	83 c4 0c             	add    esp,0xc
c00175ea:	c3                   	ret    
c00175eb:	90                   	nop

c00175ec <Video::~Video()>:
c00175ec:	83 ec 0c             	sub    esp,0xc
c00175ef:	83 ec 0c             	sub    esp,0xc
c00175f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175f6:	e8 cd ff ff ff       	call   c00175c8 <Video::~Video()>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	83 ec 08             	sub    esp,0x8
c0017601:	68 64 01 00 00       	push   0x164
c0017606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001760a:	e8 fb b8 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001760f:	83 c4 10             	add    esp,0x10
c0017612:	83 c4 0c             	add    esp,0xc
c0017615:	c3                   	ret    

c0017616 <Video::isMonochrome()>:
c0017616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001761a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017620:	c3                   	ret    
c0017621:	90                   	nop

c0017622 <Video::getWidth()>:
c0017622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017626:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001762c:	c3                   	ret    
c001762d:	90                   	nop

c001762e <Video::getHeight()>:
c001762e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017632:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017638:	c3                   	ret    
c0017639:	90                   	nop

c001763a <Video::drawCursor(int, int, unsigned char*, int)>:
c001763a:	55                   	push   ebp
c001763b:	57                   	push   edi
c001763c:	56                   	push   esi
c001763d:	53                   	push   ebx
c001763e:	83 ec 2c             	sub    esp,0x2c
c0017641:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017645:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017649:	83 f8 01             	cmp    eax,0x1
c001764c:	19 c9                	sbb    ecx,ecx
c001764e:	31 db                	xor    ebx,ebx
c0017650:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017654:	89 cd                	mov    ebp,ecx
c0017656:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001765e:	f7 d5                	not    ebp
c0017660:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017666:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001766a:	01 d8                	add    eax,ebx
c001766c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017670:	56                   	push   esi
c0017671:	e8 b8 ff ff ff       	call   c001762e <Video::getHeight()>
c0017676:	59                   	pop    ecx
c0017677:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001767b:	7e 70                	jle    c00176ed <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001767d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017681:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017685:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017688:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001768c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017690:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017697:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001769b:	89 f8                	mov    eax,edi
c001769d:	83 c0 20             	add    eax,0x20
c00176a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176a4:	56                   	push   esi
c00176a5:	e8 78 ff ff ff       	call   c0017622 <Video::getWidth()>
c00176aa:	5a                   	pop    edx
c00176ab:	39 c7                	cmp    edi,eax
c00176ad:	7d 34                	jge    c00176e3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176af:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176b4:	74 05                	je     c00176bb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b8:	55                   	push   ebp
c00176b9:	eb 0d                	jmp    c00176c8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176bb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176c0:	74 12                	je     c00176d4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00176c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176cc:	57                   	push   edi
c00176cd:	56                   	push   esi
c00176ce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176d8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176dc:	47                   	inc    edi
c00176dd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176e1:	75 c1                	jne    c00176a4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176e3:	43                   	inc    ebx
c00176e4:	83 fb 20             	cmp    ebx,0x20
c00176e7:	0f 85 79 ff ff ff    	jne    c0017666 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176ed:	83 c4 2c             	add    esp,0x2c
c00176f0:	5b                   	pop    ebx
c00176f1:	5e                   	pop    esi
c00176f2:	5f                   	pop    edi
c00176f3:	5d                   	pop    ebp
c00176f4:	c3                   	ret    
c00176f5:	90                   	nop

c00176f6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176f6:	55                   	push   ebp
c00176f7:	57                   	push   edi
c00176f8:	56                   	push   esi
c00176f9:	53                   	push   ebx
c00176fa:	83 ec 28             	sub    esp,0x28
c00176fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017701:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017705:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017709:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001770d:	c1 e7 08             	shl    edi,0x8
c0017710:	01 c7                	add    edi,eax
c0017712:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017716:	c1 e0 08             	shl    eax,0x8
c0017719:	01 d0                	add    eax,edx
c001771b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001771f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017723:	0f af c7             	imul   eax,edi
c0017726:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001772d:	50                   	push   eax
c001772e:	e8 0d 81 ff ff       	call   c000f840 <malloc>
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	89 c5                	mov    ebp,eax
c0017738:	85 c0                	test   eax,eax
c001773a:	75 15                	jne    c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001773c:	83 ec 0c             	sub    esp,0xc
c001773f:	68 89 b4 02 c0       	push   0xc002b489
c0017744:	e8 a1 b8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	e9 1c 01 00 00       	jmp    c001786d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017751:	be 12 00 00 00       	mov    esi,0x12
c0017756:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001775a:	74 11                	je     c001776d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001775c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017760:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017764:	c1 fe 03             	sar    esi,0x3
c0017767:	0f af f0             	imul   esi,eax
c001776a:	83 c6 12             	add    esi,0x12
c001776d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017771:	74 04                	je     c0017777 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017773:	85 ff                	test   edi,edi
c0017775:	75 12                	jne    c0017789 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017777:	83 ec 0c             	sub    esp,0xc
c001777a:	68 a0 b4 02 c0       	push   0xc002b4a0
c001777f:	e8 66 b8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0017784:	e9 ce 00 00 00       	jmp    c0017857 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017789:	52                   	push   edx
c001778a:	52                   	push   edx
c001778b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001778f:	50                   	push   eax
c0017790:	68 b5 b4 02 c0       	push   0xc002b4b5
c0017795:	e8 50 b8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001779a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001779e:	83 c4 10             	add    esp,0x10
c00177a1:	80 fa 02             	cmp    dl,0x2
c00177a4:	0f 85 98 00 00 00    	jne    c0017842 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177aa:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177af:	75 10                	jne    c00177c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177b1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177b5:	75 0a                	jne    c00177c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177b7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177ba:	83 e8 18             	sub    eax,0x18
c00177bd:	a8 f7                	test   al,0xf7
c00177bf:	74 0a                	je     c00177cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177c1:	83 ec 0c             	sub    esp,0xc
c00177c4:	68 c2 b4 02 c0       	push   0xc002b4c2
c00177c9:	eb 7f                	jmp    c001784a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177df:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177e7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177eb:	75 0c                	jne    c00177f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177ed:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177f2:	c1 e0 18             	shl    eax,0x18
c00177f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177f9:	41                   	inc    ecx
c00177fa:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177ff:	c1 e2 10             	shl    edx,0x10
c0017802:	89 d0                	mov    eax,edx
c0017804:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017809:	c1 e2 08             	shl    edx,0x8
c001780c:	09 c2                	or     edx,eax
c001780e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017812:	09 c2                	or     edx,eax
c0017814:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017818:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001781c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017820:	c1 f8 03             	sar    eax,0x3
c0017823:	01 c6                	add    esi,eax
c0017825:	89 c8                	mov    eax,ecx
c0017827:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001782b:	39 c7                	cmp    edi,eax
c001782d:	7f b0                	jg     c00177df <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001782f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017833:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017837:	39 14 24             	cmp    DWORD PTR [esp],edx
c001783a:	7e 22                	jle    c001785e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001783c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017840:	eb 99                	jmp    c00177db <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017842:	50                   	push   eax
c0017843:	50                   	push   eax
c0017844:	52                   	push   edx
c0017845:	68 d0 b4 02 c0       	push   0xc002b4d0
c001784a:	e8 9b b7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001784f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017852:	e8 f9 7f ff ff       	call   c000f850 <free>
c0017857:	83 c4 10             	add    esp,0x10
c001785a:	31 ed                	xor    ebp,ebp
c001785c:	eb 0f                	jmp    c001786d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001785e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017862:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017865:	89 38                	mov    DWORD PTR [eax],edi
c0017867:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001786b:	89 08                	mov    DWORD PTR [eax],ecx
c001786d:	83 c4 1c             	add    esp,0x1c
c0017870:	89 e8                	mov    eax,ebp
c0017872:	5b                   	pop    ebx
c0017873:	5e                   	pop    esi
c0017874:	5f                   	pop    edi
c0017875:	5d                   	pop    ebp
c0017876:	c3                   	ret    
c0017877:	90                   	nop

c0017878 <Video::putTGA(int, int, unsigned char*, int)>:
c0017878:	55                   	push   ebp
c0017879:	57                   	push   edi
c001787a:	56                   	push   esi
c001787b:	53                   	push   ebx
c001787c:	83 ec 28             	sub    esp,0x28
c001787f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017883:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017887:	50                   	push   eax
c0017888:	8d 44 24 18          	lea    eax,[esp+0x18]
c001788c:	50                   	push   eax
c001788d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017891:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017895:	56                   	push   esi
c0017896:	e8 5b fe ff ff       	call   c00176f6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001789b:	83 c4 20             	add    esp,0x20
c001789e:	85 c0                	test   eax,eax
c00178a0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178a4:	74 35                	je     c00178db <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a6:	89 c7                	mov    edi,eax
c00178a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178ac:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178b0:	39 d8                	cmp    eax,ebx
c00178b2:	7e 27                	jle    c00178db <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178b4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178bc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178c0:	39 e8                	cmp    eax,ebp
c00178c2:	7e 14                	jle    c00178d8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00178c6:	83 c7 04             	add    edi,0x4
c00178c9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178cc:	53                   	push   ebx
c00178cd:	55                   	push   ebp
c00178ce:	45                   	inc    ebp
c00178cf:	56                   	push   esi
c00178d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	eb e0                	jmp    c00178b8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178d8:	43                   	inc    ebx
c00178d9:	eb cd                	jmp    c00178a8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178db:	83 c4 1c             	add    esp,0x1c
c00178de:	5b                   	pop    ebx
c00178df:	5e                   	pop    esi
c00178e0:	5f                   	pop    edi
c00178e1:	5d                   	pop    ebp
c00178e2:	c3                   	ret    
c00178e3:	90                   	nop

c00178e4 <ACPI::close(int, int, void*)>:
c00178e4:	83 ec 1c             	sub    esp,0x1c
c00178e7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178ef:	74 0a                	je     c00178fb <ACPI::close(int, int, void*)+0x17>
c00178f1:	b8 00 00 00 00       	mov    eax,0x0
c00178f6:	e9 9a 00 00 00       	jmp    c0017995 <ACPI::close(int, int, void*)+0xb1>
c00178fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017900:	75 37                	jne    c0017939 <ACPI::close(int, int, void*)+0x55>
c0017902:	83 ec 0c             	sub    esp,0xc
c0017905:	68 2c b5 02 c0       	push   0xc002b52c
c001790a:	e8 db b6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001790f:	83 c4 10             	add    esp,0x10
c0017912:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c0017917:	85 c0                	test   eax,eax
c0017919:	74 07                	je     c0017922 <ACPI::close(int, int, void*)+0x3e>
c001791b:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c0017920:	ff d0                	call   eax
c0017922:	83 ec 0c             	sub    esp,0xc
c0017925:	68 50 b6 02 c0       	push   0xc002b650
c001792a:	e8 6c 2d 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017937:	eb 5c                	jmp    c0017995 <ACPI::close(int, int, void*)+0xb1>
c0017939:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001793e:	75 50                	jne    c0017990 <ACPI::close(int, int, void*)+0xac>
c0017940:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c0017945:	85 c0                	test   eax,eax
c0017947:	74 07                	je     c0017950 <ACPI::close(int, int, void*)+0x6c>
c0017949:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c001794e:	ff d0                	call   eax
c0017950:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017955:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001795a:	83 e0 02             	and    eax,0x2
c001795d:	74 1c                	je     c001797b <ACPI::close(int, int, void*)+0x97>
c001795f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001796a:	89 c2                	mov    edx,eax
c001796c:	ec                   	in     al,dx
c001796d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017971:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017975:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017979:	eb da                	jmp    c0017955 <ACPI::close(int, int, void*)+0x71>
c001797b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017982:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017987:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001798b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001798f:	ee                   	out    dx,al
c0017990:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017995:	83 c4 1c             	add    esp,0x1c
c0017998:	c3                   	ret    

c0017999 <findRSDP()>:
c0017999:	83 ec 1c             	sub    esp,0x1c
c001799c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00179a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a7:	83 e0 04             	and    eax,0x4
c00179aa:	84 c0                	test   al,al
c00179ac:	75 07                	jne    c00179b5 <findRSDP()+0x1c>
c00179ae:	b8 00 00 00 00       	mov    eax,0x0
c00179b3:	eb 6a                	jmp    c0017a1f <findRSDP()+0x86>
c00179b5:	a1 74 e5 02 c0       	mov    eax,ds:0xc002e574
c00179ba:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179bf:	7f 1b                	jg     c00179dc <findRSDP()+0x43>
c00179c1:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00179c6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179cc:	83 e2 fb             	and    edx,0xfffffffb
c00179cf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179d5:	b8 00 00 00 00       	mov    eax,0x0
c00179da:	eb 43                	jmp    c0017a1f <findRSDP()+0x86>
c00179dc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179e4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179ec:	77 2c                	ja     c0017a1a <findRSDP()+0x81>
c00179ee:	83 ec 04             	sub    esp,0x4
c00179f1:	6a 08                	push   0x8
c00179f3:	68 39 b5 02 c0       	push   0xc002b539
c00179f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179fc:	e8 3f 8c fe ff       	call   c0000640 <memcmp>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	85 c0                	test   eax,eax
c0017a06:	0f 94 c0             	sete   al
c0017a09:	84 c0                	test   al,al
c0017a0b:	74 06                	je     c0017a13 <findRSDP()+0x7a>
c0017a0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a11:	eb 0c                	jmp    c0017a1f <findRSDP()+0x86>
c0017a13:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a18:	eb ca                	jmp    c00179e4 <findRSDP()+0x4b>
c0017a1a:	b8 00 00 00 00       	mov    eax,0x0
c0017a1f:	83 c4 1c             	add    esp,0x1c
c0017a22:	c3                   	ret    

c0017a23 <loadACPITables(unsigned char*)>:
c0017a23:	56                   	push   esi
c0017a24:	53                   	push   ebx
c0017a25:	83 ec 44             	sub    esp,0x44
c0017a28:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017a2d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a33:	83 e0 04             	and    eax,0x4
c0017a36:	84 c0                	test   al,al
c0017a38:	0f 84 05 02 00 00    	je     c0017c43 <loadACPITables(unsigned char*)+0x220>
c0017a3e:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017a43:	84 c0                	test   al,al
c0017a45:	74 75                	je     c0017abc <loadACPITables(unsigned char*)+0x99>
c0017a47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a56:	83 e8 24             	sub    eax,0x24
c0017a59:	c1 e8 03             	shr    eax,0x3
c0017a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a60:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a6c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a70:	0f 8d b2 00 00 00    	jge    c0017b28 <loadACPITables(unsigned char*)+0x105>
c0017a76:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a7a:	83 c0 24             	add    eax,0x24
c0017a7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a8d:	c1 e0 03             	shl    eax,0x3
c0017a90:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a9d:	89 c1                	mov    ecx,eax
c0017a9f:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017aa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa7:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c0017aad:	89 ca                	mov    edx,ecx
c0017aaf:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017ab6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017aba:	eb ac                	jmp    c0017a68 <loadACPITables(unsigned char*)+0x45>
c0017abc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ac0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acb:	83 e8 24             	sub    eax,0x24
c0017ace:	c1 e8 02             	shr    eax,0x2
c0017ad1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ad5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017add:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ae1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017ae5:	7d 41                	jge    c0017b28 <loadACPITables(unsigned char*)+0x105>
c0017ae7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017aeb:	83 c0 24             	add    eax,0x24
c0017aee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017af2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017afa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017afe:	c1 e0 02             	shl    eax,0x2
c0017b01:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b09:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b0b:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017b10:	8d 50 01             	lea    edx,[eax+0x1]
c0017b13:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c0017b19:	89 ca                	mov    edx,ecx
c0017b1b:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017b22:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b26:	eb b5                	jmp    c0017add <loadACPITables(unsigned char*)+0xba>
c0017b28:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b30:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017b35:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b39:	0f 8d 05 01 00 00    	jge    c0017c44 <loadACPITables(unsigned char*)+0x221>
c0017b3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b43:	8b 04 c5 04 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3fc]
c0017b4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b5a:	25 ff 0f 00 00       	and    eax,0xfff
c0017b5f:	89 c6                	mov    esi,eax
c0017b61:	e8 18 a3 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017b66:	89 c3                	mov    ebx,eax
c0017b68:	83 ec 0c             	sub    esp,0xc
c0017b6b:	6a 01                	push   0x1
c0017b6d:	e8 71 a0 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017b72:	83 c4 10             	add    esp,0x10
c0017b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b79:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	6a 01                	push   0x1
c0017b84:	6a 01                	push   0x1
c0017b86:	50                   	push   eax
c0017b87:	52                   	push   edx
c0017b88:	53                   	push   ebx
c0017b89:	e8 20 ab ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b8e:	83 c4 20             	add    esp,0x20
c0017b91:	09 f0                	or     eax,esi
c0017b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b9b:	c1 e0 03             	shl    eax,0x3
c0017b9e:	05 00 0c 03 c0       	add    eax,0xc0030c00
c0017ba3:	83 ec 04             	sub    esp,0x4
c0017ba6:	6a 04                	push   0x4
c0017ba8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bac:	50                   	push   eax
c0017bad:	e8 92 8b fe ff       	call   c0000744 <memcpy>
c0017bb2:	83 c4 10             	add    esp,0x10
c0017bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bc4:	05 00 10 00 00       	add    eax,0x1000
c0017bc9:	c1 e8 0c             	shr    eax,0xc
c0017bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdb:	25 ff 0f 00 00       	and    eax,0xfff
c0017be0:	89 c6                	mov    esi,eax
c0017be2:	e8 97 a2 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017be7:	89 c3                	mov    ebx,eax
c0017be9:	83 ec 0c             	sub    esp,0xc
c0017bec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bf0:	e8 ee 9f ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017bf5:	83 c4 10             	add    esp,0x10
c0017bf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bfc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c02:	83 ec 0c             	sub    esp,0xc
c0017c05:	6a 01                	push   0x1
c0017c07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c0b:	50                   	push   eax
c0017c0c:	52                   	push   edx
c0017c0d:	53                   	push   ebx
c0017c0e:	e8 9b aa ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c13:	83 c4 20             	add    esp,0x20
c0017c16:	09 f0                	or     eax,esi
c0017c18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	50                   	push   eax
c0017c23:	e8 2b a4 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c28:	83 c4 10             	add    esp,0x10
c0017c2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c33:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017c3a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c3e:	e9 ed fe ff ff       	jmp    c0017b30 <loadACPITables(unsigned char*)+0x10d>
c0017c43:	90                   	nop
c0017c44:	83 c4 44             	add    esp,0x44
c0017c47:	5b                   	pop    ebx
c0017c48:	5e                   	pop    esi
c0017c49:	c3                   	ret    

c0017c4a <findRSDT(unsigned char*)>:
c0017c4a:	56                   	push   esi
c0017c4b:	53                   	push   ebx
c0017c4c:	83 ec 44             	sub    esp,0x44
c0017c4f:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017c54:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c5a:	83 e0 04             	and    eax,0x4
c0017c5d:	84 c0                	test   al,al
c0017c5f:	75 0a                	jne    c0017c6b <findRSDT(unsigned char*)+0x21>
c0017c61:	b8 00 00 00 00       	mov    eax,0x0
c0017c66:	e9 f7 00 00 00       	jmp    c0017d62 <findRSDT(unsigned char*)+0x118>
c0017c6b:	83 ec 04             	sub    esp,0x4
c0017c6e:	6a 24                	push   0x24
c0017c70:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c74:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c78:	50                   	push   eax
c0017c79:	e8 c6 8a fe ff       	call   c0000744 <memcpy>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c85:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c89:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c99:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ca1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ca5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ca9:	25 ff 0f 00 00       	and    eax,0xfff
c0017cae:	89 c6                	mov    esi,eax
c0017cb0:	e8 c9 a1 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017cb5:	89 c3                	mov    ebx,eax
c0017cb7:	83 ec 0c             	sub    esp,0xc
c0017cba:	6a 02                	push   0x2
c0017cbc:	e8 22 9f ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017cc1:	83 c4 10             	add    esp,0x10
c0017cc4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017cc8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cce:	83 ec 0c             	sub    esp,0xc
c0017cd1:	6a 01                	push   0x1
c0017cd3:	6a 02                	push   0x2
c0017cd5:	50                   	push   eax
c0017cd6:	52                   	push   edx
c0017cd7:	53                   	push   ebx
c0017cd8:	e8 d1 a9 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cdd:	83 c4 20             	add    esp,0x20
c0017ce0:	09 f0                	or     eax,esi
c0017ce2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cea:	25 ff 0f 00 00       	and    eax,0xfff
c0017cef:	89 c6                	mov    esi,eax
c0017cf1:	e8 88 a1 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017cf6:	89 c3                	mov    ebx,eax
c0017cf8:	83 ec 0c             	sub    esp,0xc
c0017cfb:	6a 02                	push   0x2
c0017cfd:	e8 e1 9e ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017d02:	83 c4 10             	add    esp,0x10
c0017d05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d09:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d0f:	83 ec 0c             	sub    esp,0xc
c0017d12:	6a 01                	push   0x1
c0017d14:	6a 02                	push   0x2
c0017d16:	50                   	push   eax
c0017d17:	52                   	push   edx
c0017d18:	53                   	push   ebx
c0017d19:	e8 90 a9 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d1e:	83 c4 20             	add    esp,0x20
c0017d21:	09 f0                	or     eax,esi
c0017d23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d27:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d2c:	75 11                	jne    c0017d3f <findRSDT(unsigned char*)+0xf5>
c0017d2e:	c6 05 00 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e00,0x0
c0017d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d3d:	eb 1f                	jmp    c0017d5e <findRSDT(unsigned char*)+0x114>
c0017d3f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d44:	75 11                	jne    c0017d57 <findRSDT(unsigned char*)+0x10d>
c0017d46:	c6 05 00 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e00,0x1
c0017d4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d55:	eb 07                	jmp    c0017d5e <findRSDT(unsigned char*)+0x114>
c0017d57:	b8 00 00 00 00       	mov    eax,0x0
c0017d5c:	eb 04                	jmp    c0017d62 <findRSDT(unsigned char*)+0x118>
c0017d5e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d62:	83 c4 44             	add    esp,0x44
c0017d65:	5b                   	pop    ebx
c0017d66:	5e                   	pop    esi
c0017d67:	c3                   	ret    

c0017d68 <findDataTable(unsigned char*, char*)>:
c0017d68:	83 ec 1c             	sub    esp,0x1c
c0017d6b:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017d70:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d76:	83 e0 04             	and    eax,0x4
c0017d79:	84 c0                	test   al,al
c0017d7b:	75 07                	jne    c0017d84 <findDataTable(unsigned char*, char*)+0x1c>
c0017d7d:	b8 00 00 00 00       	mov    eax,0x0
c0017d82:	eb 7c                	jmp    c0017e00 <findDataTable(unsigned char*, char*)+0x98>
c0017d84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d8c:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017d91:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d95:	7d 3a                	jge    c0017dd1 <findDataTable(unsigned char*, char*)+0x69>
c0017d97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d9b:	c1 e0 03             	shl    eax,0x3
c0017d9e:	05 00 0c 03 c0       	add    eax,0xc0030c00
c0017da3:	83 ec 04             	sub    esp,0x4
c0017da6:	6a 04                	push   0x4
c0017da8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dac:	50                   	push   eax
c0017dad:	e8 8e 88 fe ff       	call   c0000640 <memcmp>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	85 c0                	test   eax,eax
c0017db7:	0f 94 c0             	sete   al
c0017dba:	84 c0                	test   al,al
c0017dbc:	74 0d                	je     c0017dcb <findDataTable(unsigned char*, char*)+0x63>
c0017dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dc2:	8b 04 c5 04 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3fc]
c0017dc9:	eb 35                	jmp    c0017e00 <findDataTable(unsigned char*, char*)+0x98>
c0017dcb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dcf:	eb bb                	jmp    c0017d8c <findDataTable(unsigned char*, char*)+0x24>
c0017dd1:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017dd6:	84 c0                	test   al,al
c0017dd8:	74 07                	je     c0017de1 <findDataTable(unsigned char*, char*)+0x79>
c0017dda:	b8 58 00 00 00       	mov    eax,0x58
c0017ddf:	eb 05                	jmp    c0017de6 <findDataTable(unsigned char*, char*)+0x7e>
c0017de1:	b8 52 00 00 00       	mov    eax,0x52
c0017de6:	83 ec 04             	sub    esp,0x4
c0017de9:	50                   	push   eax
c0017dea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dee:	68 74 b6 02 c0       	push   0xc002b674
c0017df3:	e8 f2 b1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	b8 00 00 00 00       	mov    eax,0x0
c0017e00:	83 c4 1c             	add    esp,0x1c
c0017e03:	c3                   	ret    

c0017e04 <scanMADT()>:
c0017e04:	53                   	push   ebx
c0017e05:	83 ec 38             	sub    esp,0x38
c0017e08:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017e0d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e13:	83 e0 04             	and    eax,0x4
c0017e16:	84 c0                	test   al,al
c0017e18:	0f 84 63 04 00 00    	je     c0018281 <scanMADT()+0x47d>
c0017e1e:	e8 76 fb ff ff       	call   c0017999 <findRSDP()>
c0017e23:	a3 0c 0e 03 c0       	mov    ds:0xc0030e0c,eax
c0017e28:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c0017e2d:	85 c0                	test   eax,eax
c0017e2f:	75 19                	jne    c0017e4a <scanMADT()+0x46>
c0017e31:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017e36:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e3c:	83 e2 fb             	and    edx,0xfffffffb
c0017e3f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e45:	e9 3b 04 00 00       	jmp    c0018285 <scanMADT()+0x481>
c0017e4a:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c0017e4f:	83 ec 0c             	sub    esp,0xc
c0017e52:	50                   	push   eax
c0017e53:	e8 f2 fd ff ff       	call   c0017c4a <findRSDT(unsigned char*)>
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0017e60:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e65:	85 c0                	test   eax,eax
c0017e67:	75 19                	jne    c0017e82 <scanMADT()+0x7e>
c0017e69:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017e6e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e74:	83 e2 fb             	and    edx,0xfffffffb
c0017e77:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e7d:	e9 03 04 00 00       	jmp    c0018285 <scanMADT()+0x481>
c0017e82:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e87:	83 ec 0c             	sub    esp,0xc
c0017e8a:	50                   	push   eax
c0017e8b:	e8 93 fb ff ff       	call   c0017a23 <loadACPITables(unsigned char*)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e98:	83 ec 08             	sub    esp,0x8
c0017e9b:	68 42 b5 02 c0       	push   0xc002b542
c0017ea0:	50                   	push   eax
c0017ea1:	e8 c2 fe ff ff       	call   c0017d68 <findDataTable(unsigned char*, char*)>
c0017ea6:	83 c4 10             	add    esp,0x10
c0017ea9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ead:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017eb2:	75 19                	jne    c0017ecd <scanMADT()+0xc9>
c0017eb4:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017eb9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ebf:	83 e2 fe             	and    edx,0xfffffffe
c0017ec2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ec8:	e9 b8 03 00 00       	jmp    c0018285 <scanMADT()+0x481>
c0017ecd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017edc:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017ee0:	0f 87 9f 03 00 00    	ja     c0018285 <scanMADT()+0x481>
c0017ee6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017eee:	0f 87 91 03 00 00    	ja     c0018285 <scanMADT()+0x481>
c0017ef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017efc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f00:	8d 50 01             	lea    edx,[eax+0x1]
c0017f03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f0b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f0f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f17:	8d 50 01             	lea    edx,[eax+0x1]
c0017f1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f22:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f26:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f2a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f2f:	0f 86 4f 03 00 00    	jbe    c0018284 <scanMADT()+0x480>
c0017f35:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f3a:	75 57                	jne    c0017f93 <scanMADT()+0x18f>
c0017f3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f40:	8d 50 01             	lea    edx,[eax+0x1]
c0017f43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f47:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017f4d:	0f b6 d2             	movzx  edx,dl
c0017f50:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f54:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f58:	88 82 40 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefc0],al
c0017f5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f62:	8d 50 01             	lea    edx,[eax+0x1]
c0017f65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f69:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017f6f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f72:	88 0d 00 10 03 c0    	mov    BYTE PTR ds:0xc0031000,cl
c0017f78:	0f b6 d2             	movzx  edx,dl
c0017f7b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f7f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f83:	88 82 20 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefe0],al
c0017f89:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f8e:	e9 da 02 00 00       	jmp    c001826d <scanMADT()+0x469>
c0017f93:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f98:	0f 85 14 01 00 00    	jne    c00180b2 <scanMADT()+0x2ae>
c0017f9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa2:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa9:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017faf:	0f b6 d2             	movzx  edx,dl
c0017fb2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fb6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fba:	88 82 e0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf120],al
c0017fc0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fc4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcc:	01 d0                	add    eax,edx
c0017fce:	83 c0 2c             	add    eax,0x2c
c0017fd1:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd3:	0f b6 d0             	movzx  edx,al
c0017fd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fda:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fe5:	0f b6 c0             	movzx  eax,al
c0017fe8:	c1 e0 08             	shl    eax,0x8
c0017feb:	89 d1                	mov    ecx,edx
c0017fed:	09 c1                	or     ecx,eax
c0017fef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff3:	8d 50 02             	lea    edx,[eax+0x2]
c0017ff6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ffa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ffe:	0f b6 c0             	movzx  eax,al
c0018001:	c1 e0 10             	shl    eax,0x10
c0018004:	09 c1                	or     ecx,eax
c0018006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800a:	8d 50 03             	lea    edx,[eax+0x3]
c001800d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018011:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018015:	0f b6 c0             	movzx  eax,al
c0018018:	c1 e0 18             	shl    eax,0x18
c001801b:	09 c1                	or     ecx,eax
c001801d:	89 ca                	mov    edx,ecx
c001801f:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0018024:	0f b6 c0             	movzx  eax,al
c0018027:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c001802e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018033:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803b:	01 d0                	add    eax,edx
c001803d:	83 c0 2c             	add    eax,0x2c
c0018040:	8a 00                	mov    al,BYTE PTR [eax]
c0018042:	0f b6 d0             	movzx  edx,al
c0018045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018049:	8d 48 01             	lea    ecx,[eax+0x1]
c001804c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018050:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018054:	0f b6 c0             	movzx  eax,al
c0018057:	c1 e0 08             	shl    eax,0x8
c001805a:	89 d1                	mov    ecx,edx
c001805c:	09 c1                	or     ecx,eax
c001805e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018062:	8d 50 02             	lea    edx,[eax+0x2]
c0018065:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018069:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001806d:	0f b6 c0             	movzx  eax,al
c0018070:	c1 e0 10             	shl    eax,0x10
c0018073:	09 c1                	or     ecx,eax
c0018075:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018079:	8d 50 03             	lea    edx,[eax+0x3]
c001807c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018080:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018084:	0f b6 c0             	movzx  eax,al
c0018087:	c1 e0 18             	shl    eax,0x18
c001808a:	09 c1                	or     ecx,eax
c001808c:	89 ca                	mov    edx,ecx
c001808e:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0018093:	0f b6 c0             	movzx  eax,al
c0018096:	89 14 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],edx
c001809d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180a2:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c00180a7:	40                   	inc    eax
c00180a8:	a2 c0 0e 03 c0       	mov    ds:0xc0030ec0,al
c00180ad:	e9 bb 01 00 00       	jmp    c001826d <scanMADT()+0x469>
c00180b2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180b7:	0f 85 e9 00 00 00    	jne    c00181a6 <scanMADT()+0x3a2>
c00180bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c1:	8d 50 01             	lea    edx,[eax+0x1]
c00180c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180d0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d8:	8d 50 01             	lea    edx,[eax+0x1]
c00180db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180e7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f3:	01 d0                	add    eax,edx
c00180f5:	83 c0 2c             	add    eax,0x2c
c00180f8:	8a 00                	mov    al,BYTE PTR [eax]
c00180fa:	0f b6 d0             	movzx  edx,al
c00180fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018101:	8d 48 01             	lea    ecx,[eax+0x1]
c0018104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018108:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001810c:	0f b6 c0             	movzx  eax,al
c001810f:	c1 e0 08             	shl    eax,0x8
c0018112:	89 d1                	mov    ecx,edx
c0018114:	09 c1                	or     ecx,eax
c0018116:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811a:	8d 50 02             	lea    edx,[eax+0x2]
c001811d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018121:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018125:	0f b6 c0             	movzx  eax,al
c0018128:	c1 e0 10             	shl    eax,0x10
c001812b:	09 c1                	or     ecx,eax
c001812d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018131:	8d 50 03             	lea    edx,[eax+0x3]
c0018134:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018138:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001813c:	0f b6 c0             	movzx  eax,al
c001813f:	c1 e0 18             	shl    eax,0x18
c0018142:	09 c8                	or     eax,ecx
c0018144:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018148:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001814d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018151:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018155:	01 d0                	add    eax,edx
c0018157:	83 c0 2c             	add    eax,0x2c
c001815a:	8a 00                	mov    al,BYTE PTR [eax]
c001815c:	0f b6 c0             	movzx  eax,al
c001815f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018163:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018166:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001816e:	0f b6 d2             	movzx  edx,dl
c0018171:	c1 e2 08             	shl    edx,0x8
c0018174:	09 d0                	or     eax,edx
c0018176:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001817b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018180:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018185:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018189:	88 90 80 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2880],dl
c001818f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018194:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018199:	66 89 84 12 a0 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf160],ax
c00181a1:	e9 c7 00 00 00       	jmp    c001826d <scanMADT()+0x469>
c00181a6:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181ab:	0f 85 b0 00 00 00    	jne    c0018261 <scanMADT()+0x45d>
c00181b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b5:	8d 50 01             	lea    edx,[eax+0x1]
c00181b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181c0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181c4:	0f b6 c0             	movzx  eax,al
c00181c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d3:	01 d0                	add    eax,edx
c00181d5:	83 c0 2c             	add    eax,0x2c
c00181d8:	8a 00                	mov    al,BYTE PTR [eax]
c00181da:	0f b6 d0             	movzx  edx,al
c00181dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e1:	8d 48 01             	lea    ecx,[eax+0x1]
c00181e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181e8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181ec:	0f b6 c0             	movzx  eax,al
c00181ef:	c1 e0 08             	shl    eax,0x8
c00181f2:	09 d0                	or     eax,edx
c00181f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181f8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018201:	8d 50 01             	lea    edx,[eax+0x1]
c0018204:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018208:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018210:	0f b6 c0             	movzx  eax,al
c0018213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821b:	c1 e0 08             	shl    eax,0x8
c001821e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018222:	89 c1                	mov    ecx,eax
c0018224:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018228:	c1 e0 18             	shl    eax,0x18
c001822b:	89 c3                	mov    ebx,eax
c001822d:	a1 10 0e 03 c0       	mov    eax,ds:0xc0030e10
c0018232:	8d 50 01             	lea    edx,[eax+0x1]
c0018235:	89 15 10 0e 03 c0    	mov    DWORD PTR ds:0xc0030e10,edx
c001823b:	09 d9                	or     ecx,ebx
c001823d:	89 ca                	mov    edx,ecx
c001823f:	89 14 85 20 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1e0],edx
c0018246:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001824a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001824e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018252:	68 a4 b6 02 c0       	push   0xc002b6a4
c0018257:	e8 8e ad ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001825c:	83 c4 10             	add    esp,0x10
c001825f:	eb 0c                	jmp    c001826d <scanMADT()+0x469>
c0018261:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018266:	75 05                	jne    c001826d <scanMADT()+0x469>
c0018268:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001826d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018272:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018276:	01 d0                	add    eax,edx
c0018278:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001827c:	e9 54 fc ff ff       	jmp    c0017ed5 <scanMADT()+0xd1>
c0018281:	90                   	nop
c0018282:	eb 01                	jmp    c0018285 <scanMADT()+0x481>
c0018284:	90                   	nop
c0018285:	83 c4 38             	add    esp,0x38
c0018288:	5b                   	pop    ebx
c0018289:	c3                   	ret    

c001828a <ACPI::ACPI()>:
c001828a:	83 ec 0c             	sub    esp,0xc
c001828d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018291:	83 ec 08             	sub    esp,0x8
c0018294:	68 47 b5 02 c0       	push   0xc002b547
c0018299:	50                   	push   eax
c001829a:	e8 61 c3 ff ff       	call   c0014600 <Device::Device(char const*)>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	ba 18 b7 02 c0       	mov    edx,0xc002b718
c00182a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ab:	89 10                	mov    DWORD PTR [eax],edx
c00182ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ca:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d8:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e3:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182ea:	e8 15 fb ff ff       	call   c0017e04 <scanMADT()>
c00182ef:	90                   	nop
c00182f0:	83 c4 0c             	add    esp,0xc
c00182f3:	c3                   	ret    

c00182f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182f4:	83 ec 2c             	sub    esp,0x2c
c00182f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182ff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018303:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018307:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001830c:	88 d0                	mov    al,dl
c001830e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018312:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018317:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001831f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018323:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018329:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001832d:	0f 8d 97 00 00 00    	jge    c00183ca <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018333:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018337:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001833b:	83 c2 2a             	add    edx,0x2a
c001833e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018342:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018347:	75 78                	jne    c00183c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018349:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001834d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018351:	83 c2 2a             	add    edx,0x2a
c0018354:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018358:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001835c:	75 63                	jne    c00183c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001835e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018363:	74 3a                	je     c001839f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018369:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836d:	83 c2 2a             	add    edx,0x2a
c0018370:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018374:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001837b:	39 c2                	cmp    edx,eax
c001837d:	74 10                	je     c001838f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001837f:	83 ec 0c             	sub    esp,0xc
c0018382:	68 e0 b6 02 c0       	push   0xc002b6e0
c0018387:	e8 0f 23 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001838c:	83 c4 10             	add    esp,0x10
c001838f:	83 ec 0c             	sub    esp,0xc
c0018392:	68 4c b5 02 c0       	push   0xc002b54c
c0018397:	e8 ff 22 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001839c:	83 c4 10             	add    esp,0x10
c001839f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183ab:	83 c2 2a             	add    edx,0x2a
c00183ae:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00183b4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183b7:	89 01                	mov    DWORD PTR [ecx],eax
c00183b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183bc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183c1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183c5:	e9 55 ff ff ff       	jmp    c001831f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183ca:	90                   	nop
c00183cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183cf:	83 c4 2c             	add    esp,0x2c
c00183d2:	c2 04 00             	ret    0x4
c00183d5:	90                   	nop

c00183d6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183d6:	83 ec 1c             	sub    esp,0x1c
c00183d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183dd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183e5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183ea:	88 c8                	mov    al,cl
c00183ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183f0:	88 d0                	mov    al,dl
c00183f2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183fa:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018404:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018407:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001840b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001840f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018413:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018419:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001841d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018424:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018433:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018437:	8d 48 01             	lea    ecx,[eax+0x1]
c001843a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001843e:	83 c2 2a             	add    edx,0x2a
c0018441:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018449:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001844f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018453:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018456:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001845a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001845e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018462:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018468:	8d 50 01             	lea    edx,[eax+0x1]
c001846b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018479:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001847f:	3d 00 02 00 00       	cmp    eax,0x200
c0018484:	75 10                	jne    c0018496 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018486:	83 ec 0c             	sub    esp,0xc
c0018489:	68 5b b5 02 c0       	push   0xc002b55b
c001848e:	e8 08 22 00 00       	call   c001a69b <Krnl::panic(char const*)>
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	90                   	nop
c0018497:	83 c4 1c             	add    esp,0x1c
c001849a:	c3                   	ret    
c001849b:	90                   	nop

c001849c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001849c:	b8 00 00 00 00       	mov    eax,0x0
c00184a1:	c3                   	ret    

c00184a2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184a2:	83 ec 1c             	sub    esp,0x1c
c00184a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184a9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184b0:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00184b5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184ba:	83 ec 08             	sub    esp,0x8
c00184bd:	52                   	push   edx
c00184be:	50                   	push   eax
c00184bf:	e8 94 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00184c4:	83 c4 10             	add    esp,0x10
c00184c7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184cb:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00184d0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184d5:	83 ec 04             	sub    esp,0x4
c00184d8:	6a 01                	push   0x1
c00184da:	52                   	push   edx
c00184db:	50                   	push   eax
c00184dc:	e8 8d 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	90                   	nop
c00184e5:	83 c4 1c             	add    esp,0x1c
c00184e8:	c3                   	ret    
c00184e9:	90                   	nop

c00184ea <ACPI::open(int, int, void*)>:
c00184ea:	53                   	push   ebx
c00184eb:	83 ec 28             	sub    esp,0x28
c00184ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fd:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018504:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0018509:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001850f:	83 e0 04             	and    eax,0x4
c0018512:	84 c0                	test   al,al
c0018514:	74 47                	je     c001855d <ACPI::open(int, int, void*)+0x73>
c0018516:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001851b:	83 ec 08             	sub    esp,0x8
c001851e:	68 78 b5 02 c0       	push   0xc002b578
c0018523:	50                   	push   eax
c0018524:	e8 3f f8 ff ff       	call   c0017d68 <findDataTable(unsigned char*, char*)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018530:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018535:	74 26                	je     c001855d <ACPI::open(int, int, void*)+0x73>
c0018537:	83 ec 0c             	sub    esp,0xc
c001853a:	68 7d b5 02 c0       	push   0xc002b57d
c001853f:	e8 a6 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018544:	83 c4 10             	add    esp,0x10
c0018547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001854b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018556:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001855d:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018565:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018569:	8a 00                	mov    al,BYTE PTR [eax]
c001856b:	3c 01                	cmp    al,0x1
c001856d:	75 28                	jne    c0018597 <ACPI::open(int, int, void*)+0xad>
c001856f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018573:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001857a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001857e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018585:	83 ec 0c             	sub    esp,0xc
c0018588:	68 8e b5 02 c0       	push   0xc002b58e
c001858d:	e8 58 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018592:	83 c4 10             	add    esp,0x10
c0018595:	eb 25                	jmp    c00185bc <ACPI::open(int, int, void*)+0xd2>
c0018597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001859b:	8a 00                	mov    al,BYTE PTR [eax]
c001859d:	3c 02                	cmp    al,0x2
c001859f:	75 1b                	jne    c00185bc <ACPI::open(int, int, void*)+0xd2>
c00185a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ac:	83 ec 0c             	sub    esp,0xc
c00185af:	68 96 b5 02 c0       	push   0xc002b596
c00185b4:	e8 31 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00185b9:	83 c4 10             	add    esp,0x10
c00185bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c6:	83 f0 01             	xor    eax,0x1
c00185c9:	84 c0                	test   al,al
c00185cb:	74 6a                	je     c0018637 <ACPI::open(int, int, void*)+0x14d>
c00185cd:	83 ec 0c             	sub    esp,0xc
c00185d0:	68 9e b5 02 c0       	push   0xc002b59e
c00185d5:	e8 10 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	e8 6e 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185e6:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185eb:	75 28                	jne    c0018615 <ACPI::open(int, int, void*)+0x12b>
c00185ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185fc:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018603:	83 ec 0c             	sub    esp,0xc
c0018606:	68 ac b5 02 c0       	push   0xc002b5ac
c001860b:	e8 da a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	eb 22                	jmp    c0018637 <ACPI::open(int, int, void*)+0x14d>
c0018615:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001861a:	75 1b                	jne    c0018637 <ACPI::open(int, int, void*)+0x14d>
c001861c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018620:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018627:	83 ec 0c             	sub    esp,0xc
c001862a:	68 b6 b5 02 c0       	push   0xc002b5b6
c001862f:	e8 b6 a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018634:	83 c4 10             	add    esp,0x10
c0018637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018641:	84 c0                	test   al,al
c0018643:	74 13                	je     c0018658 <ACPI::open(int, int, void*)+0x16e>
c0018645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018649:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001864f:	83 f0 01             	xor    eax,0x1
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	40                   	inc    eax
c0018656:	eb 05                	jmp    c001865d <ACPI::open(int, int, void*)+0x173>
c0018658:	b8 00 00 00 00       	mov    eax,0x0
c001865d:	83 ec 08             	sub    esp,0x8
c0018660:	50                   	push   eax
c0018661:	68 c0 b5 02 c0       	push   0xc002b5c0
c0018666:	e8 7f a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018672:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018678:	84 c0                	test   al,al
c001867a:	74 67                	je     c00186e3 <ACPI::open(int, int, void*)+0x1f9>
c001867c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018684:	83 ec 0c             	sub    esp,0xc
c0018687:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001868b:	e8 b0 71 ff ff       	call   c000f840 <malloc>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	89 c3                	mov    ebx,eax
c0018695:	83 ec 0c             	sub    esp,0xc
c0018698:	53                   	push   ebx
c0018699:	e8 dc a2 00 00       	call   c002297a <PCI::PCI()>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186a9:	83 ec 08             	sub    esp,0x8
c00186ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186b0:	50                   	push   eax
c00186b1:	e8 5a bd ff ff       	call   c0014410 <Device::addChild(Device*)>
c00186b6:	83 c4 10             	add    esp,0x10
c00186b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00186bf:	83 c0 08             	add    eax,0x8
c00186c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00186c4:	6a 00                	push   0x0
c00186c6:	6a 00                	push   0x0
c00186c8:	6a 00                	push   0x0
c00186ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186ce:	ff d0                	call   eax
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	83 ec 0c             	sub    esp,0xc
c00186d6:	68 c9 b5 02 c0       	push   0xc002b5c9
c00186db:	e8 0a a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00186e0:	83 c4 10             	add    esp,0x10
c00186e3:	83 ec 0c             	sub    esp,0xc
c00186e6:	68 d4 b5 02 c0       	push   0xc002b5d4
c00186eb:	e8 81 46 00 00       	call   c001cd71 <Thr::loadKernelSymbolTable(char const*)>
c00186f0:	83 c4 10             	add    esp,0x10
c00186f3:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c00186f9:	83 ec 08             	sub    esp,0x8
c00186fc:	6a 01                	push   0x1
c00186fe:	68 f2 b5 02 c0       	push   0xc002b5f2
c0018703:	e8 c6 50 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c0018708:	83 c4 10             	add    esp,0x10
c001870b:	83 ec 08             	sub    esp,0x8
c001870e:	53                   	push   ebx
c001870f:	50                   	push   eax
c0018710:	e8 ed 52 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c0018715:	83 c4 10             	add    esp,0x10
c0018718:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c001871e:	83 ec 08             	sub    esp,0x8
c0018721:	6a 01                	push   0x1
c0018723:	68 0f b6 02 c0       	push   0xc002b60f
c0018728:	e8 a1 50 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	83 ec 08             	sub    esp,0x8
c0018733:	53                   	push   ebx
c0018734:	50                   	push   eax
c0018735:	e8 c8 52 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0018742:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018748:	83 e0 04             	and    eax,0x4
c001874b:	84 c0                	test   al,al
c001874d:	0f 84 d2 00 00 00    	je     c0018825 <ACPI::open(int, int, void*)+0x33b>
c0018753:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001875a:	83 ec 0c             	sub    esp,0xc
c001875d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018761:	e8 da 70 ff ff       	call   c000f840 <malloc>
c0018766:	83 c4 10             	add    esp,0x10
c0018769:	89 c3                	mov    ebx,eax
c001876b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0018770:	83 ec 04             	sub    esp,0x4
c0018773:	50                   	push   eax
c0018774:	68 2c b6 02 c0       	push   0xc002b62c
c0018779:	53                   	push   ebx
c001877a:	e8 c3 ad ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001877f:	83 c4 10             	add    esp,0x10
c0018782:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018786:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001878b:	74 17                	je     c00187a4 <ACPI::open(int, int, void*)+0x2ba>
c001878d:	83 ec 0c             	sub    esp,0xc
c0018790:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018794:	e8 7b b0 ff ff       	call   c0013814 <File::exists()>
c0018799:	83 c4 10             	add    esp,0x10
c001879c:	84 c0                	test   al,al
c001879e:	74 04                	je     c00187a4 <ACPI::open(int, int, void*)+0x2ba>
c00187a0:	b0 01                	mov    al,0x1
c00187a2:	eb 02                	jmp    c00187a6 <ACPI::open(int, int, void*)+0x2bc>
c00187a4:	b0 00                	mov    al,0x0
c00187a6:	84 c0                	test   al,al
c00187a8:	74 22                	je     c00187cc <ACPI::open(int, int, void*)+0x2e2>
c00187aa:	83 ec 08             	sub    esp,0x8
c00187ad:	6a 01                	push   0x1
c00187af:	68 2c b6 02 c0       	push   0xc002b62c
c00187b4:	e8 15 50 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	83 ec 08             	sub    esp,0x8
c00187bf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187c3:	50                   	push   eax
c00187c4:	e8 39 52 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187d1:	74 1e                	je     c00187f1 <ACPI::open(int, int, void*)+0x307>
c00187d3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187d8:	74 17                	je     c00187f1 <ACPI::open(int, int, void*)+0x307>
c00187da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187de:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e0:	83 c0 08             	add    eax,0x8
c00187e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e5:	83 ec 0c             	sub    esp,0xc
c00187e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187ec:	ff d0                	call   eax
c00187ee:	83 c4 10             	add    esp,0x10
c00187f1:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00187f6:	83 ec 08             	sub    esp,0x8
c00187f9:	68 49 b6 02 c0       	push   0xc002b649
c00187fe:	50                   	push   eax
c00187ff:	e8 64 f5 ff ff       	call   c0017d68 <findDataTable(unsigned char*, char*)>
c0018804:	83 c4 10             	add    esp,0x10
c0018807:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001880b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018810:	74 13                	je     c0018825 <ACPI::open(int, int, void*)+0x33b>
c0018812:	83 ec 08             	sub    esp,0x8
c0018815:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018819:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001881d:	e8 80 fc ff ff       	call   c00184a2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	b8 00 00 00 00       	mov    eax,0x0
c001882a:	83 c4 28             	add    esp,0x28
c001882d:	5b                   	pop    ebx
c001882e:	c3                   	ret    
c001882f:	90                   	nop

c0018830 <ACPI::sleep()>:
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c0018838:	85 c0                	test   eax,eax
c001883a:	74 07                	je     c0018843 <ACPI::sleep()+0x13>
c001883c:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c0018841:	ff d0                	call   eax
c0018843:	90                   	nop
c0018844:	83 c4 0c             	add    esp,0xc
c0018847:	c3                   	ret    

c0018848 <CPU::close(int, int, void*)>:
c0018848:	31 c0                	xor    eax,eax
c001884a:	c3                   	ret    
c001884b:	90                   	nop

c001884c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001884c:	55                   	push   ebp
c001884d:	57                   	push   edi
c001884e:	56                   	push   esi
c001884f:	53                   	push   ebx
c0018850:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018854:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018858:	89 ce                	mov    esi,ecx
c001885a:	89 d5                	mov    ebp,edx
c001885c:	80 f9 04             	cmp    cl,0x4
c001885f:	75 28                	jne    c0018889 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018861:	8d 42 f9             	lea    eax,[edx-0x7]
c0018864:	3c 03                	cmp    al,0x3
c0018866:	0f 86 63 01 00 00    	jbe    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001886c:	80 fa 03             	cmp    dl,0x3
c001886f:	0f 84 5a 01 00 00    	je     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018875:	8d 7a f2             	lea    edi,[edx-0xe]
c0018878:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c001887d:	89 fb                	mov    ebx,edi
c001887f:	80 fb 01             	cmp    bl,0x1
c0018882:	77 4e                	ja     c00188d2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018884:	e9 52 01 00 00       	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018889:	80 f9 05             	cmp    cl,0x5
c001888c:	75 4d                	jne    c00188db <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001888e:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018893:	80 fa 03             	cmp    dl,0x3
c0018896:	0f 86 3f 01 00 00    	jbe    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889c:	8d 7a fa             	lea    edi,[edx-0x6]
c001889f:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c00188a4:	89 fb                	mov    ebx,edi
c00188a6:	80 fb 01             	cmp    bl,0x1
c00188a9:	0f 86 2c 01 00 00    	jbe    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188af:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00188b4:	80 fa 08             	cmp    dl,0x8
c00188b7:	0f 84 1e 01 00 00    	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bd:	89 d7                	mov    edi,edx
c00188bf:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c00188c4:	83 e7 fb             	and    edi,0xfffffffb
c00188c7:	89 fb                	mov    ebx,edi
c00188c9:	80 fb 09             	cmp    bl,0x9
c00188cc:	0f 84 09 01 00 00    	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d2:	31 c0                	xor    eax,eax
c00188d4:	89 eb                	mov    ebx,ebp
c00188d6:	0f b6 fb             	movzx  edi,bl
c00188d9:	eb 30                	jmp    c001890b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188db:	31 c0                	xor    eax,eax
c00188dd:	80 f9 06             	cmp    cl,0x6
c00188e0:	75 f2                	jne    c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e2:	80 fa 0a             	cmp    dl,0xa
c00188e5:	77 ed                	ja     c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e7:	bf de 05 00 00       	mov    edi,0x5de
c00188ec:	0f a3 d7             	bt     edi,edx
c00188ef:	73 e3                	jae    c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188f1:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c00188f6:	e9 e0 00 00 00       	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fb:	39 c7                	cmp    edi,eax
c00188fd:	0f 84 d3 00 00 00    	je     c00189d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018903:	40                   	inc    eax
c0018904:	3d d0 00 00 00       	cmp    eax,0xd0
c0018909:	74 09                	je     c0018914 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001890b:	89 f3                	mov    ebx,esi
c001890d:	80 fb 0f             	cmp    bl,0xf
c0018910:	75 f1                	jne    c0018903 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018912:	eb e7                	jmp    c00188fb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018914:	80 f9 10             	cmp    cl,0x10
c0018917:	75 14                	jne    c001892d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018919:	8d 42 fc             	lea    eax,[edx-0x4]
c001891c:	83 e0 fb             	and    eax,0xfffffffb
c001891f:	3c 02                	cmp    al,0x2
c0018921:	76 34                	jbe    c0018957 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018923:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018928:	80 fa 02             	cmp    dl,0x2
c001892b:	eb 24                	jmp    c0018951 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001892d:	80 f9 11             	cmp    cl,0x11
c0018930:	75 13                	jne    c0018945 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018932:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018937:	80 fa 03             	cmp    dl,0x3
c001893a:	0f 85 9b 00 00 00    	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018940:	e9 91 00 00 00       	jmp    c00189d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018945:	80 f9 12             	cmp    cl,0x12
c0018948:	75 14                	jne    c001895e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001894a:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c001894f:	fe ca                	dec    dl
c0018951:	0f 85 84 00 00 00    	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018957:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c001895c:	eb 7d                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895e:	80 f9 14             	cmp    cl,0x14
c0018961:	75 12                	jne    c0018975 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018963:	4a                   	dec    edx
c0018964:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018969:	80 fa 01             	cmp    dl,0x1
c001896c:	77 6d                	ja     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896e:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018973:	eb 66                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018975:	80 f9 15             	cmp    cl,0x15
c0018978:	75 31                	jne    c00189ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001897a:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c001897f:	80 fa 01             	cmp    dl,0x1
c0018982:	74 57                	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018984:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018989:	80 fa 13             	cmp    dl,0x13
c001898c:	76 0c                	jbe    c001899a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001898e:	80 fa 30             	cmp    dl,0x30
c0018991:	75 48                	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018993:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018998:	eb 41                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899a:	b9 04 00 09 00       	mov    ecx,0x90004
c001899f:	0f a3 d1             	bt     ecx,edx
c00189a2:	73 37                	jae    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a4:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00189a9:	eb 30                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ab:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c00189b0:	80 f9 16             	cmp    cl,0x16
c00189b3:	75 26                	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b5:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00189ba:	84 d2                	test   dl,dl
c00189bc:	74 1d                	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189be:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c00189c3:	80 fa 30             	cmp    dl,0x30
c00189c6:	75 13                	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c8:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00189cd:	eb 0c                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189cf:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00189d4:	eb 05                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d6:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00189db:	5b                   	pop    ebx
c00189dc:	5e                   	pop    esi
c00189dd:	5f                   	pop    edi
c00189de:	5d                   	pop    ebp
c00189df:	c3                   	ret    

c00189e0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189e8:	80 f9 04             	cmp    cl,0x4
c00189eb:	75 6b                	jne    c0018a58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189ed:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00189f2:	80 fa 01             	cmp    dl,0x1
c00189f5:	0f 86 92 02 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fb:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a00:	80 fa 02             	cmp    dl,0x2
c0018a03:	0f 84 84 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a09:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a0e:	80 fa 03             	cmp    dl,0x3
c0018a11:	0f 84 76 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a17:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a1c:	80 fa 04             	cmp    dl,0x4
c0018a1f:	0f 84 68 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a2a:	80 fa 05             	cmp    dl,0x5
c0018a2d:	0f 84 5a 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a33:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a38:	80 fa 07             	cmp    dl,0x7
c0018a3b:	0f 84 4c 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a41:	83 ea 08             	sub    edx,0x8
c0018a44:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018a49:	80 fa 01             	cmp    dl,0x1
c0018a4c:	0f 87 3b 02 00 00    	ja     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a52:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a57:	c3                   	ret    
c0018a58:	80 f9 05             	cmp    cl,0x5
c0018a5b:	75 45                	jne    c0018aa2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a5d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a60:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a65:	80 f9 02             	cmp    cl,0x2
c0018a68:	0f 86 1f 02 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6e:	80 fa 04             	cmp    dl,0x4
c0018a71:	0f 84 f3 01 00 00    	je     c0018c6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a77:	80 fa 07             	cmp    dl,0x7
c0018a7a:	0f 84 0d 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a80:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a85:	80 fa 08             	cmp    dl,0x8
c0018a88:	0f 84 ff 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8e:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018a93:	80 fa 09             	cmp    dl,0x9
c0018a96:	0f 85 f1 01 00 00    	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018aa1:	c3                   	ret    
c0018aa2:	80 f9 06             	cmp    cl,0x6
c0018aa5:	0f 85 85 01 00 00    	jne    c0018c30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018aab:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018ab0:	80 fa 01             	cmp    dl,0x1
c0018ab3:	0f 84 d4 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab9:	8d 42 fb             	lea    eax,[edx-0x5]
c0018abc:	3c 01                	cmp    al,0x1
c0018abe:	0f 86 ac 01 00 00    	jbe    c0018c70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ac4:	80 fa 03             	cmp    dl,0x3
c0018ac7:	0f 84 a3 01 00 00    	je     c0018c70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018acd:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ad0:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018ad5:	80 f9 01             	cmp    cl,0x1
c0018ad8:	0f 86 af 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ade:	80 fa 09             	cmp    dl,0x9
c0018ae1:	0f 84 8f 01 00 00    	je     c0018c76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ae7:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018aea:	80 f9 01             	cmp    cl,0x1
c0018aed:	0f 86 9a 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af3:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018af8:	80 fa 0d             	cmp    dl,0xd
c0018afb:	0f 84 8c 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b01:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b06:	80 fa 0e             	cmp    dl,0xe
c0018b09:	0f 84 7e 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0f:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b14:	80 fa 0f             	cmp    dl,0xf
c0018b17:	0f 84 70 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1d:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b22:	80 fa 15             	cmp    dl,0x15
c0018b25:	0f 84 62 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b2e:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b33:	80 f9 01             	cmp    cl,0x1
c0018b36:	0f 86 51 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3c:	80 fa 1a             	cmp    dl,0x1a
c0018b3f:	0f 84 37 01 00 00    	je     c0018c7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b45:	80 fa 1c             	cmp    dl,0x1c
c0018b48:	0f 84 34 01 00 00    	je     c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b4e:	80 fa 1d             	cmp    dl,0x1d
c0018b51:	0f 84 36 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b57:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b5c:	80 fa 25             	cmp    dl,0x25
c0018b5f:	0f 84 28 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b65:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b68:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018b6d:	80 f9 01             	cmp    cl,0x1
c0018b70:	0f 86 17 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b76:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b7b:	80 fa 2a             	cmp    dl,0x2a
c0018b7e:	0f 84 09 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b84:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b89:	80 fa 2c             	cmp    dl,0x2c
c0018b8c:	0f 84 fb 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b92:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b97:	80 fa 2d             	cmp    dl,0x2d
c0018b9a:	0f 84 ed 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba0:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018ba5:	80 fa 2e             	cmp    dl,0x2e
c0018ba8:	0f 84 df 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bae:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018bb3:	80 fa 2f             	cmp    dl,0x2f
c0018bb6:	0f 84 d1 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbc:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bbf:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bc4:	80 f9 01             	cmp    cl,0x1
c0018bc7:	0f 86 c0 00 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcd:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018bd2:	80 fa 37             	cmp    dl,0x37
c0018bd5:	0f 84 b2 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdb:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018be0:	80 fa 3a             	cmp    dl,0x3a
c0018be3:	0f 84 a4 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be9:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018bee:	80 fa 3c             	cmp    dl,0x3c
c0018bf1:	0f 84 96 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf7:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018bfc:	80 fa 3d             	cmp    dl,0x3d
c0018bff:	0f 84 88 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c05:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c0a:	80 fa 3e             	cmp    dl,0x3e
c0018c0d:	74 7e                	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c12:	3c 01                	cmp    al,0x1
c0018c14:	76 72                	jbe    c0018c88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c16:	80 fa 3f             	cmp    dl,0x3f
c0018c19:	74 6d                	je     c0018c88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c1b:	80 fa 4a             	cmp    dl,0x4a
c0018c1e:	74 0a                	je     c0018c2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c20:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018c25:	80 fa 4d             	cmp    dl,0x4d
c0018c28:	75 63                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2a:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018c2f:	c3                   	ret    
c0018c30:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018c35:	80 f9 0b             	cmp    cl,0xb
c0018c38:	75 0a                	jne    c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c3a:	fe ca                	dec    dl
c0018c3c:	75 4f                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c3e:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018c43:	c3                   	ret    
c0018c44:	80 f9 0f             	cmp    cl,0xf
c0018c47:	75 44                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c49:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018c4e:	80 fa 02             	cmp    dl,0x2
c0018c51:	76 3a                	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c53:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c56:	3c 01                	cmp    al,0x1
c0018c58:	76 0a                	jbe    c0018c64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c5a:	b8 2e ba 02 c0       	mov    eax,0xc002ba2e
c0018c5f:	80 fa 06             	cmp    dl,0x6
c0018c62:	75 29                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c64:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c69:	c3                   	ret    
c0018c6a:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018c6f:	c3                   	ret    
c0018c70:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018c75:	c3                   	ret    
c0018c76:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018c7b:	c3                   	ret    
c0018c7c:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018c81:	c3                   	ret    
c0018c82:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018c87:	c3                   	ret    
c0018c88:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018c8d:	c3                   	ret    

c0018c8e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c8e:	60                   	pusha  
c0018c8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c9b:	9c                   	pushf  
c0018c9c:	fa                   	cli    
c0018c9d:	0f 09                	wbinvd 
c0018c9f:	0f 30                	wrmsr  
c0018ca1:	9d                   	popf   
c0018ca2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ca6:	89 02                	mov    DWORD PTR [edx],eax
c0018ca8:	61                   	popa   
c0018ca9:	c3                   	ret    

c0018caa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018caa:	60                   	pusha  
c0018cab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018caf:	9c                   	pushf  
c0018cb0:	fa                   	cli    
c0018cb1:	0f 09                	wbinvd 
c0018cb3:	31 c0                	xor    eax,eax
c0018cb5:	31 d2                	xor    edx,edx
c0018cb7:	0f 32                	rdmsr  
c0018cb9:	9d                   	popf   
c0018cba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cbe:	89 02                	mov    DWORD PTR [edx],eax
c0018cc0:	61                   	popa   
c0018cc1:	c3                   	ret    

c0018cc2 <CPU::AMD_K6_writeback(int, int, int)>:
c0018cc2:	56                   	push   esi
c0018cc3:	53                   	push   ebx
c0018cc4:	83 ec 10             	sub    esp,0x10
c0018cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ccb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cd0:	75 5d                	jne    c0018d2f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cd2:	83 f8 08             	cmp    eax,0x8
c0018cd5:	75 09                	jne    c0018ce0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cd7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cdc:	7e 13                	jle    c0018cf1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cde:	eb 30                	jmp    c0018d10 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ce0:	83 f8 06             	cmp    eax,0x6
c0018ce3:	7c 4a                	jl     c0018d2f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ce5:	83 f8 07             	cmp    eax,0x7
c0018ce8:	7e 07                	jle    c0018cf1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cea:	83 f8 09             	cmp    eax,0x9
c0018ced:	74 21                	je     c0018d10 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cef:	eb 3e                	jmp    c0018d2f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cf1:	89 e6                	mov    esi,esp
c0018cf3:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0018cf9:	56                   	push   esi
c0018cfa:	c1 eb 15             	shr    ebx,0x15
c0018cfd:	68 82 00 00 c0       	push   0xc0000082
c0018d02:	83 e3 7e             	and    ebx,0x7e
c0018d05:	e8 a0 ff ff ff       	call   c0018caa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d0a:	56                   	push   esi
c0018d0b:	6a 00                	push   0x0
c0018d0d:	53                   	push   ebx
c0018d0e:	eb 12                	jmp    c0018d22 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d10:	89 e3                	mov    ebx,esp
c0018d12:	53                   	push   ebx
c0018d13:	68 82 00 00 c0       	push   0xc0000082
c0018d18:	e8 8d ff ff ff       	call   c0018caa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d1d:	53                   	push   ebx
c0018d1e:	6a 00                	push   0x0
c0018d20:	6a 00                	push   0x0
c0018d22:	68 82 00 00 c0       	push   0xc0000082
c0018d27:	e8 62 ff ff ff       	call   c0018c8e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d2c:	83 c4 18             	add    esp,0x18
c0018d2f:	83 c4 10             	add    esp,0x10
c0018d32:	5b                   	pop    ebx
c0018d33:	5e                   	pop    esi
c0018d34:	c3                   	ret    
c0018d35:	90                   	nop

c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d36:	55                   	push   ebp
c0018d37:	57                   	push   edi
c0018d38:	56                   	push   esi
c0018d39:	53                   	push   ebx
c0018d3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d3e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d46:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d4a:	39 05 40 da 02 c0    	cmp    DWORD PTR ds:0xc002da40,eax
c0018d50:	75 23                	jne    c0018d75 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d52:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c0018d57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d5b:	89 06                	mov    DWORD PTR [esi],eax
c0018d5d:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c0018d62:	89 07                	mov    DWORD PTR [edi],eax
c0018d64:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c0018d69:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d6c:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c0018d71:	89 02                	mov    DWORD PTR [edx],eax
c0018d73:	eb 3f                	jmp    c0018db4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d75:	31 c9                	xor    ecx,ecx
c0018d77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d7b:	0f a2                	cpuid  
c0018d7d:	89 06                	mov    DWORD PTR [esi],eax
c0018d7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d85:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d88:	89 10                	mov    DWORD PTR [eax],edx
c0018d8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d8e:	a3 40 da 02 c0       	mov    ds:0xc002da40,eax
c0018d93:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d95:	a3 6c 10 03 c0       	mov    ds:0xc003106c,eax
c0018d9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d9c:	a3 68 10 03 c0       	mov    ds:0xc0031068,eax
c0018da1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018da4:	a3 64 10 03 c0       	mov    ds:0xc0031064,eax
c0018da9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0018daf:	a3 60 10 03 c0       	mov    ds:0xc0031060,eax
c0018db4:	5b                   	pop    ebx
c0018db5:	5e                   	pop    esi
c0018db6:	5f                   	pop    edi
c0018db7:	5d                   	pop    ebp
c0018db8:	c3                   	ret    
c0018db9:	90                   	nop

c0018dba <CPU::cpuidCheckEDX(unsigned int)>:
c0018dba:	83 ec 10             	sub    esp,0x10
c0018dbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc1:	50                   	push   eax
c0018dc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc6:	50                   	push   eax
c0018dc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcb:	50                   	push   eax
c0018dcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd0:	50                   	push   eax
c0018dd1:	6a 01                	push   0x1
c0018dd3:	e8 5e ff ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ddc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018de0:	0f 95 c0             	setne  al
c0018de3:	83 c4 24             	add    esp,0x24
c0018de6:	c3                   	ret    
c0018de7:	90                   	nop

c0018de8 <CPU::cpuidCheckECX(unsigned int)>:
c0018de8:	83 ec 10             	sub    esp,0x10
c0018deb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018def:	50                   	push   eax
c0018df0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df4:	50                   	push   eax
c0018df5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df9:	50                   	push   eax
c0018dfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfe:	50                   	push   eax
c0018dff:	6a 01                	push   0x1
c0018e01:	e8 30 ff ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e0e:	0f 95 c0             	setne  al
c0018e11:	83 c4 24             	add    esp,0x24
c0018e14:	c3                   	ret    
c0018e15:	90                   	nop

c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e16:	83 ec 10             	sub    esp,0x10
c0018e19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1d:	50                   	push   eax
c0018e1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e22:	50                   	push   eax
c0018e23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e27:	50                   	push   eax
c0018e28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2c:	50                   	push   eax
c0018e2d:	6a 07                	push   0x7
c0018e2f:	e8 02 ff ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e38:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e3c:	0f 95 c0             	setne  al
c0018e3f:	83 c4 24             	add    esp,0x24
c0018e42:	c3                   	ret    
c0018e43:	90                   	nop

c0018e44 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e44:	83 ec 10             	sub    esp,0x10
c0018e47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4b:	50                   	push   eax
c0018e4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e50:	50                   	push   eax
c0018e51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e55:	50                   	push   eax
c0018e56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e5a:	50                   	push   eax
c0018e5b:	6a 07                	push   0x7
c0018e5d:	e8 d4 fe ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e66:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e6a:	0f 95 c0             	setne  al
c0018e6d:	83 c4 24             	add    esp,0x24
c0018e70:	c3                   	ret    
c0018e71:	90                   	nop

c0018e72 <CPU::CPU()>:
c0018e72:	83 ec 0c             	sub    esp,0xc
c0018e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e79:	83 ec 08             	sub    esp,0x8
c0018e7c:	68 2e ba 02 c0       	push   0xc002ba2e
c0018e81:	50                   	push   eax
c0018e82:	e8 79 b7 ff ff       	call   c0014600 <Device::Device(char const*)>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	ba 08 bb 02 c0       	mov    edx,0xc002bb08
c0018e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e93:	89 10                	mov    DWORD PTR [eax],edx
c0018e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e99:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea7:	05 78 01 00 00       	add    eax,0x178
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	50                   	push   eax
c0018eb0:	e8 a3 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018eb5:	83 c4 10             	add    esp,0x10
c0018eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebc:	05 7c 09 00 00       	add    eax,0x97c
c0018ec1:	83 ec 0c             	sub    esp,0xc
c0018ec4:	50                   	push   eax
c0018ec5:	e8 f0 63 ff ff       	call   c000f2ba <IDT::IDT()>
c0018eca:	83 c4 10             	add    esp,0x10
c0018ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed1:	05 7c 11 00 00       	add    eax,0x117c
c0018ed6:	83 ec 0c             	sub    esp,0xc
c0018ed9:	50                   	push   eax
c0018eda:	e8 35 86 ff ff       	call   c0011514 <TSS::TSS()>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018efb:	90                   	nop
c0018efc:	83 c4 0c             	add    esp,0xc
c0018eff:	c3                   	ret    

c0018f00 <CPU::displayFeatures()>:
c0018f00:	53                   	push   ebx
c0018f01:	83 ec 10             	sub    esp,0x10
c0018f04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f08:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f0e:	68 3c b7 02 c0       	push   0xc002b73c
c0018f13:	e8 d2 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f18:	59                   	pop    ecx
c0018f19:	58                   	pop    eax
c0018f1a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f20:	50                   	push   eax
c0018f21:	68 4d b7 02 c0       	push   0xc002b74d
c0018f26:	e8 bf a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f2b:	58                   	pop    eax
c0018f2c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f32:	5a                   	pop    edx
c0018f33:	c1 e8 0e             	shr    eax,0xe
c0018f36:	0f b6 c0             	movzx  eax,al
c0018f39:	50                   	push   eax
c0018f3a:	68 5e b7 02 c0       	push   0xc002b75e
c0018f3f:	e8 a6 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f44:	59                   	pop    ecx
c0018f45:	58                   	pop    eax
c0018f46:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f4c:	66 c1 e8 06          	shr    ax,0x6
c0018f50:	0f b6 c0             	movzx  eax,al
c0018f53:	50                   	push   eax
c0018f54:	68 6f b7 02 c0       	push   0xc002b76f
c0018f59:	e8 8c a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f5e:	c7 04 24 1c bc 02 c0 	mov    DWORD PTR [esp],0xc002bc1c
c0018f65:	e8 80 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018f72:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f79:	74 05                	je     c0018f80 <CPU::displayFeatures()+0x80>
c0018f7b:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018f80:	52                   	push   edx
c0018f81:	52                   	push   edx
c0018f82:	50                   	push   eax
c0018f83:	68 80 b7 02 c0       	push   0xc002b780
c0018f88:	e8 5d a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018f95:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f9c:	78 05                	js     c0018fa3 <CPU::displayFeatures()+0xa3>
c0018f9e:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018fa3:	51                   	push   ecx
c0018fa4:	51                   	push   ecx
c0018fa5:	50                   	push   eax
c0018fa6:	68 97 b7 02 c0       	push   0xc002b797
c0018fab:	e8 3a a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018fb0:	83 c4 10             	add    esp,0x10
c0018fb3:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018fb8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fbf:	75 05                	jne    c0018fc6 <CPU::displayFeatures()+0xc6>
c0018fc1:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018fc6:	52                   	push   edx
c0018fc7:	52                   	push   edx
c0018fc8:	50                   	push   eax
c0018fc9:	68 ae b7 02 c0       	push   0xc002b7ae
c0018fce:	e8 17 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018fdb:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fe2:	75 05                	jne    c0018fe9 <CPU::displayFeatures()+0xe9>
c0018fe4:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018fe9:	51                   	push   ecx
c0018fea:	51                   	push   ecx
c0018feb:	50                   	push   eax
c0018fec:	68 c5 b7 02 c0       	push   0xc002b7c5
c0018ff1:	e8 f4 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018ffe:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019005:	75 05                	jne    c001900c <CPU::displayFeatures()+0x10c>
c0019007:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c001900c:	52                   	push   edx
c001900d:	52                   	push   edx
c001900e:	50                   	push   eax
c001900f:	68 dc b7 02 c0       	push   0xc002b7dc
c0019014:	e8 d1 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019021:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019028:	75 05                	jne    c001902f <CPU::displayFeatures()+0x12f>
c001902a:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c001902f:	51                   	push   ecx
c0019030:	51                   	push   ecx
c0019031:	50                   	push   eax
c0019032:	68 f3 b7 02 c0       	push   0xc002b7f3
c0019037:	e8 ae 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019044:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001904b:	75 05                	jne    c0019052 <CPU::displayFeatures()+0x152>
c001904d:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019052:	52                   	push   edx
c0019053:	52                   	push   edx
c0019054:	50                   	push   eax
c0019055:	68 0a b8 02 c0       	push   0xc002b80a
c001905a:	e8 8b 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001905f:	83 c4 10             	add    esp,0x10
c0019062:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019067:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001906e:	75 05                	jne    c0019075 <CPU::displayFeatures()+0x175>
c0019070:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019075:	51                   	push   ecx
c0019076:	51                   	push   ecx
c0019077:	50                   	push   eax
c0019078:	68 21 b8 02 c0       	push   0xc002b821
c001907d:	e8 68 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c001908a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019091:	75 05                	jne    c0019098 <CPU::displayFeatures()+0x198>
c0019093:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019098:	52                   	push   edx
c0019099:	52                   	push   edx
c001909a:	50                   	push   eax
c001909b:	68 38 b8 02 c0       	push   0xc002b838
c00190a0:	e8 45 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00190a5:	83 c4 10             	add    esp,0x10
c00190a8:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c00190ad:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190b4:	75 05                	jne    c00190bb <CPU::displayFeatures()+0x1bb>
c00190b6:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c00190bb:	51                   	push   ecx
c00190bc:	51                   	push   ecx
c00190bd:	50                   	push   eax
c00190be:	68 4f b8 02 c0       	push   0xc002b84f
c00190c3:	e8 22 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00190c8:	83 c4 10             	add    esp,0x10
c00190cb:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c00190d0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190d7:	75 05                	jne    c00190de <CPU::displayFeatures()+0x1de>
c00190d9:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c00190de:	52                   	push   edx
c00190df:	52                   	push   edx
c00190e0:	50                   	push   eax
c00190e1:	68 66 b8 02 c0       	push   0xc002b866
c00190e6:	e8 ff 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00190eb:	83 c4 10             	add    esp,0x10
c00190ee:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c00190f3:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190fa:	75 05                	jne    c0019101 <CPU::displayFeatures()+0x201>
c00190fc:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019101:	51                   	push   ecx
c0019102:	51                   	push   ecx
c0019103:	50                   	push   eax
c0019104:	68 7d b8 02 c0       	push   0xc002b87d
c0019109:	e8 dc 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019116:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001911d:	75 05                	jne    c0019124 <CPU::displayFeatures()+0x224>
c001911f:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019124:	52                   	push   edx
c0019125:	52                   	push   edx
c0019126:	50                   	push   eax
c0019127:	68 94 b8 02 c0       	push   0xc002b894
c001912c:	e8 b9 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019139:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019140:	78 05                	js     c0019147 <CPU::displayFeatures()+0x247>
c0019142:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019147:	51                   	push   ecx
c0019148:	51                   	push   ecx
c0019149:	50                   	push   eax
c001914a:	68 ab b8 02 c0       	push   0xc002b8ab
c001914f:	e8 96 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019154:	83 c4 10             	add    esp,0x10
c0019157:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c001915c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019163:	75 05                	jne    c001916a <CPU::displayFeatures()+0x26a>
c0019165:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c001916a:	52                   	push   edx
c001916b:	52                   	push   edx
c001916c:	50                   	push   eax
c001916d:	68 c2 b8 02 c0       	push   0xc002b8c2
c0019172:	e8 73 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019177:	83 c4 18             	add    esp,0x18
c001917a:	5b                   	pop    ebx
c001917b:	c3                   	ret    

c001917c <CPU::detectFeatures()>:
c001917c:	55                   	push   ebp
c001917d:	57                   	push   edi
c001917e:	56                   	push   esi
c001917f:	53                   	push   ebx
c0019180:	83 ec 50             	sub    esp,0x50
c0019183:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019187:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019191:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019198:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001919e:	6a 0d                	push   0xd
c00191a0:	6a 00                	push   0x0
c00191a2:	57                   	push   edi
c00191a3:	e8 d0 75 fe ff       	call   c0000778 <memset>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00191b0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191b7:	0f 84 20 09 00 00    	je     c0019add <CPU::detectFeatures()+0x961>
c00191bd:	83 ec 0c             	sub    esp,0xc
c00191c0:	6a 10                	push   0x10
c00191c2:	e8 f3 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c00191c7:	83 e0 01             	and    eax,0x1
c00191ca:	8d 14 00             	lea    edx,[eax+eax*1]
c00191cd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d3:	83 e0 fd             	and    eax,0xfffffffd
c00191d6:	09 d0                	or     eax,edx
c00191d8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191de:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191e5:	e8 d0 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c00191ea:	83 e0 01             	and    eax,0x1
c00191ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191f4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191fa:	83 e0 fb             	and    eax,0xfffffffb
c00191fd:	09 d0                	or     eax,edx
c00191ff:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019205:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001920c:	e8 a9 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c0019211:	83 e0 01             	and    eax,0x1
c0019214:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001921b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019221:	83 e0 f7             	and    eax,0xfffffff7
c0019224:	09 d0                	or     eax,edx
c0019226:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001922c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019233:	e8 82 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c0019238:	83 e0 01             	and    eax,0x1
c001923b:	c1 e0 04             	shl    eax,0x4
c001923e:	88 c2                	mov    dl,al
c0019240:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019246:	83 e0 ef             	and    eax,0xffffffef
c0019249:	09 d0                	or     eax,edx
c001924b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019251:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019258:	e8 5d fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c001925d:	83 e0 01             	and    eax,0x1
c0019260:	c1 e0 05             	shl    eax,0x5
c0019263:	88 c2                	mov    dl,al
c0019265:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001926b:	83 e0 df             	and    eax,0xffffffdf
c001926e:	09 d0                	or     eax,edx
c0019270:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019276:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001927d:	e8 38 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c0019282:	83 e0 01             	and    eax,0x1
c0019285:	8d 14 00             	lea    edx,[eax+eax*1]
c0019288:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001928e:	83 e0 fd             	and    eax,0xfffffffd
c0019291:	09 d0                	or     eax,edx
c0019293:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019299:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192a0:	e8 15 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c00192a5:	83 e0 01             	and    eax,0x1
c00192a8:	c1 e0 06             	shl    eax,0x6
c00192ab:	88 c2                	mov    dl,al
c00192ad:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192b3:	83 e0 bf             	and    eax,0xffffffbf
c00192b6:	09 d0                	or     eax,edx
c00192b8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192be:	58                   	pop    eax
c00192bf:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192c3:	56                   	push   esi
c00192c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192c8:	55                   	push   ebp
c00192c9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192cd:	50                   	push   eax
c00192ce:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192d2:	52                   	push   edx
c00192d3:	6a 00                	push   0x0
c00192d5:	e8 5c fa ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192da:	83 c4 1c             	add    esp,0x1c
c00192dd:	6a 04                	push   0x4
c00192df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192e3:	50                   	push   eax
c00192e4:	57                   	push   edi
c00192e5:	e8 5a 74 fe ff       	call   c0000744 <memcpy>
c00192ea:	83 c4 0c             	add    esp,0xc
c00192ed:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192f3:	6a 04                	push   0x4
c00192f5:	56                   	push   esi
c00192f6:	50                   	push   eax
c00192f7:	e8 48 74 fe ff       	call   c0000744 <memcpy>
c00192fc:	83 c4 0c             	add    esp,0xc
c00192ff:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019305:	6a 04                	push   0x4
c0019307:	55                   	push   ebp
c0019308:	50                   	push   eax
c0019309:	e8 36 74 fe ff       	call   c0000744 <memcpy>
c001930e:	58                   	pop    eax
c001930f:	5a                   	pop    edx
c0019310:	68 d9 b8 02 c0       	push   0xc002b8d9
c0019315:	57                   	push   edi
c0019316:	e8 a5 75 fe ff       	call   c00008c0 <strcmp>
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	85 c0                	test   eax,eax
c0019320:	75 0f                	jne    c0019331 <CPU::detectFeatures()+0x1b5>
c0019322:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001932c:	e9 22 02 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c0019331:	50                   	push   eax
c0019332:	50                   	push   eax
c0019333:	68 e6 b8 02 c0       	push   0xc002b8e6
c0019338:	57                   	push   edi
c0019339:	e8 82 75 fe ff       	call   c00008c0 <strcmp>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	85 c0                	test   eax,eax
c0019343:	74 dd                	je     c0019322 <CPU::detectFeatures()+0x1a6>
c0019345:	51                   	push   ecx
c0019346:	51                   	push   ecx
c0019347:	68 f3 b8 02 c0       	push   0xc002b8f3
c001934c:	57                   	push   edi
c001934d:	e8 6e 75 fe ff       	call   c00008c0 <strcmp>
c0019352:	83 c4 10             	add    esp,0x10
c0019355:	85 c0                	test   eax,eax
c0019357:	74 2a                	je     c0019383 <CPU::detectFeatures()+0x207>
c0019359:	52                   	push   edx
c001935a:	52                   	push   edx
c001935b:	68 00 b9 02 c0       	push   0xc002b900
c0019360:	57                   	push   edi
c0019361:	e8 5a 75 fe ff       	call   c00008c0 <strcmp>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	85 c0                	test   eax,eax
c001936b:	74 16                	je     c0019383 <CPU::detectFeatures()+0x207>
c001936d:	50                   	push   eax
c001936e:	50                   	push   eax
c001936f:	68 0d b9 02 c0       	push   0xc002b90d
c0019374:	57                   	push   edi
c0019375:	e8 46 75 fe ff       	call   c00008c0 <strcmp>
c001937a:	83 c4 10             	add    esp,0x10
c001937d:	85 c0                	test   eax,eax
c001937f:	74 48                	je     c00193c9 <CPU::detectFeatures()+0x24d>
c0019381:	eb 0f                	jmp    c0019392 <CPU::detectFeatures()+0x216>
c0019383:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001938d:	e9 c1 01 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c0019392:	50                   	push   eax
c0019393:	50                   	push   eax
c0019394:	68 1a b9 02 c0       	push   0xc002b91a
c0019399:	57                   	push   edi
c001939a:	e8 21 75 fe ff       	call   c00008c0 <strcmp>
c001939f:	83 c4 10             	add    esp,0x10
c00193a2:	85 c0                	test   eax,eax
c00193a4:	74 23                	je     c00193c9 <CPU::detectFeatures()+0x24d>
c00193a6:	50                   	push   eax
c00193a7:	50                   	push   eax
c00193a8:	68 27 b9 02 c0       	push   0xc002b927
c00193ad:	57                   	push   edi
c00193ae:	e8 0d 75 fe ff       	call   c00008c0 <strcmp>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	85 c0                	test   eax,eax
c00193b8:	75 1e                	jne    c00193d8 <CPU::detectFeatures()+0x25c>
c00193ba:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193c4:	e9 8a 01 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c00193c9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193d3:	e9 7b 01 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c00193d8:	50                   	push   eax
c00193d9:	50                   	push   eax
c00193da:	68 34 b9 02 c0       	push   0xc002b934
c00193df:	57                   	push   edi
c00193e0:	e8 db 74 fe ff       	call   c00008c0 <strcmp>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	85 c0                	test   eax,eax
c00193ea:	75 0f                	jne    c00193fb <CPU::detectFeatures()+0x27f>
c00193ec:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193f6:	e9 58 01 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c00193fb:	50                   	push   eax
c00193fc:	50                   	push   eax
c00193fd:	68 f3 b8 02 c0       	push   0xc002b8f3
c0019402:	57                   	push   edi
c0019403:	e8 b8 74 fe ff       	call   c00008c0 <strcmp>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	85 c0                	test   eax,eax
c001940d:	75 0f                	jne    c001941e <CPU::detectFeatures()+0x2a2>
c001940f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019419:	e9 35 01 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c001941e:	50                   	push   eax
c001941f:	50                   	push   eax
c0019420:	68 41 b9 02 c0       	push   0xc002b941
c0019425:	57                   	push   edi
c0019426:	e8 95 74 fe ff       	call   c00008c0 <strcmp>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	85 c0                	test   eax,eax
c0019430:	75 0f                	jne    c0019441 <CPU::detectFeatures()+0x2c5>
c0019432:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001943c:	e9 12 01 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c0019441:	51                   	push   ecx
c0019442:	51                   	push   ecx
c0019443:	68 4e b9 02 c0       	push   0xc002b94e
c0019448:	57                   	push   edi
c0019449:	e8 72 74 fe ff       	call   c00008c0 <strcmp>
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	85 c0                	test   eax,eax
c0019453:	75 0f                	jne    c0019464 <CPU::detectFeatures()+0x2e8>
c0019455:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001945f:	e9 ef 00 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c0019464:	52                   	push   edx
c0019465:	52                   	push   edx
c0019466:	68 5b b9 02 c0       	push   0xc002b95b
c001946b:	57                   	push   edi
c001946c:	e8 4f 74 fe ff       	call   c00008c0 <strcmp>
c0019471:	83 c4 10             	add    esp,0x10
c0019474:	85 c0                	test   eax,eax
c0019476:	75 0f                	jne    c0019487 <CPU::detectFeatures()+0x30b>
c0019478:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019482:	e9 cc 00 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c0019487:	50                   	push   eax
c0019488:	50                   	push   eax
c0019489:	68 68 b9 02 c0       	push   0xc002b968
c001948e:	57                   	push   edi
c001948f:	e8 2c 74 fe ff       	call   c00008c0 <strcmp>
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	85 c0                	test   eax,eax
c0019499:	75 0f                	jne    c00194aa <CPU::detectFeatures()+0x32e>
c001949b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00194a5:	e9 a9 00 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c00194aa:	50                   	push   eax
c00194ab:	50                   	push   eax
c00194ac:	68 75 b9 02 c0       	push   0xc002b975
c00194b1:	57                   	push   edi
c00194b2:	e8 09 74 fe ff       	call   c00008c0 <strcmp>
c00194b7:	83 c4 10             	add    esp,0x10
c00194ba:	85 c0                	test   eax,eax
c00194bc:	75 0f                	jne    c00194cd <CPU::detectFeatures()+0x351>
c00194be:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194c8:	e9 86 00 00 00       	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c00194cd:	50                   	push   eax
c00194ce:	50                   	push   eax
c00194cf:	68 82 b9 02 c0       	push   0xc002b982
c00194d4:	57                   	push   edi
c00194d5:	e8 e6 73 fe ff       	call   c00008c0 <strcmp>
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	85 c0                	test   eax,eax
c00194df:	75 0c                	jne    c00194ed <CPU::detectFeatures()+0x371>
c00194e1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194eb:	eb 66                	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c00194ed:	50                   	push   eax
c00194ee:	50                   	push   eax
c00194ef:	68 8f b9 02 c0       	push   0xc002b98f
c00194f4:	57                   	push   edi
c00194f5:	e8 c6 73 fe ff       	call   c00008c0 <strcmp>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	85 c0                	test   eax,eax
c00194ff:	75 0c                	jne    c001950d <CPU::detectFeatures()+0x391>
c0019501:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001950b:	eb 46                	jmp    c0019553 <CPU::detectFeatures()+0x3d7>
c001950d:	50                   	push   eax
c001950e:	50                   	push   eax
c001950f:	68 9c b9 02 c0       	push   0xc002b99c
c0019514:	57                   	push   edi
c0019515:	e8 a6 73 fe ff       	call   c00008c0 <strcmp>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	85 c0                	test   eax,eax
c001951f:	74 e0                	je     c0019501 <CPU::detectFeatures()+0x385>
c0019521:	50                   	push   eax
c0019522:	50                   	push   eax
c0019523:	68 a9 b9 02 c0       	push   0xc002b9a9
c0019528:	57                   	push   edi
c0019529:	e8 92 73 fe ff       	call   c00008c0 <strcmp>
c001952e:	83 c4 10             	add    esp,0x10
c0019531:	85 c0                	test   eax,eax
c0019533:	74 cc                	je     c0019501 <CPU::detectFeatures()+0x385>
c0019535:	51                   	push   ecx
c0019536:	51                   	push   ecx
c0019537:	68 b6 b9 02 c0       	push   0xc002b9b6
c001953c:	57                   	push   edi
c001953d:	e8 7e 73 fe ff       	call   c00008c0 <strcmp>
c0019542:	83 c4 10             	add    esp,0x10
c0019545:	85 c0                	test   eax,eax
c0019547:	74 b8                	je     c0019501 <CPU::detectFeatures()+0x385>
c0019549:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019553:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019558:	0f 86 be 00 00 00    	jbe    c001961c <CPU::detectFeatures()+0x4a0>
c001955e:	83 ec 0c             	sub    esp,0xc
c0019561:	68 80 00 00 00       	push   0x80
c0019566:	e8 ab f8 ff ff       	call   c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001956b:	83 e0 01             	and    eax,0x1
c001956e:	c1 e0 06             	shl    eax,0x6
c0019571:	88 c2                	mov    dl,al
c0019573:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019579:	83 e0 bf             	and    eax,0xffffffbf
c001957c:	09 d0                	or     eax,edx
c001957e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019584:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001958b:	e8 86 f8 ff ff       	call   c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019590:	83 e0 01             	and    eax,0x1
c0019593:	c1 e0 04             	shl    eax,0x4
c0019596:	88 c2                	mov    dl,al
c0019598:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001959e:	83 e0 ef             	and    eax,0xffffffef
c00195a1:	09 d0                	or     eax,edx
c00195a3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195a9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195b0:	e8 61 f8 ff ff       	call   c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195b5:	c1 e0 07             	shl    eax,0x7
c00195b8:	88 c2                	mov    dl,al
c00195ba:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195c0:	83 e0 7f             	and    eax,0x7f
c00195c3:	09 d0                	or     eax,edx
c00195c5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195cb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195d2:	e8 6d f8 ff ff       	call   c0018e44 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195d7:	83 e0 01             	and    eax,0x1
c00195da:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195e1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195e7:	83 e0 f7             	and    eax,0xfffffff7
c00195ea:	09 d0                	or     eax,edx
c00195ec:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195f2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195f9:	e8 46 f8 ff ff       	call   c0018e44 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195fe:	83 c4 10             	add    esp,0x10
c0019601:	83 e0 01             	and    eax,0x1
c0019604:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001960b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019611:	83 e0 fb             	and    eax,0xfffffffb
c0019614:	09 d0                	or     eax,edx
c0019616:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	56                   	push   esi
c0019620:	55                   	push   ebp
c0019621:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019625:	57                   	push   edi
c0019626:	8d 44 24 28          	lea    eax,[esp+0x28]
c001962a:	50                   	push   eax
c001962b:	6a 01                	push   0x1
c001962d:	e8 04 f7 ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019632:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019636:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001963c:	88 ca                	mov    dl,cl
c001963e:	83 e0 f0             	and    eax,0xfffffff0
c0019641:	83 e2 0f             	and    edx,0xf
c0019644:	09 d0                	or     eax,edx
c0019646:	88 ca                	mov    dl,cl
c0019648:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001964e:	c0 ea 04             	shr    dl,0x4
c0019651:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019655:	0f b6 c2             	movzx  eax,dl
c0019658:	83 c4 20             	add    esp,0x20
c001965b:	c1 e0 06             	shl    eax,0x6
c001965e:	89 c5                	mov    ebp,eax
c0019660:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019666:	66 25 3f c0          	and    ax,0xc03f
c001966a:	09 e8                	or     eax,ebp
c001966c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019673:	89 c8                	mov    eax,ecx
c0019675:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001967b:	c1 e8 08             	shr    eax,0x8
c001967e:	83 e2 3f             	and    edx,0x3f
c0019681:	83 e0 0f             	and    eax,0xf
c0019684:	89 c5                	mov    ebp,eax
c0019686:	c1 e5 06             	shl    ebp,0x6
c0019689:	09 d5                	or     ebp,edx
c001968b:	89 ea                	mov    edx,ebp
c001968d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019693:	88 c2                	mov    dl,al
c0019695:	c0 ea 02             	shr    dl,0x2
c0019698:	89 d5                	mov    ebp,edx
c001969a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00196a0:	83 e2 c0             	and    edx,0xffffffc0
c00196a3:	09 d5                	or     ebp,edx
c00196a5:	89 ea                	mov    edx,ebp
c00196a7:	89 cd                	mov    ebp,ecx
c00196a9:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196af:	c1 ed 0c             	shr    ebp,0xc
c00196b2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00196b8:	83 e5 03             	and    ebp,0x3
c00196bb:	83 e2 cf             	and    edx,0xffffffcf
c00196be:	c1 e5 04             	shl    ebp,0x4
c00196c1:	09 d5                	or     ebp,edx
c00196c3:	3c 06                	cmp    al,0x6
c00196c5:	89 ea                	mov    edx,ebp
c00196c7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196cd:	74 04                	je     c00196d3 <CPU::detectFeatures()+0x557>
c00196cf:	3c 0f                	cmp    al,0xf
c00196d1:	75 5c                	jne    c001972f <CPU::detectFeatures()+0x5b3>
c00196d3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196d7:	89 cd                	mov    ebp,ecx
c00196d9:	c1 ed 10             	shr    ebp,0x10
c00196dc:	c1 e5 04             	shl    ebp,0x4
c00196df:	09 ea                	or     edx,ebp
c00196e1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196e7:	0f b6 d2             	movzx  edx,dl
c00196ea:	66 81 e5 3f c0       	and    bp,0xc03f
c00196ef:	c1 e2 06             	shl    edx,0x6
c00196f2:	09 ea                	or     edx,ebp
c00196f4:	3c 0f                	cmp    al,0xf
c00196f6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196fd:	75 30                	jne    c001972f <CPU::detectFeatures()+0x5b3>
c00196ff:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019705:	c1 e9 14             	shr    ecx,0x14
c0019708:	83 e0 3f             	and    eax,0x3f
c001970b:	83 c1 0f             	add    ecx,0xf
c001970e:	88 ca                	mov    dl,cl
c0019710:	c0 e9 02             	shr    cl,0x2
c0019713:	c1 e2 06             	shl    edx,0x6
c0019716:	09 d0                	or     eax,edx
c0019718:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001971e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019724:	83 e0 c0             	and    eax,0xffffffc0
c0019727:	09 c1                	or     ecx,eax
c0019729:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001972f:	83 ec 0c             	sub    esp,0xc
c0019732:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019739:	56                   	push   esi
c001973a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001973e:	50                   	push   eax
c001973f:	57                   	push   edi
c0019740:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019744:	55                   	push   ebp
c0019745:	68 00 00 00 80       	push   0x80000000
c001974a:	e8 e7 f5 ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001974f:	83 c4 20             	add    esp,0x20
c0019752:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001975a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001975e:	76 1e                	jbe    c001977e <CPU::detectFeatures()+0x602>
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	56                   	push   esi
c0019764:	50                   	push   eax
c0019765:	57                   	push   edi
c0019766:	55                   	push   ebp
c0019767:	68 01 00 00 80       	push   0x80000001
c001976c:	e8 c5 f5 ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019771:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001977b:	83 c4 20             	add    esp,0x20
c001977e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019784:	83 f8 01             	cmp    eax,0x1
c0019787:	75 6f                	jne    c00197f8 <CPU::detectFeatures()+0x67c>
c0019789:	51                   	push   ecx
c001978a:	51                   	push   ecx
c001978b:	68 c2 b9 02 c0       	push   0xc002b9c2
c0019790:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019794:	56                   	push   esi
c0019795:	e8 9a 70 fe ff       	call   c0000834 <strcpy>
c001979a:	5f                   	pop    edi
c001979b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a1:	5d                   	pop    ebp
c00197a2:	66 c1 e8 06          	shr    ax,0x6
c00197a6:	0f b6 c0             	movzx  eax,al
c00197a9:	50                   	push   eax
c00197aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b0:	c1 e8 0e             	shr    eax,0xe
c00197b3:	0f b6 c0             	movzx  eax,al
c00197b6:	50                   	push   eax
c00197b7:	e8 24 f2 ff ff       	call   c00189e0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197bc:	5a                   	pop    edx
c00197bd:	59                   	pop    ecx
c00197be:	50                   	push   eax
c00197bf:	56                   	push   esi
c00197c0:	e8 af 71 fe ff       	call   c0000974 <strcat>
c00197c5:	5f                   	pop    edi
c00197c6:	5d                   	pop    ebp
c00197c7:	56                   	push   esi
c00197c8:	53                   	push   ebx
c00197c9:	e8 24 ae ff ff       	call   c00145f2 <Device::setName(char const*)>
c00197ce:	58                   	pop    eax
c00197cf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197d5:	5a                   	pop    edx
c00197d6:	68 c9 b9 02 c0       	push   0xc002b9c9
c00197db:	50                   	push   eax
c00197dc:	e8 df 70 fe ff       	call   c00008c0 <strcmp>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	85 c0                	test   eax,eax
c00197e6:	0f 85 71 03 00 00    	jne    c0019b5d <CPU::detectFeatures()+0x9e1>
c00197ec:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197f3:	e9 65 03 00 00       	jmp    c0019b5d <CPU::detectFeatures()+0x9e1>
c00197f8:	83 f8 02             	cmp    eax,0x2
c00197fb:	0f 85 b5 00 00 00    	jne    c00198b6 <CPU::detectFeatures()+0x73a>
c0019801:	57                   	push   edi
c0019802:	57                   	push   edi
c0019803:	68 db b9 02 c0       	push   0xc002b9db
c0019808:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001980c:	56                   	push   esi
c001980d:	e8 22 70 fe ff       	call   c0000834 <strcpy>
c0019812:	5d                   	pop    ebp
c0019813:	58                   	pop    eax
c0019814:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001981a:	66 c1 e8 06          	shr    ax,0x6
c001981e:	0f b6 c0             	movzx  eax,al
c0019821:	50                   	push   eax
c0019822:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019828:	c1 e8 0e             	shr    eax,0xe
c001982b:	0f b6 c0             	movzx  eax,al
c001982e:	50                   	push   eax
c001982f:	e8 18 f0 ff ff       	call   c001884c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019834:	5a                   	pop    edx
c0019835:	59                   	pop    ecx
c0019836:	50                   	push   eax
c0019837:	56                   	push   esi
c0019838:	e8 37 71 fe ff       	call   c0000974 <strcat>
c001983d:	5f                   	pop    edi
c001983e:	5d                   	pop    ebp
c001983f:	56                   	push   esi
c0019840:	53                   	push   ebx
c0019841:	e8 ac ad ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019846:	58                   	pop    eax
c0019847:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001984d:	5a                   	pop    edx
c001984e:	68 e0 b9 02 c0       	push   0xc002b9e0
c0019853:	50                   	push   eax
c0019854:	e8 67 70 fe ff       	call   c00008c0 <strcmp>
c0019859:	83 c4 10             	add    esp,0x10
c001985c:	85 c0                	test   eax,eax
c001985e:	75 20                	jne    c0019880 <CPU::detectFeatures()+0x704>
c0019860:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0019866:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001986c:	a8 01                	test   al,0x1
c001986e:	74 10                	je     c0019880 <CPU::detectFeatures()+0x704>
c0019870:	83 e0 fe             	and    eax,0xfffffffe
c0019873:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019879:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019880:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019886:	c1 e8 0e             	shr    eax,0xe
c0019889:	3c 05                	cmp    al,0x5
c001988b:	0f 85 cc 02 00 00    	jne    c0019b5d <CPU::detectFeatures()+0x9e1>
c0019891:	56                   	push   esi
c0019892:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019898:	83 e0 0f             	and    eax,0xf
c001989b:	50                   	push   eax
c001989c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198a2:	66 c1 e8 06          	shr    ax,0x6
c00198a6:	0f b6 c0             	movzx  eax,al
c00198a9:	50                   	push   eax
c00198aa:	6a 05                	push   0x5
c00198ac:	e8 11 f4 ff ff       	call   c0018cc2 <CPU::AMD_K6_writeback(int, int, int)>
c00198b1:	e9 1f 02 00 00       	jmp    c0019ad5 <CPU::detectFeatures()+0x959>
c00198b6:	8d 50 fd             	lea    edx,[eax-0x3]
c00198b9:	83 fa 01             	cmp    edx,0x1
c00198bc:	76 09                	jbe    c00198c7 <CPU::detectFeatures()+0x74b>
c00198be:	83 f8 06             	cmp    eax,0x6
c00198c1:	0f 85 91 01 00 00    	jne    c0019a58 <CPU::detectFeatures()+0x8dc>
c00198c7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198cd:	c1 ea 0e             	shr    edx,0xe
c00198d0:	80 fa 05             	cmp    dl,0x5
c00198d3:	75 7b                	jne    c0019950 <CPU::detectFeatures()+0x7d4>
c00198d5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198db:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198e0:	66 81 fa 00 01       	cmp    dx,0x100
c00198e5:	75 0c                	jne    c00198f3 <CPU::detectFeatures()+0x777>
c00198e7:	51                   	push   ecx
c00198e8:	51                   	push   ecx
c00198e9:	68 e7 b9 02 c0       	push   0xc002b9e7
c00198ee:	e9 dc 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c00198f3:	66 81 fa 00 02       	cmp    dx,0x200
c00198f8:	75 0c                	jne    c0019906 <CPU::detectFeatures()+0x78a>
c00198fa:	52                   	push   edx
c00198fb:	52                   	push   edx
c00198fc:	68 fa b9 02 c0       	push   0xc002b9fa
c0019901:	e9 c9 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019906:	66 81 fa 40 02       	cmp    dx,0x240
c001990b:	75 0c                	jne    c0019919 <CPU::detectFeatures()+0x79d>
c001990d:	50                   	push   eax
c001990e:	50                   	push   eax
c001990f:	68 0c ba 02 c0       	push   0xc002ba0c
c0019914:	e9 b6 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019919:	83 f8 06             	cmp    eax,0x6
c001991c:	75 0c                	jne    c001992a <CPU::detectFeatures()+0x7ae>
c001991e:	50                   	push   eax
c001991f:	50                   	push   eax
c0019920:	68 1e ba 02 c0       	push   0xc002ba1e
c0019925:	e9 a5 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c001992a:	83 f8 04             	cmp    eax,0x4
c001992d:	75 0c                	jne    c001993b <CPU::detectFeatures()+0x7bf>
c001992f:	50                   	push   eax
c0019930:	50                   	push   eax
c0019931:	68 2a ba 02 c0       	push   0xc002ba2a
c0019936:	e9 94 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c001993b:	83 f8 03             	cmp    eax,0x3
c001993e:	0f 85 19 02 00 00    	jne    c0019b5d <CPU::detectFeatures()+0x9e1>
c0019944:	50                   	push   eax
c0019945:	50                   	push   eax
c0019946:	68 32 ba 02 c0       	push   0xc002ba32
c001994b:	e9 7f 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019950:	80 fa 06             	cmp    dl,0x6
c0019953:	0f 85 db 00 00 00    	jne    c0019a34 <CPU::detectFeatures()+0x8b8>
c0019959:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001995f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019964:	66 81 fa 80 01       	cmp    dx,0x180
c0019969:	75 0c                	jne    c0019977 <CPU::detectFeatures()+0x7fb>
c001996b:	50                   	push   eax
c001996c:	50                   	push   eax
c001996d:	68 3d ba 02 c0       	push   0xc002ba3d
c0019972:	e9 58 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019977:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001997d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019982:	75 0c                	jne    c0019990 <CPU::detectFeatures()+0x814>
c0019984:	50                   	push   eax
c0019985:	50                   	push   eax
c0019986:	68 4d ba 02 c0       	push   0xc002ba4d
c001998b:	e9 3f 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019990:	66 81 fa 40 02       	cmp    dx,0x240
c0019995:	75 0c                	jne    c00199a3 <CPU::detectFeatures()+0x827>
c0019997:	55                   	push   ebp
c0019998:	55                   	push   ebp
c0019999:	68 54 ba 02 c0       	push   0xc002ba54
c001999e:	e9 2c 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c00199a3:	66 81 fa 80 02       	cmp    dx,0x280
c00199a8:	75 0c                	jne    c00199b6 <CPU::detectFeatures()+0x83a>
c00199aa:	57                   	push   edi
c00199ab:	57                   	push   edi
c00199ac:	68 5d ba 02 c0       	push   0xc002ba5d
c00199b1:	e9 19 01 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c00199b6:	66 81 fa 40 03       	cmp    dx,0x340
c00199bb:	74 ed                	je     c00199aa <CPU::detectFeatures()+0x82e>
c00199bd:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199c2:	75 0c                	jne    c00199d0 <CPU::detectFeatures()+0x854>
c00199c4:	56                   	push   esi
c00199c5:	56                   	push   esi
c00199c6:	68 64 ba 02 c0       	push   0xc002ba64
c00199cb:	e9 ff 00 00 00       	jmp    c0019acf <CPU::detectFeatures()+0x953>
c00199d0:	83 f8 06             	cmp    eax,0x6
c00199d3:	0f 84 45 ff ff ff    	je     c001991e <CPU::detectFeatures()+0x7a2>
c00199d9:	83 f8 04             	cmp    eax,0x4
c00199dc:	0f 84 4d ff ff ff    	je     c001992f <CPU::detectFeatures()+0x7b3>
c00199e2:	83 f8 03             	cmp    eax,0x3
c00199e5:	0f 85 72 01 00 00    	jne    c0019b5d <CPU::detectFeatures()+0x9e1>
c00199eb:	51                   	push   ecx
c00199ec:	51                   	push   ecx
c00199ed:	68 6d ba 02 c0       	push   0xc002ba6d
c00199f2:	53                   	push   ebx
c00199f3:	e8 fa ab ff ff       	call   c00145f2 <Device::setName(char const*)>
c00199f8:	b1 c1                	mov    cl,0xc1
c00199fa:	88 c8                	mov    al,cl
c00199fc:	e6 22                	out    0x22,al
c00199fe:	e4 23                	in     al,0x23
c0019a00:	88 c2                	mov    dl,al
c0019a02:	88 c8                	mov    al,cl
c0019a04:	e6 22                	out    0x22,al
c0019a06:	88 d0                	mov    al,dl
c0019a08:	83 c8 10             	or     eax,0x10
c0019a0b:	e6 23                	out    0x23,al
c0019a0d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a14:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a17:	89 d0                	mov    eax,edx
c0019a19:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a1f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a23:	40                   	inc    eax
c0019a24:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a2a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a2f:	e9 a1 00 00 00       	jmp    c0019ad5 <CPU::detectFeatures()+0x959>
c0019a34:	83 f8 06             	cmp    eax,0x6
c0019a37:	0f 84 e1 fe ff ff    	je     c001991e <CPU::detectFeatures()+0x7a2>
c0019a3d:	83 f8 04             	cmp    eax,0x4
c0019a40:	0f 84 e9 fe ff ff    	je     c001992f <CPU::detectFeatures()+0x7b3>
c0019a46:	83 f8 03             	cmp    eax,0x3
c0019a49:	0f 85 0e 01 00 00    	jne    c0019b5d <CPU::detectFeatures()+0x9e1>
c0019a4f:	52                   	push   edx
c0019a50:	52                   	push   edx
c0019a51:	68 78 ba 02 c0       	push   0xc002ba78
c0019a56:	eb 77                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019a58:	83 f8 07             	cmp    eax,0x7
c0019a5b:	75 09                	jne    c0019a66 <CPU::detectFeatures()+0x8ea>
c0019a5d:	50                   	push   eax
c0019a5e:	50                   	push   eax
c0019a5f:	68 82 ba 02 c0       	push   0xc002ba82
c0019a64:	eb 69                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019a66:	83 f8 0a             	cmp    eax,0xa
c0019a69:	75 09                	jne    c0019a74 <CPU::detectFeatures()+0x8f8>
c0019a6b:	50                   	push   eax
c0019a6c:	50                   	push   eax
c0019a6d:	68 8d ba 02 c0       	push   0xc002ba8d
c0019a72:	eb 5b                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019a74:	83 f8 0b             	cmp    eax,0xb
c0019a77:	75 09                	jne    c0019a82 <CPU::detectFeatures()+0x906>
c0019a79:	50                   	push   eax
c0019a7a:	50                   	push   eax
c0019a7b:	68 95 ba 02 c0       	push   0xc002ba95
c0019a80:	eb 4d                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019a82:	83 f8 08             	cmp    eax,0x8
c0019a85:	75 09                	jne    c0019a90 <CPU::detectFeatures()+0x914>
c0019a87:	50                   	push   eax
c0019a88:	50                   	push   eax
c0019a89:	68 9e ba 02 c0       	push   0xc002ba9e
c0019a8e:	eb 3f                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019a90:	83 f8 09             	cmp    eax,0x9
c0019a93:	75 09                	jne    c0019a9e <CPU::detectFeatures()+0x922>
c0019a95:	50                   	push   eax
c0019a96:	50                   	push   eax
c0019a97:	68 a6 ba 02 c0       	push   0xc002baa6
c0019a9c:	eb 31                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019a9e:	83 f8 05             	cmp    eax,0x5
c0019aa1:	75 09                	jne    c0019aac <CPU::detectFeatures()+0x930>
c0019aa3:	50                   	push   eax
c0019aa4:	50                   	push   eax
c0019aa5:	68 ae ba 02 c0       	push   0xc002baae
c0019aaa:	eb 23                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019aac:	83 f8 0c             	cmp    eax,0xc
c0019aaf:	75 09                	jne    c0019aba <CPU::detectFeatures()+0x93e>
c0019ab1:	55                   	push   ebp
c0019ab2:	55                   	push   ebp
c0019ab3:	68 bc ba 02 c0       	push   0xc002babc
c0019ab8:	eb 15                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019aba:	83 f8 0d             	cmp    eax,0xd
c0019abd:	75 09                	jne    c0019ac8 <CPU::detectFeatures()+0x94c>
c0019abf:	57                   	push   edi
c0019ac0:	57                   	push   edi
c0019ac1:	68 c7 ba 02 c0       	push   0xc002bac7
c0019ac6:	eb 07                	jmp    c0019acf <CPU::detectFeatures()+0x953>
c0019ac8:	56                   	push   esi
c0019ac9:	56                   	push   esi
c0019aca:	68 db ba 02 c0       	push   0xc002badb
c0019acf:	53                   	push   ebx
c0019ad0:	e8 1d ab ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019ad5:	83 c4 10             	add    esp,0x10
c0019ad8:	e9 80 00 00 00       	jmp    c0019b5d <CPU::detectFeatures()+0x9e1>
c0019add:	51                   	push   ecx
c0019ade:	51                   	push   ecx
c0019adf:	68 27 b9 02 c0       	push   0xc002b927
c0019ae4:	57                   	push   edi
c0019ae5:	e8 4a 6d fe ff       	call   c0000834 <strcpy>
c0019aea:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019af4:	e8 b5 67 fe ff       	call   c00002ae <is486>
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	85 c0                	test   eax,eax
c0019afe:	74 2b                	je     c0019b2b <CPU::detectFeatures()+0x9af>
c0019b00:	52                   	push   edx
c0019b01:	52                   	push   edx
c0019b02:	68 e7 ba 02 c0       	push   0xc002bae7
c0019b07:	53                   	push   ebx
c0019b08:	e8 e5 aa ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019b0d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b14:	0f 20 c0             	mov    eax,cr0
c0019b17:	83 e0 14             	and    eax,0x14
c0019b1a:	83 c4 10             	add    esp,0x10
c0019b1d:	83 f8 04             	cmp    eax,0x4
c0019b20:	75 1f                	jne    c0019b41 <CPU::detectFeatures()+0x9c5>
c0019b22:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b29:	eb 32                	jmp    c0019b5d <CPU::detectFeatures()+0x9e1>
c0019b2b:	50                   	push   eax
c0019b2c:	50                   	push   eax
c0019b2d:	68 f2 ba 02 c0       	push   0xc002baf2
c0019b32:	53                   	push   ebx
c0019b33:	e8 ba aa ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019b38:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b3f:	eb d3                	jmp    c0019b14 <CPU::detectFeatures()+0x998>
c0019b41:	e8 43 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b46:	83 e0 01             	and    eax,0x1
c0019b49:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b4c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b52:	83 e0 fd             	and    eax,0xfffffffd
c0019b55:	09 d0                	or     eax,edx
c0019b57:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b5d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b64:	83 c4 4c             	add    esp,0x4c
c0019b67:	5b                   	pop    ebx
c0019b68:	5e                   	pop    esi
c0019b69:	5f                   	pop    edi
c0019b6a:	5d                   	pop    ebp
c0019b6b:	c3                   	ret    

c0019b6c <CPU::setupSMEP()>:
c0019b6c:	0f 20 e0             	mov    eax,cr4
c0019b6f:	0d 00 00 10 00       	or     eax,0x100000
c0019b74:	0f 22 e0             	mov    cr4,eax
c0019b77:	c3                   	ret    

c0019b78 <CPU::setupUMIP()>:
c0019b78:	0f 20 e0             	mov    eax,cr4
c0019b7b:	80 cc 08             	or     ah,0x8
c0019b7e:	0f 22 e0             	mov    cr4,eax
c0019b81:	c3                   	ret    

c0019b82 <CPU::setupTSC()>:
c0019b82:	0f 20 e0             	mov    eax,cr4
c0019b85:	83 c8 04             	or     eax,0x4
c0019b88:	0f 22 e0             	mov    cr4,eax
c0019b8b:	c3                   	ret    

c0019b8c <CPU::setupLargePages()>:
c0019b8c:	0f 20 e0             	mov    eax,cr4
c0019b8f:	83 c8 10             	or     eax,0x10
c0019b92:	0f 22 e0             	mov    cr4,eax
c0019b95:	c3                   	ret    

c0019b96 <CPU::setupPAT()>:
c0019b96:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0019b9b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ba2:	74 2c                	je     c0019bd0 <CPU::setupPAT()+0x3a>
c0019ba4:	53                   	push   ebx
c0019ba5:	83 ec 10             	sub    esp,0x10
c0019ba8:	68 77 02 00 00       	push   0x277
c0019bad:	50                   	push   eax
c0019bae:	e8 35 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019bb3:	83 e2 f8             	and    edx,0xfffffff8
c0019bb6:	83 ca 01             	or     edx,0x1
c0019bb9:	52                   	push   edx
c0019bba:	50                   	push   eax
c0019bbb:	68 77 02 00 00       	push   0x277
c0019bc0:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0019bc6:	e8 49 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bcb:	83 c4 28             	add    esp,0x28
c0019bce:	5b                   	pop    ebx
c0019bcf:	c3                   	ret    
c0019bd0:	c3                   	ret    
c0019bd1:	90                   	nop

c0019bd2 <CPU::setupMTRR()>:
c0019bd2:	c3                   	ret    
c0019bd3:	90                   	nop

c0019bd4 <CPU::setupGlobalPages()>:
c0019bd4:	0f 20 e0             	mov    eax,cr4
c0019bd7:	0c 80                	or     al,0x80
c0019bd9:	0f 22 e0             	mov    cr4,eax
c0019bdc:	c3                   	ret    
c0019bdd:	90                   	nop

c0019bde <CPU::allowUsermodeDataAccess()>:
c0019bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019be9:	74 03                	je     c0019bee <CPU::allowUsermodeDataAccess()+0x10>
c0019beb:	0f 01 cb             	stac   
c0019bee:	c3                   	ret    
c0019bef:	90                   	nop

c0019bf0 <CPU::prohibitUsermodeDataAccess()>:
c0019bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bfb:	74 03                	je     c0019c00 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bfd:	0f 01 ca             	clac   
c0019c00:	c3                   	ret    
c0019c01:	90                   	nop

c0019c02 <CPU::setupSMAP()>:
c0019c02:	0f 20 e0             	mov    eax,cr4
c0019c05:	0d 00 00 20 00       	or     eax,0x200000
c0019c0a:	0f 22 e0             	mov    cr4,eax
c0019c0d:	eb e1                	jmp    c0019bf0 <CPU::prohibitUsermodeDataAccess()>
c0019c0f:	90                   	nop

c0019c10 <CPU::setupFeatures()>:
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c17:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c1e:	74 07                	je     c0019c27 <CPU::setupFeatures()+0x17>
c0019c20:	52                   	push   edx
c0019c21:	e8 46 ff ff ff       	call   c0019b6c <CPU::setupSMEP()>
c0019c26:	58                   	pop    eax
c0019c27:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c2e:	74 07                	je     c0019c37 <CPU::setupFeatures()+0x27>
c0019c30:	52                   	push   edx
c0019c31:	e8 cc ff ff ff       	call   c0019c02 <CPU::setupSMAP()>
c0019c36:	58                   	pop    eax
c0019c37:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c3e:	74 07                	je     c0019c47 <CPU::setupFeatures()+0x37>
c0019c40:	52                   	push   edx
c0019c41:	e8 32 ff ff ff       	call   c0019b78 <CPU::setupUMIP()>
c0019c46:	58                   	pop    eax
c0019c47:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c4e:	74 07                	je     c0019c57 <CPU::setupFeatures()+0x47>
c0019c50:	52                   	push   edx
c0019c51:	e8 2c ff ff ff       	call   c0019b82 <CPU::setupTSC()>
c0019c56:	58                   	pop    eax
c0019c57:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c5e:	74 07                	je     c0019c67 <CPU::setupFeatures()+0x57>
c0019c60:	52                   	push   edx
c0019c61:	e8 26 ff ff ff       	call   c0019b8c <CPU::setupLargePages()>
c0019c66:	59                   	pop    ecx
c0019c67:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c6e:	74 07                	je     c0019c77 <CPU::setupFeatures()+0x67>
c0019c70:	52                   	push   edx
c0019c71:	e8 5e ff ff ff       	call   c0019bd4 <CPU::setupGlobalPages()>
c0019c76:	58                   	pop    eax
c0019c77:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c7e:	74 0c                	je     c0019c8c <CPU::setupFeatures()+0x7c>
c0019c80:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c84:	83 c4 0c             	add    esp,0xc
c0019c87:	e9 0a ff ff ff       	jmp    c0019b96 <CPU::setupPAT()>
c0019c8c:	83 c4 0c             	add    esp,0xc
c0019c8f:	c3                   	ret    

c0019c90 <CPU::open(int, int, void*)>:
c0019c90:	57                   	push   edi
c0019c91:	56                   	push   esi
c0019c92:	53                   	push   ebx
c0019c93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c97:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c9b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ca1:	83 ec 0c             	sub    esp,0xc
c0019ca4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019caa:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cb0:	50                   	push   eax
c0019cb1:	e8 1e 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019cb6:	83 c4 0c             	add    esp,0xc
c0019cb9:	6a 00                	push   0x0
c0019cbb:	68 ef be ad de       	push   0xdeadbeef
c0019cc0:	57                   	push   edi
c0019cc1:	e8 8e 78 ff ff       	call   c0011554 <TSS::setup(unsigned long, unsigned long)>
c0019cc6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cc9:	e8 66 78 ff ff       	call   c0011534 <TSS::flush()>
c0019cce:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cd7:	e8 54 56 ff ff       	call   c000f330 <IDT::setup()>
c0019cdc:	b8 00 04 00 00       	mov    eax,0x400
c0019ce1:	0f 23 f8             	mov    db7,eax
c0019ce4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cee:	e8 0e 62 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0019cf3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cf9:	89 30                	mov    DWORD PTR [eax],esi
c0019cfb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d01:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d04:	58                   	pop    eax
c0019d05:	5a                   	pop    edx
c0019d06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d10:	e8 7d 89 ff ff       	call   c0012692 <VAS::setCPUSpecific(unsigned long)>
c0019d15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d18:	e8 5f f4 ff ff       	call   c001917c <CPU::detectFeatures()>
c0019d1d:	e8 ce bc ff ff       	call   c00159f0 <setupInterruptController()>
c0019d22:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d28:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0019d2d:	83 e0 10             	and    eax,0x10
c0019d30:	83 f8 01             	cmp    eax,0x1
c0019d33:	19 c0                	sbb    eax,eax
c0019d35:	83 e0 46             	and    eax,0x46
c0019d38:	83 c0 1e             	add    eax,0x1e
c0019d3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d3e:	e8 bb d1 ff ff       	call   c0016efe <setupTimer(int)>
c0019d43:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4c:	e8 bf fe ff ff       	call   c0019c10 <CPU::setupFeatures()>
c0019d51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d54:	e8 a7 f1 ff ff       	call   c0018f00 <CPU::displayFeatures()>
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	31 c0                	xor    eax,eax
c0019d5e:	5b                   	pop    ebx
c0019d5f:	5e                   	pop    esi
c0019d60:	5f                   	pop    edi
c0019d61:	c3                   	ret    

c0019d62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d62:	57                   	push   edi
c0019d63:	56                   	push   esi
c0019d64:	53                   	push   ebx
c0019d65:	51                   	push   ecx
c0019d66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d6a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d6d:	0f 02 c0             	lar    eax,ax
c0019d70:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d77:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d7a:	88 ca                	mov    dl,cl
c0019d7c:	c0 ea 06             	shr    dl,0x6
c0019d7f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d83:	89 ca                	mov    edx,ecx
c0019d85:	66 c1 ea 03          	shr    dx,0x3
c0019d89:	83 e2 07             	and    edx,0x7
c0019d8c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d91:	88 17                	mov    BYTE PTR [edi],dl
c0019d93:	0f 84 a6 01 00 00    	je     c0019f3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d99:	83 e1 07             	and    ecx,0x7
c0019d9c:	80 f9 04             	cmp    cl,0x4
c0019d9f:	0f 84 98 00 00 00    	je     c0019e3d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019da5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019daa:	0f 95 c0             	setne  al
c0019dad:	80 f9 05             	cmp    cl,0x5
c0019db0:	0f 95 c2             	setne  dl
c0019db3:	08 c2                	or     dl,al
c0019db5:	74 79                	je     c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019db7:	84 c9                	test   cl,cl
c0019db9:	75 05                	jne    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019dbb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dbe:	eb 3c                	jmp    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc0:	80 f9 01             	cmp    cl,0x1
c0019dc3:	75 05                	jne    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019dc5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dc8:	eb 32                	jmp    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dca:	80 f9 02             	cmp    cl,0x2
c0019dcd:	75 05                	jne    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019dcf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dd2:	eb 28                	jmp    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd4:	31 c0                	xor    eax,eax
c0019dd6:	80 f9 03             	cmp    cl,0x3
c0019dd9:	75 05                	jne    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ddb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dde:	eb 1c                	jmp    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de0:	80 f9 05             	cmp    cl,0x5
c0019de3:	75 05                	jne    c0019dea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019de5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019de8:	eb 12                	jmp    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dea:	80 f9 06             	cmp    cl,0x6
c0019ded:	75 05                	jne    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019def:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019df2:	eb 08                	jmp    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df4:	80 f9 07             	cmp    cl,0x7
c0019df7:	75 03                	jne    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dfc:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e01:	75 10                	jne    c0019e13 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e03:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e07:	b9 03 00 00 00       	mov    ecx,0x3
c0019e0c:	01 d0                	add    eax,edx
c0019e0e:	e9 37 01 00 00       	jmp    c0019f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e13:	b9 02 00 00 00       	mov    ecx,0x2
c0019e18:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e1d:	0f 85 27 01 00 00    	jne    c0019f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e23:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e26:	b9 06 00 00 00       	mov    ecx,0x6
c0019e2b:	e9 1a 01 00 00       	jmp    c0019f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e30:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e33:	b9 06 00 00 00       	mov    ecx,0x6
c0019e38:	e9 0f 01 00 00       	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e3d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e40:	88 ca                	mov    dl,cl
c0019e42:	c0 ea 06             	shr    dl,0x6
c0019e45:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e49:	89 ca                	mov    edx,ecx
c0019e4b:	66 c1 ea 03          	shr    dx,0x3
c0019e4f:	83 e2 07             	and    edx,0x7
c0019e52:	80 e1 07             	and    cl,0x7
c0019e55:	75 05                	jne    c0019e5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e57:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e5a:	eb 4c                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e5c:	80 f9 01             	cmp    cl,0x1
c0019e5f:	75 05                	jne    c0019e66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e61:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e64:	eb 42                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e66:	80 f9 02             	cmp    cl,0x2
c0019e69:	75 05                	jne    c0019e70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e6b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e6e:	eb 38                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e70:	80 f9 03             	cmp    cl,0x3
c0019e73:	75 05                	jne    c0019e7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e75:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e78:	eb 2e                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7a:	80 f9 04             	cmp    cl,0x4
c0019e7d:	75 12                	jne    c0019e91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e7f:	f6 c4 60             	test   ah,0x60
c0019e82:	75 08                	jne    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e84:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e87:	8d 78 14             	lea    edi,[eax+0x14]
c0019e8a:	eb 1c                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e8f:	eb 17                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e91:	80 f9 05             	cmp    cl,0x5
c0019e94:	75 05                	jne    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e96:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e99:	eb 0d                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e9b:	80 f9 06             	cmp    cl,0x6
c0019e9e:	75 05                	jne    c0019ea5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ea0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ea3:	eb 03                	jmp    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ea8:	84 d2                	test   dl,dl
c0019eaa:	75 05                	jne    c0019eb1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019eac:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019eaf:	eb 3c                	jmp    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb1:	80 fa 01             	cmp    dl,0x1
c0019eb4:	75 05                	jne    c0019ebb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019eb6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019eb9:	eb 32                	jmp    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ebb:	80 fa 02             	cmp    dl,0x2
c0019ebe:	75 05                	jne    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ec0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ec3:	eb 28                	jmp    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec5:	80 fa 03             	cmp    dl,0x3
c0019ec8:	75 05                	jne    c0019ecf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019eca:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ecd:	eb 1e                	jmp    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ecf:	31 c0                	xor    eax,eax
c0019ed1:	80 fa 04             	cmp    dl,0x4
c0019ed4:	74 17                	je     c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed6:	80 fa 05             	cmp    dl,0x5
c0019ed9:	75 05                	jne    c0019ee0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019edb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ede:	eb 0d                	jmp    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee0:	80 fa 06             	cmp    dl,0x6
c0019ee3:	75 05                	jne    c0019eea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ee5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ee8:	eb 03                	jmp    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eea:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019eed:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ef2:	0f 94 c2             	sete   dl
c0019ef5:	80 f9 05             	cmp    cl,0x5
c0019ef8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019efc:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f01:	d3 e0                	shl    eax,cl
c0019f03:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f07:	74 0a                	je     c0019f13 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f09:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f0c:	b9 07 00 00 00       	mov    ecx,0x7
c0019f11:	eb 37                	jmp    c0019f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f13:	01 f8                	add    eax,edi
c0019f15:	b9 03 00 00 00       	mov    ecx,0x3
c0019f1a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f1f:	74 2b                	je     c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f21:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f26:	75 0d                	jne    c0019f35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f28:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f2c:	01 c8                	add    eax,ecx
c0019f2e:	b9 04 00 00 00       	mov    ecx,0x4
c0019f33:	eb 17                	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f35:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f38:	b9 07 00 00 00       	mov    ecx,0x7
c0019f3d:	eb 0d                	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f3f:	b9 02 00 00 00       	mov    ecx,0x2
c0019f44:	b2 01                	mov    dl,0x1
c0019f46:	31 c0                	xor    eax,eax
c0019f48:	eb 02                	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f4a:	31 d2                	xor    edx,edx
c0019f4c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f50:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f52:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f56:	88 11                	mov    BYTE PTR [ecx],dl
c0019f58:	5a                   	pop    edx
c0019f59:	5b                   	pop    ebx
c0019f5a:	5e                   	pop    esi
c0019f5b:	5f                   	pop    edi
c0019f5c:	c3                   	ret    

c0019f5d <Krnl::smpEntry()>:
c0019f5d:	eb fe                	jmp    c0019f5d <Krnl::smpEntry()>

c0019f5f <Krnl::startCPU(int)>:
c0019f5f:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0019f64:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f6b:	0f 84 36 01 00 00    	je     c001a0a7 <Krnl::startCPU(int)+0x148>
c0019f71:	53                   	push   ebx
c0019f72:	83 ec 08             	sub    esp,0x8
c0019f75:	e8 fc 3e 00 00       	call   c001de76 <lockScheduler()>
c0019f7a:	52                   	push   edx
c0019f7b:	52                   	push   edx
c0019f7c:	6a 1b                	push   0x1b
c0019f7e:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0019f84:	e8 5f 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f89:	59                   	pop    ecx
c0019f8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f8f:	89 c3                	mov    ebx,eax
c0019f91:	58                   	pop    eax
c0019f92:	53                   	push   ebx
c0019f93:	68 2c bb 02 c0       	push   0xc002bb2c
c0019f98:	e8 4d 90 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019f9d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fab:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb5:	c1 e0 18             	shl    eax,0x18
c0019fb8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fc7:	09 c2                	or     edx,eax
c0019fc9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fcf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fd5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fdb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fe1:	80 cd c5             	or     ch,0xc5
c0019fe4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fea:	f3 90                	pause  
c0019fec:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fee:	0f ba e1 0c          	bt     ecx,0xc
c0019ff2:	72 f6                	jb     c0019fea <Krnl::startCPU(int)+0x8b>
c0019ff4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ffa:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a000:	09 c1                	or     ecx,eax
c001a002:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a008:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a00e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a014:	80 cd 85             	or     ch,0x85
c001a017:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a01d:	f3 90                	pause  
c001a01f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a021:	0f ba e1 0c          	bt     ecx,0xc
c001a025:	72 f6                	jb     c001a01d <Krnl::startCPU(int)+0xbe>
c001a027:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a031:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a037:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a03d:	09 c1                	or     ecx,eax
c001a03f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a045:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a04b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a051:	81 c9 02 06 00 00    	or     ecx,0x602
c001a057:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a05d:	f3 90                	pause  
c001a05f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a061:	0f ba e1 0c          	bt     ecx,0xc
c001a065:	72 f6                	jb     c001a05d <Krnl::startCPU(int)+0xfe>
c001a067:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a071:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a077:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a07d:	09 c8                	or     eax,ecx
c001a07f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a085:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a08b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a090:	0d 02 06 00 00       	or     eax,0x602
c001a095:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a09b:	f3 90                	pause  
c001a09d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a09f:	0f ba e0 0c          	bt     eax,0xc
c001a0a3:	72 f6                	jb     c001a09b <Krnl::startCPU(int)+0x13c>
c001a0a5:	eb fe                	jmp    c001a0a5 <Krnl::startCPU(int)+0x146>
c001a0a7:	c3                   	ret    

c001a0a8 <Krnl::startCPUs()>:
c001a0a8:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001a0ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0b3:	88 c2                	mov    dl,al
c001a0b5:	83 e2 0a             	and    edx,0xa
c001a0b8:	80 fa 0a             	cmp    dl,0xa
c001a0bb:	75 09                	jne    c001a0c6 <Krnl::startCPUs()+0x1e>
c001a0bd:	a8 01                	test   al,0x1
c001a0bf:	74 05                	je     c001a0c6 <Krnl::startCPUs()+0x1e>
c001a0c1:	e9 d5 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0c6:	c3                   	ret    
c001a0c7:	90                   	nop

c001a0c8 <EnvVarContainer::getEnv(char const*)>:
c001a0c8:	57                   	push   edi
c001a0c9:	56                   	push   esi
c001a0ca:	53                   	push   ebx
c001a0cb:	31 db                	xor    ebx,ebx
c001a0cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0d1:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0d3:	7e 2b                	jle    c001a100 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0d5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0dc:	50                   	push   eax
c001a0dd:	50                   	push   eax
c001a0de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0e1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0e8:	e8 d3 67 fe ff       	call   c00008c0 <strcmp>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	85 c0                	test   eax,eax
c001a0f2:	75 09                	jne    c001a0fd <EnvVarContainer::getEnv(char const*)+0x35>
c001a0f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0f7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0fb:	eb 05                	jmp    c001a102 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0fd:	43                   	inc    ebx
c001a0fe:	eb d1                	jmp    c001a0d1 <EnvVarContainer::getEnv(char const*)+0x9>
c001a100:	31 c0                	xor    eax,eax
c001a102:	5b                   	pop    ebx
c001a103:	5e                   	pop    esi
c001a104:	5f                   	pop    edi
c001a105:	c3                   	ret    

c001a106 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a106:	57                   	push   edi
c001a107:	56                   	push   esi
c001a108:	53                   	push   ebx
c001a109:	83 ec 1c             	sub    esp,0x1c
c001a10c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a110:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a114:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a118:	57                   	push   edi
c001a119:	e8 76 66 fe ff       	call   c0000794 <strlen>
c001a11e:	40                   	inc    eax
c001a11f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a122:	e8 19 57 ff ff       	call   c000f840 <malloc>
c001a127:	89 34 24             	mov    DWORD PTR [esp],esi
c001a12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a12e:	e8 61 66 fe ff       	call   c0000794 <strlen>
c001a133:	40                   	inc    eax
c001a134:	89 04 24             	mov    DWORD PTR [esp],eax
c001a137:	e8 04 57 ff ff       	call   c000f840 <malloc>
c001a13c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a13f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a143:	e8 4c 66 fe ff       	call   c0000794 <strlen>
c001a148:	83 c4 0c             	add    esp,0xc
c001a14b:	40                   	inc    eax
c001a14c:	50                   	push   eax
c001a14d:	6a 00                	push   0x0
c001a14f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a153:	e8 20 66 fe ff       	call   c0000778 <memset>
c001a158:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a15b:	e8 34 66 fe ff       	call   c0000794 <strlen>
c001a160:	83 c4 0c             	add    esp,0xc
c001a163:	40                   	inc    eax
c001a164:	50                   	push   eax
c001a165:	57                   	push   edi
c001a166:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a16a:	e8 d5 65 fe ff       	call   c0000744 <memcpy>
c001a16f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a172:	e8 1d 66 fe ff       	call   c0000794 <strlen>
c001a177:	83 c4 0c             	add    esp,0xc
c001a17a:	40                   	inc    eax
c001a17b:	50                   	push   eax
c001a17c:	6a 00                	push   0x0
c001a17e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a182:	e8 f1 65 fe ff       	call   c0000778 <memset>
c001a187:	89 34 24             	mov    DWORD PTR [esp],esi
c001a18a:	e8 05 66 fe ff       	call   c0000794 <strlen>
c001a18f:	83 c4 0c             	add    esp,0xc
c001a192:	40                   	inc    eax
c001a193:	50                   	push   eax
c001a194:	56                   	push   esi
c001a195:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a199:	e8 a6 65 fe ff       	call   c0000744 <memcpy>
c001a19e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1a0:	40                   	inc    eax
c001a1a1:	89 03                	mov    DWORD PTR [ebx],eax
c001a1a3:	c1 e0 03             	shl    eax,0x3
c001a1a6:	5a                   	pop    edx
c001a1a7:	59                   	pop    ecx
c001a1a8:	50                   	push   eax
c001a1a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1ac:	e8 7b 56 ff ff       	call   c000f82c <realloc>
c001a1b1:	83 c4 0c             	add    esp,0xc
c001a1b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1b7:	6a 08                	push   0x8
c001a1b9:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1bd:	52                   	push   edx
c001a1be:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1c0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1c4:	50                   	push   eax
c001a1c5:	e8 7a 65 fe ff       	call   c0000744 <memcpy>
c001a1ca:	83 c4 20             	add    esp,0x20
c001a1cd:	5b                   	pop    ebx
c001a1ce:	5e                   	pop    esi
c001a1cf:	5f                   	pop    edi
c001a1d0:	c3                   	ret    
c001a1d1:	90                   	nop

c001a1d2 <EnvVarContainer::deleteEnv(char const*)>:
c001a1d2:	c3                   	ret    
c001a1d3:	90                   	nop

c001a1d4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1d4:	55                   	push   ebp
c001a1d5:	57                   	push   edi
c001a1d6:	56                   	push   esi
c001a1d7:	53                   	push   ebx
c001a1d8:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1de:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1e5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1ec:	68 14 01 00 00       	push   0x114
c001a1f1:	e8 4a 56 ff ff       	call   c000f840 <malloc>
c001a1f6:	83 c4 0c             	add    esp,0xc
c001a1f9:	89 c7                	mov    edi,eax
c001a1fb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1fe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a205:	50                   	push   eax
c001a206:	e8 37 93 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001a20b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a20e:	e8 01 96 ff ff       	call   c0013814 <File::exists()>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	84 c0                	test   al,al
c001a218:	75 31                	jne    c001a24b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a21a:	51                   	push   ecx
c001a21b:	51                   	push   ecx
c001a21c:	6a 12                	push   0x12
c001a21e:	57                   	push   edi
c001a21f:	e8 82 93 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001a224:	8b 07                	mov    eax,DWORD PTR [edi]
c001a226:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a229:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a22c:	e8 63 65 fe ff       	call   c0000794 <strlen>
c001a231:	5a                   	pop    edx
c001a232:	31 d2                	xor    edx,edx
c001a234:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a238:	51                   	push   ecx
c001a239:	55                   	push   ebp
c001a23a:	52                   	push   edx
c001a23b:	50                   	push   eax
c001a23c:	57                   	push   edi
c001a23d:	ff d3                	call   ebx
c001a23f:	83 c4 14             	add    esp,0x14
c001a242:	57                   	push   edi
c001a243:	e8 bc 93 ff ff       	call   c0013604 <File::close()>
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	31 db                	xor    ebx,ebx
c001a24d:	50                   	push   eax
c001a24e:	31 ed                	xor    ebp,ebp
c001a250:	68 00 01 00 00       	push   0x100
c001a255:	6a 00                	push   0x0
c001a257:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a25b:	50                   	push   eax
c001a25c:	e8 17 65 fe ff       	call   c0000778 <memset>
c001a261:	58                   	pop    eax
c001a262:	5a                   	pop    edx
c001a263:	6a 01                	push   0x1
c001a265:	57                   	push   edi
c001a266:	e8 3b 93 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	83 ec 0c             	sub    esp,0xc
c001a271:	8b 07                	mov    eax,DWORD PTR [edi]
c001a273:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a277:	51                   	push   ecx
c001a278:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a27c:	52                   	push   edx
c001a27d:	6a 00                	push   0x0
c001a27f:	6a 01                	push   0x1
c001a281:	57                   	push   edi
c001a282:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a285:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a289:	83 c4 20             	add    esp,0x20
c001a28c:	3c 0d                	cmp    al,0xd
c001a28e:	0f 84 12 01 00 00    	je     c001a3a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a294:	85 db                	test   ebx,ebx
c001a296:	0f 84 fd 00 00 00    	je     c001a399 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a29c:	3c 0a                	cmp    al,0xa
c001a29e:	74 13                	je     c001a2b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2a0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2a5:	74 0c                	je     c001a2b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2a7:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2ad:	0f 8e e6 00 00 00    	jle    c001a399 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2b3:	83 ec 0c             	sub    esp,0xc
c001a2b6:	8d 53 01             	lea    edx,[ebx+0x1]
c001a2b9:	29 dd                	sub    ebp,ebx
c001a2bb:	52                   	push   edx
c001a2bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2c0:	e8 7b 55 ff ff       	call   c000f840 <malloc>
c001a2c5:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2cc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2cf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2d3:	e8 68 55 ff ff       	call   c000f840 <malloc>
c001a2d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2dc:	83 c4 0c             	add    esp,0xc
c001a2df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2e3:	52                   	push   edx
c001a2e4:	6a 00                	push   0x0
c001a2e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ea:	e8 89 64 fe ff       	call   c0000778 <memset>
c001a2ef:	83 c4 0c             	add    esp,0xc
c001a2f2:	53                   	push   ebx
c001a2f3:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2f7:	55                   	push   ebp
c001a2f8:	01 eb                	add    ebx,ebp
c001a2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2fe:	e8 41 64 fe ff       	call   c0000744 <memcpy>
c001a303:	83 c4 0c             	add    esp,0xc
c001a306:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a30a:	51                   	push   ecx
c001a30b:	6a 00                	push   0x0
c001a30d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a311:	e8 62 64 fe ff       	call   c0000778 <memset>
c001a316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a319:	e8 76 64 fe ff       	call   c0000794 <strlen>
c001a31e:	83 c4 0c             	add    esp,0xc
c001a321:	50                   	push   eax
c001a322:	53                   	push   ebx
c001a323:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a327:	e8 18 64 fe ff       	call   c0000744 <memcpy>
c001a32c:	5b                   	pop    ebx
c001a32d:	58                   	pop    eax
c001a32e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a332:	68 3d bb 02 c0       	push   0xc002bb3d
c001a337:	e8 ae 8c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a33c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a33e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a341:	40                   	inc    eax
c001a342:	83 c4 10             	add    esp,0x10
c001a345:	89 06                	mov    DWORD PTR [esi],eax
c001a347:	85 d2                	test   edx,edx
c001a349:	75 0c                	jne    c001a357 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a34b:	83 ec 0c             	sub    esp,0xc
c001a34e:	6a 08                	push   0x8
c001a350:	e8 eb 54 ff ff       	call   c000f840 <malloc>
c001a355:	eb 0c                	jmp    c001a363 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a357:	c1 e0 03             	shl    eax,0x3
c001a35a:	51                   	push   ecx
c001a35b:	51                   	push   ecx
c001a35c:	50                   	push   eax
c001a35d:	52                   	push   edx
c001a35e:	e8 c9 54 ff ff       	call   c000f82c <realloc>
c001a363:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a366:	83 c4 10             	add    esp,0x10
c001a369:	31 db                	xor    ebx,ebx
c001a36b:	52                   	push   edx
c001a36c:	6a 08                	push   0x8
c001a36e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a372:	50                   	push   eax
c001a373:	8b 16                	mov    edx,DWORD PTR [esi]
c001a375:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a378:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a37c:	50                   	push   eax
c001a37d:	e8 c2 63 fe ff       	call   c0000744 <memcpy>
c001a382:	83 c4 0c             	add    esp,0xc
c001a385:	68 00 01 00 00       	push   0x100
c001a38a:	6a 00                	push   0x0
c001a38c:	55                   	push   ebp
c001a38d:	31 ed                	xor    ebp,ebp
c001a38f:	e8 e4 63 fe ff       	call   c0000778 <memset>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	eb 0d                	jmp    c001a3a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a399:	3c 3d                	cmp    al,0x3d
c001a39b:	74 07                	je     c001a3a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a39d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a3a1:	45                   	inc    ebp
c001a3a2:	eb 02                	jmp    c001a3a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3a4:	89 eb                	mov    ebx,ebp
c001a3a6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3ab:	0f 85 bd fe ff ff    	jne    c001a26e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3b1:	50                   	push   eax
c001a3b2:	50                   	push   eax
c001a3b3:	ff 36                	push   DWORD PTR [esi]
c001a3b5:	68 4b bb 02 c0       	push   0xc002bb4b
c001a3ba:	e8 2b 8c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a3bf:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3c5:	5b                   	pop    ebx
c001a3c6:	5e                   	pop    esi
c001a3c7:	5f                   	pop    edi
c001a3c8:	5d                   	pop    ebp
c001a3c9:	c3                   	ret    

c001a3ca <EnvVarContainer::__loadSystem()>:
c001a3ca:	83 ec 10             	sub    esp,0x10
c001a3cd:	68 60 da 02 c0       	push   0xc002da60
c001a3d2:	68 76 bb 02 c0       	push   0xc002bb76
c001a3d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3db:	e8 f4 fd ff ff       	call   c001a1d4 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3e0:	83 c4 1c             	add    esp,0x1c
c001a3e3:	c3                   	ret    

c001a3e4 <EnvVarContainer::__loadUser()>:
c001a3e4:	c3                   	ret    
c001a3e5:	90                   	nop

c001a3e6 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a406:	90                   	nop
c001a407:	c3                   	ret    

c001a408 <EnvVarContainer::~EnvVarContainer()>:
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a412:	85 c0                	test   eax,eax
c001a414:	74 1d                	je     c001a433 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a41c:	85 c0                	test   eax,eax
c001a41e:	74 13                	je     c001a433 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a424:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a427:	83 ec 0c             	sub    esp,0xc
c001a42a:	50                   	push   eax
c001a42b:	e8 20 54 ff ff       	call   c000f850 <free>
c001a430:	83 c4 10             	add    esp,0x10
c001a433:	90                   	nop
c001a434:	83 c4 0c             	add    esp,0xc
c001a437:	c3                   	ret    

c001a438 <Krnl::getEnv(Process*, char const*)>:
c001a438:	53                   	push   ebx
c001a439:	83 ec 08             	sub    esp,0x8
c001a43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a440:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a444:	39 05 94 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a94,eax
c001a44a:	74 04                	je     c001a450 <Krnl::getEnv(Process*, char const*)+0x18>
c001a44c:	85 c0                	test   eax,eax
c001a44e:	75 0b                	jne    c001a45b <Krnl::getEnv(Process*, char const*)+0x23>
c001a450:	a1 74 10 03 c0       	mov    eax,ds:0xc0031074
c001a455:	85 c0                	test   eax,eax
c001a457:	75 19                	jne    c001a472 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a459:	eb 27                	jmp    c001a482 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a45b:	52                   	push   edx
c001a45c:	52                   	push   edx
c001a45d:	53                   	push   ebx
c001a45e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a464:	e8 5f fc ff ff       	call   c001a0c8 <EnvVarContainer::getEnv(char const*)>
c001a469:	83 c4 10             	add    esp,0x10
c001a46c:	85 c0                	test   eax,eax
c001a46e:	75 28                	jne    c001a498 <Krnl::getEnv(Process*, char const*)+0x60>
c001a470:	eb de                	jmp    c001a450 <Krnl::getEnv(Process*, char const*)+0x18>
c001a472:	52                   	push   edx
c001a473:	52                   	push   edx
c001a474:	53                   	push   ebx
c001a475:	50                   	push   eax
c001a476:	e8 4d fc ff ff       	call   c001a0c8 <EnvVarContainer::getEnv(char const*)>
c001a47b:	83 c4 10             	add    esp,0x10
c001a47e:	85 c0                	test   eax,eax
c001a480:	75 16                	jne    c001a498 <Krnl::getEnv(Process*, char const*)+0x60>
c001a482:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a486:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a48b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a48f:	83 c4 08             	add    esp,0x8
c001a492:	5b                   	pop    ebx
c001a493:	e9 30 fc ff ff       	jmp    c001a0c8 <EnvVarContainer::getEnv(char const*)>
c001a498:	83 c4 08             	add    esp,0x8
c001a49b:	5b                   	pop    ebx
c001a49c:	c3                   	ret    

c001a49d <Krnl::setEnvSystem(char const*, char const*)>:
c001a49d:	83 ec 10             	sub    esp,0x10
c001a4a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4a8:	ff 35 78 10 03 c0    	push   DWORD PTR ds:0xc0031078
c001a4ae:	e8 53 fc ff ff       	call   c001a106 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4b3:	83 c4 1c             	add    esp,0x1c
c001a4b6:	c3                   	ret    

c001a4b7 <Krnl::setEnvUser(char const*, char const*)>:
c001a4b7:	a1 74 10 03 c0       	mov    eax,ds:0xc0031074
c001a4bc:	85 c0                	test   eax,eax
c001a4be:	74 15                	je     c001a4d5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4c0:	83 ec 10             	sub    esp,0x10
c001a4c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4cb:	50                   	push   eax
c001a4cc:	e8 35 fc ff ff       	call   c001a106 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4d1:	83 c4 1c             	add    esp,0x1c
c001a4d4:	c3                   	ret    
c001a4d5:	c3                   	ret    

c001a4d6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4da:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4e4:	e9 1d fc ff ff       	jmp    c001a106 <EnvVarContainer::setEnv(char const*, char const*)>

c001a4e9 <Krnl::deleteEnvSystem(char const*)>:
c001a4e9:	c3                   	ret    

c001a4ea <Krnl::deleteEnvUser(char const*)>:
c001a4ea:	c3                   	ret    

c001a4eb <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4eb:	c3                   	ret    

c001a4ec <Krnl::newProcessEnv(Process*)>:
c001a4ec:	83 ec 28             	sub    esp,0x28
c001a4ef:	6a 0c                	push   0xc
c001a4f1:	e8 4a 53 ff ff       	call   c000f840 <malloc>
c001a4f6:	5a                   	pop    edx
c001a4f7:	59                   	pop    ecx
c001a4f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4fc:	50                   	push   eax
c001a4fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a501:	e8 e0 fe ff ff       	call   c001a3e6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a50a:	83 c4 2c             	add    esp,0x2c
c001a50d:	c3                   	ret    

c001a50e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a50e:	56                   	push   esi
c001a50f:	53                   	push   ebx
c001a510:	83 ec 10             	sub    esp,0x10
c001a513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a517:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a51d:	6a 0c                	push   0xc
c001a51f:	e8 1c 53 ff ff       	call   c000f840 <malloc>
c001a524:	89 c3                	mov    ebx,eax
c001a526:	58                   	pop    eax
c001a527:	5a                   	pop    edx
c001a528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a52c:	53                   	push   ebx
c001a52d:	e8 b4 fe ff ff       	call   c001a3e6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a532:	8b 06                	mov    eax,DWORD PTR [esi]
c001a534:	89 03                	mov    DWORD PTR [ebx],eax
c001a536:	c1 e0 03             	shl    eax,0x3
c001a539:	89 04 24             	mov    DWORD PTR [esp],eax
c001a53c:	e8 ff 52 ff ff       	call   c000f840 <malloc>
c001a541:	83 c4 0c             	add    esp,0xc
c001a544:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a547:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a549:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a550:	52                   	push   edx
c001a551:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a554:	50                   	push   eax
c001a555:	e8 ea 61 fe ff       	call   c0000744 <memcpy>
c001a55a:	89 d8                	mov    eax,ebx
c001a55c:	83 c4 14             	add    esp,0x14
c001a55f:	5b                   	pop    ebx
c001a560:	5e                   	pop    esi
c001a561:	c3                   	ret    

c001a562 <Krnl::loadSystemEnv()>:
c001a562:	53                   	push   ebx
c001a563:	83 ec 14             	sub    esp,0x14
c001a566:	6a 0c                	push   0xc
c001a568:	e8 d3 52 ff ff       	call   c000f840 <malloc>
c001a56d:	89 c3                	mov    ebx,eax
c001a56f:	58                   	pop    eax
c001a570:	5a                   	pop    edx
c001a571:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001a577:	53                   	push   ebx
c001a578:	e8 69 fe ff ff       	call   c001a3e6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a57d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a580:	89 1d 78 10 03 c0    	mov    DWORD PTR ds:0xc0031078,ebx
c001a586:	e8 3f fe ff ff       	call   c001a3ca <EnvVarContainer::__loadSystem()>
c001a58b:	83 c4 18             	add    esp,0x18
c001a58e:	5b                   	pop    ebx
c001a58f:	c3                   	ret    

c001a590 <Krnl::loadUserEnv()>:
c001a590:	53                   	push   ebx
c001a591:	83 ec 14             	sub    esp,0x14
c001a594:	6a 0c                	push   0xc
c001a596:	e8 a5 52 ff ff       	call   c000f840 <malloc>
c001a59b:	89 c3                	mov    ebx,eax
c001a59d:	58                   	pop    eax
c001a59e:	5a                   	pop    edx
c001a59f:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001a5a5:	53                   	push   ebx
c001a5a6:	e8 3b fe ff ff       	call   c001a3e6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5ab:	89 1d 74 10 03 c0    	mov    DWORD PTR ds:0xc0031074,ebx
c001a5b1:	83 c4 18             	add    esp,0x18
c001a5b4:	5b                   	pop    ebx
c001a5b5:	c3                   	ret    

c001a5b6 <Krnl::flushEnv()>:
c001a5b6:	c3                   	ret    

c001a5b7 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5bb:	8b 15 74 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031074
c001a5c1:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5c7:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5ce:	03 01                	add    eax,DWORD PTR [ecx]
c001a5d0:	85 d2                	test   edx,edx
c001a5d2:	74 02                	je     c001a5d6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5d4:	03 02                	add    eax,DWORD PTR [edx]
c001a5d6:	c3                   	ret    

c001a5d7 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5d7:	57                   	push   edi
c001a5d8:	8b 0d 74 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031074
c001a5de:	56                   	push   esi
c001a5df:	85 c9                	test   ecx,ecx
c001a5e1:	53                   	push   ebx
c001a5e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5ea:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5f4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5f6:	75 47                	jne    c001a63f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5f8:	39 c3                	cmp    ebx,eax
c001a5fa:	7c 47                	jl     c001a643 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5fc:	8b 15 78 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031078
c001a602:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a604:	01 c1                	add    ecx,eax
c001a606:	39 d9                	cmp    ecx,ebx
c001a608:	7e 6c                	jle    c001a676 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a60a:	51                   	push   ecx
c001a60b:	89 d9                	mov    ecx,ebx
c001a60d:	29 c1                	sub    ecx,eax
c001a60f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a612:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a616:	53                   	push   ebx
c001a617:	68 98 bb 02 c0       	push   0xc002bb98
c001a61c:	e8 c9 89 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a621:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a627:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a629:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a631:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a635:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a638:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a63b:	89 06                	mov    DWORD PTR [esi],eax
c001a63d:	eb 51                	jmp    c001a690 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a63f:	39 c3                	cmp    ebx,eax
c001a641:	7d 05                	jge    c001a648 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a643:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a646:	eb 20                	jmp    c001a668 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a648:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a64a:	8d 14 07             	lea    edx,[edi+eax*1]
c001a64d:	39 da                	cmp    edx,ebx
c001a64f:	7e 04                	jle    c001a655 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a651:	29 c3                	sub    ebx,eax
c001a653:	eb 10                	jmp    c001a665 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a655:	8b 0d 78 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031078
c001a65b:	03 11                	add    edx,DWORD PTR [ecx]
c001a65d:	39 da                	cmp    edx,ebx
c001a65f:	7e 15                	jle    c001a676 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a661:	29 c3                	sub    ebx,eax
c001a663:	29 fb                	sub    ebx,edi
c001a665:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a668:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a66c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a66f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a672:	89 06                	mov    DWORD PTR [esi],eax
c001a674:	eb 1d                	jmp    c001a693 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a676:	83 ec 0c             	sub    esp,0xc
c001a679:	68 ac bb 02 c0       	push   0xc002bbac
c001a67e:	e8 18 00 00 00       	call   c001a69b <Krnl::panic(char const*)>
c001a683:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a689:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a690:	83 c4 10             	add    esp,0x10
c001a693:	89 f0                	mov    eax,esi
c001a695:	5b                   	pop    ebx
c001a696:	5e                   	pop    esi
c001a697:	5f                   	pop    edi
c001a698:	c2 04 00             	ret    0x4

c001a69b <Krnl::panic(char const*)>:
c001a69b:	55                   	push   ebp
c001a69c:	89 e5                	mov    ebp,esp
c001a69e:	53                   	push   ebx
c001a69f:	83 ec 0c             	sub    esp,0xc
c001a6a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6a5:	fa                   	cli    
c001a6a6:	c6 05 84 10 03 c0 01 	mov    BYTE PTR ds:0xc0031084,0x1
c001a6ad:	53                   	push   ebx
c001a6ae:	c6 05 64 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d464,0x0
c001a6b5:	68 c6 bb 02 c0       	push   0xc002bbc6
c001a6ba:	e8 2b 89 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a6bf:	58                   	pop    eax
c001a6c0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cb:	e8 c5 66 ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c001a6d0:	83 c4 0c             	add    esp,0xc
c001a6d3:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6d8:	6a 01                	push   0x1
c001a6da:	6a 0f                	push   0xf
c001a6dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e2:	e8 df 60 ff ff       	call   c00107c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6e7:	58                   	pop    eax
c001a6e8:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f3:	e8 3e 69 ff ff       	call   c0011036 <VgaText::clearScreen()>
c001a6f8:	58                   	pop    eax
c001a6f9:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6fe:	5a                   	pop    edx
c001a6ff:	68 df bb 02 c0       	push   0xc002bbdf
c001a704:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70a:	e8 a5 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a70f:	59                   	pop    ecx
c001a710:	58                   	pop    eax
c001a711:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a716:	68 84 bc 02 c0       	push   0xc002bc84
c001a71b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a721:	e8 8e 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a726:	58                   	pop    eax
c001a727:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a72c:	5a                   	pop    edx
c001a72d:	68 fb bb 02 c0       	push   0xc002bbfb
c001a732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a738:	e8 77 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a73d:	59                   	pop    ecx
c001a73e:	58                   	pop    eax
c001a73f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a744:	53                   	push   ebx
c001a745:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74b:	e8 64 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a750:	58                   	pop    eax
c001a751:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a756:	5a                   	pop    edx
c001a757:	68 1b bc 02 c0       	push   0xc002bc1b
c001a75c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a762:	e8 4d 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a767:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001a76c:	83 c4 10             	add    esp,0x10
c001a76f:	85 c0                	test   eax,eax
c001a771:	74 02                	je     c001a775 <Krnl::panic(char const*)+0xda>
c001a773:	ff d0                	call   eax
c001a775:	83 ec 0c             	sub    esp,0xc
c001a778:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a77b:	e8 fd 2f 00 00       	call   c001d77d <Thr::getDriverNameFromAddress(unsigned long)>
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	89 c3                	mov    ebx,eax
c001a785:	85 c0                	test   eax,eax
c001a787:	0f 84 50 02 00 00    	je     c001a9dd <Krnl::panic(char const*)+0x342>
c001a78d:	83 ec 08             	sub    esp,0x8
c001a790:	8b 15 94 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a94
c001a796:	68 c0 bc 02 c0       	push   0xc002bcc0
c001a79b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7a1:	e8 0e 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a7a6:	58                   	pop    eax
c001a7a7:	5a                   	pop    edx
c001a7a8:	8b 15 94 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a94
c001a7ae:	68 fb bb 02 c0       	push   0xc002bbfb
c001a7b3:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7b9:	e8 f6 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a7be:	59                   	pop    ecx
c001a7bf:	58                   	pop    eax
c001a7c0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7c5:	53                   	push   ebx
c001a7c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7cc:	e8 e3 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	83 ec 08             	sub    esp,0x8
c001a7d7:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7dc:	68 1a bc 02 c0       	push   0xc002bc1a
c001a7e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e7:	e8 c8 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a7ec:	58                   	pop    eax
c001a7ed:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7f2:	5a                   	pop    edx
c001a7f3:	68 18 bd 02 c0       	push   0xc002bd18
c001a7f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fe:	e8 b1 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a803:	59                   	pop    ecx
c001a804:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a809:	5b                   	pop    ebx
c001a80a:	68 58 bd 02 c0       	push   0xc002bd58
c001a80f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a815:	e8 9a 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a81a:	58                   	pop    eax
c001a81b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a820:	5a                   	pop    edx
c001a821:	68 06 bc 02 c0       	push   0xc002bc06
c001a826:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82c:	e8 83 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a831:	59                   	pop    ecx
c001a832:	5b                   	pop    ebx
c001a833:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a836:	68 1e bc 02 c0       	push   0xc002bc1e
c001a83b:	e8 aa 87 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a840:	58                   	pop    eax
c001a841:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a844:	5a                   	pop    edx
c001a845:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a848:	68 27 bc 02 c0       	push   0xc002bc27
c001a84d:	e8 98 87 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a852:	59                   	pop    ecx
c001a853:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a856:	5b                   	pop    ebx
c001a857:	8b 00                	mov    eax,DWORD PTR [eax]
c001a859:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a85c:	68 30 bc 02 c0       	push   0xc002bc30
c001a861:	e8 84 87 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a866:	58                   	pop    eax
c001a867:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a86c:	5a                   	pop    edx
c001a86d:	68 9c bd 02 c0       	push   0xc002bd9c
c001a872:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a878:	e8 37 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a87d:	59                   	pop    ecx
c001a87e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a883:	5b                   	pop    ebx
c001a884:	68 39 bc 02 c0       	push   0xc002bc39
c001a889:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88f:	e8 20 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a894:	0f 20 c0             	mov    eax,cr0
c001a897:	5a                   	pop    edx
c001a898:	59                   	pop    ecx
c001a899:	50                   	push   eax
c001a89a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a89f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a5:	e8 30 69 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a8aa:	5b                   	pop    ebx
c001a8ab:	58                   	pop    eax
c001a8ac:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8b1:	68 43 bc 02 c0       	push   0xc002bc43
c001a8b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bc:	e8 f3 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a8c1:	0f 20 d0             	mov    eax,cr2
c001a8c4:	5a                   	pop    edx
c001a8c5:	59                   	pop    ecx
c001a8c6:	50                   	push   eax
c001a8c7:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d2:	e8 03 69 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a8d7:	5b                   	pop    ebx
c001a8d8:	58                   	pop    eax
c001a8d9:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8de:	68 4d bc 02 c0       	push   0xc002bc4d
c001a8e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e9:	e8 c6 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a8ee:	0f 20 d8             	mov    eax,cr3
c001a8f1:	5a                   	pop    edx
c001a8f2:	59                   	pop    ecx
c001a8f3:	50                   	push   eax
c001a8f4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ff:	e8 d6 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a904:	5b                   	pop    ebx
c001a905:	58                   	pop    eax
c001a906:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a90b:	68 60 bc 02 c0       	push   0xc002bc60
c001a910:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a916:	e8 99 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a91b:	0f 20 e0             	mov    eax,cr4
c001a91e:	5a                   	pop    edx
c001a91f:	59                   	pop    ecx
c001a920:	50                   	push   eax
c001a921:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92c:	e8 a9 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a931:	5b                   	pop    ebx
c001a932:	58                   	pop    eax
c001a933:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a938:	68 6a bc 02 c0       	push   0xc002bc6a
c001a93d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a943:	e8 6c 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a948:	5a                   	pop    edx
c001a949:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a94e:	59                   	pop    ecx
c001a94f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a955:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a958:	50                   	push   eax
c001a959:	e8 7c 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a95e:	5b                   	pop    ebx
c001a95f:	58                   	pop    eax
c001a960:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a965:	68 81 bc 02 c0       	push   0xc002bc81
c001a96a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a970:	e8 3f 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a975:	5a                   	pop    edx
c001a976:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a97b:	59                   	pop    ecx
c001a97c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a982:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a985:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a988:	50                   	push   eax
c001a989:	e8 4c 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a98e:	5b                   	pop    ebx
c001a98f:	58                   	pop    eax
c001a990:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a995:	68 81 bc 02 c0       	push   0xc002bc81
c001a99a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9a0:	e8 0f 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a9a5:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9b3:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9b5:	59                   	pop    ecx
c001a9b6:	5b                   	pop    ebx
c001a9b7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9ba:	50                   	push   eax
c001a9bb:	e8 1a 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	b2 fe                	mov    dl,0xfe
c001a9c5:	e4 60                	in     al,0x60
c001a9c7:	3c 1c                	cmp    al,0x1c
c001a9c9:	74 04                	je     c001a9cf <Krnl::panic(char const*)+0x334>
c001a9cb:	3c 5a                	cmp    al,0x5a
c001a9cd:	75 f6                	jne    c001a9c5 <Krnl::panic(char const*)+0x32a>
c001a9cf:	e4 64                	in     al,0x64
c001a9d1:	a8 02                	test   al,0x2
c001a9d3:	75 fa                	jne    c001a9cf <Krnl::panic(char const*)+0x334>
c001a9d5:	88 d0                	mov    al,dl
c001a9d7:	e6 64                	out    0x64,al
c001a9d9:	fa                   	cli    
c001a9da:	f4                   	hlt    
c001a9db:	eb e8                	jmp    c001a9c5 <Krnl::panic(char const*)+0x32a>
c001a9dd:	50                   	push   eax
c001a9de:	50                   	push   eax
c001a9df:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9e4:	68 ec bc 02 c0       	push   0xc002bcec
c001a9e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ef:	e8 c0 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a9f4:	58                   	pop    eax
c001a9f5:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9fa:	5a                   	pop    edx
c001a9fb:	68 fb bb 02 c0       	push   0xc002bbfb
c001aa00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa06:	e8 a9 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001aa0b:	59                   	pop    ecx
c001aa0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa11:	5b                   	pop    ebx
c001aa12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa15:	83 c0 0c             	add    eax,0xc
c001aa18:	50                   	push   eax
c001aa19:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001aa1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa24:	e8 8b 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001aa29:	83 c4 10             	add    esp,0x10
c001aa2c:	e9 a3 fd ff ff       	jmp    c001a7d4 <Krnl::panic(char const*)+0x139>

c001aa31 <Net::switchEndian16(unsigned short)>:
c001aa31:	83 ec 04             	sub    esp,0x4
c001aa34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa38:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa3c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa40:	c1 f8 08             	sar    eax,0x8
c001aa43:	89 c2                	mov    edx,eax
c001aa45:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa49:	c1 e0 08             	shl    eax,0x8
c001aa4c:	09 d0                	or     eax,edx
c001aa4e:	83 c4 04             	add    esp,0x4
c001aa51:	c3                   	ret    

c001aa52 <Net::switchEndian32(unsigned int)>:
c001aa52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa56:	c1 e8 18             	shr    eax,0x18
c001aa59:	89 c2                	mov    edx,eax
c001aa5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5f:	c1 e0 08             	shl    eax,0x8
c001aa62:	25 00 00 ff 00       	and    eax,0xff0000
c001aa67:	09 c2                	or     edx,eax
c001aa69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6d:	c1 e8 08             	shr    eax,0x8
c001aa70:	25 00 ff 00 00       	and    eax,0xff00
c001aa75:	09 c2                	or     edx,eax
c001aa77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7b:	c1 e0 18             	shl    eax,0x18
c001aa7e:	09 d0                	or     eax,edx
c001aa80:	c3                   	ret    

c001aa81 <Net::crc32Calc(unsigned char*, int)>:
c001aa81:	83 ec 10             	sub    esp,0x10
c001aa84:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa89:	75 07                	jne    c001aa92 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa8b:	b8 00 00 00 00       	mov    eax,0x0
c001aa90:	eb 7c                	jmp    c001ab0e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa92:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa97:	7f 07                	jg     c001aaa0 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa99:	b8 00 00 00 00       	mov    eax,0x0
c001aa9e:	eb 6e                	jmp    c001ab0e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aaa0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aab0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aab4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab8:	7d 4e                	jge    c001ab08 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aaba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aabe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aac2:	01 d0                	add    eax,edx
c001aac4:	8a 00                	mov    al,BYTE PTR [eax]
c001aac6:	0f b6 c0             	movzx  eax,al
c001aac9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aacd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aad5:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aada:	7f 26                	jg     c001ab02 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae0:	83 e0 01             	and    eax,0x1
c001aae3:	74 0d                	je     c001aaf2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae9:	d1 e8                	shr    eax,1
c001aaeb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaf0:	eb 06                	jmp    c001aaf8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf6:	d1 e8                	shr    eax,1
c001aaf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aafc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab00:	eb d3                	jmp    c001aad5 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab02:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab06:	eb a8                	jmp    c001aab0 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab0c:	f7 d0                	not    eax
c001ab0e:	83 c4 10             	add    esp,0x10
c001ab11:	c3                   	ret    

c001ab12 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab12:	83 ec 1c             	sub    esp,0x1c
c001ab15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab25:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab2a:	7f 14                	jg     c001ab40 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab30:	8d 50 01             	lea    edx,[eax+0x1]
c001ab33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab37:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab3a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab3e:	eb e5                	jmp    c001ab25 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab44:	8d 50 01             	lea    edx,[eax+0x1]
c001ab47:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab4b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab4e:	83 ec 04             	sub    esp,0x4
c001ab51:	6a 06                	push   0x6
c001ab53:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab57:	50                   	push   eax
c001ab58:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab5c:	e8 e3 5b fe ff       	call   c0000744 <memcpy>
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab69:	83 ec 04             	sub    esp,0x4
c001ab6c:	6a 06                	push   0x6
c001ab6e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab72:	50                   	push   eax
c001ab73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab77:	e8 c8 5b fe ff       	call   c0000744 <memcpy>
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab88:	0f b7 c0             	movzx  eax,ax
c001ab8b:	c1 f8 08             	sar    eax,0x8
c001ab8e:	89 c1                	mov    ecx,eax
c001ab90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab94:	8d 50 01             	lea    edx,[eax+0x1]
c001ab97:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab9b:	88 ca                	mov    dl,cl
c001ab9d:	88 10                	mov    BYTE PTR [eax],dl
c001ab9f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aba3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba7:	8d 48 01             	lea    ecx,[eax+0x1]
c001abaa:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001abae:	88 10                	mov    BYTE PTR [eax],dl
c001abb0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb8:	83 ec 04             	sub    esp,0x4
c001abbb:	52                   	push   edx
c001abbc:	50                   	push   eax
c001abbd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abc1:	e8 7e 5b fe ff       	call   c0000744 <memcpy>
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abcd:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001abd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abd9:	83 ec 08             	sub    esp,0x8
c001abdc:	50                   	push   eax
c001abdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abe1:	e8 9b fe ff ff       	call   c001aa81 <Net::crc32Calc(unsigned char*, int)>
c001abe6:	83 c4 10             	add    esp,0x10
c001abe9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abf1:	c1 e8 18             	shr    eax,0x18
c001abf4:	89 c1                	mov    ecx,eax
c001abf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abfa:	8d 50 01             	lea    edx,[eax+0x1]
c001abfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac01:	88 ca                	mov    dl,cl
c001ac03:	88 10                	mov    BYTE PTR [eax],dl
c001ac05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac09:	c1 e8 10             	shr    eax,0x10
c001ac0c:	89 c1                	mov    ecx,eax
c001ac0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac12:	8d 50 01             	lea    edx,[eax+0x1]
c001ac15:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac19:	88 ca                	mov    dl,cl
c001ac1b:	88 10                	mov    BYTE PTR [eax],dl
c001ac1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac21:	c1 e8 08             	shr    eax,0x8
c001ac24:	89 c1                	mov    ecx,eax
c001ac26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac2a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac31:	88 ca                	mov    dl,cl
c001ac33:	88 10                	mov    BYTE PTR [eax],dl
c001ac35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac39:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac44:	88 10                	mov    BYTE PTR [eax],dl
c001ac46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac4a:	83 c4 1c             	add    esp,0x1c
c001ac4d:	c3                   	ret    

c001ac4e <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac4e:	83 ec 2c             	sub    esp,0x2c
c001ac51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac59:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac5e:	83 ec 04             	sub    esp,0x4
c001ac61:	6a 06                	push   0x6
c001ac63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac6b:	83 c0 0e             	add    eax,0xe
c001ac6e:	50                   	push   eax
c001ac6f:	e8 d0 5a fe ff       	call   c0000744 <memcpy>
c001ac74:	83 c4 10             	add    esp,0x10
c001ac77:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac7c:	83 ec 04             	sub    esp,0x4
c001ac7f:	6a 06                	push   0x6
c001ac81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac89:	83 c0 08             	add    eax,0x8
c001ac8c:	50                   	push   eax
c001ac8d:	e8 b2 5a fe ff       	call   c0000744 <memcpy>
c001ac92:	83 c4 10             	add    esp,0x10
c001ac95:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac9e:	8d 50 01             	lea    edx,[eax+0x1]
c001aca1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aca5:	8a 00                	mov    al,BYTE PTR [eax]
c001aca7:	0f b6 c0             	movzx  eax,al
c001acaa:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001acaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb3:	8d 50 01             	lea    edx,[eax+0x1]
c001acb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acba:	8a 00                	mov    al,BYTE PTR [eax]
c001acbc:	0f b6 c0             	movzx  eax,al
c001acbf:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001acc4:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001acc9:	c1 e0 08             	shl    eax,0x8
c001accc:	89 c2                	mov    edx,eax
c001acce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acd2:	09 d0                	or     eax,edx
c001acd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acd8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acdc:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ace1:	75 3a                	jne    c001ad1d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ace3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acea:	66 3d dc 05          	cmp    ax,0x5dc
c001acee:	77 10                	ja     c001ad00 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acf7:	0f b7 c0             	movzx  eax,ax
c001acfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acfe:	eb 1d                	jmp    c001ad1d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad00:	83 ec 0c             	sub    esp,0xc
c001ad03:	68 c4 bd 02 c0       	push   0xc002bdc4
c001ad08:	e8 dd 82 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad14:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad18:	e9 c0 00 00 00       	jmp    c001addd <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad27:	83 ec 04             	sub    esp,0x4
c001ad2a:	52                   	push   edx
c001ad2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad2f:	50                   	push   eax
c001ad30:	e8 0f 5a fe ff       	call   c0000744 <memcpy>
c001ad35:	83 c4 10             	add    esp,0x10
c001ad38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad3c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad44:	8d 50 01             	lea    edx,[eax+0x1]
c001ad47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad4b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad4d:	0f b6 c0             	movzx  eax,al
c001ad50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad58:	8d 50 01             	lea    edx,[eax+0x1]
c001ad5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad5f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad61:	0f b6 c0             	movzx  eax,al
c001ad64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad6c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad73:	8a 00                	mov    al,BYTE PTR [eax]
c001ad75:	0f b6 c0             	movzx  eax,al
c001ad78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad80:	8d 50 01             	lea    edx,[eax+0x1]
c001ad83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad87:	8a 00                	mov    al,BYTE PTR [eax]
c001ad89:	0f b6 c0             	movzx  eax,al
c001ad8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad94:	c1 e0 18             	shl    eax,0x18
c001ad97:	89 c2                	mov    edx,eax
c001ad99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9d:	c1 e0 10             	shl    eax,0x10
c001ada0:	09 c2                	or     edx,eax
c001ada2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ada6:	c1 e0 08             	shl    eax,0x8
c001ada9:	09 d0                	or     eax,edx
c001adab:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001adaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb7:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001adbb:	83 e8 04             	sub    eax,0x4
c001adbe:	83 ec 08             	sub    esp,0x8
c001adc1:	50                   	push   eax
c001adc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adc6:	e8 b6 fc ff ff       	call   c001aa81 <Net::crc32Calc(unsigned char*, int)>
c001adcb:	83 c4 10             	add    esp,0x10
c001adce:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001add2:	0f 94 c2             	sete   dl
c001add5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001add9:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001addc:	90                   	nop
c001addd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ade1:	83 c4 2c             	add    esp,0x2c
c001ade4:	c2 04 00             	ret    0x4

c001ade7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ade7:	55                   	push   ebp
c001ade8:	57                   	push   edi
c001ade9:	56                   	push   esi
c001adea:	53                   	push   ebx
c001adeb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adf1:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adf8:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adfa:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adfd:	80 fb 40             	cmp    bl,0x40
c001ae00:	75 1b                	jne    c001ae1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae02:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae04:	84 d2                	test   dl,dl
c001ae06:	0f 84 f1 00 00 00    	je     c001aefd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae0c:	8d 46 01             	lea    eax,[esi+0x1]
c001ae0f:	80 fa 3a             	cmp    dl,0x3a
c001ae12:	74 04                	je     c001ae18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae14:	89 c6                	mov    esi,eax
c001ae16:	eb ea                	jmp    c001ae02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae18:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae1b:	89 c6                	mov    esi,eax
c001ae1d:	50                   	push   eax
c001ae1e:	6a 40                	push   0x40
c001ae20:	6a 00                	push   0x0
c001ae22:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae26:	50                   	push   eax
c001ae27:	e8 4c 59 fe ff       	call   c0000778 <memset>
c001ae2c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae33:	31 c0                	xor    eax,eax
c001ae35:	83 c4 10             	add    esp,0x10
c001ae38:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae3a:	84 c9                	test   cl,cl
c001ae3c:	0f 84 bb 00 00 00    	je     c001aefd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae42:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae47:	0f 8f b0 00 00 00    	jg     c001aefd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae4d:	80 f9 0a             	cmp    cl,0xa
c001ae50:	0f 85 98 00 00 00    	jne    c001aeee <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae56:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae5b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae5f:	a8 df                	test   al,0xdf
c001ae61:	0f 94 c1             	sete   cl
c001ae64:	3c 23                	cmp    al,0x23
c001ae66:	0f 94 c2             	sete   dl
c001ae69:	08 d1                	or     cl,dl
c001ae6b:	75 4a                	jne    c001aeb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae6d:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae70:	80 fa 01             	cmp    dl,0x1
c001ae73:	76 42                	jbe    c001aeb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae75:	3c 5b                	cmp    al,0x5b
c001ae77:	75 42                	jne    c001aebb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae79:	80 fb 40             	cmp    bl,0x40
c001ae7c:	75 39                	jne    c001aeb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae7e:	83 ec 0c             	sub    esp,0xc
c001ae81:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae85:	52                   	push   edx
c001ae86:	e8 09 59 fe ff       	call   c0000794 <strlen>
c001ae8b:	83 c4 10             	add    esp,0x10
c001ae8e:	83 f8 3f             	cmp    eax,0x3f
c001ae91:	77 6a                	ja     c001aefd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae93:	50                   	push   eax
c001ae94:	50                   	push   eax
c001ae95:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae99:	52                   	push   edx
c001ae9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae9e:	52                   	push   edx
c001ae9f:	e8 90 59 fe ff       	call   c0000834 <strcpy>
c001aea4:	58                   	pop    eax
c001aea5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aea9:	52                   	push   edx
c001aeaa:	e8 e5 58 fe ff       	call   c0000794 <strlen>
c001aeaf:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	31 d2                	xor    edx,edx
c001aeb9:	eb 3a                	jmp    c001aef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aebb:	80 fb 40             	cmp    bl,0x40
c001aebe:	74 06                	je     c001aec6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aec0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aec4:	eb 20                	jmp    c001aee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aec6:	50                   	push   eax
c001aec7:	50                   	push   eax
c001aec8:	55                   	push   ebp
c001aec9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aecd:	50                   	push   eax
c001aece:	e8 ed 59 fe ff       	call   c00008c0 <strcmp>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	85 c0                	test   eax,eax
c001aed8:	75 dd                	jne    c001aeb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeda:	eb e4                	jmp    c001aec0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aedc:	8d 50 01             	lea    edx,[eax+0x1]
c001aedf:	80 f9 3d             	cmp    cl,0x3d
c001aee2:	74 1d                	je     c001af01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aee4:	89 d0                	mov    eax,edx
c001aee6:	8a 08                	mov    cl,BYTE PTR [eax]
c001aee8:	84 c9                	test   cl,cl
c001aeea:	75 f0                	jne    c001aedc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aeec:	eb 0f                	jmp    c001aefd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aeee:	8d 50 01             	lea    edx,[eax+0x1]
c001aef1:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aef5:	47                   	inc    edi
c001aef6:	89 d0                	mov    eax,edx
c001aef8:	e9 3b ff ff ff       	jmp    c001ae38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aefd:	31 c0                	xor    eax,eax
c001aeff:	eb 33                	jmp    c001af34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af05:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af08:	50                   	push   eax
c001af09:	50                   	push   eax
c001af0a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af0e:	50                   	push   eax
c001af0f:	56                   	push   esi
c001af10:	e8 ab 59 fe ff       	call   c00008c0 <strcmp>
c001af15:	83 c4 10             	add    esp,0x10
c001af18:	85 c0                	test   eax,eax
c001af1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af1e:	75 97                	jne    c001aeb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af20:	51                   	push   ecx
c001af21:	51                   	push   ecx
c001af22:	52                   	push   edx
c001af23:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af2a:	e8 05 59 fe ff       	call   c0000834 <strcpy>
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	b0 01                	mov    al,0x1
c001af34:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af3a:	5b                   	pop    ebx
c001af3b:	5e                   	pop    esi
c001af3c:	5f                   	pop    edi
c001af3d:	5d                   	pop    ebp
c001af3e:	c3                   	ret    

c001af3f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af3f:	57                   	push   edi
c001af40:	56                   	push   esi
c001af41:	53                   	push   ebx
c001af42:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af48:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af4f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af56:	53                   	push   ebx
c001af57:	e8 38 58 fe ff       	call   c0000794 <strlen>
c001af5c:	89 34 24             	mov    DWORD PTR [esp],esi
c001af5f:	89 c7                	mov    edi,eax
c001af61:	e8 2e 58 fe ff       	call   c0000794 <strlen>
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af6d:	3d ff 00 00 00       	cmp    eax,0xff
c001af72:	0f 87 d3 00 00 00    	ja     c001b04b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af78:	57                   	push   edi
c001af79:	57                   	push   edi
c001af7a:	56                   	push   esi
c001af7b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af7f:	56                   	push   esi
c001af80:	e8 af 58 fe ff       	call   c0000834 <strcpy>
c001af85:	58                   	pop    eax
c001af86:	5a                   	pop    edx
c001af87:	68 0d c3 02 c0       	push   0xc002c30d
c001af8c:	56                   	push   esi
c001af8d:	e8 e2 59 fe ff       	call   c0000974 <strcat>
c001af92:	59                   	pop    ecx
c001af93:	5f                   	pop    edi
c001af94:	53                   	push   ebx
c001af95:	56                   	push   esi
c001af96:	e8 d9 59 fe ff       	call   c0000974 <strcat>
c001af9b:	58                   	pop    eax
c001af9c:	5a                   	pop    edx
c001af9d:	68 10 be 02 c0       	push   0xc002be10
c001afa2:	56                   	push   esi
c001afa3:	e8 cc 59 fe ff       	call   c0000974 <strcat>
c001afa8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afaf:	e8 8c 48 ff ff       	call   c000f840 <malloc>
c001afb4:	83 c4 0c             	add    esp,0xc
c001afb7:	89 c3                	mov    ebx,eax
c001afb9:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001afbf:	56                   	push   esi
c001afc0:	50                   	push   eax
c001afc1:	e8 7c 85 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001afc6:	83 c4 10             	add    esp,0x10
c001afc9:	85 db                	test   ebx,ebx
c001afcb:	74 7e                	je     c001b04b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afcd:	51                   	push   ecx
c001afce:	51                   	push   ecx
c001afcf:	6a 01                	push   0x1
c001afd1:	53                   	push   ebx
c001afd2:	e8 cf 85 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001afd7:	83 c4 10             	add    esp,0x10
c001afda:	85 c0                	test   eax,eax
c001afdc:	74 08                	je     c001afe6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe3:	53                   	push   ebx
c001afe4:	eb 5f                	jmp    c001b045 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afe6:	52                   	push   edx
c001afe7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afeb:	50                   	push   eax
c001afec:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aff0:	50                   	push   eax
c001aff1:	53                   	push   ebx
c001aff2:	e8 5b 88 ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001aff7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001affb:	83 c4 10             	add    esp,0x10
c001affe:	89 c1                	mov    ecx,eax
c001b000:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b004:	74 31                	je     c001b037 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b006:	83 ec 0c             	sub    esp,0xc
c001b009:	50                   	push   eax
c001b00a:	e8 31 48 ff ff       	call   c000f840 <malloc>
c001b00f:	89 c6                	mov    esi,eax
c001b011:	58                   	pop    eax
c001b012:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b014:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b018:	52                   	push   edx
c001b019:	56                   	push   esi
c001b01a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b01e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b022:	53                   	push   ebx
c001b023:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b026:	83 c4 20             	add    esp,0x20
c001b029:	85 c0                	test   eax,eax
c001b02b:	75 0a                	jne    c001b037 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b02d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b031:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b035:	74 18                	je     c001b04f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b037:	83 ec 0c             	sub    esp,0xc
c001b03a:	53                   	push   ebx
c001b03b:	e8 c4 85 ff ff       	call   c0013604 <File::close()>
c001b040:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b042:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b045:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b048:	83 c4 10             	add    esp,0x10
c001b04b:	31 c0                	xor    eax,eax
c001b04d:	eb 3b                	jmp    c001b08a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b04f:	83 ec 0c             	sub    esp,0xc
c001b052:	53                   	push   ebx
c001b053:	e8 ac 85 ff ff       	call   c0013604 <File::close()>
c001b058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b05a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b05d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b060:	83 c4 0c             	add    esp,0xc
c001b063:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b06a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b071:	56                   	push   esi
c001b072:	e8 70 fd ff ff       	call   c001ade7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b077:	89 34 24             	mov    DWORD PTR [esp],esi
c001b07a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b07e:	e8 cd 47 ff ff       	call   c000f850 <free>
c001b083:	83 c4 10             	add    esp,0x10
c001b086:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b08a:	81 c4 20 01 00 00    	add    esp,0x120
c001b090:	5b                   	pop    ebx
c001b091:	5e                   	pop    esi
c001b092:	5f                   	pop    edi
c001b093:	c3                   	ret    

c001b094 <Reg::getLine(char*, char*, char*)>:
c001b094:	57                   	push   edi
c001b095:	56                   	push   esi
c001b096:	53                   	push   ebx
c001b097:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b09b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b09f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0a3:	57                   	push   edi
c001b0a4:	56                   	push   esi
c001b0a5:	53                   	push   ebx
c001b0a6:	68 15 be 02 c0       	push   0xc002be15
c001b0ab:	e8 8f fe ff ff       	call   c001af3f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0b0:	83 c4 10             	add    esp,0x10
c001b0b3:	84 c0                	test   al,al
c001b0b5:	75 10                	jne    c001b0c7 <Reg::getLine(char*, char*, char*)+0x33>
c001b0b7:	57                   	push   edi
c001b0b8:	56                   	push   esi
c001b0b9:	53                   	push   ebx
c001b0ba:	68 3a be 02 c0       	push   0xc002be3a
c001b0bf:	e8 7b fe ff ff       	call   c001af3f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0c4:	83 c4 10             	add    esp,0x10
c001b0c7:	5b                   	pop    ebx
c001b0c8:	5e                   	pop    esi
c001b0c9:	5f                   	pop    edi
c001b0ca:	c3                   	ret    

c001b0cb <Reg::readInt(char*, char*, int*)>:
c001b0cb:	55                   	push   ebp
c001b0cc:	57                   	push   edi
c001b0cd:	56                   	push   esi
c001b0ce:	53                   	push   ebx
c001b0cf:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0d5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0d9:	57                   	push   edi
c001b0da:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0e1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0e8:	e8 a7 ff ff ff       	call   c001b094 <Reg::getLine(char*, char*, char*)>
c001b0ed:	83 c4 10             	add    esp,0x10
c001b0f0:	84 c0                	test   al,al
c001b0f2:	0f 84 b3 00 00 00    	je     c001b1ab <Reg::readInt(char*, char*, int*)+0xe0>
c001b0f8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0fc:	80 fa 2b             	cmp    dl,0x2b
c001b0ff:	74 0c                	je     c001b10d <Reg::readInt(char*, char*, int*)+0x42>
c001b101:	80 fa 2d             	cmp    dl,0x2d
c001b104:	75 0e                	jne    c001b114 <Reg::readInt(char*, char*, int*)+0x49>
c001b106:	ba 01 00 00 00       	mov    edx,0x1
c001b10b:	eb 0b                	jmp    c001b118 <Reg::readInt(char*, char*, int*)+0x4d>
c001b10d:	ba 01 00 00 00       	mov    edx,0x1
c001b112:	eb 02                	jmp    c001b116 <Reg::readInt(char*, char*, int*)+0x4b>
c001b114:	31 d2                	xor    edx,edx
c001b116:	31 c0                	xor    eax,eax
c001b118:	be 0a 00 00 00       	mov    esi,0xa
c001b11d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b122:	75 20                	jne    c001b144 <Reg::readInt(char*, char*, int*)+0x79>
c001b124:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b128:	80 f9 78             	cmp    cl,0x78
c001b12b:	75 0a                	jne    c001b137 <Reg::readInt(char*, char*, int*)+0x6c>
c001b12d:	83 c2 02             	add    edx,0x2
c001b130:	be 10 00 00 00       	mov    esi,0x10
c001b135:	eb 0d                	jmp    c001b144 <Reg::readInt(char*, char*, int*)+0x79>
c001b137:	80 f9 62             	cmp    cl,0x62
c001b13a:	75 08                	jne    c001b144 <Reg::readInt(char*, char*, int*)+0x79>
c001b13c:	83 c2 02             	add    edx,0x2
c001b13f:	be 02 00 00 00       	mov    esi,0x2
c001b144:	01 d7                	add    edi,edx
c001b146:	31 d2                	xor    edx,edx
c001b148:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b14a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b14e:	80 fb 0d             	cmp    bl,0xd
c001b151:	0f 94 c3             	sete   bl
c001b154:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b159:	0f 94 c1             	sete   cl
c001b15c:	08 cb                	or     bl,cl
c001b15e:	75 3a                	jne    c001b19a <Reg::readInt(char*, char*, int*)+0xcf>
c001b160:	0f af d6             	imul   edx,esi
c001b163:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b168:	83 fe 10             	cmp    esi,0x10
c001b16b:	75 26                	jne    c001b193 <Reg::readInt(char*, char*, int*)+0xc8>
c001b16d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b171:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b174:	89 e9                	mov    ecx,ebp
c001b176:	80 f9 05             	cmp    cl,0x5
c001b179:	77 06                	ja     c001b181 <Reg::readInt(char*, char*, int*)+0xb6>
c001b17b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b17f:	eb 16                	jmp    c001b197 <Reg::readInt(char*, char*, int*)+0xcc>
c001b181:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b185:	83 e9 61             	sub    ecx,0x61
c001b188:	80 f9 05             	cmp    cl,0x5
c001b18b:	77 06                	ja     c001b193 <Reg::readInt(char*, char*, int*)+0xc8>
c001b18d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b191:	eb 04                	jmp    c001b197 <Reg::readInt(char*, char*, int*)+0xcc>
c001b193:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b197:	47                   	inc    edi
c001b198:	eb ae                	jmp    c001b148 <Reg::readInt(char*, char*, int*)+0x7d>
c001b19a:	84 c0                	test   al,al
c001b19c:	74 02                	je     c001b1a0 <Reg::readInt(char*, char*, int*)+0xd5>
c001b19e:	f7 da                	neg    edx
c001b1a0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1a7:	89 10                	mov    DWORD PTR [eax],edx
c001b1a9:	88 d8                	mov    al,bl
c001b1ab:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1b1:	5b                   	pop    ebx
c001b1b2:	5e                   	pop    esi
c001b1b3:	5f                   	pop    edi
c001b1b4:	5d                   	pop    ebp
c001b1b5:	c3                   	ret    

c001b1b6 <Reg::readString(char*, char*, char*, int)>:
c001b1b6:	57                   	push   edi
c001b1b7:	56                   	push   esi
c001b1b8:	53                   	push   ebx
c001b1b9:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1bf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1c6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1ca:	57                   	push   edi
c001b1cb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1d2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1d9:	e8 b6 fe ff ff       	call   c001b094 <Reg::getLine(char*, char*, char*)>
c001b1de:	83 c4 10             	add    esp,0x10
c001b1e1:	89 c6                	mov    esi,eax
c001b1e3:	84 c0                	test   al,al
c001b1e5:	74 44                	je     c001b22b <Reg::readString(char*, char*, char*, int)+0x75>
c001b1e7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1ee:	31 c0                	xor    eax,eax
c001b1f0:	4a                   	dec    edx
c001b1f1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1f4:	84 c9                	test   cl,cl
c001b1f6:	74 0f                	je     c001b207 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1f8:	39 c2                	cmp    edx,eax
c001b1fa:	7e 0b                	jle    c001b207 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1fc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1ff:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b204:	40                   	inc    eax
c001b205:	eb ea                	jmp    c001b1f1 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b207:	83 ec 0c             	sub    esp,0xc
c001b20a:	53                   	push   ebx
c001b20b:	e8 84 55 fe ff       	call   c0000794 <strlen>
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b218:	75 11                	jne    c001b22b <Reg::readString(char*, char*, char*, int)+0x75>
c001b21a:	83 ec 0c             	sub    esp,0xc
c001b21d:	53                   	push   ebx
c001b21e:	e8 71 55 fe ff       	call   c0000794 <strlen>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b22b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b231:	89 f0                	mov    eax,esi
c001b233:	5b                   	pop    ebx
c001b234:	5e                   	pop    esi
c001b235:	5f                   	pop    edi
c001b236:	c3                   	ret    

c001b237 <Reg::readBool(char*, char*, bool*)>:
c001b237:	83 ec 20             	sub    esp,0x20
c001b23a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b23e:	50                   	push   eax
c001b23f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b247:	e8 7f fe ff ff       	call   c001b0cb <Reg::readInt(char*, char*, int*)>
c001b24c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b251:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b255:	0f 95 02             	setne  BYTE PTR [edx]
c001b258:	83 c4 2c             	add    esp,0x2c
c001b25b:	c3                   	ret    

c001b25c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b25c:	53                   	push   ebx
c001b25d:	83 ec 1c             	sub    esp,0x1c
c001b260:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b264:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b268:	50                   	push   eax
c001b269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b271:	e8 c1 ff ff ff       	call   c001b237 <Reg::readBool(char*, char*, bool*)>
c001b276:	83 c4 10             	add    esp,0x10
c001b279:	84 c0                	test   al,al
c001b27b:	74 04                	je     c001b281 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b27d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b281:	88 d8                	mov    al,bl
c001b283:	83 c4 18             	add    esp,0x18
c001b286:	5b                   	pop    ebx
c001b287:	c3                   	ret    

c001b288 <Reg::readIntWithDefault(char*, char*, int)>:
c001b288:	53                   	push   ebx
c001b289:	83 ec 1c             	sub    esp,0x1c
c001b28c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b290:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b294:	50                   	push   eax
c001b295:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b299:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b29d:	e8 29 fe ff ff       	call   c001b0cb <Reg::readInt(char*, char*, int*)>
c001b2a2:	83 c4 10             	add    esp,0x10
c001b2a5:	84 c0                	test   al,al
c001b2a7:	74 04                	je     c001b2ad <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2ad:	89 d8                	mov    eax,ebx
c001b2af:	83 c4 18             	add    esp,0x18
c001b2b2:	5b                   	pop    ebx
c001b2b3:	c3                   	ret    

c001b2b4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2b4:	57                   	push   edi
c001b2b5:	56                   	push   esi
c001b2b6:	53                   	push   ebx
c001b2b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2bf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2c3:	56                   	push   esi
c001b2c4:	53                   	push   ebx
c001b2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2cd:	e8 e4 fe ff ff       	call   c001b1b6 <Reg::readString(char*, char*, char*, int)>
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	84 c0                	test   al,al
c001b2d7:	75 1b                	jne    c001b2f4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2d9:	50                   	push   eax
c001b2da:	56                   	push   esi
c001b2db:	4e                   	dec    esi
c001b2dc:	6a 00                	push   0x0
c001b2de:	53                   	push   ebx
c001b2df:	e8 94 54 fe ff       	call   c0000778 <memset>
c001b2e4:	83 c4 0c             	add    esp,0xc
c001b2e7:	56                   	push   esi
c001b2e8:	57                   	push   edi
c001b2e9:	53                   	push   ebx
c001b2ea:	89 fb                	mov    ebx,edi
c001b2ec:	e8 53 54 fe ff       	call   c0000744 <memcpy>
c001b2f1:	83 c4 10             	add    esp,0x10
c001b2f4:	89 d8                	mov    eax,ebx
c001b2f6:	5b                   	pop    ebx
c001b2f7:	5e                   	pop    esi
c001b2f8:	5f                   	pop    edi
c001b2f9:	c3                   	ret    

c001b2fa <Sys::eject(regs*)>:
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	83 ca ff             	or     edx,0xffffffff
c001b300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b304:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b307:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b30c:	83 e9 41             	sub    ecx,0x41
c001b30f:	83 f9 19             	cmp    ecx,0x19
c001b312:	77 18                	ja     c001b32c <Sys::eject(regs*)+0x32>
c001b314:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c001b31b:	85 c9                	test   ecx,ecx
c001b31d:	74 0d                	je     c001b32c <Sys::eject(regs*)+0x32>
c001b31f:	83 ec 0c             	sub    esp,0xc
c001b322:	51                   	push   ecx
c001b323:	e8 78 b4 ff ff       	call   c00167a0 <LogicalDisk::eject()>
c001b328:	83 c4 10             	add    esp,0x10
c001b32b:	99                   	cdq    
c001b32c:	83 c4 0c             	add    esp,0xc
c001b32f:	c3                   	ret    

c001b330 <Sys::exit(regs*)>:
c001b330:	83 ec 18             	sub    esp,0x18
c001b333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b337:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b33a:	e8 7a 35 00 00       	call   c001e8b9 <terminateTask(int)>
c001b33f:	83 c8 ff             	or     eax,0xffffffff
c001b342:	83 c4 1c             	add    esp,0x1c
c001b345:	89 c2                	mov    edx,eax
c001b347:	c3                   	ret    

c001b348 <Sys::getCwd(regs*)>:
c001b348:	83 ec 10             	sub    esp,0x10
c001b34b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b34f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b352:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b35a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b35d:	e8 e2 7f ff ff       	call   c0013344 <Fs::getcwd(Process*, char*, int)>
c001b362:	83 c4 1c             	add    esp,0x1c
c001b365:	99                   	cdq    
c001b366:	c3                   	ret    

c001b367 <Sys::getPID(regs*)>:
c001b367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b36c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b36f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b371:	99                   	cdq    
c001b372:	c3                   	ret    

c001b373 <Sys::getRAMData(regs*)>:
c001b373:	8b 0d 74 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e574
c001b379:	6b 05 70 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e570,0x64
c001b380:	99                   	cdq    
c001b381:	f7 f9                	idiv   ecx
c001b383:	c1 e0 18             	shl    eax,0x18
c001b386:	09 c8                	or     eax,ecx
c001b388:	99                   	cdq    
c001b389:	c3                   	ret    

c001b38a <Sys::loadDLL(regs*)>:
c001b38a:	56                   	push   esi
c001b38b:	53                   	push   ebx
c001b38c:	31 d2                	xor    edx,edx
c001b38e:	51                   	push   ecx
c001b38f:	b8 01 00 00 00       	mov    eax,0x1
c001b394:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b398:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b39c:	0f 84 8c 00 00 00    	je     c001b42e <Sys::loadDLL(regs*)+0xa4>
c001b3a2:	83 ec 0c             	sub    esp,0xc
c001b3a5:	68 14 01 00 00       	push   0x114
c001b3aa:	e8 91 44 ff ff       	call   c000f840 <malloc>
c001b3af:	83 c4 0c             	add    esp,0xc
c001b3b2:	89 c3                	mov    ebx,eax
c001b3b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3bc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3bf:	53                   	push   ebx
c001b3c0:	e8 7d 81 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	31 d2                	xor    edx,edx
c001b3ca:	b8 02 00 00 00       	mov    eax,0x2
c001b3cf:	85 db                	test   ebx,ebx
c001b3d1:	74 5b                	je     c001b42e <Sys::loadDLL(regs*)+0xa4>
c001b3d3:	83 ec 0c             	sub    esp,0xc
c001b3d6:	53                   	push   ebx
c001b3d7:	e8 38 84 ff ff       	call   c0013814 <File::exists()>
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	84 c0                	test   al,al
c001b3e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3e3:	75 11                	jne    c001b3f6 <Sys::loadDLL(regs*)+0x6c>
c001b3e5:	83 ec 0c             	sub    esp,0xc
c001b3e8:	53                   	push   ebx
c001b3e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	b8 03 00 00 00       	mov    eax,0x3
c001b3f4:	eb 36                	jmp    c001b42c <Sys::loadDLL(regs*)+0xa2>
c001b3f6:	83 ec 0c             	sub    esp,0xc
c001b3f9:	53                   	push   ebx
c001b3fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3fd:	58                   	pop    eax
c001b3fe:	5a                   	pop    edx
c001b3ff:	6a 00                	push   0x0
c001b401:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b404:	e8 c5 23 00 00       	call   c001d7ce <Thr::loadDLL(char const*, bool)>
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	89 c1                	mov    ecx,eax
c001b40e:	31 d2                	xor    edx,edx
c001b410:	b8 04 00 00 00       	mov    eax,0x4
c001b415:	85 c9                	test   ecx,ecx
c001b417:	74 15                	je     c001b42e <Sys::loadDLL(regs*)+0xa4>
c001b419:	53                   	push   ebx
c001b41a:	53                   	push   ebx
c001b41b:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c001b421:	51                   	push   ecx
c001b422:	e8 db 25 00 00       	call   c001da02 <Thr::executeDLL(unsigned long, void*)>
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	31 c0                	xor    eax,eax
c001b42c:	31 d2                	xor    edx,edx
c001b42e:	59                   	pop    ecx
c001b42f:	5b                   	pop    ebx
c001b430:	5e                   	pop    esi
c001b431:	c3                   	ret    

c001b432 <Sys::read(regs*)>:
c001b432:	57                   	push   edi
c001b433:	56                   	push   esi
c001b434:	53                   	push   ebx
c001b435:	83 ec 10             	sub    esp,0x10
c001b438:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b43c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b43f:	83 f8 02             	cmp    eax,0x2
c001b442:	77 10                	ja     c001b454 <Sys::read(regs*)+0x22>
c001b444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b449:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b44c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b452:	eb 0e                	jmp    c001b462 <Sys::read(regs*)+0x30>
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	50                   	push   eax
c001b458:	e8 30 66 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	89 c1                	mov    ecx,eax
c001b462:	83 c8 ff             	or     eax,0xffffffff
c001b465:	85 c9                	test   ecx,ecx
c001b467:	89 c2                	mov    edx,eax
c001b469:	74 28                	je     c001b493 <Sys::read(regs*)+0x61>
c001b46b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b473:	31 ff                	xor    edi,edi
c001b475:	83 ec 0c             	sub    esp,0xc
c001b478:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b47a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b47e:	52                   	push   edx
c001b47f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b482:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b485:	57                   	push   edi
c001b486:	56                   	push   esi
c001b487:	51                   	push   ecx
c001b488:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b48b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b48f:	83 c4 20             	add    esp,0x20
c001b492:	99                   	cdq    
c001b493:	83 c4 10             	add    esp,0x10
c001b496:	5b                   	pop    ebx
c001b497:	5e                   	pop    esi
c001b498:	5f                   	pop    edi
c001b499:	c3                   	ret    

c001b49a <Sys::sbrk(regs*)>:
c001b49a:	56                   	push   esi
c001b49b:	53                   	push   ebx
c001b49c:	50                   	push   eax
c001b49d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4a9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4ac:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4b2:	85 db                	test   ebx,ebx
c001b4b4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b4b7:	74 02                	je     c001b4bb <Sys::sbrk(regs*)+0x21>
c001b4b9:	79 06                	jns    c001b4c1 <Sys::sbrk(regs*)+0x27>
c001b4bb:	89 f0                	mov    eax,esi
c001b4bd:	31 d2                	xor    edx,edx
c001b4bf:	eb 2a                	jmp    c001b4eb <Sys::sbrk(regs*)+0x51>
c001b4c1:	83 c8 ff             	or     eax,0xffffffff
c001b4c4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b4ca:	89 c2                	mov    edx,eax
c001b4cc:	77 1d                	ja     c001b4eb <Sys::sbrk(regs*)+0x51>
c001b4ce:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b4d4:	50                   	push   eax
c001b4d5:	c1 ea 0c             	shr    edx,0xc
c001b4d8:	68 07 04 00 00       	push   0x407
c001b4dd:	52                   	push   edx
c001b4de:	51                   	push   ecx
c001b4df:	e8 d6 6f ff ff       	call   c00124ba <VAS::allocatePages(int, int)>
c001b4e4:	89 f0                	mov    eax,esi
c001b4e6:	31 d2                	xor    edx,edx
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	59                   	pop    ecx
c001b4ec:	5b                   	pop    ebx
c001b4ed:	5e                   	pop    esi
c001b4ee:	c3                   	ret    

c001b4ef <Sys::setCwd(regs*)>:
c001b4ef:	83 ec 14             	sub    esp,0x14
c001b4f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b501:	e8 ad 83 ff ff       	call   c00138b3 <Fs::setcwd(Process*, char*)>
c001b506:	83 c4 1c             	add    esp,0x1c
c001b509:	99                   	cdq    
c001b50a:	c3                   	ret    

c001b50b <Sys::setTime(regs*)>:
c001b50b:	55                   	push   ebp
c001b50c:	31 d2                	xor    edx,edx
c001b50e:	57                   	push   edi
c001b50f:	bf 18 00 00 00       	mov    edi,0x18
c001b514:	56                   	push   esi
c001b515:	53                   	push   ebx
c001b516:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b51b:	83 ec 30             	sub    esp,0x30
c001b51e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b522:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b525:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b528:	f7 f3                	div    ebx
c001b52a:	89 d6                	mov    esi,edx
c001b52c:	31 d2                	xor    edx,edx
c001b52e:	f7 f3                	div    ebx
c001b530:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b533:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b537:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b53c:	31 d2                	xor    edx,edx
c001b53e:	f7 f3                	div    ebx
c001b540:	31 d2                	xor    edx,edx
c001b542:	bb 0c 00 00 00       	mov    ebx,0xc
c001b547:	f7 f7                	div    edi
c001b549:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b54c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b550:	0f b7 cd             	movzx  ecx,bp
c001b553:	56                   	push   esi
c001b554:	89 c7                	mov    edi,eax
c001b556:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b55a:	c1 e6 10             	shl    esi,0x10
c001b55d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b561:	83 e7 1f             	and    edi,0x1f
c001b564:	51                   	push   ecx
c001b565:	47                   	inc    edi
c001b566:	c1 e8 05             	shr    eax,0x5
c001b569:	31 d2                	xor    edx,edx
c001b56b:	f7 f3                	div    ebx
c001b56d:	31 db                	xor    ebx,ebx
c001b56f:	52                   	push   edx
c001b570:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b574:	57                   	push   edi
c001b575:	68 55 be 02 c0       	push   0xc002be55
c001b57a:	e8 6b 7a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b57f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b583:	89 f8                	mov    eax,edi
c001b585:	31 c9                	xor    ecx,ecx
c001b587:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b58b:	88 c1                	mov    cl,al
c001b58d:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b593:	88 d5                	mov    ch,dl
c001b595:	c1 e0 10             	shl    eax,0x10
c001b598:	0f b7 d1             	movzx  edx,cx
c001b59b:	09 c2                	or     edx,eax
c001b59d:	89 d8                	mov    eax,ebx
c001b59f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5a4:	09 f0                	or     eax,esi
c001b5a6:	89 c3                	mov    ebx,eax
c001b5a8:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5ac:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5b0:	83 c4 18             	add    esp,0x18
c001b5b3:	53                   	push   ebx
c001b5b4:	52                   	push   edx
c001b5b5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5b9:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5bd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5c1:	e8 07 8a ff ff       	call   c0013fcd <datetimeToSeconds(datetime_t)>
c001b5c6:	83 c4 0c             	add    esp,0xc
c001b5c9:	52                   	push   edx
c001b5ca:	50                   	push   eax
c001b5cb:	56                   	push   esi
c001b5cc:	e8 83 8b ff ff       	call   c0014154 <secondsToDatetime(unsigned long long)>
c001b5d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5d9:	51                   	push   ecx
c001b5da:	89 d6                	mov    esi,edx
c001b5dc:	51                   	push   ecx
c001b5dd:	c1 ee 10             	shr    esi,0x10
c001b5e0:	89 f3                	mov    ebx,esi
c001b5e2:	0f b6 f3             	movzx  esi,bl
c001b5e5:	56                   	push   esi
c001b5e6:	0f b6 f6             	movzx  esi,dh
c001b5e9:	0f b6 d2             	movzx  edx,dl
c001b5ec:	56                   	push   esi
c001b5ed:	52                   	push   edx
c001b5ee:	89 c2                	mov    edx,eax
c001b5f0:	c1 ea 10             	shr    edx,0x10
c001b5f3:	52                   	push   edx
c001b5f4:	0f b6 d4             	movzx  edx,ah
c001b5f7:	0f b6 c0             	movzx  eax,al
c001b5fa:	52                   	push   edx
c001b5fb:	50                   	push   eax
c001b5fc:	68 71 be 02 c0       	push   0xc002be71
c001b601:	e8 e4 79 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b606:	83 c4 2c             	add    esp,0x2c
c001b609:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001b60e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b612:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b616:	53                   	push   ebx
c001b617:	51                   	push   ecx
c001b618:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b61e:	e8 d1 8a ff ff       	call   c00140f4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b623:	83 f0 01             	xor    eax,0x1
c001b626:	31 d2                	xor    edx,edx
c001b628:	0f b6 c0             	movzx  eax,al
c001b62b:	83 c4 3c             	add    esp,0x3c
c001b62e:	5b                   	pop    ebx
c001b62f:	5e                   	pop    esi
c001b630:	5f                   	pop    edi
c001b631:	5d                   	pop    ebp
c001b632:	c3                   	ret    

c001b633 <Sys::timezone(regs*)>:
c001b633:	53                   	push   ebx
c001b634:	83 ec 08             	sub    esp,0x8
c001b637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b63b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b63f:	75 17                	jne    c001b658 <Sys::timezone(regs*)+0x25>
c001b641:	83 ec 0c             	sub    esp,0xc
c001b644:	68 8d be 02 c0       	push   0xc002be8d
c001b649:	e8 9c 79 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b64e:	83 c8 ff             	or     eax,0xffffffff
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	89 c2                	mov    edx,eax
c001b656:	eb 20                	jmp    c001b678 <Sys::timezone(regs*)+0x45>
c001b658:	83 ec 0c             	sub    esp,0xc
c001b65b:	68 c5 be 02 c0       	push   0xc002bec5
c001b660:	e8 85 79 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b665:	58                   	pop    eax
c001b666:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b669:	e8 e8 87 ff ff       	call   c0013e56 <User::loadClockSettings(int)>
c001b66e:	83 c4 10             	add    esp,0x10
c001b671:	b8 01 00 00 00       	mov    eax,0x1
c001b676:	31 d2                	xor    edx,edx
c001b678:	83 c4 08             	add    esp,0x8
c001b67b:	5b                   	pop    ebx
c001b67c:	c3                   	ret    

c001b67d <Sys::write(regs*)>:
c001b67d:	57                   	push   edi
c001b67e:	56                   	push   esi
c001b67f:	53                   	push   ebx
c001b680:	83 ec 10             	sub    esp,0x10
c001b683:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b687:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b68a:	83 f8 02             	cmp    eax,0x2
c001b68d:	77 10                	ja     c001b69f <Sys::write(regs*)+0x22>
c001b68f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b694:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b697:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b69d:	eb 0e                	jmp    c001b6ad <Sys::write(regs*)+0x30>
c001b69f:	83 ec 0c             	sub    esp,0xc
c001b6a2:	50                   	push   eax
c001b6a3:	e8 e5 63 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	89 c1                	mov    ecx,eax
c001b6ad:	83 c8 ff             	or     eax,0xffffffff
c001b6b0:	85 c9                	test   ecx,ecx
c001b6b2:	89 c2                	mov    edx,eax
c001b6b4:	74 28                	je     c001b6de <Sys::write(regs*)+0x61>
c001b6b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6be:	31 ff                	xor    edi,edi
c001b6c0:	83 ec 0c             	sub    esp,0xc
c001b6c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6c9:	52                   	push   edx
c001b6ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6cd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6d0:	57                   	push   edi
c001b6d1:	56                   	push   esi
c001b6d2:	51                   	push   ecx
c001b6d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6da:	83 c4 20             	add    esp,0x20
c001b6dd:	99                   	cdq    
c001b6de:	83 c4 10             	add    esp,0x10
c001b6e1:	5b                   	pop    ebx
c001b6e2:	5e                   	pop    esi
c001b6e3:	5f                   	pop    edi
c001b6e4:	c3                   	ret    

c001b6e5 <Sys::wsbe(regs*)>:
c001b6e5:	57                   	push   edi
c001b6e6:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6eb:	56                   	push   esi
c001b6ec:	be 04 bf 02 c0       	mov    esi,0xc002bf04
c001b6f1:	53                   	push   ebx
c001b6f2:	83 ec 30             	sub    esp,0x30
c001b6f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6f9:	fc                   	cld    
c001b6fa:	83 ec 0c             	sub    esp,0xc
c001b6fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6ff:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b703:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b708:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b70b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b711:	8b 06                	mov    eax,DWORD PTR [esi]
c001b713:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b716:	57                   	push   edi
c001b717:	e8 78 50 fe ff       	call   c0000794 <strlen>
c001b71c:	5a                   	pop    edx
c001b71d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b721:	52                   	push   edx
c001b722:	31 d2                	xor    edx,edx
c001b724:	57                   	push   edi
c001b725:	52                   	push   edx
c001b726:	50                   	push   eax
c001b727:	56                   	push   esi
c001b728:	ff d3                	call   ebx
c001b72a:	83 c4 14             	add    esp,0x14
c001b72d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b731:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b734:	e8 80 31 00 00       	call   c001e8b9 <terminateTask(int)>
c001b739:	83 c4 40             	add    esp,0x40
c001b73c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b741:	5b                   	pop    ebx
c001b742:	31 d2                	xor    edx,edx
c001b744:	5e                   	pop    esi
c001b745:	5f                   	pop    edi
c001b746:	c3                   	ret    

c001b747 <Sys::yield(regs*)>:
c001b747:	57                   	push   edi
c001b748:	56                   	push   esi
c001b749:	53                   	push   ebx
c001b74a:	e8 27 27 00 00       	call   c001de76 <lockScheduler()>
c001b74f:	e8 5e 2a 00 00       	call   c001e1b2 <schedule()>
c001b754:	e8 1f 27 00 00       	call   c001de78 <unlockScheduler()>
c001b759:	8b 35 b0 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebb0
c001b75f:	8b 3d b4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebb4
c001b765:	89 f0                	mov    eax,esi
c001b767:	89 fb                	mov    ebx,edi
c001b769:	89 f1                	mov    ecx,esi
c001b76b:	c1 e0 07             	shl    eax,0x7
c001b76e:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b772:	25 80 30 0f 00       	and    eax,0xf3080
c001b777:	c1 eb 17             	shr    ebx,0x17
c001b77a:	31 c8                	xor    eax,ecx
c001b77c:	89 da                	mov    edx,ebx
c001b77e:	5b                   	pop    ebx
c001b77f:	5e                   	pop    esi
c001b780:	5f                   	pop    edi
c001b781:	c3                   	ret    

c001b782 <sysCallSeekDir(regs*)>:
c001b782:	31 c0                	xor    eax,eax
c001b784:	31 d2                	xor    edx,edx
c001b786:	c3                   	ret    

c001b787 <sysCallTellDir(regs*)>:
c001b787:	31 c0                	xor    eax,eax
c001b789:	31 d2                	xor    edx,edx
c001b78b:	c3                   	ret    

c001b78c <sysCallVerify(regs*)>:
c001b78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b790:	31 d2                	xor    edx,edx
c001b792:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b795:	c3                   	ret    

c001b796 <sysFormatDisk(regs*)>:
c001b796:	56                   	push   esi
c001b797:	53                   	push   ebx
c001b798:	53                   	push   ebx
c001b799:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b79d:	8b 1d b0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6b0
c001b7a3:	eb 25                	jmp    c001b7ca <sysFormatDisk(regs*)+0x34>
c001b7a5:	83 ec 0c             	sub    esp,0xc
c001b7a8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7ad:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7b0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7b3:	50                   	push   eax
c001b7b4:	ff 34 85 40 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14c0]
c001b7bb:	53                   	push   ebx
c001b7bc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7bf:	83 c4 20             	add    esp,0x20
c001b7c2:	83 f8 08             	cmp    eax,0x8
c001b7c5:	75 12                	jne    c001b7d9 <sysFormatDisk(regs*)+0x43>
c001b7c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7ca:	85 db                	test   ebx,ebx
c001b7cc:	75 d7                	jne    c001b7a5 <sysFormatDisk(regs*)+0xf>
c001b7ce:	59                   	pop    ecx
c001b7cf:	b8 03 00 00 00       	mov    eax,0x3
c001b7d4:	31 d2                	xor    edx,edx
c001b7d6:	5b                   	pop    ebx
c001b7d7:	5e                   	pop    esi
c001b7d8:	c3                   	ret    
c001b7d9:	85 c0                	test   eax,eax
c001b7db:	74 1b                	je     c001b7f8 <sysFormatDisk(regs*)+0x62>
c001b7dd:	83 f8 09             	cmp    eax,0x9
c001b7e0:	74 0b                	je     c001b7ed <sysFormatDisk(regs*)+0x57>
c001b7e2:	59                   	pop    ecx
c001b7e3:	b8 02 00 00 00       	mov    eax,0x2
c001b7e8:	31 d2                	xor    edx,edx
c001b7ea:	5b                   	pop    ebx
c001b7eb:	5e                   	pop    esi
c001b7ec:	c3                   	ret    
c001b7ed:	59                   	pop    ecx
c001b7ee:	b8 01 00 00 00       	mov    eax,0x1
c001b7f3:	31 d2                	xor    edx,edx
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	c3                   	ret    
c001b7f8:	59                   	pop    ecx
c001b7f9:	31 c0                	xor    eax,eax
c001b7fb:	31 d2                	xor    edx,edx
c001b7fd:	5b                   	pop    ebx
c001b7fe:	5e                   	pop    esi
c001b7ff:	c3                   	ret    

c001b800 <sysSetDiskVolumeLabel(regs*)>:
c001b800:	56                   	push   esi
c001b801:	53                   	push   ebx
c001b802:	53                   	push   ebx
c001b803:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b807:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b80a:	83 f8 19             	cmp    eax,0x19
c001b80d:	77 29                	ja     c001b838 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b80f:	8b 0c 85 40 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd14c0]
c001b816:	85 c9                	test   ecx,ecx
c001b818:	74 1e                	je     c001b838 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b81a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b81d:	85 d2                	test   edx,edx
c001b81f:	74 17                	je     c001b838 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b821:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b827:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b829:	52                   	push   edx
c001b82a:	50                   	push   eax
c001b82b:	51                   	push   ecx
c001b82c:	53                   	push   ebx
c001b82d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	99                   	cdq    
c001b834:	59                   	pop    ecx
c001b835:	5b                   	pop    ebx
c001b836:	5e                   	pop    esi
c001b837:	c3                   	ret    
c001b838:	59                   	pop    ecx
c001b839:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b83e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b843:	5b                   	pop    ebx
c001b844:	5e                   	pop    esi
c001b845:	c3                   	ret    

c001b846 <sysGetDiskVolumeLabel(regs*)>:
c001b846:	57                   	push   edi
c001b847:	56                   	push   esi
c001b848:	53                   	push   ebx
c001b849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b850:	83 fa 19             	cmp    edx,0x19
c001b853:	77 34                	ja     c001b889 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b855:	8b 0c 95 40 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd14c0]
c001b85c:	85 c9                	test   ecx,ecx
c001b85e:	74 29                	je     c001b889 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b860:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b863:	85 db                	test   ebx,ebx
c001b865:	74 22                	je     c001b889 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b867:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b86a:	85 c0                	test   eax,eax
c001b86c:	74 1b                	je     c001b889 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b86e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b874:	83 ec 0c             	sub    esp,0xc
c001b877:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b879:	50                   	push   eax
c001b87a:	53                   	push   ebx
c001b87b:	52                   	push   edx
c001b87c:	51                   	push   ecx
c001b87d:	56                   	push   esi
c001b87e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b881:	83 c4 20             	add    esp,0x20
c001b884:	99                   	cdq    
c001b885:	5b                   	pop    ebx
c001b886:	5e                   	pop    esi
c001b887:	5f                   	pop    edi
c001b888:	c3                   	ret    
c001b889:	5b                   	pop    ebx
c001b88a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b88f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b894:	5e                   	pop    esi
c001b895:	5f                   	pop    edi
c001b896:	c3                   	ret    

c001b897 <sysShutdown(regs*)>:
c001b897:	83 ec 0c             	sub    esp,0xc
c001b89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8a1:	85 c0                	test   eax,eax
c001b8a3:	74 18                	je     c001b8bd <sysShutdown(regs*)+0x26>
c001b8a5:	83 f8 01             	cmp    eax,0x1
c001b8a8:	74 38                	je     c001b8e2 <sysShutdown(regs*)+0x4b>
c001b8aa:	83 f8 02             	cmp    eax,0x2
c001b8ad:	74 24                	je     c001b8d3 <sysShutdown(regs*)+0x3c>
c001b8af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b9:	83 c4 0c             	add    esp,0xc
c001b8bc:	c3                   	ret    
c001b8bd:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001b8c2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8c4:	6a 00                	push   0x0
c001b8c6:	6a 00                	push   0x0
c001b8c8:	6a 00                	push   0x0
c001b8ca:	50                   	push   eax
c001b8cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8ce:	83 c4 10             	add    esp,0x10
c001b8d1:	eb dc                	jmp    c001b8af <sysShutdown(regs*)+0x18>
c001b8d3:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001b8d8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8da:	6a 00                	push   0x0
c001b8dc:	6a 00                	push   0x0
c001b8de:	6a 01                	push   0x1
c001b8e0:	eb e8                	jmp    c001b8ca <sysShutdown(regs*)+0x33>
c001b8e2:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c001b8e7:	85 c0                	test   eax,eax
c001b8e9:	74 02                	je     c001b8ed <sysShutdown(regs*)+0x56>
c001b8eb:	ff d0                	call   eax
c001b8ed:	31 c0                	xor    eax,eax
c001b8ef:	31 d2                	xor    edx,edx
c001b8f1:	83 c4 0c             	add    esp,0xc
c001b8f4:	c3                   	ret    

c001b8f5 <sysCallRealpath(regs*)>:
c001b8f5:	83 ec 0c             	sub    esp,0xc
c001b8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8fc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8ff:	85 d2                	test   edx,edx
c001b901:	74 07                	je     c001b90a <sysCallRealpath(regs*)+0x15>
c001b903:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b906:	85 c0                	test   eax,eax
c001b908:	75 0b                	jne    c001b915 <sysCallRealpath(regs*)+0x20>
c001b90a:	b8 01 00 00 00       	mov    eax,0x1
c001b90f:	31 d2                	xor    edx,edx
c001b911:	83 c4 0c             	add    esp,0xc
c001b914:	c3                   	ret    
c001b915:	51                   	push   ecx
c001b916:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b91c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b91f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b925:	51                   	push   ecx
c001b926:	52                   	push   edx
c001b927:	50                   	push   eax
c001b928:	e8 6b 7a ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b92d:	83 c4 10             	add    esp,0x10
c001b930:	31 c0                	xor    eax,eax
c001b932:	31 d2                	xor    edx,edx
c001b934:	83 c4 0c             	add    esp,0xc
c001b937:	c3                   	ret    

c001b938 <sysCallGetArgc(regs*)>:
c001b938:	83 ec 14             	sub    esp,0x14
c001b93b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b940:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b943:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b949:	68 30 bf 02 c0       	push   0xc002bf30
c001b94e:	e8 97 76 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b958:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b95b:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b961:	83 c4 1c             	add    esp,0x1c
c001b964:	99                   	cdq    
c001b965:	c3                   	ret    

c001b966 <sysCallReadDir(regs*)>:
c001b966:	53                   	push   ebx
c001b967:	83 ec 18             	sub    esp,0x18
c001b96a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b96e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b971:	83 f8 02             	cmp    eax,0x2
c001b974:	76 53                	jbe    c001b9c9 <sysCallReadDir(regs*)+0x63>
c001b976:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b979:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b97f:	77 4f                	ja     c001b9d0 <sysCallReadDir(regs*)+0x6a>
c001b981:	83 ec 0c             	sub    esp,0xc
c001b984:	50                   	push   eax
c001b985:	e8 03 61 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	85 c0                	test   eax,eax
c001b98f:	74 50                	je     c001b9e1 <sysCallReadDir(regs*)+0x7b>
c001b991:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b999:	83 ec 0c             	sub    esp,0xc
c001b99c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b99e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9a2:	51                   	push   ecx
c001b9a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9a6:	6a 00                	push   0x0
c001b9a8:	68 10 01 00 00       	push   0x110
c001b9ad:	50                   	push   eax
c001b9ae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9b1:	83 c4 20             	add    esp,0x20
c001b9b4:	85 c0                	test   eax,eax
c001b9b6:	74 38                	je     c001b9f0 <sysCallReadDir(regs*)+0x8a>
c001b9b8:	83 f8 07             	cmp    eax,0x7
c001b9bb:	74 0c                	je     c001b9c9 <sysCallReadDir(regs*)+0x63>
c001b9bd:	b8 02 00 00 00       	mov    eax,0x2
c001b9c2:	31 d2                	xor    edx,edx
c001b9c4:	83 c4 18             	add    esp,0x18
c001b9c7:	5b                   	pop    ebx
c001b9c8:	c3                   	ret    
c001b9c9:	b8 01 00 00 00       	mov    eax,0x1
c001b9ce:	eb f2                	jmp    c001b9c2 <sysCallReadDir(regs*)+0x5c>
c001b9d0:	83 ec 08             	sub    esp,0x8
c001b9d3:	52                   	push   edx
c001b9d4:	68 48 c0 02 c0       	push   0xc002c048
c001b9d9:	e8 0c 76 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b9de:	83 c4 10             	add    esp,0x10
c001b9e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9eb:	83 c4 18             	add    esp,0x18
c001b9ee:	5b                   	pop    ebx
c001b9ef:	c3                   	ret    
c001b9f0:	31 c0                	xor    eax,eax
c001b9f2:	eb ce                	jmp    c001b9c2 <sysCallReadDir(regs*)+0x5c>

c001b9f4 <sysCallIsATTY(regs*)>:
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9fe:	83 f8 02             	cmp    eax,0x2
c001ba01:	76 07                	jbe    c001ba0a <sysCallIsATTY(regs*)+0x16>
c001ba03:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba08:	75 26                	jne    c001ba30 <sysCallIsATTY(regs*)+0x3c>
c001ba0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba12:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba18:	85 c0                	test   eax,eax
c001ba1a:	74 24                	je     c001ba40 <sysCallIsATTY(regs*)+0x4c>
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba21:	50                   	push   eax
c001ba22:	ff 12                	call   DWORD PTR [edx]
c001ba24:	31 d2                	xor    edx,edx
c001ba26:	0f b6 c0             	movzx  eax,al
c001ba29:	83 c4 10             	add    esp,0x10
c001ba2c:	83 c4 0c             	add    esp,0xc
c001ba2f:	c3                   	ret    
c001ba30:	83 ec 0c             	sub    esp,0xc
c001ba33:	50                   	push   eax
c001ba34:	e8 54 60 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	85 c0                	test   eax,eax
c001ba3e:	75 dc                	jne    c001ba1c <sysCallIsATTY(regs*)+0x28>
c001ba40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba4a:	83 c4 0c             	add    esp,0xc
c001ba4d:	c3                   	ret    

c001ba4e <sysCallSeek(regs*)>:
c001ba4e:	53                   	push   ebx
c001ba4f:	83 ec 08             	sub    esp,0x8
c001ba52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba59:	83 f8 02             	cmp    eax,0x2
c001ba5c:	76 4a                	jbe    c001baa8 <sysCallSeek(regs*)+0x5a>
c001ba5e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba63:	77 32                	ja     c001ba97 <sysCallSeek(regs*)+0x49>
c001ba65:	83 ec 0c             	sub    esp,0xc
c001ba68:	50                   	push   eax
c001ba69:	e8 1f 60 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001ba6e:	83 c4 0c             	add    esp,0xc
c001ba71:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba74:	31 db                	xor    ebx,ebx
c001ba76:	53                   	push   ebx
c001ba77:	51                   	push   ecx
c001ba78:	50                   	push   eax
c001ba79:	e8 e6 7b ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001ba7e:	83 c4 10             	add    esp,0x10
c001ba81:	85 c0                	test   eax,eax
c001ba83:	0f 95 c0             	setne  al
c001ba86:	31 d2                	xor    edx,edx
c001ba88:	0f b6 c0             	movzx  eax,al
c001ba8b:	f7 d8                	neg    eax
c001ba8d:	83 d2 00             	adc    edx,0x0
c001ba90:	83 c4 08             	add    esp,0x8
c001ba93:	f7 da                	neg    edx
c001ba95:	5b                   	pop    ebx
c001ba96:	c3                   	ret    
c001ba97:	83 ec 08             	sub    esp,0x8
c001ba9a:	50                   	push   eax
c001ba9b:	68 3b bf 02 c0       	push   0xc002bf3b
c001baa0:	e8 45 75 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001baa5:	83 c4 10             	add    esp,0x10
c001baa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab2:	83 c4 08             	add    esp,0x8
c001bab5:	5b                   	pop    ebx
c001bab6:	c3                   	ret    

c001bab7 <sysCallTell(regs*)>:
c001bab7:	53                   	push   ebx
c001bab8:	83 ec 08             	sub    esp,0x8
c001babb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001babf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bac2:	83 f8 02             	cmp    eax,0x2
c001bac5:	76 5e                	jbe    c001bb25 <sysCallTell(regs*)+0x6e>
c001bac7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bacc:	77 2d                	ja     c001bafb <sysCallTell(regs*)+0x44>
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	50                   	push   eax
c001bad2:	e8 b6 5f ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bad7:	5a                   	pop    edx
c001bad8:	59                   	pop    ecx
c001bad9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001badc:	50                   	push   eax
c001badd:	e8 d8 7b ff ff       	call   c00136ba <File::tell(unsigned long long*)>
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	85 c0                	test   eax,eax
c001bae7:	0f 95 c0             	setne  al
c001baea:	31 d2                	xor    edx,edx
c001baec:	0f b6 c0             	movzx  eax,al
c001baef:	f7 d8                	neg    eax
c001baf1:	83 d2 00             	adc    edx,0x0
c001baf4:	83 c4 08             	add    esp,0x8
c001baf7:	f7 da                	neg    edx
c001baf9:	5b                   	pop    ebx
c001bafa:	c3                   	ret    
c001bafb:	83 ec 08             	sub    esp,0x8
c001bafe:	50                   	push   eax
c001baff:	68 55 bf 02 c0       	push   0xc002bf55
c001bb04:	e8 e1 74 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bb09:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb1c:	31 d2                	xor    edx,edx
c001bb1e:	31 c0                	xor    eax,eax
c001bb20:	83 c4 08             	add    esp,0x8
c001bb23:	5b                   	pop    ebx
c001bb24:	c3                   	ret    
c001bb25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb2f:	83 c4 08             	add    esp,0x8
c001bb32:	5b                   	pop    ebx
c001bb33:	c3                   	ret    

c001bb34 <sysCallSize(regs*)>:
c001bb34:	53                   	push   ebx
c001bb35:	83 ec 18             	sub    esp,0x18
c001bb38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb3c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb3f:	83 f8 02             	cmp    eax,0x2
c001bb42:	76 64                	jbe    c001bba8 <sysCallSize(regs*)+0x74>
c001bb44:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb49:	77 33                	ja     c001bb7e <sysCallSize(regs*)+0x4a>
c001bb4b:	83 ec 0c             	sub    esp,0xc
c001bb4e:	50                   	push   eax
c001bb4f:	e8 39 5f ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bb54:	83 c4 0c             	add    esp,0xc
c001bb57:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb5b:	52                   	push   edx
c001bb5c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb5f:	50                   	push   eax
c001bb60:	e8 ed 7c ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001bb65:	83 c4 10             	add    esp,0x10
c001bb68:	85 c0                	test   eax,eax
c001bb6a:	0f 95 c0             	setne  al
c001bb6d:	31 d2                	xor    edx,edx
c001bb6f:	0f b6 c0             	movzx  eax,al
c001bb72:	f7 d8                	neg    eax
c001bb74:	83 d2 00             	adc    edx,0x0
c001bb77:	83 c4 18             	add    esp,0x18
c001bb7a:	f7 da                	neg    edx
c001bb7c:	5b                   	pop    ebx
c001bb7d:	c3                   	ret    
c001bb7e:	83 ec 08             	sub    esp,0x8
c001bb81:	50                   	push   eax
c001bb82:	68 6f bf 02 c0       	push   0xc002bf6f
c001bb87:	e8 5e 74 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bb8c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb9f:	31 d2                	xor    edx,edx
c001bba1:	31 c0                	xor    eax,eax
c001bba3:	83 c4 18             	add    esp,0x18
c001bba6:	5b                   	pop    ebx
c001bba7:	c3                   	ret    
c001bba8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb2:	83 c4 18             	add    esp,0x18
c001bbb5:	5b                   	pop    ebx
c001bbb6:	c3                   	ret    

c001bbb7 <sysCallSizeFromFilename(regs*)>:
c001bbb7:	57                   	push   edi
c001bbb8:	56                   	push   esi
c001bbb9:	53                   	push   ebx
c001bbba:	83 ec 20             	sub    esp,0x20
c001bbbd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbc1:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbc4:	83 fb 02             	cmp    ebx,0x2
c001bbc7:	0f 86 99 00 00 00    	jbe    c001bc66 <sysCallSizeFromFilename(regs*)+0xaf>
c001bbcd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbd3:	77 65                	ja     c001bc3a <sysCallSizeFromFilename(regs*)+0x83>
c001bbd5:	83 ec 0c             	sub    esp,0xc
c001bbd8:	68 14 01 00 00       	push   0x114
c001bbdd:	e8 5e 3c ff ff       	call   c000f840 <malloc>
c001bbe2:	83 c4 0c             	add    esp,0xc
c001bbe5:	89 c6                	mov    esi,eax
c001bbe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbef:	53                   	push   ebx
c001bbf0:	56                   	push   esi
c001bbf1:	e8 4c 79 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001bbf6:	83 c4 0c             	add    esp,0xc
c001bbf9:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbfd:	50                   	push   eax
c001bbfe:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc01:	56                   	push   esi
c001bc02:	e8 4b 7c ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	85 f6                	test   esi,esi
c001bc0c:	74 14                	je     c001bc22 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc12:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc14:	83 ec 0c             	sub    esp,0xc
c001bc17:	56                   	push   esi
c001bc18:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc1b:	83 c4 10             	add    esp,0x10
c001bc1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc22:	85 c0                	test   eax,eax
c001bc24:	0f 95 c0             	setne  al
c001bc27:	31 d2                	xor    edx,edx
c001bc29:	0f b6 c0             	movzx  eax,al
c001bc2c:	f7 d8                	neg    eax
c001bc2e:	83 d2 00             	adc    edx,0x0
c001bc31:	83 c4 20             	add    esp,0x20
c001bc34:	f7 da                	neg    edx
c001bc36:	5b                   	pop    ebx
c001bc37:	5e                   	pop    esi
c001bc38:	5f                   	pop    edi
c001bc39:	c3                   	ret    
c001bc3a:	83 ec 08             	sub    esp,0x8
c001bc3d:	53                   	push   ebx
c001bc3e:	68 6f bf 02 c0       	push   0xc002bf6f
c001bc43:	e8 a2 73 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bc48:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc4b:	83 c4 10             	add    esp,0x10
c001bc4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc5b:	31 d2                	xor    edx,edx
c001bc5d:	83 c4 20             	add    esp,0x20
c001bc60:	31 c0                	xor    eax,eax
c001bc62:	5b                   	pop    ebx
c001bc63:	5e                   	pop    esi
c001bc64:	5f                   	pop    edi
c001bc65:	c3                   	ret    
c001bc66:	83 c4 20             	add    esp,0x20
c001bc69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc6e:	5b                   	pop    ebx
c001bc6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc74:	5e                   	pop    esi
c001bc75:	5f                   	pop    edi
c001bc76:	c3                   	ret    

c001bc77 <sysCallClose(regs*)>:
c001bc77:	53                   	push   ebx
c001bc78:	83 ec 08             	sub    esp,0x8
c001bc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc82:	83 f8 02             	cmp    eax,0x2
c001bc85:	76 50                	jbe    c001bcd7 <sysCallClose(regs*)+0x60>
c001bc87:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc8c:	74 58                	je     c001bce6 <sysCallClose(regs*)+0x6f>
c001bc8e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc93:	74 60                	je     c001bcf5 <sysCallClose(regs*)+0x7e>
c001bc95:	77 2f                	ja     c001bcc6 <sysCallClose(regs*)+0x4f>
c001bc97:	83 ec 0c             	sub    esp,0xc
c001bc9a:	50                   	push   eax
c001bc9b:	e8 ed 5d ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bca0:	89 c3                	mov    ebx,eax
c001bca2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bca5:	e8 5a 79 ff ff       	call   c0013604 <File::close()>
c001bcaa:	83 c4 10             	add    esp,0x10
c001bcad:	85 db                	test   ebx,ebx
c001bcaf:	74 0c                	je     c001bcbd <sysCallClose(regs*)+0x46>
c001bcb1:	83 ec 0c             	sub    esp,0xc
c001bcb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcb6:	53                   	push   ebx
c001bcb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	31 c0                	xor    eax,eax
c001bcbf:	31 d2                	xor    edx,edx
c001bcc1:	83 c4 08             	add    esp,0x8
c001bcc4:	5b                   	pop    ebx
c001bcc5:	c3                   	ret    
c001bcc6:	83 ec 08             	sub    esp,0x8
c001bcc9:	50                   	push   eax
c001bcca:	68 6c c0 02 c0       	push   0xc002c06c
c001bccf:	e8 16 73 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bcd4:	83 c4 10             	add    esp,0x10
c001bcd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcdc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce1:	83 c4 08             	add    esp,0x8
c001bce4:	5b                   	pop    ebx
c001bce5:	c3                   	ret    
c001bce6:	83 ec 0c             	sub    esp,0xc
c001bce9:	68 8a bf 02 c0       	push   0xc002bf8a
c001bcee:	e8 f7 72 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bcf3:	eb c5                	jmp    c001bcba <sysCallClose(regs*)+0x43>
c001bcf5:	83 ec 0c             	sub    esp,0xc
c001bcf8:	68 98 bf 02 c0       	push   0xc002bf98
c001bcfd:	eb ef                	jmp    c001bcee <sysCallClose(regs*)+0x77>

c001bcff <sysCallOpenDir(regs*)>:
c001bcff:	56                   	push   esi
c001bd00:	53                   	push   ebx
c001bd01:	53                   	push   ebx
c001bd02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd06:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd09:	85 f6                	test   esi,esi
c001bd0b:	74 59                	je     c001bd66 <sysCallOpenDir(regs*)+0x67>
c001bd0d:	83 ec 0c             	sub    esp,0xc
c001bd10:	68 14 01 00 00       	push   0x114
c001bd15:	e8 26 3b ff ff       	call   c000f840 <malloc>
c001bd1a:	83 c4 0c             	add    esp,0xc
c001bd1d:	89 c6                	mov    esi,eax
c001bd1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd24:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd2a:	56                   	push   esi
c001bd2b:	e8 be 7c ff ff       	call   c00139ee <Directory::Directory(char const*, Process*)>
c001bd30:	83 c4 10             	add    esp,0x10
c001bd33:	85 f6                	test   esi,esi
c001bd35:	74 2f                	je     c001bd66 <sysCallOpenDir(regs*)+0x67>
c001bd37:	83 ec 0c             	sub    esp,0xc
c001bd3a:	56                   	push   esi
c001bd3b:	e8 12 7d ff ff       	call   c0013a52 <Directory::open()>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	85 c0                	test   eax,eax
c001bd45:	75 1f                	jne    c001bd66 <sysCallOpenDir(regs*)+0x67>
c001bd47:	83 ec 0c             	sub    esp,0xc
c001bd4a:	56                   	push   esi
c001bd4b:	e8 48 5a ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001bd50:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd53:	83 c4 10             	add    esp,0x10
c001bd56:	89 02                	mov    DWORD PTR [edx],eax
c001bd58:	c1 f8 1f             	sar    eax,0x1f
c001bd5b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd5e:	31 c0                	xor    eax,eax
c001bd60:	59                   	pop    ecx
c001bd61:	31 d2                	xor    edx,edx
c001bd63:	5b                   	pop    ebx
c001bd64:	5e                   	pop    esi
c001bd65:	c3                   	ret    
c001bd66:	59                   	pop    ecx
c001bd67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd71:	5b                   	pop    ebx
c001bd72:	5e                   	pop    esi
c001bd73:	c3                   	ret    

c001bd74 <sysCallCloseDir(regs*)>:
c001bd74:	53                   	push   ebx
c001bd75:	83 ec 08             	sub    esp,0x8
c001bd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd7f:	83 f8 02             	cmp    eax,0x2
c001bd82:	76 47                	jbe    c001bdcb <sysCallCloseDir(regs*)+0x57>
c001bd84:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd89:	77 2f                	ja     c001bdba <sysCallCloseDir(regs*)+0x46>
c001bd8b:	83 ec 0c             	sub    esp,0xc
c001bd8e:	50                   	push   eax
c001bd8f:	e8 f9 5c ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bd94:	89 c3                	mov    ebx,eax
c001bd96:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd99:	e8 10 7d ff ff       	call   c0013aae <Directory::close()>
c001bd9e:	83 c4 10             	add    esp,0x10
c001bda1:	85 db                	test   ebx,ebx
c001bda3:	74 0c                	je     c001bdb1 <sysCallCloseDir(regs*)+0x3d>
c001bda5:	83 ec 0c             	sub    esp,0xc
c001bda8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdaa:	53                   	push   ebx
c001bdab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	31 c0                	xor    eax,eax
c001bdb3:	31 d2                	xor    edx,edx
c001bdb5:	83 c4 08             	add    esp,0x8
c001bdb8:	5b                   	pop    ebx
c001bdb9:	c3                   	ret    
c001bdba:	83 ec 08             	sub    esp,0x8
c001bdbd:	50                   	push   eax
c001bdbe:	68 94 c0 02 c0       	push   0xc002c094
c001bdc3:	e8 22 72 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bdc8:	83 c4 10             	add    esp,0x10
c001bdcb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd5:	83 c4 08             	add    esp,0x8
c001bdd8:	5b                   	pop    ebx
c001bdd9:	c3                   	ret    

c001bdda <sysCallMakeDir(regs*)>:
c001bdda:	56                   	push   esi
c001bddb:	53                   	push   ebx
c001bddc:	83 ec 10             	sub    esp,0x10
c001bddf:	68 14 01 00 00       	push   0x114
c001bde4:	e8 57 3a ff ff       	call   c000f840 <malloc>
c001bde9:	83 c4 0c             	add    esp,0xc
c001bdec:	89 c3                	mov    ebx,eax
c001bdee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdf6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdfa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdfd:	53                   	push   ebx
c001bdfe:	e8 eb 7b ff ff       	call   c00139ee <Directory::Directory(char const*, Process*)>
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	85 db                	test   ebx,ebx
c001be08:	74 32                	je     c001be3c <sysCallMakeDir(regs*)+0x62>
c001be0a:	83 ec 0c             	sub    esp,0xc
c001be0d:	53                   	push   ebx
c001be0e:	e8 1f 7e ff ff       	call   c0013c32 <Directory::create()>
c001be13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be16:	89 c6                	mov    esi,eax
c001be18:	e8 91 7c ff ff       	call   c0013aae <Directory::close()>
c001be1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be25:	83 c4 10             	add    esp,0x10
c001be28:	31 c0                	xor    eax,eax
c001be2a:	59                   	pop    ecx
c001be2b:	85 f6                	test   esi,esi
c001be2d:	5b                   	pop    ebx
c001be2e:	0f 95 c0             	setne  al
c001be31:	5e                   	pop    esi
c001be32:	31 d2                	xor    edx,edx
c001be34:	f7 d8                	neg    eax
c001be36:	83 d2 00             	adc    edx,0x0
c001be39:	f7 da                	neg    edx
c001be3b:	c3                   	ret    
c001be3c:	59                   	pop    ecx
c001be3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be42:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be47:	5b                   	pop    ebx
c001be48:	5e                   	pop    esi
c001be49:	c3                   	ret    

c001be4a <sysCallWait(regs*)>:
c001be4a:	83 ec 10             	sub    esp,0x10
c001be4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be51:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be54:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be57:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be5a:	e8 ce 24 00 00       	call   c001e32d <waitTask(int, int*, int)>
c001be5f:	83 c4 1c             	add    esp,0x1c
c001be62:	99                   	cdq    
c001be63:	c3                   	ret    

c001be64 <sysCallNotImpl(regs*)>:
c001be64:	83 ec 18             	sub    esp,0x18
c001be67:	68 a6 bf 02 c0       	push   0xc002bfa6
c001be6c:	e8 2a e8 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001be71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be76:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be7b:	83 c4 1c             	add    esp,0x1c
c001be7e:	c3                   	ret    

c001be7f <sysPanic(regs*)>:
c001be7f:	83 ec 18             	sub    esp,0x18
c001be82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be86:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be89:	e8 0d e8 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001be8e:	c7 04 24 c0 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfc0
c001be95:	e8 01 e8 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001be9a:	b8 01 00 00 00       	mov    eax,0x1
c001be9f:	31 d2                	xor    edx,edx
c001bea1:	83 c4 1c             	add    esp,0x1c
c001bea4:	c3                   	ret    

c001bea5 <sysCallRmdir(regs*)>:
c001bea5:	56                   	push   esi
c001bea6:	53                   	push   ebx
c001bea7:	83 ec 20             	sub    esp,0x20
c001beaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001beae:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001beb1:	68 14 01 00 00       	push   0x114
c001beb6:	e8 85 39 ff ff       	call   c000f840 <malloc>
c001bebb:	83 c4 0c             	add    esp,0xc
c001bebe:	89 c3                	mov    ebx,eax
c001bec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bec8:	56                   	push   esi
c001bec9:	53                   	push   ebx
c001beca:	e8 73 76 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001becf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bed2:	e8 47 78 ff ff       	call   c001371e <File::unlink()>
c001bed7:	83 c4 10             	add    esp,0x10
c001beda:	85 db                	test   ebx,ebx
c001bedc:	74 14                	je     c001bef2 <sysCallRmdir(regs*)+0x4d>
c001bede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bee2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bee4:	83 ec 0c             	sub    esp,0xc
c001bee7:	53                   	push   ebx
c001bee8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beeb:	83 c4 10             	add    esp,0x10
c001beee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bef2:	85 c0                	test   eax,eax
c001bef4:	0f 95 c0             	setne  al
c001bef7:	31 d2                	xor    edx,edx
c001bef9:	0f b6 c0             	movzx  eax,al
c001befc:	f7 d8                	neg    eax
c001befe:	83 d2 00             	adc    edx,0x0
c001bf01:	83 c4 14             	add    esp,0x14
c001bf04:	f7 da                	neg    edx
c001bf06:	5b                   	pop    ebx
c001bf07:	5e                   	pop    esi
c001bf08:	c3                   	ret    

c001bf09 <sysCallUnlink(regs*)>:
c001bf09:	56                   	push   esi
c001bf0a:	53                   	push   ebx
c001bf0b:	83 ec 20             	sub    esp,0x20
c001bf0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf12:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf15:	68 14 01 00 00       	push   0x114
c001bf1a:	e8 21 39 ff ff       	call   c000f840 <malloc>
c001bf1f:	83 c4 0c             	add    esp,0xc
c001bf22:	89 c3                	mov    ebx,eax
c001bf24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf29:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf2c:	56                   	push   esi
c001bf2d:	53                   	push   ebx
c001bf2e:	e8 0f 76 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001bf33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf36:	e8 e3 77 ff ff       	call   c001371e <File::unlink()>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	85 db                	test   ebx,ebx
c001bf40:	74 14                	je     c001bf56 <sysCallUnlink(regs*)+0x4d>
c001bf42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf46:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf48:	83 ec 0c             	sub    esp,0xc
c001bf4b:	53                   	push   ebx
c001bf4c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf56:	85 c0                	test   eax,eax
c001bf58:	0f 95 c0             	setne  al
c001bf5b:	31 d2                	xor    edx,edx
c001bf5d:	0f b6 c0             	movzx  eax,al
c001bf60:	f7 d8                	neg    eax
c001bf62:	83 d2 00             	adc    edx,0x0
c001bf65:	83 c4 14             	add    esp,0x14
c001bf68:	f7 da                	neg    edx
c001bf6a:	5b                   	pop    ebx
c001bf6b:	5e                   	pop    esi
c001bf6c:	c3                   	ret    

c001bf6d <sysCallGetArgv(regs*)>:
c001bf6d:	83 ec 0c             	sub    esp,0xc
c001bf70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf74:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf77:	85 c0                	test   eax,eax
c001bf79:	78 2b                	js     c001bfa6 <sysCallGetArgv(regs*)+0x39>
c001bf7b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf81:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf84:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf8a:	7d 1a                	jge    c001bfa6 <sysCallGetArgv(regs*)+0x39>
c001bf8c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf93:	85 c0                	test   eax,eax
c001bf95:	74 17                	je     c001bfae <sysCallGetArgv(regs*)+0x41>
c001bf97:	83 ec 08             	sub    esp,0x8
c001bf9a:	50                   	push   eax
c001bf9b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf9e:	e8 91 48 fe ff       	call   c0000834 <strcpy>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	31 c0                	xor    eax,eax
c001bfa8:	31 d2                	xor    edx,edx
c001bfaa:	83 c4 0c             	add    esp,0xc
c001bfad:	c3                   	ret    
c001bfae:	b8 01 00 00 00       	mov    eax,0x1
c001bfb3:	31 d2                	xor    edx,edx
c001bfb5:	83 c4 0c             	add    esp,0xc
c001bfb8:	c3                   	ret    

c001bfb9 <sysCallTTYName(regs*)>:
c001bfb9:	56                   	push   esi
c001bfba:	53                   	push   ebx
c001bfbb:	53                   	push   ebx
c001bfbc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfc0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfc3:	85 c0                	test   eax,eax
c001bfc5:	74 5f                	je     c001c026 <sysCallTTYName(regs*)+0x6d>
c001bfc7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfca:	83 f8 02             	cmp    eax,0x2
c001bfcd:	77 3e                	ja     c001c00d <sysCallTTYName(regs*)+0x54>
c001bfcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfd7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfdd:	85 db                	test   ebx,ebx
c001bfdf:	74 45                	je     c001c026 <sysCallTTYName(regs*)+0x6d>
c001bfe1:	83 ec 0c             	sub    esp,0xc
c001bfe4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfe6:	53                   	push   ebx
c001bfe7:	ff 10                	call   DWORD PTR [eax]
c001bfe9:	83 c4 10             	add    esp,0x10
c001bfec:	84 c0                	test   al,al
c001bfee:	74 41                	je     c001c031 <sysCallTTYName(regs*)+0x78>
c001bff0:	83 ec 08             	sub    esp,0x8
c001bff3:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bff9:	53                   	push   ebx
c001bffa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bffd:	e8 32 48 fe ff       	call   c0000834 <strcpy>
c001c002:	83 c4 10             	add    esp,0x10
c001c005:	31 c0                	xor    eax,eax
c001c007:	59                   	pop    ecx
c001c008:	31 d2                	xor    edx,edx
c001c00a:	5b                   	pop    ebx
c001c00b:	5e                   	pop    esi
c001c00c:	c3                   	ret    
c001c00d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c012:	74 bb                	je     c001bfcf <sysCallTTYName(regs*)+0x16>
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	50                   	push   eax
c001c018:	e8 70 5a ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001c01d:	83 c4 10             	add    esp,0x10
c001c020:	89 c3                	mov    ebx,eax
c001c022:	85 db                	test   ebx,ebx
c001c024:	75 bb                	jne    c001bfe1 <sysCallTTYName(regs*)+0x28>
c001c026:	59                   	pop    ecx
c001c027:	b8 01 00 00 00       	mov    eax,0x1
c001c02c:	31 d2                	xor    edx,edx
c001c02e:	5b                   	pop    ebx
c001c02f:	5e                   	pop    esi
c001c030:	c3                   	ret    
c001c031:	59                   	pop    ecx
c001c032:	b8 02 00 00 00       	mov    eax,0x2
c001c037:	31 d2                	xor    edx,edx
c001c039:	5b                   	pop    ebx
c001c03a:	5e                   	pop    esi
c001c03b:	c3                   	ret    

c001c03c <sysCallUSleep(regs*)>:
c001c03c:	83 ec 14             	sub    esp,0x14
c001c03f:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c044:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c048:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c04f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c052:	01 ca                	add    edx,ecx
c001c054:	52                   	push   edx
c001c055:	50                   	push   eax
c001c056:	e8 6b 23 00 00       	call   c001e3c6 <nanoSleep(unsigned long long)>
c001c05b:	31 c0                	xor    eax,eax
c001c05d:	31 d2                	xor    edx,edx
c001c05f:	83 c4 1c             	add    esp,0x1c
c001c062:	c3                   	ret    

c001c063 <sysCallSpawn(regs*)>:
c001c063:	56                   	push   esi
c001c064:	53                   	push   ebx
c001c065:	53                   	push   ebx
c001c066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c06a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c06d:	85 f6                	test   esi,esi
c001c06f:	75 08                	jne    c001c079 <sysCallSpawn(regs*)+0x16>
c001c071:	59                   	pop    ecx
c001c072:	31 c0                	xor    eax,eax
c001c074:	31 d2                	xor    edx,edx
c001c076:	5b                   	pop    ebx
c001c077:	5e                   	pop    esi
c001c078:	c3                   	ret    
c001c079:	83 ec 0c             	sub    esp,0xc
c001c07c:	68 3f 07 00 00       	push   0x73f
c001c081:	e8 ba 37 ff ff       	call   c000f840 <malloc>
c001c086:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c089:	89 c6                	mov    esi,eax
c001c08b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c090:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c093:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c096:	56                   	push   esi
c001c097:	e8 2a 1a 00 00       	call   c001dac6 <Process::Process(char const*, Process*, char**)>
c001c09c:	83 c4 20             	add    esp,0x20
c001c09f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0a6:	75 c9                	jne    c001c071 <sysCallSpawn(regs*)+0xe>
c001c0a8:	83 ec 0c             	sub    esp,0xc
c001c0ab:	56                   	push   esi
c001c0ac:	e8 db 1f 00 00       	call   c001e08c <Process::createUserThread()>
c001c0b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	99                   	cdq    
c001c0b7:	59                   	pop    ecx
c001c0b8:	5b                   	pop    ebx
c001c0b9:	5e                   	pop    esi
c001c0ba:	c3                   	ret    

c001c0bb <sysCallGetEnv(regs*)>:
c001c0bb:	55                   	push   ebp
c001c0bc:	57                   	push   edi
c001c0bd:	56                   	push   esi
c001c0be:	53                   	push   ebx
c001c0bf:	83 ec 28             	sub    esp,0x28
c001c0c2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0c6:	68 cf bf 02 c0       	push   0xc002bfcf
c001c0cb:	e8 1a 6f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c0d0:	5f                   	pop    edi
c001c0d1:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0d4:	5d                   	pop    ebp
c001c0d5:	53                   	push   ebx
c001c0d6:	68 fe c2 02 c0       	push   0xc002c2fe
c001c0db:	e8 0a 6f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c0e0:	58                   	pop    eax
c001c0e1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0e4:	5a                   	pop    edx
c001c0e5:	57                   	push   edi
c001c0e6:	68 d8 bf 02 c0       	push   0xc002bfd8
c001c0eb:	e8 fa 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c0f0:	59                   	pop    ecx
c001c0f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0f9:	e8 b9 e4 ff ff       	call   c001a5b7 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0fe:	5a                   	pop    edx
c001c0ff:	89 c5                	mov    ebp,eax
c001c101:	59                   	pop    ecx
c001c102:	50                   	push   eax
c001c103:	68 e2 bf 02 c0       	push   0xc002bfe2
c001c108:	e8 dd 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c10d:	83 c4 10             	add    esp,0x10
c001c110:	39 ef                	cmp    edi,ebp
c001c112:	7c 15                	jl     c001c129 <sysCallGetEnv(regs*)+0x6e>
c001c114:	85 db                	test   ebx,ebx
c001c116:	75 0c                	jne    c001c124 <sysCallGetEnv(regs*)+0x69>
c001c118:	83 c4 1c             	add    esp,0x1c
c001c11b:	31 c0                	xor    eax,eax
c001c11d:	5b                   	pop    ebx
c001c11e:	31 d2                	xor    edx,edx
c001c120:	5e                   	pop    esi
c001c121:	5f                   	pop    edi
c001c122:	5d                   	pop    ebp
c001c123:	c3                   	ret    
c001c124:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c127:	eb ef                	jmp    c001c118 <sysCallGetEnv(regs*)+0x5d>
c001c129:	83 ec 0c             	sub    esp,0xc
c001c12c:	68 ee bf 02 c0       	push   0xc002bfee
c001c131:	e8 b4 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c136:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c13a:	83 c4 0c             	add    esp,0xc
c001c13d:	57                   	push   edi
c001c13e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c144:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c147:	50                   	push   eax
c001c148:	e8 8a e4 ff ff       	call   c001a5d7 <Krnl::getProcessEnvPair(Process*, int)>
c001c14d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c151:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c155:	68 7d c3 02 c0       	push   0xc002c37d
c001c15a:	e8 8b 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c15f:	83 c4 10             	add    esp,0x10
c001c162:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c165:	85 f6                	test   esi,esi
c001c167:	75 47                	jne    c001c1b0 <sysCallGetEnv(regs*)+0xf5>
c001c169:	83 ec 0c             	sub    esp,0xc
c001c16c:	55                   	push   ebp
c001c16d:	e8 22 46 fe ff       	call   c0000794 <strlen>
c001c172:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c175:	89 c3                	mov    ebx,eax
c001c177:	e8 18 46 fe ff       	call   c0000794 <strlen>
c001c17c:	5a                   	pop    edx
c001c17d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c181:	59                   	pop    ecx
c001c182:	50                   	push   eax
c001c183:	68 f1 bf 02 c0       	push   0xc002bff1
c001c188:	e8 5d 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c18d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c190:	e8 ff 45 fe ff       	call   c0000794 <strlen>
c001c195:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c198:	89 c3                	mov    ebx,eax
c001c19a:	e8 f5 45 fe ff       	call   c0000794 <strlen>
c001c19f:	83 c4 10             	add    esp,0x10
c001c1a2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1a6:	83 c4 1c             	add    esp,0x1c
c001c1a9:	31 d2                	xor    edx,edx
c001c1ab:	5b                   	pop    ebx
c001c1ac:	5e                   	pop    esi
c001c1ad:	5f                   	pop    edi
c001c1ae:	5d                   	pop    ebp
c001c1af:	c3                   	ret    
c001c1b0:	83 ec 0c             	sub    esp,0xc
c001c1b3:	68 97 c3 02 c0       	push   0xc002c397
c001c1b8:	e8 2d 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c1bd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1c0:	58                   	pop    eax
c001c1c1:	5a                   	pop    edx
c001c1c2:	55                   	push   ebp
c001c1c3:	53                   	push   ebx
c001c1c4:	e8 6b 46 fe ff       	call   c0000834 <strcpy>
c001c1c9:	59                   	pop    ecx
c001c1ca:	5e                   	pop    esi
c001c1cb:	68 fb bf 02 c0       	push   0xc002bffb
c001c1d0:	53                   	push   ebx
c001c1d1:	e8 9e 47 fe ff       	call   c0000974 <strcat>
c001c1d6:	5d                   	pop    ebp
c001c1d7:	58                   	pop    eax
c001c1d8:	57                   	push   edi
c001c1d9:	53                   	push   ebx
c001c1da:	e8 95 47 fe ff       	call   c0000974 <strcat>
c001c1df:	c7 04 24 b1 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3b1
c001c1e6:	e8 ff 6d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	e9 25 ff ff ff       	jmp    c001c118 <sysCallGetEnv(regs*)+0x5d>

c001c1f3 <sysAppSettings(regs*)>:
c001c1f3:	53                   	push   ebx
c001c1f4:	83 ec 08             	sub    esp,0x8
c001c1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1fe:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c204:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c209:	66 3d c0 09          	cmp    ax,0x9c0
c001c20d:	75 2f                	jne    c001c23e <sysAppSettings(regs*)+0x4b>
c001c20f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c215:	83 e0 1f             	and    eax,0x1f
c001c218:	3c 01                	cmp    al,0x1
c001c21a:	74 2e                	je     c001c24a <sysAppSettings(regs*)+0x57>
c001c21c:	3c 07                	cmp    al,0x7
c001c21e:	0f 84 bd 00 00 00    	je     c001c2e1 <sysAppSettings(regs*)+0xee>
c001c224:	84 c0                	test   al,al
c001c226:	0f 84 dc 00 00 00    	je     c001c308 <sysAppSettings(regs*)+0x115>
c001c22c:	3c 08                	cmp    al,0x8
c001c22e:	74 6d                	je     c001c29d <sysAppSettings(regs*)+0xaa>
c001c230:	0f b6 c0             	movzx  eax,al
c001c233:	83 c4 08             	add    esp,0x8
c001c236:	05 e8 03 00 00       	add    eax,0x3e8
c001c23b:	5b                   	pop    ebx
c001c23c:	99                   	cdq    
c001c23d:	c3                   	ret    
c001c23e:	b8 01 00 00 00       	mov    eax,0x1
c001c243:	31 d2                	xor    edx,edx
c001c245:	83 c4 08             	add    esp,0x8
c001c248:	5b                   	pop    ebx
c001c249:	c3                   	ret    
c001c24a:	51                   	push   ecx
c001c24b:	68 00 01 00 00       	push   0x100
c001c250:	6a 00                	push   0x0
c001c252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c257:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c25a:	83 c0 0c             	add    eax,0xc
c001c25d:	50                   	push   eax
c001c25e:	e8 15 45 fe ff       	call   c0000778 <memset>
c001c263:	83 c4 0c             	add    esp,0xc
c001c266:	68 ff 00 00 00       	push   0xff
c001c26b:	53                   	push   ebx
c001c26c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c271:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c274:	83 c0 0c             	add    eax,0xc
c001c277:	50                   	push   eax
c001c278:	e8 c7 44 fe ff       	call   c0000744 <memcpy>
c001c27d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c282:	5b                   	pop    ebx
c001c283:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c286:	5a                   	pop    edx
c001c287:	8d 50 0c             	lea    edx,[eax+0xc]
c001c28a:	52                   	push   edx
c001c28b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c291:	e8 72 49 ff ff       	call   c0010c08 <VgaText::setTitle(char*)>
c001c296:	83 c4 10             	add    esp,0x10
c001c299:	31 c0                	xor    eax,eax
c001c29b:	eb a6                	jmp    c001c243 <sysAppSettings(regs*)+0x50>
c001c29d:	83 ec 08             	sub    esp,0x8
c001c2a0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2a6:	83 e0 0f             	and    eax,0xf
c001c2a9:	50                   	push   eax
c001c2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2b8:	e8 3b 49 ff ff       	call   c0010bf8 <VgaText::setTitleColour(VgaColour)>
c001c2bd:	58                   	pop    eax
c001c2be:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2c4:	5a                   	pop    edx
c001c2c5:	c1 e8 04             	shr    eax,0x4
c001c2c8:	83 e0 0f             	and    eax,0xf
c001c2cb:	50                   	push   eax
c001c2cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2da:	e8 09 49 ff ff       	call   c0010be8 <VgaText::setTitleTextColour(VgaColour)>
c001c2df:	eb b5                	jmp    c001c296 <sysAppSettings(regs*)+0xa3>
c001c2e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2e9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2ef:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2f5:	c0 e8 06             	shr    al,0x6
c001c2f8:	83 e0 01             	and    eax,0x1
c001c2fb:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c301:	31 c0                	xor    eax,eax
c001c303:	e9 3b ff ff ff       	jmp    c001c243 <sysAppSettings(regs*)+0x50>
c001c308:	b8 02 00 00 00       	mov    eax,0x2
c001c30d:	e9 31 ff ff ff       	jmp    c001c243 <sysAppSettings(regs*)+0x50>

c001c312 <sysSetFatAttrib(regs*)>:
c001c312:	57                   	push   edi
c001c313:	56                   	push   esi
c001c314:	53                   	push   ebx
c001c315:	83 ec 1c             	sub    esp,0x1c
c001c318:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c31c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c31f:	68 14 01 00 00       	push   0x114
c001c324:	e8 17 35 ff ff       	call   c000f840 <malloc>
c001c329:	83 c4 0c             	add    esp,0xc
c001c32c:	89 c3                	mov    ebx,eax
c001c32e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c333:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c336:	57                   	push   edi
c001c337:	53                   	push   ebx
c001c338:	e8 05 72 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001c33d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c340:	83 c4 0c             	add    esp,0xc
c001c343:	0f b6 d4             	movzx  edx,ah
c001c346:	0f b6 c0             	movzx  eax,al
c001c349:	52                   	push   edx
c001c34a:	50                   	push   eax
c001c34b:	53                   	push   ebx
c001c34c:	e8 67 74 ff ff       	call   c00137b8 <File::chfatattr(unsigned char, unsigned char)>
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	85 db                	test   ebx,ebx
c001c356:	74 14                	je     c001c36c <sysSetFatAttrib(regs*)+0x5a>
c001c358:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c35c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c35e:	83 ec 0c             	sub    esp,0xc
c001c361:	53                   	push   ebx
c001c362:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c365:	83 c4 10             	add    esp,0x10
c001c368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c36c:	85 c0                	test   eax,eax
c001c36e:	0f 95 c0             	setne  al
c001c371:	31 d2                	xor    edx,edx
c001c373:	0f b6 c0             	movzx  eax,al
c001c376:	f7 d8                	neg    eax
c001c378:	83 d2 00             	adc    edx,0x0
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	f7 da                	neg    edx
c001c380:	5b                   	pop    ebx
c001c381:	5e                   	pop    esi
c001c382:	5f                   	pop    edi
c001c383:	c3                   	ret    

c001c384 <sysPipe(regs*)>:
c001c384:	57                   	push   edi
c001c385:	56                   	push   esi
c001c386:	53                   	push   ebx
c001c387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38b:	83 ec 0c             	sub    esp,0xc
c001c38e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c391:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c394:	6a 20                	push   0x20
c001c396:	e8 a5 34 ff ff       	call   c000f840 <malloc>
c001c39b:	89 c3                	mov    ebx,eax
c001c39d:	58                   	pop    eax
c001c39e:	5a                   	pop    edx
c001c39f:	68 00 50 00 00       	push   0x5000
c001c3a4:	53                   	push   ebx
c001c3a5:	e8 8e 41 ff ff       	call   c0010538 <Pipe::Pipe(int)>
c001c3aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3ad:	e8 e6 53 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001c3b2:	89 07                	mov    DWORD PTR [edi],eax
c001c3b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3b7:	e8 dc 53 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001c3bc:	83 c4 10             	add    esp,0x10
c001c3bf:	89 06                	mov    DWORD PTR [esi],eax
c001c3c1:	31 d2                	xor    edx,edx
c001c3c3:	5b                   	pop    ebx
c001c3c4:	31 c0                	xor    eax,eax
c001c3c6:	5e                   	pop    esi
c001c3c7:	5f                   	pop    edi
c001c3c8:	c3                   	ret    

c001c3c9 <sysGetUnixTime(regs*)>:
c001c3c9:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001c3ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3d8:	e9 4f 7b ff ff       	jmp    c0013f2c <Clock::timeInSecondsLocal()>

c001c3dd <string_ends_with(char const*, char const*)>:
c001c3dd:	57                   	push   edi
c001c3de:	56                   	push   esi
c001c3df:	53                   	push   ebx
c001c3e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3e8:	83 ec 0c             	sub    esp,0xc
c001c3eb:	53                   	push   ebx
c001c3ec:	e8 a3 43 fe ff       	call   c0000794 <strlen>
c001c3f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3f4:	89 c6                	mov    esi,eax
c001c3f6:	e8 99 43 fe ff       	call   c0000794 <strlen>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	39 c6                	cmp    esi,eax
c001c400:	7d 06                	jge    c001c408 <string_ends_with(char const*, char const*)+0x2b>
c001c402:	5b                   	pop    ebx
c001c403:	31 c0                	xor    eax,eax
c001c405:	5e                   	pop    esi
c001c406:	5f                   	pop    edi
c001c407:	c3                   	ret    
c001c408:	83 ec 08             	sub    esp,0x8
c001c40b:	29 c6                	sub    esi,eax
c001c40d:	57                   	push   edi
c001c40e:	01 f3                	add    ebx,esi
c001c410:	53                   	push   ebx
c001c411:	e8 aa 44 fe ff       	call   c00008c0 <strcmp>
c001c416:	83 c4 10             	add    esp,0x10
c001c419:	85 c0                	test   eax,eax
c001c41b:	5b                   	pop    ebx
c001c41c:	0f 94 c0             	sete   al
c001c41f:	5e                   	pop    esi
c001c420:	0f b6 c0             	movzx  eax,al
c001c423:	5f                   	pop    edi
c001c424:	c3                   	ret    

c001c425 <sysCallOpen(regs*)>:
c001c425:	56                   	push   esi
c001c426:	53                   	push   ebx
c001c427:	81 ec 04 01 00 00    	sub    esp,0x104
c001c42d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c434:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c437:	85 c9                	test   ecx,ecx
c001c439:	0f 84 b3 00 00 00    	je     c001c4f2 <sysCallOpen(regs*)+0xcd>
c001c43f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c442:	85 c0                	test   eax,eax
c001c444:	0f 84 a8 00 00 00    	je     c001c4f2 <sysCallOpen(regs*)+0xcd>
c001c44a:	52                   	push   edx
c001c44b:	68 fd bf 02 c0       	push   0xc002bffd
c001c450:	50                   	push   eax
c001c451:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c455:	56                   	push   esi
c001c456:	e8 3d 6f ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c45b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c45e:	e8 31 43 fe ff       	call   c0000794 <strlen>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	48                   	dec    eax
c001c467:	74 1d                	je     c001c486 <sysCallOpen(regs*)+0x61>
c001c469:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c46c:	eb 0f                	jmp    c001c47d <sysCallOpen(regs*)+0x58>
c001c46e:	80 fa 3a             	cmp    dl,0x3a
c001c471:	74 0f                	je     c001c482 <sysCallOpen(regs*)+0x5d>
c001c473:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c477:	48                   	dec    eax
c001c478:	74 0c                	je     c001c486 <sysCallOpen(regs*)+0x61>
c001c47a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c47d:	80 fa 2e             	cmp    dl,0x2e
c001c480:	75 ec                	jne    c001c46e <sysCallOpen(regs*)+0x49>
c001c482:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c486:	83 ec 08             	sub    esp,0x8
c001c489:	68 01 c0 02 c0       	push   0xc002c001
c001c48e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c491:	e8 47 ff ff ff       	call   c001c3dd <string_ends_with(char const*, char const*)>
c001c496:	83 c4 10             	add    esp,0x10
c001c499:	85 c0                	test   eax,eax
c001c49b:	75 17                	jne    c001c4b4 <sysCallOpen(regs*)+0x8f>
c001c49d:	83 ec 08             	sub    esp,0x8
c001c4a0:	68 22 c0 02 c0       	push   0xc002c022
c001c4a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a8:	e8 30 ff ff ff       	call   c001c3dd <string_ends_with(char const*, char const*)>
c001c4ad:	83 c4 10             	add    esp,0x10
c001c4b0:	85 c0                	test   eax,eax
c001c4b2:	74 51                	je     c001c505 <sysCallOpen(regs*)+0xe0>
c001c4b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4b7:	83 ec 08             	sub    esp,0x8
c001c4ba:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4ca:	ff 30                	push   DWORD PTR [eax]
c001c4cc:	68 06 c0 02 c0       	push   0xc002c006
c001c4d1:	e8 14 6b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c4d6:	c7 04 24 15 c0 02 c0 	mov    DWORD PTR [esp],0xc002c015
c001c4dd:	e8 08 6b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	81 c4 04 01 00 00    	add    esp,0x104
c001c4eb:	31 c0                	xor    eax,eax
c001c4ed:	31 d2                	xor    edx,edx
c001c4ef:	5b                   	pop    ebx
c001c4f0:	5e                   	pop    esi
c001c4f1:	c3                   	ret    
c001c4f2:	81 c4 04 01 00 00    	add    esp,0x104
c001c4f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c502:	5b                   	pop    ebx
c001c503:	5e                   	pop    esi
c001c504:	c3                   	ret    
c001c505:	83 ec 08             	sub    esp,0x8
c001c508:	68 02 c0 02 c0       	push   0xc002c002
c001c50d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c510:	e8 ab 43 fe ff       	call   c00008c0 <strcmp>
c001c515:	83 c4 10             	add    esp,0x10
c001c518:	85 c0                	test   eax,eax
c001c51a:	74 98                	je     c001c4b4 <sysCallOpen(regs*)+0x8f>
c001c51c:	83 ec 08             	sub    esp,0x8
c001c51f:	68 01 c0 02 c0       	push   0xc002c001
c001c524:	56                   	push   esi
c001c525:	e8 b3 fe ff ff       	call   c001c3dd <string_ends_with(char const*, char const*)>
c001c52a:	83 c4 10             	add    esp,0x10
c001c52d:	85 c0                	test   eax,eax
c001c52f:	75 83                	jne    c001c4b4 <sysCallOpen(regs*)+0x8f>
c001c531:	83 ec 08             	sub    esp,0x8
c001c534:	68 27 c0 02 c0       	push   0xc002c027
c001c539:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c53c:	e8 9c fe ff ff       	call   c001c3dd <string_ends_with(char const*, char const*)>
c001c541:	83 c4 10             	add    esp,0x10
c001c544:	85 c0                	test   eax,eax
c001c546:	0f 85 d9 00 00 00    	jne    c001c625 <sysCallOpen(regs*)+0x200>
c001c54c:	83 ec 08             	sub    esp,0x8
c001c54f:	68 2c c0 02 c0       	push   0xc002c02c
c001c554:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c557:	e8 81 fe ff ff       	call   c001c3dd <string_ends_with(char const*, char const*)>
c001c55c:	83 c4 10             	add    esp,0x10
c001c55f:	85 c0                	test   eax,eax
c001c561:	0f 85 be 00 00 00    	jne    c001c625 <sysCallOpen(regs*)+0x200>
c001c567:	83 ec 08             	sub    esp,0x8
c001c56a:	68 28 c0 02 c0       	push   0xc002c028
c001c56f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c572:	e8 49 43 fe ff       	call   c00008c0 <strcmp>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	85 c0                	test   eax,eax
c001c57c:	0f 84 a3 00 00 00    	je     c001c625 <sysCallOpen(regs*)+0x200>
c001c582:	83 ec 08             	sub    esp,0x8
c001c585:	68 27 c0 02 c0       	push   0xc002c027
c001c58a:	56                   	push   esi
c001c58b:	e8 4d fe ff ff       	call   c001c3dd <string_ends_with(char const*, char const*)>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	85 c0                	test   eax,eax
c001c595:	0f 85 8a 00 00 00    	jne    c001c625 <sysCallOpen(regs*)+0x200>
c001c59b:	83 ec 0c             	sub    esp,0xc
c001c59e:	68 14 01 00 00       	push   0x114
c001c5a3:	e8 98 32 ff ff       	call   c000f840 <malloc>
c001c5a8:	83 c4 0c             	add    esp,0xc
c001c5ab:	89 c6                	mov    esi,eax
c001c5ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5b8:	56                   	push   esi
c001c5b9:	e8 84 6f ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001c5be:	83 c4 10             	add    esp,0x10
c001c5c1:	85 f6                	test   esi,esi
c001c5c3:	0f 84 29 ff ff ff    	je     c001c4f2 <sysCallOpen(regs*)+0xcd>
c001c5c9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5cc:	0f b6 c2             	movzx  eax,dl
c001c5cf:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5d2:	89 d0                	mov    eax,edx
c001c5d4:	83 e0 01             	and    eax,0x1
c001c5d7:	f6 c2 02             	test   dl,0x2
c001c5da:	74 03                	je     c001c5df <sysCallOpen(regs*)+0x1ba>
c001c5dc:	83 c8 02             	or     eax,0x2
c001c5df:	f6 c2 04             	test   dl,0x4
c001c5e2:	74 03                	je     c001c5e7 <sysCallOpen(regs*)+0x1c2>
c001c5e4:	83 c8 04             	or     eax,0x4
c001c5e7:	f6 c2 08             	test   dl,0x8
c001c5ea:	74 03                	je     c001c5ef <sysCallOpen(regs*)+0x1ca>
c001c5ec:	83 c8 0a             	or     eax,0xa
c001c5ef:	83 e2 10             	and    edx,0x10
c001c5f2:	74 03                	je     c001c5f7 <sysCallOpen(regs*)+0x1d2>
c001c5f4:	83 c8 12             	or     eax,0x12
c001c5f7:	83 ec 08             	sub    esp,0x8
c001c5fa:	50                   	push   eax
c001c5fb:	56                   	push   esi
c001c5fc:	e8 a5 6f ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001c601:	83 c4 10             	add    esp,0x10
c001c604:	85 c0                	test   eax,eax
c001c606:	0f 85 e6 fe ff ff    	jne    c001c4f2 <sysCallOpen(regs*)+0xcd>
c001c60c:	83 ec 0c             	sub    esp,0xc
c001c60f:	56                   	push   esi
c001c610:	e8 83 51 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001c615:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c618:	89 02                	mov    DWORD PTR [edx],eax
c001c61a:	c1 f8 1f             	sar    eax,0x1f
c001c61d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c620:	e9 bd fe ff ff       	jmp    c001c4e2 <sysCallOpen(regs*)+0xbd>
c001c625:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c628:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c62e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c635:	e9 ab fe ff ff       	jmp    c001c4e5 <sysCallOpen(regs*)+0xc0>

c001c63a <Sys::loadSyscalls()>:
c001c63a:	c7 05 a0 10 03 c0 47 b7 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b747
c001c644:	c7 05 a4 10 03 c0 30 b3 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001b330
c001c64e:	c7 05 a8 10 03 c0 9a b4 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001b49a
c001c658:	c7 05 ac 10 03 c0 7d b6 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b67d
c001c662:	c7 05 b0 10 03 c0 32 b4 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001b432
c001c66c:	c7 05 b4 10 03 c0 67 b3 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001b367
c001c676:	c7 05 b8 10 03 c0 48 b3 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001b348
c001c680:	c7 05 bc 10 03 c0 ef b4 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001b4ef
c001c68a:	c7 05 c4 10 03 c0 77 bc 01 c0 	mov    DWORD PTR ds:0xc00310c4,0xc001bc77
c001c694:	c7 05 c0 10 03 c0 25 c4 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001c425
c001c69e:	c7 05 c8 10 03 c0 ff bc 01 c0 	mov    DWORD PTR ds:0xc00310c8,0xc001bcff
c001c6a8:	c7 05 cc 10 03 c0 66 b9 01 c0 	mov    DWORD PTR ds:0xc00310cc,0xc001b966
c001c6b2:	c7 05 d0 10 03 c0 82 b7 01 c0 	mov    DWORD PTR ds:0xc00310d0,0xc001b782
c001c6bc:	c7 05 d4 10 03 c0 87 b7 01 c0 	mov    DWORD PTR ds:0xc00310d4,0xc001b787
c001c6c6:	c7 05 d8 10 03 c0 da bd 01 c0 	mov    DWORD PTR ds:0xc00310d8,0xc001bdda
c001c6d0:	c7 05 dc 10 03 c0 74 bd 01 c0 	mov    DWORD PTR ds:0xc00310dc,0xc001bd74
c001c6da:	c7 05 e0 10 03 c0 4e ba 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001ba4e
c001c6e4:	c7 05 e4 10 03 c0 b7 ba 01 c0 	mov    DWORD PTR ds:0xc00310e4,0xc001bab7
c001c6ee:	c7 05 e8 10 03 c0 34 bb 01 c0 	mov    DWORD PTR ds:0xc00310e8,0xc001bb34
c001c6f8:	c7 05 ec 10 03 c0 8c b7 01 c0 	mov    DWORD PTR ds:0xc00310ec,0xc001b78c
c001c702:	c7 05 f0 10 03 c0 4a be 01 c0 	mov    DWORD PTR ds:0xc00310f0,0xc001be4a
c001c70c:	c7 05 f4 10 03 c0 64 be 01 c0 	mov    DWORD PTR ds:0xc00310f4,0xc001be64
c001c716:	c7 05 f8 10 03 c0 64 be 01 c0 	mov    DWORD PTR ds:0xc00310f8,0xc001be64
c001c720:	c7 05 fc 10 03 c0 a5 be 01 c0 	mov    DWORD PTR ds:0xc00310fc,0xc001bea5
c001c72a:	c7 05 00 11 03 c0 09 bf 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001bf09
c001c734:	c7 05 04 11 03 c0 38 b9 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001b938
c001c73e:	c7 05 08 11 03 c0 6d bf 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001bf6d
c001c748:	c7 05 0c 11 03 c0 f5 b8 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b8f5
c001c752:	c7 05 10 11 03 c0 b9 bf 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001bfb9
c001c75c:	c7 05 14 11 03 c0 f4 b9 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001b9f4
c001c766:	c7 05 18 11 03 c0 3c c0 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001c03c
c001c770:	c7 05 1c 11 03 c0 b7 bb 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001bbb7
c001c77a:	c7 05 20 11 03 c0 63 c0 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001c063
c001c784:	c7 05 24 11 03 c0 bb c0 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001c0bb
c001c78e:	c7 05 28 11 03 c0 f3 c1 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001c1f3
c001c798:	c7 05 2c 11 03 c0 96 b7 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b796
c001c7a2:	c7 05 30 11 03 c0 00 b8 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b800
c001c7ac:	c7 05 34 11 03 c0 46 b8 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b846
c001c7b6:	c7 05 38 11 03 c0 12 c3 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001c312
c001c7c0:	c7 05 3c 11 03 c0 7f be 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001be7f
c001c7ca:	c7 05 40 11 03 c0 97 b8 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b897
c001c7d4:	c7 05 44 11 03 c0 84 c3 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001c384
c001c7de:	c7 05 48 11 03 c0 c9 c3 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001c3c9
c001c7e8:	c7 05 4c 11 03 c0 8a b3 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b38a
c001c7f2:	c7 05 50 11 03 c0 0b b5 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b50b
c001c7fc:	c7 05 54 11 03 c0 33 b6 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b633
c001c806:	c7 05 58 11 03 c0 fa b2 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b2fa
c001c810:	c7 05 5c 11 03 c0 e5 b6 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b6e5
c001c81a:	c7 05 60 11 03 c0 73 b3 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001b373
c001c824:	c3                   	ret    

c001c825 <Sys::systemCall(regs*, void*)>:
c001c825:	53                   	push   ebx
c001c826:	83 ec 08             	sub    esp,0x8
c001c829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c82d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c830:	83 f8 7f             	cmp    eax,0x7f
c001c833:	77 16                	ja     c001c84b <Sys::systemCall(regs*, void*)+0x26>
c001c835:	8b 14 85 a0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef60]
c001c83c:	85 d2                	test   edx,edx
c001c83e:	74 0b                	je     c001c84b <Sys::systemCall(regs*, void*)+0x26>
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	53                   	push   ebx
c001c844:	ff d2                	call   edx
c001c846:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c849:	eb 0d                	jmp    c001c858 <Sys::systemCall(regs*, void*)+0x33>
c001c84b:	52                   	push   edx
c001c84c:	52                   	push   edx
c001c84d:	50                   	push   eax
c001c84e:	68 31 c0 02 c0       	push   0xc002c031
c001c853:	e8 92 67 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c860:	31 d2                	xor    edx,edx
c001c862:	83 c4 08             	add    esp,0x8
c001c865:	5b                   	pop    ebx
c001c866:	c3                   	ret    

c001c867 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c867:	55                   	push   ebp
c001c868:	57                   	push   edi
c001c869:	56                   	push   esi
c001c86a:	53                   	push   ebx
c001c86b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c871:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c878:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c87f:	85 c0                	test   eax,eax
c001c881:	0f 95 c1             	setne  cl
c001c884:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c88c:	0f 94 c2             	sete   dl
c001c88f:	84 d1                	test   cl,dl
c001c891:	74 23                	je     c001c8b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c893:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c899:	74 1b                	je     c001c8b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c89b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8a1:	89 da                	mov    edx,ebx
c001c8a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8a9:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8af:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8b6:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8bd:	05 ff 0f 00 00       	add    eax,0xfff
c001c8c2:	83 ec 0c             	sub    esp,0xc
c001c8c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8c9:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8cf:	c1 e8 0c             	shr    eax,0xc
c001c8d2:	89 ef                	mov    edi,ebp
c001c8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8d8:	c1 ef 0c             	shr    edi,0xc
c001c8db:	6a 01                	push   0x1
c001c8dd:	e8 01 53 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c001c8e2:	89 c6                	mov    esi,eax
c001c8e4:	58                   	pop    eax
c001c8e5:	5a                   	pop    edx
c001c8e6:	57                   	push   edi
c001c8e7:	68 b7 c0 02 c0       	push   0xc002c0b7
c001c8ec:	e8 f9 66 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c8f1:	59                   	pop    ecx
c001c8f2:	58                   	pop    eax
c001c8f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8f7:	68 c9 c0 02 c0       	push   0xc002c0c9
c001c8fc:	e8 e9 66 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c901:	83 c4 10             	add    esp,0x10
c001c904:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c90a:	0f 86 24 01 00 00    	jbe    c001ca34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c910:	c1 e7 0c             	shl    edi,0xc
c001c913:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c916:	89 df                	mov    edi,ebx
c001c918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c91c:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c923:	01 dd                	add    ebp,ebx
c001c925:	29 fd                	sub    ebp,edi
c001c927:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c92b:	0f 84 01 01 00 00    	je     c001ca32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c931:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c937:	76 05                	jbe    c001c93e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c939:	bd 00 10 00 00       	mov    ebp,0x1000
c001c93e:	83 ec 0c             	sub    esp,0xc
c001c941:	31 d2                	xor    edx,edx
c001c943:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c94a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c94c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c950:	50                   	push   eax
c001c951:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c955:	50                   	push   eax
c001c956:	52                   	push   edx
c001c957:	55                   	push   ebp
c001c958:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c95f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c962:	83 c4 20             	add    esp,0x20
c001c965:	85 c0                	test   eax,eax
c001c967:	74 0a                	je     c001c973 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c969:	53                   	push   ebx
c001c96a:	53                   	push   ebx
c001c96b:	50                   	push   eax
c001c96c:	68 db c0 02 c0       	push   0xc002c0db
c001c971:	eb 0f                	jmp    c001c982 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c973:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c977:	74 20                	je     c001c999 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c979:	51                   	push   ecx
c001c97a:	51                   	push   ecx
c001c97b:	6a 00                	push   0x0
c001c97d:	68 06 c1 02 c0       	push   0xc002c106
c001c982:	e8 63 66 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c987:	89 34 24             	mov    DWORD PTR [esp],esi
c001c98a:	e8 c4 56 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	31 c0                	xor    eax,eax
c001c994:	e9 55 01 00 00       	jmp    c001caee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c999:	e8 d8 14 00 00       	call   c001de76 <lockScheduler()>
c001c99e:	e8 5e 35 ff ff       	call   c000ff01 <Phys::allocatePage()>
c001c9a3:	6a 07                	push   0x7
c001c9a5:	89 c5                	mov    ebp,eax
c001c9a7:	56                   	push   esi
c001c9a8:	50                   	push   eax
c001c9a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b7:	e8 fe 59 ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9bc:	83 c4 0c             	add    esp,0xc
c001c9bf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9c6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9cc:	6a 00                	push   0x0
c001c9ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9dc:	e8 43 58 ff ff       	call   c0012224 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9e1:	58                   	pop    eax
c001c9e2:	5a                   	pop    edx
c001c9e3:	68 07 0c 00 00       	push   0xc07
c001c9e8:	57                   	push   edi
c001c9e9:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9ef:	55                   	push   ebp
c001c9f0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9f7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fd:	6a 00                	push   0x0
c001c9ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca07:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0d:	e8 62 5d ff ff       	call   c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca12:	83 c4 1c             	add    esp,0x1c
c001ca15:	68 00 10 00 00       	push   0x1000
c001ca1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca1e:	50                   	push   eax
c001ca1f:	56                   	push   esi
c001ca20:	e8 1f 3d fe ff       	call   c0000744 <memcpy>
c001ca25:	e8 4e 14 00 00       	call   c001de78 <unlockScheduler()>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	e9 ea fe ff ff       	jmp    c001c91c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca32:	89 fb                	mov    ebx,edi
c001ca34:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca3c:	0f 86 9e 00 00 00    	jbe    c001cae0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca42:	e8 2f 14 00 00       	call   c001de76 <lockScheduler()>
c001ca47:	51                   	push   ecx
c001ca48:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca4f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca55:	6a 00                	push   0x0
c001ca57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca5f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca65:	e8 ba 57 ff ff       	call   c0012224 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca6a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca6e:	c1 e7 0c             	shl    edi,0xc
c001ca71:	01 df                	add    edi,ebx
c001ca73:	83 c4 10             	add    esp,0x10
c001ca76:	39 fb                	cmp    ebx,edi
c001ca78:	74 61                	je     c001cadb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca7a:	e8 82 34 ff ff       	call   c000ff01 <Phys::allocatePage()>
c001ca7f:	6a 07                	push   0x7
c001ca81:	89 c5                	mov    ebp,eax
c001ca83:	56                   	push   esi
c001ca84:	50                   	push   eax
c001ca85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca8d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca93:	e8 22 59 ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca98:	58                   	pop    eax
c001ca99:	5a                   	pop    edx
c001ca9a:	68 07 0c 00 00       	push   0xc07
c001ca9f:	53                   	push   ebx
c001caa0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001caa6:	55                   	push   ebp
c001caa7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001caae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cab4:	6a 00                	push   0x0
c001cab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cabb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cabe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cac4:	e8 ab 5c ff ff       	call   c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cac9:	83 c4 1c             	add    esp,0x1c
c001cacc:	68 00 10 00 00       	push   0x1000
c001cad1:	6a 00                	push   0x0
c001cad3:	56                   	push   esi
c001cad4:	e8 9f 3c fe ff       	call   c0000778 <memset>
c001cad9:	eb 98                	jmp    c001ca73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cadb:	e8 98 13 00 00       	call   c001de78 <unlockScheduler()>
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	56                   	push   esi
c001cae4:	e8 6a 55 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001cae9:	83 c4 10             	add    esp,0x10
c001caec:	b0 01                	mov    al,0x1
c001caee:	81 c4 2c 10 00 00    	add    esp,0x102c
c001caf4:	5b                   	pop    ebx
c001caf5:	5e                   	pop    esi
c001caf6:	5f                   	pop    edi
c001caf7:	5d                   	pop    ebp
c001caf8:	c3                   	ret    

c001caf9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caf9:	55                   	push   ebp
c001cafa:	57                   	push   edi
c001cafb:	56                   	push   esi
c001cafc:	53                   	push   ebx
c001cafd:	83 ec 48             	sub    esp,0x48
c001cb00:	68 14 01 00 00       	push   0x114
c001cb05:	e8 36 2d ff ff       	call   c000f840 <malloc>
c001cb0a:	83 c4 0c             	add    esp,0xc
c001cb0d:	89 c6                	mov    esi,eax
c001cb0f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb17:	50                   	push   eax
c001cb18:	e8 25 6a ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001cb1d:	58                   	pop    eax
c001cb1e:	5a                   	pop    edx
c001cb1f:	6a 01                	push   0x1
c001cb21:	56                   	push   esi
c001cb22:	e8 7f 6a ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	85 c0                	test   eax,eax
c001cb2c:	0f 85 47 01 00 00    	jne    c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb32:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb3a:	83 ec 0c             	sub    esp,0xc
c001cb3d:	6a 34                	push   0x34
c001cb3f:	e8 fc 2c ff ff       	call   c000f840 <malloc>
c001cb44:	89 c3                	mov    ebx,eax
c001cb46:	58                   	pop    eax
c001cb47:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb49:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb4d:	57                   	push   edi
c001cb4e:	53                   	push   ebx
c001cb4f:	6a 00                	push   0x0
c001cb51:	6a 34                	push   0x34
c001cb53:	56                   	push   esi
c001cb54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb57:	83 c4 20             	add    esp,0x20
c001cb5a:	85 c0                	test   eax,eax
c001cb5c:	0f 85 17 01 00 00    	jne    c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb62:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb68:	0f 85 0b 01 00 00    	jne    c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb71:	85 c0                	test   eax,eax
c001cb73:	0f 84 00 01 00 00    	je     c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb79:	31 d2                	xor    edx,edx
c001cb7b:	55                   	push   ebp
c001cb7c:	52                   	push   edx
c001cb7d:	50                   	push   eax
c001cb7e:	56                   	push   esi
c001cb7f:	e8 e0 6a ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cb84:	83 c4 10             	add    esp,0x10
c001cb87:	85 c0                	test   eax,eax
c001cb89:	0f 85 ea 00 00 00    	jne    c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb8f:	83 ec 0c             	sub    esp,0xc
c001cb92:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb95:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb9d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cba1:	0f af c2             	imul   eax,edx
c001cba4:	50                   	push   eax
c001cba5:	e8 96 2c ff ff       	call   c000f840 <malloc>
c001cbaa:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbb0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbb7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbbb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbbf:	0f af c2             	imul   eax,edx
c001cbc2:	99                   	cdq    
c001cbc3:	52                   	push   edx
c001cbc4:	50                   	push   eax
c001cbc5:	56                   	push   esi
c001cbc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbc9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbcc:	83 c4 20             	add    esp,0x20
c001cbcf:	85 c0                	test   eax,eax
c001cbd1:	0f 84 a2 00 00 00    	je     c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd7:	31 d2                	xor    edx,edx
c001cbd9:	51                   	push   ecx
c001cbda:	52                   	push   edx
c001cbdb:	50                   	push   eax
c001cbdc:	56                   	push   esi
c001cbdd:	e8 82 6a ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	85 c0                	test   eax,eax
c001cbe7:	0f 85 8c 00 00 00    	jne    c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbed:	83 ec 0c             	sub    esp,0xc
c001cbf0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbf4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbf8:	31 ed                	xor    ebp,ebp
c001cbfa:	0f af c2             	imul   eax,edx
c001cbfd:	50                   	push   eax
c001cbfe:	e8 3d 2c ff ff       	call   c000f840 <malloc>
c001cc03:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc09:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc10:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc14:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc18:	0f af c2             	imul   eax,edx
c001cc1b:	99                   	cdq    
c001cc1c:	52                   	push   edx
c001cc1d:	50                   	push   eax
c001cc1e:	56                   	push   esi
c001cc1f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc22:	83 c4 20             	add    esp,0x20
c001cc25:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc2d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc31:	0f 86 80 00 00 00    	jbe    c001ccb7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc37:	0f b7 fd             	movzx  edi,bp
c001cc3a:	c1 e7 05             	shl    edi,0x5
c001cc3d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc41:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc44:	75 6b                	jne    c001ccb1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc46:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc4d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc54:	52                   	push   edx
c001cc55:	31 d2                	xor    edx,edx
c001cc57:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc5a:	52                   	push   edx
c001cc5b:	50                   	push   eax
c001cc5c:	56                   	push   esi
c001cc5d:	e8 02 6a ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	85 c0                	test   eax,eax
c001cc67:	74 17                	je     c001cc80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc69:	83 ec 0c             	sub    esp,0xc
c001cc6c:	68 32 c1 02 c0       	push   0xc002c132
c001cc71:	e8 74 63 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	31 c0                	xor    eax,eax
c001cc7b:	e9 87 00 00 00       	jmp    c001cd07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc80:	83 ec 0c             	sub    esp,0xc
c001cc83:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc86:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc89:	50                   	push   eax
c001cc8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc92:	56                   	push   esi
c001cc93:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc97:	e8 cb fb ff ff       	call   c001c867 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cca0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cca4:	83 c4 20             	add    esp,0x20
c001cca7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccab:	73 04                	jae    c001ccb1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccb1:	45                   	inc    ebp
c001ccb2:	e9 76 ff ff ff       	jmp    c001cc2d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ccb7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccc3:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ccc9:	83 ec 0c             	sub    esp,0xc
c001cccc:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccd2:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccd7:	05 00 10 00 00       	add    eax,0x1000
c001ccdc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce3:	e8 68 2b ff ff       	call   c000f850 <free>
c001cce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cceb:	e8 60 2b ff ff       	call   c000f850 <free>
c001ccf0:	58                   	pop    eax
c001ccf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf5:	e8 56 2b ff ff       	call   c000f850 <free>
c001ccfa:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccfd:	e8 02 69 ff ff       	call   c0013604 <File::close()>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	b0 01                	mov    al,0x1
c001cd07:	83 c4 3c             	add    esp,0x3c
c001cd0a:	5b                   	pop    ebx
c001cd0b:	5e                   	pop    esi
c001cd0c:	5f                   	pop    edi
c001cd0d:	5d                   	pop    ebp
c001cd0e:	c3                   	ret    

c001cd0f <Thr::runtimeReferenceHelper()>:
c001cd0f:	83 ec 18             	sub    esp,0x18
c001cd12:	68 3a c1 02 c0       	push   0xc002c13a
c001cd17:	e8 ce 62 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001cd1c:	fa                   	cli    
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	eb fe                	jmp    c001cd20 <Thr::runtimeReferenceHelper()+0x11>

c001cd22 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd22:	57                   	push   edi
c001cd23:	56                   	push   esi
c001cd24:	53                   	push   ebx
c001cd25:	31 db                	xor    ebx,ebx
c001cd27:	39 1d 40 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a40,ebx
c001cd2d:	7e 3c                	jle    c001cd6b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd2f:	8b 34 9d c0 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce640]
c001cd36:	31 ff                	xor    edi,edi
c001cd38:	39 3c 9d c0 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce740],edi
c001cd3f:	7e 27                	jle    c001cd68 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd41:	50                   	push   eax
c001cd42:	50                   	push   eax
c001cd43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd47:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd49:	03 04 9d 40 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce6c0]
c001cd50:	50                   	push   eax
c001cd51:	e8 6a 3b fe ff       	call   c00008c0 <strcmp>
c001cd56:	83 c4 10             	add    esp,0x10
c001cd59:	85 c0                	test   eax,eax
c001cd5b:	75 05                	jne    c001cd62 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd5d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd60:	eb 0b                	jmp    c001cd6d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd62:	83 c6 10             	add    esi,0x10
c001cd65:	47                   	inc    edi
c001cd66:	eb d0                	jmp    c001cd38 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd68:	43                   	inc    ebx
c001cd69:	eb bc                	jmp    c001cd27 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd6b:	31 c0                	xor    eax,eax
c001cd6d:	5b                   	pop    ebx
c001cd6e:	5e                   	pop    esi
c001cd6f:	5f                   	pop    edi
c001cd70:	c3                   	ret    

c001cd71 <Thr::loadKernelSymbolTable(char const*)>:
c001cd71:	55                   	push   ebp
c001cd72:	57                   	push   edi
c001cd73:	56                   	push   esi
c001cd74:	53                   	push   ebx
c001cd75:	83 ec 68             	sub    esp,0x68
c001cd78:	8b 35 94 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031a94
c001cd7e:	68 14 01 00 00       	push   0x114
c001cd83:	e8 b8 2a ff ff       	call   c000f840 <malloc>
c001cd88:	83 c4 0c             	add    esp,0xc
c001cd8b:	89 c3                	mov    ebx,eax
c001cd8d:	56                   	push   esi
c001cd8e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd92:	50                   	push   eax
c001cd93:	e8 aa 67 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001cd98:	5e                   	pop    esi
c001cd99:	5f                   	pop    edi
c001cd9a:	6a 01                	push   0x1
c001cd9c:	53                   	push   ebx
c001cd9d:	e8 04 68 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001cda2:	83 c4 10             	add    esp,0x10
c001cda5:	85 c0                	test   eax,eax
c001cda7:	74 0a                	je     c001cdb3 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cda9:	83 ec 0c             	sub    esp,0xc
c001cdac:	68 5c c1 02 c0       	push   0xc002c15c
c001cdb1:	eb 34                	jmp    c001cde7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdb3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cdbb:	83 ec 0c             	sub    esp,0xc
c001cdbe:	6a 34                	push   0x34
c001cdc0:	e8 7b 2a ff ff       	call   c000f840 <malloc>
c001cdc5:	59                   	pop    ecx
c001cdc6:	89 c7                	mov    edi,eax
c001cdc8:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdce:	56                   	push   esi
c001cdcf:	57                   	push   edi
c001cdd0:	6a 00                	push   0x0
c001cdd2:	6a 34                	push   0x34
c001cdd4:	53                   	push   ebx
c001cdd5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdd8:	83 c4 20             	add    esp,0x20
c001cddb:	85 c0                	test   eax,eax
c001cddd:	74 17                	je     c001cdf6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cddf:	83 ec 0c             	sub    esp,0xc
c001cde2:	68 73 c1 02 c0       	push   0xc002c173
c001cde7:	e8 af d8 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001cdec:	83 c4 10             	add    esp,0x10
c001cdef:	31 c0                	xor    eax,eax
c001cdf1:	e9 31 02 00 00       	jmp    c001d027 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdf6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdfc:	75 e1                	jne    c001cddf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdfe:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce01:	85 c0                	test   eax,eax
c001ce03:	74 da                	je     c001cddf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce05:	52                   	push   edx
c001ce06:	31 d2                	xor    edx,edx
c001ce08:	52                   	push   edx
c001ce09:	50                   	push   eax
c001ce0a:	53                   	push   ebx
c001ce0b:	e8 54 68 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001ce10:	83 c4 10             	add    esp,0x10
c001ce13:	85 c0                	test   eax,eax
c001ce15:	75 c8                	jne    c001cddf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce17:	83 ec 0c             	sub    esp,0xc
c001ce1a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce1e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce22:	31 ed                	xor    ebp,ebp
c001ce24:	0f af c2             	imul   eax,edx
c001ce27:	50                   	push   eax
c001ce28:	e8 13 2a ff ff       	call   c000f840 <malloc>
c001ce2d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce33:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce3a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce3e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce42:	0f af c2             	imul   eax,edx
c001ce45:	99                   	cdq    
c001ce46:	52                   	push   edx
c001ce47:	50                   	push   eax
c001ce48:	53                   	push   ebx
c001ce49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce4c:	83 c4 20             	add    esp,0x20
c001ce4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce57:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce5f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce6f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce73:	0f 86 aa 00 00 00    	jbe    c001cf23 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce79:	0f b7 f5             	movzx  esi,bp
c001ce7c:	6b f6 28             	imul   esi,esi,0x28
c001ce7f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce83:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce8a:	50                   	push   eax
c001ce8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce8f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce93:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce95:	6b c0 28             	imul   eax,eax,0x28
c001ce98:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce9c:	89 d0                	mov    eax,edx
c001ce9e:	31 d2                	xor    edx,edx
c001cea0:	52                   	push   edx
c001cea1:	50                   	push   eax
c001cea2:	53                   	push   ebx
c001cea3:	e8 bc 67 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cea8:	83 c4 0c             	add    esp,0xc
c001ceab:	6a 20                	push   0x20
c001cead:	6a 00                	push   0x0
c001ceaf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ceb3:	52                   	push   edx
c001ceb4:	e8 bf 38 fe ff       	call   c0000778 <memset>
c001ceb9:	58                   	pop    eax
c001ceba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cebc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cec0:	51                   	push   ecx
c001cec1:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cec5:	52                   	push   edx
c001cec6:	6a 00                	push   0x0
c001cec8:	6a 1f                	push   0x1f
c001ceca:	53                   	push   ebx
c001cecb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cece:	83 c4 18             	add    esp,0x18
c001ced1:	68 8a c1 02 c0       	push   0xc002c18a
c001ced6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ceda:	52                   	push   edx
c001cedb:	e8 e0 39 fe ff       	call   c00008c0 <strcmp>
c001cee0:	83 c4 10             	add    esp,0x10
c001cee3:	85 c0                	test   eax,eax
c001cee5:	75 0f                	jne    c001cef6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cee7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ceee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cef2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cef6:	50                   	push   eax
c001cef7:	50                   	push   eax
c001cef8:	68 92 c1 02 c0       	push   0xc002c192
c001cefd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf01:	50                   	push   eax
c001cf02:	e8 b9 39 fe ff       	call   c00008c0 <strcmp>
c001cf07:	83 c4 10             	add    esp,0x10
c001cf0a:	85 c0                	test   eax,eax
c001cf0c:	75 0f                	jne    c001cf1d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf1d:	45                   	inc    ebp
c001cf1e:	e9 4c ff ff ff       	jmp    c001ce6f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf23:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf28:	75 10                	jne    c001cf3a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf2a:	83 ec 0c             	sub    esp,0xc
c001cf2d:	68 9a c1 02 c0       	push   0xc002c19a
c001cf32:	e8 64 d7 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf3f:	75 10                	jne    c001cf51 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf41:	83 ec 0c             	sub    esp,0xc
c001cf44:	68 9a c1 02 c0       	push   0xc002c19a
c001cf49:	e8 4d d7 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001cf4e:	83 c4 10             	add    esp,0x10
c001cf51:	31 d2                	xor    edx,edx
c001cf53:	50                   	push   eax
c001cf54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf58:	52                   	push   edx
c001cf59:	50                   	push   eax
c001cf5a:	53                   	push   ebx
c001cf5b:	e8 04 67 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cf60:	5a                   	pop    edx
c001cf61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf65:	e8 d6 28 ff ff       	call   c000f840 <malloc>
c001cf6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf72:	31 c9                	xor    ecx,ecx
c001cf74:	5e                   	pop    esi
c001cf75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf77:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf7b:	55                   	push   ebp
c001cf7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf80:	51                   	push   ecx
c001cf81:	52                   	push   edx
c001cf82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf86:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf8a:	53                   	push   ebx
c001cf8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf8e:	83 c4 14             	add    esp,0x14
c001cf91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf95:	e8 a6 28 ff ff       	call   c000f840 <malloc>
c001cf9a:	89 c6                	mov    esi,eax
c001cf9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfa1:	56                   	push   esi
c001cfa2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfa6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfaa:	51                   	push   ecx
c001cfab:	52                   	push   edx
c001cfac:	53                   	push   ebx
c001cfad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfb4:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c001cfba:	83 c4 1c             	add    esp,0x1c
c001cfbd:	c1 e8 04             	shr    eax,0x4
c001cfc0:	89 04 95 c0 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce740],eax
c001cfc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfcb:	31 d2                	xor    edx,edx
c001cfcd:	52                   	push   edx
c001cfce:	50                   	push   eax
c001cfcf:	53                   	push   ebx
c001cfd0:	e8 8f 66 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cfd5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfd7:	31 d2                	xor    edx,edx
c001cfd9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfdc:	56                   	push   esi
c001cfdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfe1:	52                   	push   edx
c001cfe2:	50                   	push   eax
c001cfe3:	53                   	push   ebx
c001cfe4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfe7:	83 c4 14             	add    esp,0x14
c001cfea:	53                   	push   ebx
c001cfeb:	e8 14 66 ff ff       	call   c0013604 <File::close()>
c001cff0:	5d                   	pop    ebp
c001cff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cff5:	e8 56 28 ff ff       	call   c000f850 <free>
c001cffa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cffd:	e8 4e 28 ff ff       	call   c000f850 <free>
c001d002:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c001d007:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d00b:	8d 50 01             	lea    edx,[eax+0x1]
c001d00e:	89 0c 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],ecx
c001d015:	89 34 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],esi
c001d01c:	89 15 40 1a 03 c0    	mov    DWORD PTR ds:0xc0031a40,edx
c001d022:	83 c4 10             	add    esp,0x10
c001d025:	b0 01                	mov    al,0x1
c001d027:	83 c4 5c             	add    esp,0x5c
c001d02a:	5b                   	pop    ebx
c001d02b:	5e                   	pop    esi
c001d02c:	5f                   	pop    edi
c001d02d:	5d                   	pop    ebp
c001d02e:	c3                   	ret    

c001d02f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d02f:	55                   	push   ebp
c001d030:	57                   	push   edi
c001d031:	56                   	push   esi
c001d032:	53                   	push   ebx
c001d033:	81 ec 68 03 00 00    	sub    esp,0x368
c001d039:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d040:	8b 1d 94 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a94
c001d046:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d04a:	68 14 01 00 00       	push   0x114
c001d04f:	e8 ec 27 ff ff       	call   c000f840 <malloc>
c001d054:	83 c4 0c             	add    esp,0xc
c001d057:	89 c5                	mov    ebp,eax
c001d059:	53                   	push   ebx
c001d05a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d061:	50                   	push   eax
c001d062:	e8 db 64 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001d067:	5e                   	pop    esi
c001d068:	5f                   	pop    edi
c001d069:	6a 01                	push   0x1
c001d06b:	55                   	push   ebp
c001d06c:	e8 35 65 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	85 c0                	test   eax,eax
c001d076:	0f 85 8d 06 00 00    	jne    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d07c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	6a 34                	push   0x34
c001d089:	e8 b2 27 ff ff       	call   c000f840 <malloc>
c001d08e:	5b                   	pop    ebx
c001d08f:	89 c7                	mov    edi,eax
c001d091:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d095:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d098:	53                   	push   ebx
c001d099:	57                   	push   edi
c001d09a:	6a 00                	push   0x0
c001d09c:	6a 34                	push   0x34
c001d09e:	55                   	push   ebp
c001d09f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0a2:	83 c4 20             	add    esp,0x20
c001d0a5:	85 c0                	test   eax,eax
c001d0a7:	0f 85 5c 06 00 00    	jne    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0ad:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0b3:	0f 85 50 06 00 00    	jne    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0b9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0bc:	85 c0                	test   eax,eax
c001d0be:	0f 84 45 06 00 00    	je     c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c4:	31 d2                	xor    edx,edx
c001d0c6:	51                   	push   ecx
c001d0c7:	52                   	push   edx
c001d0c8:	50                   	push   eax
c001d0c9:	55                   	push   ebp
c001d0ca:	e8 95 65 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	85 c0                	test   eax,eax
c001d0d4:	0f 85 2f 06 00 00    	jne    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0da:	83 ec 0c             	sub    esp,0xc
c001d0dd:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0e0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0e4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0e8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0ec:	0f af c2             	imul   eax,edx
c001d0ef:	50                   	push   eax
c001d0f0:	e8 4b 27 ff ff       	call   c000f840 <malloc>
c001d0f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d103:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d107:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d10b:	0f af c2             	imul   eax,edx
c001d10e:	99                   	cdq    
c001d10f:	52                   	push   edx
c001d110:	50                   	push   eax
c001d111:	55                   	push   ebp
c001d112:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d115:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d118:	83 c4 20             	add    esp,0x20
c001d11b:	85 c0                	test   eax,eax
c001d11d:	0f 84 e6 05 00 00    	je     c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d123:	52                   	push   edx
c001d124:	31 d2                	xor    edx,edx
c001d126:	52                   	push   edx
c001d127:	50                   	push   eax
c001d128:	55                   	push   ebp
c001d129:	e8 36 65 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d12e:	83 c4 10             	add    esp,0x10
c001d131:	85 c0                	test   eax,eax
c001d133:	0f 85 d0 05 00 00    	jne    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d139:	83 ec 0c             	sub    esp,0xc
c001d13c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d140:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d144:	31 f6                	xor    esi,esi
c001d146:	0f af c2             	imul   eax,edx
c001d149:	50                   	push   eax
c001d14a:	e8 f1 26 ff ff       	call   c000f840 <malloc>
c001d14f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d156:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d159:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d15d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d161:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d165:	0f af c2             	imul   eax,edx
c001d168:	99                   	cdq    
c001d169:	52                   	push   edx
c001d16a:	50                   	push   eax
c001d16b:	55                   	push   ebp
c001d16c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d16f:	83 c4 20             	add    esp,0x20
c001d172:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d176:	0f 86 8a 00 00 00    	jbe    c001d206 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d17c:	0f b7 de             	movzx  ebx,si
c001d17f:	c1 e3 05             	shl    ebx,0x5
c001d182:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d186:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d189:	75 75                	jne    c001d200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d18b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d18e:	31 d2                	xor    edx,edx
c001d190:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d194:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d197:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d19b:	50                   	push   eax
c001d19c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d19f:	52                   	push   edx
c001d1a0:	50                   	push   eax
c001d1a1:	55                   	push   ebp
c001d1a2:	e8 bd 64 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d1a7:	83 c4 10             	add    esp,0x10
c001d1aa:	85 c0                	test   eax,eax
c001d1ac:	0f 85 57 05 00 00    	jne    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1b2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1bc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1c0:	31 d2                	xor    edx,edx
c001d1c2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1c6:	83 ec 0c             	sub    esp,0xc
c001d1c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1d4:	50                   	push   eax
c001d1d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1dd:	52                   	push   edx
c001d1de:	50                   	push   eax
c001d1df:	55                   	push   ebp
c001d1e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1e3:	83 c4 1c             	add    esp,0x1c
c001d1e6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1e9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1ec:	50                   	push   eax
c001d1ed:	6a 00                	push   0x0
c001d1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1f7:	50                   	push   eax
c001d1f8:	e8 7b 35 fe ff       	call   c0000778 <memset>
c001d1fd:	83 c4 10             	add    esp,0x10
c001d200:	46                   	inc    esi
c001d201:	e9 6c ff ff ff       	jmp    c001d172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d206:	53                   	push   ebx
c001d207:	31 db                	xor    ebx,ebx
c001d209:	68 00 01 00 00       	push   0x100
c001d20e:	6a 00                	push   0x0
c001d210:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d214:	50                   	push   eax
c001d215:	e8 5e 35 fe ff       	call   c0000778 <memset>
c001d21a:	83 c4 0c             	add    esp,0xc
c001d21d:	68 00 01 00 00       	push   0x100
c001d222:	6a 00                	push   0x0
c001d224:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d22b:	50                   	push   eax
c001d22c:	e8 47 35 fe ff       	call   c0000778 <memset>
c001d231:	83 c4 10             	add    esp,0x10
c001d234:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d23c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d244:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d24c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d254:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d25c:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d260:	0f 86 30 01 00 00    	jbe    c001d396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d266:	0f b7 f3             	movzx  esi,bx
c001d269:	6b f6 28             	imul   esi,esi,0x28
c001d26c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d270:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d273:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d277:	52                   	push   edx
c001d278:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d27c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d280:	8b 06                	mov    eax,DWORD PTR [esi]
c001d282:	6b d2 28             	imul   edx,edx,0x28
c001d285:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d289:	31 d2                	xor    edx,edx
c001d28b:	52                   	push   edx
c001d28c:	50                   	push   eax
c001d28d:	55                   	push   ebp
c001d28e:	e8 d1 63 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d293:	83 c4 0c             	add    esp,0xc
c001d296:	6a 20                	push   0x20
c001d298:	6a 00                	push   0x0
c001d29a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2a1:	51                   	push   ecx
c001d2a2:	e8 d1 34 fe ff       	call   c0000778 <memset>
c001d2a7:	59                   	pop    ecx
c001d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2ab:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2af:	52                   	push   edx
c001d2b0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2b7:	51                   	push   ecx
c001d2b8:	6a 00                	push   0x0
c001d2ba:	6a 1f                	push   0x1f
c001d2bc:	55                   	push   ebp
c001d2bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2c0:	83 c4 1c             	add    esp,0x1c
c001d2c3:	6a 09                	push   0x9
c001d2c5:	68 b4 c1 02 c0       	push   0xc002c1b4
c001d2ca:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2d1:	51                   	push   ecx
c001d2d2:	e8 69 33 fe ff       	call   c0000640 <memcmp>
c001d2d7:	83 c4 10             	add    esp,0x10
c001d2da:	85 c0                	test   eax,eax
c001d2dc:	75 21                	jne    c001d2ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2e6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2f8:	89 d0                	mov    eax,edx
c001d2fa:	40                   	inc    eax
c001d2fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ff:	50                   	push   eax
c001d300:	6a 09                	push   0x9
c001d302:	68 be c1 02 c0       	push   0xc002c1be
c001d307:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d30e:	50                   	push   eax
c001d30f:	e8 2c 33 fe ff       	call   c0000640 <memcmp>
c001d314:	83 c4 10             	add    esp,0x10
c001d317:	85 c0                	test   eax,eax
c001d319:	75 21                	jne    c001d33c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d31b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d31f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d323:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d327:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d32b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d32e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d335:	89 d0                	mov    eax,edx
c001d337:	40                   	inc    eax
c001d338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d33c:	50                   	push   eax
c001d33d:	50                   	push   eax
c001d33e:	68 8a c1 02 c0       	push   0xc002c18a
c001d343:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d34a:	50                   	push   eax
c001d34b:	e8 70 35 fe ff       	call   c00008c0 <strcmp>
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	85 c0                	test   eax,eax
c001d355:	75 0f                	jne    c001d366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d357:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d35a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d35e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d362:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d366:	50                   	push   eax
c001d367:	50                   	push   eax
c001d368:	68 92 c1 02 c0       	push   0xc002c192
c001d36d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d374:	50                   	push   eax
c001d375:	e8 46 35 fe ff       	call   c00008c0 <strcmp>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	85 c0                	test   eax,eax
c001d37f:	75 0f                	jne    c001d390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d381:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d384:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d38c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d390:	43                   	inc    ebx
c001d391:	e9 c6 fe ff ff       	jmp    c001d25c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d396:	31 d2                	xor    edx,edx
c001d398:	50                   	push   eax
c001d399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d39d:	52                   	push   edx
c001d39e:	50                   	push   eax
c001d39f:	55                   	push   ebp
c001d3a0:	e8 bf 62 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d3a5:	58                   	pop    eax
c001d3a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3aa:	e8 91 24 ff ff       	call   c000f840 <malloc>
c001d3af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3b6:	31 d2                	xor    edx,edx
c001d3b8:	58                   	pop    eax
c001d3b9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3bd:	53                   	push   ebx
c001d3be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3c6:	52                   	push   edx
c001d3c7:	50                   	push   eax
c001d3c8:	55                   	push   ebp
c001d3c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3cc:	83 c4 14             	add    esp,0x14
c001d3cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3d3:	e8 68 24 ff ff       	call   c000f840 <malloc>
c001d3d8:	31 d2                	xor    edx,edx
c001d3da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3de:	83 c4 0c             	add    esp,0xc
c001d3e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3e5:	52                   	push   edx
c001d3e6:	50                   	push   eax
c001d3e7:	55                   	push   ebp
c001d3e8:	e8 77 62 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d3ed:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3f0:	31 d2                	xor    edx,edx
c001d3f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3fd:	52                   	push   edx
c001d3fe:	50                   	push   eax
c001d3ff:	55                   	push   ebp
c001d400:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d403:	83 c4 20             	add    esp,0x20
c001d406:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d40e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d412:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d416:	0f 84 f1 02 00 00    	je     c001d70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d41c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d423:	31 d2                	xor    edx,edx
c001d425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d429:	c1 e8 03             	shr    eax,0x3
c001d42c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d430:	51                   	push   ecx
c001d431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d435:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d439:	52                   	push   edx
c001d43a:	50                   	push   eax
c001d43b:	55                   	push   ebp
c001d43c:	e8 23 62 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d441:	5b                   	pop    ebx
c001d442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d446:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d44d:	e8 ee 23 ff ff       	call   c000f840 <malloc>
c001d452:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d455:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d459:	31 d2                	xor    edx,edx
c001d45b:	5e                   	pop    esi
c001d45c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d460:	50                   	push   eax
c001d461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d465:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d469:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d470:	52                   	push   edx
c001d471:	50                   	push   eax
c001d472:	55                   	push   ebp
c001d473:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d476:	83 c4 20             	add    esp,0x20
c001d479:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d481:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d485:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d489:	0f 8d 62 02 00 00    	jge    c001d6f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d48f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d497:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d49c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d49f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4a7:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4ab:	89 d8                	mov    eax,ebx
c001d4ad:	c1 e8 08             	shr    eax,0x8
c001d4b0:	89 c6                	mov    esi,eax
c001d4b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4b6:	c1 e6 04             	shl    esi,0x4
c001d4b9:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4bd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4c0:	85 d2                	test   edx,edx
c001d4c2:	0f 85 bf 00 00 00    	jne    c001d587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4cf:	03 06                	add    eax,DWORD PTR [esi]
c001d4d1:	50                   	push   eax
c001d4d2:	e8 4b f8 ff ff       	call   c001cd22 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4d7:	83 c4 10             	add    esp,0x10
c001d4da:	89 c2                	mov    edx,eax
c001d4dc:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4e1:	85 c0                	test   eax,eax
c001d4e3:	0f 85 9e 00 00 00    	jne    c001d587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4e9:	83 ec 0c             	sub    esp,0xc
c001d4ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4f0:	03 06                	add    eax,DWORD PTR [esi]
c001d4f2:	50                   	push   eax
c001d4f3:	e8 fd 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	89 c2                	mov    edx,eax
c001d4fd:	85 c0                	test   eax,eax
c001d4ff:	0f 85 82 00 00 00    	jne    c001d587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d505:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d509:	50                   	push   eax
c001d50a:	50                   	push   eax
c001d50b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50f:	03 06                	add    eax,DWORD PTR [esi]
c001d511:	50                   	push   eax
c001d512:	68 c8 c1 02 c0       	push   0xc002c1c8
c001d517:	e8 ce 5a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d51c:	58                   	pop    eax
c001d51d:	5a                   	pop    edx
c001d51e:	68 e2 c1 02 c0       	push   0xc002c1e2
c001d523:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d52a:	50                   	push   eax
c001d52b:	e8 04 33 fe ff       	call   c0000834 <strcpy>
c001d530:	59                   	pop    ecx
c001d531:	58                   	pop    eax
c001d532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d536:	03 06                	add    eax,DWORD PTR [esi]
c001d538:	50                   	push   eax
c001d539:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d540:	50                   	push   eax
c001d541:	e8 2e 34 fe ff       	call   c0000974 <strcat>
c001d546:	58                   	pop    eax
c001d547:	5a                   	pop    edx
c001d548:	68 78 c2 02 c0       	push   0xc002c278
c001d54d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d554:	50                   	push   eax
c001d555:	e8 1a 34 fe ff       	call   c0000974 <strcat>
c001d55a:	83 c4 10             	add    esp,0x10
c001d55d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d562:	0f 84 43 01 00 00    	je     c001d6ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d568:	83 ec 0c             	sub    esp,0xc
c001d56b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d572:	50                   	push   eax
c001d573:	e8 23 d1 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d57f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d583:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d587:	80 fb 01             	cmp    bl,0x1
c001d58a:	75 7d                	jne    c001d609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d58c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d593:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d597:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d59b:	01 ce                	add    esi,ecx
c001d59d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5a3:	0f 94 c0             	sete   al
c001d5a6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5ac:	0f 94 c3             	sete   bl
c001d5af:	09 c3                	or     ebx,eax
c001d5b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5b3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5b8:	74 36                	je     c001d5f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5bd:	84 db                	test   bl,bl
c001d5bf:	75 0a                	jne    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5c5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5c9:	76 37                	jbe    c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5cb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5cf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5d4:	0f 84 d1 00 00 00    	je     c001d6ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	68 f9 c1 02 c0       	push   0xc002c1f9
c001d5e2:	e8 b4 d0 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5ee:	eb 12                	jmp    c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5f0:	01 c1                	add    ecx,eax
c001d5f2:	84 db                	test   bl,bl
c001d5f4:	75 0c                	jne    c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5fa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5fe:	77 02                	ja     c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d600:	01 d1                	add    ecx,edx
c001d602:	89 0e                	mov    DWORD PTR [esi],ecx
c001d604:	e9 df 00 00 00       	jmp    c001d6e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d609:	80 fb 02             	cmp    bl,0x2
c001d60c:	75 71                	jne    c001d67f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d60e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d615:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d619:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d61d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d623:	74 15                	je     c001d63a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d625:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d62b:	74 0d                	je     c001d63a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d62d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d631:	83 e8 04             	sub    eax,0x4
c001d634:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d638:	76 1f                	jbe    c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d63a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d63e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d643:	74 66                	je     c001d6ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d645:	83 ec 0c             	sub    esp,0xc
c001d648:	68 15 c2 02 c0       	push   0xc002c215
c001d64d:	e8 49 d0 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d652:	83 c4 10             	add    esp,0x10
c001d655:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d659:	8b 06                	mov    eax,DWORD PTR [esi]
c001d65b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d660:	74 13                	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d662:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d666:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d66d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d671:	01 c8                	add    eax,ecx
c001d673:	eb 04                	jmp    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d675:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d679:	01 c2                	add    edx,eax
c001d67b:	89 16                	mov    DWORD PTR [esi],edx
c001d67d:	eb 69                	jmp    c001d6e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d67f:	0f b6 db             	movzx  ebx,bl
c001d682:	50                   	push   eax
c001d683:	50                   	push   eax
c001d684:	53                   	push   ebx
c001d685:	68 31 c2 02 c0       	push   0xc002c231
c001d68a:	e8 5b 59 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d68f:	83 c4 10             	add    esp,0x10
c001d692:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d697:	74 12                	je     c001d6ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d699:	83 ec 0c             	sub    esp,0xc
c001d69c:	68 3c c2 02 c0       	push   0xc002c23c
c001d6a1:	e8 f5 cf ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d6a6:	83 c4 10             	add    esp,0x10
c001d6a9:	eb 3d                	jmp    c001d6e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6ab:	83 ec 0c             	sub    esp,0xc
c001d6ae:	55                   	push   ebp
c001d6af:	e8 50 5f ff ff       	call   c0013604 <File::close()>
c001d6b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6b7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6bd:	59                   	pop    ecx
c001d6be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6c2:	e8 89 21 ff ff       	call   c000f850 <free>
c001d6c7:	5b                   	pop    ebx
c001d6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6cc:	e8 7f 21 ff ff       	call   c000f850 <free>
c001d6d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6d4:	e8 77 21 ff ff       	call   c000f850 <free>
c001d6d9:	5e                   	pop    esi
c001d6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6de:	e8 6d 21 ff ff       	call   c000f850 <free>
c001d6e3:	83 c4 10             	add    esp,0x10
c001d6e6:	eb 21                	jmp    c001d709 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6e8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6ec:	e9 90 fd ff ff       	jmp    c001d481 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6f1:	83 ec 0c             	sub    esp,0xc
c001d6f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6f8:	e8 53 21 ff ff       	call   c000f850 <free>
c001d6fd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d701:	83 c4 10             	add    esp,0x10
c001d704:	e9 05 fd ff ff       	jmp    c001d40e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d709:	31 c0                	xor    eax,eax
c001d70b:	eb 33                	jmp    c001d740 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d70d:	83 ec 0c             	sub    esp,0xc
c001d710:	55                   	push   ebp
c001d711:	e8 ee 5e ff ff       	call   c0013604 <File::close()>
c001d716:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d719:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d71c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d71f:	58                   	pop    eax
c001d720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d724:	e8 27 21 ff ff       	call   c000f850 <free>
c001d729:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d72c:	e8 1f 21 ff ff       	call   c000f850 <free>
c001d731:	5a                   	pop    edx
c001d732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d736:	e8 15 21 ff ff       	call   c000f850 <free>
c001d73b:	83 c4 10             	add    esp,0x10
c001d73e:	b0 01                	mov    al,0x1
c001d740:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d746:	5b                   	pop    ebx
c001d747:	5e                   	pop    esi
c001d748:	5f                   	pop    edi
c001d749:	5d                   	pop    ebp
c001d74a:	c3                   	ret    

c001d74b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d74b:	56                   	push   esi
c001d74c:	31 d2                	xor    edx,edx
c001d74e:	53                   	push   ebx
c001d74f:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001d755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d759:	39 d3                	cmp    ebx,edx
c001d75b:	7e 1b                	jle    c001d778 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d75d:	8b 04 95 c0 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceb40]
c001d764:	39 c8                	cmp    eax,ecx
c001d766:	77 0d                	ja     c001d775 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d768:	8b 34 95 c0 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffced40]
c001d76f:	01 c6                	add    esi,eax
c001d771:	39 ce                	cmp    esi,ecx
c001d773:	77 05                	ja     c001d77a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d775:	42                   	inc    edx
c001d776:	eb e1                	jmp    c001d759 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d778:	31 c0                	xor    eax,eax
c001d77a:	5b                   	pop    ebx
c001d77b:	5e                   	pop    esi
c001d77c:	c3                   	ret    

c001d77d <Thr::getDriverNameFromAddress(unsigned long)>:
c001d77d:	53                   	push   ebx
c001d77e:	31 c0                	xor    eax,eax
c001d780:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d784:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001d78a:	39 c3                	cmp    ebx,eax
c001d78c:	7e 22                	jle    c001d7b0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d78e:	8b 14 85 c0 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceb40]
c001d795:	39 ca                	cmp    edx,ecx
c001d797:	77 14                	ja     c001d7ad <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d799:	03 14 85 c0 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffced40]
c001d7a0:	39 ca                	cmp    edx,ecx
c001d7a2:	76 09                	jbe    c001d7ad <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7a4:	8b 04 85 c0 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce940]
c001d7ab:	eb 05                	jmp    c001d7b2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7ad:	40                   	inc    eax
c001d7ae:	eb da                	jmp    c001d78a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7b0:	31 c0                	xor    eax,eax
c001d7b2:	5b                   	pop    ebx
c001d7b3:	c3                   	ret    

c001d7b4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7b4:	53                   	push   ebx
c001d7b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7b9:	53                   	push   ebx
c001d7ba:	e8 8c ff ff ff       	call   c001d74b <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7bf:	5a                   	pop    edx
c001d7c0:	31 d2                	xor    edx,edx
c001d7c2:	85 c0                	test   eax,eax
c001d7c4:	74 04                	je     c001d7ca <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7c6:	89 da                	mov    edx,ebx
c001d7c8:	29 c2                	sub    edx,eax
c001d7ca:	89 d0                	mov    eax,edx
c001d7cc:	5b                   	pop    ebx
c001d7cd:	c3                   	ret    

c001d7ce <Thr::loadDLL(char const*, bool)>:
c001d7ce:	55                   	push   ebp
c001d7cf:	57                   	push   edi
c001d7d0:	56                   	push   esi
c001d7d1:	53                   	push   ebx
c001d7d2:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7d8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7df:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7e6:	56                   	push   esi
c001d7e7:	68 54 c2 02 c0       	push   0xc002c254
c001d7ec:	e8 f9 57 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d7f1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7f8:	e8 43 20 ff ff       	call   c000f840 <malloc>
c001d7fd:	83 c4 0c             	add    esp,0xc
c001d800:	89 c3                	mov    ebx,eax
c001d802:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001d808:	56                   	push   esi
c001d809:	50                   	push   eax
c001d80a:	e8 33 5d ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001d80f:	83 c4 10             	add    esp,0x10
c001d812:	85 db                	test   ebx,ebx
c001d814:	75 3c                	jne    c001d852 <Thr::loadDLL(char const*, bool)+0x84>
c001d816:	89 e8                	mov    eax,ebp
c001d818:	84 c0                	test   al,al
c001d81a:	0f 84 d5 01 00 00    	je     c001d9f5 <Thr::loadDLL(char const*, bool)+0x227>
c001d820:	57                   	push   edi
c001d821:	57                   	push   edi
c001d822:	68 65 c2 02 c0       	push   0xc002c265
c001d827:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d82b:	57                   	push   edi
c001d82c:	e8 03 30 fe ff       	call   c0000834 <strcpy>
c001d831:	58                   	pop    eax
c001d832:	5a                   	pop    edx
c001d833:	56                   	push   esi
c001d834:	57                   	push   edi
c001d835:	e8 3a 31 fe ff       	call   c0000974 <strcat>
c001d83a:	59                   	pop    ecx
c001d83b:	58                   	pop    eax
c001d83c:	68 78 c2 02 c0       	push   0xc002c278
c001d841:	57                   	push   edi
c001d842:	e8 2d 31 fe ff       	call   c0000974 <strcat>
c001d847:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d84a:	e8 4c ce ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d84f:	83 c4 10             	add    esp,0x10
c001d852:	51                   	push   ecx
c001d853:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d857:	50                   	push   eax
c001d858:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d85c:	50                   	push   eax
c001d85d:	53                   	push   ebx
c001d85e:	e8 ef 5f ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001d863:	83 c4 10             	add    esp,0x10
c001d866:	85 db                	test   ebx,ebx
c001d868:	74 0c                	je     c001d876 <Thr::loadDLL(char const*, bool)+0xa8>
c001d86a:	83 ec 0c             	sub    esp,0xc
c001d86d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d86f:	53                   	push   ebx
c001d870:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d873:	83 c4 10             	add    esp,0x10
c001d876:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d87b:	75 0a                	jne    c001d887 <Thr::loadDLL(char const*, bool)+0xb9>
c001d87d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d881:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d885:	75 3c                	jne    c001d8c3 <Thr::loadDLL(char const*, bool)+0xf5>
c001d887:	89 e8                	mov    eax,ebp
c001d889:	84 c0                	test   al,al
c001d88b:	0f 84 4c 01 00 00    	je     c001d9dd <Thr::loadDLL(char const*, bool)+0x20f>
c001d891:	51                   	push   ecx
c001d892:	51                   	push   ecx
c001d893:	68 65 c2 02 c0       	push   0xc002c265
c001d898:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d89c:	53                   	push   ebx
c001d89d:	e8 92 2f fe ff       	call   c0000834 <strcpy>
c001d8a2:	5f                   	pop    edi
c001d8a3:	58                   	pop    eax
c001d8a4:	56                   	push   esi
c001d8a5:	53                   	push   ebx
c001d8a6:	e8 c9 30 fe ff       	call   c0000974 <strcat>
c001d8ab:	58                   	pop    eax
c001d8ac:	5a                   	pop    edx
c001d8ad:	68 78 c2 02 c0       	push   0xc002c278
c001d8b2:	53                   	push   ebx
c001d8b3:	e8 bc 30 fe ff       	call   c0000974 <strcat>
c001d8b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8bb:	e8 db cd ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	e8 b6 45 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001d8c8:	51                   	push   ecx
c001d8c9:	6a 03                	push   0x3
c001d8cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8cf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8d3:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8d9:	83 d3 00             	adc    ebx,0x0
c001d8dc:	89 ca                	mov    edx,ecx
c001d8de:	89 d1                	mov    ecx,edx
c001d8e0:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8e4:	51                   	push   ecx
c001d8e5:	50                   	push   eax
c001d8e6:	e8 cf 4b ff ff       	call   c00124ba <VAS::allocatePages(int, int)>
c001d8eb:	5f                   	pop    edi
c001d8ec:	89 c3                	mov    ebx,eax
c001d8ee:	58                   	pop    eax
c001d8ef:	53                   	push   ebx
c001d8f0:	68 7a c2 02 c0       	push   0xc002c27a
c001d8f5:	e8 f0 56 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d8fa:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8fd:	e8 92 2e fe ff       	call   c0000794 <strlen>
c001d902:	8b 3d a0 12 03 c0    	mov    edi,DWORD PTR ds:0xc00312a0
c001d908:	40                   	inc    eax
c001d909:	89 04 24             	mov    DWORD PTR [esp],eax
c001d90c:	e8 2f 1f ff ff       	call   c000f840 <malloc>
c001d911:	89 04 bd c0 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce940],eax
c001d918:	58                   	pop    eax
c001d919:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c001d91e:	5a                   	pop    edx
c001d91f:	56                   	push   esi
c001d920:	ff 34 85 c0 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce940]
c001d927:	e8 08 2f fe ff       	call   c0000834 <strcpy>
c001d92c:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c001d931:	8d 50 01             	lea    edx,[eax+0x1]
c001d934:	89 1c 85 c0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb40],ebx
c001d93b:	89 15 a0 12 03 c0    	mov    DWORD PTR ds:0xc00312a0,edx
c001d941:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d945:	83 c4 0c             	add    esp,0xc
c001d948:	89 14 85 c0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced40],edx
c001d94f:	6a 01                	push   0x1
c001d951:	53                   	push   ebx
c001d952:	56                   	push   esi
c001d953:	e8 d7 f6 ff ff       	call   c001d02f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d958:	83 c4 10             	add    esp,0x10
c001d95b:	89 c7                	mov    edi,eax
c001d95d:	84 c0                	test   al,al
c001d95f:	0f 85 8c 00 00 00    	jne    c001d9f1 <Thr::loadDLL(char const*, bool)+0x223>
c001d965:	89 e8                	mov    eax,ebp
c001d967:	84 c0                	test   al,al
c001d969:	74 76                	je     c001d9e1 <Thr::loadDLL(char const*, bool)+0x213>
c001d96b:	83 ec 0c             	sub    esp,0xc
c001d96e:	68 87 c2 02 c0       	push   0xc002c287
c001d973:	e8 23 cd ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d978:	83 c4 10             	add    esp,0x10
c001d97b:	eb 64                	jmp    c001d9e1 <Thr::loadDLL(char const*, bool)+0x213>
c001d97d:	e8 fc 44 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001d982:	89 f5                	mov    ebp,esi
c001d984:	c1 e5 0c             	shl    ebp,0xc
c001d987:	52                   	push   edx
c001d988:	01 dd                	add    ebp,ebx
c001d98a:	52                   	push   edx
c001d98b:	55                   	push   ebp
c001d98c:	50                   	push   eax
c001d98d:	e8 a2 46 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d998:	75 0c                	jne    c001d9a6 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d99a:	83 ec 0c             	sub    esp,0xc
c001d99d:	55                   	push   ebp
c001d99e:	e8 b5 24 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d9a3:	83 c4 10             	add    esp,0x10
c001d9a6:	46                   	inc    esi
c001d9a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9af:	05 ff 0f 00 00       	add    eax,0xfff
c001d9b4:	83 d2 00             	adc    edx,0x0
c001d9b7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9bb:	c1 ea 0c             	shr    edx,0xc
c001d9be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9c6:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9ca:	ba 00 00 00 00       	mov    edx,0x0
c001d9cf:	89 d0                	mov    eax,edx
c001d9d1:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9d5:	72 a6                	jb     c001d97d <Thr::loadDLL(char const*, bool)+0x1af>
c001d9d7:	89 f8                	mov    eax,edi
c001d9d9:	84 c0                	test   al,al
c001d9db:	75 18                	jne    c001d9f5 <Thr::loadDLL(char const*, bool)+0x227>
c001d9dd:	31 db                	xor    ebx,ebx
c001d9df:	eb 14                	jmp    c001d9f5 <Thr::loadDLL(char const*, bool)+0x227>
c001d9e1:	83 ec 0c             	sub    esp,0xc
c001d9e4:	68 a6 c2 02 c0       	push   0xc002c2a6
c001d9e9:	e8 ad cc ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001d9ee:	83 c4 10             	add    esp,0x10
c001d9f1:	31 f6                	xor    esi,esi
c001d9f3:	eb b2                	jmp    c001d9a7 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9fb:	89 d8                	mov    eax,ebx
c001d9fd:	5b                   	pop    ebx
c001d9fe:	5e                   	pop    esi
c001d9ff:	5f                   	pop    edi
c001da00:	5d                   	pop    ebp
c001da01:	c3                   	ret    

c001da02 <Thr::executeDLL(unsigned long, void*)>:
c001da02:	56                   	push   esi
c001da03:	53                   	push   ebx
c001da04:	52                   	push   edx
c001da05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da0d:	85 db                	test   ebx,ebx
c001da0f:	75 10                	jne    c001da21 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	68 c2 c2 02 c0       	push   0xc002c2c2
c001da19:	e8 7d cc ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	50                   	push   eax
c001da22:	50                   	push   eax
c001da23:	53                   	push   ebx
c001da24:	68 ec c2 02 c0       	push   0xc002c2ec
c001da29:	e8 bc 55 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001da2e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da32:	89 d8                	mov    eax,ebx
c001da34:	83 c4 14             	add    esp,0x14
c001da37:	5b                   	pop    ebx
c001da38:	5e                   	pop    esi
c001da39:	ff e0                	jmp    eax
c001da3b:	90                   	nop

c001da3c <changeTSS>:
c001da3c:	83 ec 14             	sub    esp,0x14
c001da3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da44:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da47:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da4c:	c1 e2 15             	shl    edx,0x15
c001da4f:	29 d0                	sub    eax,edx
c001da51:	50                   	push   eax
c001da52:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001da57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da5d:	05 7c 11 00 00       	add    eax,0x117c
c001da62:	50                   	push   eax
c001da63:	e8 ba 3a ff ff       	call   c0011522 <TSS::setESP(unsigned long)>
c001da68:	83 c4 1c             	add    esp,0x1c
c001da6b:	c3                   	ret    

c001da6c <Process::addArgs(char**)>:
c001da6c:	57                   	push   edi
c001da6d:	56                   	push   esi
c001da6e:	53                   	push   ebx
c001da6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da73:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da77:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da81:	85 ff                	test   edi,edi
c001da83:	74 3d                	je     c001dac2 <Process::addArgs(char**)+0x56>
c001da85:	8b 07                	mov    eax,DWORD PTR [edi]
c001da87:	85 c0                	test   eax,eax
c001da89:	74 37                	je     c001dac2 <Process::addArgs(char**)+0x56>
c001da8b:	31 db                	xor    ebx,ebx
c001da8d:	83 ec 0c             	sub    esp,0xc
c001da90:	50                   	push   eax
c001da91:	e8 fe 2c fe ff       	call   c0000794 <strlen>
c001da96:	40                   	inc    eax
c001da97:	89 04 24             	mov    DWORD PTR [esp],eax
c001da9a:	e8 a1 1d ff ff       	call   c000f840 <malloc>
c001da9f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001daa6:	5a                   	pop    edx
c001daa7:	59                   	pop    ecx
c001daa8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001daab:	43                   	inc    ebx
c001daac:	50                   	push   eax
c001daad:	e8 82 2d fe ff       	call   c0000834 <strcpy>
c001dab2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dab8:	83 c4 10             	add    esp,0x10
c001dabb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dabe:	85 c0                	test   eax,eax
c001dac0:	75 cb                	jne    c001da8d <Process::addArgs(char**)+0x21>
c001dac2:	5b                   	pop    ebx
c001dac3:	5e                   	pop    esi
c001dac4:	5f                   	pop    edi
c001dac5:	c3                   	ret    

c001dac6 <Process::Process(char const*, Process*, char**)>:
c001dac6:	56                   	push   esi
c001dac7:	53                   	push   ebx
c001dac8:	83 ec 14             	sub    esp,0x14
c001dacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacf:	05 0c 02 00 00       	add    eax,0x20c
c001dad4:	bb 07 00 00 00       	mov    ebx,0x7
c001dad9:	89 c6                	mov    esi,eax
c001dadb:	85 db                	test   ebx,ebx
c001dadd:	78 12                	js     c001daf1 <Process::Process(char const*, Process*, char**)+0x2b>
c001dadf:	83 ec 0c             	sub    esp,0xc
c001dae2:	56                   	push   esi
c001dae3:	e8 1a b2 00 00       	call   c0028d02 <ThreadControlBlock::ThreadControlBlock()>
c001dae8:	83 c4 10             	add    esp,0x10
c001daeb:	83 c6 63             	add    esi,0x63
c001daee:	4b                   	dec    ebx
c001daef:	eb ea                	jmp    c001dadb <Process::Process(char const*, Process*, char**)+0x15>
c001daf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dafc:	83 ec 0c             	sub    esp,0xc
c001daff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db03:	e8 e4 c9 ff ff       	call   c001a4ec <Krnl::newProcessEnv(Process*)>
c001db08:	83 c4 10             	add    esp,0x10
c001db0b:	89 c2                	mov    edx,eax
c001db0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db11:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db24:	a1 b0 da 02 c0       	mov    eax,ds:0xc002dab0
c001db29:	8d 50 01             	lea    edx,[eax+0x1]
c001db2c:	89 15 b0 da 02 c0    	mov    DWORD PTR ds:0xc002dab0,edx
c001db32:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db36:	89 02                	mov    DWORD PTR [edx],eax
c001db38:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db40:	83 ec 0c             	sub    esp,0xc
c001db43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db47:	e8 f4 1c ff ff       	call   c000f840 <malloc>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	89 c3                	mov    ebx,eax
c001db51:	83 ec 08             	sub    esp,0x8
c001db54:	6a 00                	push   0x0
c001db56:	53                   	push   ebx
c001db57:	e8 06 4d ff ff       	call   c0012862 <VAS::VAS(bool)>
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db63:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db7f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db89:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db8f:	85 c0                	test   eax,eax
c001db91:	74 42                	je     c001dbd5 <Process::Process(char const*, Process*, char**)+0x10f>
c001db93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db97:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db9d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbb7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc1:	05 0c 01 00 00       	add    eax,0x10c
c001dbc6:	83 ec 08             	sub    esp,0x8
c001dbc9:	52                   	push   edx
c001dbca:	50                   	push   eax
c001dbcb:	e8 64 2c fe ff       	call   c0000834 <strcpy>
c001dbd0:	83 c4 10             	add    esp,0x10
c001dbd3:	eb 63                	jmp    c001dc38 <Process::Process(char const*, Process*, char**)+0x172>
c001dbd5:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbdd:	83 ec 0c             	sub    esp,0xc
c001dbe0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbe4:	e8 57 1c ff ff       	call   c000f840 <malloc>
c001dbe9:	83 c4 10             	add    esp,0x10
c001dbec:	89 c3                	mov    ebx,eax
c001dbee:	83 ec 08             	sub    esp,0x8
c001dbf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf5:	53                   	push   ebx
c001dbf6:	e8 25 36 ff ff       	call   c0011220 <VgaText::VgaText(char const*)>
c001dbfb:	83 c4 10             	add    esp,0x10
c001dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc02:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc12:	83 ec 0c             	sub    esp,0xc
c001dc15:	50                   	push   eax
c001dc16:	e8 f8 29 ff ff       	call   c0010613 <addToTerminalCycle(VgaText*)>
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc22:	05 0c 01 00 00       	add    eax,0x10c
c001dc27:	83 ec 08             	sub    esp,0x8
c001dc2a:	68 0b c3 02 c0       	push   0xc002c30b
c001dc2f:	50                   	push   eax
c001dc30:	e8 ff 2b fe ff       	call   c0000834 <strcpy>
c001dc35:	83 c4 10             	add    esp,0x10
c001dc38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc3c:	83 c0 0c             	add    eax,0xc
c001dc3f:	83 ec 08             	sub    esp,0x8
c001dc42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc46:	50                   	push   eax
c001dc47:	e8 e8 2b fe ff       	call   c0000834 <strcpy>
c001dc4c:	83 c4 10             	add    esp,0x10
c001dc4f:	83 ec 08             	sub    esp,0x8
c001dc52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc5a:	e8 0d fe ff ff       	call   c001da6c <Process::addArgs(char**)>
c001dc5f:	83 c4 10             	add    esp,0x10
c001dc62:	83 ec 08             	sub    esp,0x8
c001dc65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc6d:	e8 87 ee ff ff       	call   c001caf9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc72:	83 c4 10             	add    esp,0x10
c001dc75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc7d:	83 f0 01             	xor    eax,0x1
c001dc80:	88 c2                	mov    dl,al
c001dc82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc86:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc8c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc91:	83 ec 08             	sub    esp,0x8
c001dc94:	50                   	push   eax
c001dc95:	68 08 c4 02 c0       	push   0xc002c408
c001dc9a:	e8 4b 53 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001dc9f:	83 c4 10             	add    esp,0x10
c001dca2:	90                   	nop
c001dca3:	83 c4 14             	add    esp,0x14
c001dca6:	5b                   	pop    ebx
c001dca7:	5e                   	pop    esi
c001dca8:	c3                   	ret    
c001dca9:	90                   	nop

c001dcaa <Process::Process(bool, char const*, Process*, char**)>:
c001dcaa:	56                   	push   esi
c001dcab:	53                   	push   ebx
c001dcac:	83 ec 24             	sub    esp,0x24
c001dcaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcb3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbb:	05 0c 02 00 00       	add    eax,0x20c
c001dcc0:	bb 07 00 00 00       	mov    ebx,0x7
c001dcc5:	89 c6                	mov    esi,eax
c001dcc7:	85 db                	test   ebx,ebx
c001dcc9:	78 12                	js     c001dcdd <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dccb:	83 ec 0c             	sub    esp,0xc
c001dcce:	56                   	push   esi
c001dccf:	e8 2e b0 00 00       	call   c0028d02 <ThreadControlBlock::ThreadControlBlock()>
c001dcd4:	83 c4 10             	add    esp,0x10
c001dcd7:	83 c6 63             	add    esi,0x63
c001dcda:	4b                   	dec    ebx
c001dcdb:	eb ea                	jmp    c001dcc7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dce8:	83 ec 0c             	sub    esp,0xc
c001dceb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcef:	e8 f8 c7 ff ff       	call   c001a4ec <Krnl::newProcessEnv(Process*)>
c001dcf4:	83 c4 10             	add    esp,0x10
c001dcf7:	89 c2                	mov    edx,eax
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd07:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd10:	a1 b0 da 02 c0       	mov    eax,ds:0xc002dab0
c001dd15:	8d 50 01             	lea    edx,[eax+0x1]
c001dd18:	89 15 b0 da 02 c0    	mov    DWORD PTR ds:0xc002dab0,edx
c001dd1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd22:	89 02                	mov    DWORD PTR [edx],eax
c001dd24:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd33:	e8 08 1b ff ff       	call   c000f840 <malloc>
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	89 c3                	mov    ebx,eax
c001dd3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd42:	83 ec 08             	sub    esp,0x8
c001dd45:	50                   	push   eax
c001dd46:	53                   	push   ebx
c001dd47:	e8 16 4b ff ff       	call   c0012862 <VAS::VAS(bool)>
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd53:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd6f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd79:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd7f:	85 c0                	test   eax,eax
c001dd81:	74 42                	je     c001ddc5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd87:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd8d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd97:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dda7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb1:	05 0c 01 00 00       	add    eax,0x10c
c001ddb6:	83 ec 08             	sub    esp,0x8
c001ddb9:	52                   	push   edx
c001ddba:	50                   	push   eax
c001ddbb:	e8 74 2a fe ff       	call   c0000834 <strcpy>
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	eb 63                	jmp    c001de28 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001ddc5:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ddcd:	83 ec 0c             	sub    esp,0xc
c001ddd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddd4:	e8 67 1a ff ff       	call   c000f840 <malloc>
c001ddd9:	83 c4 10             	add    esp,0x10
c001dddc:	89 c3                	mov    ebx,eax
c001ddde:	83 ec 08             	sub    esp,0x8
c001dde1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dde5:	53                   	push   ebx
c001dde6:	e8 35 34 ff ff       	call   c0011220 <VgaText::VgaText(char const*)>
c001ddeb:	83 c4 10             	add    esp,0x10
c001ddee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de02:	83 ec 0c             	sub    esp,0xc
c001de05:	50                   	push   eax
c001de06:	e8 08 28 ff ff       	call   c0010613 <addToTerminalCycle(VgaText*)>
c001de0b:	83 c4 10             	add    esp,0x10
c001de0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de12:	05 0c 01 00 00       	add    eax,0x10c
c001de17:	83 ec 08             	sub    esp,0x8
c001de1a:	68 0b c3 02 c0       	push   0xc002c30b
c001de1f:	50                   	push   eax
c001de20:	e8 0f 2a fe ff       	call   c0000834 <strcpy>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de2c:	83 c0 0c             	add    eax,0xc
c001de2f:	83 ec 08             	sub    esp,0x8
c001de32:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de36:	50                   	push   eax
c001de37:	e8 f8 29 fe ff       	call   c0000834 <strcpy>
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	83 ec 08             	sub    esp,0x8
c001de42:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de4a:	e8 1d fc ff ff       	call   c001da6c <Process::addArgs(char**)>
c001de4f:	83 c4 10             	add    esp,0x10
c001de52:	90                   	nop
c001de53:	83 c4 24             	add    esp,0x24
c001de56:	5b                   	pop    ebx
c001de57:	5e                   	pop    esi
c001de58:	c3                   	ret    

c001de59 <disableIRQs()>:
c001de59:	fa                   	cli    
c001de5a:	ff 05 6c 1a 03 c0    	inc    DWORD PTR ds:0xc0031a6c
c001de60:	c3                   	ret    

c001de61 <getIRQNestingLevel()>:
c001de61:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001de66:	c3                   	ret    

c001de67 <enableIRQs()>:
c001de67:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001de6c:	48                   	dec    eax
c001de6d:	a3 6c 1a 03 c0       	mov    ds:0xc0031a6c,eax
c001de72:	75 01                	jne    c001de75 <enableIRQs()+0xe>
c001de74:	fb                   	sti    
c001de75:	c3                   	ret    

c001de76 <lockScheduler()>:
c001de76:	eb e1                	jmp    c001de59 <disableIRQs()>

c001de78 <unlockScheduler()>:
c001de78:	eb ed                	jmp    c001de67 <enableIRQs()>

c001de7a <userModeEntryPoint(void*)>:
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	e8 f6 ff ff ff       	call   c001de78 <unlockScheduler()>
c001de82:	fb                   	sti    
c001de83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de8b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de95:	83 c4 0c             	add    esp,0xc
c001de98:	e9 8d 24 fe ff       	jmp    c000032a <goToUsermode>

c001de9d <lockStuff()>:
c001de9d:	e8 b7 ff ff ff       	call   c001de59 <disableIRQs()>
c001dea2:	ff 05 68 1a 03 c0    	inc    DWORD PTR ds:0xc0031a68
c001dea8:	c3                   	ret    

c001dea9 <taskStartupFunction>:
c001dea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deae:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001deb1:	c3                   	ret    

c001deb2 <updateTimeUsed()>:
c001deb2:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001deb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001debd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dec4:	74 50                	je     c001df16 <updateTimeUsed()+0x64>
c001dec6:	57                   	push   edi
c001dec7:	56                   	push   esi
c001dec8:	53                   	push   ebx
c001dec9:	0f 31                	rdtsc  
c001decb:	89 c1                	mov    ecx,eax
c001decd:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c001ded2:	2b 0d 98 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031a98
c001ded8:	89 d3                	mov    ebx,edx
c001deda:	89 0d a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,ecx
c001dee0:	1b 1d 9c 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031a9c
c001dee6:	a3 98 1a 03 c0       	mov    ds:0xc0031a98,eax
c001deeb:	89 1d a4 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa4,ebx
c001def1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def6:	89 15 ac 1a 03 c0    	mov    DWORD PTR ds:0xc0031aac,edx
c001defc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001deff:	89 15 9c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a9c,edx
c001df05:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df08:	01 f1                	add    ecx,esi
c001df0a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df0d:	11 fb                	adc    ebx,edi
c001df0f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df12:	5b                   	pop    ebx
c001df13:	5e                   	pop    esi
c001df14:	5f                   	pop    edi
c001df15:	c3                   	ret    
c001df16:	c3                   	ret    

c001df17 <switchToThread(ThreadControlBlock*)>:
c001df17:	53                   	push   ebx
c001df18:	83 ec 08             	sub    esp,0x8
c001df1b:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001df20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df24:	85 c0                	test   eax,eax
c001df26:	75 30                	jne    c001df58 <switchToThread(ThreadControlBlock*)+0x41>
c001df28:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df2b:	3c ff                	cmp    al,0xff
c001df2d:	74 25                	je     c001df54 <switchToThread(ThreadControlBlock*)+0x3d>
c001df2f:	0f b6 d0             	movzx  edx,al
c001df32:	b8 84 03 00 00       	mov    eax,0x384
c001df37:	29 d0                	sub    eax,edx
c001df39:	c1 e0 10             	shl    eax,0x10
c001df3c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df3f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df42:	e8 6b ff ff ff       	call   c001deb2 <updateTimeUsed()>
c001df47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df4b:	83 c4 08             	add    esp,0x8
c001df4e:	5b                   	pop    ebx
c001df4f:	e9 0e 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df54:	31 c0                	xor    eax,eax
c001df56:	eb e7                	jmp    c001df3f <switchToThread(ThreadControlBlock*)+0x28>
c001df58:	c7 05 64 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x1
c001df62:	83 c4 08             	add    esp,0x8
c001df65:	5b                   	pop    ebx
c001df66:	c3                   	ret    
c001df67:	90                   	nop

c001df68 <Semaphore::Semaphore(int)>:
c001df68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df70:	89 10                	mov    DWORD PTR [eax],edx
c001df72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df76:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df93:	90                   	nop
c001df94:	c3                   	ret    
c001df95:	90                   	nop

c001df96 <Mutex::Mutex()>:
c001df96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df9a:	6a 01                	push   0x1
c001df9c:	50                   	push   eax
c001df9d:	e8 c6 ff ff ff       	call   c001df68 <Semaphore::Semaphore(int)>
c001dfa2:	83 c4 08             	add    esp,0x8
c001dfa5:	90                   	nop
c001dfa6:	c3                   	ret    
c001dfa7:	90                   	nop

c001dfa8 <Process::createThread(void (*)(void*), void*, int)>:
c001dfa8:	55                   	push   ebp
c001dfa9:	31 c9                	xor    ecx,ecx
c001dfab:	57                   	push   edi
c001dfac:	56                   	push   esi
c001dfad:	53                   	push   ebx
c001dfae:	83 ec 1c             	sub    esp,0x1c
c001dfb1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfb5:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfbc:	89 f2                	mov    edx,esi
c001dfbe:	0f b7 c2             	movzx  eax,dx
c001dfc1:	83 e2 01             	and    edx,0x1
c001dfc4:	74 14                	je     c001dfda <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfc6:	d1 f8                	sar    eax,1
c001dfc8:	41                   	inc    ecx
c001dfc9:	89 c2                	mov    edx,eax
c001dfcb:	83 f9 10             	cmp    ecx,0x10
c001dfce:	75 ee                	jne    c001dfbe <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfd0:	83 c4 1c             	add    esp,0x1c
c001dfd3:	31 c0                	xor    eax,eax
c001dfd5:	5b                   	pop    ebx
c001dfd6:	5e                   	pop    esi
c001dfd7:	5f                   	pop    edi
c001dfd8:	5d                   	pop    ebp
c001dfd9:	c3                   	ret    
c001dfda:	83 ec 08             	sub    esp,0x8
c001dfdd:	b8 01 00 00 00       	mov    eax,0x1
c001dfe2:	d3 e0                	shl    eax,cl
c001dfe4:	09 c6                	or     esi,eax
c001dfe6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfec:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dff3:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dff6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dff9:	01 ce                	add    esi,ecx
c001dffb:	89 f0                	mov    eax,esi
c001dffd:	c1 e0 05             	shl    eax,0x5
c001e000:	01 c6                	add    esi,eax
c001e002:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e005:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e00b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e011:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e015:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e01b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e021:	89 ca                	mov    edx,ecx
c001e023:	f7 da                	neg    edx
c001e025:	c1 e2 15             	shl    edx,0x15
c001e028:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e02e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e034:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e038:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e042:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e048:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e04c:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e052:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e05c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e066:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e06d:	50                   	push   eax
c001e06e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e072:	68 88 1a 03 c0       	push   0xc0031a88
c001e077:	e8 14 ab 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e07c:	83 c4 10             	add    esp,0x10
c001e07f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e083:	83 c4 1c             	add    esp,0x1c
c001e086:	5b                   	pop    ebx
c001e087:	5e                   	pop    esi
c001e088:	5f                   	pop    edi
c001e089:	5d                   	pop    ebp
c001e08a:	c3                   	ret    
c001e08b:	90                   	nop

c001e08c <Process::createUserThread()>:
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	68 80 00 00 00       	push   0x80
c001e094:	6a 00                	push   0x0
c001e096:	68 7a de 01 c0       	push   0xc001de7a
c001e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e09f:	e8 04 ff ff ff       	call   c001dfa8 <Process::createThread(void (*)(void*), void*, int)>
c001e0a4:	83 c4 1c             	add    esp,0x1c
c001e0a7:	c3                   	ret    

c001e0a8 <setupMultitasking(void (*)())>:
c001e0a8:	56                   	push   esi
c001e0a9:	53                   	push   ebx
c001e0aa:	53                   	push   ebx
c001e0ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0af:	eb 10                	jmp    c001e0c1 <setupMultitasking(void (*)())+0x19>
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	68 88 1a 03 c0       	push   0xc0031a88
c001e0b9:	e8 24 aa 00 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	83 ec 0c             	sub    esp,0xc
c001e0c4:	68 88 1a 03 c0       	push   0xc0031a88
c001e0c9:	e8 f8 a9 00 00       	call   c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0ce:	83 c4 10             	add    esp,0x10
c001e0d1:	84 c0                	test   al,al
c001e0d3:	74 dc                	je     c001e0b1 <setupMultitasking(void (*)())+0x9>
c001e0d5:	83 ec 0c             	sub    esp,0xc
c001e0d8:	68 3f 07 00 00       	push   0x73f
c001e0dd:	e8 5e 17 ff ff       	call   c000f840 <malloc>
c001e0e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0e9:	89 c3                	mov    ebx,eax
c001e0eb:	6a 00                	push   0x0
c001e0ed:	68 0f c3 02 c0       	push   0xc002c30f
c001e0f2:	6a 01                	push   0x1
c001e0f4:	50                   	push   eax
c001e0f5:	e8 b0 fb ff ff       	call   c001dcaa <Process::Process(bool, char const*, Process*, char**)>
c001e0fa:	83 c4 18             	add    esp,0x18
c001e0fd:	89 1d 94 1a 03 c0    	mov    DWORD PTR ds:0xc0031a94,ebx
c001e103:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e109:	68 30 c4 02 c0       	push   0xc002c430
c001e10e:	e8 d7 4e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e113:	58                   	pop    eax
c001e114:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e11a:	e8 76 2c ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c001e11f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e127:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e12d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e130:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e13a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e140:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e146:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e150:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e15a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e164:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e16a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e170:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e17a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e180:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e18a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e190:	5a                   	pop    edx
c001e191:	59                   	pop    ecx
c001e192:	68 0b c3 02 c0       	push   0xc002c30b
c001e197:	50                   	push   eax
c001e198:	e8 97 26 fe ff       	call   c0000834 <strcpy>
c001e19d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1a4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1a8:	83 c4 14             	add    esp,0x14
c001e1ab:	5b                   	pop    ebx
c001e1ac:	5e                   	pop    esi
c001e1ad:	e9 a2 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1b2 <schedule()>:
c001e1b2:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001e1b7:	85 c0                	test   eax,eax
c001e1b9:	74 0b                	je     c001e1c6 <schedule()+0x14>
c001e1bb:	c7 05 64 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x1
c001e1c5:	c3                   	ret    
c001e1c6:	53                   	push   ebx
c001e1c7:	83 ec 14             	sub    esp,0x14
c001e1ca:	68 88 1a 03 c0       	push   0xc0031a88
c001e1cf:	e8 f2 a8 00 00       	call   c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	84 c0                	test   al,al
c001e1d9:	75 38                	jne    c001e213 <schedule()+0x61>
c001e1db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1e3:	4a                   	dec    edx
c001e1e4:	74 32                	je     c001e218 <schedule()+0x66>
c001e1e6:	83 ec 0c             	sub    esp,0xc
c001e1e9:	68 88 1a 03 c0       	push   0xc0031a88
c001e1ee:	e8 cb a8 00 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1f3:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e1fa:	89 c3                	mov    ebx,eax
c001e1fc:	e8 e1 a8 00 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e201:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e20b:	e8 07 fd ff ff       	call   c001df17 <switchToThread(ThreadControlBlock*)>
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	83 c4 08             	add    esp,0x8
c001e216:	5b                   	pop    ebx
c001e217:	c3                   	ret    
c001e218:	83 ec 08             	sub    esp,0x8
c001e21b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e222:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e228:	68 88 1a 03 c0       	push   0xc0031a88
c001e22d:	e8 5e a9 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e232:	83 c4 10             	add    esp,0x10
c001e235:	eb af                	jmp    c001e1e6 <schedule()+0x34>

c001e237 <unlockStuff()>:
c001e237:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001e23c:	48                   	dec    eax
c001e23d:	a3 68 1a 03 c0       	mov    ds:0xc0031a68,eax
c001e242:	75 09                	jne    c001e24d <unlockStuff()+0x16>
c001e244:	a1 64 1a 03 c0       	mov    eax,ds:0xc0031a64
c001e249:	85 c0                	test   eax,eax
c001e24b:	75 05                	jne    c001e252 <unlockStuff()+0x1b>
c001e24d:	e9 15 fc ff ff       	jmp    c001de67 <enableIRQs()>
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	c7 05 64 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x0
c001e25f:	e8 4e ff ff ff       	call   c001e1b2 <schedule()>
c001e264:	83 c4 0c             	add    esp,0xc
c001e267:	e9 fb fb ff ff       	jmp    c001de67 <enableIRQs()>

c001e26c <Semaphore::tryAcquire()>:
c001e26c:	83 ec 0c             	sub    esp,0xc
c001e26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e273:	e8 25 fc ff ff       	call   c001de9d <lockStuff()>
c001e278:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e27b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e27d:	7c 0b                	jl     c001e28a <Semaphore::tryAcquire()+0x1e>
c001e27f:	e8 b3 ff ff ff       	call   c001e237 <unlockStuff()>
c001e284:	31 c0                	xor    eax,eax
c001e286:	83 c4 0c             	add    esp,0xc
c001e289:	c3                   	ret    
c001e28a:	42                   	inc    edx
c001e28b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e28e:	e8 a4 ff ff ff       	call   c001e237 <unlockStuff()>
c001e293:	b0 01                	mov    al,0x1
c001e295:	83 c4 0c             	add    esp,0xc
c001e298:	c3                   	ret    
c001e299:	90                   	nop

c001e29a <Semaphore::assertLocked(char const*)>:
c001e29a:	83 ec 0c             	sub    esp,0xc
c001e29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2a5:	e8 f3 fb ff ff       	call   c001de9d <lockStuff()>
c001e2aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2ac:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2af:	7c 05                	jl     c001e2b6 <Semaphore::assertLocked(char const*)+0x1c>
c001e2b1:	83 c4 0c             	add    esp,0xc
c001e2b4:	eb 81                	jmp    c001e237 <unlockStuff()>
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	52                   	push   edx
c001e2ba:	e8 dc c3 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001e2bf:	83 c4 10             	add    esp,0x10
c001e2c2:	83 c4 0c             	add    esp,0xc
c001e2c5:	e9 6d ff ff ff       	jmp    c001e237 <unlockStuff()>

c001e2ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2ca:	83 ec 0c             	sub    esp,0xc
c001e2cd:	e8 8f fb ff ff       	call   c001de61 <getIRQNestingLevel()>
c001e2d2:	83 ec 08             	sub    esp,0x8
c001e2d5:	50                   	push   eax
c001e2d6:	68 64 c4 02 c0       	push   0xc002c464
c001e2db:	e8 0a 4d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e2e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2ec:	e8 c1 fe ff ff       	call   c001e1b2 <schedule()>
c001e2f1:	e8 82 fb ff ff       	call   c001de78 <unlockScheduler()>
c001e2f6:	e8 66 fb ff ff       	call   c001de61 <getIRQNestingLevel()>
c001e2fb:	5a                   	pop    edx
c001e2fc:	59                   	pop    ecx
c001e2fd:	50                   	push   eax
c001e2fe:	68 98 c4 02 c0       	push   0xc002c498
c001e303:	e8 e2 4c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e308:	83 c4 1c             	add    esp,0x1c
c001e30b:	c3                   	ret    

c001e30c <blockTask(TaskState)>:
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e313:	e8 5e fb ff ff       	call   c001de76 <lockScheduler()>
c001e318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e320:	e8 8d fe ff ff       	call   c001e1b2 <schedule()>
c001e325:	83 c4 0c             	add    esp,0xc
c001e328:	e9 4b fb ff ff       	jmp    c001de78 <unlockScheduler()>

c001e32d <waitTask(int, int*, int)>:
c001e32d:	83 ec 18             	sub    esp,0x18
c001e330:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e335:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e339:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e33c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e340:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e345:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e348:	6a 07                	push   0x7
c001e34a:	e8 bd ff ff ff       	call   c001e30c <blockTask(TaskState)>
c001e34f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e354:	83 c4 10             	add    esp,0x10
c001e357:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e35a:	85 d2                	test   edx,edx
c001e35c:	74 0a                	je     c001e368 <waitTask(int, int*, int)+0x3b>
c001e35e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e361:	89 02                	mov    DWORD PTR [edx],eax
c001e363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e368:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e36b:	83 c4 0c             	add    esp,0xc
c001e36e:	c3                   	ret    

c001e36f <nanoSleepUntil(unsigned long long)>:
c001e36f:	83 ec 0c             	sub    esp,0xc
c001e372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e376:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e37a:	3b 05 b0 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002ebb0
c001e380:	89 d1                	mov    ecx,edx
c001e382:	1b 0d b4 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ebb4
c001e388:	73 04                	jae    c001e38e <nanoSleepUntil(unsigned long long)+0x1f>
c001e38a:	83 c4 0c             	add    esp,0xc
c001e38d:	c3                   	ret    
c001e38e:	e8 0a fb ff ff       	call   c001de9d <lockStuff()>
c001e393:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e399:	83 ec 08             	sub    esp,0x8
c001e39c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e39f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3a2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3a8:	68 7c 1a 03 c0       	push   0xc0031a7c
c001e3ad:	e8 de a7 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3b2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3b9:	e8 4e ff ff ff       	call   c001e30c <blockTask(TaskState)>
c001e3be:	83 c4 1c             	add    esp,0x1c
c001e3c1:	e9 71 fe ff ff       	jmp    c001e237 <unlockStuff()>

c001e3c6 <nanoSleep(unsigned long long)>:
c001e3c6:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c001e3cb:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c001e3d1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3d5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3d9:	eb 94                	jmp    c001e36f <nanoSleepUntil(unsigned long long)>

c001e3db <sleep(unsigned long long)>:
c001e3db:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3e3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3e8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3ec:	01 ca                	add    edx,ecx
c001e3ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3f6:	eb ce                	jmp    c001e3c6 <nanoSleep(unsigned long long)>

c001e3f8 <Semaphore::acquire()>:
c001e3f8:	83 ec 0c             	sub    esp,0xc
c001e3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ff:	e8 99 fa ff ff       	call   c001de9d <lockStuff()>
c001e404:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e407:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e409:	7d 0c                	jge    c001e417 <Semaphore::acquire()+0x1f>
c001e40b:	42                   	inc    edx
c001e40c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e40f:	83 c4 0c             	add    esp,0xc
c001e412:	e9 20 fe ff ff       	jmp    c001e237 <unlockStuff()>
c001e417:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e41d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e424:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e427:	85 d2                	test   edx,edx
c001e429:	74 2a                	je     c001e455 <Semaphore::acquire()+0x5d>
c001e42b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e42e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e434:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e437:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e43d:	83 ec 0c             	sub    esp,0xc
c001e440:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e443:	6a 05                	push   0x5
c001e445:	e8 c2 fe ff ff       	call   c001e30c <blockTask(TaskState)>
c001e44a:	83 c4 10             	add    esp,0x10
c001e44d:	83 c4 0c             	add    esp,0xc
c001e450:	e9 e2 fd ff ff       	jmp    c001e237 <unlockStuff()>
c001e455:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e45b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e45e:	eb d7                	jmp    c001e437 <Semaphore::acquire()+0x3f>

c001e460 <taskReturned>:
c001e460:	83 ec 18             	sub    esp,0x18
c001e463:	68 cc c4 02 c0       	push   0xc002c4cc
c001e468:	e8 2e c2 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001e46d:	83 c4 10             	add    esp,0x10
c001e470:	83 ec 0c             	sub    esp,0xc
c001e473:	6a 02                	push   0x2
c001e475:	e8 92 fe ff ff       	call   c001e30c <blockTask(TaskState)>
c001e47a:	e8 f7 f9 ff ff       	call   c001de76 <lockScheduler()>
c001e47f:	e8 2e fd ff ff       	call   c001e1b2 <schedule()>
c001e484:	e8 ef f9 ff ff       	call   c001de78 <unlockScheduler()>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	eb e2                	jmp    c001e470 <taskReturned+0x10>

c001e48e <unblockTask(ThreadControlBlock*)>:
c001e48e:	53                   	push   ebx
c001e48f:	83 ec 08             	sub    esp,0x8
c001e492:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e496:	e8 db f9 ff ff       	call   c001de76 <lockScheduler()>
c001e49b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e49e:	85 c0                	test   eax,eax
c001e4a0:	74 5c                	je     c001e4fe <unblockTask(ThreadControlBlock*)+0x70>
c001e4a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4a5:	48                   	dec    eax
c001e4a6:	74 31                	je     c001e4d9 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	68 88 1a 03 c0       	push   0xc0031a88
c001e4b0:	e8 09 a6 00 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	85 c0                	test   eax,eax
c001e4ba:	75 17                	jne    c001e4d3 <unblockTask(ThreadControlBlock*)+0x45>
c001e4bc:	eb 65                	jmp    c001e523 <unblockTask(ThreadControlBlock*)+0x95>
c001e4be:	83 ec 08             	sub    esp,0x8
c001e4c1:	50                   	push   eax
c001e4c2:	68 88 1a 03 c0       	push   0xc0031a88
c001e4c7:	e8 cc a8 00 00       	call   c0028d98 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	85 c0                	test   eax,eax
c001e4d1:	74 50                	je     c001e523 <unblockTask(ThreadControlBlock*)+0x95>
c001e4d3:	39 c3                	cmp    ebx,eax
c001e4d5:	75 e7                	jne    c001e4be <unblockTask(ThreadControlBlock*)+0x30>
c001e4d7:	eb 1c                	jmp    c001e4f5 <unblockTask(ThreadControlBlock*)+0x67>
c001e4d9:	83 ec 0c             	sub    esp,0xc
c001e4dc:	68 bc c5 02 c0       	push   0xc002c5bc
c001e4e1:	e8 04 4b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e4e6:	c7 04 24 48 c5 02 c0 	mov    DWORD PTR [esp],0xc002c548
c001e4ed:	e8 f8 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e4f2:	83 c4 10             	add    esp,0x10
c001e4f5:	83 c4 08             	add    esp,0x8
c001e4f8:	5b                   	pop    ebx
c001e4f9:	e9 7a f9 ff ff       	jmp    c001de78 <unlockScheduler()>
c001e4fe:	83 ec 0c             	sub    esp,0xc
c001e501:	68 00 c5 02 c0       	push   0xc002c500
c001e506:	e8 df 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e50b:	c7 04 24 48 c5 02 c0 	mov    DWORD PTR [esp],0xc002c548
c001e512:	e8 d3 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e517:	83 c4 10             	add    esp,0x10
c001e51a:	83 c4 08             	add    esp,0x8
c001e51d:	5b                   	pop    ebx
c001e51e:	e9 55 f9 ff ff       	jmp    c001de78 <unlockScheduler()>
c001e523:	83 ec 08             	sub    esp,0x8
c001e526:	53                   	push   ebx
c001e527:	68 88 1a 03 c0       	push   0xc0031a88
c001e52c:	e8 5f a6 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	83 c4 08             	add    esp,0x8
c001e537:	5b                   	pop    ebx
c001e538:	e9 3b f9 ff ff       	jmp    c001de78 <unlockScheduler()>

c001e53d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e53d:	55                   	push   ebp
c001e53e:	57                   	push   edi
c001e53f:	56                   	push   esi
c001e540:	53                   	push   ebx
c001e541:	83 ec 1c             	sub    esp,0x1c
c001e544:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e548:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e54b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e551:	85 ff                	test   edi,edi
c001e553:	7e 20                	jle    c001e575 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e555:	31 f6                	xor    esi,esi
c001e557:	83 ec 0c             	sub    esp,0xc
c001e55a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e561:	46                   	inc    esi
c001e562:	e8 e9 12 ff ff       	call   c000f850 <free>
c001e567:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e573:	7f e2                	jg     c001e557 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e575:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e57f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e584:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e587:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e58a:	d3 c0                	rol    eax,cl
c001e58c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e593:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e596:	89 f7                	mov    edi,esi
c001e598:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5a0:	0f 85 74 01 00 00    	jne    c001e71a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5a6:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5ac:	85 ed                	test   ebp,ebp
c001e5ae:	74 1b                	je     c001e5cb <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5b0:	83 ec 0c             	sub    esp,0xc
c001e5b3:	55                   	push   ebp
c001e5b4:	e8 4f be ff ff       	call   c001a408 <EnvVarContainer::~EnvVarContainer()>
c001e5b9:	59                   	pop    ecx
c001e5ba:	5e                   	pop    esi
c001e5bb:	6a 0c                	push   0xc
c001e5bd:	55                   	push   ebp
c001e5be:	e8 47 49 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001e5c3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5c6:	83 c4 10             	add    esp,0x10
c001e5c9:	89 f7                	mov    edi,esi
c001e5cb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5d1:	85 c0                	test   eax,eax
c001e5d3:	0f 84 aa 00 00 00    	je     c001e683 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5d9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5e0:	31 c9                	xor    ecx,ecx
c001e5e2:	eb 10                	jmp    c001e5f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5e4:	41                   	inc    ecx
c001e5e5:	83 f9 10             	cmp    ecx,0x10
c001e5e8:	0f 84 95 00 00 00    	je     c001e683 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5ee:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5f4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5fb:	d3 fa                	sar    edx,cl
c001e5fd:	83 e2 01             	and    edx,0x1
c001e600:	74 e2                	je     c001e5e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e602:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e605:	01 ca                	add    edx,ecx
c001e607:	89 d5                	mov    ebp,edx
c001e609:	c1 e5 05             	shl    ebp,0x5
c001e60c:	01 ea                	add    edx,ebp
c001e60e:	01 d0                	add    eax,edx
c001e610:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e616:	83 fd 07             	cmp    ebp,0x7
c001e619:	75 c9                	jne    c001e5e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e61b:	05 40 02 00 00       	add    eax,0x240
c001e620:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e623:	83 fd ff             	cmp    ebp,0xffffffff
c001e626:	0f 8c 08 01 00 00    	jl     c001e734 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e62c:	0f 84 b9 01 00 00    	je     c001e7eb <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e632:	85 ed                	test   ebp,ebp
c001e634:	0f 84 a0 01 00 00    	je     c001e7da <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e63a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e63c:	75 a6                	jne    c001e5e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e63e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e648:	01 d0                	add    eax,edx
c001e64a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e64e:	83 ec 0c             	sub    esp,0xc
c001e651:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e657:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e65a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e660:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e667:	50                   	push   eax
c001e668:	e8 21 fe ff ff       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e673:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e677:	89 f7                	mov    edi,esi
c001e679:	41                   	inc    ecx
c001e67a:	83 f9 10             	cmp    ecx,0x10
c001e67d:	0f 85 6b ff ff ff    	jne    c001e5ee <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e683:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e689:	85 c0                	test   eax,eax
c001e68b:	74 5d                	je     c001e6ea <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e68d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e693:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e699:	74 4f                	je     c001e6ea <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e69b:	83 ec 0c             	sub    esp,0xc
c001e69e:	68 88 1a 03 c0       	push   0xc0031a88
c001e6a3:	e8 16 a4 00 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a8:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e6af:	89 c7                	mov    edi,eax
c001e6b1:	e8 10 a4 00 00       	call   c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6b6:	83 c4 10             	add    esp,0x10
c001e6b9:	84 c0                	test   al,al
c001e6bb:	0f 84 e4 00 00 00    	je     c001e7a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6c4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6ca:	85 d2                	test   edx,edx
c001e6cc:	74 0f                	je     c001e6dd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6ce:	83 ec 0c             	sub    esp,0xc
c001e6d1:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6d3:	52                   	push   edx
c001e6d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6d7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6da:	83 c4 10             	add    esp,0x10
c001e6dd:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6e7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6ea:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6f0:	85 db                	test   ebx,ebx
c001e6f2:	74 16                	je     c001e70a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6f4:	83 ec 0c             	sub    esp,0xc
c001e6f7:	53                   	push   ebx
c001e6f8:	e8 51 3b ff ff       	call   c001224e <VAS::~VAS()>
c001e6fd:	58                   	pop    eax
c001e6fe:	5a                   	pop    edx
c001e6ff:	6a 10                	push   0x10
c001e701:	53                   	push   ebx
c001e702:	e8 03 48 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001e707:	83 c4 10             	add    esp,0x10
c001e70a:	83 ec 0c             	sub    esp,0xc
c001e70d:	68 16 c3 02 c0       	push   0xc002c316
c001e712:	e8 d3 48 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e717:	83 c4 10             	add    esp,0x10
c001e71a:	83 ec 08             	sub    esp,0x8
c001e71d:	68 3f 07 00 00       	push   0x73f
c001e722:	68 24 c3 02 c0       	push   0xc002c324
c001e727:	e8 be 48 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e72c:	83 c4 2c             	add    esp,0x2c
c001e72f:	5b                   	pop    ebx
c001e730:	5e                   	pop    esi
c001e731:	5f                   	pop    edi
c001e732:	5d                   	pop    ebp
c001e733:	c3                   	ret    
c001e734:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	68 00 c6 02 c0       	push   0xc002c600
c001e740:	e8 56 bf ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001e745:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e748:	83 c4 10             	add    esp,0x10
c001e74b:	89 f7                	mov    edi,esi
c001e74d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e751:	e9 8e fe ff ff       	jmp    c001e5e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e756:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e75c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e762:	75 1c                	jne    c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e764:	83 ec 0c             	sub    esp,0xc
c001e767:	68 68 c6 02 c0       	push   0xc002c668
c001e76c:	e8 79 48 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e771:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e778:	e8 8f fb ff ff       	call   c001e30c <blockTask(TaskState)>
c001e77d:	83 c4 10             	add    esp,0x10
c001e780:	83 ec 08             	sub    esp,0x8
c001e783:	56                   	push   esi
c001e784:	68 88 1a 03 c0       	push   0xc0031a88
c001e789:	e8 02 a4 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e78e:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e795:	e8 24 a3 00 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e79a:	83 c4 10             	add    esp,0x10
c001e79d:	39 f8                	cmp    eax,edi
c001e79f:	0f 84 1c ff ff ff    	je     c001e6c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7a5:	83 ec 0c             	sub    esp,0xc
c001e7a8:	68 88 1a 03 c0       	push   0xc0031a88
c001e7ad:	e8 0c a3 00 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7b2:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e7b9:	89 c6                	mov    esi,eax
c001e7bb:	e8 22 a3 00 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	39 f3                	cmp    ebx,esi
c001e7c5:	74 b9                	je     c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7c7:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7ca:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7cd:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7d3:	75 ab                	jne    c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7d5:	e9 7c ff ff ff       	jmp    c001e756 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7de:	83 ec 0c             	sub    esp,0xc
c001e7e1:	68 34 c6 02 c0       	push   0xc002c634
c001e7e6:	e9 55 ff ff ff       	jmp    c001e740 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7eb:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7f1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7f7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7fd:	01 d7                	add    edi,edx
c001e7ff:	89 f8                	mov    eax,edi
c001e801:	e9 44 fe ff ff       	jmp    c001e64a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e806 <cleanerTaskFunction(void*)>:
c001e806:	53                   	push   ebx
c001e807:	83 ec 08             	sub    esp,0x8
c001e80a:	e8 69 f6 ff ff       	call   c001de78 <unlockScheduler()>
c001e80f:	e8 62 f6 ff ff       	call   c001de76 <lockScheduler()>
c001e814:	80 3d 4c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a4c,0x0
c001e81b:	0f 85 8e 00 00 00    	jne    c001e8af <cleanerTaskFunction(void*)+0xa9>
c001e821:	83 ec 0c             	sub    esp,0xc
c001e824:	6a 02                	push   0x2
c001e826:	e8 9f fa ff ff       	call   c001e2ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e82b:	83 c4 10             	add    esp,0x10
c001e82e:	c6 05 4c 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a4c,0x0
c001e835:	e8 63 f6 ff ff       	call   c001de9d <lockStuff()>
c001e83a:	e8 37 f6 ff ff       	call   c001de76 <lockScheduler()>
c001e83f:	83 ec 0c             	sub    esp,0xc
c001e842:	68 70 1a 03 c0       	push   0xc0031a70
c001e847:	e8 7a a2 00 00       	call   c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e84c:	83 c4 10             	add    esp,0x10
c001e84f:	84 c0                	test   al,al
c001e851:	75 40                	jne    c001e893 <cleanerTaskFunction(void*)+0x8d>
c001e853:	83 ec 0c             	sub    esp,0xc
c001e856:	68 70 1a 03 c0       	push   0xc0031a70
c001e85b:	e8 5e a2 00 00       	call   c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e860:	c7 04 24 70 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a70
c001e867:	89 c3                	mov    ebx,eax
c001e869:	e8 74 a2 00 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e86e:	c7 04 24 3a c3 02 c0 	mov    DWORD PTR [esp],0xc002c33a
c001e875:	e8 70 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e87a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e87d:	e8 bb fc ff ff       	call   c001e53d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e882:	c7 04 24 53 c3 02 c0 	mov    DWORD PTR [esp],0xc002c353
c001e889:	e8 5c 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e88e:	83 c4 10             	add    esp,0x10
c001e891:	eb ac                	jmp    c001e83f <cleanerTaskFunction(void*)+0x39>
c001e893:	e8 e0 f5 ff ff       	call   c001de78 <unlockScheduler()>
c001e898:	e8 9a f9 ff ff       	call   c001e237 <unlockStuff()>
c001e89d:	e8 d4 f5 ff ff       	call   c001de76 <lockScheduler()>
c001e8a2:	80 3d 4c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a4c,0x0
c001e8a9:	0f 84 72 ff ff ff    	je     c001e821 <cleanerTaskFunction(void*)+0x1b>
c001e8af:	e8 c4 f5 ff ff       	call   c001de78 <unlockScheduler()>
c001e8b4:	e9 75 ff ff ff       	jmp    c001e82e <cleanerTaskFunction(void*)+0x28>

c001e8b9 <terminateTask(int)>:
c001e8b9:	83 ec 14             	sub    esp,0x14
c001e8bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8c4:	83 c0 0c             	add    eax,0xc
c001e8c7:	50                   	push   eax
c001e8c8:	68 90 c6 02 c0       	push   0xc002c690
c001e8cd:	e8 18 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e8d2:	e8 c6 f5 ff ff       	call   c001de9d <lockStuff()>
c001e8d7:	e8 9a f5 ff ff       	call   c001de76 <lockScheduler()>
c001e8dc:	c7 04 24 66 c3 02 c0 	mov    DWORD PTR [esp],0xc002c366
c001e8e3:	e8 02 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e8e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8fc:	5a                   	pop    edx
c001e8fd:	59                   	pop    ecx
c001e8fe:	50                   	push   eax
c001e8ff:	68 70 1a 03 c0       	push   0xc0031a70
c001e904:	e8 87 a2 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e90e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e915:	c7 04 24 80 c3 02 c0 	mov    DWORD PTR [esp],0xc002c380
c001e91c:	e8 c9 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	a1 48 1a 03 c0       	mov    eax,ds:0xc0031a48
c001e929:	85 c0                	test   eax,eax
c001e92b:	74 5a                	je     c001e987 <terminateTask(int)+0xce>
c001e92d:	83 ec 0c             	sub    esp,0xc
c001e930:	68 9a c3 02 c0       	push   0xc002c39a
c001e935:	e8 b0 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e93a:	58                   	pop    eax
c001e93b:	c6 05 4c 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a4c,0x1
c001e942:	ff 35 48 1a 03 c0    	push   DWORD PTR ds:0xc0031a48
c001e948:	e8 41 fb ff ff       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c001e94d:	c7 04 24 b4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3b4
c001e954:	e8 91 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	e8 17 f5 ff ff       	call   c001de78 <unlockScheduler()>
c001e961:	e8 d1 f8 ff ff       	call   c001e237 <unlockStuff()>
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	68 ec c3 02 c0       	push   0xc002c3ec
c001e96e:	e8 77 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e973:	83 c4 10             	add    esp,0x10
c001e976:	e8 fb f4 ff ff       	call   c001de76 <lockScheduler()>
c001e97b:	e8 32 f8 ff ff       	call   c001e1b2 <schedule()>
c001e980:	e8 f3 f4 ff ff       	call   c001de78 <unlockScheduler()>
c001e985:	eb ef                	jmp    c001e976 <terminateTask(int)+0xbd>
c001e987:	83 ec 0c             	sub    esp,0xc
c001e98a:	68 ce c3 02 c0       	push   0xc002c3ce
c001e98f:	e8 56 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	eb c3                	jmp    c001e95c <terminateTask(int)+0xa3>

c001e999 <Thr::terminateFromIRQ(int)>:
c001e999:	83 ec 18             	sub    esp,0x18
c001e99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a0:	e8 14 ff ff ff       	call   c001e8b9 <terminateTask(int)>
c001e9a5:	90                   	nop

c001e9a6 <Semaphore::release()>:
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ad:	e8 eb f4 ff ff       	call   c001de9d <lockStuff()>
c001e9b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9b5:	85 d2                	test   edx,edx
c001e9b7:	74 1a                	je     c001e9d3 <Semaphore::release()+0x2d>
c001e9b9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9c2:	52                   	push   edx
c001e9c3:	e8 c6 fa ff ff       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c001e9c8:	83 c4 10             	add    esp,0x10
c001e9cb:	83 c4 0c             	add    esp,0xc
c001e9ce:	e9 64 f8 ff ff       	jmp    c001e237 <unlockStuff()>
c001e9d3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9d6:	83 c4 0c             	add    esp,0xc
c001e9d9:	e9 59 f8 ff ff       	jmp    c001e237 <unlockStuff()>

c001e9de <__static_initialization_and_destruction_0(int, int)>:
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9e6:	0f 85 88 00 00 00    	jne    c001ea74 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9f4:	75 7e                	jne    c001ea74 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9f6:	83 ec 0c             	sub    esp,0xc
c001e9f9:	68 88 1a 03 c0       	push   0xc0031a88
c001e9fe:	e8 3d a3 00 00       	call   c0028d40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	83 ec 04             	sub    esp,0x4
c001ea09:	68 48 d4 02 c0       	push   0xc002d448
c001ea0e:	68 88 1a 03 c0       	push   0xc0031a88
c001ea13:	68 00 8d 02 c0       	push   0xc0028d00
c001ea18:	e8 67 44 ff ff       	call   c0012e84 <__cxa_atexit>
c001ea1d:	83 c4 10             	add    esp,0x10
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	68 7c 1a 03 c0       	push   0xc0031a7c
c001ea28:	e8 13 a3 00 00       	call   c0028d40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea2d:	83 c4 10             	add    esp,0x10
c001ea30:	83 ec 04             	sub    esp,0x4
c001ea33:	68 48 d4 02 c0       	push   0xc002d448
c001ea38:	68 7c 1a 03 c0       	push   0xc0031a7c
c001ea3d:	68 00 8d 02 c0       	push   0xc0028d00
c001ea42:	e8 3d 44 ff ff       	call   c0012e84 <__cxa_atexit>
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	83 ec 0c             	sub    esp,0xc
c001ea4d:	68 70 1a 03 c0       	push   0xc0031a70
c001ea52:	e8 e9 a2 00 00       	call   c0028d40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea57:	83 c4 10             	add    esp,0x10
c001ea5a:	83 ec 04             	sub    esp,0x4
c001ea5d:	68 48 d4 02 c0       	push   0xc002d448
c001ea62:	68 70 1a 03 c0       	push   0xc0031a70
c001ea67:	68 00 8d 02 c0       	push   0xc0028d00
c001ea6c:	e8 13 44 ff ff       	call   c0012e84 <__cxa_atexit>
c001ea71:	83 c4 10             	add    esp,0x10
c001ea74:	90                   	nop
c001ea75:	83 c4 0c             	add    esp,0xc
c001ea78:	c3                   	ret    

c001ea79 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	83 ec 08             	sub    esp,0x8
c001ea7f:	68 ff ff 00 00       	push   0xffff
c001ea84:	6a 01                	push   0x1
c001ea86:	e8 53 ff ff ff       	call   c001e9de <__static_initialization_and_destruction_0(int, int)>
c001ea8b:	83 c4 10             	add    esp,0x10
c001ea8e:	83 c4 0c             	add    esp,0xc
c001ea91:	c3                   	ret    

c001ea92 <Vm::inbv(unsigned short)>:
c001ea92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea96:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea9b:	75 06                	jne    c001eaa3 <Vm::inbv(unsigned short)+0x11>
c001ea9d:	a0 cc 1a 03 c0       	mov    al,ds:0xc0031acc
c001eaa2:	c3                   	ret    
c001eaa3:	ec                   	in     al,dx
c001eaa4:	c3                   	ret    

c001eaa5 <Vm::outbv(unsigned short, unsigned char)>:
c001eaa5:	53                   	push   ebx
c001eaa6:	83 ec 08             	sub    esp,0x8
c001eaa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eab1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eab6:	75 38                	jne    c001eaf0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eab8:	0f b6 c3             	movzx  eax,bl
c001eabb:	51                   	push   ecx
c001eabc:	51                   	push   ecx
c001eabd:	50                   	push   eax
c001eabe:	68 af c6 02 c0       	push   0xc002c6af
c001eac3:	e8 22 45 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001eac8:	8b 15 cc 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031acc
c001eace:	83 c4 10             	add    esp,0x10
c001ead1:	8d 42 01             	lea    eax,[edx+0x1]
c001ead4:	88 9a e0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce520],bl
c001eada:	a3 cc 1a 03 c0       	mov    ds:0xc0031acc,eax
c001eadf:	83 f8 20             	cmp    eax,0x20
c001eae2:	75 0f                	jne    c001eaf3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eae4:	c7 05 cc 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x1f
c001eaee:	eb 03                	jmp    c001eaf3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eaf0:	88 d8                	mov    al,bl
c001eaf2:	ee                   	out    dx,al
c001eaf3:	83 c4 08             	add    esp,0x8
c001eaf6:	5b                   	pop    ebx
c001eaf7:	c3                   	ret    

c001eaf8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eaf8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eafd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb02:	c1 e0 04             	shl    eax,0x4
c001eb05:	01 d0                	add    eax,edx
c001eb07:	c3                   	ret    

c001eb08 <Vm::getSegment(unsigned int)>:
c001eb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb0c:	c1 e8 10             	shr    eax,0x10
c001eb0f:	c3                   	ret    

c001eb10 <Vm::getOffset(unsigned int)>:
c001eb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb14:	c3                   	ret    

c001eb15 <Vm::mainloop2()>:
c001eb15:	83 ec 0c             	sub    esp,0xc
c001eb18:	e8 59 f3 ff ff       	call   c001de76 <lockScheduler()>
c001eb1d:	83 ec 0c             	sub    esp,0xc
c001eb20:	c6 05 c5 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac5,0x1
c001eb27:	6a 02                	push   0x2
c001eb29:	e8 9c f7 ff ff       	call   c001e2ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb33:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb37:	52                   	push   edx
c001eb38:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb3c:	52                   	push   edx
c001eb3d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb41:	52                   	push   edx
c001eb42:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb46:	50                   	push   eax
c001eb47:	e8 ae 17 fe ff       	call   c00002fa <goToVM86>
c001eb4c:	83 c4 2c             	add    esp,0x2c
c001eb4f:	c3                   	ret    

c001eb50 <Vm::mainVm8086Loop(void*)>:
c001eb50:	83 ec 0c             	sub    esp,0xc
c001eb53:	e8 20 f3 ff ff       	call   c001de78 <unlockScheduler()>
c001eb58:	83 c4 0c             	add    esp,0xc
c001eb5b:	eb b8                	jmp    c001eb15 <Vm::mainloop2()>

c001eb5d <Vm::mainloop3(unsigned long)>:
c001eb5d:	53                   	push   ebx
c001eb5e:	83 ec 08             	sub    esp,0x8
c001eb61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb65:	e8 0c f3 ff ff       	call   c001de76 <lockScheduler()>
c001eb6a:	83 ec 0c             	sub    esp,0xc
c001eb6d:	89 1d c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,ebx
c001eb73:	6a 02                	push   0x2
c001eb75:	c6 05 c4 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac4,0x1
c001eb7c:	e8 49 f7 ff ff       	call   c001e2ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb81:	83 c4 18             	add    esp,0x18
c001eb84:	5b                   	pop    ebx
c001eb85:	eb 8e                	jmp    c001eb15 <Vm::mainloop2()>

c001eb87 <Vm::initialise8086()>:
c001eb87:	83 ec 0c             	sub    esp,0xc
c001eb8a:	68 80 00 00 00       	push   0x80
c001eb8f:	6a 00                	push   0x0
c001eb91:	68 50 eb 01 c0       	push   0xc001eb50
c001eb96:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001eb9c:	e8 07 f4 ff ff       	call   c001dfa8 <Process::createThread(void (*)(void*), void*, int)>
c001eba1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eba8:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c001ebad:	68 00 01 00 00       	push   0x100
c001ebb2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001ebb7:	6a 00                	push   0x0
c001ebb9:	6a 00                	push   0x0
c001ebbb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ebc1:	e8 e8 3a ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebc6:	83 c4 2c             	add    esp,0x2c
c001ebc9:	c3                   	ret    

c001ebca <Vm::finish8086()>:
c001ebca:	53                   	push   ebx
c001ebcb:	83 ec 08             	sub    esp,0x8
c001ebce:	e8 a3 f2 ff ff       	call   c001de76 <lockScheduler()>
c001ebd3:	80 3d c4 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031ac4,0x0
c001ebda:	75 0c                	jne    c001ebe8 <Vm::finish8086()+0x1e>
c001ebdc:	e8 d1 f5 ff ff       	call   c001e1b2 <schedule()>
c001ebe1:	e8 92 f2 ff ff       	call   c001de78 <unlockScheduler()>
c001ebe6:	eb e6                	jmp    c001ebce <Vm::finish8086()+0x4>
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	8b 1d c0 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ac0
c001ebf1:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001ebf7:	c6 05 c4 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031ac4,0x0
c001ebfe:	e8 8b f8 ff ff       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c001ec03:	e8 70 f2 ff ff       	call   c001de78 <unlockScheduler()>
c001ec08:	89 d8                	mov    eax,ebx
c001ec0a:	83 c4 18             	add    esp,0x18
c001ec0d:	5b                   	pop    ebx
c001ec0e:	c3                   	ret    

c001ec0f <Vm::getOutput8086(unsigned char*)>:
c001ec0f:	83 ec 10             	sub    esp,0x10
c001ec12:	ff 35 cc 1a 03 c0    	push   DWORD PTR ds:0xc0031acc
c001ec18:	68 e0 1a 03 c0       	push   0xc0031ae0
c001ec1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec21:	e8 1e 1b fe ff       	call   c0000744 <memcpy>
c001ec26:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001ec2b:	c7 05 cc 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x0
c001ec35:	83 c4 1c             	add    esp,0x1c
c001ec38:	c3                   	ret    

c001ec39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec39:	55                   	push   ebp
c001ec3a:	57                   	push   edi
c001ec3b:	56                   	push   esi
c001ec3c:	53                   	push   ebx
c001ec3d:	83 ec 2c             	sub    esp,0x2c
c001ec40:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec44:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec48:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec50:	e8 21 f2 ff ff       	call   c001de76 <lockScheduler()>
c001ec55:	a0 c5 1a 03 c0       	mov    al,ds:0xc0031ac5
c001ec5a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec5e:	84 c0                	test   al,al
c001ec60:	75 0c                	jne    c001ec6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec62:	e8 4b f5 ff ff       	call   c001e1b2 <schedule()>
c001ec67:	e8 0c f2 ff ff       	call   c001de78 <unlockScheduler()>
c001ec6c:	eb e2                	jmp    c001ec50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec6e:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001ec73:	c7 05 cc 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x0
c001ec7d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec81:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec85:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec89:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec8d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec91:	50                   	push   eax
c001ec92:	6a 20                	push   0x20
c001ec94:	6a 00                	push   0x0
c001ec96:	68 e0 1a 03 c0       	push   0xc0031ae0
c001ec9b:	e8 d8 1a fe ff       	call   c0000778 <memset>
c001eca0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eca7:	e8 94 0b ff ff       	call   c000f840 <malloc>
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	89 c7                	mov    edi,eax
c001ecb1:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001ecb7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecbb:	50                   	push   eax
c001ecbc:	e8 81 48 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	85 ff                	test   edi,edi
c001ecc6:	75 0a                	jne    c001ecd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	68 cb c6 02 c0       	push   0xc002c6cb
c001ecd0:	eb 27                	jmp    c001ecf9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecd2:	50                   	push   eax
c001ecd3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecd7:	50                   	push   eax
c001ecd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecdc:	50                   	push   eax
c001ecdd:	57                   	push   edi
c001ecde:	e8 6f 4b ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001ece3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ece8:	83 c4 10             	add    esp,0x10
c001eceb:	89 e8                	mov    eax,ebp
c001eced:	84 c0                	test   al,al
c001ecef:	74 19                	je     c001ed0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecf1:	83 ec 0c             	sub    esp,0xc
c001ecf4:	68 df c6 02 c0       	push   0xc002c6df
c001ecf9:	e8 9d b9 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001ecfe:	31 ed                	xor    ebp,ebp
c001ed00:	e8 73 f1 ff ff       	call   c001de78 <unlockScheduler()>
c001ed05:	83 c4 10             	add    esp,0x10
c001ed08:	eb 75                	jmp    c001ed7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed0a:	50                   	push   eax
c001ed0b:	50                   	push   eax
c001ed0c:	6a 01                	push   0x1
c001ed0e:	57                   	push   edi
c001ed0f:	e8 92 48 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001ed14:	83 c4 10             	add    esp,0x10
c001ed17:	85 c0                	test   eax,eax
c001ed19:	74 17                	je     c001ed32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed1b:	83 ec 0c             	sub    esp,0xc
c001ed1e:	68 f8 c6 02 c0       	push   0xc002c6f8
c001ed23:	e8 73 b9 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001ed28:	e8 4b f1 ff ff       	call   c001de78 <unlockScheduler()>
c001ed2d:	83 c4 10             	add    esp,0x10
c001ed30:	eb 4d                	jmp    c001ed7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed32:	0f b7 f6             	movzx  esi,si
c001ed35:	50                   	push   eax
c001ed36:	0f b7 db             	movzx  ebx,bx
c001ed39:	50                   	push   eax
c001ed3a:	56                   	push   esi
c001ed3b:	53                   	push   ebx
c001ed3c:	e8 b7 fd ff ff       	call   c001eaf8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed41:	5a                   	pop    edx
c001ed42:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed44:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed48:	51                   	push   ecx
c001ed49:	50                   	push   eax
c001ed4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed52:	57                   	push   edi
c001ed53:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed56:	83 c4 14             	add    esp,0x14
c001ed59:	57                   	push   edi
c001ed5a:	e8 a5 48 ff ff       	call   c0013604 <File::close()>
c001ed5f:	c6 05 c5 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031ac5,0x0
c001ed66:	e8 0d f1 ff ff       	call   c001de78 <unlockScheduler()>
c001ed6b:	59                   	pop    ecx
c001ed6c:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001ed72:	e8 17 f7 ff ff       	call   c001e48e <unblockTask(ThreadControlBlock*)>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed7f:	83 c4 2c             	add    esp,0x2c
c001ed82:	89 e8                	mov    eax,ebp
c001ed84:	5b                   	pop    ebx
c001ed85:	5e                   	pop    esi
c001ed86:	5f                   	pop    edi
c001ed87:	5d                   	pop    ebp
c001ed88:	c3                   	ret    

c001ed89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed89:	57                   	push   edi
c001ed8a:	56                   	push   esi
c001ed8b:	53                   	push   ebx
c001ed8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed98:	83 e8 06             	sub    eax,0x6
c001ed9b:	0f b7 c0             	movzx  eax,ax
c001ed9e:	50                   	push   eax
c001ed9f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eda4:	50                   	push   eax
c001eda5:	e8 4e fd ff ff       	call   c001eaf8 <Vm::realToLinear(unsigned short, unsigned short)>
c001edaa:	5a                   	pop    edx
c001edab:	5e                   	pop    esi
c001edac:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edaf:	8d 56 fa             	lea    edx,[esi-0x6]
c001edb2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edb8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001edbb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001edbe:	83 c2 02             	add    edx,0x2
c001edc1:	66 89 10             	mov    WORD PTR [eax],dx
c001edc4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001edc7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001edcb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edd2:	89 d6                	mov    esi,edx
c001edd4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edda:	66 81 e6 ff fd       	and    si,0xfdff
c001eddf:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ede3:	74 07                	je     c001edec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ede5:	89 d6                	mov    esi,edx
c001ede7:	66 81 ce 00 02       	or     si,0x200
c001edec:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edf5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001edf9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee01:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee04:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee0c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee0f:	5b                   	pop    ebx
c001ee10:	5e                   	pop    esi
c001ee11:	5f                   	pop    edi
c001ee12:	c3                   	ret    

c001ee13 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee18:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee1d:	c1 e0 04             	shl    eax,0x4
c001ee20:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee23:	c3                   	ret    

c001ee24 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee2e:	c1 e0 04             	shl    eax,0x4
c001ee31:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee35:	c3                   	ret    

c001ee36 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee36:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee3b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee40:	c1 e0 04             	shl    eax,0x4
c001ee43:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee46:	c3                   	ret    

c001ee47 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee51:	c1 e0 04             	shl    eax,0x4
c001ee54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee58:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee5b:	c3                   	ret    

c001ee5c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee5c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee61:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee66:	c1 e0 04             	shl    eax,0x4
c001ee69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee6d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee71:	c3                   	ret    

c001ee72 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee72:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee7c:	c1 e0 04             	shl    eax,0x4
c001ee7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee83:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee86:	c3                   	ret    

c001ee87 <Vm::faultHandler(regs*)>:
c001ee87:	55                   	push   ebp
c001ee88:	57                   	push   edi
c001ee89:	56                   	push   esi
c001ee8a:	53                   	push   ebx
c001ee8b:	83 ec 1c             	sub    esp,0x1c
c001ee8e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee92:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee95:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee98:	0f b7 c1             	movzx  eax,cx
c001ee9b:	50                   	push   eax
c001ee9c:	0f b7 c3             	movzx  eax,bx
c001ee9f:	c1 e3 04             	shl    ebx,0x4
c001eea2:	50                   	push   eax
c001eea3:	e8 50 fc ff ff       	call   c001eaf8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eea8:	5a                   	pop    edx
c001eea9:	89 c5                	mov    ebp,eax
c001eeab:	5e                   	pop    esi
c001eeac:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eeb0:	50                   	push   eax
c001eeb1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eeb5:	50                   	push   eax
c001eeb6:	e8 3d fc ff ff       	call   c001eaf8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eebb:	01 cb                	add    ebx,ecx
c001eebd:	89 c6                	mov    esi,eax
c001eebf:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eec3:	50                   	push   eax
c001eec4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eec8:	50                   	push   eax
c001eec9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eecd:	50                   	push   eax
c001eece:	55                   	push   ebp
c001eecf:	53                   	push   ebx
c001eed0:	b3 06                	mov    bl,0x6
c001eed2:	68 11 c7 02 c0       	push   0xc002c711
c001eed7:	e8 0e 41 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001eedc:	83 c4 20             	add    esp,0x20
c001eedf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eee4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eee9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeed:	3c 9d                	cmp    al,0x9d
c001eeef:	0f 84 d7 02 00 00    	je     c001f1cc <Vm::faultHandler(regs*)+0x345>
c001eef5:	0f 87 a3 00 00 00    	ja     c001ef9e <Vm::faultHandler(regs*)+0x117>
c001eefb:	3c 66                	cmp    al,0x66
c001eefd:	0f 84 15 02 00 00    	je     c001f118 <Vm::faultHandler(regs*)+0x291>
c001ef03:	77 5f                	ja     c001ef64 <Vm::faultHandler(regs*)+0xdd>
c001ef05:	3c 36                	cmp    al,0x36
c001ef07:	0f 84 f1 01 00 00    	je     c001f0fe <Vm::faultHandler(regs*)+0x277>
c001ef0d:	77 28                	ja     c001ef37 <Vm::faultHandler(regs*)+0xb0>
c001ef0f:	3c 26                	cmp    al,0x26
c001ef11:	0f 84 99 01 00 00    	je     c001f0b0 <Vm::faultHandler(regs*)+0x229>
c001ef17:	3c 2e                	cmp    al,0x2e
c001ef19:	0f 85 3b 07 00 00    	jne    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001ef1f:	83 ec 0c             	sub    esp,0xc
c001ef22:	31 db                	xor    ebx,ebx
c001ef24:	68 26 c7 02 c0       	push   0xc002c726
c001ef29:	e8 bc 40 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ef2e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef31:	83 c4 10             	add    esp,0x10
c001ef34:	45                   	inc    ebp
c001ef35:	eb b2                	jmp    c001eee9 <Vm::faultHandler(regs*)+0x62>
c001ef37:	3c 64                	cmp    al,0x64
c001ef39:	0f 84 8b 01 00 00    	je     c001f0ca <Vm::faultHandler(regs*)+0x243>
c001ef3f:	0f 87 9f 01 00 00    	ja     c001f0e4 <Vm::faultHandler(regs*)+0x25d>
c001ef45:	3c 3e                	cmp    al,0x3e
c001ef47:	0f 85 0d 07 00 00    	jne    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001ef4d:	83 ec 0c             	sub    esp,0xc
c001ef50:	b3 01                	mov    bl,0x1
c001ef52:	68 2a c7 02 c0       	push   0xc002c72a
c001ef57:	e8 8e 40 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ef5c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef5f:	83 c4 10             	add    esp,0x10
c001ef62:	eb d0                	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001ef64:	3c 6d                	cmp    al,0x6d
c001ef66:	0f 84 af 03 00 00    	je     c001f31b <Vm::faultHandler(regs*)+0x494>
c001ef6c:	77 15                	ja     c001ef83 <Vm::faultHandler(regs*)+0xfc>
c001ef6e:	3c 67                	cmp    al,0x67
c001ef70:	0f 84 bf 01 00 00    	je     c001f135 <Vm::faultHandler(regs*)+0x2ae>
c001ef76:	3c 6c                	cmp    al,0x6c
c001ef78:	0f 84 3f 03 00 00    	je     c001f2bd <Vm::faultHandler(regs*)+0x436>
c001ef7e:	e9 d7 06 00 00       	jmp    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001ef83:	3c 6f                	cmp    al,0x6f
c001ef85:	0f 84 a4 04 00 00    	je     c001f42f <Vm::faultHandler(regs*)+0x5a8>
c001ef8b:	0f 82 11 04 00 00    	jb     c001f3a2 <Vm::faultHandler(regs*)+0x51b>
c001ef91:	3c 9c                	cmp    al,0x9c
c001ef93:	0f 84 ba 01 00 00    	je     c001f153 <Vm::faultHandler(regs*)+0x2cc>
c001ef99:	e9 bc 06 00 00       	jmp    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001ef9e:	3c ec                	cmp    al,0xec
c001efa0:	0f 84 24 06 00 00    	je     c001f5ca <Vm::faultHandler(regs*)+0x743>
c001efa6:	0f 87 93 00 00 00    	ja     c001f03f <Vm::faultHandler(regs*)+0x1b8>
c001efac:	3c e4                	cmp    al,0xe4
c001efae:	0f 84 5c 05 00 00    	je     c001f510 <Vm::faultHandler(regs*)+0x689>
c001efb4:	77 6a                	ja     c001f020 <Vm::faultHandler(regs*)+0x199>
c001efb6:	3c cd                	cmp    al,0xcd
c001efb8:	0f 84 7e 02 00 00    	je     c001f23c <Vm::faultHandler(regs*)+0x3b5>
c001efbe:	3c cf                	cmp    al,0xcf
c001efc0:	0f 85 94 06 00 00    	jne    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	68 6e c7 02 c0       	push   0xc002c76e
c001efce:	e8 17 40 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001efd3:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efd6:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efd9:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efdd:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efe0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efe4:	0d 00 02 02 00       	or     eax,0x20200
c001efe9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efec:	56                   	push   esi
c001efed:	53                   	push   ebx
c001efee:	52                   	push   edx
c001efef:	68 74 c7 02 c0       	push   0xc002c774
c001eff4:	e8 f1 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001eff9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001effd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f003:	66 c1 e8 09          	shr    ax,0x9
c001f007:	83 e0 01             	and    eax,0x1
c001f00a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f00d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f010:	83 c0 06             	add    eax,0x6
c001f013:	25 ff ff 00 00       	and    eax,0xffff
c001f018:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f01b:	e9 95 02 00 00       	jmp    c001f2b5 <Vm::faultHandler(regs*)+0x42e>
c001f020:	3c e6                	cmp    al,0xe6
c001f022:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f026:	0f 84 4e 05 00 00    	je     c001f57a <Vm::faultHandler(regs*)+0x6f3>
c001f02c:	0f 82 0a 05 00 00    	jb     c001f53c <Vm::faultHandler(regs*)+0x6b5>
c001f032:	3c e7                	cmp    al,0xe7
c001f034:	0f 84 69 05 00 00    	je     c001f5a3 <Vm::faultHandler(regs*)+0x71c>
c001f03a:	e9 1b 06 00 00       	jmp    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001f03f:	3c ef                	cmp    al,0xef
c001f041:	0f 84 e6 05 00 00    	je     c001f62d <Vm::faultHandler(regs*)+0x7a6>
c001f047:	77 37                	ja     c001f080 <Vm::faultHandler(regs*)+0x1f9>
c001f049:	3c ed                	cmp    al,0xed
c001f04b:	0f 84 a3 05 00 00    	je     c001f5f4 <Vm::faultHandler(regs*)+0x76d>
c001f051:	3c ee                	cmp    al,0xee
c001f053:	0f 85 01 06 00 00    	jne    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001f059:	52                   	push   edx
c001f05a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f05d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f060:	68 0f c8 02 c0       	push   0xc002c80f
c001f065:	e8 80 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f06a:	59                   	pop    ecx
c001f06b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f06f:	5b                   	pop    ebx
c001f070:	50                   	push   eax
c001f071:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f075:	50                   	push   eax
c001f076:	e8 2a fa ff ff       	call   c001eaa5 <Vm::outbv(unsigned short, unsigned char)>
c001f07b:	e9 a5 05 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x79e>
c001f080:	3c fa                	cmp    al,0xfa
c001f082:	0f 84 f7 01 00 00    	je     c001f27f <Vm::faultHandler(regs*)+0x3f8>
c001f088:	3c fb                	cmp    al,0xfb
c001f08a:	0f 84 0a 02 00 00    	je     c001f29a <Vm::faultHandler(regs*)+0x413>
c001f090:	3c f3                	cmp    al,0xf3
c001f092:	0f 85 c2 05 00 00    	jne    c001f65a <Vm::faultHandler(regs*)+0x7d3>
c001f098:	83 ec 0c             	sub    esp,0xc
c001f09b:	68 47 c7 02 c0       	push   0xc002c747
c001f0a0:	e8 45 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0a5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a8:	83 c4 10             	add    esp,0x10
c001f0ab:	e9 84 fe ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f0b0:	83 ec 0c             	sub    esp,0xc
c001f0b3:	b3 02                	mov    bl,0x2
c001f0b5:	68 22 c7 02 c0       	push   0xc002c722
c001f0ba:	e8 2b 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0bf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c2:	83 c4 10             	add    esp,0x10
c001f0c5:	e9 6a fe ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f0ca:	83 ec 0c             	sub    esp,0xc
c001f0cd:	b3 03                	mov    bl,0x3
c001f0cf:	68 2e c7 02 c0       	push   0xc002c72e
c001f0d4:	e8 11 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0d9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	e9 50 fe ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	b3 04                	mov    bl,0x4
c001f0e9:	68 32 c7 02 c0       	push   0xc002c732
c001f0ee:	e8 f7 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0f3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f6:	83 c4 10             	add    esp,0x10
c001f0f9:	e9 36 fe ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f0fe:	83 ec 0c             	sub    esp,0xc
c001f101:	b3 05                	mov    bl,0x5
c001f103:	68 36 c7 02 c0       	push   0xc002c736
c001f108:	e8 dd 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f10d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f110:	83 c4 10             	add    esp,0x10
c001f113:	e9 1c fe ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f118:	83 ec 0c             	sub    esp,0xc
c001f11b:	68 3a c7 02 c0       	push   0xc002c73a
c001f120:	e8 c5 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f130:	e9 ff fd ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f135:	50                   	push   eax
c001f136:	50                   	push   eax
c001f137:	6a 01                	push   0x1
c001f139:	68 3f c7 02 c0       	push   0xc002c73f
c001f13e:	e8 a7 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f149:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f14e:	e9 e1 fd ff ff       	jmp    c001ef34 <Vm::faultHandler(regs*)+0xad>
c001f153:	83 ec 0c             	sub    esp,0xc
c001f156:	68 4d c7 02 c0       	push   0xc002c74d
c001f15b:	e8 8a 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f160:	83 c4 10             	add    esp,0x10
c001f163:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f166:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f16b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f16e:	74 2f                	je     c001f19f <Vm::faultHandler(regs*)+0x318>
c001f170:	83 ea 04             	sub    edx,0x4
c001f173:	25 ff 0d 00 00       	and    eax,0xdff
c001f178:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f17e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f181:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f184:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f18a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f18e:	0f 84 bf 04 00 00    	je     c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f194:	80 cc 02             	or     ah,0x2
c001f197:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f19a:	e9 b4 04 00 00       	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f19f:	83 ea 02             	sub    edx,0x2
c001f1a2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1a8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1ab:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1b5:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1b9:	74 05                	je     c001f1c0 <Vm::faultHandler(regs*)+0x339>
c001f1bb:	80 cc 02             	or     ah,0x2
c001f1be:	eb 03                	jmp    c001f1c3 <Vm::faultHandler(regs*)+0x33c>
c001f1c0:	80 e4 fd             	and    ah,0xfd
c001f1c3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1c7:	e9 87 04 00 00       	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	68 54 c7 02 c0       	push   0xc002c754
c001f1d4:	e8 11 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f1d9:	83 c4 10             	add    esp,0x10
c001f1dc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1e1:	74 28                	je     c001f20b <Vm::faultHandler(regs*)+0x384>
c001f1e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1e5:	25 ff 0d 00 00       	and    eax,0xdff
c001f1ea:	0d 00 02 02 00       	or     eax,0x20200
c001f1ef:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1f2:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1fa:	c1 e8 09             	shr    eax,0x9
c001f1fd:	83 e0 01             	and    eax,0x1
c001f200:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f203:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f206:	83 c0 04             	add    eax,0x4
c001f209:	eb 24                	jmp    c001f22f <Vm::faultHandler(regs*)+0x3a8>
c001f20b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f20e:	0d 00 02 02 00       	or     eax,0x20200
c001f213:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f216:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f219:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f21f:	66 c1 e8 09          	shr    ax,0x9
c001f223:	83 e0 01             	and    eax,0x1
c001f226:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f229:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f22c:	83 c0 02             	add    eax,0x2
c001f22f:	25 ff ff 00 00       	and    eax,0xffff
c001f234:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f237:	e9 17 04 00 00       	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f23c:	53                   	push   ebx
c001f23d:	53                   	push   ebx
c001f23e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f242:	50                   	push   eax
c001f243:	68 5a c7 02 c0       	push   0xc002c75a
c001f248:	e8 9d 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f24d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f251:	83 c4 10             	add    esp,0x10
c001f254:	3c ee                	cmp    al,0xee
c001f256:	75 10                	jne    c001f268 <Vm::faultHandler(regs*)+0x3e1>
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f25e:	e8 fa f8 ff ff       	call   c001eb5d <Vm::mainloop3(unsigned long)>
c001f263:	e9 c0 03 00 00       	jmp    c001f628 <Vm::faultHandler(regs*)+0x7a1>
c001f268:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	53                   	push   ebx
c001f270:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f274:	53                   	push   ebx
c001f275:	55                   	push   ebp
c001f276:	50                   	push   eax
c001f277:	57                   	push   edi
c001f278:	e8 0c fb ff ff       	call   c001ed89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f27d:	eb 36                	jmp    c001f2b5 <Vm::faultHandler(regs*)+0x42e>
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	68 64 c7 02 c0       	push   0xc002c764
c001f287:	e8 5e 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f28c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f291:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f295:	e9 8b 03 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x79e>
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	68 69 c7 02 c0       	push   0xc002c769
c001f2a2:	e8 43 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f2a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2ac:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2b0:	e9 70 03 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x79e>
c001f2b5:	83 c4 20             	add    esp,0x20
c001f2b8:	e9 99 03 00 00       	jmp    c001f656 <Vm::faultHandler(regs*)+0x7cf>
c001f2bd:	83 ec 0c             	sub    esp,0xc
c001f2c0:	68 a7 c7 02 c0       	push   0xc002c7a7
c001f2c5:	e8 20 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f2ca:	83 c4 10             	add    esp,0x10
c001f2cd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2d5:	74 0d                	je     c001f2e4 <Vm::faultHandler(regs*)+0x45d>
c001f2d7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2de:	0f 87 9e 01 00 00    	ja     c001f482 <Vm::faultHandler(regs*)+0x5fb>
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2eb:	0f b7 db             	movzx  ebx,bx
c001f2ee:	50                   	push   eax
c001f2ef:	e8 9e f7 ff ff       	call   c001ea92 <Vm::inbv(unsigned short)>
c001f2f4:	83 c4 0c             	add    esp,0xc
c001f2f7:	0f b6 c0             	movzx  eax,al
c001f2fa:	50                   	push   eax
c001f2fb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2ff:	50                   	push   eax
c001f300:	53                   	push   ebx
c001f301:	e8 41 fb ff ff       	call   c001ee47 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f306:	83 c4 10             	add    esp,0x10
c001f309:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f30c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f310:	74 03                	je     c001f315 <Vm::faultHandler(regs*)+0x48e>
c001f312:	48                   	dec    eax
c001f313:	eb 01                	jmp    c001f316 <Vm::faultHandler(regs*)+0x48f>
c001f315:	40                   	inc    eax
c001f316:	0f b7 c0             	movzx  eax,ax
c001f319:	eb 7f                	jmp    c001f39a <Vm::faultHandler(regs*)+0x513>
c001f31b:	83 ec 0c             	sub    esp,0xc
c001f31e:	68 d9 c7 02 c0       	push   0xc002c7d9
c001f323:	e8 c2 3c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f328:	83 c4 10             	add    esp,0x10
c001f32b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f32e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f333:	74 0d                	je     c001f342 <Vm::faultHandler(regs*)+0x4bb>
c001f335:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f33c:	0f 87 40 01 00 00    	ja     c001f482 <Vm::faultHandler(regs*)+0x5fb>
c001f342:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f345:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f349:	0f b7 db             	movzx  ebx,bx
c001f34c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f351:	74 20                	je     c001f373 <Vm::faultHandler(regs*)+0x4ec>
c001f353:	ed                   	in     eax,dx
c001f354:	51                   	push   ecx
c001f355:	50                   	push   eax
c001f356:	56                   	push   esi
c001f357:	53                   	push   ebx
c001f358:	e8 15 fb ff ff       	call   c001ee72 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f35d:	83 c4 10             	add    esp,0x10
c001f360:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f363:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f367:	74 05                	je     c001f36e <Vm::faultHandler(regs*)+0x4e7>
c001f369:	83 e8 04             	sub    eax,0x4
c001f36c:	eb 27                	jmp    c001f395 <Vm::faultHandler(regs*)+0x50e>
c001f36e:	83 c0 04             	add    eax,0x4
c001f371:	eb 22                	jmp    c001f395 <Vm::faultHandler(regs*)+0x50e>
c001f373:	66 ed                	in     ax,dx
c001f375:	0f b7 c0             	movzx  eax,ax
c001f378:	52                   	push   edx
c001f379:	50                   	push   eax
c001f37a:	56                   	push   esi
c001f37b:	53                   	push   ebx
c001f37c:	e8 db fa ff ff       	call   c001ee5c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f381:	83 c4 10             	add    esp,0x10
c001f384:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f387:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f38b:	74 05                	je     c001f392 <Vm::faultHandler(regs*)+0x50b>
c001f38d:	83 e8 02             	sub    eax,0x2
c001f390:	eb 03                	jmp    c001f395 <Vm::faultHandler(regs*)+0x50e>
c001f392:	83 c0 02             	add    eax,0x2
c001f395:	25 ff ff 00 00       	and    eax,0xffff
c001f39a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f39d:	e9 b1 02 00 00       	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f3a2:	83 ec 0c             	sub    esp,0xc
c001f3a5:	4b                   	dec    ebx
c001f3a6:	68 df c7 02 c0       	push   0xc002c7df
c001f3ab:	e8 3a 3c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f3b0:	83 c4 10             	add    esp,0x10
c001f3b3:	80 fb 05             	cmp    bl,0x5
c001f3b6:	77 0a                	ja     c001f3c2 <Vm::faultHandler(regs*)+0x53b>
c001f3b8:	0f b6 db             	movzx  ebx,bl
c001f3bb:	ff 24 9d 50 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd37b0]
c001f3c2:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3c6:	eb 1b                	jmp    c001f3e3 <Vm::faultHandler(regs*)+0x55c>
c001f3c8:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3cc:	eb 15                	jmp    c001f3e3 <Vm::faultHandler(regs*)+0x55c>
c001f3ce:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3d2:	eb 0f                	jmp    c001f3e3 <Vm::faultHandler(regs*)+0x55c>
c001f3d4:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3d8:	eb 09                	jmp    c001f3e3 <Vm::faultHandler(regs*)+0x55c>
c001f3da:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3dd:	eb 04                	jmp    c001f3e3 <Vm::faultHandler(regs*)+0x55c>
c001f3df:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3e8:	74 0d                	je     c001f3f7 <Vm::faultHandler(regs*)+0x570>
c001f3ea:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3f1:	0f 87 8b 00 00 00    	ja     c001f482 <Vm::faultHandler(regs*)+0x5fb>
c001f3f7:	53                   	push   ebx
c001f3f8:	53                   	push   ebx
c001f3f9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3fd:	52                   	push   edx
c001f3fe:	50                   	push   eax
c001f3ff:	e8 0f fa ff ff       	call   c001ee13 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f404:	5e                   	pop    esi
c001f405:	0f b6 c0             	movzx  eax,al
c001f408:	5d                   	pop    ebp
c001f409:	50                   	push   eax
c001f40a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f40e:	50                   	push   eax
c001f40f:	e8 91 f6 ff ff       	call   c001eaa5 <Vm::outbv(unsigned short, unsigned char)>
c001f414:	83 c4 10             	add    esp,0x10
c001f417:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f41a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f41e:	74 03                	je     c001f423 <Vm::faultHandler(regs*)+0x59c>
c001f420:	48                   	dec    eax
c001f421:	eb 01                	jmp    c001f424 <Vm::faultHandler(regs*)+0x59d>
c001f423:	40                   	inc    eax
c001f424:	0f b7 c0             	movzx  eax,ax
c001f427:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f42a:	e9 24 02 00 00       	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f42f:	83 ec 0c             	sub    esp,0xc
c001f432:	4b                   	dec    ebx
c001f433:	68 df c7 02 c0       	push   0xc002c7df
c001f438:	e8 ad 3b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f43d:	83 c4 10             	add    esp,0x10
c001f440:	80 fb 05             	cmp    bl,0x5
c001f443:	77 0a                	ja     c001f44f <Vm::faultHandler(regs*)+0x5c8>
c001f445:	0f b6 db             	movzx  ebx,bl
c001f448:	ff 24 9d 68 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3798]
c001f44f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f453:	eb 1b                	jmp    c001f470 <Vm::faultHandler(regs*)+0x5e9>
c001f455:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f459:	eb 15                	jmp    c001f470 <Vm::faultHandler(regs*)+0x5e9>
c001f45b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f45f:	eb 0f                	jmp    c001f470 <Vm::faultHandler(regs*)+0x5e9>
c001f461:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f465:	eb 09                	jmp    c001f470 <Vm::faultHandler(regs*)+0x5e9>
c001f467:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f46a:	eb 04                	jmp    c001f470 <Vm::faultHandler(regs*)+0x5e9>
c001f46c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f470:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f473:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f478:	74 39                	je     c001f4b3 <Vm::faultHandler(regs*)+0x62c>
c001f47a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f480:	76 31                	jbe    c001f4b3 <Vm::faultHandler(regs*)+0x62c>
c001f482:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f486:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f48a:	51                   	push   ecx
c001f48b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f48f:	51                   	push   ecx
c001f490:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f494:	51                   	push   ecx
c001f495:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f499:	51                   	push   ecx
c001f49a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f49e:	52                   	push   edx
c001f49f:	50                   	push   eax
c001f4a0:	50                   	push   eax
c001f4a1:	68 ac c7 02 c0       	push   0xc002c7ac
c001f4a6:	e8 3f 3b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f4ab:	83 c4 20             	add    esp,0x20
c001f4ae:	e9 fb 01 00 00       	jmp    c001f6ae <Vm::faultHandler(regs*)+0x827>
c001f4b3:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4b6:	0f b7 d3             	movzx  edx,bx
c001f4b9:	81 e6 00 04 00 00    	and    esi,0x400
c001f4bf:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4c2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4c7:	74 1d                	je     c001f4e6 <Vm::faultHandler(regs*)+0x65f>
c001f4c9:	51                   	push   ecx
c001f4ca:	51                   	push   ecx
c001f4cb:	52                   	push   edx
c001f4cc:	50                   	push   eax
c001f4cd:	e8 64 f9 ff ff       	call   c001ee36 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	89 ea                	mov    edx,ebp
c001f4d7:	ef                   	out    dx,eax
c001f4d8:	85 f6                	test   esi,esi
c001f4da:	74 05                	je     c001f4e1 <Vm::faultHandler(regs*)+0x65a>
c001f4dc:	83 eb 04             	sub    ebx,0x4
c001f4df:	eb 21                	jmp    c001f502 <Vm::faultHandler(regs*)+0x67b>
c001f4e1:	83 c3 04             	add    ebx,0x4
c001f4e4:	eb 1c                	jmp    c001f502 <Vm::faultHandler(regs*)+0x67b>
c001f4e6:	51                   	push   ecx
c001f4e7:	51                   	push   ecx
c001f4e8:	52                   	push   edx
c001f4e9:	50                   	push   eax
c001f4ea:	e8 35 f9 ff ff       	call   c001ee24 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	89 ea                	mov    edx,ebp
c001f4f4:	66 ef                	out    dx,ax
c001f4f6:	85 f6                	test   esi,esi
c001f4f8:	74 05                	je     c001f4ff <Vm::faultHandler(regs*)+0x678>
c001f4fa:	83 eb 02             	sub    ebx,0x2
c001f4fd:	eb 03                	jmp    c001f502 <Vm::faultHandler(regs*)+0x67b>
c001f4ff:	83 c3 02             	add    ebx,0x2
c001f502:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f508:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f50b:	e9 43 01 00 00       	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f510:	53                   	push   ebx
c001f511:	53                   	push   ebx
c001f512:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f516:	50                   	push   eax
c001f517:	68 e5 c7 02 c0       	push   0xc002c7e5
c001f51c:	e8 c9 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f521:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f528:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f52c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f52f:	e8 5e f5 ff ff       	call   c001ea92 <Vm::inbv(unsigned short)>
c001f534:	0f b6 c0             	movzx  eax,al
c001f537:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f53a:	eb 5e                	jmp    c001f59a <Vm::faultHandler(regs*)+0x713>
c001f53c:	51                   	push   ecx
c001f53d:	51                   	push   ecx
c001f53e:	53                   	push   ebx
c001f53f:	68 eb c7 02 c0       	push   0xc002c7eb
c001f544:	e8 a1 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f549:	83 c4 10             	add    esp,0x10
c001f54c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f551:	74 07                	je     c001f55a <Vm::faultHandler(regs*)+0x6d3>
c001f553:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f557:	ed                   	in     eax,dx
c001f558:	eb 14                	jmp    c001f56e <Vm::faultHandler(regs*)+0x6e7>
c001f55a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f55d:	66 31 db             	xor    bx,bx
c001f560:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f563:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f567:	66 ed                	in     ax,dx
c001f569:	0f b7 c0             	movzx  eax,ax
c001f56c:	09 d8                	or     eax,ebx
c001f56e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f571:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f575:	e9 dc 00 00 00       	jmp    c001f656 <Vm::faultHandler(regs*)+0x7cf>
c001f57a:	50                   	push   eax
c001f57b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f57e:	53                   	push   ebx
c001f57f:	68 f1 c7 02 c0       	push   0xc002c7f1
c001f584:	e8 61 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f589:	58                   	pop    eax
c001f58a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f58e:	5a                   	pop    edx
c001f58f:	50                   	push   eax
c001f590:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f594:	50                   	push   eax
c001f595:	e8 0b f5 ff ff       	call   c001eaa5 <Vm::outbv(unsigned short, unsigned char)>
c001f59a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f59e:	e9 85 00 00 00       	jmp    c001f628 <Vm::faultHandler(regs*)+0x7a1>
c001f5a3:	50                   	push   eax
c001f5a4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5a7:	53                   	push   ebx
c001f5a8:	68 fa c7 02 c0       	push   0xc002c7fa
c001f5ad:	e8 38 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f5b2:	83 c4 10             	add    esp,0x10
c001f5b5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5b9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5be:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5c1:	74 03                	je     c001f5c6 <Vm::faultHandler(regs*)+0x73f>
c001f5c3:	ef                   	out    dx,eax
c001f5c4:	eb ab                	jmp    c001f571 <Vm::faultHandler(regs*)+0x6ea>
c001f5c6:	66 ef                	out    dx,ax
c001f5c8:	eb a7                	jmp    c001f571 <Vm::faultHandler(regs*)+0x6ea>
c001f5ca:	55                   	push   ebp
c001f5cb:	55                   	push   ebp
c001f5cc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5cf:	68 03 c8 02 c0       	push   0xc002c803
c001f5d4:	e8 11 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f5d9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5e0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5e7:	e8 a6 f4 ff ff       	call   c001ea92 <Vm::inbv(unsigned short)>
c001f5ec:	0f b6 c0             	movzx  eax,al
c001f5ef:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5f2:	eb 31                	jmp    c001f625 <Vm::faultHandler(regs*)+0x79e>
c001f5f4:	56                   	push   esi
c001f5f5:	56                   	push   esi
c001f5f6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5f9:	68 09 c8 02 c0       	push   0xc002c809
c001f5fe:	e8 e7 39 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f609:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f60e:	74 03                	je     c001f613 <Vm::faultHandler(regs*)+0x78c>
c001f610:	ed                   	in     eax,dx
c001f611:	eb 0d                	jmp    c001f620 <Vm::faultHandler(regs*)+0x799>
c001f613:	66 ed                	in     ax,dx
c001f615:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f618:	0f b7 c0             	movzx  eax,ax
c001f61b:	66 31 d2             	xor    dx,dx
c001f61e:	09 d0                	or     eax,edx
c001f620:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f623:	eb 2e                	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f625:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f628:	83 c4 10             	add    esp,0x10
c001f62b:	eb 29                	jmp    c001f656 <Vm::faultHandler(regs*)+0x7cf>
c001f62d:	50                   	push   eax
c001f62e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f631:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f634:	68 18 c8 02 c0       	push   0xc002c818
c001f639:	e8 ac 39 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f63e:	83 c4 10             	add    esp,0x10
c001f641:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f644:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f649:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f64c:	74 03                	je     c001f651 <Vm::faultHandler(regs*)+0x7ca>
c001f64e:	ef                   	out    dx,eax
c001f64f:	eb 02                	jmp    c001f653 <Vm::faultHandler(regs*)+0x7cc>
c001f651:	66 ef                	out    dx,ax
c001f653:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f656:	b0 01                	mov    al,0x1
c001f658:	eb 56                	jmp    c001f6b0 <Vm::faultHandler(regs*)+0x829>
c001f65a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f65e:	51                   	push   ecx
c001f65f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f663:	51                   	push   ecx
c001f664:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f668:	51                   	push   ecx
c001f669:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f66d:	51                   	push   ecx
c001f66e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f672:	52                   	push   edx
c001f673:	50                   	push   eax
c001f674:	50                   	push   eax
c001f675:	68 21 c8 02 c0       	push   0xc002c821
c001f67a:	e8 6b 39 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f67f:	83 c4 20             	add    esp,0x20
c001f682:	83 ec 0c             	sub    esp,0xc
c001f685:	6a 60                	push   0x60
c001f687:	e8 06 f4 ff ff       	call   c001ea92 <Vm::inbv(unsigned short)>
c001f68c:	83 c4 10             	add    esp,0x10
c001f68f:	3c 1c                	cmp    al,0x1c
c001f691:	74 04                	je     c001f697 <Vm::faultHandler(regs*)+0x810>
c001f693:	3c 5a                	cmp    al,0x5a
c001f695:	75 eb                	jne    c001f682 <Vm::faultHandler(regs*)+0x7fb>
c001f697:	3c 1c                	cmp    al,0x1c
c001f699:	74 04                	je     c001f69f <Vm::faultHandler(regs*)+0x818>
c001f69b:	3c 5a                	cmp    al,0x5a
c001f69d:	75 0f                	jne    c001f6ae <Vm::faultHandler(regs*)+0x827>
c001f69f:	83 ec 0c             	sub    esp,0xc
c001f6a2:	6a 60                	push   0x60
c001f6a4:	e8 e9 f3 ff ff       	call   c001ea92 <Vm::inbv(unsigned short)>
c001f6a9:	83 c4 10             	add    esp,0x10
c001f6ac:	eb e9                	jmp    c001f697 <Vm::faultHandler(regs*)+0x810>
c001f6ae:	31 c0                	xor    eax,eax
c001f6b0:	83 c4 1c             	add    esp,0x1c
c001f6b3:	5b                   	pop    ebx
c001f6b4:	5e                   	pop    esi
c001f6b5:	5f                   	pop    edi
c001f6b6:	5d                   	pop    ebp
c001f6b7:	c3                   	ret    

c001f6b8 <Vm::fpuInternalTo32(unsigned long long)>:
c001f6b8:	57                   	push   edi
c001f6b9:	56                   	push   esi
c001f6ba:	53                   	push   ebx
c001f6bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c3:	89 d6                	mov    esi,edx
c001f6c5:	89 d7                	mov    edi,edx
c001f6c7:	89 c1                	mov    ecx,eax
c001f6c9:	c1 ef 14             	shr    edi,0x14
c001f6cc:	89 d3                	mov    ebx,edx
c001f6ce:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6d4:	31 d2                	xor    edx,edx
c001f6d6:	89 f8                	mov    eax,edi
c001f6d8:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6de:	bf ff 00 00 00       	mov    edi,0xff
c001f6e3:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6e8:	83 d2 ff             	adc    edx,0xffffffff
c001f6eb:	39 c7                	cmp    edi,eax
c001f6ed:	bf 00 00 00 00       	mov    edi,0x0
c001f6f2:	19 d7                	sbb    edi,edx
c001f6f4:	72 15                	jb     c001f70b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6f6:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6fa:	c1 e0 17             	shl    eax,0x17
c001f6fd:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f703:	09 f1                	or     ecx,esi
c001f705:	09 c1                	or     ecx,eax
c001f707:	89 cf                	mov    edi,ecx
c001f709:	eb 02                	jmp    c001f70d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f70b:	31 ff                	xor    edi,edi
c001f70d:	89 f8                	mov    eax,edi
c001f70f:	5b                   	pop    ebx
c001f710:	5e                   	pop    esi
c001f711:	5f                   	pop    edi
c001f712:	c3                   	ret    

c001f713 <Vm::fpuInternalTo64(unsigned long long)>:
c001f713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f717:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f71b:	c3                   	ret    

c001f71c <Vm::fpu32ToInternal(unsigned int)>:
c001f71c:	57                   	push   edi
c001f71d:	31 ff                	xor    edi,edi
c001f71f:	56                   	push   esi
c001f720:	53                   	push   ebx
c001f721:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f725:	89 cb                	mov    ebx,ecx
c001f727:	89 ce                	mov    esi,ecx
c001f729:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f72f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f735:	c1 e9 17             	shr    ecx,0x17
c001f738:	89 f0                	mov    eax,esi
c001f73a:	0f b6 d1             	movzx  edx,cl
c001f73d:	81 c2 80 03 00 00    	add    edx,0x380
c001f743:	89 d1                	mov    ecx,edx
c001f745:	89 fa                	mov    edx,edi
c001f747:	c1 e1 14             	shl    ecx,0x14
c001f74a:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f74e:	c1 e0 1d             	shl    eax,0x1d
c001f751:	89 d7                	mov    edi,edx
c001f753:	89 c6                	mov    esi,eax
c001f755:	89 ca                	mov    edx,ecx
c001f757:	89 f0                	mov    eax,esi
c001f759:	09 fa                	or     edx,edi
c001f75b:	09 da                	or     edx,ebx
c001f75d:	5b                   	pop    ebx
c001f75e:	5e                   	pop    esi
c001f75f:	5f                   	pop    edi
c001f760:	c3                   	ret    

c001f761 <Vm::fpu64ToInternal(unsigned long long)>:
c001f761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f765:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f769:	c3                   	ret    

c001f76a <Vm::fpuFloatToLong(unsigned long long)>:
c001f76a:	57                   	push   edi
c001f76b:	31 c0                	xor    eax,eax
c001f76d:	56                   	push   esi
c001f76e:	31 d2                	xor    edx,edx
c001f770:	53                   	push   ebx
c001f771:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f779:	89 d9                	mov    ecx,ebx
c001f77b:	c1 e9 14             	shr    ecx,0x14
c001f77e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f784:	89 cf                	mov    edi,ecx
c001f786:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f78c:	78 33                	js     c001f7c1 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f78e:	89 d9                	mov    ecx,ebx
c001f790:	89 f0                	mov    eax,esi
c001f792:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f798:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f79e:	89 ca                	mov    edx,ecx
c001f7a0:	b9 34 00 00 00       	mov    ecx,0x34
c001f7a5:	29 f9                	sub    ecx,edi
c001f7a7:	0f ad d0             	shrd   eax,edx,cl
c001f7aa:	d3 fa                	sar    edx,cl
c001f7ac:	f6 c1 20             	test   cl,0x20
c001f7af:	74 05                	je     c001f7b6 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7b1:	89 d0                	mov    eax,edx
c001f7b3:	c1 fa 1f             	sar    edx,0x1f
c001f7b6:	85 db                	test   ebx,ebx
c001f7b8:	79 07                	jns    c001f7c1 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7ba:	f7 d8                	neg    eax
c001f7bc:	83 d2 00             	adc    edx,0x0
c001f7bf:	f7 da                	neg    edx
c001f7c1:	5b                   	pop    ebx
c001f7c2:	5e                   	pop    esi
c001f7c3:	5f                   	pop    edi
c001f7c4:	c3                   	ret    

c001f7c5 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7c5:	57                   	push   edi
c001f7c6:	31 c9                	xor    ecx,ecx
c001f7c8:	56                   	push   esi
c001f7c9:	53                   	push   ebx
c001f7ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7d2:	0f ba e7 14          	bt     edi,0x14
c001f7d6:	72 07                	jb     c001f7df <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7d8:	01 f6                	add    esi,esi
c001f7da:	11 ff                	adc    edi,edi
c001f7dc:	41                   	inc    ecx
c001f7dd:	eb f3                	jmp    c001f7d2 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7df:	89 fa                	mov    edx,edi
c001f7e1:	89 f0                	mov    eax,esi
c001f7e3:	bb 33 04 00 00       	mov    ebx,0x433
c001f7e8:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7ee:	29 cb                	sub    ebx,ecx
c001f7f0:	89 d9                	mov    ecx,ebx
c001f7f2:	5b                   	pop    ebx
c001f7f3:	c1 e1 14             	shl    ecx,0x14
c001f7f6:	5e                   	pop    esi
c001f7f7:	09 ca                	or     edx,ecx
c001f7f9:	5f                   	pop    edi
c001f7fa:	c3                   	ret    

c001f7fb <Vm::fpuLongToFloat(long long)>:
c001f7fb:	56                   	push   esi
c001f7fc:	31 c0                	xor    eax,eax
c001f7fe:	53                   	push   ebx
c001f7ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f807:	39 c8                	cmp    eax,ecx
c001f809:	19 d8                	sbb    eax,ebx
c001f80b:	7d 04                	jge    c001f811 <Vm::fpuLongToFloat(long long)+0x16>
c001f80d:	31 f6                	xor    esi,esi
c001f80f:	eb 0c                	jmp    c001f81d <Vm::fpuLongToFloat(long long)+0x22>
c001f811:	f7 d9                	neg    ecx
c001f813:	be 01 00 00 00       	mov    esi,0x1
c001f818:	83 d3 00             	adc    ebx,0x0
c001f81b:	f7 db                	neg    ebx
c001f81d:	31 c0                	xor    eax,eax
c001f81f:	0f ba e3 14          	bt     ebx,0x14
c001f823:	72 07                	jb     c001f82c <Vm::fpuLongToFloat(long long)+0x31>
c001f825:	01 c9                	add    ecx,ecx
c001f827:	11 db                	adc    ebx,ebx
c001f829:	40                   	inc    eax
c001f82a:	eb f3                	jmp    c001f81f <Vm::fpuLongToFloat(long long)+0x24>
c001f82c:	ba 33 04 00 00       	mov    edx,0x433
c001f831:	29 c2                	sub    edx,eax
c001f833:	89 c8                	mov    eax,ecx
c001f835:	c1 e2 14             	shl    edx,0x14
c001f838:	89 d9                	mov    ecx,ebx
c001f83a:	89 f3                	mov    ebx,esi
c001f83c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f842:	09 ca                	or     edx,ecx
c001f844:	84 db                	test   bl,bl
c001f846:	74 06                	je     c001f84e <Vm::fpuLongToFloat(long long)+0x53>
c001f848:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f84e:	5b                   	pop    ebx
c001f84f:	5e                   	pop    esi
c001f850:	c3                   	ret    

c001f851 <Vm::fpuGet0()>:
c001f851:	31 c0                	xor    eax,eax
c001f853:	31 d2                	xor    edx,edx
c001f855:	c3                   	ret    

c001f856 <Vm::fpuGet1()>:
c001f856:	b8 01 00 00 00       	mov    eax,0x1
c001f85b:	31 d2                	xor    edx,edx
c001f85d:	c3                   	ret    

c001f85e <Vm::fpuGetPi()>:
c001f85e:	b8 03 00 00 00       	mov    eax,0x3
c001f863:	31 d2                	xor    edx,edx
c001f865:	c3                   	ret    

c001f866 <Vm::fpuGetLog2E()>:
c001f866:	83 ec 18             	sub    esp,0x18
c001f869:	68 80 c8 02 c0       	push   0xc002c880
c001f86e:	e8 28 ae ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001f873:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f878:	31 d2                	xor    edx,edx
c001f87a:	83 c4 1c             	add    esp,0x1c
c001f87d:	c3                   	ret    

c001f87e <Vm::fpuGetLogE2()>:
c001f87e:	83 ec 18             	sub    esp,0x18
c001f881:	68 8c c8 02 c0       	push   0xc002c88c
c001f886:	e8 10 ae ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001f88b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f890:	31 d2                	xor    edx,edx
c001f892:	83 c4 1c             	add    esp,0x1c
c001f895:	c3                   	ret    

c001f896 <Vm::fpuGetLog210()>:
c001f896:	83 ec 18             	sub    esp,0x18
c001f899:	68 98 c8 02 c0       	push   0xc002c898
c001f89e:	e8 f8 ad ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001f8a3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8a8:	31 d2                	xor    edx,edx
c001f8aa:	83 c4 1c             	add    esp,0x1c
c001f8ad:	c3                   	ret    

c001f8ae <Vm::fpuGetLog102()>:
c001f8ae:	83 ec 18             	sub    esp,0x18
c001f8b1:	68 a5 c8 02 c0       	push   0xc002c8a5
c001f8b6:	e8 e0 ad ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001f8bb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c0:	31 d2                	xor    edx,edx
c001f8c2:	83 c4 1c             	add    esp,0x1c
c001f8c5:	c3                   	ret    

c001f8c6 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8ca:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8d2:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8d6:	0f 92 c0             	setb   al
c001f8d9:	c3                   	ret    

c001f8da <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e2:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8e6:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8ea:	09 c2                	or     edx,eax
c001f8ec:	0f 94 c0             	sete   al
c001f8ef:	c3                   	ret    

c001f8f0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8f0:	57                   	push   edi
c001f8f1:	56                   	push   esi
c001f8f2:	53                   	push   ebx
c001f8f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f903:	57                   	push   edi
c001f904:	56                   	push   esi
c001f905:	53                   	push   ebx
c001f906:	51                   	push   ecx
c001f907:	e8 ce ff ff ff       	call   c001f8da <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f90c:	83 c4 10             	add    esp,0x10
c001f90f:	88 c2                	mov    dl,al
c001f911:	31 c0                	xor    eax,eax
c001f913:	84 d2                	test   dl,dl
c001f915:	75 0c                	jne    c001f923 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f917:	57                   	push   edi
c001f918:	56                   	push   esi
c001f919:	53                   	push   ebx
c001f91a:	51                   	push   ecx
c001f91b:	e8 a6 ff ff ff       	call   c001f8c6 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f920:	83 c4 10             	add    esp,0x10
c001f923:	83 e0 01             	and    eax,0x1
c001f926:	5b                   	pop    ebx
c001f927:	88 c1                	mov    cl,al
c001f929:	83 e2 01             	and    edx,0x1
c001f92c:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001f931:	c1 e2 06             	shl    edx,0x6
c001f934:	83 e0 ba             	and    eax,0xffffffba
c001f937:	5e                   	pop    esi
c001f938:	09 c8                	or     eax,ecx
c001f93a:	5f                   	pop    edi
c001f93b:	09 d0                	or     eax,edx
c001f93d:	a2 01 1b 03 c0       	mov    ds:0xc0031b01,al
c001f942:	c3                   	ret    

c001f943 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f947:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f94b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f94f:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f953:	c3                   	ret    

c001f954 <Vm::fpuAbs(unsigned long long)>:
c001f954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f958:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f95c:	c3                   	ret    

c001f95d <Vm::fpuChs(unsigned long long)>:
c001f95d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f961:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f965:	f7 d8                	neg    eax
c001f967:	83 d2 00             	adc    edx,0x0
c001f96a:	f7 da                	neg    edx
c001f96c:	c3                   	ret    

c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f96d:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f971:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f976:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f97a:	eb c7                	jmp    c001f943 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f97c <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f97c:	53                   	push   ebx
c001f97d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f981:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f985:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f989:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f98d:	0f af ca             	imul   ecx,edx
c001f990:	0f af d8             	imul   ebx,eax
c001f993:	f7 e2                	mul    edx
c001f995:	01 d9                	add    ecx,ebx
c001f997:	5b                   	pop    ebx
c001f998:	01 ca                	add    edx,ecx
c001f99a:	c3                   	ret    

c001f99b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f99b:	83 ec 0c             	sub    esp,0xc
c001f99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ae:	e8 99 70 00 00       	call   c0026a4c <__udivdi3>
c001f9b3:	83 c4 1c             	add    esp,0x1c
c001f9b6:	c3                   	ret    

c001f9b7 <Vm::fpuSquare(unsigned long long)>:
c001f9b7:	50                   	push   eax
c001f9b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9c0:	52                   	push   edx
c001f9c1:	50                   	push   eax
c001f9c2:	52                   	push   edx
c001f9c3:	50                   	push   eax
c001f9c4:	e8 b3 ff ff ff       	call   c001f97c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9c9:	83 c4 14             	add    esp,0x14
c001f9cc:	c3                   	ret    

c001f9cd <Vm::fpuGetReg(int)>:
c001f9cd:	83 ec 0c             	sub    esp,0xc
c001f9d0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9d5:	76 10                	jbe    c001f9e7 <Vm::fpuGetReg(int)+0x1a>
c001f9d7:	83 ec 0c             	sub    esp,0xc
c001f9da:	68 b2 c8 02 c0       	push   0xc002c8b2
c001f9df:	e8 b7 ac ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001f9e4:	83 c4 10             	add    esp,0x10
c001f9e7:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001f9ec:	b9 08 00 00 00       	mov    ecx,0x8
c001f9f1:	c0 e8 03             	shr    al,0x3
c001f9f4:	83 e0 07             	and    eax,0x7
c001f9f7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9fb:	99                   	cdq    
c001f9fc:	f7 f9                	idiv   ecx
c001f9fe:	8b 04 d5 04 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce4fc]
c001fa05:	8b 14 d5 08 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce4f8]
c001fa0c:	83 c4 0c             	add    esp,0xc
c001fa0f:	c3                   	ret    

c001fa10 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa10:	57                   	push   edi
c001fa11:	56                   	push   esi
c001fa12:	52                   	push   edx
c001fa13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa1b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa20:	76 10                	jbe    c001fa32 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	68 c5 c8 02 c0       	push   0xc002c8c5
c001fa2a:	e8 6c ac ff ff       	call   c001a69b <Krnl::panic(char const*)>
c001fa2f:	83 c4 10             	add    esp,0x10
c001fa32:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa37:	b9 08 00 00 00       	mov    ecx,0x8
c001fa3c:	c0 e8 03             	shr    al,0x3
c001fa3f:	83 e0 07             	and    eax,0x7
c001fa42:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa46:	99                   	cdq    
c001fa47:	f7 f9                	idiv   ecx
c001fa49:	89 34 d5 04 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4fc],esi
c001fa50:	89 3c d5 08 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4f8],edi
c001fa57:	58                   	pop    eax
c001fa58:	5e                   	pop    esi
c001fa59:	5f                   	pop    edi
c001fa5a:	c3                   	ret    

c001fa5b <Vm::fpuPush(unsigned long long)>:
c001fa5b:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa60:	c0 e8 03             	shr    al,0x3
c001fa63:	83 e0 07             	and    eax,0x7
c001fa66:	83 c0 07             	add    eax,0x7
c001fa69:	88 c2                	mov    dl,al
c001fa6b:	83 e0 07             	and    eax,0x7
c001fa6e:	83 e2 07             	and    edx,0x7
c001fa71:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa78:	8a 15 01 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b01
c001fa7e:	83 e2 c7             	and    edx,0xffffffc7
c001fa81:	09 ca                	or     edx,ecx
c001fa83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa87:	88 15 01 1b 03 c0    	mov    BYTE PTR ds:0xc0031b01,dl
c001fa8d:	89 0c c5 08 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4f8],ecx
c001fa94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa98:	89 14 c5 04 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4fc],edx
c001fa9f:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c001faa4:	83 f8 08             	cmp    eax,0x8
c001faa7:	75 08                	jne    c001fab1 <Vm::fpuPush(unsigned long long)+0x56>
c001faa9:	80 0d 00 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b00,0x40
c001fab0:	c3                   	ret    
c001fab1:	40                   	inc    eax
c001fab2:	a3 44 1b 03 c0       	mov    ds:0xc0031b44,eax
c001fab7:	c3                   	ret    

c001fab8 <Vm::fpuPop()>:
c001fab8:	8a 0d 01 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b01
c001fabe:	53                   	push   ebx
c001fabf:	c0 e9 03             	shr    cl,0x3
c001fac2:	8a 1d 01 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b01
c001fac8:	83 e1 07             	and    ecx,0x7
c001facb:	83 e3 c7             	and    ebx,0xffffffc7
c001face:	8b 04 cd 04 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce4fc]
c001fad5:	8b 14 cd 08 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce4f8]
c001fadc:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fae3:	83 e1 38             	and    ecx,0x38
c001fae6:	09 d9                	or     ecx,ebx
c001fae8:	88 0d 01 1b 03 c0    	mov    BYTE PTR ds:0xc0031b01,cl
c001faee:	8b 0d 44 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b44
c001faf4:	85 c9                	test   ecx,ecx
c001faf6:	74 09                	je     c001fb01 <Vm::fpuPop()+0x49>
c001faf8:	49                   	dec    ecx
c001faf9:	89 0d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ecx
c001faff:	eb 07                	jmp    c001fb08 <Vm::fpuPop()+0x50>
c001fb01:	80 0d 00 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b00,0x40
c001fb08:	5b                   	pop    ebx
c001fb09:	c3                   	ret    

c001fb0a <Vm::x87Handler(regs*)>:
c001fb0a:	55                   	push   ebp
c001fb0b:	57                   	push   edi
c001fb0c:	56                   	push   esi
c001fb0d:	53                   	push   ebx
c001fb0e:	83 ec 1c             	sub    esp,0x1c
c001fb11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb15:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb1a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb1d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb25:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb29:	50                   	push   eax
c001fb2a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb2e:	50                   	push   eax
c001fb2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb33:	50                   	push   eax
c001fb34:	53                   	push   ebx
c001fb35:	e8 28 a2 ff ff       	call   c0019d62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb3a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb3d:	83 c4 10             	add    esp,0x10
c001fb40:	89 c6                	mov    esi,eax
c001fb42:	80 fa d9             	cmp    dl,0xd9
c001fb45:	0f 85 52 01 00 00    	jne    c001fc9d <Vm::x87Handler(regs*)+0x193>
c001fb4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb4f:	8d 50 20             	lea    edx,[eax+0x20]
c001fb52:	80 fa 0e             	cmp    dl,0xe
c001fb55:	0f 87 86 00 00 00    	ja     c001fbe1 <Vm::x87Handler(regs*)+0xd7>
c001fb5b:	0f b6 d2             	movzx  edx,dl
c001fb5e:	ff 24 95 d8 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3728]
c001fb65:	e8 e7 fc ff ff       	call   c001f851 <Vm::fpuGet0()>
c001fb6a:	eb 05                	jmp    c001fb71 <Vm::x87Handler(regs*)+0x67>
c001fb6c:	e8 e5 fc ff ff       	call   c001f856 <Vm::fpuGet1()>
c001fb71:	57                   	push   edi
c001fb72:	57                   	push   edi
c001fb73:	52                   	push   edx
c001fb74:	50                   	push   eax
c001fb75:	e8 e1 fe ff ff       	call   c001fa5b <Vm::fpuPush(unsigned long long)>
c001fb7a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb7e:	83 c4 10             	add    esp,0x10
c001fb81:	b0 01                	mov    al,0x1
c001fb83:	e9 e3 09 00 00       	jmp    c002056b <Vm::x87Handler(regs*)+0xa61>
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	6a 00                	push   0x0
c001fb8d:	e8 3b fe ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fb92:	59                   	pop    ecx
c001fb93:	5e                   	pop    esi
c001fb94:	52                   	push   edx
c001fb95:	50                   	push   eax
c001fb96:	e8 c2 fd ff ff       	call   c001f95d <Vm::fpuChs(unsigned long long)>
c001fb9b:	eb 13                	jmp    c001fbb0 <Vm::x87Handler(regs*)+0xa6>
c001fb9d:	83 ec 0c             	sub    esp,0xc
c001fba0:	6a 00                	push   0x0
c001fba2:	e8 26 fe ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fba7:	5f                   	pop    edi
c001fba8:	5d                   	pop    ebp
c001fba9:	52                   	push   edx
c001fbaa:	50                   	push   eax
c001fbab:	e8 a4 fd ff ff       	call   c001f954 <Vm::fpuAbs(unsigned long long)>
c001fbb0:	83 c4 0c             	add    esp,0xc
c001fbb3:	52                   	push   edx
c001fbb4:	50                   	push   eax
c001fbb5:	6a 00                	push   0x0
c001fbb7:	e8 54 fe ff ff       	call   c001fa10 <Vm::fpuSetReg(int, unsigned long long)>
c001fbbc:	eb bc                	jmp    c001fb7a <Vm::x87Handler(regs*)+0x70>
c001fbbe:	e8 d3 fc ff ff       	call   c001f896 <Vm::fpuGetLog210()>
c001fbc3:	eb ac                	jmp    c001fb71 <Vm::x87Handler(regs*)+0x67>
c001fbc5:	e8 9c fc ff ff       	call   c001f866 <Vm::fpuGetLog2E()>
c001fbca:	eb a5                	jmp    c001fb71 <Vm::x87Handler(regs*)+0x67>
c001fbcc:	e8 8d fc ff ff       	call   c001f85e <Vm::fpuGetPi()>
c001fbd1:	eb 9e                	jmp    c001fb71 <Vm::x87Handler(regs*)+0x67>
c001fbd3:	e8 d6 fc ff ff       	call   c001f8ae <Vm::fpuGetLog102()>
c001fbd8:	eb 97                	jmp    c001fb71 <Vm::x87Handler(regs*)+0x67>
c001fbda:	e8 9f fc ff ff       	call   c001f87e <Vm::fpuGetLogE2()>
c001fbdf:	eb 90                	jmp    c001fb71 <Vm::x87Handler(regs*)+0x67>
c001fbe1:	8d 50 40             	lea    edx,[eax+0x40]
c001fbe4:	80 fa 07             	cmp    dl,0x7
c001fbe7:	77 15                	ja     c001fbfe <Vm::x87Handler(regs*)+0xf4>
c001fbe9:	83 ec 0c             	sub    esp,0xc
c001fbec:	2d c0 00 00 00       	sub    eax,0xc0
c001fbf1:	50                   	push   eax
c001fbf2:	e8 d6 fd ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fbf7:	59                   	pop    ecx
c001fbf8:	5e                   	pop    esi
c001fbf9:	e9 75 ff ff ff       	jmp    c001fb73 <Vm::x87Handler(regs*)+0x69>
c001fbfe:	8d 50 38             	lea    edx,[eax+0x38]
c001fc01:	80 fa 07             	cmp    dl,0x7
c001fc04:	77 3c                	ja     c001fc42 <Vm::x87Handler(regs*)+0x138>
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	2d c8 00 00 00       	sub    eax,0xc8
c001fc0e:	50                   	push   eax
c001fc0f:	e8 b9 fd ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fc14:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc1b:	89 c6                	mov    esi,eax
c001fc1d:	89 d7                	mov    edi,edx
c001fc1f:	e8 a9 fd ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fc24:	83 c4 0c             	add    esp,0xc
c001fc27:	52                   	push   edx
c001fc28:	50                   	push   eax
c001fc29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc2d:	2d c8 00 00 00       	sub    eax,0xc8
c001fc32:	50                   	push   eax
c001fc33:	e8 d8 fd ff ff       	call   c001fa10 <Vm::fpuSetReg(int, unsigned long long)>
c001fc38:	83 c4 0c             	add    esp,0xc
c001fc3b:	57                   	push   edi
c001fc3c:	56                   	push   esi
c001fc3d:	e9 73 ff ff ff       	jmp    c001fbb5 <Vm::x87Handler(regs*)+0xab>
c001fc42:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc46:	84 d2                	test   dl,dl
c001fc48:	75 0f                	jne    c001fc59 <Vm::x87Handler(regs*)+0x14f>
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	ff 36                	push   DWORD PTR [esi]
c001fc4f:	e8 c8 fa ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c001fc54:	e9 bf 00 00 00       	jmp    c001fd18 <Vm::x87Handler(regs*)+0x20e>
c001fc59:	80 fa 03             	cmp    dl,0x3
c001fc5c:	75 13                	jne    c001fc71 <Vm::x87Handler(regs*)+0x167>
c001fc5e:	e8 55 fe ff ff       	call   c001fab8 <Vm::fpuPop()>
c001fc63:	55                   	push   ebp
c001fc64:	55                   	push   ebp
c001fc65:	52                   	push   edx
c001fc66:	50                   	push   eax
c001fc67:	e8 4c fa ff ff       	call   c001f6b8 <Vm::fpuInternalTo32(unsigned long long)>
c001fc6c:	e9 88 00 00 00       	jmp    c001fcf9 <Vm::x87Handler(regs*)+0x1ef>
c001fc71:	80 fa 05             	cmp    dl,0x5
c001fc74:	75 0e                	jne    c001fc84 <Vm::x87Handler(regs*)+0x17a>
c001fc76:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc79:	66 a3 02 1b 03 c0    	mov    ds:0xc0031b02,ax
c001fc7f:	e9 df 00 00 00       	jmp    c001fd63 <Vm::x87Handler(regs*)+0x259>
c001fc84:	31 c0                	xor    eax,eax
c001fc86:	80 fa 07             	cmp    dl,0x7
c001fc89:	0f 85 dc 08 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c001fc8f:	66 a1 02 1b 03 c0    	mov    ax,ds:0xc0031b02
c001fc95:	66 89 06             	mov    WORD PTR [esi],ax
c001fc98:	e9 c6 00 00 00       	jmp    c001fd63 <Vm::x87Handler(regs*)+0x259>
c001fc9d:	80 fa d8             	cmp    dl,0xd8
c001fca0:	0f 84 c9 00 00 00    	je     c001fd6f <Vm::x87Handler(regs*)+0x265>
c001fca6:	80 fa dc             	cmp    dl,0xdc
c001fca9:	0f 84 0d 02 00 00    	je     c001febc <Vm::x87Handler(regs*)+0x3b2>
c001fcaf:	80 fa de             	cmp    dl,0xde
c001fcb2:	0f 84 cd 02 00 00    	je     c001ff85 <Vm::x87Handler(regs*)+0x47b>
c001fcb8:	80 fa dd             	cmp    dl,0xdd
c001fcbb:	0f 84 5f 04 00 00    	je     c0020120 <Vm::x87Handler(regs*)+0x616>
c001fcc1:	80 fa da             	cmp    dl,0xda
c001fcc4:	0f 84 24 05 00 00    	je     c00201ee <Vm::x87Handler(regs*)+0x6e4>
c001fcca:	80 fa df             	cmp    dl,0xdf
c001fccd:	0f 84 68 05 00 00    	je     c002023b <Vm::x87Handler(regs*)+0x731>
c001fcd3:	31 c0                	xor    eax,eax
c001fcd5:	80 fa db             	cmp    dl,0xdb
c001fcd8:	0f 85 8d 08 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c001fcde:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fce2:	80 fa 03             	cmp    dl,0x3
c001fce5:	0f 85 70 06 00 00    	jne    c002035b <Vm::x87Handler(regs*)+0x851>
c001fceb:	e8 c8 fd ff ff       	call   c001fab8 <Vm::fpuPop()>
c001fcf0:	55                   	push   ebp
c001fcf1:	55                   	push   ebp
c001fcf2:	52                   	push   edx
c001fcf3:	50                   	push   eax
c001fcf4:	e8 71 fa ff ff       	call   c001f76a <Vm::fpuFloatToLong(unsigned long long)>
c001fcf9:	83 c4 10             	add    esp,0x10
c001fcfc:	89 06                	mov    DWORD PTR [esi],eax
c001fcfe:	eb 63                	jmp    c001fd63 <Vm::x87Handler(regs*)+0x259>
c001fd00:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd04:	84 d2                	test   dl,dl
c001fd06:	0f 85 e6 05 00 00    	jne    c00202f2 <Vm::x87Handler(regs*)+0x7e8>
c001fd0c:	57                   	push   edi
c001fd0d:	57                   	push   edi
c001fd0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd11:	ff 36                	push   DWORD PTR [esi]
c001fd13:	e8 49 fa ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c001fd18:	5e                   	pop    esi
c001fd19:	5f                   	pop    edi
c001fd1a:	52                   	push   edx
c001fd1b:	50                   	push   eax
c001fd1c:	e8 3a fd ff ff       	call   c001fa5b <Vm::fpuPush(unsigned long long)>
c001fd21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd25:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd28:	e9 51 fe ff ff       	jmp    c001fb7e <Vm::x87Handler(regs*)+0x74>
c001fd2d:	80 fa 03             	cmp    dl,0x3
c001fd30:	0f 85 d7 06 00 00    	jne    c002040d <Vm::x87Handler(regs*)+0x903>
c001fd36:	57                   	push   edi
c001fd37:	57                   	push   edi
c001fd38:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd3b:	ff 36                	push   DWORD PTR [esi]
c001fd3d:	e8 1f fa ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c001fd42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd49:	89 c6                	mov    esi,eax
c001fd4b:	89 d7                	mov    edi,edx
c001fd4d:	e8 7b fc ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fd52:	57                   	push   edi
c001fd53:	56                   	push   esi
c001fd54:	52                   	push   edx
c001fd55:	50                   	push   eax
c001fd56:	e8 95 fb ff ff       	call   c001f8f0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd5b:	83 c4 20             	add    esp,0x20
c001fd5e:	e8 55 fd ff ff       	call   c001fab8 <Vm::fpuPop()>
c001fd63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd67:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd6a:	e9 12 fe ff ff       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x77>
c001fd6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd73:	8d 50 40             	lea    edx,[eax+0x40]
c001fd76:	80 fa 07             	cmp    dl,0x7
c001fd79:	77 29                	ja     c001fda4 <Vm::x87Handler(regs*)+0x29a>
c001fd7b:	83 ec 0c             	sub    esp,0xc
c001fd7e:	2d c0 00 00 00       	sub    eax,0xc0
c001fd83:	50                   	push   eax
c001fd84:	e8 44 fc ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fd89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd90:	89 c6                	mov    esi,eax
c001fd92:	89 d7                	mov    edi,edx
c001fd94:	e8 34 fc ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fd99:	57                   	push   edi
c001fd9a:	56                   	push   esi
c001fd9b:	52                   	push   edx
c001fd9c:	50                   	push   eax
c001fd9d:	e8 a1 fb ff ff       	call   c001f943 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fda2:	eb 2f                	jmp    c001fdd3 <Vm::x87Handler(regs*)+0x2c9>
c001fda4:	8d 50 38             	lea    edx,[eax+0x38]
c001fda7:	80 fa 07             	cmp    dl,0x7
c001fdaa:	77 2f                	ja     c001fddb <Vm::x87Handler(regs*)+0x2d1>
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	2d c8 00 00 00       	sub    eax,0xc8
c001fdb4:	50                   	push   eax
c001fdb5:	e8 13 fc ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fdba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc1:	89 c6                	mov    esi,eax
c001fdc3:	89 d7                	mov    edi,edx
c001fdc5:	e8 03 fc ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fdca:	57                   	push   edi
c001fdcb:	56                   	push   esi
c001fdcc:	52                   	push   edx
c001fdcd:	50                   	push   eax
c001fdce:	e8 a9 fb ff ff       	call   c001f97c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdd3:	83 c4 1c             	add    esp,0x1c
c001fdd6:	e9 d8 fd ff ff       	jmp    c001fbb3 <Vm::x87Handler(regs*)+0xa9>
c001fddb:	8d 50 30             	lea    edx,[eax+0x30]
c001fdde:	80 fa 07             	cmp    dl,0x7
c001fde1:	77 0d                	ja     c001fdf0 <Vm::x87Handler(regs*)+0x2e6>
c001fde3:	83 ec 0c             	sub    esp,0xc
c001fde6:	2d d0 00 00 00       	sub    eax,0xd0
c001fdeb:	e9 99 03 00 00       	jmp    c0020189 <Vm::x87Handler(regs*)+0x67f>
c001fdf0:	8d 50 28             	lea    edx,[eax+0x28]
c001fdf3:	80 fa 07             	cmp    dl,0x7
c001fdf6:	77 0d                	ja     c001fe05 <Vm::x87Handler(regs*)+0x2fb>
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	2d d8 00 00 00       	sub    eax,0xd8
c001fe00:	e9 c0 03 00 00       	jmp    c00201c5 <Vm::x87Handler(regs*)+0x6bb>
c001fe05:	8d 50 20             	lea    edx,[eax+0x20]
c001fe08:	80 fa 07             	cmp    dl,0x7
c001fe0b:	77 1b                	ja     c001fe28 <Vm::x87Handler(regs*)+0x31e>
c001fe0d:	83 ec 0c             	sub    esp,0xc
c001fe10:	2d e0 00 00 00       	sub    eax,0xe0
c001fe15:	50                   	push   eax
c001fe16:	e8 b2 fb ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fe1b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe22:	89 c6                	mov    esi,eax
c001fe24:	89 d7                	mov    edi,edx
c001fe26:	eb 22                	jmp    c001fe4a <Vm::x87Handler(regs*)+0x340>
c001fe28:	8d 50 18             	lea    edx,[eax+0x18]
c001fe2b:	80 fa 07             	cmp    dl,0x7
c001fe2e:	77 2d                	ja     c001fe5d <Vm::x87Handler(regs*)+0x353>
c001fe30:	83 ec 0c             	sub    esp,0xc
c001fe33:	6a 00                	push   0x0
c001fe35:	e8 93 fb ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fe3a:	89 c6                	mov    esi,eax
c001fe3c:	89 d7                	mov    edi,edx
c001fe3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe42:	2d e8 00 00 00       	sub    eax,0xe8
c001fe47:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe4a:	e8 7e fb ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fe4f:	57                   	push   edi
c001fe50:	56                   	push   esi
c001fe51:	52                   	push   edx
c001fe52:	50                   	push   eax
c001fe53:	e8 15 fb ff ff       	call   c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe58:	e9 76 ff ff ff       	jmp    c001fdd3 <Vm::x87Handler(regs*)+0x2c9>
c001fe5d:	8d 50 10             	lea    edx,[eax+0x10]
c001fe60:	80 fa 07             	cmp    dl,0x7
c001fe63:	77 1b                	ja     c001fe80 <Vm::x87Handler(regs*)+0x376>
c001fe65:	83 ec 0c             	sub    esp,0xc
c001fe68:	2d f0 00 00 00       	sub    eax,0xf0
c001fe6d:	50                   	push   eax
c001fe6e:	e8 5a fb ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fe73:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe7a:	89 c6                	mov    esi,eax
c001fe7c:	89 d7                	mov    edi,edx
c001fe7e:	eb 22                	jmp    c001fea2 <Vm::x87Handler(regs*)+0x398>
c001fe80:	3c f7                	cmp    al,0xf7
c001fe82:	0f 86 d1 03 00 00    	jbe    c0020259 <Vm::x87Handler(regs*)+0x74f>
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	6a 00                	push   0x0
c001fe8d:	e8 3b fb ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fe92:	89 c6                	mov    esi,eax
c001fe94:	89 d7                	mov    edi,edx
c001fe96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe9a:	2d f8 00 00 00       	sub    eax,0xf8
c001fe9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fea2:	e8 26 fb ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fea7:	57                   	push   edi
c001fea8:	56                   	push   esi
c001fea9:	52                   	push   edx
c001feaa:	50                   	push   eax
c001feab:	e8 eb fa ff ff       	call   c001f99b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feb0:	83 c4 1c             	add    esp,0x1c
c001feb3:	52                   	push   edx
c001feb4:	50                   	push   eax
c001feb5:	6a 00                	push   0x0
c001feb7:	e9 51 02 00 00       	jmp    c002010d <Vm::x87Handler(regs*)+0x603>
c001febc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec0:	8d 50 40             	lea    edx,[eax+0x40]
c001fec3:	80 fa 07             	cmp    dl,0x7
c001fec6:	77 37                	ja     c001feff <Vm::x87Handler(regs*)+0x3f5>
c001fec8:	83 ec 0c             	sub    esp,0xc
c001fecb:	2d c0 00 00 00       	sub    eax,0xc0
c001fed0:	50                   	push   eax
c001fed1:	e8 f7 fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fed6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fedd:	89 c6                	mov    esi,eax
c001fedf:	89 d7                	mov    edi,edx
c001fee1:	e8 e7 fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fee6:	57                   	push   edi
c001fee7:	56                   	push   esi
c001fee8:	52                   	push   edx
c001fee9:	50                   	push   eax
c001feea:	e8 54 fa ff ff       	call   c001f943 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001feef:	83 c4 1c             	add    esp,0x1c
c001fef2:	52                   	push   edx
c001fef3:	50                   	push   eax
c001fef4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef8:	2d c0 00 00 00       	sub    eax,0xc0
c001fefd:	eb 3d                	jmp    c001ff3c <Vm::x87Handler(regs*)+0x432>
c001feff:	8d 50 38             	lea    edx,[eax+0x38]
c001ff02:	80 fa 07             	cmp    dl,0x7
c001ff05:	77 3b                	ja     c001ff42 <Vm::x87Handler(regs*)+0x438>
c001ff07:	83 ec 0c             	sub    esp,0xc
c001ff0a:	2d c8 00 00 00       	sub    eax,0xc8
c001ff0f:	50                   	push   eax
c001ff10:	e8 b8 fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ff15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff1c:	89 c6                	mov    esi,eax
c001ff1e:	89 d7                	mov    edi,edx
c001ff20:	e8 a8 fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ff25:	57                   	push   edi
c001ff26:	56                   	push   esi
c001ff27:	52                   	push   edx
c001ff28:	50                   	push   eax
c001ff29:	e8 4e fa ff ff       	call   c001f97c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff2e:	83 c4 1c             	add    esp,0x1c
c001ff31:	52                   	push   edx
c001ff32:	50                   	push   eax
c001ff33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff37:	2d c8 00 00 00       	sub    eax,0xc8
c001ff3c:	50                   	push   eax
c001ff3d:	e9 75 fc ff ff       	jmp    c001fbb7 <Vm::x87Handler(regs*)+0xad>
c001ff42:	83 c0 18             	add    eax,0x18
c001ff45:	3c 07                	cmp    al,0x7
c001ff47:	0f 87 3b 04 00 00    	ja     c0020388 <Vm::x87Handler(regs*)+0x87e>
c001ff4d:	83 ec 0c             	sub    esp,0xc
c001ff50:	6a 00                	push   0x0
c001ff52:	e8 76 fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ff57:	89 c6                	mov    esi,eax
c001ff59:	89 d7                	mov    edi,edx
c001ff5b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff5f:	2d e8 00 00 00       	sub    eax,0xe8
c001ff64:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff67:	e8 61 fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ff6c:	57                   	push   edi
c001ff6d:	56                   	push   esi
c001ff6e:	52                   	push   edx
c001ff6f:	50                   	push   eax
c001ff70:	e8 f8 f9 ff ff       	call   c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff75:	83 c4 1c             	add    esp,0x1c
c001ff78:	52                   	push   edx
c001ff79:	50                   	push   eax
c001ff7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7e:	2d e8 00 00 00       	sub    eax,0xe8
c001ff83:	eb b7                	jmp    c001ff3c <Vm::x87Handler(regs*)+0x432>
c001ff85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff89:	8d 50 40             	lea    edx,[eax+0x40]
c001ff8c:	80 fa 07             	cmp    dl,0x7
c001ff8f:	77 3a                	ja     c001ffcb <Vm::x87Handler(regs*)+0x4c1>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	2d c0 00 00 00       	sub    eax,0xc0
c001ff99:	50                   	push   eax
c001ff9a:	e8 2e fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ff9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffa6:	89 c6                	mov    esi,eax
c001ffa8:	89 d7                	mov    edi,edx
c001ffaa:	e8 1e fa ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ffaf:	57                   	push   edi
c001ffb0:	56                   	push   esi
c001ffb1:	52                   	push   edx
c001ffb2:	50                   	push   eax
c001ffb3:	e8 8b f9 ff ff       	call   c001f943 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffb8:	83 c4 1c             	add    esp,0x1c
c001ffbb:	52                   	push   edx
c001ffbc:	50                   	push   eax
c001ffbd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc1:	2d c0 00 00 00       	sub    eax,0xc0
c001ffc6:	e9 9e 01 00 00       	jmp    c0020169 <Vm::x87Handler(regs*)+0x65f>
c001ffcb:	8d 50 20             	lea    edx,[eax+0x20]
c001ffce:	80 fa 07             	cmp    dl,0x7
c001ffd1:	77 3a                	ja     c002000d <Vm::x87Handler(regs*)+0x503>
c001ffd3:	83 ec 0c             	sub    esp,0xc
c001ffd6:	2d e0 00 00 00       	sub    eax,0xe0
c001ffdb:	50                   	push   eax
c001ffdc:	e8 ec f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001ffe1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffe8:	89 c6                	mov    esi,eax
c001ffea:	89 d7                	mov    edi,edx
c001ffec:	e8 dc f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c001fff1:	57                   	push   edi
c001fff2:	56                   	push   esi
c001fff3:	52                   	push   edx
c001fff4:	50                   	push   eax
c001fff5:	e8 73 f9 ff ff       	call   c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fffa:	83 c4 1c             	add    esp,0x1c
c001fffd:	52                   	push   edx
c001fffe:	50                   	push   eax
c001ffff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020003:	2d e0 00 00 00       	sub    eax,0xe0
c0020008:	e9 5c 01 00 00       	jmp    c0020169 <Vm::x87Handler(regs*)+0x65f>
c002000d:	8d 50 18             	lea    edx,[eax+0x18]
c0020010:	80 fa 07             	cmp    dl,0x7
c0020013:	77 3b                	ja     c0020050 <Vm::x87Handler(regs*)+0x546>
c0020015:	83 ec 0c             	sub    esp,0xc
c0020018:	6a 00                	push   0x0
c002001a:	e8 ae f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002001f:	89 c6                	mov    esi,eax
c0020021:	89 d7                	mov    edi,edx
c0020023:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020027:	2d e8 00 00 00       	sub    eax,0xe8
c002002c:	89 04 24             	mov    DWORD PTR [esp],eax
c002002f:	e8 99 f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020034:	57                   	push   edi
c0020035:	56                   	push   esi
c0020036:	52                   	push   edx
c0020037:	50                   	push   eax
c0020038:	e8 30 f9 ff ff       	call   c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>
c002003d:	83 c4 1c             	add    esp,0x1c
c0020040:	52                   	push   edx
c0020041:	50                   	push   eax
c0020042:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020046:	2d e8 00 00 00       	sub    eax,0xe8
c002004b:	e9 19 01 00 00       	jmp    c0020169 <Vm::x87Handler(regs*)+0x65f>
c0020050:	8d 50 38             	lea    edx,[eax+0x38]
c0020053:	80 fa 07             	cmp    dl,0x7
c0020056:	77 37                	ja     c002008f <Vm::x87Handler(regs*)+0x585>
c0020058:	83 ec 0c             	sub    esp,0xc
c002005b:	2d c8 00 00 00       	sub    eax,0xc8
c0020060:	50                   	push   eax
c0020061:	e8 67 f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020066:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002006d:	89 c6                	mov    esi,eax
c002006f:	89 d7                	mov    edi,edx
c0020071:	e8 57 f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020076:	57                   	push   edi
c0020077:	56                   	push   esi
c0020078:	52                   	push   edx
c0020079:	50                   	push   eax
c002007a:	e8 fd f8 ff ff       	call   c001f97c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002007f:	83 c4 1c             	add    esp,0x1c
c0020082:	52                   	push   edx
c0020083:	50                   	push   eax
c0020084:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020088:	2d c8 00 00 00       	sub    eax,0xc8
c002008d:	eb 7d                	jmp    c002010c <Vm::x87Handler(regs*)+0x602>
c002008f:	3c f7                	cmp    al,0xf7
c0020091:	76 38                	jbe    c00200cb <Vm::x87Handler(regs*)+0x5c1>
c0020093:	83 ec 0c             	sub    esp,0xc
c0020096:	6a 00                	push   0x0
c0020098:	e8 30 f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002009d:	89 c6                	mov    esi,eax
c002009f:	89 d7                	mov    edi,edx
c00200a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a5:	2d f8 00 00 00       	sub    eax,0xf8
c00200aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00200ad:	e8 1b f9 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00200b2:	57                   	push   edi
c00200b3:	56                   	push   esi
c00200b4:	52                   	push   edx
c00200b5:	50                   	push   eax
c00200b6:	e8 e0 f8 ff ff       	call   c001f99b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200bb:	83 c4 1c             	add    esp,0x1c
c00200be:	52                   	push   edx
c00200bf:	50                   	push   eax
c00200c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c4:	2d f8 00 00 00       	sub    eax,0xf8
c00200c9:	eb 41                	jmp    c002010c <Vm::x87Handler(regs*)+0x602>
c00200cb:	8d 50 10             	lea    edx,[eax+0x10]
c00200ce:	80 fa 07             	cmp    dl,0x7
c00200d1:	0f 87 5a 01 00 00    	ja     c0020231 <Vm::x87Handler(regs*)+0x727>
c00200d7:	83 ec 0c             	sub    esp,0xc
c00200da:	2d f0 00 00 00       	sub    eax,0xf0
c00200df:	50                   	push   eax
c00200e0:	e8 e8 f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00200e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200ec:	89 c6                	mov    esi,eax
c00200ee:	89 d7                	mov    edi,edx
c00200f0:	e8 d8 f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00200f5:	57                   	push   edi
c00200f6:	56                   	push   esi
c00200f7:	52                   	push   edx
c00200f8:	50                   	push   eax
c00200f9:	e8 9d f8 ff ff       	call   c001f99b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200fe:	83 c4 1c             	add    esp,0x1c
c0020101:	52                   	push   edx
c0020102:	50                   	push   eax
c0020103:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020107:	2d f0 00 00 00       	sub    eax,0xf0
c002010c:	50                   	push   eax
c002010d:	e8 fe f8 ff ff       	call   c001fa10 <Vm::fpuSetReg(int, unsigned long long)>
c0020112:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020116:	e8 9d f9 ff ff       	call   c001fab8 <Vm::fpuPop()>
c002011b:	e9 5e fa ff ff       	jmp    c001fb7e <Vm::x87Handler(regs*)+0x74>
c0020120:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020124:	8d 50 30             	lea    edx,[eax+0x30]
c0020127:	80 fa 07             	cmp    dl,0x7
c002012a:	77 1d                	ja     c0020149 <Vm::x87Handler(regs*)+0x63f>
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	6a 00                	push   0x0
c0020131:	e8 97 f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020136:	83 c4 0c             	add    esp,0xc
c0020139:	52                   	push   edx
c002013a:	50                   	push   eax
c002013b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002013f:	2d d0 00 00 00       	sub    eax,0xd0
c0020144:	e9 f3 fd ff ff       	jmp    c001ff3c <Vm::x87Handler(regs*)+0x432>
c0020149:	8d 50 28             	lea    edx,[eax+0x28]
c002014c:	80 fa 07             	cmp    dl,0x7
c002014f:	77 28                	ja     c0020179 <Vm::x87Handler(regs*)+0x66f>
c0020151:	83 ec 0c             	sub    esp,0xc
c0020154:	6a 00                	push   0x0
c0020156:	e8 72 f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002015b:	83 c4 0c             	add    esp,0xc
c002015e:	52                   	push   edx
c002015f:	50                   	push   eax
c0020160:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020164:	2d d8 00 00 00       	sub    eax,0xd8
c0020169:	50                   	push   eax
c002016a:	e8 a1 f8 ff ff       	call   c001fa10 <Vm::fpuSetReg(int, unsigned long long)>
c002016f:	e8 44 f9 ff ff       	call   c001fab8 <Vm::fpuPop()>
c0020174:	e9 01 fa ff ff       	jmp    c001fb7a <Vm::x87Handler(regs*)+0x70>
c0020179:	8d 50 20             	lea    edx,[eax+0x20]
c002017c:	80 fa 07             	cmp    dl,0x7
c002017f:	77 30                	ja     c00201b1 <Vm::x87Handler(regs*)+0x6a7>
c0020181:	83 ec 0c             	sub    esp,0xc
c0020184:	2d e0 00 00 00       	sub    eax,0xe0
c0020189:	50                   	push   eax
c002018a:	e8 3e f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002018f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020196:	89 c6                	mov    esi,eax
c0020198:	89 d7                	mov    edi,edx
c002019a:	e8 2e f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002019f:	57                   	push   edi
c00201a0:	56                   	push   esi
c00201a1:	52                   	push   edx
c00201a2:	50                   	push   eax
c00201a3:	e8 48 f7 ff ff       	call   c001f8f0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201ac:	e9 54 02 00 00       	jmp    c0020405 <Vm::x87Handler(regs*)+0x8fb>
c00201b1:	8d 50 18             	lea    edx,[eax+0x18]
c00201b4:	80 fa 07             	cmp    dl,0x7
c00201b7:	0f 87 43 fb ff ff    	ja     c001fd00 <Vm::x87Handler(regs*)+0x1f6>
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	2d e8 00 00 00       	sub    eax,0xe8
c00201c5:	50                   	push   eax
c00201c6:	e8 02 f8 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00201cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201d2:	89 c6                	mov    esi,eax
c00201d4:	89 d7                	mov    edi,edx
c00201d6:	e8 f2 f7 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00201db:	57                   	push   edi
c00201dc:	56                   	push   esi
c00201dd:	52                   	push   edx
c00201de:	50                   	push   eax
c00201df:	e8 0c f7 ff ff       	call   c001f8f0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201e4:	83 c4 20             	add    esp,0x20
c00201e7:	e8 cc f8 ff ff       	call   c001fab8 <Vm::fpuPop()>
c00201ec:	eb 62                	jmp    c0020250 <Vm::x87Handler(regs*)+0x746>
c00201ee:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201f2:	0f 85 0f 01 00 00    	jne    c0020307 <Vm::x87Handler(regs*)+0x7fd>
c00201f8:	83 ec 0c             	sub    esp,0xc
c00201fb:	6a 01                	push   0x1
c00201fd:	e8 cb f7 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020202:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020209:	89 c6                	mov    esi,eax
c002020b:	89 d7                	mov    edi,edx
c002020d:	e8 bb f7 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020212:	57                   	push   edi
c0020213:	56                   	push   esi
c0020214:	52                   	push   edx
c0020215:	50                   	push   eax
c0020216:	e8 d5 f6 ff ff       	call   c001f8f0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002021b:	83 c4 20             	add    esp,0x20
c002021e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020222:	e8 91 f8 ff ff       	call   c001fab8 <Vm::fpuPop()>
c0020227:	e8 8c f8 ff ff       	call   c001fab8 <Vm::fpuPop()>
c002022c:	e9 50 f9 ff ff       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x77>
c0020231:	3c d9                	cmp    al,0xd9
c0020233:	0f 85 b5 02 00 00    	jne    c00204ee <Vm::x87Handler(regs*)+0x9e4>
c0020239:	eb bd                	jmp    c00201f8 <Vm::x87Handler(regs*)+0x6ee>
c002023b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002023f:	0f 85 ea 02 00 00    	jne    c002052f <Vm::x87Handler(regs*)+0xa25>
c0020245:	0f b7 05 00 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b00
c002024c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020250:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020254:	e9 28 f9 ff ff       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x77>
c0020259:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002025d:	84 d2                	test   dl,dl
c002025f:	75 0f                	jne    c0020270 <Vm::x87Handler(regs*)+0x766>
c0020261:	83 ec 0c             	sub    esp,0xc
c0020264:	ff 36                	push   DWORD PTR [esi]
c0020266:	e8 b1 f4 ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c002026b:	e9 2c 01 00 00       	jmp    c002039c <Vm::x87Handler(regs*)+0x892>
c0020270:	80 fa 01             	cmp    dl,0x1
c0020273:	75 0f                	jne    c0020284 <Vm::x87Handler(regs*)+0x77a>
c0020275:	83 ec 0c             	sub    esp,0xc
c0020278:	ff 36                	push   DWORD PTR [esi]
c002027a:	e8 9d f4 ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c002027f:	e9 81 02 00 00       	jmp    c0020505 <Vm::x87Handler(regs*)+0x9fb>
c0020284:	80 fa 04             	cmp    dl,0x4
c0020287:	75 0f                	jne    c0020298 <Vm::x87Handler(regs*)+0x78e>
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	ff 36                	push   DWORD PTR [esi]
c002028e:	e8 89 f4 ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c0020293:	e9 86 01 00 00       	jmp    c002041e <Vm::x87Handler(regs*)+0x914>
c0020298:	80 fa 05             	cmp    dl,0x5
c002029b:	75 1b                	jne    c00202b8 <Vm::x87Handler(regs*)+0x7ae>
c002029d:	83 ec 0c             	sub    esp,0xc
c00202a0:	6a 00                	push   0x0
c00202a2:	e8 26 f7 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00202a7:	89 c7                	mov    edi,eax
c00202a9:	89 d5                	mov    ebp,edx
c00202ab:	58                   	pop    eax
c00202ac:	ff 36                	push   DWORD PTR [esi]
c00202ae:	e8 69 f4 ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c00202b3:	e9 a3 01 00 00       	jmp    c002045b <Vm::x87Handler(regs*)+0x951>
c00202b8:	80 fa 06             	cmp    dl,0x6
c00202bb:	75 0f                	jne    c00202cc <Vm::x87Handler(regs*)+0x7c2>
c00202bd:	83 ec 0c             	sub    esp,0xc
c00202c0:	ff 36                	push   DWORD PTR [esi]
c00202c2:	e8 55 f4 ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c00202c7:	e9 ae 01 00 00       	jmp    c002047a <Vm::x87Handler(regs*)+0x970>
c00202cc:	31 c0                	xor    eax,eax
c00202ce:	80 fa 07             	cmp    dl,0x7
c00202d1:	0f 85 94 02 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	6a 00                	push   0x0
c00202dc:	e8 ec f6 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00202e1:	89 c7                	mov    edi,eax
c00202e3:	89 d5                	mov    ebp,edx
c00202e5:	58                   	pop    eax
c00202e6:	ff 36                	push   DWORD PTR [esi]
c00202e8:	e8 2f f4 ff ff       	call   c001f71c <Vm::fpu32ToInternal(unsigned int)>
c00202ed:	e9 cb 01 00 00       	jmp    c00204bd <Vm::x87Handler(regs*)+0x9b3>
c00202f2:	80 fa 03             	cmp    dl,0x3
c00202f5:	0f 85 d3 01 00 00    	jne    c00204ce <Vm::x87Handler(regs*)+0x9c4>
c00202fb:	e8 b8 f7 ff ff       	call   c001fab8 <Vm::fpuPop()>
c0020300:	51                   	push   ecx
c0020301:	51                   	push   ecx
c0020302:	e9 de 01 00 00       	jmp    c00204e5 <Vm::x87Handler(regs*)+0x9db>
c0020307:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002030b:	80 fa 01             	cmp    dl,0x1
c002030e:	75 09                	jne    c0020319 <Vm::x87Handler(regs*)+0x80f>
c0020310:	57                   	push   edi
c0020311:	57                   	push   edi
c0020312:	8b 06                	mov    eax,DWORD PTR [esi]
c0020314:	e9 e3 01 00 00       	jmp    c00204fc <Vm::x87Handler(regs*)+0x9f2>
c0020319:	80 fa 04             	cmp    dl,0x4
c002031c:	75 12                	jne    c0020330 <Vm::x87Handler(regs*)+0x826>
c002031e:	31 d2                	xor    edx,edx
c0020320:	51                   	push   ecx
c0020321:	51                   	push   ecx
c0020322:	8b 06                	mov    eax,DWORD PTR [esi]
c0020324:	52                   	push   edx
c0020325:	50                   	push   eax
c0020326:	e8 d0 f4 ff ff       	call   c001f7fb <Vm::fpuLongToFloat(long long)>
c002032b:	e9 ee 00 00 00       	jmp    c002041e <Vm::x87Handler(regs*)+0x914>
c0020330:	31 c0                	xor    eax,eax
c0020332:	80 fa 07             	cmp    dl,0x7
c0020335:	0f 85 30 02 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c002033b:	83 ec 0c             	sub    esp,0xc
c002033e:	6a 00                	push   0x0
c0020340:	e8 88 f6 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020345:	89 c7                	mov    edi,eax
c0020347:	89 d5                	mov    ebp,edx
c0020349:	58                   	pop    eax
c002034a:	8b 06                	mov    eax,DWORD PTR [esi]
c002034c:	5a                   	pop    edx
c002034d:	31 d2                	xor    edx,edx
c002034f:	52                   	push   edx
c0020350:	50                   	push   eax
c0020351:	e8 a5 f4 ff ff       	call   c001f7fb <Vm::fpuLongToFloat(long long)>
c0020356:	e9 62 01 00 00       	jmp    c00204bd <Vm::x87Handler(regs*)+0x9b3>
c002035b:	84 d2                	test   dl,dl
c002035d:	75 0d                	jne    c002036c <Vm::x87Handler(regs*)+0x862>
c002035f:	31 d2                	xor    edx,edx
c0020361:	55                   	push   ebp
c0020362:	55                   	push   ebp
c0020363:	8b 06                	mov    eax,DWORD PTR [esi]
c0020365:	52                   	push   edx
c0020366:	50                   	push   eax
c0020367:	e9 d3 01 00 00       	jmp    c002053f <Vm::x87Handler(regs*)+0xa35>
c002036c:	31 c0                	xor    eax,eax
c002036e:	80 fa 02             	cmp    dl,0x2
c0020371:	0f 85 f4 01 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c0020377:	83 ec 0c             	sub    esp,0xc
c002037a:	6a 00                	push   0x0
c002037c:	e8 4c f6 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020381:	59                   	pop    ecx
c0020382:	5f                   	pop    edi
c0020383:	e9 6a f9 ff ff       	jmp    c001fcf2 <Vm::x87Handler(regs*)+0x1e8>
c0020388:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002038c:	84 d2                	test   dl,dl
c002038e:	75 2a                	jne    c00203ba <Vm::x87Handler(regs*)+0x8b0>
c0020390:	50                   	push   eax
c0020391:	50                   	push   eax
c0020392:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020395:	ff 36                	push   DWORD PTR [esi]
c0020397:	e8 c5 f3 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c002039c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203a3:	89 c6                	mov    esi,eax
c00203a5:	89 d7                	mov    edi,edx
c00203a7:	e8 21 f6 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00203ac:	57                   	push   edi
c00203ad:	56                   	push   esi
c00203ae:	52                   	push   edx
c00203af:	50                   	push   eax
c00203b0:	e8 8e f5 ff ff       	call   c001f943 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203b5:	e9 64 01 00 00       	jmp    c002051e <Vm::x87Handler(regs*)+0xa14>
c00203ba:	80 fa 01             	cmp    dl,0x1
c00203bd:	75 11                	jne    c00203d0 <Vm::x87Handler(regs*)+0x8c6>
c00203bf:	50                   	push   eax
c00203c0:	50                   	push   eax
c00203c1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c4:	ff 36                	push   DWORD PTR [esi]
c00203c6:	e8 96 f3 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c00203cb:	e9 35 01 00 00       	jmp    c0020505 <Vm::x87Handler(regs*)+0x9fb>
c00203d0:	80 fa 02             	cmp    dl,0x2
c00203d3:	0f 85 54 f9 ff ff    	jne    c001fd2d <Vm::x87Handler(regs*)+0x223>
c00203d9:	55                   	push   ebp
c00203da:	55                   	push   ebp
c00203db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203de:	ff 36                	push   DWORD PTR [esi]
c00203e0:	e8 7c f3 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c00203e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ec:	89 c6                	mov    esi,eax
c00203ee:	89 d7                	mov    edi,edx
c00203f0:	e8 d8 f5 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00203f5:	57                   	push   edi
c00203f6:	56                   	push   esi
c00203f7:	52                   	push   edx
c00203f8:	50                   	push   eax
c00203f9:	e8 f2 f4 ff ff       	call   c001f8f0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020402:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020405:	83 c4 20             	add    esp,0x20
c0020408:	e9 74 f7 ff ff       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x77>
c002040d:	80 fa 04             	cmp    dl,0x4
c0020410:	75 2a                	jne    c002043c <Vm::x87Handler(regs*)+0x932>
c0020412:	51                   	push   ecx
c0020413:	51                   	push   ecx
c0020414:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020417:	ff 36                	push   DWORD PTR [esi]
c0020419:	e8 43 f3 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c002041e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020425:	89 c6                	mov    esi,eax
c0020427:	89 d7                	mov    edi,edx
c0020429:	e8 9f f5 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002042e:	57                   	push   edi
c002042f:	56                   	push   esi
c0020430:	52                   	push   edx
c0020431:	50                   	push   eax
c0020432:	e8 36 f5 ff ff       	call   c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020437:	e9 e2 00 00 00       	jmp    c002051e <Vm::x87Handler(regs*)+0xa14>
c002043c:	80 fa 05             	cmp    dl,0x5
c002043f:	75 28                	jne    c0020469 <Vm::x87Handler(regs*)+0x95f>
c0020441:	83 ec 0c             	sub    esp,0xc
c0020444:	6a 00                	push   0x0
c0020446:	e8 82 f5 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002044b:	89 c7                	mov    edi,eax
c002044d:	89 d5                	mov    ebp,edx
c002044f:	58                   	pop    eax
c0020450:	5a                   	pop    edx
c0020451:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020454:	ff 36                	push   DWORD PTR [esi]
c0020456:	e8 06 f3 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	55                   	push   ebp
c002045f:	57                   	push   edi
c0020460:	52                   	push   edx
c0020461:	50                   	push   eax
c0020462:	e8 06 f5 ff ff       	call   c001f96d <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020467:	eb 60                	jmp    c00204c9 <Vm::x87Handler(regs*)+0x9bf>
c0020469:	80 fa 06             	cmp    dl,0x6
c002046c:	75 2a                	jne    c0020498 <Vm::x87Handler(regs*)+0x98e>
c002046e:	51                   	push   ecx
c002046f:	51                   	push   ecx
c0020470:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020473:	ff 36                	push   DWORD PTR [esi]
c0020475:	e8 e7 f2 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c002047a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020481:	89 c6                	mov    esi,eax
c0020483:	89 d7                	mov    edi,edx
c0020485:	e8 43 f5 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c002048a:	57                   	push   edi
c002048b:	56                   	push   esi
c002048c:	52                   	push   edx
c002048d:	50                   	push   eax
c002048e:	e8 08 f5 ff ff       	call   c001f99b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020493:	e9 86 00 00 00       	jmp    c002051e <Vm::x87Handler(regs*)+0xa14>
c0020498:	31 c0                	xor    eax,eax
c002049a:	80 fa 07             	cmp    dl,0x7
c002049d:	0f 85 c8 00 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c00204a3:	83 ec 0c             	sub    esp,0xc
c00204a6:	6a 00                	push   0x0
c00204a8:	e8 20 f5 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00204ad:	89 c7                	mov    edi,eax
c00204af:	89 d5                	mov    ebp,edx
c00204b1:	58                   	pop    eax
c00204b2:	5a                   	pop    edx
c00204b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204b6:	ff 36                	push   DWORD PTR [esi]
c00204b8:	e8 a4 f2 ff ff       	call   c001f761 <Vm::fpu64ToInternal(unsigned long long)>
c00204bd:	83 c4 10             	add    esp,0x10
c00204c0:	55                   	push   ebp
c00204c1:	57                   	push   edi
c00204c2:	52                   	push   edx
c00204c3:	50                   	push   eax
c00204c4:	e8 d2 f4 ff ff       	call   c001f99b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204c9:	83 c4 0c             	add    esp,0xc
c00204cc:	eb 53                	jmp    c0020521 <Vm::x87Handler(regs*)+0xa17>
c00204ce:	31 c0                	xor    eax,eax
c00204d0:	80 fa 02             	cmp    dl,0x2
c00204d3:	0f 85 92 00 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c00204d9:	83 ec 0c             	sub    esp,0xc
c00204dc:	6a 00                	push   0x0
c00204de:	e8 ea f4 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c00204e3:	59                   	pop    ecx
c00204e4:	5f                   	pop    edi
c00204e5:	52                   	push   edx
c00204e6:	50                   	push   eax
c00204e7:	e8 27 f2 ff ff       	call   c001f713 <Vm::fpuInternalTo64(unsigned long long)>
c00204ec:	eb 70                	jmp    c002055e <Vm::x87Handler(regs*)+0xa54>
c00204ee:	31 c0                	xor    eax,eax
c00204f0:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204f5:	75 74                	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c00204f7:	50                   	push   eax
c00204f8:	50                   	push   eax
c00204f9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204fc:	31 d2                	xor    edx,edx
c00204fe:	52                   	push   edx
c00204ff:	50                   	push   eax
c0020500:	e8 f6 f2 ff ff       	call   c001f7fb <Vm::fpuLongToFloat(long long)>
c0020505:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002050c:	89 c6                	mov    esi,eax
c002050e:	89 d7                	mov    edi,edx
c0020510:	e8 b8 f4 ff ff       	call   c001f9cd <Vm::fpuGetReg(int)>
c0020515:	57                   	push   edi
c0020516:	56                   	push   esi
c0020517:	52                   	push   edx
c0020518:	50                   	push   eax
c0020519:	e8 5e f4 ff ff       	call   c001f97c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002051e:	83 c4 1c             	add    esp,0x1c
c0020521:	52                   	push   edx
c0020522:	50                   	push   eax
c0020523:	6a 00                	push   0x0
c0020525:	e8 e6 f4 ff ff       	call   c001fa10 <Vm::fpuSetReg(int, unsigned long long)>
c002052a:	e9 f2 f7 ff ff       	jmp    c001fd21 <Vm::x87Handler(regs*)+0x217>
c002052f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020533:	80 fa 05             	cmp    dl,0x5
c0020536:	75 11                	jne    c0020549 <Vm::x87Handler(regs*)+0xa3f>
c0020538:	55                   	push   ebp
c0020539:	55                   	push   ebp
c002053a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002053d:	ff 36                	push   DWORD PTR [esi]
c002053f:	e8 81 f2 ff ff       	call   c001f7c5 <Vm::fpuULongToFloat(unsigned long long)>
c0020544:	e9 cf f7 ff ff       	jmp    c001fd18 <Vm::x87Handler(regs*)+0x20e>
c0020549:	31 c0                	xor    eax,eax
c002054b:	80 fa 07             	cmp    dl,0x7
c002054e:	75 1b                	jne    c002056b <Vm::x87Handler(regs*)+0xa61>
c0020550:	e8 63 f5 ff ff       	call   c001fab8 <Vm::fpuPop()>
c0020555:	51                   	push   ecx
c0020556:	51                   	push   ecx
c0020557:	52                   	push   edx
c0020558:	50                   	push   eax
c0020559:	e8 0c f2 ff ff       	call   c001f76a <Vm::fpuFloatToLong(unsigned long long)>
c002055e:	83 c4 10             	add    esp,0x10
c0020561:	89 06                	mov    DWORD PTR [esi],eax
c0020563:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020566:	e9 f8 f7 ff ff       	jmp    c001fd63 <Vm::x87Handler(regs*)+0x259>
c002056b:	83 c4 1c             	add    esp,0x1c
c002056e:	5b                   	pop    ebx
c002056f:	5e                   	pop    esi
c0020570:	5f                   	pop    edi
c0020571:	5d                   	pop    ebp
c0020572:	c3                   	ret    

c0020573 <__static_initialization_and_destruction_0(int, int)>:
c0020573:	83 ec 0c             	sub    esp,0xc
c0020576:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002057b:	75 1a                	jne    c0020597 <__static_initialization_and_destruction_0(int, int)+0x24>
c002057d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020585:	75 10                	jne    c0020597 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020587:	83 ec 0c             	sub    esp,0xc
c002058a:	68 00 1b 03 c0       	push   0xc0031b00
c002058f:	e8 0c 88 00 00       	call   c0028da0 <Vm::_FPUState::_FPUState()>
c0020594:	83 c4 10             	add    esp,0x10
c0020597:	90                   	nop
c0020598:	83 c4 0c             	add    esp,0xc
c002059b:	c3                   	ret    

c002059c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002059c:	83 ec 0c             	sub    esp,0xc
c002059f:	83 ec 08             	sub    esp,0x8
c00205a2:	68 ff ff 00 00       	push   0xffff
c00205a7:	6a 01                	push   0x1
c00205a9:	e8 c5 ff ff ff       	call   c0020573 <__static_initialization_and_destruction_0(int, int)>
c00205ae:	83 c4 10             	add    esp,0x10
c00205b1:	83 c4 0c             	add    esp,0xc
c00205b4:	c3                   	ret    
c00205b5:	90                   	nop

c00205b6 <FAT::getName()>:
c00205b6:	b8 14 c9 02 c0       	mov    eax,0xc002c914
c00205bb:	c3                   	ret    

c00205bc <FAT::tell(void*, unsigned long long*)>:
c00205bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205c1:	75 06                	jne    c00205c9 <FAT::tell(void*, unsigned long long*)+0xd>
c00205c3:	b8 04 00 00 00       	mov    eax,0x4
c00205c8:	c3                   	ret    
c00205c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ce:	75 06                	jne    c00205d6 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205d0:	b8 04 00 00 00       	mov    eax,0x4
c00205d5:	c3                   	ret    
c00205d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205da:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205dd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205e4:	89 01                	mov    DWORD PTR [ecx],eax
c00205e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205e9:	b8 00 00 00 00       	mov    eax,0x0
c00205ee:	c3                   	ret    
c00205ef:	90                   	nop

c00205f0 <FAT::stat(void*, unsigned long long*)>:
c00205f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205f5:	75 06                	jne    c00205fd <FAT::stat(void*, unsigned long long*)+0xd>
c00205f7:	b8 04 00 00 00       	mov    eax,0x4
c00205fc:	c3                   	ret    
c00205fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020602:	75 06                	jne    c002060a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020604:	b8 04 00 00 00       	mov    eax,0x4
c0020609:	c3                   	ret    
c002060a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002060e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020611:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020614:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020618:	89 01                	mov    DWORD PTR [ecx],eax
c002061a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002061d:	b8 00 00 00 00       	mov    eax,0x0
c0020622:	c3                   	ret    
c0020623:	90                   	nop

c0020624 <FAT::~FAT()>:
c0020624:	83 ec 0c             	sub    esp,0xc
c0020627:	ba 98 c9 02 c0       	mov    edx,0xc002c998
c002062c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020630:	89 10                	mov    DWORD PTR [eax],edx
c0020632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020636:	83 ec 0c             	sub    esp,0xc
c0020639:	50                   	push   eax
c002063a:	e8 d3 2c ff ff       	call   c0013312 <Filesystem::~Filesystem()>
c002063f:	83 c4 10             	add    esp,0x10
c0020642:	90                   	nop
c0020643:	83 c4 0c             	add    esp,0xc
c0020646:	c3                   	ret    
c0020647:	90                   	nop

c0020648 <FAT::~FAT()>:
c0020648:	83 ec 0c             	sub    esp,0xc
c002064b:	83 ec 0c             	sub    esp,0xc
c002064e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020652:	e8 cd ff ff ff       	call   c0020624 <FAT::~FAT()>
c0020657:	83 c4 10             	add    esp,0x10
c002065a:	83 ec 08             	sub    esp,0x8
c002065d:	6a 08                	push   0x8
c002065f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020663:	e8 a2 28 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0020668:	83 c4 10             	add    esp,0x10
c002066b:	83 c4 0c             	add    esp,0xc
c002066e:	c3                   	ret    
c002066f:	90                   	nop

c0020670 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020670:	83 ec 1c             	sub    esp,0x1c
c0020673:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002067a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002067f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020683:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c002068a:	83 f8 ff             	cmp    eax,0xffffffff
c002068d:	75 34                	jne    c00206c3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002068f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020693:	88 c2                	mov    dl,al
c0020695:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c002069a:	01 d0                	add    eax,edx
c002069c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206a0:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c00206a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206aa:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c00206b1:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00206b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206ba:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00206c1:	eb 17                	jmp    c00206da <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206c7:	88 c2                	mov    dl,al
c00206c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206cd:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00206d4:	01 d0                	add    eax,edx
c00206d6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206da:	83 ec 04             	sub    esp,0x4
c00206dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206e5:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206e9:	50                   	push   eax
c00206ea:	e8 49 66 fe ff       	call   c0006d38 <f_getlabel>
c00206ef:	83 c4 10             	add    esp,0x10
c00206f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206fb:	75 07                	jne    c0020704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206fd:	b8 00 00 00 00       	mov    eax,0x0
c0020702:	eb 05                	jmp    c0020709 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020704:	b8 01 00 00 00       	mov    eax,0x1
c0020709:	83 c4 1c             	add    esp,0x1c
c002070c:	c3                   	ret    
c002070d:	90                   	nop

c002070e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002070e:	57                   	push   edi
c002070f:	83 ec 58             	sub    esp,0x58
c0020712:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002071a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002071e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020723:	b8 00 00 00 00       	mov    eax,0x0
c0020728:	fc                   	cld    
c0020729:	89 d7                	mov    edi,edx
c002072b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002072d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020731:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020738:	83 f8 ff             	cmp    eax,0xffffffff
c002073b:	75 34                	jne    c0020771 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002073d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020741:	88 c2                	mov    dl,al
c0020743:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020748:	01 d0                	add    eax,edx
c002074a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002074e:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c0020754:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020758:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c002075f:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020764:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020768:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002076f:	eb 17                	jmp    c0020788 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020771:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020775:	88 c2                	mov    dl,al
c0020777:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002077b:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020782:	01 d0                	add    eax,edx
c0020784:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020788:	83 ec 08             	sub    esp,0x8
c002078b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002078f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020793:	50                   	push   eax
c0020794:	e8 db 01 fe ff       	call   c0000974 <strcat>
c0020799:	83 c4 10             	add    esp,0x10
c002079c:	83 ec 0c             	sub    esp,0xc
c002079f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207a3:	50                   	push   eax
c00207a4:	e8 7d 67 fe ff       	call   c0006f26 <f_setlabel>
c00207a9:	83 c4 10             	add    esp,0x10
c00207ac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207b0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207b5:	75 07                	jne    c00207be <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207b7:	b8 00 00 00 00       	mov    eax,0x0
c00207bc:	eb 05                	jmp    c00207c3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207be:	b8 01 00 00 00       	mov    eax,0x1
c00207c3:	83 c4 58             	add    esp,0x58
c00207c6:	5f                   	pop    edi
c00207c7:	c3                   	ret    

c00207c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207c8:	83 ec 2c             	sub    esp,0x2c
c00207cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207d3:	83 ec 08             	sub    esp,0x8
c00207d6:	68 38 c9 02 c0       	push   0xc002c938
c00207db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207df:	e8 dc 00 fe ff       	call   c00008c0 <strcmp>
c00207e4:	83 c4 10             	add    esp,0x10
c00207e7:	85 c0                	test   eax,eax
c00207e9:	0f 94 c0             	sete   al
c00207ec:	84 c0                	test   al,al
c00207ee:	74 0d                	je     c00207fd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207f8:	e9 a6 00 00 00       	jmp    c00208a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207fd:	83 ec 08             	sub    esp,0x8
c0020800:	68 2a c9 02 c0       	push   0xc002c92a
c0020805:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020809:	e8 b2 00 fe ff       	call   c00008c0 <strcmp>
c002080e:	83 c4 10             	add    esp,0x10
c0020811:	85 c0                	test   eax,eax
c0020813:	0f 94 c0             	sete   al
c0020816:	84 c0                	test   al,al
c0020818:	74 0a                	je     c0020824 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002081a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020822:	eb 7f                	jmp    c00208a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020824:	83 ec 08             	sub    esp,0x8
c0020827:	68 30 c9 02 c0       	push   0xc002c930
c002082c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020830:	e8 8b 00 fe ff       	call   c00008c0 <strcmp>
c0020835:	83 c4 10             	add    esp,0x10
c0020838:	85 c0                	test   eax,eax
c002083a:	0f 94 c0             	sete   al
c002083d:	84 c0                	test   al,al
c002083f:	74 0a                	je     c002084b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020841:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020849:	eb 58                	jmp    c00208a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002084b:	83 ec 08             	sub    esp,0x8
c002084e:	68 0c 95 02 c0       	push   0xc002950c
c0020853:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020857:	e8 64 00 fe ff       	call   c00008c0 <strcmp>
c002085c:	83 c4 10             	add    esp,0x10
c002085f:	85 c0                	test   eax,eax
c0020861:	0f 94 c0             	sete   al
c0020864:	84 c0                	test   al,al
c0020866:	74 0a                	je     c0020872 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020868:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020870:	eb 31                	jmp    c00208a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020872:	83 ec 08             	sub    esp,0x8
c0020875:	68 36 c9 02 c0       	push   0xc002c936
c002087a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002087e:	e8 3d 00 fe ff       	call   c00008c0 <strcmp>
c0020883:	83 c4 10             	add    esp,0x10
c0020886:	85 c0                	test   eax,eax
c0020888:	0f 94 c0             	sete   al
c002088b:	84 c0                	test   al,al
c002088d:	74 0a                	je     c0020899 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002088f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020897:	eb 0a                	jmp    c00208a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020899:	b8 08 00 00 00       	mov    eax,0x8
c002089e:	e9 04 01 00 00       	jmp    c00209a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208a3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208aa:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208b3:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00208ba:	83 f8 ff             	cmp    eax,0xffffffff
c00208bd:	75 34                	jne    c00208f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208bf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208c3:	88 c2                	mov    dl,al
c00208c5:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00208ca:	01 d0                	add    eax,edx
c00208cc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208d0:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c00208d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208da:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c00208e1:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00208e6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208ea:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00208f1:	eb 17                	jmp    c002090a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208f3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208f7:	88 c2                	mov    dl,al
c00208f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208fd:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020904:	01 d0                	add    eax,edx
c0020906:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002090a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002090e:	88 04 24             	mov    BYTE PTR [esp],al
c0020911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020915:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020919:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020921:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020926:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002092e:	83 ec 0c             	sub    esp,0xc
c0020931:	68 00 20 00 00       	push   0x2000
c0020936:	e8 05 ef fe ff       	call   c000f840 <malloc>
c002093b:	83 c4 10             	add    esp,0x10
c002093e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020942:	68 00 20 00 00       	push   0x2000
c0020947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002094b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002094f:	50                   	push   eax
c0020950:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020954:	50                   	push   eax
c0020955:	e8 17 6a fe ff       	call   c0007371 <f_mkfs>
c002095a:	83 c4 10             	add    esp,0x10
c002095d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020961:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020966:	75 07                	jne    c002096f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020968:	b8 00 00 00 00       	mov    eax,0x0
c002096d:	eb 38                	jmp    c00209a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002096f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020974:	75 17                	jne    c002098d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020976:	83 ec 0c             	sub    esp,0xc
c0020979:	68 68 c9 02 c0       	push   0xc002c968
c002097e:	e8 67 26 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	b8 09 00 00 00       	mov    eax,0x9
c002098b:	eb 1a                	jmp    c00209a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002098d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020991:	83 ec 08             	sub    esp,0x8
c0020994:	50                   	push   eax
c0020995:	68 3c c9 02 c0       	push   0xc002c93c
c002099a:	e8 4b 26 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	b8 01 00 00 00       	mov    eax,0x1
c00209a7:	83 c4 2c             	add    esp,0x2c
c00209aa:	c3                   	ret    
c00209ab:	90                   	nop

c00209ac <FAT::tryMount(LogicalDisk*, int)>:
c00209ac:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209b2:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00209b7:	83 f8 14             	cmp    eax,0x14
c00209ba:	75 17                	jne    c00209d3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209bc:	83 ec 0c             	sub    esp,0xc
c00209bf:	68 4e c9 02 c0       	push   0xc002c94e
c00209c4:	e8 d2 9c ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00209c9:	83 c4 10             	add    esp,0x10
c00209cc:	b0 00                	mov    al,0x0
c00209ce:	e9 d7 01 00 00       	jmp    c0020baa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209d3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209da:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209e6:	3d 00 02 00 00       	cmp    eax,0x200
c00209eb:	74 07                	je     c00209f4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209ed:	b0 00                	mov    al,0x0
c00209ef:	e9 b6 01 00 00       	jmp    c0020baa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209fc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a03:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020a0a:	83 f8 ff             	cmp    eax,0xffffffff
c0020a0d:	74 07                	je     c0020a16 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a0f:	b0 01                	mov    al,0x1
c0020a11:	e9 94 01 00 00       	jmp    c0020baa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a16:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a20:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a28:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a2f:	88 c2                	mov    dl,al
c0020a31:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020a36:	01 d0                	add    eax,edx
c0020a38:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a3f:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c0020a45:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a4c:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0020a53:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020a58:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a5f:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c0020a66:	83 ec 0c             	sub    esp,0xc
c0020a69:	68 54 02 00 00       	push   0x254
c0020a6e:	e8 cd ed fe ff       	call   c000f840 <malloc>
c0020a73:	83 c4 10             	add    esp,0x10
c0020a76:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a7d:	83 ec 04             	sub    esp,0x4
c0020a80:	6a 00                	push   0x0
c0020a82:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a89:	50                   	push   eax
c0020a8a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a91:	e8 99 44 fe ff       	call   c0004f2f <f_mount>
c0020a96:	83 c4 10             	add    esp,0x10
c0020a99:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020aa0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020aa8:	74 19                	je     c0020ac3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020aaa:	83 ec 0c             	sub    esp,0xc
c0020aad:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ab4:	e8 a7 ed fe ff       	call   c000f860 <rfree>
c0020ab9:	83 c4 10             	add    esp,0x10
c0020abc:	b0 00                	mov    al,0x0
c0020abe:	e9 e7 00 00 00       	jmp    c0020baa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ac3:	83 ec 04             	sub    esp,0x4
c0020ac6:	68 00 01 00 00       	push   0x100
c0020acb:	6a 00                	push   0x0
c0020acd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ad4:	50                   	push   eax
c0020ad5:	e8 9e fc fd ff       	call   c0000778 <memset>
c0020ada:	83 c4 10             	add    esp,0x10
c0020add:	83 ec 08             	sub    esp,0x8
c0020ae0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ae7:	50                   	push   eax
c0020ae8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aef:	50                   	push   eax
c0020af0:	e8 7f fe fd ff       	call   c0000974 <strcat>
c0020af5:	83 c4 10             	add    esp,0x10
c0020af8:	83 ec 08             	sub    esp,0x8
c0020afb:	68 5c c9 02 c0       	push   0xc002c95c
c0020b00:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b07:	50                   	push   eax
c0020b08:	e8 67 fe fd ff       	call   c0000974 <strcat>
c0020b0d:	83 c4 10             	add    esp,0x10
c0020b10:	83 ec 04             	sub    esp,0x4
c0020b13:	6a 01                	push   0x1
c0020b15:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b1c:	50                   	push   eax
c0020b1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b21:	50                   	push   eax
c0020b22:	e8 6a 44 fe ff       	call   c0004f91 <f_open>
c0020b27:	83 c4 10             	add    esp,0x10
c0020b2a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b31:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b38:	85 c0                	test   eax,eax
c0020b3a:	74 0a                	je     c0020b46 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b3c:	78 2d                	js     c0020b6b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b3e:	83 e8 04             	sub    eax,0x4
c0020b41:	83 f8 01             	cmp    eax,0x1
c0020b44:	77 25                	ja     c0020b6b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b46:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b4e:	83 ec 0c             	sub    esp,0xc
c0020b51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b55:	50                   	push   eax
c0020b56:	e8 88 4f fe ff       	call   c0005ae3 <f_close>
c0020b5b:	83 c4 10             	add    esp,0x10
c0020b5e:	90                   	nop
c0020b5f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b67:	74 3a                	je     c0020ba3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b69:	eb 2d                	jmp    c0020b98 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b6b:	83 ec 0c             	sub    esp,0xc
c0020b6e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b75:	e8 e6 ec fe ff       	call   c000f860 <rfree>
c0020b7a:	83 c4 10             	add    esp,0x10
c0020b7d:	83 ec 04             	sub    esp,0x4
c0020b80:	6a 00                	push   0x0
c0020b82:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b89:	50                   	push   eax
c0020b8a:	6a 00                	push   0x0
c0020b8c:	e8 9e 43 fe ff       	call   c0004f2f <f_mount>
c0020b91:	83 c4 10             	add    esp,0x10
c0020b94:	b0 00                	mov    al,0x0
c0020b96:	eb 12                	jmp    c0020baa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b98:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020b9d:	40                   	inc    eax
c0020b9e:	a3 60 1b 03 c0       	mov    ds:0xc0031b60,eax
c0020ba3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020baa:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bb0:	c3                   	ret    
c0020bb1:	90                   	nop

c0020bb2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bb2:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bb8:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020bc0:	74 0a                	je     c0020bcc <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020bc2:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020bca:	75 0a                	jne    c0020bd6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020bcc:	b8 04 00 00 00       	mov    eax,0x4
c0020bd1:	e9 db 00 00 00       	jmp    c0020cb1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bd6:	83 ec 08             	sub    esp,0x8
c0020bd9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020be0:	50                   	push   eax
c0020be1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020be8:	e8 00 55 fe ff       	call   c00060ed <f_readdir>
c0020bed:	83 c4 10             	add    esp,0x10
c0020bf0:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020bf7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020bfd:	83 ec 0c             	sub    esp,0xc
c0020c00:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c07:	83 c0 1a             	add    eax,0x1a
c0020c0a:	50                   	push   eax
c0020c0b:	e8 84 fb fd ff       	call   c0000794 <strlen>
c0020c10:	83 c4 10             	add    esp,0x10
c0020c13:	ba 00 00 00 00       	mov    edx,0x0
c0020c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c1c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c20:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c27:	0f b6 c0             	movzx  eax,al
c0020c2a:	83 e0 10             	and    eax,0x10
c0020c2d:	74 07                	je     c0020c36 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c2f:	b8 02 00 00 00       	mov    eax,0x2
c0020c34:	eb 05                	jmp    c0020c3b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c36:	b8 01 00 00 00       	mov    eax,0x1
c0020c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c3f:	83 ec 08             	sub    esp,0x8
c0020c42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c49:	83 c0 1a             	add    eax,0x1a
c0020c4c:	50                   	push   eax
c0020c4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c51:	83 c0 10             	add    eax,0x10
c0020c54:	50                   	push   eax
c0020c55:	e8 da fb fd ff       	call   c0000834 <strcpy>
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	83 ec 04             	sub    esp,0x4
c0020c60:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c67:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c6b:	50                   	push   eax
c0020c6c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c73:	e8 cc fa fd ff       	call   c0000744 <memcpy>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c82:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c88:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c8f:	84 c0                	test   al,al
c0020c91:	75 07                	jne    c0020c9a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c93:	b8 07 00 00 00       	mov    eax,0x7
c0020c98:	eb 17                	jmp    c0020cb1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c9a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ca1:	85 c0                	test   eax,eax
c0020ca3:	75 07                	jne    c0020cac <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020ca5:	b8 00 00 00 00       	mov    eax,0x0
c0020caa:	eb 05                	jmp    c0020cb1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cac:	b8 01 00 00 00       	mov    eax,0x1
c0020cb1:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cb7:	c3                   	ret    

c0020cb8 <FAT::read(void*, unsigned long, void*, int*)>:
c0020cb8:	83 ec 1c             	sub    esp,0x1c
c0020cbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc0:	74 07                	je     c0020cc9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020cc2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cc7:	75 07                	jne    c0020cd0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020cc9:	b8 04 00 00 00       	mov    eax,0x4
c0020cce:	eb 3d                	jmp    c0020d0d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cd0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd4:	50                   	push   eax
c0020cd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cdd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce1:	e8 e7 46 fe ff       	call   c00053cd <f_read>
c0020ce6:	83 c4 10             	add    esp,0x10
c0020ce9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ced:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cf1:	89 c2                	mov    edx,eax
c0020cf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cf7:	89 10                	mov    DWORD PTR [eax],edx
c0020cf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cfd:	85 c0                	test   eax,eax
c0020cff:	75 07                	jne    c0020d08 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d01:	b8 00 00 00 00       	mov    eax,0x0
c0020d06:	eb 05                	jmp    c0020d0d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d08:	b8 01 00 00 00       	mov    eax,0x1
c0020d0d:	83 c4 1c             	add    esp,0x1c
c0020d10:	c3                   	ret    
c0020d11:	90                   	nop

c0020d12 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d12:	83 ec 1c             	sub    esp,0x1c
c0020d15:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d1a:	74 07                	je     c0020d23 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d1c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d21:	75 07                	jne    c0020d2a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d23:	b8 04 00 00 00       	mov    eax,0x4
c0020d28:	eb 3d                	jmp    c0020d67 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d2e:	50                   	push   eax
c0020d2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d3b:	e8 0d 49 fe ff       	call   c000564d <f_write>
c0020d40:	83 c4 10             	add    esp,0x10
c0020d43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d4b:	89 c2                	mov    edx,eax
c0020d4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d51:	89 10                	mov    DWORD PTR [eax],edx
c0020d53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d57:	85 c0                	test   eax,eax
c0020d59:	75 07                	jne    c0020d62 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d5b:	b8 00 00 00 00       	mov    eax,0x0
c0020d60:	eb 05                	jmp    c0020d67 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d62:	b8 01 00 00 00       	mov    eax,0x1
c0020d67:	83 c4 1c             	add    esp,0x1c
c0020d6a:	c3                   	ret    
c0020d6b:	90                   	nop

c0020d6c <FAT::close(void*)>:
c0020d6c:	83 ec 1c             	sub    esp,0x1c
c0020d6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d74:	75 07                	jne    c0020d7d <FAT::close(void*)+0x11>
c0020d76:	b8 04 00 00 00       	mov    eax,0x4
c0020d7b:	eb 36                	jmp    c0020db3 <FAT::close(void*)+0x47>
c0020d7d:	83 ec 0c             	sub    esp,0xc
c0020d80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d84:	e8 5a 4d fe ff       	call   c0005ae3 <f_close>
c0020d89:	83 c4 10             	add    esp,0x10
c0020d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d90:	83 ec 0c             	sub    esp,0xc
c0020d93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d97:	e8 b4 ea fe ff       	call   c000f850 <free>
c0020d9c:	83 c4 10             	add    esp,0x10
c0020d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020da3:	85 c0                	test   eax,eax
c0020da5:	75 07                	jne    c0020dae <FAT::close(void*)+0x42>
c0020da7:	b8 00 00 00 00       	mov    eax,0x0
c0020dac:	eb 05                	jmp    c0020db3 <FAT::close(void*)+0x47>
c0020dae:	b8 01 00 00 00       	mov    eax,0x1
c0020db3:	83 c4 1c             	add    esp,0x1c
c0020db6:	c3                   	ret    
c0020db7:	90                   	nop

c0020db8 <FAT::closeDir(void*)>:
c0020db8:	83 ec 1c             	sub    esp,0x1c
c0020dbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dc0:	75 07                	jne    c0020dc9 <FAT::closeDir(void*)+0x11>
c0020dc2:	b8 04 00 00 00       	mov    eax,0x4
c0020dc7:	eb 36                	jmp    c0020dff <FAT::closeDir(void*)+0x47>
c0020dc9:	83 ec 0c             	sub    esp,0xc
c0020dcc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dd0:	e8 f6 52 fe ff       	call   c00060cb <f_closedir>
c0020dd5:	83 c4 10             	add    esp,0x10
c0020dd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de3:	e8 68 ea fe ff       	call   c000f850 <free>
c0020de8:	83 c4 10             	add    esp,0x10
c0020deb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020def:	85 c0                	test   eax,eax
c0020df1:	75 07                	jne    c0020dfa <FAT::closeDir(void*)+0x42>
c0020df3:	b8 00 00 00 00       	mov    eax,0x0
c0020df8:	eb 05                	jmp    c0020dff <FAT::closeDir(void*)+0x47>
c0020dfa:	b8 01 00 00 00       	mov    eax,0x1
c0020dff:	83 c4 1c             	add    esp,0x1c
c0020e02:	c3                   	ret    
c0020e03:	90                   	nop

c0020e04 <FAT::seek(void*, unsigned long long)>:
c0020e04:	83 ec 2c             	sub    esp,0x2c
c0020e07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e17:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e1c:	75 07                	jne    c0020e25 <FAT::seek(void*, unsigned long long)+0x21>
c0020e1e:	b8 04 00 00 00       	mov    eax,0x4
c0020e23:	eb 2f                	jmp    c0020e54 <FAT::seek(void*, unsigned long long)+0x50>
c0020e25:	83 ec 04             	sub    esp,0x4
c0020e28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e30:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e34:	e8 d9 4c fe ff       	call   c0005b12 <f_lseek>
c0020e39:	83 c4 10             	add    esp,0x10
c0020e3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e44:	85 c0                	test   eax,eax
c0020e46:	75 07                	jne    c0020e4f <FAT::seek(void*, unsigned long long)+0x4b>
c0020e48:	b8 00 00 00 00       	mov    eax,0x0
c0020e4d:	eb 05                	jmp    c0020e54 <FAT::seek(void*, unsigned long long)+0x50>
c0020e4f:	b8 01 00 00 00       	mov    eax,0x1
c0020e54:	83 c4 2c             	add    esp,0x2c
c0020e57:	c3                   	ret    

c0020e58 <fatWrapperReadDisk>:
c0020e58:	83 ec 1c             	sub    esp,0x1c
c0020e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e5f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e72:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e77:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020e7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e82:	83 ec 0c             	sub    esp,0xc
c0020e85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e89:	52                   	push   edx
c0020e8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e92:	50                   	push   eax
c0020e93:	e8 72 59 ff ff       	call   c001680a <LogicalDisk::read(unsigned long long, int, void*)>
c0020e98:	83 c4 20             	add    esp,0x20
c0020e9b:	83 c4 1c             	add    esp,0x1c
c0020e9e:	c3                   	ret    

c0020e9f <fatWrapperWriteDisk>:
c0020e9f:	83 ec 1c             	sub    esp,0x1c
c0020ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ea6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020eaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eae:	89 04 24             	mov    DWORD PTR [esp],eax
c0020eb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020eb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020eb9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ebe:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020ec5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ec9:	83 ec 0c             	sub    esp,0xc
c0020ecc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ed0:	52                   	push   edx
c0020ed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ed5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ed9:	50                   	push   eax
c0020eda:	e8 97 59 ff ff       	call   c0016876 <LogicalDisk::write(unsigned long long, int, void*)>
c0020edf:	83 c4 20             	add    esp,0x20
c0020ee2:	83 c4 1c             	add    esp,0x1c
c0020ee5:	c3                   	ret    

c0020ee6 <fatWrapperIoctl>:
c0020ee6:	53                   	push   ebx
c0020ee7:	83 ec 28             	sub    esp,0x28
c0020eea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020eee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ef2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ef6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020efa:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020eff:	75 31                	jne    c0020f32 <fatWrapperIoctl+0x4c>
c0020f01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f09:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f0e:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f15:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f1b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f25:	66 89 02             	mov    WORD PTR [edx],ax
c0020f28:	b8 00 00 00 00       	mov    eax,0x0
c0020f2d:	e9 b2 00 00 00       	jmp    c0020fe4 <fatWrapperIoctl+0xfe>
c0020f32:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f37:	75 6a                	jne    c0020fa3 <fatWrapperIoctl+0xbd>
c0020f39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f41:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f46:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f4d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f53:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f59:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f5f:	89 c8                	mov    eax,ecx
c0020f61:	89 da                	mov    edx,ebx
c0020f63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f67:	c1 e0 0a             	shl    eax,0xa
c0020f6a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f6f:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0020f76:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f7c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f82:	89 cb                	mov    ebx,ecx
c0020f84:	c1 fb 1f             	sar    ebx,0x1f
c0020f87:	53                   	push   ebx
c0020f88:	51                   	push   ecx
c0020f89:	52                   	push   edx
c0020f8a:	50                   	push   eax
c0020f8b:	e8 bc 5a 00 00       	call   c0026a4c <__udivdi3>
c0020f90:	83 c4 10             	add    esp,0x10
c0020f93:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f97:	89 01                	mov    DWORD PTR [ecx],eax
c0020f99:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f9c:	b8 00 00 00 00       	mov    eax,0x0
c0020fa1:	eb 41                	jmp    c0020fe4 <fatWrapperIoctl+0xfe>
c0020fa3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fa8:	75 07                	jne    c0020fb1 <fatWrapperIoctl+0xcb>
c0020faa:	b8 00 00 00 00       	mov    eax,0x0
c0020faf:	eb 33                	jmp    c0020fe4 <fatWrapperIoctl+0xfe>
c0020fb1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020fb6:	75 19                	jne    c0020fd1 <fatWrapperIoctl+0xeb>
c0020fb8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fc4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fca:	b8 00 00 00 00       	mov    eax,0x0
c0020fcf:	eb 13                	jmp    c0020fe4 <fatWrapperIoctl+0xfe>
c0020fd1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020fd6:	75 07                	jne    c0020fdf <fatWrapperIoctl+0xf9>
c0020fd8:	b8 00 00 00 00       	mov    eax,0x0
c0020fdd:	eb 05                	jmp    c0020fe4 <fatWrapperIoctl+0xfe>
c0020fdf:	b8 04 00 00 00       	mov    eax,0x4
c0020fe4:	83 c4 28             	add    esp,0x28
c0020fe7:	5b                   	pop    ebx
c0020fe8:	c3                   	ret    
c0020fe9:	90                   	nop

c0020fea <FAT::FAT()>:
c0020fea:	83 ec 1c             	sub    esp,0x1c
c0020fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ff1:	83 ec 0c             	sub    esp,0xc
c0020ff4:	50                   	push   eax
c0020ff5:	e8 f4 22 ff ff       	call   c00132ee <Filesystem::Filesystem()>
c0020ffa:	83 c4 10             	add    esp,0x10
c0020ffd:	ba 98 c9 02 c0       	mov    edx,0xc002c998
c0021002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021006:	89 10                	mov    DWORD PTR [eax],edx
c0021008:	c7 05 60 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b60,0x0
c0021012:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002101a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002101f:	7f 15                	jg     c0021036 <FAT::FAT()+0x4c>
c0021021:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021025:	c7 04 85 80 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce480],0xffffffff
c0021030:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021034:	eb e4                	jmp    c002101a <FAT::FAT()+0x30>
c0021036:	90                   	nop
c0021037:	83 c4 1c             	add    esp,0x1c
c002103a:	c3                   	ret    
c002103b:	90                   	nop

c002103c <FAT::fixFilepath(char*)>:
c002103c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021040:	8a 00                	mov    al,BYTE PTR [eax]
c0021042:	3c 40                	cmp    al,0x40
c0021044:	7e 2c                	jle    c0021072 <FAT::fixFilepath(char*)+0x36>
c0021046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002104a:	8a 00                	mov    al,BYTE PTR [eax]
c002104c:	83 e8 41             	sub    eax,0x41
c002104f:	88 c2                	mov    dl,al
c0021051:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021055:	88 10                	mov    BYTE PTR [eax],dl
c0021057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002105b:	8a 00                	mov    al,BYTE PTR [eax]
c002105d:	0f be c0             	movsx  eax,al
c0021060:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0021067:	83 c0 30             	add    eax,0x30
c002106a:	88 c2                	mov    dl,al
c002106c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021070:	88 10                	mov    BYTE PTR [eax],dl
c0021072:	90                   	nop
c0021073:	c3                   	ret    

c0021074 <FAT::open(char const*, void**, FileOpenMode)>:
c0021074:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002107a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021082:	74 0a                	je     c002108e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021084:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002108c:	75 0a                	jne    c0021098 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002108e:	b8 04 00 00 00       	mov    eax,0x4
c0021093:	e9 fd 00 00 00       	jmp    c0021195 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021098:	83 ec 08             	sub    esp,0x8
c002109b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210a6:	50                   	push   eax
c00210a7:	e8 88 f7 fd ff       	call   c0000834 <strcpy>
c00210ac:	83 c4 10             	add    esp,0x10
c00210af:	83 ec 08             	sub    esp,0x8
c00210b2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210b6:	50                   	push   eax
c00210b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210be:	e8 79 ff ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210ce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210d5:	83 e0 01             	and    eax,0x1
c00210d8:	74 08                	je     c00210e2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210da:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210e9:	83 e0 04             	and    eax,0x4
c00210ec:	74 10                	je     c00210fe <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210ee:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210f6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021105:	83 e0 02             	and    eax,0x2
c0021108:	74 08                	je     c0021112 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002110a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021112:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021119:	83 e0 08             	and    eax,0x8
c002111c:	74 08                	je     c0021126 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002111e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021126:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002112d:	83 e0 10             	and    eax,0x10
c0021130:	74 08                	je     c002113a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021132:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002113a:	83 ec 0c             	sub    esp,0xc
c002113d:	68 50 02 00 00       	push   0x250
c0021142:	e8 f9 e6 fe ff       	call   c000f840 <malloc>
c0021147:	83 c4 10             	add    esp,0x10
c002114a:	89 c2                	mov    edx,eax
c002114c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021153:	89 10                	mov    DWORD PTR [eax],edx
c0021155:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002115d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021164:	8b 00                	mov    eax,DWORD PTR [eax]
c0021166:	83 ec 04             	sub    esp,0x4
c0021169:	52                   	push   edx
c002116a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002116e:	52                   	push   edx
c002116f:	50                   	push   eax
c0021170:	e8 1c 3e fe ff       	call   c0004f91 <f_open>
c0021175:	83 c4 10             	add    esp,0x10
c0021178:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002117f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021187:	74 07                	je     c0021190 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021189:	b8 01 00 00 00       	mov    eax,0x1
c002118e:	eb 05                	jmp    c0021195 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021190:	b8 00 00 00 00       	mov    eax,0x0
c0021195:	81 c4 1c 01 00 00    	add    esp,0x11c
c002119b:	c3                   	ret    

c002119c <FAT::openDir(char const*, void**)>:
c002119c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211aa:	74 0a                	je     c00211b6 <FAT::openDir(char const*, void**)+0x1a>
c00211ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211b4:	75 07                	jne    c00211bd <FAT::openDir(char const*, void**)+0x21>
c00211b6:	b8 04 00 00 00       	mov    eax,0x4
c00211bb:	eb 7d                	jmp    c002123a <FAT::openDir(char const*, void**)+0x9e>
c00211bd:	83 ec 08             	sub    esp,0x8
c00211c0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211cb:	50                   	push   eax
c00211cc:	e8 63 f6 fd ff       	call   c0000834 <strcpy>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	83 ec 08             	sub    esp,0x8
c00211d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211db:	50                   	push   eax
c00211dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211e3:	e8 54 fe ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c00211e8:	83 c4 10             	add    esp,0x10
c00211eb:	83 ec 0c             	sub    esp,0xc
c00211ee:	6a 4c                	push   0x4c
c00211f0:	e8 4b e6 fe ff       	call   c000f840 <malloc>
c00211f5:	83 c4 10             	add    esp,0x10
c00211f8:	89 c2                	mov    edx,eax
c00211fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021201:	89 10                	mov    DWORD PTR [eax],edx
c0021203:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002120a:	8b 00                	mov    eax,DWORD PTR [eax]
c002120c:	83 ec 08             	sub    esp,0x8
c002120f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021213:	52                   	push   edx
c0021214:	50                   	push   eax
c0021215:	e8 af 4d fe ff       	call   c0005fc9 <f_opendir>
c002121a:	83 c4 10             	add    esp,0x10
c002121d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021224:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002122c:	74 07                	je     c0021235 <FAT::openDir(char const*, void**)+0x99>
c002122e:	b8 01 00 00 00       	mov    eax,0x1
c0021233:	eb 05                	jmp    c002123a <FAT::openDir(char const*, void**)+0x9e>
c0021235:	b8 00 00 00 00       	mov    eax,0x0
c002123a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021240:	c3                   	ret    
c0021241:	90                   	nop

c0021242 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021242:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021248:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021250:	75 0a                	jne    c002125c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021252:	b8 04 00 00 00       	mov    eax,0x4
c0021257:	e9 c9 00 00 00       	jmp    c0021325 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002125c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021264:	75 0a                	jne    c0021270 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021266:	b8 04 00 00 00       	mov    eax,0x4
c002126b:	e9 b5 00 00 00       	jmp    c0021325 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021270:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021278:	75 0a                	jne    c0021284 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002127a:	b8 04 00 00 00       	mov    eax,0x4
c002127f:	e9 a1 00 00 00       	jmp    c0021325 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021284:	83 ec 08             	sub    esp,0x8
c0021287:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002128e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021295:	50                   	push   eax
c0021296:	e8 99 f5 fd ff       	call   c0000834 <strcpy>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	83 ec 08             	sub    esp,0x8
c00212a1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212a8:	50                   	push   eax
c00212a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212b0:	e8 87 fd ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c00212b5:	83 c4 10             	add    esp,0x10
c00212b8:	83 ec 08             	sub    esp,0x8
c00212bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212bf:	50                   	push   eax
c00212c0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212c7:	50                   	push   eax
c00212c8:	e8 bb 4e fe ff       	call   c0006188 <f_stat>
c00212cd:	83 c4 10             	add    esp,0x10
c00212d0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212d7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212de:	85 c0                	test   eax,eax
c00212e0:	74 07                	je     c00212e9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212e2:	83 f8 04             	cmp    eax,0x4
c00212e5:	74 32                	je     c0021319 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212e7:	eb 37                	jmp    c0021320 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212e9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212ed:	0f b6 c0             	movzx  eax,al
c00212f0:	83 e0 10             	and    eax,0x10
c00212f3:	0f 95 c2             	setne  dl
c00212f6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212fd:	88 10                	mov    BYTE PTR [eax],dl
c00212ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021302:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021306:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002130d:	89 01                	mov    DWORD PTR [ecx],eax
c002130f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021312:	b8 00 00 00 00       	mov    eax,0x0
c0021317:	eb 0c                	jmp    c0021325 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021319:	b8 02 00 00 00       	mov    eax,0x2
c002131e:	eb 05                	jmp    c0021325 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021320:	b8 01 00 00 00       	mov    eax,0x1
c0021325:	81 c4 2c 02 00 00    	add    esp,0x22c
c002132b:	c3                   	ret    

c002132c <FAT::unlink(char const*)>:
c002132c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021332:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002133a:	75 07                	jne    c0021343 <FAT::unlink(char const*)+0x17>
c002133c:	b8 04 00 00 00       	mov    eax,0x4
c0021341:	eb 5c                	jmp    c002139f <FAT::unlink(char const*)+0x73>
c0021343:	83 ec 08             	sub    esp,0x8
c0021346:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002134d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021351:	50                   	push   eax
c0021352:	e8 dd f4 fd ff       	call   c0000834 <strcpy>
c0021357:	83 c4 10             	add    esp,0x10
c002135a:	83 ec 08             	sub    esp,0x8
c002135d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021361:	50                   	push   eax
c0021362:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021369:	e8 ce fc ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c002136e:	83 c4 10             	add    esp,0x10
c0021371:	83 ec 0c             	sub    esp,0xc
c0021374:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021378:	50                   	push   eax
c0021379:	e8 5c 51 fe ff       	call   c00064da <f_unlink>
c002137e:	83 c4 10             	add    esp,0x10
c0021381:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021388:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002138f:	85 c0                	test   eax,eax
c0021391:	75 07                	jne    c002139a <FAT::unlink(char const*)+0x6e>
c0021393:	b8 00 00 00 00       	mov    eax,0x0
c0021398:	eb 05                	jmp    c002139f <FAT::unlink(char const*)+0x73>
c002139a:	b8 01 00 00 00       	mov    eax,0x1
c002139f:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213a5:	c3                   	ret    

c00213a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213ac:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213b3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213ba:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213c2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213ca:	75 0a                	jne    c00213d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213cc:	b8 04 00 00 00       	mov    eax,0x4
c00213d1:	e9 1c 01 00 00       	jmp    c00214f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213d6:	83 ec 08             	sub    esp,0x8
c00213d9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213e4:	50                   	push   eax
c00213e5:	e8 4a f4 fd ff       	call   c0000834 <strcpy>
c00213ea:	83 c4 10             	add    esp,0x10
c00213ed:	83 ec 08             	sub    esp,0x8
c00213f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213f4:	50                   	push   eax
c00213f5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213fc:	e8 3b fc ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c0021401:	83 c4 10             	add    esp,0x10
c0021404:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002140c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021414:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021419:	83 e0 01             	and    eax,0x1
c002141c:	74 08                	je     c0021426 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002141e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021426:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002142b:	83 e0 02             	and    eax,0x2
c002142e:	74 08                	je     c0021438 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021430:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021438:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002143d:	83 e0 04             	and    eax,0x4
c0021440:	74 08                	je     c002144a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021442:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002144a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002144f:	83 e0 08             	and    eax,0x8
c0021452:	74 08                	je     c002145c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021454:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002145c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021461:	83 e0 01             	and    eax,0x1
c0021464:	74 08                	je     c002146e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021466:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002146e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021473:	83 e0 02             	and    eax,0x2
c0021476:	74 08                	je     c0021480 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021478:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021480:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021485:	83 e0 04             	and    eax,0x4
c0021488:	74 08                	je     c0021492 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002148a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021492:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021497:	83 e0 08             	and    eax,0x8
c002149a:	74 08                	je     c00214a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002149c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214a4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214ab:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214b2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214ba:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214c2:	83 ec 04             	sub    esp,0x4
c00214c5:	52                   	push   edx
c00214c6:	50                   	push   eax
c00214c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214cb:	50                   	push   eax
c00214cc:	e8 ab 56 fe ff       	call   c0006b7c <f_chmod>
c00214d1:	83 c4 10             	add    esp,0x10
c00214d4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214db:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214e2:	85 c0                	test   eax,eax
c00214e4:	75 07                	jne    c00214ed <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214e6:	b8 00 00 00 00       	mov    eax,0x0
c00214eb:	eb 05                	jmp    c00214f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214ed:	b8 01 00 00 00       	mov    eax,0x1
c00214f2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214f8:	c3                   	ret    
c00214f9:	90                   	nop

c00214fa <FAT::rename(char const*, char const*)>:
c00214fa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021500:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021508:	74 0a                	je     c0021514 <FAT::rename(char const*, char const*)+0x1a>
c002150a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021512:	75 0a                	jne    c002151e <FAT::rename(char const*, char const*)+0x24>
c0021514:	b8 04 00 00 00       	mov    eax,0x4
c0021519:	e9 98 00 00 00       	jmp    c00215b6 <FAT::rename(char const*, char const*)+0xbc>
c002151e:	83 ec 08             	sub    esp,0x8
c0021521:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021528:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002152f:	50                   	push   eax
c0021530:	e8 ff f2 fd ff       	call   c0000834 <strcpy>
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	83 ec 08             	sub    esp,0x8
c002153b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021542:	50                   	push   eax
c0021543:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002154a:	e8 ed fa ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c002154f:	83 c4 10             	add    esp,0x10
c0021552:	83 ec 08             	sub    esp,0x8
c0021555:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002155c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021560:	50                   	push   eax
c0021561:	e8 ce f2 fd ff       	call   c0000834 <strcpy>
c0021566:	83 c4 10             	add    esp,0x10
c0021569:	83 ec 08             	sub    esp,0x8
c002156c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021570:	50                   	push   eax
c0021571:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021578:	e8 bf fa ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c002157d:	83 c4 10             	add    esp,0x10
c0021580:	83 ec 08             	sub    esp,0x8
c0021583:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021587:	50                   	push   eax
c0021588:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002158f:	50                   	push   eax
c0021590:	e8 f4 52 fe ff       	call   c0006889 <f_rename>
c0021595:	83 c4 10             	add    esp,0x10
c0021598:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002159f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215a6:	85 c0                	test   eax,eax
c00215a8:	75 07                	jne    c00215b1 <FAT::rename(char const*, char const*)+0xb7>
c00215aa:	b8 00 00 00 00       	mov    eax,0x0
c00215af:	eb 05                	jmp    c00215b6 <FAT::rename(char const*, char const*)+0xbc>
c00215b1:	b8 01 00 00 00       	mov    eax,0x1
c00215b6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215bc:	c3                   	ret    
c00215bd:	90                   	nop

c00215be <FAT::mkdir(char const*)>:
c00215be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215cc:	75 07                	jne    c00215d5 <FAT::mkdir(char const*)+0x17>
c00215ce:	b8 04 00 00 00       	mov    eax,0x4
c00215d3:	eb 5c                	jmp    c0021631 <FAT::mkdir(char const*)+0x73>
c00215d5:	83 ec 08             	sub    esp,0x8
c00215d8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215e3:	50                   	push   eax
c00215e4:	e8 4b f2 fd ff       	call   c0000834 <strcpy>
c00215e9:	83 c4 10             	add    esp,0x10
c00215ec:	83 ec 08             	sub    esp,0x8
c00215ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215f3:	50                   	push   eax
c00215f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215fb:	e8 3c fa ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c0021600:	83 c4 10             	add    esp,0x10
c0021603:	83 ec 0c             	sub    esp,0xc
c0021606:	8d 44 24 18          	lea    eax,[esp+0x18]
c002160a:	50                   	push   eax
c002160b:	e8 4d 50 fe ff       	call   c000665d <f_mkdir>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002161a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021621:	85 c0                	test   eax,eax
c0021623:	75 07                	jne    c002162c <FAT::mkdir(char const*)+0x6e>
c0021625:	b8 00 00 00 00       	mov    eax,0x0
c002162a:	eb 05                	jmp    c0021631 <FAT::mkdir(char const*)+0x73>
c002162c:	b8 01 00 00 00       	mov    eax,0x1
c0021631:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021637:	c3                   	ret    

c0021638 <FAT::exists(char const*)>:
c0021638:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002163e:	83 ec 08             	sub    esp,0x8
c0021641:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021648:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002164c:	50                   	push   eax
c002164d:	e8 e2 f1 fd ff       	call   c0000834 <strcpy>
c0021652:	83 c4 10             	add    esp,0x10
c0021655:	83 ec 08             	sub    esp,0x8
c0021658:	8d 44 24 08          	lea    eax,[esp+0x8]
c002165c:	50                   	push   eax
c002165d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021664:	e8 d3 f9 ff ff       	call   c002103c <FAT::fixFilepath(char*)>
c0021669:	83 c4 10             	add    esp,0x10
c002166c:	83 ec 08             	sub    esp,0x8
c002166f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021676:	50                   	push   eax
c0021677:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002167b:	50                   	push   eax
c002167c:	e8 07 4b fe ff       	call   c0006188 <f_stat>
c0021681:	83 c4 10             	add    esp,0x10
c0021684:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002168b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021692:	85 c0                	test   eax,eax
c0021694:	75 04                	jne    c002169a <FAT::exists(char const*)+0x62>
c0021696:	b0 01                	mov    al,0x1
c0021698:	eb 02                	jmp    c002169c <FAT::exists(char const*)+0x64>
c002169a:	b0 00                	mov    al,0x0
c002169c:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216a2:	c3                   	ret    
c00216a3:	90                   	nop

c00216a4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216a4:	b8 08 00 00 00       	mov    eax,0x8
c00216a9:	c3                   	ret    

c00216aa <ISO9660::seek(void*, unsigned long long)>:
c00216aa:	53                   	push   ebx
c00216ab:	b8 04 00 00 00       	mov    eax,0x4
c00216b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216bc:	85 d2                	test   edx,edx
c00216be:	74 17                	je     c00216d7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216c0:	89 c8                	mov    eax,ecx
c00216c2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216c5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216c8:	b8 01 00 00 00       	mov    eax,0x1
c00216cd:	73 08                	jae    c00216d7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216cf:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216d2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216d5:	31 c0                	xor    eax,eax
c00216d7:	5b                   	pop    ebx
c00216d8:	c3                   	ret    
c00216d9:	90                   	nop

c00216da <ISO9660::tell(void*, unsigned long long*)>:
c00216da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216e2:	85 d2                	test   edx,edx
c00216e4:	74 12                	je     c00216f8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216e6:	85 c0                	test   eax,eax
c00216e8:	74 0e                	je     c00216f8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216ea:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216ed:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216f0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216f3:	89 10                	mov    DWORD PTR [eax],edx
c00216f5:	31 c0                	xor    eax,eax
c00216f7:	c3                   	ret    
c00216f8:	b8 04 00 00 00       	mov    eax,0x4
c00216fd:	c3                   	ret    

c00216fe <ISO9660::getName()>:
c00216fe:	b8 f4 c9 02 c0       	mov    eax,0xc002c9f4
c0021703:	c3                   	ret    

c0021704 <ISO9660::stat(void*, unsigned long long*)>:
c0021704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002170c:	85 d2                	test   edx,edx
c002170e:	74 12                	je     c0021722 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021710:	85 c0                	test   eax,eax
c0021712:	74 0e                	je     c0021722 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021714:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021717:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002171a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002171d:	89 10                	mov    DWORD PTR [eax],edx
c002171f:	31 c0                	xor    eax,eax
c0021721:	c3                   	ret    
c0021722:	b8 04 00 00 00       	mov    eax,0x4
c0021727:	c3                   	ret    

c0021728 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021728:	b8 01 00 00 00       	mov    eax,0x1
c002172d:	c3                   	ret    

c002172e <ISO9660::unlink(char const*)>:
c002172e:	b8 01 00 00 00       	mov    eax,0x1
c0021733:	c3                   	ret    

c0021734 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021734:	b8 01 00 00 00       	mov    eax,0x1
c0021739:	c3                   	ret    

c002173a <ISO9660::rename(char const*, char const*)>:
c002173a:	b8 01 00 00 00       	mov    eax,0x1
c002173f:	c3                   	ret    

c0021740 <ISO9660::mkdir(char const*)>:
c0021740:	b8 01 00 00 00       	mov    eax,0x1
c0021745:	c3                   	ret    

c0021746 <ISO9660::close(void*)>:
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	b8 04 00 00 00       	mov    eax,0x4
c002174e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021752:	85 d2                	test   edx,edx
c0021754:	74 0e                	je     c0021764 <ISO9660::close(void*)+0x1e>
c0021756:	83 ec 0c             	sub    esp,0xc
c0021759:	52                   	push   edx
c002175a:	e8 f1 e0 fe ff       	call   c000f850 <free>
c002175f:	83 c4 10             	add    esp,0x10
c0021762:	31 c0                	xor    eax,eax
c0021764:	83 c4 0c             	add    esp,0xc
c0021767:	c3                   	ret    

c0021768 <ISO9660::closeDir(void*)>:
c0021768:	83 ec 0c             	sub    esp,0xc
c002176b:	b8 04 00 00 00       	mov    eax,0x4
c0021770:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021774:	85 d2                	test   edx,edx
c0021776:	74 0e                	je     c0021786 <ISO9660::closeDir(void*)+0x1e>
c0021778:	83 ec 0c             	sub    esp,0xc
c002177b:	52                   	push   edx
c002177c:	e8 cf e0 fe ff       	call   c000f850 <free>
c0021781:	83 c4 10             	add    esp,0x10
c0021784:	31 c0                	xor    eax,eax
c0021786:	83 c4 0c             	add    esp,0xc
c0021789:	c3                   	ret    

c002178a <ISO9660::~ISO9660()>:
c002178a:	83 ec 0c             	sub    esp,0xc
c002178d:	ba 58 ca 02 c0       	mov    edx,0xc002ca58
c0021792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021796:	89 10                	mov    DWORD PTR [eax],edx
c0021798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179c:	83 ec 0c             	sub    esp,0xc
c002179f:	50                   	push   eax
c00217a0:	e8 6d 1b ff ff       	call   c0013312 <Filesystem::~Filesystem()>
c00217a5:	83 c4 10             	add    esp,0x10
c00217a8:	90                   	nop
c00217a9:	83 c4 0c             	add    esp,0xc
c00217ac:	c3                   	ret    
c00217ad:	90                   	nop

c00217ae <ISO9660::~ISO9660()>:
c00217ae:	83 ec 0c             	sub    esp,0xc
c00217b1:	83 ec 0c             	sub    esp,0xc
c00217b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217b8:	e8 cd ff ff ff       	call   c002178a <ISO9660::~ISO9660()>
c00217bd:	83 c4 10             	add    esp,0x10
c00217c0:	83 ec 08             	sub    esp,0x8
c00217c3:	6a 08                	push   0x8
c00217c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217c9:	e8 3c 17 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00217ce:	83 c4 10             	add    esp,0x10
c00217d1:	83 c4 0c             	add    esp,0xc
c00217d4:	c3                   	ret    

c00217d5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217d5:	55                   	push   ebp
c00217d6:	31 c9                	xor    ecx,ecx
c00217d8:	57                   	push   edi
c00217d9:	56                   	push   esi
c00217da:	53                   	push   ebx
c00217db:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217e3:	89 eb                	mov    ebx,ebp
c00217e5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217e9:	39 ce                	cmp    esi,ecx
c00217eb:	7e 17                	jle    c0021804 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217ed:	31 d2                	xor    edx,edx
c00217ef:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217f3:	7d 13                	jge    c0021808 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217f5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217f9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217fc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217ff:	75 0d                	jne    c002180e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021801:	42                   	inc    edx
c0021802:	eb eb                	jmp    c00217ef <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021804:	31 c0                	xor    eax,eax
c0021806:	eb 0a                	jmp    c0021812 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021808:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002180c:	eb 04                	jmp    c0021812 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002180e:	41                   	inc    ecx
c002180f:	43                   	inc    ebx
c0021810:	eb d7                	jmp    c00217e9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021812:	5b                   	pop    ebx
c0021813:	5e                   	pop    esi
c0021814:	5f                   	pop    edi
c0021815:	5d                   	pop    ebp
c0021816:	c3                   	ret    

c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021817:	56                   	push   esi
c0021818:	53                   	push   ebx
c0021819:	52                   	push   edx
c002181a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002181e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021822:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021826:	39 0d 60 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c60,ecx
c002182c:	75 08                	jne    c0021836 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002182e:	38 05 b4 da 02 c0    	cmp    BYTE PTR ds:0xc002dab4,al
c0021834:	74 2b                	je     c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021836:	83 ec 0c             	sub    esp,0xc
c0021839:	a2 b4 da 02 c0       	mov    ds:0xc002dab4,al
c002183e:	68 80 1c 03 c0       	push   0xc0031c80
c0021843:	0f be c0             	movsx  eax,al
c0021846:	6a 01                	push   0x1
c0021848:	89 0d 60 1c 03 c0    	mov    DWORD PTR ds:0xc0031c60,ecx
c002184e:	31 db                	xor    ebx,ebx
c0021850:	53                   	push   ebx
c0021851:	51                   	push   ecx
c0021852:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0021859:	e8 ac 4f ff ff       	call   c001680a <LogicalDisk::read(unsigned long long, int, void*)>
c002185e:	83 c4 20             	add    esp,0x20
c0021861:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021869:	c7 44 24 14 80 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031c80
c0021871:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021875:	58                   	pop    eax
c0021876:	5b                   	pop    ebx
c0021877:	5e                   	pop    esi
c0021878:	e9 c7 ee fd ff       	jmp    c0000744 <memcpy>
c002187d:	90                   	nop

c002187e <ISO9660::tryMount(LogicalDisk*, int)>:
c002187e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021884:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002188b:	83 c0 41             	add    eax,0x41
c002188e:	0f be c0             	movsx  eax,al
c0021891:	50                   	push   eax
c0021892:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021896:	50                   	push   eax
c0021897:	6a 10                	push   0x10
c0021899:	e8 79 ff ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002189e:	83 c4 10             	add    esp,0x10
c00218a1:	31 c0                	xor    eax,eax
c00218a3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218a8:	75 1d                	jne    c00218c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218aa:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218af:	75 16                	jne    c00218c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218b1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218b6:	75 0f                	jne    c00218c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218b8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218bd:	75 08                	jne    c00218c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218bf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218c4:	0f 94 c0             	sete   al
c00218c7:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218cd:	c3                   	ret    

c00218ce <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218ce:	55                   	push   ebp
c00218cf:	57                   	push   edi
c00218d0:	56                   	push   esi
c00218d1:	53                   	push   ebx
c00218d2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218d8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218df:	85 ed                	test   ebp,ebp
c00218e1:	0f 84 d6 01 00 00    	je     c0021abd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218e7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218ef:	0f 84 c8 01 00 00    	je     c0021abd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218f5:	b8 01 00 00 00       	mov    eax,0x1
c00218fa:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218fe:	0f 85 be 01 00 00    	jne    c0021ac2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021904:	31 d2                	xor    edx,edx
c0021906:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002190d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021910:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021913:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021917:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002191a:	89 04 24             	mov    DWORD PTR [esp],eax
c002191d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021921:	01 f0                	add    eax,esi
c0021923:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021926:	11 fa                	adc    edx,edi
c0021928:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002192c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021934:	19 d1                	sbb    ecx,edx
c0021936:	72 0a                	jb     c0021942 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021938:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002193c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021940:	eb 13                	jmp    c0021955 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021946:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002194a:	29 f0                	sub    eax,esi
c002194c:	19 fa                	sbb    edx,edi
c002194e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021951:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021955:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021958:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002195b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002195f:	51                   	push   ecx
c0021960:	c1 e0 0b             	shl    eax,0xb
c0021963:	01 c6                	add    esi,eax
c0021965:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021969:	11 d7                	adc    edi,edx
c002196b:	50                   	push   eax
c002196c:	89 fa                	mov    edx,edi
c002196e:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021972:	89 f0                	mov    eax,esi
c0021974:	53                   	push   ebx
c0021975:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021979:	50                   	push   eax
c002197a:	e8 98 fe ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002197f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021983:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021986:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002198a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021990:	83 c4 10             	add    esp,0x10
c0021993:	b8 00 08 00 00       	mov    eax,0x800
c0021998:	29 d0                	sub    eax,edx
c002199a:	39 c1                	cmp    ecx,eax
c002199c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219a0:	83 d9 00             	sbb    ecx,0x0
c00219a3:	7d 1c                	jge    c00219c1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219a5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219aa:	75 12                	jne    c00219be <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219ac:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219b9:	e9 fb 00 00 00       	jmp    c0021ab9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219c1:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219c4:	31 d2                	xor    edx,edx
c00219c6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219ca:	39 c2                	cmp    edx,eax
c00219cc:	7d 14                	jge    c00219e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219ce:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219d9:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219dc:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219df:	42                   	inc    edx
c00219e0:	eb e8                	jmp    c00219ca <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219e2:	89 c3                	mov    ebx,eax
c00219e4:	85 c0                	test   eax,eax
c00219e6:	79 02                	jns    c00219ea <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00219e8:	31 db                	xor    ebx,ebx
c00219ea:	99                   	cdq    
c00219eb:	01 c3                	add    ebx,eax
c00219ed:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00219f4:	01 c6                	add    esi,eax
c00219f6:	11 d7                	adc    edi,edx
c00219f8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219fc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a00:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a03:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a07:	29 c6                	sub    esi,eax
c0021a09:	19 d7                	sbb    edi,edx
c0021a0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a0e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a12:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a17:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a1a:	b8 00 00 00 00       	mov    eax,0x0
c0021a1f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a23:	7d 3e                	jge    c0021a63 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a25:	52                   	push   edx
c0021a26:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a2a:	50                   	push   eax
c0021a2b:	53                   	push   ebx
c0021a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a34:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a38:	50                   	push   eax
c0021a39:	e8 d9 fd ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a3e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a46:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a4b:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a51:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a59:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a5e:	83 c4 10             	add    esp,0x10
c0021a61:	eb af                	jmp    c0021a12 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a67:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a6a:	74 32                	je     c0021a9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a6c:	50                   	push   eax
c0021a6d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a71:	50                   	push   eax
c0021a72:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a76:	50                   	push   eax
c0021a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a7b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a7f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a83:	56                   	push   esi
c0021a84:	e8 8e fd ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a89:	83 c4 0c             	add    esp,0xc
c0021a8c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a90:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a94:	50                   	push   eax
c0021a95:	53                   	push   ebx
c0021a96:	e8 a9 ec fd ff       	call   c0000744 <memcpy>
c0021a9b:	83 c4 10             	add    esp,0x10
c0021a9e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021aa5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021aa9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021aad:	89 38                	mov    DWORD PTR [eax],edi
c0021aaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ab3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ab6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ab9:	31 c0                	xor    eax,eax
c0021abb:	eb 05                	jmp    c0021ac2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021abd:	b8 04 00 00 00       	mov    eax,0x4
c0021ac2:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021ac8:	5b                   	pop    ebx
c0021ac9:	5e                   	pop    esi
c0021aca:	5f                   	pop    edi
c0021acb:	5d                   	pop    ebp
c0021acc:	c3                   	ret    
c0021acd:	90                   	nop

c0021ace <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021ace:	55                   	push   ebp
c0021acf:	57                   	push   edi
c0021ad0:	56                   	push   esi
c0021ad1:	53                   	push   ebx
c0021ad2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021ad8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021adf:	85 f6                	test   esi,esi
c0021ae1:	0f 84 64 02 00 00    	je     c0021d4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ae7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021aef:	0f 84 56 02 00 00    	je     c0021d4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021af5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021af8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021afb:	75 0a                	jne    c0021b07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021afd:	b8 07 00 00 00       	mov    eax,0x7
c0021b02:	e9 49 02 00 00       	jmp    c0021d50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b07:	50                   	push   eax
c0021b08:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b0c:	50                   	push   eax
c0021b0d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b14:	53                   	push   ebx
c0021b15:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b17:	c1 e0 0b             	shl    eax,0xb
c0021b1a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b1d:	c1 e8 0b             	shr    eax,0xb
c0021b20:	50                   	push   eax
c0021b21:	e8 f1 fc ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b29:	83 c4 10             	add    esp,0x10
c0021b2c:	89 c1                	mov    ecx,eax
c0021b2e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b31:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b37:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b3a:	84 db                	test   bl,bl
c0021b3c:	0f 85 90 00 00 00    	jne    c0021bd2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b42:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b48:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b4e:	29 c7                	sub    edi,eax
c0021b50:	89 fb                	mov    ebx,edi
c0021b52:	c1 fb 1f             	sar    ebx,0x1f
c0021b55:	01 f8                	add    eax,edi
c0021b57:	11 da                	adc    edx,ebx
c0021b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b61:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b64:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b67:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b6a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b74:	89 d8                	mov    eax,ebx
c0021b76:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b79:	ba 00 00 00 00       	mov    edx,0x0
c0021b7e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b82:	b8 00 00 00 00       	mov    eax,0x0
c0021b87:	73 0b                	jae    c0021b94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b90:	29 f8                	sub    eax,edi
c0021b92:	19 da                	sbb    edx,ebx
c0021b94:	89 d3                	mov    ebx,edx
c0021b96:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b99:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b9c:	09 c3                	or     ebx,eax
c0021b9e:	0f 84 59 ff ff ff    	je     c0021afd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ba4:	55                   	push   ebp
c0021ba5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ba9:	50                   	push   eax
c0021baa:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bb1:	53                   	push   ebx
c0021bb2:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bb4:	c1 e0 0b             	shl    eax,0xb
c0021bb7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bbb:	c1 e8 0b             	shr    eax,0xb
c0021bbe:	50                   	push   eax
c0021bbf:	e8 53 fc ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bc4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bc7:	83 c4 10             	add    esp,0x10
c0021bca:	25 ff 07 00 00       	and    eax,0x7ff
c0021bcf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bd2:	57                   	push   edi
c0021bd3:	6a 28                	push   0x28
c0021bd5:	6a 00                	push   0x0
c0021bd7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bdb:	50                   	push   eax
c0021bdc:	e8 97 eb fd ff       	call   c0000778 <memset>
c0021be1:	31 d2                	xor    edx,edx
c0021be3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021be6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bec:	89 f8                	mov    eax,edi
c0021bee:	83 c0 21             	add    eax,0x21
c0021bf1:	83 d2 00             	adc    edx,0x0
c0021bf4:	89 c7                	mov    edi,eax
c0021bf6:	89 d5                	mov    ebp,edx
c0021bf8:	83 c4 10             	add    esp,0x10
c0021bfb:	31 c9                	xor    ecx,ecx
c0021bfd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c04:	83 f9 28             	cmp    ecx,0x28
c0021c07:	88 04 24             	mov    BYTE PTR [esp],al
c0021c0a:	0f 94 c2             	sete   dl
c0021c0d:	88 d0                	mov    al,dl
c0021c0f:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c14:	39 fa                	cmp    edx,edi
c0021c16:	ba 00 00 00 00       	mov    edx,0x0
c0021c1b:	19 ea                	sbb    edx,ebp
c0021c1d:	0f 92 c2             	setb   dl
c0021c20:	09 c2                	or     edx,eax
c0021c22:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c26:	0f 94 c0             	sete   al
c0021c29:	08 d0                	or     al,dl
c0021c2b:	75 16                	jne    c0021c43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c2d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c31:	74 10                	je     c0021c43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c33:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c36:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c3a:	41                   	inc    ecx
c0021c3b:	83 c7 01             	add    edi,0x1
c0021c3e:	83 d5 00             	adc    ebp,0x0
c0021c41:	eb ba                	jmp    c0021bfd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c43:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c4a:	83 ec 0c             	sub    esp,0xc
c0021c4d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c51:	57                   	push   edi
c0021c52:	e8 3d eb fd ff       	call   c0000794 <strlen>
c0021c57:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c5f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c63:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c6a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c6d:	5a                   	pop    edx
c0021c6e:	25 ff 07 00 00       	and    eax,0x7ff
c0021c73:	01 c8                	add    eax,ecx
c0021c75:	59                   	pop    ecx
c0021c76:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c7c:	83 e0 02             	and    eax,0x2
c0021c7f:	3c 01                	cmp    al,0x1
c0021c81:	19 c0                	sbb    eax,eax
c0021c83:	83 c0 02             	add    eax,0x2
c0021c86:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c8a:	57                   	push   edi
c0021c8b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c8f:	50                   	push   eax
c0021c90:	e8 9f eb fd ff       	call   c0000834 <strcpy>
c0021c95:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c99:	83 c4 10             	add    esp,0x10
c0021c9c:	84 c0                	test   al,al
c0021c9e:	75 21                	jne    c0021cc1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021ca0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021ca8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cb0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cb8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021cbf:	eb 28                	jmp    c0021ce9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021cc1:	fe c8                	dec    al
c0021cc3:	75 24                	jne    c0021ce9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021cc5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ccd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cd5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cdd:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ce4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ce9:	0f b6 fb             	movzx  edi,bl
c0021cec:	31 db                	xor    ebx,ebx
c0021cee:	50                   	push   eax
c0021cef:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021cf6:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021cfa:	50                   	push   eax
c0021cfb:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d02:	e8 3d ea fd ff       	call   c0000744 <memcpy>
c0021d07:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d0e:	89 f9                	mov    ecx,edi
c0021d10:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d16:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d19:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d1c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d1f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d22:	83 c4 10             	add    esp,0x10
c0021d25:	39 c7                	cmp    edi,eax
c0021d27:	89 df                	mov    edi,ebx
c0021d29:	19 d7                	sbb    edi,edx
c0021d2b:	72 10                	jb     c0021d3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d2d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d34:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d3b:	eb 0a                	jmp    c0021d47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d3d:	29 c8                	sub    eax,ecx
c0021d3f:	19 da                	sbb    edx,ebx
c0021d41:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d44:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d47:	31 c0                	xor    eax,eax
c0021d49:	eb 05                	jmp    c0021d50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d4b:	b8 04 00 00 00       	mov    eax,0x4
c0021d50:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d56:	5b                   	pop    ebx
c0021d57:	5e                   	pop    esi
c0021d58:	5f                   	pop    edi
c0021d59:	5d                   	pop    ebp
c0021d5a:	c3                   	ret    

c0021d5b <readRoot(unsigned int*, unsigned int*, char)>:
c0021d5b:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d61:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d69:	50                   	push   eax
c0021d6a:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d6e:	50                   	push   eax
c0021d6f:	6a 10                	push   0x10
c0021d71:	e8 a1 fa ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d76:	83 c4 0c             	add    esp,0xc
c0021d79:	6a 22                	push   0x22
c0021d7b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d82:	50                   	push   eax
c0021d83:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d87:	50                   	push   eax
c0021d88:	e8 b7 e9 fd ff       	call   c0000744 <memcpy>
c0021d8d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d98:	89 10                	mov    DWORD PTR [eax],edx
c0021d9a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021da1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021da5:	89 10                	mov    DWORD PTR [eax],edx
c0021da7:	b0 01                	mov    al,0x1
c0021da9:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021daf:	c3                   	ret    

c0021db0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021db0:	55                   	push   ebp
c0021db1:	57                   	push   edi
c0021db2:	56                   	push   esi
c0021db3:	53                   	push   ebx
c0021db4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021dba:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021dc1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021dc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dcc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021dd0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021dd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021dd8:	75 03                	jne    c0021ddd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021dda:	83 c3 02             	add    ebx,0x2
c0021ddd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021de0:	75 03                	jne    c0021de5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021de2:	43                   	inc    ebx
c0021de3:	eb f8                	jmp    c0021ddd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021de5:	51                   	push   ecx
c0021de6:	68 00 01 00 00       	push   0x100
c0021deb:	6a 00                	push   0x0
c0021ded:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021df1:	50                   	push   eax
c0021df2:	e8 81 e9 fd ff       	call   c0000778 <memset>
c0021df7:	83 c4 10             	add    esp,0x10
c0021dfa:	31 d2                	xor    edx,edx
c0021dfc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021dff:	84 c0                	test   al,al
c0021e01:	74 21                	je     c0021e24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e03:	3c 2f                	cmp    al,0x2f
c0021e05:	75 0b                	jne    c0021e12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e07:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e0b:	bd 01 00 00 00       	mov    ebp,0x1
c0021e10:	eb 14                	jmp    c0021e26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e12:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e15:	80 f9 19             	cmp    cl,0x19
c0021e18:	77 03                	ja     c0021e1d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e1a:	83 e8 20             	sub    eax,0x20
c0021e1d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e21:	42                   	inc    edx
c0021e22:	eb d8                	jmp    c0021dfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e24:	31 ed                	xor    ebp,ebp
c0021e26:	83 ec 0c             	sub    esp,0xc
c0021e29:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e30:	e8 0b da fe ff       	call   c000f840 <malloc>
c0021e35:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e3c:	89 c6                	mov    esi,eax
c0021e3e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e44:	c1 ef 0b             	shr    edi,0xb
c0021e47:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e4e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e52:	83 c4 10             	add    esp,0x10
c0021e55:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e5e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e65:	74 28                	je     c0021e8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e67:	52                   	push   edx
c0021e68:	57                   	push   edi
c0021e69:	50                   	push   eax
c0021e6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e6e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e75:	e8 9d f9 ff ff       	call   c0021817 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e7e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e85:	05 00 08 00 00       	add    eax,0x800
c0021e8a:	83 c4 10             	add    esp,0x10
c0021e8d:	eb cb                	jmp    c0021e5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e8f:	83 ec 0c             	sub    esp,0xc
c0021e92:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e96:	57                   	push   edi
c0021e97:	e8 f8 e8 fd ff       	call   c0000794 <strlen>
c0021e9c:	50                   	push   eax
c0021e9d:	57                   	push   edi
c0021e9e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ea5:	56                   	push   esi
c0021ea6:	e8 2a f9 ff ff       	call   c00217d5 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021eab:	83 c4 20             	add    esp,0x20
c0021eae:	85 c0                	test   eax,eax
c0021eb0:	75 13                	jne    c0021ec5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021eb2:	83 ec 0c             	sub    esp,0xc
c0021eb5:	56                   	push   esi
c0021eb6:	e8 95 d9 fe ff       	call   c000f850 <free>
c0021ebb:	83 c4 10             	add    esp,0x10
c0021ebe:	31 c0                	xor    eax,eax
c0021ec0:	e9 b3 00 00 00       	jmp    c0021f78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ec5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ec9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021ecd:	c1 e7 08             	shl    edi,0x8
c0021ed0:	c1 e2 10             	shl    edx,0x10
c0021ed3:	09 d7                	or     edi,edx
c0021ed5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ed9:	09 d7                	or     edi,edx
c0021edb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021edf:	c1 e2 18             	shl    edx,0x18
c0021ee2:	09 d7                	or     edi,edx
c0021ee4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ee8:	89 d1                	mov    ecx,edx
c0021eea:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021eee:	c1 e1 08             	shl    ecx,0x8
c0021ef1:	c1 e2 10             	shl    edx,0x10
c0021ef4:	09 ca                	or     edx,ecx
c0021ef6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021efa:	09 ca                	or     edx,ecx
c0021efc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f00:	c1 e1 18             	shl    ecx,0x18
c0021f03:	09 ca                	or     edx,ecx
c0021f05:	89 e9                	mov    ecx,ebp
c0021f07:	84 c9                	test   cl,cl
c0021f09:	74 3c                	je     c0021f47 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f0f:	83 ec 0c             	sub    esp,0xc
c0021f12:	56                   	push   esi
c0021f13:	e8 38 d9 fe ff       	call   c000f850 <free>
c0021f18:	83 c4 0c             	add    esp,0xc
c0021f1b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f22:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f27:	50                   	push   eax
c0021f28:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f2f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f3a:	52                   	push   edx
c0021f3b:	57                   	push   edi
c0021f3c:	53                   	push   ebx
c0021f3d:	e8 6e fe ff ff       	call   c0021db0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f42:	83 c4 20             	add    esp,0x20
c0021f45:	eb 31                	jmp    c0021f78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f47:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f4a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f51:	d0 e8                	shr    al,1
c0021f53:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f55:	83 e0 01             	and    eax,0x1
c0021f58:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f5f:	83 ec 0c             	sub    esp,0xc
c0021f62:	89 13                	mov    DWORD PTR [ebx],edx
c0021f64:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f6b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f6d:	56                   	push   esi
c0021f6e:	e8 dd d8 fe ff       	call   c000f850 <free>
c0021f73:	83 c4 10             	add    esp,0x10
c0021f76:	b0 01                	mov    al,0x1
c0021f78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f7e:	5b                   	pop    ebx
c0021f7f:	5e                   	pop    esi
c0021f80:	5f                   	pop    edi
c0021f81:	5d                   	pop    ebp
c0021f82:	c3                   	ret    

c0021f83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f83:	55                   	push   ebp
c0021f84:	57                   	push   edi
c0021f85:	56                   	push   esi
c0021f86:	53                   	push   ebx
c0021f87:	83 ec 20             	sub    esp,0x20
c0021f8a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f8e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f92:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f9e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fa6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fab:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021fb1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021fb7:	57                   	push   edi
c0021fb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fbc:	50                   	push   eax
c0021fbd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fc1:	50                   	push   eax
c0021fc2:	e8 94 fd ff ff       	call   c0021d5b <readRoot(unsigned int*, unsigned int*, char)>
c0021fc7:	5a                   	pop    edx
c0021fc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fcc:	e8 c3 e7 fd ff       	call   c0000794 <strlen>
c0021fd1:	83 c4 10             	add    esp,0x10
c0021fd4:	83 f8 03             	cmp    eax,0x3
c0021fd7:	77 17                	ja     c0021ff0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fdd:	89 03                	mov    DWORD PTR [ebx],eax
c0021fdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fe3:	89 06                	mov    DWORD PTR [esi],eax
c0021fe5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021fec:	b0 01                	mov    al,0x1
c0021fee:	eb 19                	jmp    c0022009 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021ff0:	50                   	push   eax
c0021ff1:	55                   	push   ebp
c0021ff2:	57                   	push   edi
c0021ff3:	56                   	push   esi
c0021ff4:	53                   	push   ebx
c0021ff5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ff9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ffd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022001:	e8 aa fd ff ff       	call   c0021db0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022006:	83 c4 20             	add    esp,0x20
c0022009:	83 c4 1c             	add    esp,0x1c
c002200c:	5b                   	pop    ebx
c002200d:	5e                   	pop    esi
c002200e:	5f                   	pop    edi
c002200f:	5d                   	pop    ebp
c0022010:	c3                   	ret    
c0022011:	90                   	nop

c0022012 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022012:	57                   	push   edi
c0022013:	56                   	push   esi
c0022014:	53                   	push   ebx
c0022015:	83 ec 10             	sub    esp,0x10
c0022018:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002201c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022020:	85 ff                	test   edi,edi
c0022022:	0f 84 9d 00 00 00    	je     c00220c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022028:	85 f6                	test   esi,esi
c002202a:	0f 84 95 00 00 00    	je     c00220c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022030:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022035:	74 17                	je     c002204e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	68 0f ca 02 c0       	push   0xc002ca0f
c002203f:	e8 a6 0f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0022044:	83 c4 10             	add    esp,0x10
c0022047:	b8 03 00 00 00       	mov    eax,0x3
c002204c:	eb 7c                	jmp    c00220ca <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002204e:	83 ec 0c             	sub    esp,0xc
c0022051:	6a 1c                	push   0x1c
c0022053:	e8 e8 d7 fe ff       	call   c000f840 <malloc>
c0022058:	89 07                	mov    DWORD PTR [edi],eax
c002205a:	89 c3                	mov    ebx,eax
c002205c:	58                   	pop    eax
c002205d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022061:	50                   	push   eax
c0022062:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022065:	50                   	push   eax
c0022066:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002206a:	50                   	push   eax
c002206b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002206f:	50                   	push   eax
c0022070:	56                   	push   esi
c0022071:	e8 0d ff ff ff       	call   c0021f83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022076:	83 c4 20             	add    esp,0x20
c0022079:	84 c0                	test   al,al
c002207b:	74 07                	je     c0022084 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002207d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022082:	74 0b                	je     c002208f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022084:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022088:	b8 01 00 00 00       	mov    eax,0x1
c002208d:	eb 3b                	jmp    c00220ca <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002208f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022093:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022097:	89 03                	mov    DWORD PTR [ebx],eax
c0022099:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220bc:	8a 06                	mov    al,BYTE PTR [esi]
c00220be:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220c1:	31 c0                	xor    eax,eax
c00220c3:	eb 05                	jmp    c00220ca <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220c5:	b8 04 00 00 00       	mov    eax,0x4
c00220ca:	83 c4 10             	add    esp,0x10
c00220cd:	5b                   	pop    ebx
c00220ce:	5e                   	pop    esi
c00220cf:	5f                   	pop    edi
c00220d0:	c3                   	ret    
c00220d1:	90                   	nop

c00220d2 <ISO9660::exists(char const*)>:
c00220d2:	83 ec 28             	sub    esp,0x28
c00220d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220dd:	52                   	push   edx
c00220de:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220e1:	52                   	push   edx
c00220e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220e6:	52                   	push   edx
c00220e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220eb:	52                   	push   edx
c00220ec:	50                   	push   eax
c00220ed:	e8 91 fe ff ff       	call   c0021f83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220f2:	83 c4 3c             	add    esp,0x3c
c00220f5:	c3                   	ret    

c00220f6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220f6:	56                   	push   esi
c00220f7:	53                   	push   ebx
c00220f8:	83 ec 14             	sub    esp,0x14
c00220fb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022103:	85 db                	test   ebx,ebx
c0022105:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022109:	0f 94 c2             	sete   dl
c002210c:	85 f6                	test   esi,esi
c002210e:	0f 94 c0             	sete   al
c0022111:	08 c2                	or     dl,al
c0022113:	75 68                	jne    c002217d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022115:	85 c9                	test   ecx,ecx
c0022117:	74 64                	je     c002217d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022119:	83 ec 0c             	sub    esp,0xc
c002211c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002211f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022123:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022129:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022130:	50                   	push   eax
c0022131:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022134:	50                   	push   eax
c0022135:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022139:	50                   	push   eax
c002213a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002213e:	50                   	push   eax
c002213f:	51                   	push   ecx
c0022140:	e8 3e fe ff ff       	call   c0021f83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022145:	83 c4 20             	add    esp,0x20
c0022148:	ba 01 00 00 00       	mov    edx,0x1
c002214d:	84 c0                	test   al,al
c002214f:	74 31                	je     c0022182 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022151:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022155:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002215c:	89 03                	mov    DWORD PTR [ebx],eax
c002215e:	ba 00 00 00 00       	mov    edx,0x0
c0022163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022167:	85 c0                	test   eax,eax
c0022169:	0f 95 06             	setne  BYTE PTR [esi]
c002216c:	74 14                	je     c0022182 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002216e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022174:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002217b:	eb 05                	jmp    c0022182 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002217d:	ba 04 00 00 00       	mov    edx,0x4
c0022182:	83 c4 14             	add    esp,0x14
c0022185:	89 d0                	mov    eax,edx
c0022187:	5b                   	pop    ebx
c0022188:	5e                   	pop    esi
c0022189:	c3                   	ret    

c002218a <ISO9660::openDir(char const*, void**)>:
c002218a:	57                   	push   edi
c002218b:	56                   	push   esi
c002218c:	53                   	push   ebx
c002218d:	83 ec 10             	sub    esp,0x10
c0022190:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022194:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022198:	85 ff                	test   edi,edi
c002219a:	0f 84 95 00 00 00    	je     c0022235 <ISO9660::openDir(char const*, void**)+0xab>
c00221a0:	85 f6                	test   esi,esi
c00221a2:	0f 84 8d 00 00 00    	je     c0022235 <ISO9660::openDir(char const*, void**)+0xab>
c00221a8:	83 ec 0c             	sub    esp,0xc
c00221ab:	6a 1c                	push   0x1c
c00221ad:	e8 8e d6 fe ff       	call   c000f840 <malloc>
c00221b2:	89 07                	mov    DWORD PTR [edi],eax
c00221b4:	89 c3                	mov    ebx,eax
c00221b6:	59                   	pop    ecx
c00221b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221bb:	50                   	push   eax
c00221bc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221bf:	50                   	push   eax
c00221c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221c4:	50                   	push   eax
c00221c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221c9:	50                   	push   eax
c00221ca:	56                   	push   esi
c00221cb:	e8 b3 fd ff ff       	call   c0021f83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221d0:	83 c4 20             	add    esp,0x20
c00221d3:	84 c0                	test   al,al
c00221d5:	74 07                	je     c00221de <ISO9660::openDir(char const*, void**)+0x54>
c00221d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221dc:	75 21                	jne    c00221ff <ISO9660::openDir(char const*, void**)+0x75>
c00221de:	0f b6 c0             	movzx  eax,al
c00221e1:	52                   	push   edx
c00221e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00221e6:	50                   	push   eax
c00221e7:	68 35 ca 02 c0       	push   0xc002ca35
c00221ec:	e8 f9 0d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00221f1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221f5:	83 c4 10             	add    esp,0x10
c00221f8:	b8 01 00 00 00       	mov    eax,0x1
c00221fd:	eb 3b                	jmp    c002223a <ISO9660::openDir(char const*, void**)+0xb0>
c00221ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022203:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022207:	89 03                	mov    DWORD PTR [ebx],eax
c0022209:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022214:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002221b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022222:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022225:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002222c:	8a 06                	mov    al,BYTE PTR [esi]
c002222e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022231:	31 c0                	xor    eax,eax
c0022233:	eb 05                	jmp    c002223a <ISO9660::openDir(char const*, void**)+0xb0>
c0022235:	b8 04 00 00 00       	mov    eax,0x4
c002223a:	83 c4 10             	add    esp,0x10
c002223d:	5b                   	pop    ebx
c002223e:	5e                   	pop    esi
c002223f:	5f                   	pop    edi
c0022240:	c3                   	ret    
c0022241:	90                   	nop

c0022242 <ISO9660::ISO9660()>:
c0022242:	83 ec 0c             	sub    esp,0xc
c0022245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022249:	83 ec 0c             	sub    esp,0xc
c002224c:	50                   	push   eax
c002224d:	e8 9c 10 ff ff       	call   c00132ee <Filesystem::Filesystem()>
c0022252:	83 c4 10             	add    esp,0x10
c0022255:	ba 58 ca 02 c0       	mov    edx,0xc002ca58
c002225a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225e:	89 10                	mov    DWORD PTR [eax],edx
c0022260:	90                   	nop
c0022261:	83 c4 0c             	add    esp,0xc
c0022264:	c3                   	ret    
c0022265:	90                   	nop

c0022266 <SoundChannel::~SoundChannel()>:
c0022266:	83 ec 0c             	sub    esp,0xc
c0022269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022270:	83 ec 0c             	sub    esp,0xc
c0022273:	50                   	push   eax
c0022274:	e8 d7 d5 fe ff       	call   c000f850 <free>
c0022279:	83 c4 10             	add    esp,0x10
c002227c:	90                   	nop
c002227d:	83 c4 0c             	add    esp,0xc
c0022280:	c3                   	ret    
c0022281:	90                   	nop

c0022282 <SoundChannel::setSpeed(float)>:
c0022282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002228a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002228d:	c3                   	ret    

c002228e <SoundChannel::getSpeed()>:
c002228e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022292:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022295:	c3                   	ret    

c0022296 <SoundChannel::setVolume(int)>:
c0022296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002229a:	83 f8 64             	cmp    eax,0x64
c002229d:	7e 05                	jle    c00222a4 <SoundChannel::setVolume(int)+0xe>
c002229f:	b8 64 00 00 00       	mov    eax,0x64
c00222a4:	85 c0                	test   eax,eax
c00222a6:	79 02                	jns    c00222aa <SoundChannel::setVolume(int)+0x14>
c00222a8:	31 c0                	xor    eax,eax
c00222aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222ae:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222b1:	c3                   	ret    

c00222b2 <SoundChannel::getVolume()>:
c00222b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222b9:	c3                   	ret    

c00222ba <SoundChannel::pause()>:
c00222ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222be:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222c2:	c3                   	ret    
c00222c3:	90                   	nop

c00222c4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222c4:	83 ec 1c             	sub    esp,0x1c
c00222c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222cb:	e8 ea ff ff ff       	call   c00222ba <SoundChannel::pause()>
c00222d0:	83 c4 04             	add    esp,0x4
c00222d3:	6a 50                	push   0x50
c00222d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222d9:	e8 b8 ff ff ff       	call   c0022296 <SoundChannel::setVolume(int)>
c00222de:	83 c4 08             	add    esp,0x8
c00222e1:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c00222e6:	50                   	push   eax
c00222e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222eb:	e8 92 ff ff ff       	call   c0022282 <SoundChannel::setSpeed(float)>
c00222f0:	83 c4 08             	add    esp,0x8
c00222f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222fb:	89 10                	mov    DWORD PTR [eax],edx
c00222fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022301:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022305:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002230c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022310:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022313:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022318:	75 23                	jne    c002233d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002231a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022327:	0f af c2             	imul   eax,edx
c002232a:	85 c0                	test   eax,eax
c002232c:	79 03                	jns    c0022331 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002232e:	83 c0 03             	add    eax,0x3
c0022331:	c1 f8 02             	sar    eax,0x2
c0022334:	05 a0 0f 00 00       	add    eax,0xfa0
c0022339:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002233d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022341:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022345:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002234c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022357:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002235e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022362:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022365:	c1 e0 02             	shl    eax,0x2
c0022368:	83 ec 0c             	sub    esp,0xc
c002236b:	50                   	push   eax
c002236c:	e8 cf d4 fe ff       	call   c000f840 <malloc>
c0022371:	83 c4 10             	add    esp,0x10
c0022374:	89 c2                	mov    edx,eax
c0022376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002237a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002237d:	83 ec 04             	sub    esp,0x4
c0022380:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022384:	50                   	push   eax
c0022385:	6a 01                	push   0x1
c0022387:	6a 04                	push   0x4
c0022389:	e8 11 68 fe ff       	call   c0008b9f <src_new>
c002238e:	83 c4 10             	add    esp,0x10
c0022391:	89 c2                	mov    edx,eax
c0022393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022397:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002239a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239e:	85 c0                	test   eax,eax
c00223a0:	74 10                	je     c00223b2 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223a2:	83 ec 0c             	sub    esp,0xc
c00223a5:	68 b4 ca 02 c0       	push   0xc002cab4
c00223aa:	e8 ec 82 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00223af:	83 c4 10             	add    esp,0x10
c00223b2:	a0 80 28 03 c0       	mov    al,ds:0xc0032880
c00223b7:	83 f0 01             	xor    eax,0x1
c00223ba:	84 c0                	test   al,al
c00223bc:	74 57                	je     c0022415 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223be:	a1 d4 ca 02 c0       	mov    eax,ds:0xc002cad4
c00223c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223cf:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223d7:	7f 35                	jg     c002240e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223d9:	83 ec 0c             	sub    esp,0xc
c00223dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223e0:	e8 92 4f 00 00       	call   c0027377 <__floatsisf>
c00223e5:	83 c4 10             	add    esp,0x10
c00223e8:	8b 15 d4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cad4
c00223ee:	83 ec 08             	sub    esp,0x8
c00223f1:	52                   	push   edx
c00223f2:	50                   	push   eax
c00223f3:	e8 91 4b 00 00       	call   c0026f89 <__mulsf3>
c00223f8:	83 c4 10             	add    esp,0x10
c00223fb:	89 c2                	mov    edx,eax
c00223fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022401:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0022408:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002240c:	eb c1                	jmp    c00223cf <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002240e:	c6 05 80 28 03 c0 01 	mov    BYTE PTR ds:0xc0032880,0x1
c0022415:	90                   	nop
c0022416:	83 c4 1c             	add    esp,0x1c
c0022419:	c3                   	ret    

c002241a <SoundChannel::play()>:
c002241a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002241e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022422:	c3                   	ret    
c0022423:	90                   	nop

c0022424 <SoundChannel::paused()>:
c0022424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022428:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002242b:	c3                   	ret    

c002242c <SoundChannel::getSampleRate()>:
c002242c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022430:	8b 00                	mov    eax,DWORD PTR [eax]
c0022432:	c3                   	ret    
c0022433:	90                   	nop

c0022434 <SoundChannel::getBits()>:
c0022434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002243b:	c3                   	ret    

c002243c <SoundChannel::getBufferUsed()>:
c002243c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022440:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022443:	c3                   	ret    

c0022444 <SoundChannel::getBufferSize()>:
c0022444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022448:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002244b:	c3                   	ret    

c002244c <SoundChannel::unbuffer(float*, int, int)>:
c002244c:	56                   	push   esi
c002244d:	53                   	push   ebx
c002244e:	83 ec 40             	sub    esp,0x40
c0022451:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022455:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022458:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002245c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002245f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022463:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022467:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002246b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002246f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022473:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022477:	e8 fb 4e 00 00       	call   c0027377 <__floatsisf>
c002247c:	5a                   	pop    edx
c002247d:	89 c6                	mov    esi,eax
c002247f:	ff 33                	push   DWORD PTR [ebx]
c0022481:	e8 f1 4e 00 00       	call   c0027377 <__floatsisf>
c0022486:	59                   	pop    ecx
c0022487:	5a                   	pop    edx
c0022488:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002248b:	50                   	push   eax
c002248c:	e8 f8 4a 00 00       	call   c0026f89 <__mulsf3>
c0022491:	59                   	pop    ecx
c0022492:	5a                   	pop    edx
c0022493:	50                   	push   eax
c0022494:	56                   	push   esi
c0022495:	e8 b2 4c 00 00       	call   c002714c <__divsf3>
c002249a:	89 04 24             	mov    DWORD PTR [esp],eax
c002249d:	e8 a5 61 00 00       	call   c0028647 <__extendsfdf2>
c00224a2:	59                   	pop    ecx
c00224a3:	5e                   	pop    esi
c00224a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224ac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224b8:	50                   	push   eax
c00224b9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224bc:	e8 d3 62 fe ff       	call   c0008794 <src_process>
c00224c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224c5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224c8:	83 c4 0c             	add    esp,0xc
c00224cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224ce:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224d1:	29 d0                	sub    eax,edx
c00224d3:	c1 e0 02             	shl    eax,0x2
c00224d6:	50                   	push   eax
c00224d7:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224da:	50                   	push   eax
c00224db:	51                   	push   ecx
c00224dc:	e8 9b e1 fd ff       	call   c000067c <memmove>
c00224e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224e5:	83 c4 44             	add    esp,0x44
c00224e8:	5b                   	pop    ebx
c00224e9:	5e                   	pop    esi
c00224ea:	c3                   	ret    
c00224eb:	90                   	nop

c00224ec <SoundChannel::buffer8(unsigned char*, int)>:
c00224ec:	55                   	push   ebp
c00224ed:	57                   	push   edi
c00224ee:	56                   	push   esi
c00224ef:	53                   	push   ebx
c00224f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224f4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224f8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224ff:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022502:	74 7a                	je     c002257e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022504:	85 ff                	test   edi,edi
c0022506:	7e 76                	jle    c002257e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022508:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002250c:	8d 70 01             	lea    esi,[eax+0x1]
c002250f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022512:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022515:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c002251c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002251f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022522:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022525:	74 5e                	je     c0022585 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022527:	83 ff 01             	cmp    edi,0x1
c002252a:	74 4b                	je     c0022577 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002252c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022530:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022533:	8d 70 01             	lea    esi,[eax+0x1]
c0022536:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022539:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c0022540:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022543:	b8 02 00 00 00       	mov    eax,0x2
c0022548:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002254b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002254e:	75 23                	jne    c0022573 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022550:	eb 27                	jmp    c0022579 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022552:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022557:	8d 71 01             	lea    esi,[ecx+0x1]
c002255a:	40                   	inc    eax
c002255b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002255e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022561:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c0022568:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002256b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002256e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022571:	74 06                	je     c0022579 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022573:	39 c7                	cmp    edi,eax
c0022575:	75 db                	jne    c0022552 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022577:	89 f8                	mov    eax,edi
c0022579:	5b                   	pop    ebx
c002257a:	5e                   	pop    esi
c002257b:	5f                   	pop    edi
c002257c:	5d                   	pop    ebp
c002257d:	c3                   	ret    
c002257e:	5b                   	pop    ebx
c002257f:	31 c0                	xor    eax,eax
c0022581:	5e                   	pop    esi
c0022582:	5f                   	pop    edi
c0022583:	5d                   	pop    ebp
c0022584:	c3                   	ret    
c0022585:	b8 01 00 00 00       	mov    eax,0x1
c002258a:	eb ed                	jmp    c0022579 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002258c <SoundDevice::SoundDevice(char const*)>:
c002258c:	83 ec 1c             	sub    esp,0x1c
c002258f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022593:	83 ec 08             	sub    esp,0x8
c0022596:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002259a:	50                   	push   eax
c002259b:	e8 60 20 ff ff       	call   c0014600 <Device::Device(char const*)>
c00225a0:	83 c4 10             	add    esp,0x10
c00225a3:	ba e0 ca 02 c0       	mov    edx,0xc002cae0
c00225a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ac:	89 10                	mov    DWORD PTR [eax],edx
c00225ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b2:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225d2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225d7:	7f 19                	jg     c00225f2 <SoundDevice::SoundDevice(char const*)+0x66>
c00225d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225e1:	83 c2 54             	add    edx,0x54
c00225e4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225f0:	eb e0                	jmp    c00225d2 <SoundDevice::SoundDevice(char const*)+0x46>
c00225f2:	90                   	nop
c00225f3:	83 c4 1c             	add    esp,0x1c
c00225f6:	c3                   	ret    
c00225f7:	90                   	nop

c00225f8 <SoundDevice::~SoundDevice()>:
c00225f8:	53                   	push   ebx
c00225f9:	83 ec 18             	sub    esp,0x18
c00225fc:	ba e0 ca 02 c0       	mov    edx,0xc002cae0
c0022601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022605:	89 10                	mov    DWORD PTR [eax],edx
c0022607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002260f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022614:	7f 46                	jg     c002265c <SoundDevice::~SoundDevice()+0x64>
c0022616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002261a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002261e:	83 c2 54             	add    edx,0x54
c0022621:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022625:	85 c0                	test   eax,eax
c0022627:	74 2d                	je     c0022656 <SoundDevice::~SoundDevice()+0x5e>
c0022629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002262d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022631:	83 c2 54             	add    edx,0x54
c0022634:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022638:	85 db                	test   ebx,ebx
c002263a:	74 1a                	je     c0022656 <SoundDevice::~SoundDevice()+0x5e>
c002263c:	83 ec 0c             	sub    esp,0xc
c002263f:	53                   	push   ebx
c0022640:	e8 21 fc ff ff       	call   c0022266 <SoundChannel::~SoundChannel()>
c0022645:	83 c4 10             	add    esp,0x10
c0022648:	83 ec 08             	sub    esp,0x8
c002264b:	6a 2c                	push   0x2c
c002264d:	53                   	push   ebx
c002264e:	e8 b7 08 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002265a:	eb b3                	jmp    c002260f <SoundDevice::~SoundDevice()+0x17>
c002265c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022660:	83 ec 0c             	sub    esp,0xc
c0022663:	50                   	push   eax
c0022664:	e8 79 1c ff ff       	call   c00142e2 <Device::~Device()>
c0022669:	83 c4 10             	add    esp,0x10
c002266c:	90                   	nop
c002266d:	83 c4 18             	add    esp,0x18
c0022670:	5b                   	pop    ebx
c0022671:	c3                   	ret    

c0022672 <SoundDevice::~SoundDevice()>:
c0022672:	83 ec 0c             	sub    esp,0xc
c0022675:	83 ec 0c             	sub    esp,0xc
c0022678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002267c:	e8 77 ff ff ff       	call   c00225f8 <SoundDevice::~SoundDevice()>
c0022681:	83 c4 10             	add    esp,0x10
c0022684:	83 ec 08             	sub    esp,0x8
c0022687:	68 e4 01 00 00       	push   0x1e4
c002268c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022690:	e8 75 08 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0022695:	83 c4 10             	add    esp,0x10
c0022698:	83 c4 0c             	add    esp,0xc
c002269b:	c3                   	ret    

c002269c <SoundDevice::getFreeChannelNum()>:
c002269c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226a0:	31 c0                	xor    eax,eax
c00226a2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226aa:	74 09                	je     c00226b5 <SoundDevice::getFreeChannelNum()+0x19>
c00226ac:	40                   	inc    eax
c00226ad:	83 f8 20             	cmp    eax,0x20
c00226b0:	75 f0                	jne    c00226a2 <SoundDevice::getFreeChannelNum()+0x6>
c00226b2:	83 c8 ff             	or     eax,0xffffffff
c00226b5:	c3                   	ret    

c00226b6 <SoundDevice::addChannel(SoundChannel*)>:
c00226b6:	56                   	push   esi
c00226b7:	53                   	push   ebx
c00226b8:	51                   	push   ecx
c00226b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226c1:	53                   	push   ebx
c00226c2:	e8 d5 ff ff ff       	call   c002269c <SoundDevice::getFreeChannelNum()>
c00226c7:	5a                   	pop    edx
c00226c8:	83 f8 ff             	cmp    eax,0xffffffff
c00226cb:	74 51                	je     c002271e <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226cd:	85 f6                	test   esi,esi
c00226cf:	74 4d                	je     c002271e <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226d1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226d8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226df:	75 30                	jne    c0022711 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226e1:	83 ec 0c             	sub    esp,0xc
c00226e4:	56                   	push   esi
c00226e5:	e8 42 fd ff ff       	call   c002242c <SoundChannel::getSampleRate()>
c00226ea:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226f0:	89 34 24             	mov    DWORD PTR [esp],esi
c00226f3:	e8 3c fd ff ff       	call   c0022434 <SoundChannel::getBits()>
c00226f8:	83 c4 0c             	add    esp,0xc
c00226fb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022701:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022703:	50                   	push   eax
c0022704:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002270a:	53                   	push   ebx
c002270b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002270e:	83 c4 10             	add    esp,0x10
c0022711:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022717:	b8 01 00 00 00       	mov    eax,0x1
c002271c:	eb 03                	jmp    c0022721 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002271e:	83 c8 ff             	or     eax,0xffffffff
c0022721:	5a                   	pop    edx
c0022722:	5b                   	pop    ebx
c0022723:	5e                   	pop    esi
c0022724:	c3                   	ret    
c0022725:	90                   	nop

c0022726 <SoundDevice::removeChannel(int)>:
c0022726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002272a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002272e:	83 fa 1f             	cmp    edx,0x1f
c0022731:	77 23                	ja     c0022756 <SoundDevice::removeChannel(int)+0x30>
c0022733:	8d 14 90             	lea    edx,[eax+edx*4]
c0022736:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002273d:	74 17                	je     c0022756 <SoundDevice::removeChannel(int)+0x30>
c002273f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022749:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002274f:	75 05                	jne    c0022756 <SoundDevice::removeChannel(int)+0x30>
c0022751:	8b 00                	mov    eax,DWORD PTR [eax]
c0022753:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022756:	c3                   	ret    
c0022757:	90                   	nop

c0022758 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022758:	57                   	push   edi
c0022759:	56                   	push   esi
c002275a:	53                   	push   ebx
c002275b:	31 db                	xor    ebx,ebx
c002275d:	83 ec 10             	sub    esp,0x10
c0022760:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022764:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022768:	0f 8d cb 00 00 00    	jge    c0022839 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002276e:	83 ec 0c             	sub    esp,0xc
c0022771:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022775:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022778:	e8 ca 5e 00 00       	call   c0028647 <__extendsfdf2>
c002277d:	83 c4 10             	add    esp,0x10
c0022780:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022784:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022788:	68 00 00 f0 3f       	push   0x3ff00000
c002278d:	6a 00                	push   0x0
c002278f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022797:	e8 37 4e 00 00       	call   c00275d3 <__adddf3>
c002279c:	83 c4 10             	add    esp,0x10
c002279f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227a7:	68 00 00 e0 3f       	push   0x3fe00000
c00227ac:	6a 00                	push   0x0
c00227ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b6:	e8 95 54 00 00       	call   c0027c50 <__muldf3>
c00227bb:	83 c4 10             	add    esp,0x10
c00227be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227c6:	68 00 00 60 40       	push   0x40600000
c00227cb:	6a 00                	push   0x0
c00227cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d5:	e8 76 54 00 00       	call   c0027c50 <__muldf3>
c00227da:	59                   	pop    ecx
c00227db:	5f                   	pop    edi
c00227dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ec:	e8 32 5d 00 00       	call   c0028523 <__truncdfsf2>
c00227f1:	5a                   	pop    edx
c00227f2:	89 c7                	mov    edi,eax
c00227f4:	59                   	pop    ecx
c00227f5:	68 00 00 fe 42       	push   0x42fe0000
c00227fa:	50                   	push   eax
c00227fb:	e8 cd 4d 00 00       	call   c00275cd <__gesf2>
c0022800:	83 c4 10             	add    esp,0x10
c0022803:	85 c0                	test   eax,eax
c0022805:	78 06                	js     c002280d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022807:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002280b:	eb 26                	jmp    c0022833 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002280d:	50                   	push   eax
c002280e:	50                   	push   eax
c002280f:	6a 00                	push   0x0
c0022811:	57                   	push   edi
c0022812:	e8 ba 4d 00 00       	call   c00275d1 <__lesf2>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	85 c0                	test   eax,eax
c002281c:	7f 06                	jg     c0022824 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002281e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022822:	eb 0f                	jmp    c0022833 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	57                   	push   edi
c0022828:	e8 af 5e 00 00       	call   c00286dc <lrintf>
c002282d:	83 c4 10             	add    esp,0x10
c0022830:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022833:	43                   	inc    ebx
c0022834:	e9 2b ff ff ff       	jmp    c0022764 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022839:	83 c4 10             	add    esp,0x10
c002283c:	5b                   	pop    ebx
c002283d:	5e                   	pop    esi
c002283e:	5f                   	pop    edi
c002283f:	c3                   	ret    

c0022840 <SoundDevice::getAudio(int, float*, float*)>:
c0022840:	55                   	push   ebp
c0022841:	57                   	push   edi
c0022842:	56                   	push   esi
c0022843:	53                   	push   ebx
c0022844:	31 db                	xor    ebx,ebx
c0022846:	83 ec 20             	sub    esp,0x20
c0022849:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002284d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022851:	c1 e0 02             	shl    eax,0x2
c0022854:	50                   	push   eax
c0022855:	6a 00                	push   0x0
c0022857:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002285b:	e8 18 df fd ff       	call   c0000778 <memset>
c0022860:	83 c4 10             	add    esp,0x10
c0022863:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022867:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002286e:	85 c0                	test   eax,eax
c0022870:	0f 84 d7 00 00 00    	je     c002294d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022876:	83 ec 0c             	sub    esp,0xc
c0022879:	50                   	push   eax
c002287a:	e8 a5 fb ff ff       	call   c0022424 <SoundChannel::paused()>
c002287f:	83 c4 10             	add    esp,0x10
c0022882:	84 c0                	test   al,al
c0022884:	0f 85 c3 00 00 00    	jne    c002294d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002288a:	83 ec 0c             	sub    esp,0xc
c002288d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022894:	e8 19 fa ff ff       	call   c00222b2 <SoundChannel::getVolume()>
c0022899:	83 c4 10             	add    esp,0x10
c002289c:	85 c0                	test   eax,eax
c002289e:	0f 84 a9 00 00 00    	je     c002294d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228a4:	83 ec 0c             	sub    esp,0xc
c00228a7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228ae:	e8 ff f9 ff ff       	call   c00222b2 <SoundChannel::getVolume()>
c00228b3:	83 ec 0c             	sub    esp,0xc
c00228b6:	50                   	push   eax
c00228b7:	e8 bb 4a 00 00       	call   c0027377 <__floatsisf>
c00228bc:	59                   	pop    ecx
c00228bd:	5d                   	pop    ebp
c00228be:	31 ed                	xor    ebp,ebp
c00228c0:	68 00 00 c8 42       	push   0x42c80000
c00228c5:	50                   	push   eax
c00228c6:	e8 81 48 00 00       	call   c002714c <__divsf3>
c00228cb:	83 c4 10             	add    esp,0x10
c00228ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228d6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228dc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228e0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228e7:	e8 60 fb ff ff       	call   c002244c <SoundChannel::unbuffer(float*, int, int)>
c00228ec:	83 c4 20             	add    esp,0x20
c00228ef:	89 c1                	mov    ecx,eax
c00228f1:	39 cd                	cmp    ebp,ecx
c00228f3:	7d 52                	jge    c0022947 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228f9:	50                   	push   eax
c00228fa:	50                   	push   eax
c00228fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228ff:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022902:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022906:	e8 7e 46 00 00       	call   c0026f89 <__mulsf3>
c002290b:	5a                   	pop    edx
c002290c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022910:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022916:	e8 5c 4a 00 00       	call   c0027377 <__floatsisf>
c002291b:	59                   	pop    ecx
c002291c:	5a                   	pop    edx
c002291d:	50                   	push   eax
c002291e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022922:	e8 25 48 00 00       	call   c002714c <__divsf3>
c0022927:	59                   	pop    ecx
c0022928:	5a                   	pop    edx
c0022929:	50                   	push   eax
c002292a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002292e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022931:	e8 30 43 00 00       	call   c0026c66 <__addsf3>
c0022936:	83 c4 10             	add    esp,0x10
c0022939:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002293d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022941:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022944:	45                   	inc    ebp
c0022945:	eb aa                	jmp    c00228f1 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022947:	39 cf                	cmp    edi,ecx
c0022949:	7e 02                	jle    c002294d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002294b:	89 cf                	mov    edi,ecx
c002294d:	43                   	inc    ebx
c002294e:	83 fb 20             	cmp    ebx,0x20
c0022951:	0f 85 10 ff ff ff    	jne    c0022867 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022957:	83 c4 1c             	add    esp,0x1c
c002295a:	89 f8                	mov    eax,edi
c002295c:	5b                   	pop    ebx
c002295d:	5e                   	pop    esi
c002295e:	5f                   	pop    edi
c002295f:	5d                   	pop    ebp
c0022960:	c3                   	ret    
c0022961:	90                   	nop

c0022962 <PCI::open(int, int, void*)>:
c0022962:	83 ec 18             	sub    esp,0x18
c0022965:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022969:	8b 10                	mov    edx,DWORD PTR [eax]
c002296b:	50                   	push   eax
c002296c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002296f:	31 c0                	xor    eax,eax
c0022971:	83 c4 1c             	add    esp,0x1c
c0022974:	c3                   	ret    
c0022975:	90                   	nop

c0022976 <PCI::close(int, int, void*)>:
c0022976:	31 c0                	xor    eax,eax
c0022978:	c3                   	ret    
c0022979:	90                   	nop

c002297a <PCI::PCI()>:
c002297a:	83 ec 0c             	sub    esp,0xc
c002297d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022981:	83 ec 08             	sub    esp,0x8
c0022984:	68 10 cb 02 c0       	push   0xc002cb10
c0022989:	50                   	push   eax
c002298a:	e8 f5 12 ff ff       	call   c0013c84 <Bus::Bus(char const*)>
c002298f:	83 c4 10             	add    esp,0x10
c0022992:	ba 7c cb 02 c0       	mov    edx,0xc002cb7c
c0022997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299b:	89 10                	mov    DWORD PTR [eax],edx
c002299d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229a7:	0f b6 d0             	movzx  edx,al
c00229aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ae:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229bf:	0f b6 d0             	movzx  edx,al
c00229c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229d5:	8d 50 01             	lea    edx,[eax+0x1]
c00229d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229dc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229e2:	0f b6 d0             	movzx  edx,al
c00229e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229ed:	83 c9 c0             	or     ecx,0xffffffc0
c00229f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229f4:	90                   	nop
c00229f5:	83 c4 0c             	add    esp,0xc
c00229f8:	c3                   	ret    
c00229f9:	90                   	nop

c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a03:	89 ca                	mov    edx,ecx
c0022a05:	c1 e0 10             	shl    eax,0x10
c0022a08:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a0e:	09 d0                	or     eax,edx
c0022a10:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a15:	c1 e2 08             	shl    edx,0x8
c0022a18:	09 d0                	or     eax,edx
c0022a1a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a1f:	c1 e2 0b             	shl    edx,0xb
c0022a22:	09 d0                	or     eax,edx
c0022a24:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a29:	0d 00 00 00 80       	or     eax,0x80000000
c0022a2e:	ef                   	out    dx,eax
c0022a2f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a34:	ed                   	in     eax,dx
c0022a35:	83 e1 02             	and    ecx,0x2
c0022a38:	0f b6 c9             	movzx  ecx,cl
c0022a3b:	c1 e1 03             	shl    ecx,0x3
c0022a3e:	d3 e8                	shr    eax,cl
c0022a40:	c3                   	ret    
c0022a41:	90                   	nop

c0022a42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a42:	6a 00                	push   0x0
c0022a44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a49:	50                   	push   eax
c0022a4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4f:	50                   	push   eax
c0022a50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a55:	50                   	push   eax
c0022a56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5a:	e8 9b ff ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a5f:	83 c4 14             	add    esp,0x14
c0022a62:	c3                   	ret    
c0022a63:	90                   	nop

c0022a64 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a64:	6a 0e                	push   0xe
c0022a66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6b:	50                   	push   eax
c0022a6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a71:	50                   	push   eax
c0022a72:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a77:	50                   	push   eax
c0022a78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a7c:	e8 79 ff ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a81:	83 c4 14             	add    esp,0x14
c0022a84:	0f b6 c0             	movzx  eax,al
c0022a87:	c3                   	ret    

c0022a88 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a88:	55                   	push   ebp
c0022a89:	57                   	push   edi
c0022a8a:	56                   	push   esi
c0022a8b:	53                   	push   ebx
c0022a8c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a91:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a96:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a9b:	6a 0a                	push   0xa
c0022a9d:	56                   	push   esi
c0022a9e:	55                   	push   ebp
c0022a9f:	57                   	push   edi
c0022aa0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022aa4:	e8 51 ff ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa9:	6a 0a                	push   0xa
c0022aab:	89 c3                	mov    ebx,eax
c0022aad:	56                   	push   esi
c0022aae:	0f b6 db             	movzx  ebx,bl
c0022ab1:	55                   	push   ebp
c0022ab2:	57                   	push   edi
c0022ab3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ab7:	e8 3e ff ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022abc:	83 c4 28             	add    esp,0x28
c0022abf:	25 00 ff 00 00       	and    eax,0xff00
c0022ac4:	09 d8                	or     eax,ebx
c0022ac6:	5b                   	pop    ebx
c0022ac7:	5e                   	pop    esi
c0022ac8:	5f                   	pop    edi
c0022ac9:	5d                   	pop    ebp
c0022aca:	c3                   	ret    
c0022acb:	90                   	nop

c0022acc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022acc:	6a 08                	push   0x8
c0022ace:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad3:	50                   	push   eax
c0022ad4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad9:	50                   	push   eax
c0022ada:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022adf:	50                   	push   eax
c0022ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae4:	e8 11 ff ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ae9:	83 c4 14             	add    esp,0x14
c0022aec:	0f b6 c4             	movzx  eax,ah
c0022aef:	c3                   	ret    

c0022af0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022af0:	6a 08                	push   0x8
c0022af2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af7:	50                   	push   eax
c0022af8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afd:	50                   	push   eax
c0022afe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b03:	50                   	push   eax
c0022b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b08:	e8 ed fe ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0d:	83 c4 14             	add    esp,0x14
c0022b10:	c3                   	ret    
c0022b11:	90                   	nop

c0022b12 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b12:	6a 3c                	push   0x3c
c0022b14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b19:	50                   	push   eax
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2a:	e8 cb fe ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2f:	83 c4 14             	add    esp,0x14
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b34:	6a 18                	push   0x18
c0022b36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3b:	50                   	push   eax
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b47:	50                   	push   eax
c0022b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b4c:	e8 a9 fe ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b51:	83 c4 14             	add    esp,0x14
c0022b54:	0f b6 c4             	movzx  eax,ah
c0022b57:	c3                   	ret    

c0022b58 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b58:	55                   	push   ebp
c0022b59:	57                   	push   edi
c0022b5a:	56                   	push   esi
c0022b5b:	53                   	push   ebx
c0022b5c:	50                   	push   eax
c0022b5d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b61:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b66:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b6b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b70:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b77:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b7a:	83 c3 10             	add    ebx,0x10
c0022b7d:	0f b6 c0             	movzx  eax,al
c0022b80:	0f b6 db             	movzx  ebx,bl
c0022b83:	50                   	push   eax
c0022b84:	51                   	push   ecx
c0022b85:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b89:	57                   	push   edi
c0022b8a:	55                   	push   ebp
c0022b8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b8f:	e8 66 fe ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b94:	53                   	push   ebx
c0022b95:	89 c6                	mov    esi,eax
c0022b97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b9b:	c1 e6 10             	shl    esi,0x10
c0022b9e:	51                   	push   ecx
c0022b9f:	57                   	push   edi
c0022ba0:	55                   	push   ebp
c0022ba1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ba5:	e8 50 fe ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022baa:	83 c4 2c             	add    esp,0x2c
c0022bad:	0f b7 c0             	movzx  eax,ax
c0022bb0:	5b                   	pop    ebx
c0022bb1:	09 f0                	or     eax,esi
c0022bb3:	5e                   	pop    esi
c0022bb4:	5f                   	pop    edi
c0022bb5:	5d                   	pop    ebp
c0022bb6:	c3                   	ret    
c0022bb7:	90                   	nop

c0022bb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bb8:	53                   	push   ebx
c0022bb9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bbe:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022bc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022bc7:	c1 e1 10             	shl    ecx,0x10
c0022bca:	25 fc 00 00 00       	and    eax,0xfc
c0022bcf:	09 c1                	or     ecx,eax
c0022bd1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bd6:	c1 e0 08             	shl    eax,0x8
c0022bd9:	09 c1                	or     ecx,eax
c0022bdb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022be0:	c1 e0 0b             	shl    eax,0xb
c0022be3:	09 c1                	or     ecx,eax
c0022be5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022beb:	89 c8                	mov    eax,ecx
c0022bed:	ef                   	out    dx,eax
c0022bee:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bf3:	ed                   	in     eax,dx
c0022bf4:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022bf9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022bfe:	74 0a                	je     c0022c0a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c00:	0f b7 d8             	movzx  ebx,ax
c0022c03:	89 d0                	mov    eax,edx
c0022c05:	c1 e0 10             	shl    eax,0x10
c0022c08:	eb 05                	jmp    c0022c0f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c0a:	66 31 c0             	xor    ax,ax
c0022c0d:	89 d3                	mov    ebx,edx
c0022c0f:	09 c3                	or     ebx,eax
c0022c11:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c16:	89 c8                	mov    eax,ecx
c0022c18:	ef                   	out    dx,eax
c0022c19:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c1e:	89 d8                	mov    eax,ebx
c0022c20:	ef                   	out    dx,eax
c0022c21:	5b                   	pop    ebx
c0022c22:	c3                   	ret    
c0022c23:	90                   	nop

c0022c24 <PCI::checkBus(unsigned char)>:
c0022c24:	56                   	push   esi
c0022c25:	53                   	push   ebx
c0022c26:	31 db                	xor    ebx,ebx
c0022c28:	51                   	push   ecx
c0022c29:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c2e:	52                   	push   edx
c0022c2f:	53                   	push   ebx
c0022c30:	43                   	inc    ebx
c0022c31:	56                   	push   esi
c0022c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c36:	e8 2b 03 00 00       	call   c0022f66 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c3b:	83 c4 10             	add    esp,0x10
c0022c3e:	83 fb 20             	cmp    ebx,0x20
c0022c41:	75 eb                	jne    c0022c2e <PCI::checkBus(unsigned char)+0xa>
c0022c43:	58                   	pop    eax
c0022c44:	5b                   	pop    ebx
c0022c45:	5e                   	pop    esi
c0022c46:	c3                   	ret    
c0022c47:	90                   	nop

c0022c48 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c48:	55                   	push   ebp
c0022c49:	57                   	push   edi
c0022c4a:	56                   	push   esi
c0022c4b:	53                   	push   ebx
c0022c4c:	83 ec 1c             	sub    esp,0x1c
c0022c4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c53:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c59:	0f 84 52 01 00 00    	je     c0022db1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c5f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c63:	66 81 f9 06 04       	cmp    cx,0x406
c0022c68:	75 2c                	jne    c0022c96 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c6a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c6f:	50                   	push   eax
c0022c70:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c75:	50                   	push   eax
c0022c76:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c7b:	50                   	push   eax
c0022c7c:	56                   	push   esi
c0022c7d:	e8 b2 fe ff ff       	call   c0022b34 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c82:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c86:	0f b6 c0             	movzx  eax,al
c0022c89:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c8d:	83 c4 2c             	add    esp,0x2c
c0022c90:	5b                   	pop    ebx
c0022c91:	5e                   	pop    esi
c0022c92:	5f                   	pop    edi
c0022c93:	5d                   	pop    ebp
c0022c94:	eb 8e                	jmp    c0022c24 <PCI::checkBus(unsigned char)>
c0022c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c9a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ca0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ca4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022ca8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cac:	88 d3                	mov    bl,dl
c0022cae:	85 c0                	test   eax,eax
c0022cb0:	74 33                	je     c0022ce5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cb2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cb5:	85 d2                	test   edx,edx
c0022cb7:	74 28                	je     c0022ce1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cb9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022cbf:	31 ef                	xor    edi,ebp
c0022cc1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022cc7:	75 18                	jne    c0022ce1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cc9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ccd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cd3:	75 0c                	jne    c0022ce1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cd5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cdb:	0f 84 d0 00 00 00    	je     c0022db1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ce3:	eb c9                	jmp    c0022cae <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ce5:	66 81 f9 01 06       	cmp    cx,0x601
c0022cea:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cee:	75 19                	jne    c0022d09 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	68 64 01 00 00       	push   0x164
c0022cf8:	e8 43 cb fe ff       	call   c000f840 <malloc>
c0022cfd:	89 c5                	mov    ebp,eax
c0022cff:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d02:	e8 95 0f 00 00       	call   c0023c9c <SATABus::SATABus()>
c0022d07:	eb 1e                	jmp    c0022d27 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d09:	66 81 f9 01 01       	cmp    cx,0x101
c0022d0e:	75 60                	jne    c0022d70 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d10:	83 ec 0c             	sub    esp,0xc
c0022d13:	68 70 02 00 00       	push   0x270
c0022d18:	e8 23 cb fe ff       	call   c000f840 <malloc>
c0022d1d:	89 c5                	mov    ebp,eax
c0022d1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d22:	e8 03 03 00 00       	call   c002302a <IDE::IDE()>
c0022d27:	58                   	pop    eax
c0022d28:	5a                   	pop    edx
c0022d29:	55                   	push   ebp
c0022d2a:	56                   	push   esi
c0022d2b:	e8 e0 16 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0022d30:	83 ec 1c             	sub    esp,0x1c
c0022d33:	b9 09 00 00 00       	mov    ecx,0x9
c0022d38:	fc                   	cld    
c0022d39:	89 e7                	mov    edi,esp
c0022d3b:	89 de                	mov    esi,ebx
c0022d3d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d3f:	55                   	push   ebp
c0022d40:	e8 d5 15 ff ff       	call   c001431a <Device::preOpenPCI(PCIDeviceInfo)>
c0022d45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d48:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d4c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d54:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d5c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d67:	83 c4 4c             	add    esp,0x4c
c0022d6a:	5b                   	pop    ebx
c0022d6b:	5e                   	pop    esi
c0022d6c:	5f                   	pop    edi
c0022d6d:	5d                   	pop    ebp
c0022d6e:	ff e0                	jmp    eax
c0022d70:	83 ec 0c             	sub    esp,0xc
c0022d73:	68 58 01 00 00       	push   0x158
c0022d78:	e8 c3 ca fe ff       	call   c000f840 <malloc>
c0022d7d:	89 c5                	mov    ebp,eax
c0022d7f:	58                   	pop    eax
c0022d80:	5a                   	pop    edx
c0022d81:	68 18 cb 02 c0       	push   0xc002cb18
c0022d86:	55                   	push   ebp
c0022d87:	e8 7a 19 ff ff       	call   c0014706 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d8c:	59                   	pop    ecx
c0022d8d:	5f                   	pop    edi
c0022d8e:	55                   	push   ebp
c0022d8f:	56                   	push   esi
c0022d90:	e8 7b 16 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0022d95:	b9 09 00 00 00       	mov    ecx,0x9
c0022d9a:	fc                   	cld    
c0022d9b:	89 df                	mov    edi,ebx
c0022d9d:	89 de                	mov    esi,ebx
c0022d9f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022da1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022da5:	83 c4 2c             	add    esp,0x2c
c0022da8:	5b                   	pop    ebx
c0022da9:	5e                   	pop    esi
c0022daa:	5f                   	pop    edi
c0022dab:	5d                   	pop    ebp
c0022dac:	e9 69 15 ff ff       	jmp    c001431a <Device::preOpenPCI(PCIDeviceInfo)>
c0022db1:	83 c4 1c             	add    esp,0x1c
c0022db4:	5b                   	pop    ebx
c0022db5:	5e                   	pop    esi
c0022db6:	5f                   	pop    edi
c0022db7:	5d                   	pop    ebp
c0022db8:	c3                   	ret    
c0022db9:	90                   	nop

c0022dba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dba:	55                   	push   ebp
c0022dbb:	57                   	push   edi
c0022dbc:	56                   	push   esi
c0022dbd:	53                   	push   ebx
c0022dbe:	83 ec 5c             	sub    esp,0x5c
c0022dc1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022dc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022dc9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022dcd:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022dd6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022dda:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022ddf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022de3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022de8:	6a 0c                	push   0xc
c0022dea:	55                   	push   ebp
c0022deb:	53                   	push   ebx
c0022dec:	57                   	push   edi
c0022ded:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022df4:	e8 01 fc ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022df9:	55                   	push   ebp
c0022dfa:	53                   	push   ebx
c0022dfb:	57                   	push   edi
c0022dfc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e03:	e8 80 fc ff ff       	call   c0022a88 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e08:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e0d:	83 c4 24             	add    esp,0x24
c0022e10:	55                   	push   ebp
c0022e11:	53                   	push   ebx
c0022e12:	57                   	push   edi
c0022e13:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e17:	e8 f6 fc ff ff       	call   c0022b12 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e1c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e20:	6a 3c                	push   0x3c
c0022e22:	55                   	push   ebp
c0022e23:	53                   	push   ebx
c0022e24:	57                   	push   edi
c0022e25:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e2c:	e8 c9 fb ff ff       	call   c00229fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e31:	0f b6 c4             	movzx  eax,ah
c0022e34:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e38:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e3c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e40:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0022e45:	83 c4 24             	add    esp,0x24
c0022e48:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e4e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e55:	74 6c                	je     c0022ec3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e57:	31 f6                	xor    esi,esi
c0022e59:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0022e5f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e65:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e6b:	7e 56                	jle    c0022ec3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e6d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e70:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e77:	39 cb                	cmp    ebx,ecx
c0022e79:	75 45                	jne    c0022ec0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e7b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e82:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e86:	75 38                	jne    c0022ec0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e88:	83 ec 0c             	sub    esp,0xc
c0022e8b:	68 32 cb 02 c0       	push   0xc002cb32
c0022e90:	e8 55 01 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0022e95:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0022e9b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ea1:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ea9:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ead:	52                   	push   edx
c0022eae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022eb2:	53                   	push   ebx
c0022eb3:	68 57 cb 02 c0       	push   0xc002cb57
c0022eb8:	e8 2d 01 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0022ebd:	83 c4 20             	add    esp,0x20
c0022ec0:	46                   	inc    esi
c0022ec1:	eb 96                	jmp    c0022e59 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ec3:	31 d2                	xor    edx,edx
c0022ec5:	83 ec 0c             	sub    esp,0xc
c0022ec8:	55                   	push   ebp
c0022ec9:	53                   	push   ebx
c0022eca:	57                   	push   edi
c0022ecb:	52                   	push   edx
c0022ecc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022ed0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ed7:	e8 7c fc ff ff       	call   c0022b58 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022edc:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022ee0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ee4:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ee8:	42                   	inc    edx
c0022ee9:	83 c4 20             	add    esp,0x20
c0022eec:	83 fa 06             	cmp    edx,0x6
c0022eef:	75 d4                	jne    c0022ec5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ef1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ef5:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ef9:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022efd:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f01:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f05:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f09:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f0e:	86 e0                	xchg   al,ah
c0022f10:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f15:	55                   	push   ebp
c0022f16:	53                   	push   ebx
c0022f17:	57                   	push   edi
c0022f18:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f1c:	e8 ab fb ff ff       	call   c0022acc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f21:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f25:	55                   	push   ebp
c0022f26:	53                   	push   ebx
c0022f27:	57                   	push   edi
c0022f28:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f2f:	e8 0e fb ff ff       	call   c0022a42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f34:	83 ec 0c             	sub    esp,0xc
c0022f37:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f3c:	b9 09 00 00 00       	mov    ecx,0x9
c0022f41:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f45:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f49:	fc                   	cld    
c0022f4a:	89 e7                	mov    edi,esp
c0022f4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f4e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f55:	e8 ee fc ff ff       	call   c0022c48 <PCI::foundDevice(PCIDeviceInfo)>
c0022f5a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f60:	5b                   	pop    ebx
c0022f61:	5e                   	pop    esi
c0022f62:	5f                   	pop    edi
c0022f63:	5d                   	pop    ebp
c0022f64:	c3                   	ret    
c0022f65:	90                   	nop

c0022f66 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f66:	55                   	push   ebp
c0022f67:	57                   	push   edi
c0022f68:	56                   	push   esi
c0022f69:	53                   	push   ebx
c0022f6a:	83 ec 0c             	sub    esp,0xc
c0022f6d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f71:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f7b:	6a 00                	push   0x0
c0022f7d:	56                   	push   esi
c0022f7e:	57                   	push   edi
c0022f7f:	55                   	push   ebp
c0022f80:	e8 bd fa ff ff       	call   c0022a42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f85:	6a 00                	push   0x0
c0022f87:	56                   	push   esi
c0022f88:	57                   	push   edi
c0022f89:	55                   	push   ebp
c0022f8a:	e8 2b fe ff ff       	call   c0022dba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f8f:	83 c4 20             	add    esp,0x20
c0022f92:	6a 00                	push   0x0
c0022f94:	56                   	push   esi
c0022f95:	57                   	push   edi
c0022f96:	55                   	push   ebp
c0022f97:	e8 c8 fa ff ff       	call   c0022a64 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f9c:	83 c4 10             	add    esp,0x10
c0022f9f:	84 c0                	test   al,al
c0022fa1:	79 27                	jns    c0022fca <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fa3:	bb 01 00 00 00       	mov    ebx,0x1
c0022fa8:	53                   	push   ebx
c0022fa9:	56                   	push   esi
c0022faa:	57                   	push   edi
c0022fab:	55                   	push   ebp
c0022fac:	e8 91 fa ff ff       	call   c0022a42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fb1:	83 c4 10             	add    esp,0x10
c0022fb4:	66 40                	inc    ax
c0022fb6:	74 0c                	je     c0022fc4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fb8:	53                   	push   ebx
c0022fb9:	56                   	push   esi
c0022fba:	57                   	push   edi
c0022fbb:	55                   	push   ebp
c0022fbc:	e8 f9 fd ff ff       	call   c0022dba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fc1:	83 c4 10             	add    esp,0x10
c0022fc4:	43                   	inc    ebx
c0022fc5:	83 fb 08             	cmp    ebx,0x8
c0022fc8:	75 de                	jne    c0022fa8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fca:	83 c4 0c             	add    esp,0xc
c0022fcd:	5b                   	pop    ebx
c0022fce:	5e                   	pop    esi
c0022fcf:	5f                   	pop    edi
c0022fd0:	5d                   	pop    ebp
c0022fd1:	c3                   	ret    

c0022fd2 <PCI::detect()>:
c0022fd2:	56                   	push   esi
c0022fd3:	53                   	push   ebx
c0022fd4:	53                   	push   ebx
c0022fd5:	31 db                	xor    ebx,ebx
c0022fd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fdb:	6a 00                	push   0x0
c0022fdd:	6a 00                	push   0x0
c0022fdf:	6a 00                	push   0x0
c0022fe1:	56                   	push   esi
c0022fe2:	e8 7d fa ff ff       	call   c0022a64 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fe7:	83 c4 10             	add    esp,0x10
c0022fea:	a8 80                	test   al,0x80
c0022fec:	75 21                	jne    c002300f <PCI::detect()+0x3d>
c0022fee:	51                   	push   ecx
c0022fef:	51                   	push   ecx
c0022ff0:	6a 00                	push   0x0
c0022ff2:	56                   	push   esi
c0022ff3:	e8 2c fc ff ff       	call   c0022c24 <PCI::checkBus(unsigned char)>
c0022ff8:	83 c4 10             	add    esp,0x10
c0022ffb:	eb 24                	jmp    c0023021 <PCI::detect()+0x4f>
c0022ffd:	52                   	push   edx
c0022ffe:	52                   	push   edx
c0022fff:	53                   	push   ebx
c0023000:	43                   	inc    ebx
c0023001:	56                   	push   esi
c0023002:	e8 1d fc ff ff       	call   c0022c24 <PCI::checkBus(unsigned char)>
c0023007:	83 c4 10             	add    esp,0x10
c002300a:	83 fb 08             	cmp    ebx,0x8
c002300d:	74 12                	je     c0023021 <PCI::detect()+0x4f>
c002300f:	53                   	push   ebx
c0023010:	6a 00                	push   0x0
c0023012:	6a 00                	push   0x0
c0023014:	56                   	push   esi
c0023015:	e8 28 fa ff ff       	call   c0022a42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002301a:	83 c4 10             	add    esp,0x10
c002301d:	66 40                	inc    ax
c002301f:	74 dc                	je     c0022ffd <PCI::detect()+0x2b>
c0023021:	58                   	pop    eax
c0023022:	5b                   	pop    ebx
c0023023:	5e                   	pop    esi
c0023024:	c3                   	ret    
c0023025:	90                   	nop

c0023026 <IDE::close(int, int, void*)>:
c0023026:	83 c8 ff             	or     eax,0xffffffff
c0023029:	c3                   	ret    

c002302a <IDE::IDE()>:
c002302a:	83 ec 0c             	sub    esp,0xc
c002302d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023031:	83 ec 08             	sub    esp,0x8
c0023034:	68 a0 cb 02 c0       	push   0xc002cba0
c0023039:	50                   	push   eax
c002303a:	e8 5d 17 ff ff       	call   c001479c <HardDiskController::HardDiskController(char const*)>
c002303f:	83 c4 10             	add    esp,0x10
c0023042:	ba e0 cd 02 c0       	mov    edx,0xc002cde0
c0023047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304b:	89 10                	mov    DWORD PTR [eax],edx
c002304d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023051:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023058:	90                   	nop
c0023059:	83 c4 0c             	add    esp,0xc
c002305c:	c3                   	ret    
c002305d:	90                   	nop

c002305e <IDE::prepareInterrupt(unsigned char)>:
c002305e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023063:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023067:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002306f:	c3                   	ret    

c0023070 <selectDrive(unsigned char, unsigned char)>:
c0023070:	c3                   	ret    
c0023071:	90                   	nop

c0023072 <IDE::getBase(unsigned char)>:
c0023072:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002307b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023083:	c3                   	ret    

c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023084:	55                   	push   ebp
c0023085:	57                   	push   edi
c0023086:	56                   	push   esi
c0023087:	53                   	push   ebx
c0023088:	83 ec 1c             	sub    esp,0x1c
c002308b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002308f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023093:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023096:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002309a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002309e:	80 f9 03             	cmp    cl,0x3
c00230a1:	77 51                	ja     c00230f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230a7:	0f b6 f2             	movzx  esi,dl
c00230aa:	0f b6 db             	movzx  ebx,bl
c00230ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230b0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230b4:	83 ca 80             	or     edx,0xffffff80
c00230b7:	0f b6 d2             	movzx  edx,dl
c00230ba:	52                   	push   edx
c00230bb:	6a 0c                	push   0xc
c00230bd:	56                   	push   esi
c00230be:	57                   	push   edi
c00230bf:	e8 c0 ff ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230cd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230d1:	ee                   	out    dx,al
c00230d2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230d7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230db:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230df:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230e3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230eb:	83 c4 2c             	add    esp,0x2c
c00230ee:	5b                   	pop    ebx
c00230ef:	5e                   	pop    esi
c00230f0:	5f                   	pop    edi
c00230f1:	5d                   	pop    ebp
c00230f2:	eb 90                	jmp    c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f4:	80 fb 07             	cmp    bl,0x7
c00230f7:	77 12                	ja     c002310b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230f9:	0f b6 d2             	movzx  edx,dl
c00230fc:	0f b6 db             	movzx  ebx,bl
c00230ff:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023107:	89 da                	mov    edx,ebx
c0023109:	eb 2f                	jmp    c002313a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002310b:	80 fb 0d             	cmp    bl,0xd
c002310e:	77 13                	ja     c0023123 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023110:	0f b6 d2             	movzx  edx,dl
c0023113:	0f b6 db             	movzx  ebx,bl
c0023116:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002311d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023121:	eb 17                	jmp    c002313a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023123:	80 fb 15             	cmp    bl,0x15
c0023126:	77 13                	ja     c002313b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023128:	0f b6 d2             	movzx  edx,dl
c002312b:	0f b6 db             	movzx  ebx,bl
c002312e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023136:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002313a:	ee                   	out    dx,al
c002313b:	83 c4 1c             	add    esp,0x1c
c002313e:	5b                   	pop    ebx
c002313f:	5e                   	pop    esi
c0023140:	5f                   	pop    edi
c0023141:	5d                   	pop    ebp
c0023142:	c3                   	ret    
c0023143:	90                   	nop

c0023144 <IDE::read(unsigned char, unsigned char)>:
c0023144:	55                   	push   ebp
c0023145:	57                   	push   edi
c0023146:	56                   	push   esi
c0023147:	53                   	push   ebx
c0023148:	83 ec 1c             	sub    esp,0x1c
c002314b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002314f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023153:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023156:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002315a:	3c 03                	cmp    al,0x3
c002315c:	77 43                	ja     c00231a1 <IDE::read(unsigned char, unsigned char)+0x5d>
c002315e:	0f b6 f2             	movzx  esi,dl
c0023161:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023164:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023168:	83 c8 80             	or     eax,0xffffff80
c002316b:	0f b6 c0             	movzx  eax,al
c002316e:	50                   	push   eax
c002316f:	6a 0c                	push   0xc
c0023171:	56                   	push   esi
c0023172:	57                   	push   edi
c0023173:	e8 0c ff ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023178:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002317d:	0f b6 c3             	movzx  eax,bl
c0023180:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023184:	ec                   	in     al,dx
c0023185:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023189:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002318e:	52                   	push   edx
c002318f:	6a 0c                	push   0xc
c0023191:	56                   	push   esi
c0023192:	57                   	push   edi
c0023193:	e8 ec fe ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023198:	83 c4 20             	add    esp,0x20
c002319b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002319f:	eb 49                	jmp    c00231ea <IDE::read(unsigned char, unsigned char)+0xa6>
c00231a1:	80 fb 07             	cmp    bl,0x7
c00231a4:	77 12                	ja     c00231b8 <IDE::read(unsigned char, unsigned char)+0x74>
c00231a6:	0f b6 d2             	movzx  edx,dl
c00231a9:	0f b6 c3             	movzx  eax,bl
c00231ac:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231b4:	89 c2                	mov    edx,eax
c00231b6:	eb 31                	jmp    c00231e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231b8:	80 fb 0d             	cmp    bl,0xd
c00231bb:	77 13                	ja     c00231d0 <IDE::read(unsigned char, unsigned char)+0x8c>
c00231bd:	0f b6 d2             	movzx  edx,dl
c00231c0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231c7:	0f b6 d3             	movzx  edx,bl
c00231ca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231ce:	eb 19                	jmp    c00231e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231d0:	31 c0                	xor    eax,eax
c00231d2:	80 fb 15             	cmp    bl,0x15
c00231d5:	77 13                	ja     c00231ea <IDE::read(unsigned char, unsigned char)+0xa6>
c00231d7:	0f b6 d2             	movzx  edx,dl
c00231da:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231e2:	0f b6 d3             	movzx  edx,bl
c00231e5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231e9:	ec                   	in     al,dx
c00231ea:	83 c4 1c             	add    esp,0x1c
c00231ed:	5b                   	pop    ebx
c00231ee:	5e                   	pop    esi
c00231ef:	5f                   	pop    edi
c00231f0:	5d                   	pop    ebp
c00231f1:	c3                   	ret    

c00231f2 <IDE::waitInterrupt(unsigned char)>:
c00231f2:	55                   	push   ebp
c00231f3:	57                   	push   edi
c00231f4:	56                   	push   esi
c00231f5:	53                   	push   ebx
c00231f6:	31 db                	xor    ebx,ebx
c00231f8:	83 ec 0c             	sub    esp,0xc
c00231fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231ff:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023204:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002320c:	89 e8                	mov    eax,ebp
c002320e:	84 c0                	test   al,al
c0023210:	75 34                	jne    c0023246 <IDE::waitInterrupt(unsigned char)+0x54>
c0023212:	52                   	push   edx
c0023213:	6a 0c                	push   0xc
c0023215:	56                   	push   esi
c0023216:	57                   	push   edi
c0023217:	e8 28 ff ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c002321c:	83 c4 10             	add    esp,0x10
c002321f:	a8 01                	test   al,0x1
c0023221:	75 2b                	jne    c002324e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023223:	f6 c3 04             	test   bl,0x4
c0023226:	75 16                	jne    c002323e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023228:	83 fb 32             	cmp    ebx,0x32
c002322b:	7e 11                	jle    c002323e <IDE::waitInterrupt(unsigned char)+0x4c>
c002322d:	50                   	push   eax
c002322e:	50                   	push   eax
c002322f:	6a 00                	push   0x0
c0023231:	68 80 96 98 00       	push   0x989680
c0023236:	e8 8b b1 ff ff       	call   c001e3c6 <nanoSleep(unsigned long long)>
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	83 fb 3c             	cmp    ebx,0x3c
c0023241:	74 0b                	je     c002324e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023243:	43                   	inc    ebx
c0023244:	eb be                	jmp    c0023204 <IDE::waitInterrupt(unsigned char)+0x12>
c0023246:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002324e:	83 c4 0c             	add    esp,0xc
c0023251:	89 e8                	mov    eax,ebp
c0023253:	5b                   	pop    ebx
c0023254:	5e                   	pop    esi
c0023255:	5f                   	pop    edi
c0023256:	5d                   	pop    ebp
c0023257:	c3                   	ret    

c0023258 <ideChannel0IRQHandler(regs*, void*)>:
c0023258:	83 ec 10             	sub    esp,0x10
c002325b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002325f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023266:	6a 07                	push   0x7
c0023268:	6a 00                	push   0x0
c002326a:	50                   	push   eax
c002326b:	e8 d4 fe ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023270:	83 c4 1c             	add    esp,0x1c
c0023273:	c3                   	ret    

c0023274 <ideChannel1IRQHandler(regs*, void*)>:
c0023274:	83 ec 10             	sub    esp,0x10
c0023277:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002327b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023282:	6a 07                	push   0x7
c0023284:	6a 01                	push   0x1
c0023286:	50                   	push   eax
c0023287:	e8 b8 fe ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c002328c:	83 c4 1c             	add    esp,0x1c
c002328f:	c3                   	ret    

c0023290 <IDE::enableIRQs(unsigned char, bool)>:
c0023290:	57                   	push   edi
c0023291:	56                   	push   esi
c0023292:	be 04 00 00 00       	mov    esi,0x4
c0023297:	53                   	push   ebx
c0023298:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002329d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232a1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232a6:	0f 94 c0             	sete   al
c00232a9:	d1 e0                	shl    eax,1
c00232ab:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232b2:	0f b6 c0             	movzx  eax,al
c00232b5:	50                   	push   eax
c00232b6:	6a 0c                	push   0xc
c00232b8:	57                   	push   edi
c00232b9:	53                   	push   ebx
c00232ba:	e8 c5 fd ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232bf:	83 c4 10             	add    esp,0x10
c00232c2:	50                   	push   eax
c00232c3:	6a 0c                	push   0xc
c00232c5:	57                   	push   edi
c00232c6:	53                   	push   ebx
c00232c7:	e8 78 fe ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00232cc:	83 c4 10             	add    esp,0x10
c00232cf:	4e                   	dec    esi
c00232d0:	75 f0                	jne    c00232c2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232d2:	5b                   	pop    ebx
c00232d3:	5e                   	pop    esi
c00232d4:	5f                   	pop    edi
c00232d5:	c3                   	ret    

c00232d6 <IDE::open(int, int, void*)>:
c00232d6:	55                   	push   ebp
c00232d7:	57                   	push   edi
c00232d8:	56                   	push   esi
c00232d9:	53                   	push   ebx
c00232da:	83 ec 1c             	sub    esp,0x1c
c00232dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232e1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232ea:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232f3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232fa:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023301:	0f 85 b0 02 00 00    	jne    c00235b7 <IDE::open(int, int, void*)+0x2e1>
c0023307:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002330d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023311:	83 e0 7f             	and    eax,0x7f
c0023314:	3c 05                	cmp    al,0x5
c0023316:	74 04                	je     c002331c <IDE::open(int, int, void*)+0x46>
c0023318:	3c 0f                	cmp    al,0xf
c002331a:	75 32                	jne    c002334e <IDE::open(int, int, void*)+0x78>
c002331c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023322:	83 e0 fc             	and    eax,0xfffffffc
c0023325:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002332c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023332:	83 e0 fc             	and    eax,0xfffffffc
c0023335:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002333c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023342:	83 e0 fc             	and    eax,0xfffffffc
c0023345:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002334c:	eb 14                	jmp    c0023362 <IDE::open(int, int, void*)+0x8c>
c002334e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023358:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023362:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023369:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023370:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023374:	89 c6                	mov    esi,eax
c0023376:	bf f8 0c 00 00       	mov    edi,0xcf8
c002337b:	c1 e6 10             	shl    esi,0x10
c002337e:	89 e8                	mov    eax,ebp
c0023380:	89 fa                	mov    edx,edi
c0023382:	c1 e0 0b             	shl    eax,0xb
c0023385:	09 f0                	or     eax,esi
c0023387:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002338e:	c1 e6 08             	shl    esi,0x8
c0023391:	09 c6                	or     esi,eax
c0023393:	89 f0                	mov    eax,esi
c0023395:	0d 08 00 00 80       	or     eax,0x80000008
c002339a:	ef                   	out    dx,eax
c002339b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233a0:	89 ca                	mov    edx,ecx
c00233a2:	ed                   	in     eax,dx
c00233a3:	c1 e8 10             	shr    eax,0x10
c00233a6:	3d ff ff 00 00       	cmp    eax,0xffff
c00233ab:	0f 84 f5 00 00 00    	je     c00234a6 <IDE::open(int, int, void*)+0x1d0>
c00233b1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233b7:	89 fa                	mov    edx,edi
c00233b9:	89 f0                	mov    eax,esi
c00233bb:	ef                   	out    dx,eax
c00233bc:	b0 fe                	mov    al,0xfe
c00233be:	89 ca                	mov    edx,ecx
c00233c0:	ee                   	out    dx,al
c00233c1:	89 f0                	mov    eax,esi
c00233c3:	89 fa                	mov    edx,edi
c00233c5:	ef                   	out    dx,eax
c00233c6:	89 ca                	mov    edx,ecx
c00233c8:	ed                   	in     eax,dx
c00233c9:	3c fe                	cmp    al,0xfe
c00233cb:	0f 85 a9 00 00 00    	jne    c002347a <IDE::open(int, int, void*)+0x1a4>
c00233d1:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c00233d7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233de:	74 33                	je     c0023413 <IDE::open(int, int, void*)+0x13d>
c00233e0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233e6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233ea:	40                   	inc    eax
c00233eb:	83 ec 0c             	sub    esp,0xc
c00233ee:	0f b6 c0             	movzx  eax,al
c00233f1:	50                   	push   eax
c00233f2:	55                   	push   ebp
c00233f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233f7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233fd:	51                   	push   ecx
c00233fe:	e8 f1 4e ff ff       	call   c00182f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023403:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023408:	83 c4 1c             	add    esp,0x1c
c002340b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023411:	eb 0a                	jmp    c002341d <IDE::open(int, int, void*)+0x147>
c0023413:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002341d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023424:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002342b:	c1 e1 10             	shl    ecx,0x10
c002342e:	c1 e0 08             	shl    eax,0x8
c0023431:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023436:	09 c1                	or     ecx,eax
c0023438:	89 fa                	mov    edx,edi
c002343a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023441:	c1 e0 0b             	shl    eax,0xb
c0023444:	09 c1                	or     ecx,eax
c0023446:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002344c:	89 c8                	mov    eax,ecx
c002344e:	ef                   	out    dx,eax
c002344f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023454:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002345a:	89 f2                	mov    edx,esi
c002345c:	ee                   	out    dx,al
c002345d:	89 c8                	mov    eax,ecx
c002345f:	89 fa                	mov    edx,edi
c0023461:	ef                   	out    dx,eax
c0023462:	89 f2                	mov    edx,esi
c0023464:	ed                   	in     eax,dx
c0023465:	0f b6 c0             	movzx  eax,al
c0023468:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002346e:	74 46                	je     c00234b6 <IDE::open(int, int, void*)+0x1e0>
c0023470:	83 ec 0c             	sub    esp,0xc
c0023473:	68 b8 cb 02 c0       	push   0xc002cbb8
c0023478:	eb 34                	jmp    c00234ae <IDE::open(int, int, void*)+0x1d8>
c002347a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023483:	75 17                	jne    c002349c <IDE::open(int, int, void*)+0x1c6>
c0023485:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002348a:	74 07                	je     c0023493 <IDE::open(int, int, void*)+0x1bd>
c002348c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023491:	75 09                	jne    c002349c <IDE::open(int, int, void*)+0x1c6>
c0023493:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002349a:	eb 1a                	jmp    c00234b6 <IDE::open(int, int, void*)+0x1e0>
c002349c:	83 ec 0c             	sub    esp,0xc
c002349f:	68 c0 cb 02 c0       	push   0xc002cbc0
c00234a4:	eb 08                	jmp    c00234ae <IDE::open(int, int, void*)+0x1d8>
c00234a6:	83 ec 0c             	sub    esp,0xc
c00234a9:	68 f1 cb 02 c0       	push   0xc002cbf1
c00234ae:	e8 e8 71 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00234b3:	83 c4 10             	add    esp,0x10
c00234b6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234bd:	79 1a                	jns    c00234d9 <IDE::open(int, int, void*)+0x203>
c00234bf:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234c5:	83 e0 fc             	and    eax,0xfffffffc
c00234c8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234cf:	83 c0 08             	add    eax,0x8
c00234d2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234df:	89 c2                	mov    edx,eax
c00234e1:	83 e2 0f             	and    edx,0xf
c00234e4:	66 83 fa 08          	cmp    dx,0x8
c00234e8:	75 0a                	jne    c00234f4 <IDE::open(int, int, void*)+0x21e>
c00234ea:	83 e8 02             	sub    eax,0x2
c00234ed:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234f4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234fa:	89 c2                	mov    edx,eax
c00234fc:	83 e2 0f             	and    edx,0xf
c00234ff:	66 83 fa 08          	cmp    dx,0x8
c0023503:	75 0a                	jne    c002350f <IDE::open(int, int, void*)+0x239>
c0023505:	83 e8 02             	sub    eax,0x2
c0023508:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002350f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023516:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002351d:	89 d0                	mov    eax,edx
c002351f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023522:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023526:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002352a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002352d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023532:	0f b6 c9             	movzx  ecx,cl
c0023535:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002353c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002353f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023543:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023547:	8d 50 02             	lea    edx,[eax+0x2]
c002354a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002354f:	0f b6 d2             	movzx  edx,dl
c0023552:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023558:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002355b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002355f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023563:	8d 48 03             	lea    ecx,[eax+0x3]
c0023566:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002356b:	0f b6 c9             	movzx  ecx,cl
c002356e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023574:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023577:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002357b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002357f:	8d 50 04             	lea    edx,[eax+0x4]
c0023582:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023588:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002358d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023594:	66 85 f6             	test   si,si
c0023597:	74 3e                	je     c00235d7 <IDE::open(int, int, void*)+0x301>
c0023599:	0f b6 d2             	movzx  edx,dl
c002359c:	83 c0 05             	add    eax,0x5
c002359f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235a2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235a6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235aa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235b5:	eb 20                	jmp    c00235d7 <IDE::open(int, int, void*)+0x301>
c00235b7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235c1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235cb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235d2:	e9 02 ff ff ff       	jmp    c00234d9 <IDE::open(int, int, void*)+0x203>
c00235d7:	52                   	push   edx
c00235d8:	52                   	push   edx
c00235d9:	6a 00                	push   0x0
c00235db:	53                   	push   ebx
c00235dc:	e8 7d fa ff ff       	call   c002305e <IDE::prepareInterrupt(unsigned char)>
c00235e1:	59                   	pop    ecx
c00235e2:	5e                   	pop    esi
c00235e3:	6a 01                	push   0x1
c00235e5:	53                   	push   ebx
c00235e6:	e8 73 fa ff ff       	call   c002305e <IDE::prepareInterrupt(unsigned char)>
c00235eb:	83 c4 0c             	add    esp,0xc
c00235ee:	6a 00                	push   0x0
c00235f0:	6a 00                	push   0x0
c00235f2:	53                   	push   ebx
c00235f3:	e8 98 fc ff ff       	call   c0023290 <IDE::enableIRQs(unsigned char, bool)>
c00235f8:	83 c4 0c             	add    esp,0xc
c00235fb:	6a 00                	push   0x0
c00235fd:	6a 01                	push   0x1
c00235ff:	53                   	push   ebx
c0023600:	e8 8b fc ff ff       	call   c0023290 <IDE::enableIRQs(unsigned char, bool)>
c0023605:	83 c4 10             	add    esp,0x10
c0023608:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002360f:	74 40                	je     c0023651 <IDE::open(int, int, void*)+0x37b>
c0023611:	83 ec 0c             	sub    esp,0xc
c0023614:	68 1b cc 02 c0       	push   0xc002cc1b
c0023619:	e8 cc f9 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c002361e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023621:	6a 01                	push   0x1
c0023623:	68 58 32 02 c0       	push   0xc0023258
c0023628:	6a 0e                	push   0xe
c002362a:	53                   	push   ebx
c002362b:	e8 64 0d ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023630:	83 c4 14             	add    esp,0x14
c0023633:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023639:	53                   	push   ebx
c002363a:	6a 01                	push   0x1
c002363c:	68 74 32 02 c0       	push   0xc0023274
c0023641:	6a 0f                	push   0xf
c0023643:	53                   	push   ebx
c0023644:	e8 4b 0d ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023649:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002364f:	eb 4a                	jmp    c002369b <IDE::open(int, int, void*)+0x3c5>
c0023651:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002365b:	50                   	push   eax
c002365c:	6a 0f                	push   0xf
c002365e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023664:	68 37 cc 02 c0       	push   0xc002cc37
c0023669:	e8 7c f9 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c002366e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023671:	6a 00                	push   0x0
c0023673:	68 58 32 02 c0       	push   0xc0023258
c0023678:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002367e:	53                   	push   ebx
c002367f:	e8 10 0d ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023684:	83 c4 14             	add    esp,0x14
c0023687:	53                   	push   ebx
c0023688:	6a 00                	push   0x0
c002368a:	68 74 32 02 c0       	push   0xc0023274
c002368f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023695:	53                   	push   ebx
c0023696:	e8 f9 0c ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002369b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002369d:	83 c4 20             	add    esp,0x20
c00236a0:	83 ec 0c             	sub    esp,0xc
c00236a3:	53                   	push   ebx
c00236a4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 07                	push   0x7
c00236ac:	6a 00                	push   0x0
c00236ae:	53                   	push   ebx
c00236af:	e8 90 fa ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00236b4:	83 c4 0c             	add    esp,0xc
c00236b7:	6a 07                	push   0x7
c00236b9:	6a 01                	push   0x1
c00236bb:	53                   	push   ebx
c00236bc:	e8 83 fa ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00236c1:	83 c4 0c             	add    esp,0xc
c00236c4:	6a 01                	push   0x1
c00236c6:	6a 00                	push   0x0
c00236c8:	53                   	push   ebx
c00236c9:	e8 c2 fb ff ff       	call   c0023290 <IDE::enableIRQs(unsigned char, bool)>
c00236ce:	83 c4 0c             	add    esp,0xc
c00236d1:	6a 01                	push   0x1
c00236d3:	6a 01                	push   0x1
c00236d5:	53                   	push   ebx
c00236d6:	e8 b5 fb ff ff       	call   c0023290 <IDE::enableIRQs(unsigned char, bool)>
c00236db:	83 c4 2c             	add    esp,0x2c
c00236de:	31 c0                	xor    eax,eax
c00236e0:	5b                   	pop    ebx
c00236e1:	5e                   	pop    esi
c00236e2:	5f                   	pop    edi
c00236e3:	5d                   	pop    ebp
c00236e4:	c3                   	ret    
c00236e5:	90                   	nop

c00236e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236e6:	55                   	push   ebp
c00236e7:	57                   	push   edi
c00236e8:	56                   	push   esi
c00236e9:	53                   	push   ebx
c00236ea:	83 ec 1c             	sub    esp,0x1c
c00236ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236f5:	8d 50 f8             	lea    edx,[eax-0x8]
c00236f8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236fc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023700:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023704:	80 fa 03             	cmp    dl,0x3
c0023707:	77 5d                	ja     c0023766 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023709:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002370d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023711:	0f b6 db             	movzx  ebx,bl
c0023714:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023717:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002371b:	83 ca 80             	or     edx,0xffffff80
c002371e:	0f b6 d2             	movzx  edx,dl
c0023721:	52                   	push   edx
c0023722:	6a 0c                	push   0xc
c0023724:	53                   	push   ebx
c0023725:	56                   	push   esi
c0023726:	e8 59 f9 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002372b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023730:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023734:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023738:	0f b6 c0             	movzx  eax,al
c002373b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002373f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023741:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023746:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002374a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002374e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023752:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002375a:	83 c4 2c             	add    esp,0x2c
c002375d:	5b                   	pop    ebx
c002375e:	5e                   	pop    esi
c002375f:	5f                   	pop    edi
c0023760:	5d                   	pop    ebp
c0023761:	e9 1e f9 ff ff       	jmp    c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023766:	3c 07                	cmp    al,0x7
c0023768:	77 10                	ja     c002377a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002376a:	0f b6 db             	movzx  ebx,bl
c002376d:	0f b6 d0             	movzx  edx,al
c0023770:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023778:	eb 2d                	jmp    c00237a7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002377a:	3c 0d                	cmp    al,0xd
c002377c:	77 13                	ja     c0023791 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002377e:	0f b6 db             	movzx  ebx,bl
c0023781:	0f b6 c0             	movzx  eax,al
c0023784:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002378b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002378f:	eb 16                	jmp    c00237a7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023791:	3c 15                	cmp    al,0x15
c0023793:	77 14                	ja     c00237a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023795:	0f b6 db             	movzx  ebx,bl
c0023798:	0f b6 c0             	movzx  eax,al
c002379b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237a3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237a9:	83 c4 1c             	add    esp,0x1c
c00237ac:	5b                   	pop    ebx
c00237ad:	5e                   	pop    esi
c00237ae:	5f                   	pop    edi
c00237af:	5d                   	pop    ebp
c00237b0:	c3                   	ret    
c00237b1:	90                   	nop

c00237b2 <IDE::detect()>:
c00237b2:	55                   	push   ebp
c00237b3:	57                   	push   edi
c00237b4:	56                   	push   esi
c00237b5:	53                   	push   ebx
c00237b6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237bc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237c3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237ca:	0f 85 be 02 00 00    	jne    c0023a8e <IDE::detect()+0x2dc>
c00237d0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237d7:	31 f6                	xor    esi,esi
c00237d9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237e1:	31 ed                	xor    ebp,ebp
c00237e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237e7:	c1 e0 06             	shl    eax,0x6
c00237ea:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237f2:	89 e8                	mov    eax,ebp
c00237f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237f8:	c1 e0 04             	shl    eax,0x4
c00237fb:	83 c8 a0             	or     eax,0xffffffa0
c00237fe:	0f b6 c0             	movzx  eax,al
c0023801:	50                   	push   eax
c0023802:	6a 06                	push   0x6
c0023804:	56                   	push   esi
c0023805:	53                   	push   ebx
c0023806:	e8 79 f8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002380b:	83 c4 0c             	add    esp,0xc
c002380e:	6a 0c                	push   0xc
c0023810:	56                   	push   esi
c0023811:	53                   	push   ebx
c0023812:	e8 2d f9 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023817:	83 c4 0c             	add    esp,0xc
c002381a:	6a 0c                	push   0xc
c002381c:	56                   	push   esi
c002381d:	53                   	push   ebx
c002381e:	e8 21 f9 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023823:	83 c4 0c             	add    esp,0xc
c0023826:	6a 0c                	push   0xc
c0023828:	56                   	push   esi
c0023829:	53                   	push   ebx
c002382a:	e8 15 f9 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c002382f:	83 c4 0c             	add    esp,0xc
c0023832:	6a 0c                	push   0xc
c0023834:	56                   	push   esi
c0023835:	53                   	push   ebx
c0023836:	e8 09 f9 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c002383b:	68 ec 00 00 00       	push   0xec
c0023840:	6a 07                	push   0x7
c0023842:	56                   	push   esi
c0023843:	53                   	push   ebx
c0023844:	e8 3b f8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023849:	83 c4 1c             	add    esp,0x1c
c002384c:	6a 0c                	push   0xc
c002384e:	56                   	push   esi
c002384f:	53                   	push   ebx
c0023850:	e8 ef f8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023855:	83 c4 0c             	add    esp,0xc
c0023858:	6a 0c                	push   0xc
c002385a:	56                   	push   esi
c002385b:	53                   	push   ebx
c002385c:	e8 e3 f8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023861:	83 c4 0c             	add    esp,0xc
c0023864:	6a 0c                	push   0xc
c0023866:	56                   	push   esi
c0023867:	53                   	push   ebx
c0023868:	e8 d7 f8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c002386d:	83 c4 0c             	add    esp,0xc
c0023870:	6a 0c                	push   0xc
c0023872:	56                   	push   esi
c0023873:	53                   	push   ebx
c0023874:	e8 cb f8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023879:	83 c4 0c             	add    esp,0xc
c002387c:	6a 0c                	push   0xc
c002387e:	56                   	push   esi
c002387f:	53                   	push   ebx
c0023880:	e8 bf f8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023885:	83 c4 10             	add    esp,0x10
c0023888:	84 c0                	test   al,al
c002388a:	0f 84 8b 01 00 00    	je     c0023a1b <IDE::detect()+0x269>
c0023890:	31 ff                	xor    edi,edi
c0023892:	50                   	push   eax
c0023893:	6a 0c                	push   0xc
c0023895:	56                   	push   esi
c0023896:	53                   	push   ebx
c0023897:	e8 a8 f8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c002389c:	83 c4 10             	add    esp,0x10
c002389f:	a8 01                	test   al,0x1
c00238a1:	0f 85 8e 01 00 00    	jne    c0023a35 <IDE::detect()+0x283>
c00238a7:	84 c0                	test   al,al
c00238a9:	78 04                	js     c00238af <IDE::detect()+0xfd>
c00238ab:	a8 08                	test   al,0x8
c00238ad:	75 27                	jne    c00238d6 <IDE::detect()+0x124>
c00238af:	47                   	inc    edi
c00238b0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238b6:	7e da                	jle    c0023892 <IDE::detect()+0xe0>
c00238b8:	50                   	push   eax
c00238b9:	50                   	push   eax
c00238ba:	6a 00                	push   0x0
c00238bc:	68 40 4b 4c 00       	push   0x4c4b40
c00238c1:	e8 00 ab ff ff       	call   c001e3c6 <nanoSleep(unsigned long long)>
c00238c6:	83 c4 10             	add    esp,0x10
c00238c9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238cf:	75 c1                	jne    c0023892 <IDE::detect()+0xe0>
c00238d1:	e9 5f 01 00 00       	jmp    c0023a35 <IDE::detect()+0x283>
c00238d6:	31 c9                	xor    ecx,ecx
c00238d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238e0:	83 ec 0c             	sub    esp,0xc
c00238e3:	68 80 00 00 00       	push   0x80
c00238e8:	57                   	push   edi
c00238e9:	6a 00                	push   0x0
c00238eb:	56                   	push   esi
c00238ec:	53                   	push   ebx
c00238ed:	e8 f4 fd ff ff       	call   c00236e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238f2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238fb:	89 d1                	mov    ecx,edx
c00238fd:	c1 e0 06             	shl    eax,0x6
c0023900:	01 d8                	add    eax,ebx
c0023902:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023909:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023910:	89 f2                	mov    edx,esi
c0023912:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023918:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002391c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023922:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023926:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002392d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023935:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002393c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023944:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002394a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023951:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023957:	8d 54 24 58          	lea    edx,[esp+0x58]
c002395b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002395f:	83 c4 20             	add    esp,0x20
c0023962:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023965:	83 c0 02             	add    eax,0x2
c0023968:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002396e:	83 c7 02             	add    edi,0x2
c0023971:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023974:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002397a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002397e:	75 e2                	jne    c0023962 <IDE::detect()+0x1b0>
c0023980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023984:	c1 e0 06             	shl    eax,0x6
c0023987:	01 d8                	add    eax,ebx
c0023989:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002398f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023996:	66 c1 ea 09          	shr    dx,0x9
c002399a:	83 e2 01             	and    edx,0x1
c002399d:	84 c9                	test   cl,cl
c002399f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239a5:	75 2f                	jne    c00239d6 <IDE::detect()+0x224>
c00239a7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239ad:	85 c0                	test   eax,eax
c00239af:	74 66                	je     c0023a17 <IDE::detect()+0x265>
c00239b1:	50                   	push   eax
c00239b2:	55                   	push   ebp
c00239b3:	56                   	push   esi
c00239b4:	68 53 cc 02 c0       	push   0xc002cc53
c00239b9:	e8 2c f6 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00239be:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239c5:	e8 76 be fe ff       	call   c000f840 <malloc>
c00239ca:	89 c7                	mov    edi,eax
c00239cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00239cf:	e8 78 06 00 00       	call   c002404c <ATA::ATA()>
c00239d4:	eb 28                	jmp    c00239fe <IDE::detect()+0x24c>
c00239d6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239dc:	55                   	push   ebp
c00239dd:	56                   	push   esi
c00239de:	68 82 cc 02 c0       	push   0xc002cc82
c00239e3:	e8 02 f6 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00239e8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00239ef:	e8 4c be fe ff       	call   c000f840 <malloc>
c00239f4:	89 c7                	mov    edi,eax
c00239f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00239f9:	e8 8e 0c 00 00       	call   c002468c <ATAPI::ATAPI()>
c00239fe:	5a                   	pop    edx
c00239ff:	59                   	pop    ecx
c0023a00:	57                   	push   edi
c0023a01:	53                   	push   ebx
c0023a02:	e8 09 0a ff ff       	call   c0014410 <Device::addChild(Device*)>
c0023a07:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a09:	53                   	push   ebx
c0023a0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a0e:	6a 00                	push   0x0
c0023a10:	57                   	push   edi
c0023a11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a14:	83 c4 20             	add    esp,0x20
c0023a17:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a1b:	4d                   	dec    ebp
c0023a1c:	74 0a                	je     c0023a28 <IDE::detect()+0x276>
c0023a1e:	bd 01 00 00 00       	mov    ebp,0x1
c0023a23:	e9 bb fd ff ff       	jmp    c00237e3 <IDE::detect()+0x31>
c0023a28:	4e                   	dec    esi
c0023a29:	74 63                	je     c0023a8e <IDE::detect()+0x2dc>
c0023a2b:	be 01 00 00 00       	mov    esi,0x1
c0023a30:	e9 ac fd ff ff       	jmp    c00237e1 <IDE::detect()+0x2f>
c0023a35:	50                   	push   eax
c0023a36:	6a 04                	push   0x4
c0023a38:	56                   	push   esi
c0023a39:	53                   	push   ebx
c0023a3a:	e8 05 f7 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023a3f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a43:	83 c4 0c             	add    esp,0xc
c0023a46:	6a 05                	push   0x5
c0023a48:	56                   	push   esi
c0023a49:	53                   	push   ebx
c0023a4a:	e8 f5 f6 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a56:	80 fa 14             	cmp    dl,0x14
c0023a59:	75 04                	jne    c0023a5f <IDE::detect()+0x2ad>
c0023a5b:	3c eb                	cmp    al,0xeb
c0023a5d:	eb 07                	jmp    c0023a66 <IDE::detect()+0x2b4>
c0023a5f:	3c 96                	cmp    al,0x96
c0023a61:	75 b8                	jne    c0023a1b <IDE::detect()+0x269>
c0023a63:	80 fa 69             	cmp    dl,0x69
c0023a66:	75 b3                	jne    c0023a1b <IDE::detect()+0x269>
c0023a68:	68 a1 00 00 00       	push   0xa1
c0023a6d:	6a 07                	push   0x7
c0023a6f:	56                   	push   esi
c0023a70:	53                   	push   ebx
c0023a71:	e8 0e f6 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a76:	5f                   	pop    edi
c0023a77:	58                   	pop    eax
c0023a78:	6a 00                	push   0x0
c0023a7a:	68 40 42 0f 00       	push   0xf4240
c0023a7f:	e8 42 a9 ff ff       	call   c001e3c6 <nanoSleep(unsigned long long)>
c0023a84:	83 c4 10             	add    esp,0x10
c0023a87:	b1 01                	mov    cl,0x1
c0023a89:	e9 4a fe ff ff       	jmp    c00238d8 <IDE::detect()+0x126>
c0023a8e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a94:	5b                   	pop    ebx
c0023a95:	5e                   	pop    esi
c0023a96:	5f                   	pop    edi
c0023a97:	5d                   	pop    ebp
c0023a98:	c3                   	ret    
c0023a99:	90                   	nop

c0023a9a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a9a:	55                   	push   ebp
c0023a9b:	57                   	push   edi
c0023a9c:	56                   	push   esi
c0023a9d:	53                   	push   ebx
c0023a9e:	83 ec 1c             	sub    esp,0x1c
c0023aa1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023aa5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023aa9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023aad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023ab1:	88 c3                	mov    bl,al
c0023ab3:	84 c0                	test   al,al
c0023ab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ab9:	0f 84 67 01 00 00    	je     c0023c26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023abf:	83 ec 0c             	sub    esp,0xc
c0023ac2:	68 b3 cc 02 c0       	push   0xc002ccb3
c0023ac7:	e8 1e f5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023acc:	83 c4 10             	add    esp,0x10
c0023acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ad3:	3c 01                	cmp    al,0x1
c0023ad5:	75 17                	jne    c0023aee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	b3 13                	mov    bl,0x13
c0023adc:	68 bf cc 02 c0       	push   0xc002ccbf
c0023ae1:	e8 04 f5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	e9 25 01 00 00       	jmp    c0023c13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aee:	3c 02                	cmp    al,0x2
c0023af0:	0f 85 ef 00 00 00    	jne    c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023af6:	d1 e6                	shl    esi,1
c0023af8:	09 ee                	or     esi,ebp
c0023afa:	52                   	push   edx
c0023afb:	89 f0                	mov    eax,esi
c0023afd:	6a 01                	push   0x1
c0023aff:	0f b6 f0             	movzx  esi,al
c0023b02:	c1 e6 06             	shl    esi,0x6
c0023b05:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b0d:	50                   	push   eax
c0023b0e:	57                   	push   edi
c0023b0f:	e8 30 f6 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023b14:	83 c4 10             	add    esp,0x10
c0023b17:	89 c6                	mov    esi,eax
c0023b19:	a8 01                	test   al,0x1
c0023b1b:	74 12                	je     c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b1d:	83 ec 0c             	sub    esp,0xc
c0023b20:	b3 07                	mov    bl,0x7
c0023b22:	68 d4 cc 02 c0       	push   0xc002ccd4
c0023b27:	e8 be f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b2c:	83 c4 10             	add    esp,0x10
c0023b2f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b35:	74 12                	je     c0023b49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b37:	83 ec 0c             	sub    esp,0xc
c0023b3a:	b3 03                	mov    bl,0x3
c0023b3c:	68 f2 cc 02 c0       	push   0xc002ccf2
c0023b41:	e8 a4 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b46:	83 c4 10             	add    esp,0x10
c0023b49:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b4f:	74 12                	je     c0023b63 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b51:	83 ec 0c             	sub    esp,0xc
c0023b54:	b3 14                	mov    bl,0x14
c0023b56:	68 12 cd 02 c0       	push   0xc002cd12
c0023b5b:	e8 8a f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b60:	83 c4 10             	add    esp,0x10
c0023b63:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b69:	74 12                	je     c0023b7d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b6b:	83 ec 0c             	sub    esp,0xc
c0023b6e:	b3 03                	mov    bl,0x3
c0023b70:	68 f2 cc 02 c0       	push   0xc002ccf2
c0023b75:	e8 70 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b7a:	83 c4 10             	add    esp,0x10
c0023b7d:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b83:	74 12                	je     c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b85:	83 ec 0c             	sub    esp,0xc
c0023b88:	b3 15                	mov    bl,0x15
c0023b8a:	68 2a cd 02 c0       	push   0xc002cd2a
c0023b8f:	e8 56 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b94:	83 c4 10             	add    esp,0x10
c0023b97:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b9d:	74 12                	je     c0023bb1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b9f:	83 ec 0c             	sub    esp,0xc
c0023ba2:	b3 03                	mov    bl,0x3
c0023ba4:	68 f2 cc 02 c0       	push   0xc002ccf2
c0023ba9:	e8 3c f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bb7:	74 12                	je     c0023bcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bb9:	83 ec 0c             	sub    esp,0xc
c0023bbc:	b3 16                	mov    bl,0x16
c0023bbe:	68 44 cd 02 c0       	push   0xc002cd44
c0023bc3:	e8 22 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023bc8:	83 c4 10             	add    esp,0x10
c0023bcb:	89 f0                	mov    eax,esi
c0023bcd:	84 c0                	test   al,al
c0023bcf:	79 42                	jns    c0023c13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bd1:	83 ec 0c             	sub    esp,0xc
c0023bd4:	b3 0d                	mov    bl,0xd
c0023bd6:	68 65 cd 02 c0       	push   0xc002cd65
c0023bdb:	e8 0a f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023be0:	83 c4 10             	add    esp,0x10
c0023be3:	eb 2e                	jmp    c0023c13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023be5:	3c 03                	cmp    al,0x3
c0023be7:	75 14                	jne    c0023bfd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023be9:	83 ec 0c             	sub    esp,0xc
c0023bec:	b3 17                	mov    bl,0x17
c0023bee:	68 79 cd 02 c0       	push   0xc002cd79
c0023bf3:	e8 f2 f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023bf8:	83 c4 10             	add    esp,0x10
c0023bfb:	eb 16                	jmp    c0023c13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bfd:	3c 04                	cmp    al,0x4
c0023bff:	75 12                	jne    c0023c13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c01:	83 ec 0c             	sub    esp,0xc
c0023c04:	b3 08                	mov    bl,0x8
c0023c06:	68 8f cd 02 c0       	push   0xc002cd8f
c0023c0b:	e8 da f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c10:	83 c4 10             	add    esp,0x10
c0023c13:	50                   	push   eax
c0023c14:	50                   	push   eax
c0023c15:	0f b6 c3             	movzx  eax,bl
c0023c18:	50                   	push   eax
c0023c19:	68 a7 cd 02 c0       	push   0xc002cda7
c0023c1e:	e8 c7 f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c23:	83 c4 10             	add    esp,0x10
c0023c26:	83 c4 1c             	add    esp,0x1c
c0023c29:	88 d8                	mov    al,bl
c0023c2b:	5b                   	pop    ebx
c0023c2c:	5e                   	pop    esi
c0023c2d:	5f                   	pop    edi
c0023c2e:	5d                   	pop    ebp
c0023c2f:	c3                   	ret    

c0023c30 <IDE::polling(unsigned char, unsigned int)>:
c0023c30:	57                   	push   edi
c0023c31:	56                   	push   esi
c0023c32:	53                   	push   ebx
c0023c33:	bb 04 00 00 00       	mov    ebx,0x4
c0023c38:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c3c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c41:	52                   	push   edx
c0023c42:	6a 0c                	push   0xc
c0023c44:	56                   	push   esi
c0023c45:	57                   	push   edi
c0023c46:	e8 f9 f4 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023c4b:	83 c4 10             	add    esp,0x10
c0023c4e:	4b                   	dec    ebx
c0023c4f:	75 f0                	jne    c0023c41 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c51:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c56:	50                   	push   eax
c0023c57:	6a 0c                	push   0xc
c0023c59:	56                   	push   esi
c0023c5a:	57                   	push   edi
c0023c5b:	e8 e4 f4 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c0023c60:	83 c4 10             	add    esp,0x10
c0023c63:	a8 01                	test   al,0x1
c0023c65:	74 12                	je     c0023c79 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c67:	83 ec 0c             	sub    esp,0xc
c0023c6a:	68 c1 cd 02 c0       	push   0xc002cdc1
c0023c6f:	e8 76 f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	eb 17                	jmp    c0023c90 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c79:	a8 20                	test   al,0x20
c0023c7b:	75 0f                	jne    c0023c8c <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c7d:	4b                   	dec    ebx
c0023c7e:	74 10                	je     c0023c90 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c80:	84 c0                	test   al,al
c0023c82:	78 d2                	js     c0023c56 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c84:	a8 08                	test   al,0x8
c0023c86:	74 ce                	je     c0023c56 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c88:	31 c0                	xor    eax,eax
c0023c8a:	eb 06                	jmp    c0023c92 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c8c:	b0 01                	mov    al,0x1
c0023c8e:	eb 02                	jmp    c0023c92 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c90:	b0 02                	mov    al,0x2
c0023c92:	5b                   	pop    ebx
c0023c93:	5e                   	pop    esi
c0023c94:	5f                   	pop    edi
c0023c95:	c3                   	ret    

c0023c96 <SATABus::close(int, int, void*)>:
c0023c96:	31 c0                	xor    eax,eax
c0023c98:	c3                   	ret    
c0023c99:	90                   	nop

c0023c9a <SATABus::detect()>:
c0023c9a:	c3                   	ret    
c0023c9b:	90                   	nop

c0023c9c <SATABus::SATABus()>:
c0023c9c:	83 ec 0c             	sub    esp,0xc
c0023c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca3:	83 ec 08             	sub    esp,0x8
c0023ca6:	68 04 ce 02 c0       	push   0xc002ce04
c0023cab:	50                   	push   eax
c0023cac:	e8 eb 0a ff ff       	call   c001479c <HardDiskController::HardDiskController(char const*)>
c0023cb1:	83 c4 10             	add    esp,0x10
c0023cb4:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0023cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbd:	89 10                	mov    DWORD PTR [eax],edx
c0023cbf:	83 ec 0c             	sub    esp,0xc
c0023cc2:	6a 50                	push   0x50
c0023cc4:	e8 a0 c3 fe ff       	call   c0010069 <Phys::allocateContiguousPages(int)>
c0023cc9:	83 c4 10             	add    esp,0x10
c0023ccc:	89 c2                	mov    edx,eax
c0023cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cd8:	83 ec 0c             	sub    esp,0xc
c0023cdb:	6a 50                	push   0x50
c0023cdd:	e8 01 df fe ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0023ce2:	83 c4 10             	add    esp,0x10
c0023ce5:	89 c2                	mov    edx,eax
c0023ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ceb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023cf1:	e8 88 e1 fe ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0023cf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cfa:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d04:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d0a:	83 ec 0c             	sub    esp,0xc
c0023d0d:	6a 03                	push   0x3
c0023d0f:	6a 50                	push   0x50
c0023d11:	51                   	push   ecx
c0023d12:	52                   	push   edx
c0023d13:	50                   	push   eax
c0023d14:	e8 95 e9 fe ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d19:	83 c4 20             	add    esp,0x20
c0023d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d20:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d2a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d30:	83 ec 04             	sub    esp,0x4
c0023d33:	52                   	push   edx
c0023d34:	50                   	push   eax
c0023d35:	68 28 ce 02 c0       	push   0xc002ce28
c0023d3a:	e8 ab f2 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023d3f:	83 c4 10             	add    esp,0x10
c0023d42:	90                   	nop
c0023d43:	83 c4 0c             	add    esp,0xc
c0023d46:	c3                   	ret    
c0023d47:	90                   	nop

c0023d48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d48:	83 ec 0c             	sub    esp,0xc
c0023d4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d4f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d55:	09 c2                	or     edx,eax
c0023d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d61:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d63:	31 c0                	xor    eax,eax
c0023d65:	c1 e9 08             	shr    ecx,0x8
c0023d68:	83 e1 0f             	and    ecx,0xf
c0023d6b:	39 c8                	cmp    eax,ecx
c0023d6d:	74 0a                	je     c0023d79 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d6f:	f6 c2 01             	test   dl,0x1
c0023d72:	74 18                	je     c0023d8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d74:	d1 ea                	shr    edx,1
c0023d76:	40                   	inc    eax
c0023d77:	eb f2                	jmp    c0023d6b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d79:	83 ec 0c             	sub    esp,0xc
c0023d7c:	68 4c ce 02 c0       	push   0xc002ce4c
c0023d81:	e8 15 69 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0023d86:	83 c4 10             	add    esp,0x10
c0023d89:	83 c8 ff             	or     eax,0xffffffff
c0023d8c:	83 c4 0c             	add    esp,0xc
c0023d8f:	c3                   	ret    

c0023d90 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d94:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d97:	89 c2                	mov    edx,eax
c0023d99:	c1 ea 08             	shr    edx,0x8
c0023d9c:	83 e2 0f             	and    edx,0xf
c0023d9f:	fe ca                	dec    dl
c0023da1:	75 31                	jne    c0023dd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023da3:	83 e0 0f             	and    eax,0xf
c0023da6:	3c 03                	cmp    al,0x3
c0023da8:	75 2a                	jne    c0023dd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023daa:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023dad:	b8 02 00 00 00       	mov    eax,0x2
c0023db2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023db8:	74 1c                	je     c0023dd6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dba:	b8 04 00 00 00       	mov    eax,0x4
c0023dbf:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023dc5:	74 0f                	je     c0023dd6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dc7:	31 c0                	xor    eax,eax
c0023dc9:	83 fa 03             	cmp    edx,0x3
c0023dcc:	0f 94 c0             	sete   al
c0023dcf:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023dd3:	c3                   	ret    
c0023dd4:	31 c0                	xor    eax,eax
c0023dd6:	c3                   	ret    
c0023dd7:	90                   	nop

c0023dd8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ddc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ddf:	0f ba e2 0f          	bt     edx,0xf
c0023de3:	72 f7                	jb     c0023ddc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023de5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023de8:	83 ca 10             	or     edx,0x10
c0023deb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023df1:	83 ca 01             	or     edx,0x1
c0023df4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023df7:	c3                   	ret    

c0023df8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023df8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dfc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dff:	83 e2 fe             	and    edx,0xfffffffe
c0023e02:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e05:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e08:	83 e2 ef             	and    edx,0xffffffef
c0023e0b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e11:	0f ba e2 0e          	bt     edx,0xe
c0023e15:	72 f7                	jb     c0023e0e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e17:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e1a:	0f ba e2 0f          	bt     edx,0xf
c0023e1e:	72 ee                	jb     c0023e0e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e20:	c3                   	ret    
c0023e21:	90                   	nop

c0023e22 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e22:	55                   	push   ebp
c0023e23:	57                   	push   edi
c0023e24:	56                   	push   esi
c0023e25:	53                   	push   ebx
c0023e26:	83 ec 1c             	sub    esp,0x1c
c0023e29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e31:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e35:	53                   	push   ebx
c0023e36:	89 fd                	mov    ebp,edi
c0023e38:	56                   	push   esi
c0023e39:	c1 e5 0a             	shl    ebp,0xa
c0023e3c:	e8 b7 ff ff ff       	call   c0023df8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e41:	83 ec 0c             	sub    esp,0xc
c0023e44:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e4a:	01 e8                	add    eax,ebp
c0023e4c:	89 03                	mov    DWORD PTR [ebx],eax
c0023e4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e50:	68 00 04 00 00       	push   0x400
c0023e55:	6a 00                	push   0x0
c0023e57:	50                   	push   eax
c0023e58:	e8 1b c9 fd ff       	call   c0000778 <memset>
c0023e5d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e63:	89 fa                	mov    edx,edi
c0023e65:	01 e8                	add    eax,ebp
c0023e67:	c1 e7 0d             	shl    edi,0xd
c0023e6a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e6c:	c1 e2 08             	shl    edx,0x8
c0023e6f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e76:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e7c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e80:	89 d0                	mov    eax,edx
c0023e82:	83 c4 1c             	add    esp,0x1c
c0023e85:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e8b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e8e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e91:	68 00 01 00 00       	push   0x100
c0023e96:	6a 00                	push   0x0
c0023e98:	50                   	push   eax
c0023e99:	e8 da c8 fd ff       	call   c0000778 <memset>
c0023e9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ea2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ea8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023eae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023eb2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ebf:	31 ff                	xor    edi,edi
c0023ec1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ec7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ed1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ed7:	83 c5 20             	add    ebp,0x20
c0023eda:	01 f8                	add    eax,edi
c0023edc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023edf:	52                   	push   edx
c0023ee0:	68 00 01 00 00       	push   0x100
c0023ee5:	6a 00                	push   0x0
c0023ee7:	50                   	push   eax
c0023ee8:	e8 8b c8 fd ff       	call   c0000778 <memset>
c0023eed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ef1:	83 c4 10             	add    esp,0x10
c0023ef4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023efa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f01:	01 f8                	add    eax,edi
c0023f03:	81 c7 00 01 00 00    	add    edi,0x100
c0023f09:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f0c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f12:	75 b3                	jne    c0023ec7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f14:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f18:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f1c:	83 c4 1c             	add    esp,0x1c
c0023f1f:	5b                   	pop    ebx
c0023f20:	5e                   	pop    esi
c0023f21:	5f                   	pop    edi
c0023f22:	5d                   	pop    ebp
c0023f23:	e9 b0 fe ff ff       	jmp    c0023dd8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f28:	55                   	push   ebp
c0023f29:	57                   	push   edi
c0023f2a:	56                   	push   esi
c0023f2b:	53                   	push   ebx
c0023f2c:	31 db                	xor    ebx,ebx
c0023f2e:	83 ec 0c             	sub    esp,0xc
c0023f31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f39:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f3c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f42:	0f 84 aa 00 00 00    	je     c0023ff2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f48:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f4c:	89 d8                	mov    eax,ebx
c0023f4e:	c1 e0 07             	shl    eax,0x7
c0023f51:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f58:	55                   	push   ebp
c0023f59:	56                   	push   esi
c0023f5a:	e8 31 fe ff ff       	call   c0023d90 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f5f:	5a                   	pop    edx
c0023f60:	83 f8 01             	cmp    eax,0x1
c0023f63:	59                   	pop    ecx
c0023f64:	75 30                	jne    c0023f96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f66:	50                   	push   eax
c0023f67:	50                   	push   eax
c0023f68:	53                   	push   ebx
c0023f69:	68 71 ce 02 c0       	push   0xc002ce71
c0023f6e:	e8 77 f0 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023f73:	83 c4 0c             	add    esp,0xc
c0023f76:	53                   	push   ebx
c0023f77:	55                   	push   ebp
c0023f78:	56                   	push   esi
c0023f79:	e8 a4 fe ff ff       	call   c0023e22 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f7e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f85:	e8 b6 b8 fe ff       	call   c000f840 <malloc>
c0023f8a:	89 c5                	mov    ebp,eax
c0023f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f8f:	e8 60 0d 00 00       	call   c0024cf4 <SATA::SATA()>
c0023f94:	eb 33                	jmp    c0023fc9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f96:	83 f8 04             	cmp    eax,0x4
c0023f99:	75 47                	jne    c0023fe2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f9b:	50                   	push   eax
c0023f9c:	50                   	push   eax
c0023f9d:	53                   	push   ebx
c0023f9e:	68 88 ce 02 c0       	push   0xc002ce88
c0023fa3:	e8 42 f0 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023fa8:	83 c4 0c             	add    esp,0xc
c0023fab:	53                   	push   ebx
c0023fac:	55                   	push   ebp
c0023fad:	56                   	push   esi
c0023fae:	e8 6f fe ff ff       	call   c0023e22 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fb3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fba:	e8 81 b8 fe ff       	call   c000f840 <malloc>
c0023fbf:	89 c5                	mov    ebp,eax
c0023fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fc4:	e8 d7 10 00 00       	call   c00250a0 <SATAPI::SATAPI()>
c0023fc9:	5a                   	pop    edx
c0023fca:	59                   	pop    ecx
c0023fcb:	55                   	push   ebp
c0023fcc:	56                   	push   esi
c0023fcd:	e8 3e 04 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0023fd2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fd5:	56                   	push   esi
c0023fd6:	6a 00                	push   0x0
c0023fd8:	53                   	push   ebx
c0023fd9:	55                   	push   ebp
c0023fda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023fdd:	83 c4 20             	add    esp,0x20
c0023fe0:	eb 10                	jmp    c0023ff2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fe2:	50                   	push   eax
c0023fe3:	50                   	push   eax
c0023fe4:	53                   	push   ebx
c0023fe5:	68 a1 ce 02 c0       	push   0xc002cea1
c0023fea:	e8 fb ef fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023fef:	83 c4 10             	add    esp,0x10
c0023ff2:	d1 ef                	shr    edi,1
c0023ff4:	43                   	inc    ebx
c0023ff5:	83 fb 20             	cmp    ebx,0x20
c0023ff8:	0f 85 3e ff ff ff    	jne    c0023f3c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023ffe:	83 c4 0c             	add    esp,0xc
c0024001:	5b                   	pop    ebx
c0024002:	5e                   	pop    esi
c0024003:	5f                   	pop    edi
c0024004:	5d                   	pop    ebp
c0024005:	c3                   	ret    

c0024006 <SATABus::open(int, int, void*)>:
c0024006:	83 ec 14             	sub    esp,0x14
c0024009:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002400d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024013:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024019:	52                   	push   edx
c002401a:	50                   	push   eax
c002401b:	e8 08 ff ff ff       	call   c0023f28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024020:	31 c0                	xor    eax,eax
c0024022:	83 c4 1c             	add    esp,0x1c
c0024025:	c3                   	ret    

c0024026 <ATA::close(int, int, void*)>:
c0024026:	83 ec 0c             	sub    esp,0xc
c0024029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002402d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024033:	85 c0                	test   eax,eax
c0024035:	74 0c                	je     c0024043 <ATA::close(int, int, void*)+0x1d>
c0024037:	83 ec 0c             	sub    esp,0xc
c002403a:	8b 10                	mov    edx,DWORD PTR [eax]
c002403c:	50                   	push   eax
c002403d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024040:	83 c4 10             	add    esp,0x10
c0024043:	31 c0                	xor    eax,eax
c0024045:	83 c4 0c             	add    esp,0xc
c0024048:	c3                   	ret    
c0024049:	90                   	nop

c002404a <ATA::powerSaving(PowerSavingLevel)>:
c002404a:	c3                   	ret    
c002404b:	90                   	nop

c002404c <ATA::ATA()>:
c002404c:	83 ec 0c             	sub    esp,0xc
c002404f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024053:	83 ec 04             	sub    esp,0x4
c0024056:	68 00 02 00 00       	push   0x200
c002405b:	68 89 cf 02 c0       	push   0xc002cf89
c0024060:	50                   	push   eax
c0024061:	e8 ce 07 ff ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024066:	83 c4 10             	add    esp,0x10
c0024069:	ba 0c cf 02 c0       	mov    edx,0xc002cf0c
c002406e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024072:	89 10                	mov    DWORD PTR [eax],edx
c0024074:	90                   	nop
c0024075:	83 c4 0c             	add    esp,0xc
c0024078:	c3                   	ret    
c0024079:	90                   	nop

c002407a <ATA::flush(bool)>:
c002407a:	53                   	push   ebx
c002407b:	83 ec 08             	sub    esp,0x8
c002407e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024087:	19 c0                	sbb    eax,eax
c0024089:	83 e0 fd             	and    eax,0xfffffffd
c002408c:	05 ea 00 00 00       	add    eax,0xea
c0024091:	50                   	push   eax
c0024092:	6a 07                	push   0x7
c0024094:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002409b:	50                   	push   eax
c002409c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240a2:	e8 dd ef ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240a7:	83 c4 0c             	add    esp,0xc
c00240aa:	6a 00                	push   0x0
c00240ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240b3:	50                   	push   eax
c00240b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ba:	e8 71 fb ff ff       	call   c0023c30 <IDE::polling(unsigned char, unsigned int)>
c00240bf:	83 c4 18             	add    esp,0x18
c00240c2:	5b                   	pop    ebx
c00240c3:	c3                   	ret    

c00240c4 <ATA::readyForCommand()>:
c00240c4:	56                   	push   esi
c00240c5:	53                   	push   ebx
c00240c6:	31 db                	xor    ebx,ebx
c00240c8:	50                   	push   eax
c00240c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240cd:	50                   	push   eax
c00240ce:	6a 0c                	push   0xc
c00240d0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240d7:	50                   	push   eax
c00240d8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240de:	e8 61 f0 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00240e3:	83 c4 10             	add    esp,0x10
c00240e6:	a8 88                	test   al,0x88
c00240e8:	74 23                	je     c002410d <ATA::readyForCommand()+0x49>
c00240ea:	43                   	inc    ebx
c00240eb:	83 fb 63             	cmp    ebx,0x63
c00240ee:	7e dd                	jle    c00240cd <ATA::readyForCommand()+0x9>
c00240f0:	51                   	push   ecx
c00240f1:	51                   	push   ecx
c00240f2:	6a 00                	push   0x0
c00240f4:	68 40 42 0f 00       	push   0xf4240
c00240f9:	e8 c8 a2 ff ff       	call   c001e3c6 <nanoSleep(unsigned long long)>
c00240fe:	83 c4 10             	add    esp,0x10
c0024101:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024107:	75 c4                	jne    c00240cd <ATA::readyForCommand()+0x9>
c0024109:	31 c0                	xor    eax,eax
c002410b:	eb 02                	jmp    c002410f <ATA::readyForCommand()+0x4b>
c002410d:	b0 01                	mov    al,0x1
c002410f:	5a                   	pop    edx
c0024110:	5b                   	pop    ebx
c0024111:	5e                   	pop    esi
c0024112:	c3                   	ret    
c0024113:	90                   	nop

c0024114 <ATA::access(unsigned long long, int, void*, bool)>:
c0024114:	55                   	push   ebp
c0024115:	57                   	push   edi
c0024116:	56                   	push   esi
c0024117:	53                   	push   ebx
c0024118:	83 ec 2c             	sub    esp,0x2c
c002411b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002411f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024123:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002412b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002412f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024133:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024137:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002413d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024141:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024147:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002414b:	c1 e0 06             	shl    eax,0x6
c002414e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024156:	74 5d                	je     c00241b5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024158:	89 fa                	mov    edx,edi
c002415a:	89 f0                	mov    eax,esi
c002415c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024160:	c1 ea 1c             	shr    edx,0x1c
c0024163:	89 d1                	mov    ecx,edx
c0024165:	09 c1                	or     ecx,eax
c0024167:	74 25                	je     c002418e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024169:	31 ed                	xor    ebp,ebp
c002416b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024172:	89 fa                	mov    edx,edi
c0024174:	89 f0                	mov    eax,esi
c0024176:	0f ad d0             	shrd   eax,edx,cl
c0024179:	d3 ea                	shr    edx,cl
c002417b:	f6 c1 20             	test   cl,0x20
c002417e:	74 02                	je     c0024182 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024180:	89 d0                	mov    eax,edx
c0024182:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024186:	45                   	inc    ebp
c0024187:	83 fd 06             	cmp    ebp,0x6
c002418a:	75 df                	jne    c002416b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002418c:	eb 76                	jmp    c0024204 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002418e:	89 f0                	mov    eax,esi
c0024190:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024195:	89 fa                	mov    edx,edi
c0024197:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002419e:	0f ac d0 10          	shrd   eax,edx,0x10
c00241a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241a7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241ab:	c1 ee 18             	shr    esi,0x18
c00241ae:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241b3:	eb 56                	jmp    c002420b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241b5:	6a 00                	push   0x0
c00241b7:	6a 3f                	push   0x3f
c00241b9:	57                   	push   edi
c00241ba:	56                   	push   esi
c00241bb:	e8 8c 29 00 00       	call   c0026b4c <__umoddi3>
c00241c0:	83 c4 10             	add    esp,0x10
c00241c3:	40                   	inc    eax
c00241c4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241c8:	6a 00                	push   0x0
c00241ca:	68 f0 03 00 00       	push   0x3f0
c00241cf:	57                   	push   edi
c00241d0:	56                   	push   esi
c00241d1:	e8 76 28 00 00       	call   c0026a4c <__udivdi3>
c00241d6:	83 c4 10             	add    esp,0x10
c00241d9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241de:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241e5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241ea:	6a 00                	push   0x0
c00241ec:	6a 3f                	push   0x3f
c00241ee:	57                   	push   edi
c00241ef:	56                   	push   esi
c00241f0:	e8 57 28 00 00       	call   c0026a4c <__udivdi3>
c00241f5:	83 c4 10             	add    esp,0x10
c00241f8:	89 c6                	mov    esi,eax
c00241fa:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241ff:	83 e6 0f             	and    esi,0xf
c0024202:	eb 07                	jmp    c002420b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024204:	31 f6                	xor    esi,esi
c0024206:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002420b:	bf 01 00 00 00       	mov    edi,0x1
c0024210:	50                   	push   eax
c0024211:	6a 00                	push   0x0
c0024213:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002421a:	50                   	push   eax
c002421b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002421f:	e8 6c f0 ff ff       	call   c0023290 <IDE::enableIRQs(unsigned char, bool)>
c0024224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024227:	e8 98 fe ff ff       	call   c00240c4 <ATA::readyForCommand()>
c002422c:	83 c4 10             	add    esp,0x10
c002422f:	84 c0                	test   al,al
c0024231:	0f 84 5a 02 00 00    	je     c0024491 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024237:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002423d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024243:	c1 e0 04             	shl    eax,0x4
c0024246:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002424d:	09 c6                	or     esi,eax
c002424f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024254:	75 05                	jne    c002425b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024256:	83 ce a0             	or     esi,0xffffffa0
c0024259:	eb 03                	jmp    c002425e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002425b:	83 ce e0             	or     esi,0xffffffe0
c002425e:	89 f0                	mov    eax,esi
c0024260:	0f b6 f0             	movzx  esi,al
c0024263:	56                   	push   esi
c0024264:	6a 06                	push   0x6
c0024266:	51                   	push   ecx
c0024267:	52                   	push   edx
c0024268:	e8 17 ee ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002426d:	83 c4 10             	add    esp,0x10
c0024270:	6a 00                	push   0x0
c0024272:	6a 01                	push   0x1
c0024274:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427b:	50                   	push   eax
c002427c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024282:	e8 fd ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024287:	83 c4 10             	add    esp,0x10
c002428a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002428f:	75 6e                	jne    c00242ff <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024291:	6a 00                	push   0x0
c0024293:	6a 08                	push   0x8
c0024295:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429c:	50                   	push   eax
c002429d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a3:	e8 dc ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242ad:	50                   	push   eax
c00242ae:	6a 09                	push   0x9
c00242b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b7:	50                   	push   eax
c00242b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242be:	e8 c1 ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c3:	83 c4 20             	add    esp,0x20
c00242c6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242cb:	50                   	push   eax
c00242cc:	6a 0a                	push   0xa
c00242ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d5:	50                   	push   eax
c00242d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242dc:	e8 a3 ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242e6:	50                   	push   eax
c00242e7:	6a 0b                	push   0xb
c00242e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f0:	50                   	push   eax
c00242f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f7:	e8 88 ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fc:	83 c4 20             	add    esp,0x20
c00242ff:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024304:	50                   	push   eax
c0024305:	6a 02                	push   0x2
c0024307:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430e:	50                   	push   eax
c002430f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024315:	e8 6a ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002431f:	50                   	push   eax
c0024320:	6a 03                	push   0x3
c0024322:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024329:	50                   	push   eax
c002432a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024330:	e8 4f ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024335:	83 c4 20             	add    esp,0x20
c0024338:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002433d:	50                   	push   eax
c002433e:	6a 04                	push   0x4
c0024340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024347:	50                   	push   eax
c0024348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434e:	e8 31 ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024353:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024358:	50                   	push   eax
c0024359:	6a 05                	push   0x5
c002435b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024362:	50                   	push   eax
c0024363:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024369:	e8 16 ed ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002436e:	83 c4 20             	add    esp,0x20
c0024371:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024376:	0f 94 c0             	sete   al
c0024379:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002437e:	74 09                	je     c0024389 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024380:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024387:	eb 07                	jmp    c0024390 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024389:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024390:	0f b6 c0             	movzx  eax,al
c0024393:	50                   	push   eax
c0024394:	6a 07                	push   0x7
c0024396:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002439d:	50                   	push   eax
c002439e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243a4:	e8 db ec ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243a9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243ad:	83 c4 10             	add    esp,0x10
c00243b0:	85 f6                	test   esi,esi
c00243b2:	0f 84 ba 00 00 00    	je     c0024472 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243b8:	50                   	push   eax
c00243b9:	6a 01                	push   0x1
c00243bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c2:	50                   	push   eax
c00243c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c9:	e8 62 f8 ff ff       	call   c0023c30 <IDE::polling(unsigned char, unsigned int)>
c00243ce:	83 c4 10             	add    esp,0x10
c00243d1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243d7:	84 c0                	test   al,al
c00243d9:	74 2c                	je     c0024407 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243db:	0f b6 f8             	movzx  edi,al
c00243de:	0f b6 d2             	movzx  edx,dl
c00243e1:	57                   	push   edi
c00243e2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243e9:	50                   	push   eax
c00243ea:	52                   	push   edx
c00243eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243f1:	e8 a4 f6 ff ff       	call   c0023a9a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243f6:	c7 04 24 e4 ce 02 c0 	mov    DWORD PTR [esp],0xc002cee4
c00243fd:	e8 e8 eb fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0024402:	e9 87 00 00 00       	jmp    c002448e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024407:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002440c:	74 33                	je     c0024441 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002440e:	31 ed                	xor    ebp,ebp
c0024410:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024414:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024418:	50                   	push   eax
c0024419:	50                   	push   eax
c002441a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024421:	50                   	push   eax
c0024422:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024428:	e8 45 ec ff ff       	call   c0023072 <IDE::getBase(unsigned char)>
c002442d:	89 c2                	mov    edx,eax
c002442f:	89 f8                	mov    eax,edi
c0024431:	66 ef                	out    dx,ax
c0024433:	45                   	inc    ebp
c0024434:	83 c4 10             	add    esp,0x10
c0024437:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002443d:	75 d1                	jne    c0024410 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002443f:	eb 23                	jmp    c0024464 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024441:	0f b6 d2             	movzx  edx,dl
c0024444:	51                   	push   ecx
c0024445:	51                   	push   ecx
c0024446:	52                   	push   edx
c0024447:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002444d:	e8 20 ec ff ff       	call   c0023072 <IDE::getBase(unsigned char)>
c0024452:	b9 00 01 00 00       	mov    ecx,0x100
c0024457:	89 c2                	mov    edx,eax
c0024459:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002445d:	fc                   	cld    
c002445e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024461:	83 c4 10             	add    esp,0x10
c0024464:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002446c:	4e                   	dec    esi
c002446d:	e9 3e ff ff ff       	jmp    c00243b0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024472:	31 ff                	xor    edi,edi
c0024474:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024479:	74 16                	je     c0024491 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002447b:	50                   	push   eax
c002447c:	50                   	push   eax
c002447d:	31 c0                	xor    eax,eax
c002447f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024484:	0f 94 c0             	sete   al
c0024487:	50                   	push   eax
c0024488:	53                   	push   ebx
c0024489:	e8 ec fb ff ff       	call   c002407a <ATA::flush(bool)>
c002448e:	83 c4 10             	add    esp,0x10
c0024491:	83 c4 2c             	add    esp,0x2c
c0024494:	89 f8                	mov    eax,edi
c0024496:	5b                   	pop    ebx
c0024497:	5e                   	pop    esi
c0024498:	5f                   	pop    edi
c0024499:	5d                   	pop    ebp
c002449a:	c3                   	ret    
c002449b:	90                   	nop

c002449c <ATA::read(unsigned long long, int, void*)>:
c002449c:	57                   	push   edi
c002449d:	b8 04 00 00 00       	mov    eax,0x4
c00244a2:	56                   	push   esi
c00244a3:	53                   	push   ebx
c00244a4:	83 ec 10             	sub    esp,0x10
c00244a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244ab:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244af:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244ba:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244c0:	77 3b                	ja     c00244fd <ATA::read(unsigned long long, int, void*)+0x61>
c00244c2:	b8 06 00 00 00       	mov    eax,0x6
c00244c7:	85 d2                	test   edx,edx
c00244c9:	74 32                	je     c00244fd <ATA::read(unsigned long long, int, void*)+0x61>
c00244cb:	50                   	push   eax
c00244cc:	50                   	push   eax
c00244cd:	6a 00                	push   0x0
c00244cf:	52                   	push   edx
c00244d0:	53                   	push   ebx
c00244d1:	57                   	push   edi
c00244d2:	56                   	push   esi
c00244d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244d7:	e8 38 fc ff ff       	call   c0024114 <ATA::access(unsigned long long, int, void*, bool)>
c00244dc:	83 c4 20             	add    esp,0x20
c00244df:	85 c0                	test   eax,eax
c00244e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244e5:	75 11                	jne    c00244f8 <ATA::read(unsigned long long, int, void*)+0x5c>
c00244e7:	01 1d 88 28 03 c0    	add    DWORD PTR ds:0xc0032888,ebx
c00244ed:	e8 46 c5 fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c00244f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244f6:	eb 05                	jmp    c00244fd <ATA::read(unsigned long long, int, void*)+0x61>
c00244f8:	b8 01 00 00 00       	mov    eax,0x1
c00244fd:	83 c4 10             	add    esp,0x10
c0024500:	5b                   	pop    ebx
c0024501:	5e                   	pop    esi
c0024502:	5f                   	pop    edi
c0024503:	c3                   	ret    

c0024504 <ATA::write(unsigned long long, int, void*)>:
c0024504:	57                   	push   edi
c0024505:	b8 04 00 00 00       	mov    eax,0x4
c002450a:	56                   	push   esi
c002450b:	53                   	push   ebx
c002450c:	83 ec 10             	sub    esp,0x10
c002450f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024513:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024517:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002451a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002451e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024522:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024528:	77 3b                	ja     c0024565 <ATA::write(unsigned long long, int, void*)+0x61>
c002452a:	b8 06 00 00 00       	mov    eax,0x6
c002452f:	85 d2                	test   edx,edx
c0024531:	74 32                	je     c0024565 <ATA::write(unsigned long long, int, void*)+0x61>
c0024533:	50                   	push   eax
c0024534:	50                   	push   eax
c0024535:	6a 01                	push   0x1
c0024537:	52                   	push   edx
c0024538:	53                   	push   ebx
c0024539:	57                   	push   edi
c002453a:	56                   	push   esi
c002453b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002453f:	e8 d0 fb ff ff       	call   c0024114 <ATA::access(unsigned long long, int, void*, bool)>
c0024544:	83 c4 20             	add    esp,0x20
c0024547:	85 c0                	test   eax,eax
c0024549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002454d:	75 11                	jne    c0024560 <ATA::write(unsigned long long, int, void*)+0x5c>
c002454f:	01 1d 84 28 03 c0    	add    DWORD PTR ds:0xc0032884,ebx
c0024555:	e8 de c4 fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c002455a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002455e:	eb 05                	jmp    c0024565 <ATA::write(unsigned long long, int, void*)+0x61>
c0024560:	b8 01 00 00 00       	mov    eax,0x1
c0024565:	83 c4 10             	add    esp,0x10
c0024568:	5b                   	pop    ebx
c0024569:	5e                   	pop    esi
c002456a:	5f                   	pop    edi
c002456b:	c3                   	ret    

c002456c <ATA::detectCHS()>:
c002456c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024570:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024576:	c1 e0 06             	shl    eax,0x6
c0024579:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002457f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024589:	c7 44 24 04 ef ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ceef
c0024591:	e9 05 61 ff ff       	jmp    c001a69b <Krnl::panic(char const*)>

c0024596 <ATA::open(int, int, void*)>:
c0024596:	53                   	push   ebx
c0024597:	83 ec 08             	sub    esp,0x8
c002459a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002459e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245a6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245b2:	c1 e0 06             	shl    eax,0x6
c00245b5:	01 d0                	add    eax,edx
c00245b7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245be:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245c4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245cb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245d5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245db:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245e2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00245e9:	75 0c                	jne    c00245f7 <ATA::open(int, int, void*)+0x61>
c00245eb:	83 ec 0c             	sub    esp,0xc
c00245ee:	53                   	push   ebx
c00245ef:	e8 78 ff ff ff       	call   c002456c <ATA::detectCHS()>
c00245f4:	83 c4 10             	add    esp,0x10
c00245f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024603:	c1 e0 06             	shl    eax,0x6
c0024606:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002460d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024617:	d1 e8                	shr    eax,1
c0024619:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002461f:	6a 04                	push   0x4
c0024621:	6a 0c                	push   0xc
c0024623:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002462a:	50                   	push   eax
c002462b:	52                   	push   edx
c002462c:	e8 53 ea ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024631:	90                   	nop
c0024632:	90                   	nop
c0024633:	6a 00                	push   0x0
c0024635:	6a 0c                	push   0xc
c0024637:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002463e:	50                   	push   eax
c002463f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024645:	e8 3a ea ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002464a:	83 c4 14             	add    esp,0x14
c002464d:	53                   	push   ebx
c002464e:	e8 49 02 ff ff       	call   c001489c <PhysicalDisk::startCache()>
c0024653:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024656:	e8 c7 23 ff ff       	call   c0016a22 <createPartitionsForDisk(PhysicalDisk*)>
c002465b:	31 c0                	xor    eax,eax
c002465d:	83 c4 18             	add    esp,0x18
c0024660:	5b                   	pop    ebx
c0024661:	c3                   	ret    

c0024662 <ATAPI::write(unsigned long long, int, void*)>:
c0024662:	b8 03 00 00 00       	mov    eax,0x3
c0024667:	c3                   	ret    

c0024668 <ATAPI::close(int, int, void*)>:
c0024668:	83 ec 0c             	sub    esp,0xc
c002466b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002466f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024675:	85 c0                	test   eax,eax
c0024677:	74 0c                	je     c0024685 <ATAPI::close(int, int, void*)+0x1d>
c0024679:	83 ec 0c             	sub    esp,0xc
c002467c:	8b 10                	mov    edx,DWORD PTR [eax]
c002467e:	50                   	push   eax
c002467f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024682:	83 c4 10             	add    esp,0x10
c0024685:	31 c0                	xor    eax,eax
c0024687:	83 c4 0c             	add    esp,0xc
c002468a:	c3                   	ret    
c002468b:	90                   	nop

c002468c <ATAPI::ATAPI()>:
c002468c:	83 ec 0c             	sub    esp,0xc
c002468f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024693:	83 ec 04             	sub    esp,0x4
c0024696:	68 00 08 00 00       	push   0x800
c002469b:	68 29 d0 02 c0       	push   0xc002d029
c00246a0:	50                   	push   eax
c00246a1:	e8 8e 01 ff ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246a6:	83 c4 10             	add    esp,0x10
c00246a9:	ba 44 cf 02 c0       	mov    edx,0xc002cf44
c00246ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b2:	89 10                	mov    DWORD PTR [eax],edx
c00246b4:	90                   	nop
c00246b5:	83 c4 0c             	add    esp,0xc
c00246b8:	c3                   	ret    
c00246b9:	90                   	nop

c00246ba <ATAPI::readyForCommand()>:
c00246ba:	56                   	push   esi
c00246bb:	53                   	push   ebx
c00246bc:	31 db                	xor    ebx,ebx
c00246be:	50                   	push   eax
c00246bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246c3:	50                   	push   eax
c00246c4:	6a 0c                	push   0xc
c00246c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246cd:	50                   	push   eax
c00246ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246d4:	e8 6b ea ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00246d9:	83 c4 10             	add    esp,0x10
c00246dc:	a8 88                	test   al,0x88
c00246de:	74 23                	je     c0024703 <ATAPI::readyForCommand()+0x49>
c00246e0:	43                   	inc    ebx
c00246e1:	83 fb 63             	cmp    ebx,0x63
c00246e4:	7e dd                	jle    c00246c3 <ATAPI::readyForCommand()+0x9>
c00246e6:	51                   	push   ecx
c00246e7:	51                   	push   ecx
c00246e8:	6a 00                	push   0x0
c00246ea:	68 40 42 0f 00       	push   0xf4240
c00246ef:	e8 d2 9c ff ff       	call   c001e3c6 <nanoSleep(unsigned long long)>
c00246f4:	83 c4 10             	add    esp,0x10
c00246f7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246fd:	75 c4                	jne    c00246c3 <ATAPI::readyForCommand()+0x9>
c00246ff:	31 c0                	xor    eax,eax
c0024701:	eb 02                	jmp    c0024705 <ATAPI::readyForCommand()+0x4b>
c0024703:	b0 01                	mov    al,0x1
c0024705:	5a                   	pop    edx
c0024706:	5b                   	pop    ebx
c0024707:	5e                   	pop    esi
c0024708:	c3                   	ret    
c0024709:	90                   	nop

c002470a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002470a:	55                   	push   ebp
c002470b:	57                   	push   edi
c002470c:	56                   	push   esi
c002470d:	53                   	push   ebx
c002470e:	83 ec 20             	sub    esp,0x20
c0024711:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024715:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024719:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002471d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024721:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024725:	6a 01                	push   0x1
c0024727:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472e:	50                   	push   eax
c002472f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024735:	e8 56 eb ff ff       	call   c0023290 <IDE::enableIRQs(unsigned char, bool)>
c002473a:	5e                   	pop    esi
c002473b:	58                   	pop    eax
c002473c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024743:	50                   	push   eax
c0024744:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474a:	e8 0f e9 ff ff       	call   c002305e <IDE::prepareInterrupt(unsigned char)>
c002474f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024752:	e8 63 ff ff ff       	call   c00246ba <ATAPI::readyForCommand()>
c0024757:	83 c4 10             	add    esp,0x10
c002475a:	84 c0                	test   al,al
c002475c:	75 0a                	jne    c0024768 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002475e:	bb 01 00 00 00       	mov    ebx,0x1
c0024763:	e9 57 02 00 00       	jmp    c00249bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024768:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002476e:	c1 e0 04             	shl    eax,0x4
c0024771:	0f b6 c0             	movzx  eax,al
c0024774:	50                   	push   eax
c0024775:	6a 06                	push   0x6
c0024777:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002477e:	50                   	push   eax
c002477f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024785:	e8 fa e8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002478a:	6a 00                	push   0x0
c002478c:	6a 01                	push   0x1
c002478e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024795:	50                   	push   eax
c0024796:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002479c:	e8 e3 e8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a1:	83 c4 20             	add    esp,0x20
c00247a4:	0f b6 c3             	movzx  eax,bl
c00247a7:	0f b6 df             	movzx  ebx,bh
c00247aa:	50                   	push   eax
c00247ab:	6a 04                	push   0x4
c00247ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b4:	50                   	push   eax
c00247b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247bb:	e8 c4 e8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247c0:	53                   	push   ebx
c00247c1:	6a 05                	push   0x5
c00247c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ca:	50                   	push   eax
c00247cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d1:	e8 ae e8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247d6:	83 c4 20             	add    esp,0x20
c00247d9:	68 a0 00 00 00       	push   0xa0
c00247de:	6a 07                	push   0x7
c00247e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e7:	50                   	push   eax
c00247e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ee:	e8 91 e8 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f3:	83 c4 0c             	add    esp,0xc
c00247f6:	6a 01                	push   0x1
c00247f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ff:	50                   	push   eax
c0024800:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024806:	e8 25 f4 ff ff       	call   c0023c30 <IDE::polling(unsigned char, unsigned int)>
c002480b:	83 c4 10             	add    esp,0x10
c002480e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024814:	84 c0                	test   al,al
c0024816:	74 23                	je     c002483b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024818:	0f b6 d8             	movzx  ebx,al
c002481b:	0f b6 d2             	movzx  edx,dl
c002481e:	53                   	push   ebx
c002481f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024826:	50                   	push   eax
c0024827:	52                   	push   edx
c0024828:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482e:	e8 67 f2 ff ff       	call   c0023a9a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024833:	83 c4 10             	add    esp,0x10
c0024836:	e9 84 01 00 00       	jmp    c00249bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002483b:	0f b6 d2             	movzx  edx,dl
c002483e:	53                   	push   ebx
c002483f:	53                   	push   ebx
c0024840:	52                   	push   edx
c0024841:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024847:	e8 26 e8 ff ff       	call   c0023072 <IDE::getBase(unsigned char)>
c002484c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024850:	b9 06 00 00 00       	mov    ecx,0x6
c0024855:	89 c2                	mov    edx,eax
c0024857:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002485a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002485e:	83 c4 10             	add    esp,0x10
c0024861:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024867:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002486e:	85 db                	test   ebx,ebx
c0024870:	0f 84 ec 00 00 00    	je     c0024962 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024876:	51                   	push   ecx
c0024877:	51                   	push   ecx
c0024878:	52                   	push   edx
c0024879:	50                   	push   eax
c002487a:	e8 73 e9 ff ff       	call   c00231f2 <IDE::waitInterrupt(unsigned char)>
c002487f:	83 c4 10             	add    esp,0x10
c0024882:	84 c0                	test   al,al
c0024884:	0f 84 d4 fe ff ff    	je     c002475e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002488a:	56                   	push   esi
c002488b:	56                   	push   esi
c002488c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024893:	50                   	push   eax
c0024894:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002489a:	e8 bf e7 ff ff       	call   c002305e <IDE::prepareInterrupt(unsigned char)>
c002489f:	83 c4 0c             	add    esp,0xc
c00248a2:	6a 04                	push   0x4
c00248a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248ab:	50                   	push   eax
c00248ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b2:	e8 8d e8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00248b7:	83 c4 0c             	add    esp,0xc
c00248ba:	89 c6                	mov    esi,eax
c00248bc:	6a 05                	push   0x5
c00248be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c5:	50                   	push   eax
c00248c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248cc:	e8 73 e8 ff ff       	call   c0023144 <IDE::read(unsigned char, unsigned char)>
c00248d1:	89 f1                	mov    ecx,esi
c00248d3:	0f b6 c0             	movzx  eax,al
c00248d6:	0f b6 f1             	movzx  esi,cl
c00248d9:	c1 e0 08             	shl    eax,0x8
c00248dc:	09 c6                	or     esi,eax
c00248de:	d1 fe                	sar    esi,1
c00248e0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00248e4:	83 c4 10             	add    esp,0x10
c00248e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00248ec:	74 41                	je     c002492f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00248ee:	31 c9                	xor    ecx,ecx
c00248f0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248f6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248fd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024901:	75 0a                	jne    c002490d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024903:	01 c9                	add    ecx,ecx
c0024905:	01 cd                	add    ebp,ecx
c0024907:	4b                   	dec    ebx
c0024908:	e9 54 ff ff ff       	jmp    c0024861 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002490d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024912:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024916:	51                   	push   ecx
c0024917:	51                   	push   ecx
c0024918:	52                   	push   edx
c0024919:	50                   	push   eax
c002491a:	e8 53 e7 ff ff       	call   c0023072 <IDE::getBase(unsigned char)>
c002491f:	89 c2                	mov    edx,eax
c0024921:	89 f0                	mov    eax,esi
c0024923:	66 ef                	out    dx,ax
c0024925:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024929:	83 c4 10             	add    esp,0x10
c002492c:	41                   	inc    ecx
c002492d:	eb c1                	jmp    c00248f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002492f:	31 f6                	xor    esi,esi
c0024931:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024937:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002493e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024942:	75 06                	jne    c002494a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024944:	01 f6                	add    esi,esi
c0024946:	01 f5                	add    ebp,esi
c0024948:	eb bd                	jmp    c0024907 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002494a:	51                   	push   ecx
c002494b:	51                   	push   ecx
c002494c:	52                   	push   edx
c002494d:	50                   	push   eax
c002494e:	e8 1f e7 ff ff       	call   c0023072 <IDE::getBase(unsigned char)>
c0024953:	89 c2                	mov    edx,eax
c0024955:	66 ed                	in     ax,dx
c0024957:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002495c:	83 c4 10             	add    esp,0x10
c002495f:	46                   	inc    esi
c0024960:	eb cf                	jmp    c0024931 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024962:	51                   	push   ecx
c0024963:	51                   	push   ecx
c0024964:	52                   	push   edx
c0024965:	50                   	push   eax
c0024966:	e8 87 e8 ff ff       	call   c00231f2 <IDE::waitInterrupt(unsigned char)>
c002496b:	83 c4 10             	add    esp,0x10
c002496e:	84 c0                	test   al,al
c0024970:	0f 84 e8 fd ff ff    	je     c002475e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024976:	bb a0 86 01 00       	mov    ebx,0x186a0
c002497b:	52                   	push   edx
c002497c:	52                   	push   edx
c002497d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024984:	50                   	push   eax
c0024985:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002498b:	e8 ce e6 ff ff       	call   c002305e <IDE::prepareInterrupt(unsigned char)>
c0024990:	83 c4 10             	add    esp,0x10
c0024993:	50                   	push   eax
c0024994:	50                   	push   eax
c0024995:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002499c:	50                   	push   eax
c002499d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249a3:	e8 ca e6 ff ff       	call   c0023072 <IDE::getBase(unsigned char)>
c00249a8:	8d 50 07             	lea    edx,[eax+0x7]
c00249ab:	ec                   	in     al,dx
c00249ac:	83 c4 10             	add    esp,0x10
c00249af:	a8 88                	test   al,0x88
c00249b1:	74 0a                	je     c00249bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249b3:	4b                   	dec    ebx
c00249b4:	75 dd                	jne    c0024993 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249b6:	bb 02 00 00 00       	mov    ebx,0x2
c00249bb:	eb 02                	jmp    c00249bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249bd:	31 db                	xor    ebx,ebx
c00249bf:	83 c4 1c             	add    esp,0x1c
c00249c2:	89 d8                	mov    eax,ebx
c00249c4:	5b                   	pop    ebx
c00249c5:	5e                   	pop    esi
c00249c6:	5f                   	pop    edi
c00249c7:	5d                   	pop    ebp
c00249c8:	c3                   	ret    
c00249c9:	90                   	nop

c00249ca <ATAPI::diskRemoved()>:
c00249ca:	83 ec 18             	sub    esp,0x18
c00249cd:	68 35 d0 02 c0       	push   0xc002d035
c00249d2:	e8 13 e6 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00249d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249db:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249e2:	83 c4 1c             	add    esp,0x1c
c00249e5:	c3                   	ret    

c00249e6 <ATAPI::eject()>:
c00249e6:	57                   	push   edi
c00249e7:	b9 03 00 00 00       	mov    ecx,0x3
c00249ec:	53                   	push   ebx
c00249ed:	83 ec 14             	sub    esp,0x14
c00249f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249f4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249f8:	fc                   	cld    
c00249f9:	31 c0                	xor    eax,eax
c00249fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249fd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a02:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a07:	50                   	push   eax
c0024a08:	50                   	push   eax
c0024a09:	6a 00                	push   0x0
c0024a0b:	6a 00                	push   0x0
c0024a0d:	6a 00                	push   0x0
c0024a0f:	6a 02                	push   0x2
c0024a11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a15:	50                   	push   eax
c0024a16:	53                   	push   ebx
c0024a17:	e8 ee fc ff ff       	call   c002470a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a1c:	83 c4 14             	add    esp,0x14
c0024a1f:	53                   	push   ebx
c0024a20:	e8 a5 ff ff ff       	call   c00249ca <ATAPI::diskRemoved()>
c0024a25:	83 c4 24             	add    esp,0x24
c0024a28:	31 c0                	xor    eax,eax
c0024a2a:	5b                   	pop    ebx
c0024a2b:	5f                   	pop    edi
c0024a2c:	c3                   	ret    
c0024a2d:	90                   	nop

c0024a2e <ATAPI::diskInserted()>:
c0024a2e:	53                   	push   ebx
c0024a2f:	83 ec 14             	sub    esp,0x14
c0024a32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a36:	68 4c d0 02 c0       	push   0xc002d04c
c0024a3b:	e8 aa e5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0024a40:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a4a:	e8 4d fe fe ff       	call   c001489c <PhysicalDisk::startCache()>
c0024a4f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a53:	83 c4 18             	add    esp,0x18
c0024a56:	5b                   	pop    ebx
c0024a57:	e9 c6 1f ff ff       	jmp    c0016a22 <createPartitionsForDisk(PhysicalDisk*)>

c0024a5c <ATAPI::detectMedia()>:
c0024a5c:	56                   	push   esi
c0024a5d:	53                   	push   ebx
c0024a5e:	83 ec 28             	sub    esp,0x28
c0024a61:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a65:	6a 0c                	push   0xc
c0024a67:	6a 00                	push   0x0
c0024a69:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a6d:	56                   	push   esi
c0024a6e:	e8 05 bd fd ff       	call   c0000778 <memset>
c0024a73:	58                   	pop    eax
c0024a74:	5a                   	pop    edx
c0024a75:	6a 00                	push   0x0
c0024a77:	6a 00                	push   0x0
c0024a79:	6a 00                	push   0x0
c0024a7b:	6a 00                	push   0x0
c0024a7d:	56                   	push   esi
c0024a7e:	53                   	push   ebx
c0024a7f:	e8 86 fc ff ff       	call   c002470a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a84:	83 c4 1c             	add    esp,0x1c
c0024a87:	6a 0c                	push   0xc
c0024a89:	6a 00                	push   0x0
c0024a8b:	56                   	push   esi
c0024a8c:	e8 e7 bc fd ff       	call   c0000778 <memset>
c0024a91:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a96:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a9b:	59                   	pop    ecx
c0024a9c:	58                   	pop    eax
c0024a9d:	6a 01                	push   0x1
c0024a9f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024aa3:	50                   	push   eax
c0024aa4:	6a 00                	push   0x0
c0024aa6:	6a 12                	push   0x12
c0024aa8:	56                   	push   esi
c0024aa9:	53                   	push   ebx
c0024aaa:	e8 5b fc ff ff       	call   c002470a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aaf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ab3:	83 c4 20             	add    esp,0x20
c0024ab6:	83 e0 7f             	and    eax,0x7f
c0024ab9:	3c 70                	cmp    al,0x70
c0024abb:	74 15                	je     c0024ad2 <ATAPI::detectMedia()+0x76>
c0024abd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ac4:	75 0c                	jne    c0024ad2 <ATAPI::detectMedia()+0x76>
c0024ac6:	83 ec 0c             	sub    esp,0xc
c0024ac9:	53                   	push   ebx
c0024aca:	e8 5f ff ff ff       	call   c0024a2e <ATAPI::diskInserted()>
c0024acf:	83 c4 10             	add    esp,0x10
c0024ad2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ad6:	83 e0 0f             	and    eax,0xf
c0024ad9:	3c 02                	cmp    al,0x2
c0024adb:	75 1b                	jne    c0024af8 <ATAPI::detectMedia()+0x9c>
c0024add:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ae2:	75 2d                	jne    c0024b11 <ATAPI::detectMedia()+0xb5>
c0024ae4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aeb:	74 24                	je     c0024b11 <ATAPI::detectMedia()+0xb5>
c0024aed:	83 ec 0c             	sub    esp,0xc
c0024af0:	53                   	push   ebx
c0024af1:	e8 d4 fe ff ff       	call   c00249ca <ATAPI::diskRemoved()>
c0024af6:	eb 16                	jmp    c0024b0e <ATAPI::detectMedia()+0xb2>
c0024af8:	84 c0                	test   al,al
c0024afa:	75 15                	jne    c0024b11 <ATAPI::detectMedia()+0xb5>
c0024afc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b03:	75 0c                	jne    c0024b11 <ATAPI::detectMedia()+0xb5>
c0024b05:	83 ec 0c             	sub    esp,0xc
c0024b08:	53                   	push   ebx
c0024b09:	e8 20 ff ff ff       	call   c0024a2e <ATAPI::diskInserted()>
c0024b0e:	83 c4 10             	add    esp,0x10
c0024b11:	83 c4 24             	add    esp,0x24
c0024b14:	5b                   	pop    ebx
c0024b15:	5e                   	pop    esi
c0024b16:	c3                   	ret    
c0024b17:	90                   	nop

c0024b18 <ATAPI::open(int, int, void*)>:
c0024b18:	53                   	push   ebx
c0024b19:	83 ec 08             	sub    esp,0x8
c0024b1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b2e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b34:	c1 e0 06             	shl    eax,0x6
c0024b37:	01 d0                	add    eax,edx
c0024b39:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b40:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b46:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b4d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b57:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b5d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b64:	6a 04                	push   0x4
c0024b66:	6a 0c                	push   0xc
c0024b68:	51                   	push   ecx
c0024b69:	52                   	push   edx
c0024b6a:	e8 15 e5 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b6f:	90                   	nop
c0024b70:	90                   	nop
c0024b71:	6a 00                	push   0x0
c0024b73:	6a 0c                	push   0xc
c0024b75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b7c:	50                   	push   eax
c0024b7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b83:	e8 fc e4 ff ff       	call   c0023084 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b88:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b8f:	83 c4 14             	add    esp,0x14
c0024b92:	53                   	push   ebx
c0024b93:	e8 c4 fe ff ff       	call   c0024a5c <ATAPI::detectMedia()>
c0024b98:	31 c0                	xor    eax,eax
c0024b9a:	83 c4 18             	add    esp,0x18
c0024b9d:	5b                   	pop    ebx
c0024b9e:	c3                   	ret    
c0024b9f:	90                   	nop

c0024ba0 <ATAPI::read(unsigned long long, int, void*)>:
c0024ba0:	55                   	push   ebp
c0024ba1:	57                   	push   edi
c0024ba2:	56                   	push   esi
c0024ba3:	53                   	push   ebx
c0024ba4:	83 ec 1c             	sub    esp,0x1c
c0024ba7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024baf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bb3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bba:	74 41                	je     c0024bfd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024bbc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024bc0:	b9 03 00 00 00       	mov    ecx,0x3
c0024bc5:	fc                   	cld    
c0024bc6:	31 c0                	xor    eax,eax
c0024bc8:	86 fb                	xchg   bl,bh
c0024bca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024bcc:	c1 c3 10             	rol    ebx,0x10
c0024bcf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bd4:	89 e8                	mov    eax,ebp
c0024bd6:	86 fb                	xchg   bl,bh
c0024bd8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bdc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024be0:	50                   	push   eax
c0024be1:	50                   	push   eax
c0024be2:	55                   	push   ebp
c0024be3:	c1 e5 0b             	shl    ebp,0xb
c0024be6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024bea:	6a 00                	push   0x0
c0024bec:	55                   	push   ebp
c0024bed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024bf1:	50                   	push   eax
c0024bf2:	56                   	push   esi
c0024bf3:	e8 12 fb ff ff       	call   c002470a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bf8:	83 c4 20             	add    esp,0x20
c0024bfb:	eb 1a                	jmp    c0024c17 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024bfd:	83 ec 0c             	sub    esp,0xc
c0024c00:	56                   	push   esi
c0024c01:	e8 56 fe ff ff       	call   c0024a5c <ATAPI::detectMedia()>
c0024c06:	83 c4 10             	add    esp,0x10
c0024c09:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c10:	75 aa                	jne    c0024bbc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c12:	b8 02 00 00 00       	mov    eax,0x2
c0024c17:	83 c4 1c             	add    esp,0x1c
c0024c1a:	5b                   	pop    ebx
c0024c1b:	5e                   	pop    esi
c0024c1c:	5f                   	pop    edi
c0024c1d:	5d                   	pop    ebp
c0024c1e:	c3                   	ret    
c0024c1f:	90                   	nop

c0024c20 <SATA::close(int, int, void*)>:
c0024c20:	83 ec 0c             	sub    esp,0xc
c0024c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c2d:	85 c0                	test   eax,eax
c0024c2f:	74 0c                	je     c0024c3d <SATA::close(int, int, void*)+0x1d>
c0024c31:	83 ec 0c             	sub    esp,0xc
c0024c34:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c36:	50                   	push   eax
c0024c37:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c3a:	83 c4 10             	add    esp,0x10
c0024c3d:	31 c0                	xor    eax,eax
c0024c3f:	83 c4 0c             	add    esp,0xc
c0024c42:	c3                   	ret    
c0024c43:	90                   	nop

c0024c44 <SATA::powerSaving(PowerSavingLevel)>:
c0024c44:	c3                   	ret    
c0024c45:	90                   	nop

c0024c46 <SATA::open(int, int, void*)>:
c0024c46:	56                   	push   esi
c0024c47:	53                   	push   ebx
c0024c48:	50                   	push   eax
c0024c49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c51:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c5b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c61:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c6f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c79:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c7f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c86:	e8 76 b2 fe ff       	call   c000ff01 <Phys::allocatePage()>
c0024c8b:	89 c6                	mov    esi,eax
c0024c8d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c93:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c99:	e8 63 b2 fe ff       	call   c000ff01 <Phys::allocatePage()>
c0024c9e:	39 c6                	cmp    esi,eax
c0024ca0:	74 10                	je     c0024cb2 <SATA::open(int, int, void*)+0x6c>
c0024ca2:	83 ec 0c             	sub    esp,0xc
c0024ca5:	68 74 cf 02 c0       	push   0xc002cf74
c0024caa:	e8 ec 59 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0024caf:	83 c4 10             	add    esp,0x10
c0024cb2:	83 ec 0c             	sub    esp,0xc
c0024cb5:	6a 02                	push   0x2
c0024cb7:	e8 27 cf fe ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0024cbc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cc2:	e8 b7 d1 fe ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0024cc7:	6a 03                	push   0x3
c0024cc9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ccf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cd5:	50                   	push   eax
c0024cd6:	e8 df d6 fe ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cdb:	83 c4 14             	add    esp,0x14
c0024cde:	53                   	push   ebx
c0024cdf:	e8 b8 fb fe ff       	call   c001489c <PhysicalDisk::startCache()>
c0024ce4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ce7:	e8 36 1d ff ff       	call   c0016a22 <createPartitionsForDisk(PhysicalDisk*)>
c0024cec:	83 c4 14             	add    esp,0x14
c0024cef:	31 c0                	xor    eax,eax
c0024cf1:	5b                   	pop    ebx
c0024cf2:	5e                   	pop    esi
c0024cf3:	c3                   	ret    

c0024cf4 <SATA::SATA()>:
c0024cf4:	83 ec 0c             	sub    esp,0xc
c0024cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cfb:	83 ec 04             	sub    esp,0x4
c0024cfe:	68 00 02 00 00       	push   0x200
c0024d03:	68 88 cf 02 c0       	push   0xc002cf88
c0024d08:	50                   	push   eax
c0024d09:	e8 26 fb fe ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d0e:	83 c4 10             	add    esp,0x10
c0024d11:	ba f8 cf 02 c0       	mov    edx,0xc002cff8
c0024d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d1a:	89 10                	mov    DWORD PTR [eax],edx
c0024d1c:	90                   	nop
c0024d1d:	83 c4 0c             	add    esp,0xc
c0024d20:	c3                   	ret    
c0024d21:	90                   	nop

c0024d22 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d22:	55                   	push   ebp
c0024d23:	57                   	push   edi
c0024d24:	56                   	push   esi
c0024d25:	53                   	push   ebx
c0024d26:	83 ec 2c             	sub    esp,0x2c
c0024d29:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d2d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d35:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d39:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d3d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d46:	7e 10                	jle    c0024d58 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d48:	83 ec 0c             	sub    esp,0xc
c0024d4b:	68 98 cf 02 c0       	push   0xc002cf98
c0024d50:	e8 46 59 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0024d55:	83 c4 10             	add    esp,0x10
c0024d58:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d5e:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d6e:	89 f0                	mov    eax,esi
c0024d70:	c1 e0 07             	shl    eax,0x7
c0024d73:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d77:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d81:	53                   	push   ebx
c0024d82:	8d 46 02             	lea    eax,[esi+0x2]
c0024d85:	53                   	push   ebx
c0024d86:	c1 e0 07             	shl    eax,0x7
c0024d89:	bb 01 00 00 00       	mov    ebx,0x1
c0024d8e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d92:	50                   	push   eax
c0024d93:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d99:	e8 aa ef ff ff       	call   c0023d48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024da2:	83 c4 10             	add    esp,0x10
c0024da5:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024daa:	0f 84 ce 01 00 00    	je     c0024f7e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024db0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024db4:	c1 e0 09             	shl    eax,0x9
c0024db7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024dc0:	74 17                	je     c0024dd9 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024dc2:	51                   	push   ecx
c0024dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024dc7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024dcb:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024dd1:	e8 6e b9 fd ff       	call   c0000744 <memcpy>
c0024dd6:	83 c4 10             	add    esp,0x10
c0024dd9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ddf:	8d 46 02             	lea    eax,[esi+0x2]
c0024de2:	c1 e0 07             	shl    eax,0x7
c0024de5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024de9:	8b 00                	mov    eax,DWORD PTR [eax]
c0024deb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024df1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024dfb:	c1 e1 05             	shl    ecx,0x5
c0024dfe:	01 c8                	add    eax,ecx
c0024e00:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e04:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e06:	83 e1 01             	and    ecx,0x1
c0024e09:	83 e3 bf             	and    ebx,0xffffffbf
c0024e0c:	c1 e1 06             	shl    ecx,0x6
c0024e0f:	09 d9                	or     ecx,ebx
c0024e11:	88 08                	mov    BYTE PTR [eax],cl
c0024e13:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e15:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e1b:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e21:	89 08                	mov    DWORD PTR [eax],ecx
c0024e23:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e29:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e2f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e35:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e38:	52                   	push   edx
c0024e39:	68 90 00 00 00       	push   0x90
c0024e3e:	6a 00                	push   0x0
c0024e40:	53                   	push   ebx
c0024e41:	e8 32 b9 fd ff       	call   c0000778 <memset>
c0024e46:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e4c:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e50:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e56:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e5e:	83 c4 10             	add    esp,0x10
c0024e61:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e64:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e6a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e70:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e75:	09 c8                	or     eax,ecx
c0024e77:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e7d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e80:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e87:	66 25 00 7f          	and    ax,0x7f00
c0024e8b:	66 0d 27 80          	or     ax,0x8027
c0024e8f:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e94:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e97:	19 c0                	sbb    eax,eax
c0024e99:	83 e0 f0             	and    eax,0xfffffff0
c0024e9c:	83 c0 35             	add    eax,0x35
c0024e9f:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ea2:	89 f8                	mov    eax,edi
c0024ea4:	c1 e8 10             	shr    eax,0x10
c0024ea7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024eaa:	89 f8                	mov    eax,edi
c0024eac:	c1 e8 18             	shr    eax,0x18
c0024eaf:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024eb2:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024eb6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ebd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ec0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ec4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ec8:	89 f3                	mov    ebx,esi
c0024eca:	31 c0                	xor    eax,eax
c0024ecc:	c1 e3 07             	shl    ebx,0x7
c0024ecf:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ed3:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ed9:	80 e1 88             	and    cl,0x88
c0024edc:	74 0a                	je     c0024ee8 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ede:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ee3:	74 0a                	je     c0024eef <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024ee5:	40                   	inc    eax
c0024ee6:	eb eb                	jmp    c0024ed3 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ee8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024eed:	75 0a                	jne    c0024ef9 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024eef:	83 ec 0c             	sub    esp,0xc
c0024ef2:	68 d1 cf 02 c0       	push   0xc002cfd1
c0024ef7:	eb 56                	jmp    c0024f4f <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ef9:	b8 01 00 00 00       	mov    eax,0x1
c0024efe:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f02:	c1 e6 07             	shl    esi,0x7
c0024f05:	d3 e0                	shl    eax,cl
c0024f07:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f0b:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f11:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f17:	85 c8                	test   eax,ecx
c0024f19:	74 20                	je     c0024f3b <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f1b:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f21:	0f ba e1 1e          	bt     ecx,0x1e
c0024f25:	73 ea                	jae    c0024f11 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f27:	83 ec 0c             	sub    esp,0xc
c0024f2a:	31 db                	xor    ebx,ebx
c0024f2c:	68 df cf 02 c0       	push   0xc002cfdf
c0024f31:	e8 65 57 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0024f36:	83 c4 10             	add    esp,0x10
c0024f39:	eb 43                	jmp    c0024f7e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f3b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f41:	0f ba e0 1e          	bt     eax,0x1e
c0024f45:	73 17                	jae    c0024f5e <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f47:	83 ec 0c             	sub    esp,0xc
c0024f4a:	68 df cf 02 c0       	push   0xc002cfdf
c0024f4f:	e8 47 57 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0024f54:	bb 01 00 00 00       	mov    ebx,0x1
c0024f59:	83 c4 10             	add    esp,0x10
c0024f5c:	eb 20                	jmp    c0024f7e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f5e:	31 db                	xor    ebx,ebx
c0024f60:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f65:	75 17                	jne    c0024f7e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f67:	50                   	push   eax
c0024f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f6c:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f72:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f76:	e8 c9 b7 fd ff       	call   c0000744 <memcpy>
c0024f7b:	83 c4 10             	add    esp,0x10
c0024f7e:	83 c4 2c             	add    esp,0x2c
c0024f81:	89 d8                	mov    eax,ebx
c0024f83:	5b                   	pop    ebx
c0024f84:	5e                   	pop    esi
c0024f85:	5f                   	pop    edi
c0024f86:	5d                   	pop    ebp
c0024f87:	c3                   	ret    

c0024f88 <SATA::read(unsigned long long, int, void*)>:
c0024f88:	57                   	push   edi
c0024f89:	b8 04 00 00 00       	mov    eax,0x4
c0024f8e:	56                   	push   esi
c0024f8f:	53                   	push   ebx
c0024f90:	83 ec 10             	sub    esp,0x10
c0024f93:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f97:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f9b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f9e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fa2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fa6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fac:	77 3b                	ja     c0024fe9 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fae:	b8 06 00 00 00       	mov    eax,0x6
c0024fb3:	85 d2                	test   edx,edx
c0024fb5:	74 32                	je     c0024fe9 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fb7:	50                   	push   eax
c0024fb8:	50                   	push   eax
c0024fb9:	6a 00                	push   0x0
c0024fbb:	52                   	push   edx
c0024fbc:	53                   	push   ebx
c0024fbd:	57                   	push   edi
c0024fbe:	56                   	push   esi
c0024fbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fc3:	e8 5a fd ff ff       	call   c0024d22 <SATA::access(unsigned long long, int, void*, bool)>
c0024fc8:	83 c4 20             	add    esp,0x20
c0024fcb:	85 c0                	test   eax,eax
c0024fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fd1:	75 11                	jne    c0024fe4 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fd3:	01 1d 88 28 03 c0    	add    DWORD PTR ds:0xc0032888,ebx
c0024fd9:	e8 5a ba fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c0024fde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024fe2:	eb 05                	jmp    c0024fe9 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fe4:	b8 01 00 00 00       	mov    eax,0x1
c0024fe9:	83 c4 10             	add    esp,0x10
c0024fec:	5b                   	pop    ebx
c0024fed:	5e                   	pop    esi
c0024fee:	5f                   	pop    edi
c0024fef:	c3                   	ret    

c0024ff0 <SATA::write(unsigned long long, int, void*)>:
c0024ff0:	55                   	push   ebp
c0024ff1:	b8 04 00 00 00       	mov    eax,0x4
c0024ff6:	57                   	push   edi
c0024ff7:	56                   	push   esi
c0024ff8:	53                   	push   ebx
c0024ff9:	83 ec 1c             	sub    esp,0x1c
c0024ffc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025000:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025004:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025007:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002500b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002500f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025015:	77 56                	ja     c002506d <SATA::write(unsigned long long, int, void*)+0x7d>
c0025017:	b8 06 00 00 00       	mov    eax,0x6
c002501c:	85 ff                	test   edi,edi
c002501e:	74 4d                	je     c002506d <SATA::write(unsigned long long, int, void*)+0x7d>
c0025020:	89 ee                	mov    esi,ebp
c0025022:	c1 e6 09             	shl    esi,0x9
c0025025:	01 fe                	add    esi,edi
c0025027:	89 c8                	mov    eax,ecx
c0025029:	89 da                	mov    edx,ebx
c002502b:	83 c0 01             	add    eax,0x1
c002502e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025032:	83 d2 00             	adc    edx,0x0
c0025035:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025039:	50                   	push   eax
c002503a:	50                   	push   eax
c002503b:	6a 01                	push   0x1
c002503d:	57                   	push   edi
c002503e:	81 c7 00 02 00 00    	add    edi,0x200
c0025044:	6a 01                	push   0x1
c0025046:	53                   	push   ebx
c0025047:	51                   	push   ecx
c0025048:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002504c:	e8 d1 fc ff ff       	call   c0024d22 <SATA::access(unsigned long long, int, void*, bool)>
c0025051:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025055:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025059:	83 c4 20             	add    esp,0x20
c002505c:	39 f7                	cmp    edi,esi
c002505e:	75 c7                	jne    c0025027 <SATA::write(unsigned long long, int, void*)+0x37>
c0025060:	01 2d 84 28 03 c0    	add    DWORD PTR ds:0xc0032884,ebp
c0025066:	e8 cd b9 fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c002506b:	31 c0                	xor    eax,eax
c002506d:	83 c4 1c             	add    esp,0x1c
c0025070:	5b                   	pop    ebx
c0025071:	5e                   	pop    esi
c0025072:	5f                   	pop    edi
c0025073:	5d                   	pop    ebp
c0025074:	c3                   	ret    
c0025075:	90                   	nop

c0025076 <SATAPI::write(unsigned long long, int, void*)>:
c0025076:	b8 03 00 00 00       	mov    eax,0x3
c002507b:	c3                   	ret    

c002507c <SATAPI::close(int, int, void*)>:
c002507c:	83 ec 0c             	sub    esp,0xc
c002507f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025083:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025089:	85 c0                	test   eax,eax
c002508b:	74 0c                	je     c0025099 <SATAPI::close(int, int, void*)+0x1d>
c002508d:	83 ec 0c             	sub    esp,0xc
c0025090:	8b 10                	mov    edx,DWORD PTR [eax]
c0025092:	50                   	push   eax
c0025093:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025096:	83 c4 10             	add    esp,0x10
c0025099:	31 c0                	xor    eax,eax
c002509b:	83 c4 0c             	add    esp,0xc
c002509e:	c3                   	ret    
c002509f:	90                   	nop

c00250a0 <SATAPI::SATAPI()>:
c00250a0:	83 ec 0c             	sub    esp,0xc
c00250a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a7:	83 ec 04             	sub    esp,0x4
c00250aa:	68 00 08 00 00       	push   0x800
c00250af:	68 28 d0 02 c0       	push   0xc002d028
c00250b4:	50                   	push   eax
c00250b5:	e8 7a f7 fe ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250ba:	83 c4 10             	add    esp,0x10
c00250bd:	ba d4 d0 02 c0       	mov    edx,0xc002d0d4
c00250c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c6:	89 10                	mov    DWORD PTR [eax],edx
c00250c8:	90                   	nop
c00250c9:	83 c4 0c             	add    esp,0xc
c00250cc:	c3                   	ret    
c00250cd:	90                   	nop

c00250ce <SATAPI::diskRemoved()>:
c00250ce:	83 ec 18             	sub    esp,0x18
c00250d1:	68 34 d0 02 c0       	push   0xc002d034
c00250d6:	e8 0f df fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00250db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250df:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250e6:	83 c4 1c             	add    esp,0x1c
c00250e9:	c3                   	ret    

c00250ea <SATAPI::diskInserted()>:
c00250ea:	53                   	push   ebx
c00250eb:	83 ec 14             	sub    esp,0x14
c00250ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250f2:	68 4b d0 02 c0       	push   0xc002d04b
c00250f7:	e8 ee de fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00250fc:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025106:	e8 91 f7 fe ff       	call   c001489c <PhysicalDisk::startCache()>
c002510b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002510f:	83 c4 18             	add    esp,0x18
c0025112:	5b                   	pop    ebx
c0025113:	e9 0a 19 ff ff       	jmp    c0016a22 <createPartitionsForDisk(PhysicalDisk*)>

c0025118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025118:	55                   	push   ebp
c0025119:	57                   	push   edi
c002511a:	56                   	push   esi
c002511b:	53                   	push   ebx
c002511c:	83 ec 24             	sub    esp,0x24
c002511f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025123:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025127:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002512d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025131:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025135:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002513b:	8d 5f 02             	lea    ebx,[edi+0x2]
c002513e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025144:	c1 e3 07             	shl    ebx,0x7
c0025147:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002514b:	89 f8                	mov    eax,edi
c002514d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025151:	c1 e0 07             	shl    eax,0x7
c0025154:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002515c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025166:	53                   	push   ebx
c0025167:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002516d:	e8 d6 eb ff ff       	call   c0023d48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025172:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025176:	83 c4 10             	add    esp,0x10
c0025179:	b8 01 00 00 00       	mov    eax,0x1
c002517e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025183:	0f 84 8a 01 00 00    	je     c0025313 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025189:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002518f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025191:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025197:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002519d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251a1:	c1 e1 05             	shl    ecx,0x5
c00251a4:	01 c8                	add    eax,ecx
c00251a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251a8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251ae:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251b4:	89 08                	mov    DWORD PTR [eax],ecx
c00251b6:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251bc:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251c2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251c8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251cb:	52                   	push   edx
c00251cc:	68 90 00 00 00       	push   0x90
c00251d1:	6a 00                	push   0x0
c00251d3:	53                   	push   ebx
c00251d4:	e8 9f b5 fd ff       	call   c0000778 <memset>
c00251d9:	83 c4 0c             	add    esp,0xc
c00251dc:	8d 43 40             	lea    eax,[ebx+0x40]
c00251df:	6a 0c                	push   0xc
c00251e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251e5:	50                   	push   eax
c00251e6:	e8 59 b5 fd ff       	call   c0000744 <memcpy>
c00251eb:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00251f1:	89 ea                	mov    edx,ebp
c00251f3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251f9:	c1 ea 18             	shr    edx,0x18
c00251fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025200:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025203:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025206:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002520a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025210:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025216:	25 00 00 c0 ff       	and    eax,0xffc00000
c002521b:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002521f:	09 c8                	or     eax,ecx
c0025221:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025225:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002522b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002522e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025235:	66 25 00 7f          	and    ax,0x7f00
c0025239:	66 0d 27 80          	or     ax,0x8027
c002523d:	66 89 03             	mov    WORD PTR [ebx],ax
c0025240:	89 e8                	mov    eax,ebp
c0025242:	c1 e8 10             	shr    eax,0x10
c0025245:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025248:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002524c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002524f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025253:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025256:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002525a:	83 c4 10             	add    esp,0x10
c002525d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025265:	31 c0                	xor    eax,eax
c0025267:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002526d:	80 e1 88             	and    cl,0x88
c0025270:	74 0a                	je     c002527c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025272:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025277:	74 0a                	je     c0025283 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025279:	40                   	inc    eax
c002527a:	eb eb                	jmp    c0025267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002527c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025281:	75 0f                	jne    c0025292 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025283:	83 ec 0c             	sub    esp,0xc
c0025286:	68 d1 cf 02 c0       	push   0xc002cfd1
c002528b:	e8 0b 54 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0025290:	eb 3a                	jmp    c00252cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025292:	b8 01 00 00 00       	mov    eax,0x1
c0025297:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002529b:	c1 e7 07             	shl    edi,0x7
c002529e:	d3 e0                	shl    eax,cl
c00252a0:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252a3:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252a9:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252af:	85 d0                	test   eax,edx
c00252b1:	74 23                	je     c00252d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252b3:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252b9:	0f ba e2 1e          	bt     edx,0x1e
c00252bd:	73 ea                	jae    c00252a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252bf:	83 ec 0c             	sub    esp,0xc
c00252c2:	68 63 d0 02 c0       	push   0xc002d063
c00252c7:	e8 1e dd fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00252cc:	83 c4 10             	add    esp,0x10
c00252cf:	b8 01 00 00 00       	mov    eax,0x1
c00252d4:	eb 3d                	jmp    c0025313 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252d6:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252dc:	0f ba e0 1e          	bt     eax,0x1e
c00252e0:	73 0a                	jae    c00252ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252e2:	83 ec 0c             	sub    esp,0xc
c00252e5:	68 76 d0 02 c0       	push   0xc002d076
c00252ea:	eb db                	jmp    c00252c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00252f1:	74 1e                	je     c0025311 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252f3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252f8:	74 17                	je     c0025311 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252fa:	50                   	push   eax
c00252fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252ff:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025305:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025309:	e8 36 b4 fd ff       	call   c0000744 <memcpy>
c002530e:	83 c4 10             	add    esp,0x10
c0025311:	31 c0                	xor    eax,eax
c0025313:	83 c4 1c             	add    esp,0x1c
c0025316:	5b                   	pop    ebx
c0025317:	5e                   	pop    esi
c0025318:	5f                   	pop    edi
c0025319:	5d                   	pop    ebp
c002531a:	c3                   	ret    
c002531b:	90                   	nop

c002531c <SATAPI::eject()>:
c002531c:	57                   	push   edi
c002531d:	b9 03 00 00 00       	mov    ecx,0x3
c0025322:	53                   	push   ebx
c0025323:	83 ec 14             	sub    esp,0x14
c0025326:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002532a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002532e:	fc                   	cld    
c002532f:	31 c0                	xor    eax,eax
c0025331:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025333:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025338:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002533d:	50                   	push   eax
c002533e:	6a 00                	push   0x0
c0025340:	6a 00                	push   0x0
c0025342:	6a 00                	push   0x0
c0025344:	6a 00                	push   0x0
c0025346:	6a 02                	push   0x2
c0025348:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002534c:	50                   	push   eax
c002534d:	53                   	push   ebx
c002534e:	e8 c5 fd ff ff       	call   c0025118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025353:	83 c4 14             	add    esp,0x14
c0025356:	53                   	push   ebx
c0025357:	e8 72 fd ff ff       	call   c00250ce <SATAPI::diskRemoved()>
c002535c:	83 c4 24             	add    esp,0x24
c002535f:	31 c0                	xor    eax,eax
c0025361:	5b                   	pop    ebx
c0025362:	5f                   	pop    edi
c0025363:	c3                   	ret    

c0025364 <SATAPI::detectMedia()>:
c0025364:	56                   	push   esi
c0025365:	53                   	push   ebx
c0025366:	83 ec 28             	sub    esp,0x28
c0025369:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002536d:	6a 0c                	push   0xc
c002536f:	6a 00                	push   0x0
c0025371:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025375:	56                   	push   esi
c0025376:	e8 fd b3 fd ff       	call   c0000778 <memset>
c002537b:	83 c4 0c             	add    esp,0xc
c002537e:	6a 00                	push   0x0
c0025380:	6a 00                	push   0x0
c0025382:	6a 00                	push   0x0
c0025384:	6a 00                	push   0x0
c0025386:	6a 00                	push   0x0
c0025388:	56                   	push   esi
c0025389:	53                   	push   ebx
c002538a:	e8 89 fd ff ff       	call   c0025118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002538f:	83 c4 1c             	add    esp,0x1c
c0025392:	6a 0c                	push   0xc
c0025394:	6a 00                	push   0x0
c0025396:	56                   	push   esi
c0025397:	e8 dc b3 fd ff       	call   c0000778 <memset>
c002539c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253a1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253a6:	83 c4 0c             	add    esp,0xc
c00253a9:	6a 01                	push   0x1
c00253ab:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253af:	50                   	push   eax
c00253b0:	6a 00                	push   0x0
c00253b2:	6a 00                	push   0x0
c00253b4:	6a 12                	push   0x12
c00253b6:	56                   	push   esi
c00253b7:	53                   	push   ebx
c00253b8:	e8 5b fd ff ff       	call   c0025118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253bd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253c1:	83 c4 20             	add    esp,0x20
c00253c4:	83 e0 7f             	and    eax,0x7f
c00253c7:	3c 70                	cmp    al,0x70
c00253c9:	74 15                	je     c00253e0 <SATAPI::detectMedia()+0x7c>
c00253cb:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253d2:	75 0c                	jne    c00253e0 <SATAPI::detectMedia()+0x7c>
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	53                   	push   ebx
c00253d8:	e8 0d fd ff ff       	call   c00250ea <SATAPI::diskInserted()>
c00253dd:	83 c4 10             	add    esp,0x10
c00253e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253e4:	83 e0 0f             	and    eax,0xf
c00253e7:	3c 02                	cmp    al,0x2
c00253e9:	75 1b                	jne    c0025406 <SATAPI::detectMedia()+0xa2>
c00253eb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253f0:	75 2d                	jne    c002541f <SATAPI::detectMedia()+0xbb>
c00253f2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253f9:	74 24                	je     c002541f <SATAPI::detectMedia()+0xbb>
c00253fb:	83 ec 0c             	sub    esp,0xc
c00253fe:	53                   	push   ebx
c00253ff:	e8 ca fc ff ff       	call   c00250ce <SATAPI::diskRemoved()>
c0025404:	eb 16                	jmp    c002541c <SATAPI::detectMedia()+0xb8>
c0025406:	84 c0                	test   al,al
c0025408:	75 15                	jne    c002541f <SATAPI::detectMedia()+0xbb>
c002540a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025411:	75 0c                	jne    c002541f <SATAPI::detectMedia()+0xbb>
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	53                   	push   ebx
c0025417:	e8 ce fc ff ff       	call   c00250ea <SATAPI::diskInserted()>
c002541c:	83 c4 10             	add    esp,0x10
c002541f:	83 c4 24             	add    esp,0x24
c0025422:	5b                   	pop    ebx
c0025423:	5e                   	pop    esi
c0025424:	c3                   	ret    
c0025425:	90                   	nop

c0025426 <SATAPI::open(int, int, void*)>:
c0025426:	56                   	push   esi
c0025427:	53                   	push   ebx
c0025428:	50                   	push   eax
c0025429:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002542d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025431:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002543b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025441:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002544b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002544f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025459:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002545f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025466:	e8 96 aa fe ff       	call   c000ff01 <Phys::allocatePage()>
c002546b:	89 c6                	mov    esi,eax
c002546d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025473:	81 c6 00 10 00 00    	add    esi,0x1000
c0025479:	e8 83 aa fe ff       	call   c000ff01 <Phys::allocatePage()>
c002547e:	39 c6                	cmp    esi,eax
c0025480:	74 10                	je     c0025492 <SATAPI::open(int, int, void*)+0x6c>
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	68 8b d0 02 c0       	push   0xc002d08b
c002548a:	e8 0c 52 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c002548f:	83 c4 10             	add    esp,0x10
c0025492:	83 ec 0c             	sub    esp,0xc
c0025495:	6a 02                	push   0x2
c0025497:	e8 47 c7 fe ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c002549c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254a2:	e8 d7 c9 fe ff       	call   c0011e7e <Virt::getAKernelVAS()>
c00254a7:	6a 03                	push   0x3
c00254a9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254af:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254b5:	50                   	push   eax
c00254b6:	e8 ff ce fe ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00254bb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254c2:	83 c4 14             	add    esp,0x14
c00254c5:	53                   	push   ebx
c00254c6:	e8 99 fe ff ff       	call   c0025364 <SATAPI::detectMedia()>
c00254cb:	83 c4 14             	add    esp,0x14
c00254ce:	31 c0                	xor    eax,eax
c00254d0:	5b                   	pop    ebx
c00254d1:	5e                   	pop    esi
c00254d2:	c3                   	ret    
c00254d3:	90                   	nop

c00254d4 <SATAPI::read(unsigned long long, int, void*)>:
c00254d4:	55                   	push   ebp
c00254d5:	57                   	push   edi
c00254d6:	56                   	push   esi
c00254d7:	53                   	push   ebx
c00254d8:	83 ec 1c             	sub    esp,0x1c
c00254db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00254e7:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254ee:	74 19                	je     c0025509 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00254f0:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00254f5:	7e 2e                	jle    c0025525 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254f7:	83 ec 0c             	sub    esp,0xc
c00254fa:	68 a1 d0 02 c0       	push   0xc002d0a1
c00254ff:	e8 97 51 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0025504:	83 c4 10             	add    esp,0x10
c0025507:	eb 1c                	jmp    c0025525 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025509:	83 ec 0c             	sub    esp,0xc
c002550c:	55                   	push   ebp
c002550d:	e8 52 fe ff ff       	call   c0025364 <SATAPI::detectMedia()>
c0025512:	83 c4 10             	add    esp,0x10
c0025515:	b8 02 00 00 00       	mov    eax,0x2
c002551a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025521:	75 cd                	jne    c00254f0 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025523:	eb 49                	jmp    c002556e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025525:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025529:	b9 03 00 00 00       	mov    ecx,0x3
c002552e:	fc                   	cld    
c002552f:	31 c0                	xor    eax,eax
c0025531:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025533:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025538:	89 d8                	mov    eax,ebx
c002553a:	86 e0                	xchg   al,ah
c002553c:	c1 c0 10             	rol    eax,0x10
c002553f:	86 e0                	xchg   al,ah
c0025541:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025545:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025549:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002554d:	50                   	push   eax
c002554e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025552:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025556:	56                   	push   esi
c0025557:	53                   	push   ebx
c0025558:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002555c:	c1 e0 0b             	shl    eax,0xb
c002555f:	50                   	push   eax
c0025560:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025564:	50                   	push   eax
c0025565:	55                   	push   ebp
c0025566:	e8 ad fb ff ff       	call   c0025118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002556b:	83 c4 20             	add    esp,0x20
c002556e:	83 c4 1c             	add    esp,0x1c
c0025571:	5b                   	pop    ebx
c0025572:	5e                   	pop    esi
c0025573:	5f                   	pop    edi
c0025574:	5d                   	pop    ebp
c0025575:	c3                   	ret    

c0025576 <AVX::open(int, int, void*)>:
c0025576:	83 ec 0c             	sub    esp,0xc
c0025579:	e8 3a 11 00 00       	call   c00266b8 <avxInit>
c002557e:	b8 00 00 00 00       	mov    eax,0x0
c0025583:	83 c4 0c             	add    esp,0xc
c0025586:	c3                   	ret    
c0025587:	90                   	nop

c0025588 <AVX::close(int, int, void*)>:
c0025588:	83 ec 0c             	sub    esp,0xc
c002558b:	e8 29 11 00 00       	call   c00266b9 <avxClose>
c0025590:	b8 00 00 00 00       	mov    eax,0x0
c0025595:	83 c4 0c             	add    esp,0xc
c0025598:	c3                   	ret    
c0025599:	90                   	nop

c002559a <AVX::available()>:
c002559a:	83 ec 0c             	sub    esp,0xc
c002559d:	e8 0e 11 00 00       	call   c00266b0 <avxDetect>
c00255a2:	85 c0                	test   eax,eax
c00255a4:	0f 95 c0             	setne  al
c00255a7:	83 c4 0c             	add    esp,0xc
c00255aa:	c3                   	ret    
c00255ab:	90                   	nop

c00255ac <AVX::save(void*)>:
c00255ac:	83 ec 0c             	sub    esp,0xc
c00255af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255b3:	83 ec 0c             	sub    esp,0xc
c00255b6:	50                   	push   eax
c00255b7:	e8 fa 10 00 00       	call   c00266b6 <avxSave>
c00255bc:	83 c4 10             	add    esp,0x10
c00255bf:	90                   	nop
c00255c0:	83 c4 0c             	add    esp,0xc
c00255c3:	c3                   	ret    

c00255c4 <AVX::load(void*)>:
c00255c4:	83 ec 0c             	sub    esp,0xc
c00255c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255cb:	83 ec 0c             	sub    esp,0xc
c00255ce:	50                   	push   eax
c00255cf:	e8 e3 10 00 00       	call   c00266b7 <avxLoad>
c00255d4:	83 c4 10             	add    esp,0x10
c00255d7:	90                   	nop
c00255d8:	83 c4 0c             	add    esp,0xc
c00255db:	c3                   	ret    

c00255dc <AVX::AVX()>:
c00255dc:	83 ec 0c             	sub    esp,0xc
c00255df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e3:	83 ec 08             	sub    esp,0x8
c00255e6:	68 04 d1 02 c0       	push   0xc002d104
c00255eb:	50                   	push   eax
c00255ec:	e8 21 f3 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c00255f1:	83 c4 10             	add    esp,0x10
c00255f4:	ba 14 d1 02 c0       	mov    edx,0xc002d114
c00255f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255fd:	89 10                	mov    DWORD PTR [eax],edx
c00255ff:	90                   	nop
c0025600:	83 c4 0c             	add    esp,0xc
c0025603:	c3                   	ret    

c0025604 <MMX::available()>:
c0025604:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0025609:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002560f:	83 e0 20             	and    eax,0x20
c0025612:	84 c0                	test   al,al
c0025614:	0f 95 c0             	setne  al
c0025617:	c3                   	ret    

c0025618 <MMX::open(int, int, void*)>:
c0025618:	83 ec 0c             	sub    esp,0xc
c002561b:	e8 1c 11 00 00       	call   c002673c <x87Init>
c0025620:	b8 00 00 00 00       	mov    eax,0x0
c0025625:	83 c4 0c             	add    esp,0xc
c0025628:	c3                   	ret    
c0025629:	90                   	nop

c002562a <MMX::close(int, int, void*)>:
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	e8 24 11 00 00       	call   c0026756 <x87Close>
c0025632:	b8 00 00 00 00       	mov    eax,0x0
c0025637:	83 c4 0c             	add    esp,0xc
c002563a:	c3                   	ret    
c002563b:	90                   	nop

c002563c <MMX::save(void*)>:
c002563c:	83 ec 0c             	sub    esp,0xc
c002563f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025643:	83 ec 0c             	sub    esp,0xc
c0025646:	50                   	push   eax
c0025647:	e8 e5 10 00 00       	call   c0026731 <x87Save>
c002564c:	83 c4 10             	add    esp,0x10
c002564f:	90                   	nop
c0025650:	83 c4 0c             	add    esp,0xc
c0025653:	c3                   	ret    

c0025654 <MMX::load(void*)>:
c0025654:	83 ec 0c             	sub    esp,0xc
c0025657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002565b:	83 ec 0c             	sub    esp,0xc
c002565e:	50                   	push   eax
c002565f:	e8 d3 10 00 00       	call   c0026737 <x87Load>
c0025664:	83 c4 10             	add    esp,0x10
c0025667:	90                   	nop
c0025668:	83 c4 0c             	add    esp,0xc
c002566b:	c3                   	ret    

c002566c <MMX::MMX()>:
c002566c:	83 ec 0c             	sub    esp,0xc
c002566f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025673:	83 ec 08             	sub    esp,0x8
c0025676:	68 44 d1 02 c0       	push   0xc002d144
c002567b:	50                   	push   eax
c002567c:	e8 91 f2 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c0025681:	83 c4 10             	add    esp,0x10
c0025684:	ba 54 d1 02 c0       	mov    edx,0xc002d154
c0025689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568d:	89 10                	mov    DWORD PTR [eax],edx
c002568f:	90                   	nop
c0025690:	83 c4 0c             	add    esp,0xc
c0025693:	c3                   	ret    

c0025694 <SSE::open(int, int, void*)>:
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	e8 58 10 00 00       	call   c00266f4 <sseInit>
c002569c:	b8 00 00 00 00       	mov    eax,0x0
c00256a1:	83 c4 0c             	add    esp,0xc
c00256a4:	c3                   	ret    
c00256a5:	90                   	nop

c00256a6 <SSE::close(int, int, void*)>:
c00256a6:	83 ec 0c             	sub    esp,0xc
c00256a9:	e8 56 10 00 00       	call   c0026704 <sseClose>
c00256ae:	b8 00 00 00 00       	mov    eax,0x0
c00256b3:	83 c4 0c             	add    esp,0xc
c00256b6:	c3                   	ret    
c00256b7:	90                   	nop

c00256b8 <SSE::available()>:
c00256b8:	83 ec 1c             	sub    esp,0x1c
c00256bb:	e8 10 10 00 00       	call   c00266d0 <absolutelyNoChanceInHell>
c00256c0:	85 c0                	test   eax,eax
c00256c2:	0f 95 c0             	setne  al
c00256c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256cd:	83 c4 1c             	add    esp,0x1c
c00256d0:	c3                   	ret    
c00256d1:	90                   	nop

c00256d2 <SSE::save(void*)>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256d9:	83 ec 0c             	sub    esp,0xc
c00256dc:	50                   	push   eax
c00256dd:	e8 06 10 00 00       	call   c00266e8 <sseSave>
c00256e2:	83 c4 10             	add    esp,0x10
c00256e5:	90                   	nop
c00256e6:	83 c4 0c             	add    esp,0xc
c00256e9:	c3                   	ret    

c00256ea <SSE::load(void*)>:
c00256ea:	83 ec 0c             	sub    esp,0xc
c00256ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256f1:	83 ec 0c             	sub    esp,0xc
c00256f4:	50                   	push   eax
c00256f5:	e8 f4 0f 00 00       	call   c00266ee <sseLoad>
c00256fa:	83 c4 10             	add    esp,0x10
c00256fd:	90                   	nop
c00256fe:	83 c4 0c             	add    esp,0xc
c0025701:	c3                   	ret    

c0025702 <SSE::SSE()>:
c0025702:	83 ec 0c             	sub    esp,0xc
c0025705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025709:	83 ec 08             	sub    esp,0x8
c002570c:	68 84 d1 02 c0       	push   0xc002d184
c0025711:	50                   	push   eax
c0025712:	e8 fb f1 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c0025717:	83 c4 10             	add    esp,0x10
c002571a:	ba 94 d1 02 c0       	mov    edx,0xc002d194
c002571f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025723:	89 10                	mov    DWORD PTR [eax],edx
c0025725:	90                   	nop
c0025726:	83 c4 0c             	add    esp,0xc
c0025729:	c3                   	ret    

c002572a <x87::open(int, int, void*)>:
c002572a:	83 ec 0c             	sub    esp,0xc
c002572d:	e8 0a 10 00 00       	call   c002673c <x87Init>
c0025732:	b8 00 00 00 00       	mov    eax,0x0
c0025737:	83 c4 0c             	add    esp,0xc
c002573a:	c3                   	ret    
c002573b:	90                   	nop

c002573c <x87::close(int, int, void*)>:
c002573c:	83 ec 0c             	sub    esp,0xc
c002573f:	e8 12 10 00 00       	call   c0026756 <x87Close>
c0025744:	b8 00 00 00 00       	mov    eax,0x0
c0025749:	83 c4 0c             	add    esp,0xc
c002574c:	c3                   	ret    
c002574d:	90                   	nop

c002574e <x87::available()>:
c002574e:	83 ec 0c             	sub    esp,0xc
c0025751:	e8 c0 0f 00 00       	call   c0026716 <x87Detect>
c0025756:	85 c0                	test   eax,eax
c0025758:	0f 95 c0             	setne  al
c002575b:	83 c4 0c             	add    esp,0xc
c002575e:	c3                   	ret    
c002575f:	90                   	nop

c0025760 <x87::save(void*)>:
c0025760:	83 ec 0c             	sub    esp,0xc
c0025763:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025767:	83 ec 0c             	sub    esp,0xc
c002576a:	50                   	push   eax
c002576b:	e8 c1 0f 00 00       	call   c0026731 <x87Save>
c0025770:	83 c4 10             	add    esp,0x10
c0025773:	90                   	nop
c0025774:	83 c4 0c             	add    esp,0xc
c0025777:	c3                   	ret    

c0025778 <x87::load(void*)>:
c0025778:	83 ec 0c             	sub    esp,0xc
c002577b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002577f:	83 ec 0c             	sub    esp,0xc
c0025782:	50                   	push   eax
c0025783:	e8 af 0f 00 00       	call   c0026737 <x87Load>
c0025788:	83 c4 10             	add    esp,0x10
c002578b:	90                   	nop
c002578c:	83 c4 0c             	add    esp,0xc
c002578f:	c3                   	ret    

c0025790 <x87::x87()>:
c0025790:	83 ec 0c             	sub    esp,0xc
c0025793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025797:	83 ec 08             	sub    esp,0x8
c002579a:	68 c4 d1 02 c0       	push   0xc002d1c4
c002579f:	50                   	push   eax
c00257a0:	e8 6d f1 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c00257a5:	83 c4 10             	add    esp,0x10
c00257a8:	ba d4 d1 02 c0       	mov    edx,0xc002d1d4
c00257ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b1:	89 10                	mov    DWORD PTR [eax],edx
c00257b3:	90                   	nop
c00257b4:	83 c4 0c             	add    esp,0xc
c00257b7:	c3                   	ret    

c00257b8 <APIC::disable()>:
c00257b8:	90                   	nop
c00257b9:	c3                   	ret    

c00257ba <APIC::close(int, int, void*)>:
c00257ba:	55                   	push   ebp
c00257bb:	89 e5                	mov    ebp,esp
c00257bd:	83 ec 08             	sub    esp,0x8
c00257c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00257c5:	83 c0 3c             	add    eax,0x3c
c00257c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ca:	83 ec 0c             	sub    esp,0xc
c00257cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257d0:	ff d0                	call   eax
c00257d2:	83 c4 10             	add    esp,0x10
c00257d5:	b8 00 00 00 00       	mov    eax,0x0
c00257da:	c9                   	leave  
c00257db:	c3                   	ret    

c00257dc <IOAPIC::close(int, int, void*)>:
c00257dc:	b8 00 00 00 00       	mov    eax,0x0
c00257e1:	c3                   	ret    

c00257e2 <APIC::io_wait()>:
c00257e2:	eb 00                	jmp    c00257e4 <APIC::io_wait()+0x2>
c00257e4:	eb 00                	jmp    c00257e6 <APIC::io_wait()+0x4>
c00257e6:	90                   	nop
c00257e7:	c3                   	ret    

c00257e8 <APIC::getBase()>:
c00257e8:	55                   	push   ebp
c00257e9:	89 e5                	mov    ebp,esp
c00257eb:	83 ec 18             	sub    esp,0x18
c00257ee:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00257f3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257f9:	83 e0 08             	and    eax,0x8
c00257fc:	84 c0                	test   al,al
c00257fe:	75 07                	jne    c0025807 <APIC::getBase()+0x1f>
c0025800:	b8 00 00 00 00       	mov    eax,0x0
c0025805:	eb 21                	jmp    c0025828 <APIC::getBase()+0x40>
c0025807:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c002580c:	83 ec 08             	sub    esp,0x8
c002580f:	6a 1b                	push   0x1b
c0025811:	50                   	push   eax
c0025812:	e8 d1 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025817:	83 c4 10             	add    esp,0x10
c002581a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002581d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025820:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025823:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025828:	c9                   	leave  
c0025829:	c3                   	ret    

c002582a <APIC::eoi(unsigned char)>:
c002582a:	55                   	push   ebp
c002582b:	89 e5                	mov    ebp,esp
c002582d:	83 ec 28             	sub    esp,0x28
c0025830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025833:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025836:	83 ec 0c             	sub    esp,0xc
c0025839:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002583c:	e8 a7 ff ff ff       	call   c00257e8 <APIC::getBase()>
c0025841:	83 c4 10             	add    esp,0x10
c0025844:	05 b0 00 00 00       	add    eax,0xb0
c0025849:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002584c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002584f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025855:	90                   	nop
c0025856:	c9                   	leave  
c0025857:	c3                   	ret    

c0025858 <APIC::open(int, int, void*)>:
c0025858:	55                   	push   ebp
c0025859:	89 e5                	mov    ebp,esp
c002585b:	57                   	push   edi
c002585c:	56                   	push   esi
c002585d:	53                   	push   ebx
c002585e:	83 ec 2c             	sub    esp,0x2c
c0025861:	83 ec 0c             	sub    esp,0xc
c0025864:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025867:	e8 7c ff ff ff       	call   c00257e8 <APIC::getBase()>
c002586c:	83 c4 10             	add    esp,0x10
c002586f:	89 c2                	mov    edx,eax
c0025871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025874:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002587a:	0f b6 f8             	movzx  edi,al
c002587d:	89 d0                	mov    eax,edx
c002587f:	ba 00 00 00 00       	mov    edx,0x0
c0025884:	89 c1                	mov    ecx,eax
c0025886:	80 e5 ff             	and    ch,0xff
c0025889:	89 cb                	mov    ebx,ecx
c002588b:	0f b6 f2             	movzx  esi,dl
c002588e:	89 d8                	mov    eax,ebx
c0025890:	89 f2                	mov    edx,esi
c0025892:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025895:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025898:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002589c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258a0:	83 e0 00             	and    eax,0x0
c00258a3:	09 d0                	or     eax,edx
c00258a5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ac:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258b2:	8d 50 01             	lea    edx,[eax+0x1]
c00258b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258be:	0f b6 d0             	movzx  edx,al
c00258c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c4:	83 c2 08             	add    edx,0x8
c00258c7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258cb:	0f b6 c9             	movzx  ecx,cl
c00258ce:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258d4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258d8:	83 ec 0c             	sub    esp,0xc
c00258db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258de:	e8 05 ff ff ff       	call   c00257e8 <APIC::getBase()>
c00258e3:	83 c4 10             	add    esp,0x10
c00258e6:	05 f0 00 00 00       	add    eax,0xf0
c00258eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00258f3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258f6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258fd:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025904:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025907:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002590a:	89 10                	mov    DWORD PTR [eax],edx
c002590c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025913:	a1 10 0e 03 c0       	mov    eax,ds:0xc0030e10
c0025918:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002591b:	7d 7c                	jge    c0025999 <APIC::open(int, int, void*)+0x141>
c002591d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025920:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025927:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002592a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002592d:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025934:	c1 e8 08             	shr    eax,0x8
c0025937:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002593b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002593e:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025945:	c1 e8 18             	shr    eax,0x18
c0025948:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002594b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002594f:	75 40                	jne    c0025991 <APIC::open(int, int, void*)+0x139>
c0025951:	83 ec 0c             	sub    esp,0xc
c0025954:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025957:	e8 8c fe ff ff       	call   c00257e8 <APIC::getBase()>
c002595c:	83 c4 10             	add    esp,0x10
c002595f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025963:	75 07                	jne    c002596c <APIC::open(int, int, void*)+0x114>
c0025965:	ba 60 03 00 00       	mov    edx,0x360
c002596a:	eb 05                	jmp    c0025971 <APIC::open(int, int, void*)+0x119>
c002596c:	ba 50 03 00 00       	mov    edx,0x350
c0025971:	01 d0                	add    eax,edx
c0025973:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025976:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025979:	8b 00                	mov    eax,DWORD PTR [eax]
c002597b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002597e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025985:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025989:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002598c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002598f:	89 10                	mov    DWORD PTR [eax],edx
c0025991:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025994:	e9 7a ff ff ff       	jmp    c0025913 <APIC::open(int, int, void*)+0xbb>
c0025999:	b8 00 00 00 00       	mov    eax,0x0
c002599e:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259a1:	5b                   	pop    ebx
c00259a2:	5e                   	pop    esi
c00259a3:	5f                   	pop    edi
c00259a4:	5d                   	pop    ebp
c00259a5:	c3                   	ret    

c00259a6 <IOAPIC::IOAPIC()>:
c00259a6:	83 ec 0c             	sub    esp,0xc
c00259a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ad:	83 ec 08             	sub    esp,0x8
c00259b0:	68 04 d2 02 c0       	push   0xc002d204
c00259b5:	50                   	push   eax
c00259b6:	e8 45 ec fe ff       	call   c0014600 <Device::Device(char const*)>
c00259bb:	83 c4 10             	add    esp,0x10
c00259be:	ba 2c d3 02 c0       	mov    edx,0xc002d32c
c00259c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c7:	89 10                	mov    DWORD PTR [eax],edx
c00259c9:	90                   	nop
c00259ca:	83 c4 0c             	add    esp,0xc
c00259cd:	c3                   	ret    

c00259ce <APIC::APIC()>:
c00259ce:	53                   	push   ebx
c00259cf:	83 ec 18             	sub    esp,0x18
c00259d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259d6:	83 ec 08             	sub    esp,0x8
c00259d9:	68 0c d2 02 c0       	push   0xc002d20c
c00259de:	50                   	push   eax
c00259df:	e8 88 f3 fe ff       	call   c0014d6c <InterruptController::InterruptController(char const*)>
c00259e4:	83 c4 10             	add    esp,0x10
c00259e7:	ba e4 d2 02 c0       	mov    edx,0xc002d2e4
c00259ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259f0:	89 10                	mov    DWORD PTR [eax],edx
c00259f2:	a0 e0 28 03 c0       	mov    al,ds:0xc00328e0
c00259f7:	83 f0 01             	xor    eax,0x1
c00259fa:	84 c0                	test   al,al
c00259fc:	0f 84 a1 00 00 00    	je     c0025aa3 <APIC::APIC()+0xd5>
c0025a02:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a07:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0025a0c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a10:	0f 83 86 00 00 00    	jae    c0025a9c <APIC::APIC()+0xce>
c0025a16:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a1e:	83 ec 0c             	sub    esp,0xc
c0025a21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a25:	e8 16 9e fe ff       	call   c000f840 <malloc>
c0025a2a:	83 c4 10             	add    esp,0x10
c0025a2d:	89 c3                	mov    ebx,eax
c0025a2f:	83 ec 0c             	sub    esp,0xc
c0025a32:	53                   	push   ebx
c0025a33:	e8 6e ff ff ff       	call   c00259a6 <IOAPIC::IOAPIC()>
c0025a38:	83 c4 10             	add    esp,0x10
c0025a3b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a3f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a48:	89 14 85 c0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd740],edx
c0025a4f:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025a54:	40                   	inc    eax
c0025a55:	a3 a0 28 03 c0       	mov    ds:0xc00328a0,eax
c0025a5a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0025a5f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a65:	83 ec 08             	sub    esp,0x8
c0025a68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a6c:	50                   	push   eax
c0025a6d:	e8 9e e9 fe ff       	call   c0014410 <Device::addChild(Device*)>
c0025a72:	83 c4 10             	add    esp,0x10
c0025a75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a7b:	83 c0 08             	add    eax,0x8
c0025a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a80:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a85:	6a 00                	push   0x0
c0025a87:	6a 00                	push   0x0
c0025a89:	52                   	push   edx
c0025a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a8e:	ff d0                	call   eax
c0025a90:	83 c4 10             	add    esp,0x10
c0025a93:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a97:	e9 6b ff ff ff       	jmp    c0025a07 <APIC::APIC()+0x39>
c0025a9c:	c6 05 e0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328e0,0x1
c0025aa3:	90                   	nop
c0025aa4:	83 c4 18             	add    esp,0x18
c0025aa7:	5b                   	pop    ebx
c0025aa8:	c3                   	ret    
c0025aa9:	90                   	nop

c0025aaa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025aaa:	55                   	push   ebp
c0025aab:	89 e5                	mov    ebp,esp
c0025aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ab6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ab9:	72 1d                	jb     c0025ad8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abe:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025acd:	01 d0                	add    eax,edx
c0025acf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ad2:	73 04                	jae    c0025ad8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ad4:	b0 01                	mov    al,0x1
c0025ad6:	eb 02                	jmp    c0025ada <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025ad8:	b0 00                	mov    al,0x0
c0025ada:	5d                   	pop    ebp
c0025adb:	c3                   	ret    

c0025adc <IOAPIC::read(int)>:
c0025adc:	55                   	push   ebp
c0025add:	89 e5                	mov    ebp,esp
c0025adf:	83 ec 10             	sub    esp,0x10
c0025ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025aeb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025aee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025af1:	0f b6 d0             	movzx  edx,al
c0025af4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025af7:	89 10                	mov    DWORD PTR [eax],edx
c0025af9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025afc:	83 c0 10             	add    eax,0x10
c0025aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b01:	c9                   	leave  
c0025b02:	c3                   	ret    
c0025b03:	90                   	nop

c0025b04 <IOAPIC::open(int, int, void*)>:
c0025b04:	55                   	push   ebp
c0025b05:	89 e5                	mov    ebp,esp
c0025b07:	57                   	push   edi
c0025b08:	56                   	push   esi
c0025b09:	53                   	push   ebx
c0025b0a:	83 ec 0c             	sub    esp,0xc
c0025b0d:	83 ec 0c             	sub    esp,0xc
c0025b10:	68 37 d2 02 c0       	push   0xc002d237
c0025b15:	e8 d0 d4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0025b1a:	83 c4 10             	add    esp,0x10
c0025b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b32:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c0025b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b4b:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c0025b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b55:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b67:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b6d:	0f b6 f8             	movzx  edi,al
c0025b70:	89 d0                	mov    eax,edx
c0025b72:	ba 00 00 00 00       	mov    edx,0x0
c0025b77:	89 c1                	mov    ecx,eax
c0025b79:	80 e5 ff             	and    ch,0xff
c0025b7c:	89 cb                	mov    ebx,ecx
c0025b7e:	0f b6 f2             	movzx  esi,dl
c0025b81:	89 d8                	mov    eax,ebx
c0025b83:	89 f2                	mov    edx,esi
c0025b85:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b88:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b8b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b8f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b93:	83 e0 00             	and    eax,0x0
c0025b96:	09 d0                	or     eax,edx
c0025b98:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ba5:	8d 50 01             	lea    edx,[eax+0x1]
c0025ba8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bab:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bb1:	0f b6 d0             	movzx  edx,al
c0025bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb7:	83 c2 08             	add    edx,0x8
c0025bba:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bbe:	0f b6 c9             	movzx  ecx,cl
c0025bc1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025bc7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025bcb:	83 ec 08             	sub    esp,0x8
c0025bce:	6a 01                	push   0x1
c0025bd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bd3:	e8 04 ff ff ff       	call   c0025adc <IOAPIC::read(int)>
c0025bd8:	83 c4 10             	add    esp,0x10
c0025bdb:	c1 f8 10             	sar    eax,0x10
c0025bde:	0f b6 c0             	movzx  eax,al
c0025be1:	8d 50 01             	lea    edx,[eax+0x1]
c0025be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025be7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025bed:	b8 00 00 00 00       	mov    eax,0x0
c0025bf2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bf5:	5b                   	pop    ebx
c0025bf6:	5e                   	pop    esi
c0025bf7:	5f                   	pop    edi
c0025bf8:	5d                   	pop    ebp
c0025bf9:	c3                   	ret    

c0025bfa <IOAPIC::write(int, int)>:
c0025bfa:	55                   	push   ebp
c0025bfb:	89 e5                	mov    ebp,esp
c0025bfd:	83 ec 10             	sub    esp,0x10
c0025c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c0f:	0f b6 d0             	movzx  edx,al
c0025c12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c15:	89 10                	mov    DWORD PTR [eax],edx
c0025c17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c1a:	8d 50 10             	lea    edx,[eax+0x10]
c0025c1d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c20:	89 02                	mov    DWORD PTR [edx],eax
c0025c22:	90                   	nop
c0025c23:	c9                   	leave  
c0025c24:	c3                   	ret    
c0025c25:	90                   	nop

c0025c26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c26:	55                   	push   ebp
c0025c27:	89 e5                	mov    ebp,esp
c0025c29:	53                   	push   ebx
c0025c2a:	83 ec 2c             	sub    esp,0x2c
c0025c2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c30:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c33:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c36:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c39:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c3c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c3f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c42:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c45:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c48:	88 d8                	mov    al,bl
c0025c4a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c4d:	88 c8                	mov    al,cl
c0025c4f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c52:	88 d0                	mov    al,dl
c0025c54:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c57:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c5b:	83 c0 08             	add    eax,0x8
c0025c5e:	01 c0                	add    eax,eax
c0025c60:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c63:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c67:	83 c0 08             	add    eax,0x8
c0025c6a:	01 c0                	add    eax,eax
c0025c6c:	40                   	inc    eax
c0025c6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c70:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c73:	50                   	push   eax
c0025c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c77:	e8 60 fe ff ff       	call   c0025adc <IOAPIC::read(int)>
c0025c7c:	83 c4 08             	add    esp,0x8
c0025c7f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c82:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c89:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c8c:	c1 e0 18             	shl    eax,0x18
c0025c8f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c92:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c98:	52                   	push   edx
c0025c99:	50                   	push   eax
c0025c9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c9d:	e8 58 ff ff ff       	call   c0025bfa <IOAPIC::write(int, int)>
c0025ca2:	83 c4 0c             	add    esp,0xc
c0025ca5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ca8:	50                   	push   eax
c0025ca9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cac:	e8 2b fe ff ff       	call   c0025adc <IOAPIC::read(int)>
c0025cb1:	83 c4 08             	add    esp,0x8
c0025cb4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cb7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025cbe:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025cc5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025ccc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cd0:	74 09                	je     c0025cdb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cd2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cd9:	eb 07                	jmp    c0025ce2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cdb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025ce2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025ce6:	74 09                	je     c0025cf1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025ce8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025cef:	eb 07                	jmp    c0025cf8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025cf1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025cf8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025cff:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d03:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d06:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d0c:	52                   	push   edx
c0025d0d:	50                   	push   eax
c0025d0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d11:	e8 e4 fe ff ff       	call   c0025bfa <IOAPIC::write(int, int)>
c0025d16:	83 c4 0c             	add    esp,0xc
c0025d19:	90                   	nop
c0025d1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d1d:	c9                   	leave  
c0025d1e:	c3                   	ret    
c0025d1f:	90                   	nop

c0025d20 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d20:	55                   	push   ebp
c0025d21:	89 e5                	mov    ebp,esp
c0025d23:	57                   	push   edi
c0025d24:	56                   	push   esi
c0025d25:	53                   	push   ebx
c0025d26:	83 ec 2c             	sub    esp,0x2c
c0025d29:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d2c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d2f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d33:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d37:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d3b:	74 5a                	je     c0025d97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d3d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d41:	7f 44                	jg     c0025d87 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d46:	05 80 d7 02 c0       	add    eax,0xc002d780
c0025d4b:	8a 00                	mov    al,BYTE PTR [eax]
c0025d4d:	0f b6 c0             	movzx  eax,al
c0025d50:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d56:	66 8b 84 00 a0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf160]
c0025d5e:	0f b7 c0             	movzx  eax,ax
c0025d61:	83 e0 02             	and    eax,0x2
c0025d64:	85 c0                	test   eax,eax
c0025d66:	74 04                	je     c0025d6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d68:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d6f:	66 8b 84 00 a0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf160]
c0025d77:	0f b7 c0             	movzx  eax,ax
c0025d7a:	83 e0 08             	and    eax,0x8
c0025d7d:	85 c0                	test   eax,eax
c0025d7f:	74 16                	je     c0025d97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d81:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d85:	eb 10                	jmp    c0025d97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d87:	83 ec 0c             	sub    esp,0xc
c0025d8a:	68 48 d2 02 c0       	push   0xc002d248
c0025d8f:	e8 07 49 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0025d94:	83 c4 10             	add    esp,0x10
c0025d97:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d9b:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025da0:	83 ec 08             	sub    esp,0x8
c0025da3:	50                   	push   eax
c0025da4:	68 80 d2 02 c0       	push   0xc002d280
c0025da9:	e8 3c d2 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0025dae:	83 c4 10             	add    esp,0x10
c0025db1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025db8:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025dbd:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025dc0:	7d 67                	jge    c0025e29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dc2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025dc5:	8b 04 85 c0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd740]
c0025dcc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dcf:	83 ec 08             	sub    esp,0x8
c0025dd2:	52                   	push   edx
c0025dd3:	50                   	push   eax
c0025dd4:	e8 d1 fc ff ff       	call   c0025aaa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025dd9:	83 c4 10             	add    esp,0x10
c0025ddc:	84 c0                	test   al,al
c0025dde:	74 44                	je     c0025e24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025de0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025de3:	8b 1c 85 c0 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd740]
c0025dea:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025dee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025df1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025df5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025df8:	83 c0 20             	add    eax,0x20
c0025dfb:	0f b6 f0             	movzx  esi,al
c0025dfe:	b8 00 00 00 00       	mov    eax,0x0
c0025e03:	99                   	cdq    
c0025e04:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e07:	0f b6 c9             	movzx  ecx,cl
c0025e0a:	83 ec 04             	sub    esp,0x4
c0025e0d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e10:	57                   	push   edi
c0025e11:	56                   	push   esi
c0025e12:	52                   	push   edx
c0025e13:	50                   	push   eax
c0025e14:	51                   	push   ecx
c0025e15:	53                   	push   ebx
c0025e16:	e8 0b fe ff ff       	call   c0025c26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e1b:	83 c4 20             	add    esp,0x20
c0025e1e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e22:	eb 05                	jmp    c0025e29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e24:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e27:	eb 8f                	jmp    c0025db8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e29:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e2c:	83 f0 01             	xor    eax,0x1
c0025e2f:	84 c0                	test   al,al
c0025e31:	74 10                	je     c0025e43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e33:	83 ec 0c             	sub    esp,0xc
c0025e36:	68 97 d2 02 c0       	push   0xc002d297
c0025e3b:	e8 5b 48 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0025e40:	83 c4 10             	add    esp,0x10
c0025e43:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e47:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e4e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e52:	7f 65                	jg     c0025eb9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e5a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e61:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e64:	01 ca                	add    edx,ecx
c0025e66:	83 c2 54             	add    edx,0x54
c0025e69:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e6d:	85 c0                	test   eax,eax
c0025e6f:	75 43                	jne    c0025eb4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e77:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e7e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e81:	01 ca                	add    edx,ecx
c0025e83:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e86:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e89:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e90:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e9d:	01 ca                	add    edx,ecx
c0025e9f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ea5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ea8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eaf:	83 e8 20             	sub    eax,0x20
c0025eb2:	eb 1a                	jmp    c0025ece <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025eb4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025eb7:	eb 95                	jmp    c0025e4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025eb9:	83 ec 0c             	sub    esp,0xc
c0025ebc:	68 a4 d2 02 c0       	push   0xc002d2a4
c0025ec1:	e8 d5 47 ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0025ec6:	83 c4 10             	add    esp,0x10
c0025ec9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025ece:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ed1:	5b                   	pop    ebx
c0025ed2:	5e                   	pop    esi
c0025ed3:	5f                   	pop    edi
c0025ed4:	5d                   	pop    ebp
c0025ed5:	c3                   	ret    

c0025ed6 <PIC::disable()>:
c0025ed6:	55                   	push   ebp
c0025ed7:	89 e5                	mov    ebp,esp
c0025ed9:	83 ec 10             	sub    esp,0x10
c0025edc:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ee2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025ee6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ee9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025eed:	ee                   	out    dx,al
c0025eee:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ef4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ef8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025efb:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025eff:	ee                   	out    dx,al
c0025f00:	90                   	nop
c0025f01:	c9                   	leave  
c0025f02:	c3                   	ret    
c0025f03:	90                   	nop

c0025f04 <PIC::close(int, int, void*)>:
c0025f04:	55                   	push   ebp
c0025f05:	89 e5                	mov    ebp,esp
c0025f07:	83 ec 08             	sub    esp,0x8
c0025f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f0f:	83 c0 3c             	add    eax,0x3c
c0025f12:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f14:	83 ec 0c             	sub    esp,0xc
c0025f17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f1a:	ff d0                	call   eax
c0025f1c:	83 c4 10             	add    esp,0x10
c0025f1f:	b8 00 00 00 00       	mov    eax,0x0
c0025f24:	c9                   	leave  
c0025f25:	c3                   	ret    

c0025f26 <PIC::PIC()>:
c0025f26:	83 ec 0c             	sub    esp,0xc
c0025f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2d:	83 ec 08             	sub    esp,0x8
c0025f30:	68 50 d3 02 c0       	push   0xc002d350
c0025f35:	50                   	push   eax
c0025f36:	e8 31 ee fe ff       	call   c0014d6c <InterruptController::InterruptController(char const*)>
c0025f3b:	83 c4 10             	add    esp,0x10
c0025f3e:	ba 7c d3 02 c0       	mov    edx,0xc002d37c
c0025f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f47:	89 10                	mov    DWORD PTR [eax],edx
c0025f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f53:	0f b6 d0             	movzx  edx,al
c0025f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f6b:	0f b6 d0             	movzx  edx,al
c0025f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f72:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f81:	8d 50 01             	lea    edx,[eax+0x1]
c0025f84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f88:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f8e:	0f b6 d0             	movzx  edx,al
c0025f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f95:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f99:	83 e1 3f             	and    ecx,0x3f
c0025f9c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025faa:	0f b6 d0             	movzx  edx,al
c0025fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fc2:	0f b6 d0             	movzx  edx,al
c0025fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fd8:	8d 50 01             	lea    edx,[eax+0x1]
c0025fdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fdf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fe5:	0f b6 d0             	movzx  edx,al
c0025fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ff0:	83 e1 3f             	and    ecx,0x3f
c0025ff3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ff7:	90                   	nop
c0025ff8:	83 c4 0c             	add    esp,0xc
c0025ffb:	c3                   	ret    

c0025ffc <PIC::ioWait()>:
c0025ffc:	eb 00                	jmp    c0025ffe <PIC::ioWait()+0x2>
c0025ffe:	eb 00                	jmp    c0026000 <PIC::ioWait()+0x4>
c0026000:	90                   	nop
c0026001:	c3                   	ret    

c0026002 <PIC::getIRQReg(int)>:
c0026002:	55                   	push   ebp
c0026003:	89 e5                	mov    ebp,esp
c0026005:	83 ec 10             	sub    esp,0x10
c0026008:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002600b:	0f b6 c0             	movzx  eax,al
c002600e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026014:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026017:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002601a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002601e:	ee                   	out    dx,al
c002601f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026022:	0f b6 c0             	movzx  eax,al
c0026025:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002602b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002602e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026031:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026035:	ee                   	out    dx,al
c0026036:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002603c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026040:	89 c2                	mov    edx,eax
c0026042:	ec                   	in     al,dx
c0026043:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026046:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026049:	0f b6 c0             	movzx  eax,al
c002604c:	c1 e0 08             	shl    eax,0x8
c002604f:	89 c1                	mov    ecx,eax
c0026051:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026057:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002605b:	89 c2                	mov    edx,eax
c002605d:	ec                   	in     al,dx
c002605e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026061:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026064:	0f b6 c0             	movzx  eax,al
c0026067:	09 c8                	or     eax,ecx
c0026069:	c9                   	leave  
c002606a:	c3                   	ret    
c002606b:	90                   	nop

c002606c <PIC::eoi(unsigned char)>:
c002606c:	55                   	push   ebp
c002606d:	89 e5                	mov    ebp,esp
c002606f:	83 ec 14             	sub    esp,0x14
c0026072:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026075:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026078:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002607c:	75 1e                	jne    c002609c <PIC::eoi(unsigned char)+0x30>
c002607e:	6a 0b                	push   0xb
c0026080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026083:	e8 7a ff ff ff       	call   c0026002 <PIC::getIRQReg(int)>
c0026088:	83 c4 08             	add    esp,0x8
c002608b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002608f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026093:	25 80 00 00 00       	and    eax,0x80
c0026098:	85 c0                	test   eax,eax
c002609a:	74 5f                	je     c00260fb <PIC::eoi(unsigned char)+0x8f>
c002609c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260a0:	75 2d                	jne    c00260cf <PIC::eoi(unsigned char)+0x63>
c00260a2:	6a 0b                	push   0xb
c00260a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a7:	e8 56 ff ff ff       	call   c0026002 <PIC::getIRQReg(int)>
c00260ac:	83 c4 08             	add    esp,0x8
c00260af:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260b6:	66 85 c0             	test   ax,ax
c00260b9:	78 14                	js     c00260cf <PIC::eoi(unsigned char)+0x63>
c00260bb:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260c1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260c5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260c8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260cc:	ee                   	out    dx,al
c00260cd:	eb 2d                	jmp    c00260fc <PIC::eoi(unsigned char)+0x90>
c00260cf:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260d3:	76 12                	jbe    c00260e7 <PIC::eoi(unsigned char)+0x7b>
c00260d5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260db:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260df:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260e2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260e6:	ee                   	out    dx,al
c00260e7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260ed:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00260f1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260f4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260f8:	ee                   	out    dx,al
c00260f9:	eb 01                	jmp    c00260fc <PIC::eoi(unsigned char)+0x90>
c00260fb:	90                   	nop
c00260fc:	c9                   	leave  
c00260fd:	c3                   	ret    

c00260fe <PIC::remap()>:
c00260fe:	55                   	push   ebp
c00260ff:	89 e5                	mov    ebp,esp
c0026101:	83 ec 48             	sub    esp,0x48
c0026104:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002610b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026112:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026118:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002611b:	89 c2                	mov    edx,eax
c002611d:	ec                   	in     al,dx
c002611e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026121:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026124:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026127:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002612d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026130:	89 c2                	mov    edx,eax
c0026132:	ec                   	in     al,dx
c0026133:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026136:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026139:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002613c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026142:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026146:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026149:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002614c:	ee                   	out    dx,al
c002614d:	83 ec 0c             	sub    esp,0xc
c0026150:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026153:	e8 a4 fe ff ff       	call   c0025ffc <PIC::ioWait()>
c0026158:	83 c4 10             	add    esp,0x10
c002615b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026161:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026165:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026168:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002616b:	ee                   	out    dx,al
c002616c:	83 ec 0c             	sub    esp,0xc
c002616f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026172:	e8 85 fe ff ff       	call   c0025ffc <PIC::ioWait()>
c0026177:	83 c4 10             	add    esp,0x10
c002617a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002617d:	0f b6 c0             	movzx  eax,al
c0026180:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026186:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026189:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002618c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002618f:	ee                   	out    dx,al
c0026190:	83 ec 0c             	sub    esp,0xc
c0026193:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026196:	e8 61 fe ff ff       	call   c0025ffc <PIC::ioWait()>
c002619b:	83 c4 10             	add    esp,0x10
c002619e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261a1:	0f b6 c0             	movzx  eax,al
c00261a4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261aa:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261ad:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261b0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261b3:	ee                   	out    dx,al
c00261b4:	83 ec 0c             	sub    esp,0xc
c00261b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261ba:	e8 3d fe ff ff       	call   c0025ffc <PIC::ioWait()>
c00261bf:	83 c4 10             	add    esp,0x10
c00261c2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261c8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261cc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261cf:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261d2:	ee                   	out    dx,al
c00261d3:	83 ec 0c             	sub    esp,0xc
c00261d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d9:	e8 1e fe ff ff       	call   c0025ffc <PIC::ioWait()>
c00261de:	83 c4 10             	add    esp,0x10
c00261e1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261e7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261eb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261ee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261f1:	ee                   	out    dx,al
c00261f2:	83 ec 0c             	sub    esp,0xc
c00261f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f8:	e8 ff fd ff ff       	call   c0025ffc <PIC::ioWait()>
c00261fd:	83 c4 10             	add    esp,0x10
c0026200:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026206:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002620a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002620d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026210:	ee                   	out    dx,al
c0026211:	83 ec 0c             	sub    esp,0xc
c0026214:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026217:	e8 e0 fd ff ff       	call   c0025ffc <PIC::ioWait()>
c002621c:	83 c4 10             	add    esp,0x10
c002621f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026225:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026229:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002622c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002622f:	ee                   	out    dx,al
c0026230:	83 ec 0c             	sub    esp,0xc
c0026233:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026236:	e8 c1 fd ff ff       	call   c0025ffc <PIC::ioWait()>
c002623b:	83 c4 10             	add    esp,0x10
c002623e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026242:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026248:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002624b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002624e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026251:	ee                   	out    dx,al
c0026252:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026256:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002625c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002625f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026262:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026265:	ee                   	out    dx,al
c0026266:	90                   	nop
c0026267:	c9                   	leave  
c0026268:	c3                   	ret    
c0026269:	90                   	nop

c002626a <PIC::open(int, int, void*)>:
c002626a:	55                   	push   ebp
c002626b:	89 e5                	mov    ebp,esp
c002626d:	83 ec 18             	sub    esp,0x18
c0026270:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026276:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002627a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002627d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026281:	ee                   	out    dx,al
c0026282:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026288:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002628c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002628f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026293:	ee                   	out    dx,al
c0026294:	83 ec 0c             	sub    esp,0xc
c0026297:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002629a:	e8 5f fe ff ff       	call   c00260fe <PIC::remap()>
c002629f:	83 c4 10             	add    esp,0x10
c00262a2:	b8 00 00 00 00       	mov    eax,0x0
c00262a7:	c9                   	leave  
c00262a8:	c3                   	ret    
c00262a9:	90                   	nop

c00262aa <APICTimer::close(int, int, void*)>:
c00262aa:	b8 00 00 00 00       	mov    eax,0x0
c00262af:	c3                   	ret    

c00262b0 <apicTimerHandler(regs*, void*)>:
c00262b0:	83 ec 0c             	sub    esp,0xc
c00262b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262b9:	99                   	cdq    
c00262ba:	52                   	push   edx
c00262bb:	50                   	push   eax
c00262bc:	6a 00                	push   0x0
c00262be:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262c3:	e8 84 07 00 00       	call   c0026a4c <__udivdi3>
c00262c8:	83 c4 10             	add    esp,0x10
c00262cb:	83 ec 08             	sub    esp,0x8
c00262ce:	52                   	push   edx
c00262cf:	50                   	push   eax
c00262d0:	e8 f2 0a ff ff       	call   c0016dc7 <timerHandler(unsigned long long)>
c00262d5:	83 c4 10             	add    esp,0x10
c00262d8:	90                   	nop
c00262d9:	83 c4 0c             	add    esp,0xc
c00262dc:	c3                   	ret    
c00262dd:	90                   	nop

c00262de <APICTimer::write(int)>:
c00262de:	53                   	push   ebx
c00262df:	83 ec 28             	sub    esp,0x28
c00262e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00262ea:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262f0:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00262f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262fb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026301:	83 ec 0c             	sub    esp,0xc
c0026304:	50                   	push   eax
c0026305:	e8 de f4 ff ff       	call   c00257e8 <APIC::getBase()>
c002630a:	83 c4 10             	add    esp,0x10
c002630d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026311:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c0026316:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c002631c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026320:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026328:	05 e0 03 00 00       	add    eax,0x3e0
c002632d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026337:	05 80 03 00 00       	add    eax,0x380
c002633c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026342:	fb                   	sti    
c0026343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026347:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002634b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026350:	83 d2 00             	adc    edx,0x0
c0026353:	89 c1                	mov    ecx,eax
c0026355:	89 d3                	mov    ebx,edx
c0026357:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c002635c:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c0026362:	39 c8                	cmp    eax,ecx
c0026364:	89 d0                	mov    eax,edx
c0026366:	19 d8                	sbb    eax,ebx
c0026368:	73 02                	jae    c002636c <APICTimer::write(int)+0x8e>
c002636a:	eb d7                	jmp    c0026343 <APICTimer::write(int)+0x65>
c002636c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026370:	05 20 03 00 00       	add    eax,0x320
c0026375:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002637b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002637f:	05 90 03 00 00       	add    eax,0x390
c0026384:	8b 00                	mov    eax,DWORD PTR [eax]
c0026386:	f7 d0                	not    eax
c0026388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002638c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026394:	ba 00 00 00 00       	mov    edx,0x0
c0026399:	f7 f3                	div    ebx
c002639b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002639f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263a9:	0d 00 00 02 00       	or     eax,0x20000
c00263ae:	89 c2                	mov    edx,eax
c00263b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263b4:	05 20 03 00 00       	add    eax,0x320
c00263b9:	89 10                	mov    DWORD PTR [eax],edx
c00263bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263bf:	05 e0 03 00 00       	add    eax,0x3e0
c00263c4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263ce:	05 80 03 00 00       	add    eax,0x380
c00263d3:	89 c2                	mov    edx,eax
c00263d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263d9:	89 02                	mov    DWORD PTR [edx],eax
c00263db:	90                   	nop
c00263dc:	83 c4 28             	add    esp,0x28
c00263df:	5b                   	pop    ebx
c00263e0:	c3                   	ret    
c00263e1:	90                   	nop

c00263e2 <APICTimer::open(int, int, void*)>:
c00263e2:	57                   	push   edi
c00263e3:	56                   	push   esi
c00263e4:	53                   	push   ebx
c00263e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00263eb:	83 c0 24             	add    eax,0x24
c00263ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00263f0:	83 ec 08             	sub    esp,0x8
c00263f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263fb:	ff d0                	call   eax
c00263fd:	83 c4 10             	add    esp,0x10
c0026400:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0026405:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002640b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026411:	83 ec 0c             	sub    esp,0xc
c0026414:	50                   	push   eax
c0026415:	e8 ce f3 ff ff       	call   c00257e8 <APIC::getBase()>
c002641a:	83 c4 10             	add    esp,0x10
c002641d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026427:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002642d:	0f b6 f8             	movzx  edi,al
c0026430:	89 d0                	mov    eax,edx
c0026432:	ba 00 00 00 00       	mov    edx,0x0
c0026437:	89 c1                	mov    ecx,eax
c0026439:	80 e5 ff             	and    ch,0xff
c002643c:	89 cb                	mov    ebx,ecx
c002643e:	0f b6 f2             	movzx  esi,dl
c0026441:	89 d8                	mov    eax,ebx
c0026443:	89 f2                	mov    edx,esi
c0026445:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026449:	8d 5f 08             	lea    ebx,[edi+0x8]
c002644c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026450:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026454:	83 e0 00             	and    eax,0x0
c0026457:	09 d0                	or     eax,edx
c0026459:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002645d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026461:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026467:	8d 50 01             	lea    edx,[eax+0x1]
c002646a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002646e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026474:	0f b6 d0             	movzx  edx,al
c0026477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647b:	83 c2 08             	add    edx,0x8
c002647e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026482:	0f b6 c9             	movzx  ecx,cl
c0026485:	81 c9 00 00 01 00    	or     ecx,0x10000
c002648b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002648f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026493:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026497:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002649d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264a5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264af:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264b5:	83 ec 0c             	sub    esp,0xc
c00264b8:	51                   	push   ecx
c00264b9:	6a 01                	push   0x1
c00264bb:	68 b0 62 02 c0       	push   0xc00262b0
c00264c0:	52                   	push   edx
c00264c1:	50                   	push   eax
c00264c2:	e8 cd de fe ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264c7:	83 c4 20             	add    esp,0x20
c00264ca:	89 c2                	mov    edx,eax
c00264cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264d6:	b8 00 00 00 00       	mov    eax,0x0
c00264db:	5b                   	pop    ebx
c00264dc:	5e                   	pop    esi
c00264dd:	5f                   	pop    edi
c00264de:	c3                   	ret    
c00264df:	90                   	nop

c00264e0 <APICTimer::APICTimer()>:
c00264e0:	83 ec 0c             	sub    esp,0xc
c00264e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e7:	83 ec 08             	sub    esp,0x8
c00264ea:	68 bc d3 02 c0       	push   0xc002d3bc
c00264ef:	50                   	push   eax
c00264f0:	e8 43 08 ff ff       	call   c0016d38 <Timer::Timer(char const*)>
c00264f5:	83 c4 10             	add    esp,0x10
c00264f8:	ba d0 d3 02 c0       	mov    edx,0xc002d3d0
c00264fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026501:	89 10                	mov    DWORD PTR [eax],edx
c0026503:	90                   	nop
c0026504:	83 c4 0c             	add    esp,0xc
c0026507:	c3                   	ret    

c0026508 <PIT::write(int)>:
c0026508:	83 ec 10             	sub    esp,0x10
c002650b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002650f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026513:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026519:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002651d:	a3 e4 28 03 c0       	mov    ds:0xc00328e4,eax
c0026522:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026527:	99                   	cdq    
c0026528:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002652c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026530:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026537:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002653c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026540:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026545:	ee                   	out    dx,al
c0026546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002654a:	0f b6 c0             	movzx  eax,al
c002654d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026554:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026558:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002655c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026561:	ee                   	out    dx,al
c0026562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026566:	c1 f8 08             	sar    eax,0x8
c0026569:	0f b6 c0             	movzx  eax,al
c002656c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026573:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026577:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002657b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026580:	ee                   	out    dx,al
c0026581:	90                   	nop
c0026582:	83 c4 10             	add    esp,0x10
c0026585:	c3                   	ret    

c0026586 <pitHandler(regs*, void*)>:
c0026586:	83 ec 0c             	sub    esp,0xc
c0026589:	a1 e4 28 03 c0       	mov    eax,ds:0xc00328e4
c002658e:	99                   	cdq    
c002658f:	52                   	push   edx
c0026590:	50                   	push   eax
c0026591:	6a 00                	push   0x0
c0026593:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026598:	e8 af 04 00 00       	call   c0026a4c <__udivdi3>
c002659d:	83 c4 10             	add    esp,0x10
c00265a0:	83 ec 08             	sub    esp,0x8
c00265a3:	52                   	push   edx
c00265a4:	50                   	push   eax
c00265a5:	e8 1d 08 ff ff       	call   c0016dc7 <timerHandler(unsigned long long)>
c00265aa:	83 c4 10             	add    esp,0x10
c00265ad:	90                   	nop
c00265ae:	83 c4 0c             	add    esp,0xc
c00265b1:	c3                   	ret    

c00265b2 <PIT::open(int, int, void*)>:
c00265b2:	83 ec 0c             	sub    esp,0xc
c00265b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00265bb:	83 c0 24             	add    eax,0x24
c00265be:	8b 00                	mov    eax,DWORD PTR [eax]
c00265c0:	83 ec 08             	sub    esp,0x8
c00265c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265cb:	ff d0                	call   eax
c00265cd:	83 c4 10             	add    esp,0x10
c00265d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d4:	83 ec 0c             	sub    esp,0xc
c00265d7:	6a 00                	push   0x0
c00265d9:	6a 01                	push   0x1
c00265db:	68 86 65 02 c0       	push   0xc0026586
c00265e0:	6a 00                	push   0x0
c00265e2:	50                   	push   eax
c00265e3:	e8 ac dd fe ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265e8:	83 c4 20             	add    esp,0x20
c00265eb:	89 c2                	mov    edx,eax
c00265ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265f7:	b8 00 00 00 00       	mov    eax,0x0
c00265fc:	83 c4 0c             	add    esp,0xc
c00265ff:	c3                   	ret    

c0026600 <PIT::close(int, int, void*)>:
c0026600:	83 ec 0c             	sub    esp,0xc
c0026603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026607:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026615:	6a 01                	push   0x1
c0026617:	68 86 65 02 c0       	push   0xc0026586
c002661c:	6a 00                	push   0x0
c002661e:	50                   	push   eax
c002661f:	e8 ae dd fe ff       	call   c00143d2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026624:	83 c4 10             	add    esp,0x10
c0026627:	b8 00 00 00 00       	mov    eax,0x0
c002662c:	83 c4 0c             	add    esp,0xc
c002662f:	c3                   	ret    

c0026630 <PIT::PIT()>:
c0026630:	83 ec 0c             	sub    esp,0xc
c0026633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026637:	83 ec 08             	sub    esp,0x8
c002663a:	68 f8 d3 02 c0       	push   0xc002d3f8
c002663f:	50                   	push   eax
c0026640:	e8 f3 06 ff ff       	call   c0016d38 <Timer::Timer(char const*)>
c0026645:	83 c4 10             	add    esp,0x10
c0026648:	ba 20 d4 02 c0       	mov    edx,0xc002d420
c002664d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026651:	89 10                	mov    DWORD PTR [eax],edx
c0026653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026657:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002665d:	0f b6 d0             	movzx  edx,al
c0026660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026664:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002666b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026675:	0f b6 d0             	movzx  edx,al
c0026678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026685:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002668b:	8d 50 01             	lea    edx,[eax+0x1]
c002668e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026692:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026698:	0f b6 d0             	movzx  edx,al
c002669b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266a3:	83 e1 3f             	and    ecx,0x3f
c00266a6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266aa:	90                   	nop
c00266ab:	83 c4 0c             	add    esp,0xc
c00266ae:	c3                   	ret    
c00266af:	90                   	nop

c00266b0 <avxDetect>:
c00266b0:	b8 00 00 00 00       	mov    eax,0x0
c00266b5:	c3                   	ret    

c00266b6 <avxSave>:
c00266b6:	c3                   	ret    

c00266b7 <avxLoad>:
c00266b7:	c3                   	ret    

c00266b8 <avxInit>:
c00266b8:	c3                   	ret    

c00266b9 <avxClose>:
c00266b9:	c3                   	ret    

c00266ba <wouldSheSayYes>:
c00266ba:	c3                   	ret    
c00266bb:	49                   	dec    ecx
c00266bc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266c0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266c4:	75 20                	jne    c00266e6 <sseDetect.noSSE+0x1>
c00266c6:	4e                   	dec    esi
c00266c7:	79 61                	jns    c002672a <x87Detect+0x14>
c00266c9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266ce:	66 90                	xchg   ax,ax

c00266d0 <absolutelyNoChanceInHell>:
c00266d0:	b8 01 00 00 00       	mov    eax,0x1
c00266d5:	0f a2                	cpuid  
c00266d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266dd:	74 06                	je     c00266e5 <sseDetect.noSSE>
c00266df:	b8 01 00 00 00       	mov    eax,0x1
c00266e4:	c3                   	ret    

c00266e5 <sseDetect.noSSE>:
c00266e5:	31 c0                	xor    eax,eax
c00266e7:	c3                   	ret    

c00266e8 <sseSave>:
c00266e8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00266ed:	c3                   	ret    

c00266ee <sseLoad>:
c00266ee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266f3:	c3                   	ret    

c00266f4 <sseInit>:
c00266f4:	e8 43 00 00 00       	call   c002673c <x87Init>
c00266f9:	0f 20 e0             	mov    eax,cr4
c00266fc:	66 0d 00 06          	or     ax,0x600
c0026700:	0f 22 e0             	mov    cr4,eax
c0026703:	c3                   	ret    

c0026704 <sseClose>:
c0026704:	c3                   	ret    
c0026705:	66 90                	xchg   ax,ax
c0026707:	66 90                	xchg   ax,ax
c0026709:	66 90                	xchg   ax,ax
c002670b:	66 90                	xchg   ax,ax
c002670d:	66 90                	xchg   ax,ax
c002670f:	90                   	nop

c0026710 <value_37F>:
c0026710:	7f 03                	jg     c0026715 <value_37A+0x1>

c0026712 <value_37E>:
c0026712:	7e 03                	jle    c0026717 <x87Detect+0x1>

c0026714 <value_37A>:
c0026714:	7a 03                	jp     c0026719 <x87Detect+0x3>

c0026716 <x87Detect>:
c0026716:	b8 01 00 00 00       	mov    eax,0x1
c002671b:	0f a2                	cpuid  
c002671d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026723:	74 06                	je     c002672b <x87Detect.nox87>
c0026725:	b8 01 00 00 00       	mov    eax,0x1
c002672a:	c3                   	ret    

c002672b <x87Detect.nox87>:
c002672b:	b8 00 00 00 00       	mov    eax,0x0
c0026730:	c3                   	ret    

c0026731 <x87Save>:
c0026731:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026736:	c3                   	ret    

c0026737 <x87Load>:
c0026737:	dd 64 24 08          	frstor [esp+0x8]
c002673b:	c3                   	ret    

c002673c <x87Init>:
c002673c:	9b db e3             	finit  
c002673f:	0f 20 c0             	mov    eax,cr0
c0026742:	66 25 fb ff          	and    ax,0xfffb
c0026746:	66 0d 22 00          	or     ax,0x22
c002674a:	0f 22 c0             	mov    cr0,eax
c002674d:	0f 06                	clts   
c002674f:	d9 2d 14 67 02 c0    	fldcw  WORD PTR ds:0xc0026714
c0026755:	c3                   	ret    

c0026756 <x87Close>:
c0026756:	c3                   	ret    
c0026757:	90                   	nop

c0026758 <__do_global_ctors_aux>:
c0026758:	a1 9c 92 02 c0       	mov    eax,ds:0xc002929c
c002675d:	83 f8 ff             	cmp    eax,0xffffffff
c0026760:	74 1a                	je     c002677c <__do_global_ctors_aux+0x24>
c0026762:	55                   	push   ebp
c0026763:	89 e5                	mov    ebp,esp
c0026765:	53                   	push   ebx
c0026766:	52                   	push   edx
c0026767:	bb 9c 92 02 c0       	mov    ebx,0xc002929c
c002676c:	ff d0                	call   eax
c002676e:	83 eb 04             	sub    ebx,0x4
c0026771:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026773:	83 f8 ff             	cmp    eax,0xffffffff
c0026776:	75 f4                	jne    c002676c <__do_global_ctors_aux+0x14>
c0026778:	58                   	pop    eax
c0026779:	5b                   	pop    ebx
c002677a:	5d                   	pop    ebp
c002677b:	c3                   	ret    
c002677c:	c3                   	ret    
c002677d:	66 90                	xchg   ax,ax
c002677f:	90                   	nop

c0026780 <__divdi3>:
c0026780:	55                   	push   ebp
c0026781:	57                   	push   edi
c0026782:	56                   	push   esi
c0026783:	53                   	push   ebx
c0026784:	83 ec 1c             	sub    esp,0x1c
c0026787:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002678b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002678f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026792:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026796:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002679a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002679e:	85 db                	test   ebx,ebx
c00267a0:	0f 88 8e 00 00 00    	js     c0026834 <__divdi3+0xb4>
c00267a6:	89 dd                	mov    ebp,ebx
c00267a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267b0:	89 d3                	mov    ebx,edx
c00267b2:	85 d2                	test   edx,edx
c00267b4:	79 0d                	jns    c00267c3 <__divdi3+0x43>
c00267b6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267ba:	f7 d8                	neg    eax
c00267bc:	83 d2 00             	adc    edx,0x0
c00267bf:	f7 da                	neg    edx
c00267c1:	89 d3                	mov    ebx,edx
c00267c3:	89 c7                	mov    edi,eax
c00267c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267c8:	85 db                	test   ebx,ebx
c00267ca:	75 48                	jne    c0026814 <__divdi3+0x94>
c00267cc:	39 ef                	cmp    edi,ebp
c00267ce:	76 24                	jbe    c00267f4 <__divdi3+0x74>
c00267d0:	89 ea                	mov    edx,ebp
c00267d2:	f7 f7                	div    edi
c00267d4:	89 c1                	mov    ecx,eax
c00267d6:	31 f6                	xor    esi,esi
c00267d8:	89 c8                	mov    eax,ecx
c00267da:	89 f2                	mov    edx,esi
c00267dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267e0:	85 c9                	test   ecx,ecx
c00267e2:	74 07                	je     c00267eb <__divdi3+0x6b>
c00267e4:	f7 d8                	neg    eax
c00267e6:	83 d2 00             	adc    edx,0x0
c00267e9:	f7 da                	neg    edx
c00267eb:	83 c4 1c             	add    esp,0x1c
c00267ee:	5b                   	pop    ebx
c00267ef:	5e                   	pop    esi
c00267f0:	5f                   	pop    edi
c00267f1:	5d                   	pop    ebp
c00267f2:	c3                   	ret    
c00267f3:	90                   	nop
c00267f4:	85 ff                	test   edi,edi
c00267f6:	75 0b                	jne    c0026803 <__divdi3+0x83>
c00267f8:	b8 01 00 00 00       	mov    eax,0x1
c00267fd:	31 d2                	xor    edx,edx
c00267ff:	f7 f3                	div    ebx
c0026801:	89 c7                	mov    edi,eax
c0026803:	31 d2                	xor    edx,edx
c0026805:	89 e8                	mov    eax,ebp
c0026807:	f7 f7                	div    edi
c0026809:	89 c6                	mov    esi,eax
c002680b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002680e:	f7 f7                	div    edi
c0026810:	89 c1                	mov    ecx,eax
c0026812:	eb c4                	jmp    c00267d8 <__divdi3+0x58>
c0026814:	39 eb                	cmp    ebx,ebp
c0026816:	77 3c                	ja     c0026854 <__divdi3+0xd4>
c0026818:	0f bd f3             	bsr    esi,ebx
c002681b:	83 f6 1f             	xor    esi,0x1f
c002681e:	75 40                	jne    c0026860 <__divdi3+0xe0>
c0026820:	39 eb                	cmp    ebx,ebp
c0026822:	72 09                	jb     c002682d <__divdi3+0xad>
c0026824:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026827:	0f 87 97 00 00 00    	ja     c00268c4 <__divdi3+0x144>
c002682d:	b9 01 00 00 00       	mov    ecx,0x1
c0026832:	eb a4                	jmp    c00267d8 <__divdi3+0x58>
c0026834:	f7 d9                	neg    ecx
c0026836:	83 d3 00             	adc    ebx,0x0
c0026839:	f7 db                	neg    ebx
c002683b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002683e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026842:	89 dd                	mov    ebp,ebx
c0026844:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002684c:	e9 5f ff ff ff       	jmp    c00267b0 <__divdi3+0x30>
c0026851:	8d 76 00             	lea    esi,[esi+0x0]
c0026854:	31 f6                	xor    esi,esi
c0026856:	31 c9                	xor    ecx,ecx
c0026858:	e9 7b ff ff ff       	jmp    c00267d8 <__divdi3+0x58>
c002685d:	8d 76 00             	lea    esi,[esi+0x0]
c0026860:	b8 20 00 00 00       	mov    eax,0x20
c0026865:	29 f0                	sub    eax,esi
c0026867:	89 f1                	mov    ecx,esi
c0026869:	d3 e3                	shl    ebx,cl
c002686b:	89 fa                	mov    edx,edi
c002686d:	88 c1                	mov    cl,al
c002686f:	d3 ea                	shr    edx,cl
c0026871:	09 da                	or     edx,ebx
c0026873:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026877:	89 f1                	mov    ecx,esi
c0026879:	d3 e7                	shl    edi,cl
c002687b:	89 eb                	mov    ebx,ebp
c002687d:	88 c1                	mov    cl,al
c002687f:	d3 eb                	shr    ebx,cl
c0026881:	89 f1                	mov    ecx,esi
c0026883:	d3 e5                	shl    ebp,cl
c0026885:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026888:	88 c1                	mov    cl,al
c002688a:	d3 ea                	shr    edx,cl
c002688c:	09 d5                	or     ebp,edx
c002688e:	89 e8                	mov    eax,ebp
c0026890:	89 da                	mov    edx,ebx
c0026892:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026896:	89 d3                	mov    ebx,edx
c0026898:	89 c5                	mov    ebp,eax
c002689a:	f7 e7                	mul    edi
c002689c:	39 d3                	cmp    ebx,edx
c002689e:	72 18                	jb     c00268b8 <__divdi3+0x138>
c00268a0:	74 0a                	je     c00268ac <__divdi3+0x12c>
c00268a2:	89 e9                	mov    ecx,ebp
c00268a4:	31 f6                	xor    esi,esi
c00268a6:	e9 2d ff ff ff       	jmp    c00267d8 <__divdi3+0x58>
c00268ab:	90                   	nop
c00268ac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268af:	89 f1                	mov    ecx,esi
c00268b1:	d3 e7                	shl    edi,cl
c00268b3:	39 c7                	cmp    edi,eax
c00268b5:	73 eb                	jae    c00268a2 <__divdi3+0x122>
c00268b7:	90                   	nop
c00268b8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268bb:	31 f6                	xor    esi,esi
c00268bd:	e9 16 ff ff ff       	jmp    c00267d8 <__divdi3+0x58>
c00268c2:	66 90                	xchg   ax,ax
c00268c4:	31 c9                	xor    ecx,ecx
c00268c6:	e9 0d ff ff ff       	jmp    c00267d8 <__divdi3+0x58>
c00268cb:	90                   	nop

c00268cc <__moddi3>:
c00268cc:	55                   	push   ebp
c00268cd:	57                   	push   edi
c00268ce:	56                   	push   esi
c00268cf:	53                   	push   ebx
c00268d0:	83 ec 2c             	sub    esp,0x2c
c00268d3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268d7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268df:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00268e3:	85 db                	test   ebx,ebx
c00268e5:	0f 88 85 00 00 00    	js     c0026970 <__moddi3+0xa4>
c00268eb:	89 de                	mov    esi,ebx
c00268ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268f5:	89 d7                	mov    edi,edx
c00268f7:	85 d2                	test   edx,edx
c00268f9:	79 09                	jns    c0026904 <__moddi3+0x38>
c00268fb:	f7 d8                	neg    eax
c00268fd:	83 d2 00             	adc    edx,0x0
c0026900:	f7 da                	neg    edx
c0026902:	89 d7                	mov    edi,edx
c0026904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026908:	89 cd                	mov    ebp,ecx
c002690a:	85 ff                	test   edi,edi
c002690c:	75 52                	jne    c0026960 <__moddi3+0x94>
c002690e:	89 c3                	mov    ebx,eax
c0026910:	39 f0                	cmp    eax,esi
c0026912:	76 24                	jbe    c0026938 <__moddi3+0x6c>
c0026914:	89 c8                	mov    eax,ecx
c0026916:	89 f2                	mov    edx,esi
c0026918:	f7 f3                	div    ebx
c002691a:	89 d6                	mov    esi,edx
c002691c:	89 f0                	mov    eax,esi
c002691e:	31 d2                	xor    edx,edx
c0026920:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026924:	85 c9                	test   ecx,ecx
c0026926:	74 07                	je     c002692f <__moddi3+0x63>
c0026928:	f7 d8                	neg    eax
c002692a:	83 d2 00             	adc    edx,0x0
c002692d:	f7 da                	neg    edx
c002692f:	83 c4 2c             	add    esp,0x2c
c0026932:	5b                   	pop    ebx
c0026933:	5e                   	pop    esi
c0026934:	5f                   	pop    edi
c0026935:	5d                   	pop    ebp
c0026936:	c3                   	ret    
c0026937:	90                   	nop
c0026938:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002693c:	85 db                	test   ebx,ebx
c002693e:	75 0d                	jne    c002694d <__moddi3+0x81>
c0026940:	b8 01 00 00 00       	mov    eax,0x1
c0026945:	31 d2                	xor    edx,edx
c0026947:	f7 f7                	div    edi
c0026949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002694d:	89 f0                	mov    eax,esi
c002694f:	31 d2                	xor    edx,edx
c0026951:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026955:	f7 f7                	div    edi
c0026957:	89 e8                	mov    eax,ebp
c0026959:	f7 f7                	div    edi
c002695b:	89 d6                	mov    esi,edx
c002695d:	eb bd                	jmp    c002691c <__moddi3+0x50>
c002695f:	90                   	nop
c0026960:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026964:	39 f7                	cmp    edi,esi
c0026966:	76 20                	jbe    c0026988 <__moddi3+0xbc>
c0026968:	89 c8                	mov    eax,ecx
c002696a:	89 f2                	mov    edx,esi
c002696c:	eb b2                	jmp    c0026920 <__moddi3+0x54>
c002696e:	66 90                	xchg   ax,ax
c0026970:	f7 d9                	neg    ecx
c0026972:	83 d3 00             	adc    ebx,0x0
c0026975:	f7 db                	neg    ebx
c0026977:	89 de                	mov    esi,ebx
c0026979:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026981:	e9 6f ff ff ff       	jmp    c00268f5 <__moddi3+0x29>
c0026986:	66 90                	xchg   ax,ax
c0026988:	0f bd c7             	bsr    eax,edi
c002698b:	83 f0 1f             	xor    eax,0x1f
c002698e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026992:	75 24                	jne    c00269b8 <__moddi3+0xec>
c0026994:	39 f7                	cmp    edi,esi
c0026996:	72 06                	jb     c002699e <__moddi3+0xd2>
c0026998:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002699c:	77 0c                	ja     c00269aa <__moddi3+0xde>
c002699e:	89 e9                	mov    ecx,ebp
c00269a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269a4:	19 fe                	sbb    esi,edi
c00269a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269ae:	89 f2                	mov    edx,esi
c00269b0:	e9 6b ff ff ff       	jmp    c0026920 <__moddi3+0x54>
c00269b5:	8d 76 00             	lea    esi,[esi+0x0]
c00269b8:	b8 20 00 00 00       	mov    eax,0x20
c00269bd:	89 c2                	mov    edx,eax
c00269bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269c3:	29 da                	sub    edx,ebx
c00269c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269c9:	88 d9                	mov    cl,bl
c00269cb:	d3 e7                	shl    edi,cl
c00269cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269d1:	88 d1                	mov    cl,dl
c00269d3:	d3 e8                	shr    eax,cl
c00269d5:	09 c7                	or     edi,eax
c00269d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269df:	89 d8                	mov    eax,ebx
c00269e1:	88 d9                	mov    cl,bl
c00269e3:	d3 e7                	shl    edi,cl
c00269e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269e9:	89 f3                	mov    ebx,esi
c00269eb:	88 d1                	mov    cl,dl
c00269ed:	d3 eb                	shr    ebx,cl
c00269ef:	89 c7                	mov    edi,eax
c00269f1:	88 c1                	mov    cl,al
c00269f3:	d3 e6                	shl    esi,cl
c00269f5:	89 e8                	mov    eax,ebp
c00269f7:	88 d1                	mov    cl,dl
c00269f9:	d3 e8                	shr    eax,cl
c00269fb:	09 f0                	or     eax,esi
c00269fd:	89 f9                	mov    ecx,edi
c00269ff:	d3 e5                	shl    ebp,cl
c0026a01:	89 da                	mov    edx,ebx
c0026a03:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a07:	89 d3                	mov    ebx,edx
c0026a09:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a0d:	89 c6                	mov    esi,eax
c0026a0f:	89 d1                	mov    ecx,edx
c0026a11:	39 d3                	cmp    ebx,edx
c0026a13:	72 27                	jb     c0026a3c <__moddi3+0x170>
c0026a15:	74 21                	je     c0026a38 <__moddi3+0x16c>
c0026a17:	29 f5                	sub    ebp,esi
c0026a19:	19 cb                	sbb    ebx,ecx
c0026a1b:	89 de                	mov    esi,ebx
c0026a1d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a21:	d3 e6                	shl    esi,cl
c0026a23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a27:	89 f9                	mov    ecx,edi
c0026a29:	d3 ed                	shr    ebp,cl
c0026a2b:	09 ee                	or     esi,ebp
c0026a2d:	89 f0                	mov    eax,esi
c0026a2f:	d3 eb                	shr    ebx,cl
c0026a31:	89 da                	mov    edx,ebx
c0026a33:	e9 e8 fe ff ff       	jmp    c0026920 <__moddi3+0x54>
c0026a38:	39 c5                	cmp    ebp,eax
c0026a3a:	73 db                	jae    c0026a17 <__moddi3+0x14b>
c0026a3c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a40:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a44:	89 d1                	mov    ecx,edx
c0026a46:	89 c6                	mov    esi,eax
c0026a48:	eb cd                	jmp    c0026a17 <__moddi3+0x14b>
c0026a4a:	66 90                	xchg   ax,ax

c0026a4c <__udivdi3>:
c0026a4c:	55                   	push   ebp
c0026a4d:	57                   	push   edi
c0026a4e:	56                   	push   esi
c0026a4f:	53                   	push   ebx
c0026a50:	83 ec 1c             	sub    esp,0x1c
c0026a53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a5b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a63:	85 d2                	test   edx,edx
c0026a65:	75 41                	jne    c0026aa8 <__udivdi3+0x5c>
c0026a67:	39 f7                	cmp    edi,esi
c0026a69:	76 15                	jbe    c0026a80 <__udivdi3+0x34>
c0026a6b:	89 e8                	mov    eax,ebp
c0026a6d:	89 f2                	mov    edx,esi
c0026a6f:	f7 f7                	div    edi
c0026a71:	31 db                	xor    ebx,ebx
c0026a73:	89 da                	mov    edx,ebx
c0026a75:	83 c4 1c             	add    esp,0x1c
c0026a78:	5b                   	pop    ebx
c0026a79:	5e                   	pop    esi
c0026a7a:	5f                   	pop    edi
c0026a7b:	5d                   	pop    ebp
c0026a7c:	c3                   	ret    
c0026a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a80:	89 f9                	mov    ecx,edi
c0026a82:	85 ff                	test   edi,edi
c0026a84:	75 0b                	jne    c0026a91 <__udivdi3+0x45>
c0026a86:	b8 01 00 00 00       	mov    eax,0x1
c0026a8b:	31 d2                	xor    edx,edx
c0026a8d:	f7 f7                	div    edi
c0026a8f:	89 c1                	mov    ecx,eax
c0026a91:	31 d2                	xor    edx,edx
c0026a93:	89 f0                	mov    eax,esi
c0026a95:	f7 f1                	div    ecx
c0026a97:	89 c3                	mov    ebx,eax
c0026a99:	89 e8                	mov    eax,ebp
c0026a9b:	f7 f1                	div    ecx
c0026a9d:	89 da                	mov    edx,ebx
c0026a9f:	83 c4 1c             	add    esp,0x1c
c0026aa2:	5b                   	pop    ebx
c0026aa3:	5e                   	pop    esi
c0026aa4:	5f                   	pop    edi
c0026aa5:	5d                   	pop    ebp
c0026aa6:	c3                   	ret    
c0026aa7:	90                   	nop
c0026aa8:	39 f2                	cmp    edx,esi
c0026aaa:	77 1c                	ja     c0026ac8 <__udivdi3+0x7c>
c0026aac:	0f bd da             	bsr    ebx,edx
c0026aaf:	83 f3 1f             	xor    ebx,0x1f
c0026ab2:	75 24                	jne    c0026ad8 <__udivdi3+0x8c>
c0026ab4:	39 f2                	cmp    edx,esi
c0026ab6:	72 08                	jb     c0026ac0 <__udivdi3+0x74>
c0026ab8:	39 ef                	cmp    edi,ebp
c0026aba:	0f 87 84 00 00 00    	ja     c0026b44 <__udivdi3+0xf8>
c0026ac0:	b8 01 00 00 00       	mov    eax,0x1
c0026ac5:	eb ac                	jmp    c0026a73 <__udivdi3+0x27>
c0026ac7:	90                   	nop
c0026ac8:	31 db                	xor    ebx,ebx
c0026aca:	31 c0                	xor    eax,eax
c0026acc:	89 da                	mov    edx,ebx
c0026ace:	83 c4 1c             	add    esp,0x1c
c0026ad1:	5b                   	pop    ebx
c0026ad2:	5e                   	pop    esi
c0026ad3:	5f                   	pop    edi
c0026ad4:	5d                   	pop    ebp
c0026ad5:	c3                   	ret    
c0026ad6:	66 90                	xchg   ax,ax
c0026ad8:	b8 20 00 00 00       	mov    eax,0x20
c0026add:	29 d8                	sub    eax,ebx
c0026adf:	88 d9                	mov    cl,bl
c0026ae1:	d3 e2                	shl    edx,cl
c0026ae3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026ae7:	89 fa                	mov    edx,edi
c0026ae9:	88 c1                	mov    cl,al
c0026aeb:	d3 ea                	shr    edx,cl
c0026aed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026af1:	09 d1                	or     ecx,edx
c0026af3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026af7:	88 d9                	mov    cl,bl
c0026af9:	d3 e7                	shl    edi,cl
c0026afb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aff:	89 f7                	mov    edi,esi
c0026b01:	88 c1                	mov    cl,al
c0026b03:	d3 ef                	shr    edi,cl
c0026b05:	88 d9                	mov    cl,bl
c0026b07:	d3 e6                	shl    esi,cl
c0026b09:	89 ea                	mov    edx,ebp
c0026b0b:	88 c1                	mov    cl,al
c0026b0d:	d3 ea                	shr    edx,cl
c0026b0f:	09 d6                	or     esi,edx
c0026b11:	89 f0                	mov    eax,esi
c0026b13:	89 fa                	mov    edx,edi
c0026b15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b19:	89 d7                	mov    edi,edx
c0026b1b:	89 c6                	mov    esi,eax
c0026b1d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b21:	39 d7                	cmp    edi,edx
c0026b23:	72 13                	jb     c0026b38 <__udivdi3+0xec>
c0026b25:	74 09                	je     c0026b30 <__udivdi3+0xe4>
c0026b27:	89 f0                	mov    eax,esi
c0026b29:	31 db                	xor    ebx,ebx
c0026b2b:	e9 43 ff ff ff       	jmp    c0026a73 <__udivdi3+0x27>
c0026b30:	88 d9                	mov    cl,bl
c0026b32:	d3 e5                	shl    ebp,cl
c0026b34:	39 c5                	cmp    ebp,eax
c0026b36:	73 ef                	jae    c0026b27 <__udivdi3+0xdb>
c0026b38:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b3b:	31 db                	xor    ebx,ebx
c0026b3d:	e9 31 ff ff ff       	jmp    c0026a73 <__udivdi3+0x27>
c0026b42:	66 90                	xchg   ax,ax
c0026b44:	31 c0                	xor    eax,eax
c0026b46:	e9 28 ff ff ff       	jmp    c0026a73 <__udivdi3+0x27>
c0026b4b:	90                   	nop

c0026b4c <__umoddi3>:
c0026b4c:	55                   	push   ebp
c0026b4d:	57                   	push   edi
c0026b4e:	56                   	push   esi
c0026b4f:	53                   	push   ebx
c0026b50:	83 ec 1c             	sub    esp,0x1c
c0026b53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b5b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b63:	89 da                	mov    edx,ebx
c0026b65:	85 c0                	test   eax,eax
c0026b67:	75 37                	jne    c0026ba0 <__umoddi3+0x54>
c0026b69:	39 df                	cmp    edi,ebx
c0026b6b:	76 13                	jbe    c0026b80 <__umoddi3+0x34>
c0026b6d:	89 f0                	mov    eax,esi
c0026b6f:	f7 f7                	div    edi
c0026b71:	89 d0                	mov    eax,edx
c0026b73:	31 d2                	xor    edx,edx
c0026b75:	83 c4 1c             	add    esp,0x1c
c0026b78:	5b                   	pop    ebx
c0026b79:	5e                   	pop    esi
c0026b7a:	5f                   	pop    edi
c0026b7b:	5d                   	pop    ebp
c0026b7c:	c3                   	ret    
c0026b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b80:	89 fd                	mov    ebp,edi
c0026b82:	85 ff                	test   edi,edi
c0026b84:	75 0b                	jne    c0026b91 <__umoddi3+0x45>
c0026b86:	b8 01 00 00 00       	mov    eax,0x1
c0026b8b:	31 d2                	xor    edx,edx
c0026b8d:	f7 f7                	div    edi
c0026b8f:	89 c5                	mov    ebp,eax
c0026b91:	89 d8                	mov    eax,ebx
c0026b93:	31 d2                	xor    edx,edx
c0026b95:	f7 f5                	div    ebp
c0026b97:	89 f0                	mov    eax,esi
c0026b99:	f7 f5                	div    ebp
c0026b9b:	89 d0                	mov    eax,edx
c0026b9d:	eb d4                	jmp    c0026b73 <__umoddi3+0x27>
c0026b9f:	90                   	nop
c0026ba0:	89 f1                	mov    ecx,esi
c0026ba2:	39 d8                	cmp    eax,ebx
c0026ba4:	76 0a                	jbe    c0026bb0 <__umoddi3+0x64>
c0026ba6:	89 f0                	mov    eax,esi
c0026ba8:	83 c4 1c             	add    esp,0x1c
c0026bab:	5b                   	pop    ebx
c0026bac:	5e                   	pop    esi
c0026bad:	5f                   	pop    edi
c0026bae:	5d                   	pop    ebp
c0026baf:	c3                   	ret    
c0026bb0:	0f bd e8             	bsr    ebp,eax
c0026bb3:	83 f5 1f             	xor    ebp,0x1f
c0026bb6:	75 1c                	jne    c0026bd4 <__umoddi3+0x88>
c0026bb8:	39 d8                	cmp    eax,ebx
c0026bba:	72 04                	jb     c0026bc0 <__umoddi3+0x74>
c0026bbc:	39 f7                	cmp    edi,esi
c0026bbe:	77 08                	ja     c0026bc8 <__umoddi3+0x7c>
c0026bc0:	89 da                	mov    edx,ebx
c0026bc2:	29 fe                	sub    esi,edi
c0026bc4:	19 c2                	sbb    edx,eax
c0026bc6:	89 f1                	mov    ecx,esi
c0026bc8:	89 c8                	mov    eax,ecx
c0026bca:	83 c4 1c             	add    esp,0x1c
c0026bcd:	5b                   	pop    ebx
c0026bce:	5e                   	pop    esi
c0026bcf:	5f                   	pop    edi
c0026bd0:	5d                   	pop    ebp
c0026bd1:	c3                   	ret    
c0026bd2:	66 90                	xchg   ax,ax
c0026bd4:	ba 20 00 00 00       	mov    edx,0x20
c0026bd9:	29 ea                	sub    edx,ebp
c0026bdb:	89 e9                	mov    ecx,ebp
c0026bdd:	d3 e0                	shl    eax,cl
c0026bdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026be3:	89 f8                	mov    eax,edi
c0026be5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026be9:	88 d1                	mov    cl,dl
c0026beb:	d3 e8                	shr    eax,cl
c0026bed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026bf1:	09 c1                	or     ecx,eax
c0026bf3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026bf7:	89 e9                	mov    ecx,ebp
c0026bf9:	d3 e7                	shl    edi,cl
c0026bfb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bff:	89 d8                	mov    eax,ebx
c0026c01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c05:	88 d1                	mov    cl,dl
c0026c07:	d3 e8                	shr    eax,cl
c0026c09:	89 c7                	mov    edi,eax
c0026c0b:	89 e9                	mov    ecx,ebp
c0026c0d:	d3 e3                	shl    ebx,cl
c0026c0f:	89 f0                	mov    eax,esi
c0026c11:	88 d1                	mov    cl,dl
c0026c13:	d3 e8                	shr    eax,cl
c0026c15:	09 d8                	or     eax,ebx
c0026c17:	89 e9                	mov    ecx,ebp
c0026c19:	d3 e6                	shl    esi,cl
c0026c1b:	89 f3                	mov    ebx,esi
c0026c1d:	89 fa                	mov    edx,edi
c0026c1f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c23:	89 d1                	mov    ecx,edx
c0026c25:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c29:	89 c6                	mov    esi,eax
c0026c2b:	89 d7                	mov    edi,edx
c0026c2d:	39 d1                	cmp    ecx,edx
c0026c2f:	72 27                	jb     c0026c58 <__umoddi3+0x10c>
c0026c31:	74 21                	je     c0026c54 <__umoddi3+0x108>
c0026c33:	89 ca                	mov    edx,ecx
c0026c35:	29 f3                	sub    ebx,esi
c0026c37:	19 fa                	sbb    edx,edi
c0026c39:	89 d0                	mov    eax,edx
c0026c3b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c3f:	d3 e0                	shl    eax,cl
c0026c41:	89 e9                	mov    ecx,ebp
c0026c43:	d3 eb                	shr    ebx,cl
c0026c45:	09 d8                	or     eax,ebx
c0026c47:	d3 ea                	shr    edx,cl
c0026c49:	83 c4 1c             	add    esp,0x1c
c0026c4c:	5b                   	pop    ebx
c0026c4d:	5e                   	pop    esi
c0026c4e:	5f                   	pop    edi
c0026c4f:	5d                   	pop    ebp
c0026c50:	c3                   	ret    
c0026c51:	8d 76 00             	lea    esi,[esi+0x0]
c0026c54:	39 c3                	cmp    ebx,eax
c0026c56:	73 db                	jae    c0026c33 <__umoddi3+0xe7>
c0026c58:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c5c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c60:	89 d7                	mov    edi,edx
c0026c62:	89 c6                	mov    esi,eax
c0026c64:	eb cd                	jmp    c0026c33 <__umoddi3+0xe7>

c0026c66 <__addsf3>:
c0026c66:	55                   	push   ebp
c0026c67:	89 e5                	mov    ebp,esp
c0026c69:	57                   	push   edi
c0026c6a:	56                   	push   esi
c0026c6b:	53                   	push   ebx
c0026c6c:	83 ec 08             	sub    esp,0x8
c0026c6f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c72:	89 fa                	mov    edx,edi
c0026c74:	89 f8                	mov    eax,edi
c0026c76:	c1 f8 17             	sar    eax,0x17
c0026c79:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c7c:	c1 e2 08             	shl    edx,0x8
c0026c7f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c85:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c88:	89 de                	mov    esi,ebx
c0026c8a:	c1 fe 17             	sar    esi,0x17
c0026c8d:	c1 e3 08             	shl    ebx,0x8
c0026c90:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c96:	31 f0                	xor    eax,esi
c0026c98:	0f 88 3b 01 00 00    	js     c0026dd9 <__addsf3+0x173>
c0026c9e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ca1:	29 f1                	sub    ecx,esi
c0026ca3:	85 c9                	test   ecx,ecx
c0026ca5:	7e 54                	jle    c0026cfb <__addsf3+0x95>
c0026ca7:	89 f0                	mov    eax,esi
c0026ca9:	84 c0                	test   al,al
c0026cab:	75 10                	jne    c0026cbd <__addsf3+0x57>
c0026cad:	85 db                	test   ebx,ebx
c0026caf:	0f 84 aa 02 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026cb5:	49                   	dec    ecx
c0026cb6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cb9:	74 38                	je     c0026cf3 <__addsf3+0x8d>
c0026cbb:	eb 13                	jmp    c0026cd0 <__addsf3+0x6a>
c0026cbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cc0:	f7 d0                	not    eax
c0026cc2:	84 c0                	test   al,al
c0026cc4:	0f 84 95 02 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026cca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cd0:	83 f9 1f             	cmp    ecx,0x1f
c0026cd3:	0f 8f 86 02 00 00    	jg     c0026f5f <__addsf3+0x2f9>
c0026cd9:	89 de                	mov    esi,ebx
c0026cdb:	d3 ee                	shr    esi,cl
c0026cdd:	b8 20 00 00 00       	mov    eax,0x20
c0026ce2:	29 c8                	sub    eax,ecx
c0026ce4:	89 c1                	mov    ecx,eax
c0026ce6:	d3 e3                	shl    ebx,cl
c0026ce8:	31 c0                	xor    eax,eax
c0026cea:	85 db                	test   ebx,ebx
c0026cec:	0f 95 c0             	setne  al
c0026cef:	09 f0                	or     eax,esi
c0026cf1:	01 d0                	add    eax,edx
c0026cf3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cf6:	e9 b6 00 00 00       	jmp    c0026db1 <__addsf3+0x14b>
c0026cfb:	74 5c                	je     c0026d59 <__addsf3+0xf3>
c0026cfd:	89 f1                	mov    ecx,esi
c0026cff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d02:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d05:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d09:	75 14                	jne    c0026d1f <__addsf3+0xb9>
c0026d0b:	85 d2                	test   edx,edx
c0026d0d:	0f 84 4c 02 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026d13:	49                   	dec    ecx
c0026d14:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d17:	0f 84 94 00 00 00    	je     c0026db1 <__addsf3+0x14b>
c0026d1d:	eb 12                	jmp    c0026d31 <__addsf3+0xcb>
c0026d1f:	89 f0                	mov    eax,esi
c0026d21:	f7 d0                	not    eax
c0026d23:	84 c0                	test   al,al
c0026d25:	0f 84 34 02 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026d2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d31:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d34:	83 f9 1f             	cmp    ecx,0x1f
c0026d37:	0f 8f 22 02 00 00    	jg     c0026f5f <__addsf3+0x2f9>
c0026d3d:	89 d7                	mov    edi,edx
c0026d3f:	d3 ef                	shr    edi,cl
c0026d41:	b8 20 00 00 00       	mov    eax,0x20
c0026d46:	29 c8                	sub    eax,ecx
c0026d48:	89 c1                	mov    ecx,eax
c0026d4a:	d3 e2                	shl    edx,cl
c0026d4c:	31 c0                	xor    eax,eax
c0026d4e:	85 d2                	test   edx,edx
c0026d50:	0f 95 c0             	setne  al
c0026d53:	09 f8                	or     eax,edi
c0026d55:	01 d8                	add    eax,ebx
c0026d57:	eb 58                	jmp    c0026db1 <__addsf3+0x14b>
c0026d59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d5c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d5f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d65:	75 32                	jne    c0026d99 <__addsf3+0x133>
c0026d67:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d6b:	75 1f                	jne    c0026d8c <__addsf3+0x126>
c0026d6d:	85 d2                	test   edx,edx
c0026d6f:	0f 84 e0 01 00 00    	je     c0026f55 <__addsf3+0x2ef>
c0026d75:	85 db                	test   ebx,ebx
c0026d77:	0f 84 e2 01 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026d7d:	89 d0                	mov    eax,edx
c0026d7f:	01 d8                	add    eax,ebx
c0026d81:	0f 89 a9 01 00 00    	jns    c0026f30 <__addsf3+0x2ca>
c0026d87:	e9 9d 01 00 00       	jmp    c0026f29 <__addsf3+0x2c3>
c0026d8c:	85 d2                	test   edx,edx
c0026d8e:	0f 85 cb 01 00 00    	jne    c0026f5f <__addsf3+0x2f9>
c0026d94:	e9 bc 01 00 00       	jmp    c0026f55 <__addsf3+0x2ef>
c0026d99:	31 c0                	xor    eax,eax
c0026d9b:	89 f1                	mov    ecx,esi
c0026d9d:	f7 d1                	not    ecx
c0026d9f:	84 c9                	test   cl,cl
c0026da1:	0f 84 90 01 00 00    	je     c0026f37 <__addsf3+0x2d1>
c0026da7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026daa:	d1 e8                	shr    eax,1
c0026dac:	e9 86 01 00 00       	jmp    c0026f37 <__addsf3+0x2d1>
c0026db1:	85 c0                	test   eax,eax
c0026db3:	0f 89 7e 01 00 00    	jns    c0026f37 <__addsf3+0x2d1>
c0026db9:	46                   	inc    esi
c0026dba:	89 f2                	mov    edx,esi
c0026dbc:	f7 d2                	not    edx
c0026dbe:	84 d2                	test   dl,dl
c0026dc0:	0f 84 6f 01 00 00    	je     c0026f35 <__addsf3+0x2cf>
c0026dc6:	89 c2                	mov    edx,eax
c0026dc8:	83 e2 01             	and    edx,0x1
c0026dcb:	d1 e8                	shr    eax,1
c0026dcd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026dd2:	09 d0                	or     eax,edx
c0026dd4:	e9 5e 01 00 00       	jmp    c0026f37 <__addsf3+0x2d1>
c0026dd9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ddd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026de0:	89 f0                	mov    eax,esi
c0026de2:	0f b6 c0             	movzx  eax,al
c0026de5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026de8:	29 c1                	sub    ecx,eax
c0026dea:	85 c9                	test   ecx,ecx
c0026dec:	7e 55                	jle    c0026e43 <__addsf3+0x1dd>
c0026dee:	85 c0                	test   eax,eax
c0026df0:	75 11                	jne    c0026e03 <__addsf3+0x19d>
c0026df2:	85 db                	test   ebx,ebx
c0026df4:	0f 84 65 01 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026dfa:	49                   	dec    ecx
c0026dfb:	75 19                	jne    c0026e16 <__addsf3+0x1b0>
c0026dfd:	89 d0                	mov    eax,edx
c0026dff:	29 d8                	sub    eax,ebx
c0026e01:	eb 38                	jmp    c0026e3b <__addsf3+0x1d5>
c0026e03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e06:	f7 d0                	not    eax
c0026e08:	84 c0                	test   al,al
c0026e0a:	0f 84 4f 01 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026e10:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e16:	83 f9 1f             	cmp    ecx,0x1f
c0026e19:	0f 8f 40 01 00 00    	jg     c0026f5f <__addsf3+0x2f9>
c0026e1f:	89 de                	mov    esi,ebx
c0026e21:	d3 ee                	shr    esi,cl
c0026e23:	b8 20 00 00 00       	mov    eax,0x20
c0026e28:	29 c8                	sub    eax,ecx
c0026e2a:	89 c1                	mov    ecx,eax
c0026e2c:	d3 e3                	shl    ebx,cl
c0026e2e:	31 c0                	xor    eax,eax
c0026e30:	85 db                	test   ebx,ebx
c0026e32:	0f 95 c0             	setne  al
c0026e35:	09 f0                	or     eax,esi
c0026e37:	29 c2                	sub    edx,eax
c0026e39:	89 d0                	mov    eax,edx
c0026e3b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e3e:	e9 af 00 00 00       	jmp    c0026ef2 <__addsf3+0x28c>
c0026e43:	74 5c                	je     c0026ea1 <__addsf3+0x23b>
c0026e45:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e48:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e4b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e4f:	75 14                	jne    c0026e65 <__addsf3+0x1ff>
c0026e51:	85 d2                	test   edx,edx
c0026e53:	0f 84 06 01 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026e59:	48                   	dec    eax
c0026e5a:	75 1b                	jne    c0026e77 <__addsf3+0x211>
c0026e5c:	89 d8                	mov    eax,ebx
c0026e5e:	29 d0                	sub    eax,edx
c0026e60:	e9 8d 00 00 00       	jmp    c0026ef2 <__addsf3+0x28c>
c0026e65:	89 f1                	mov    ecx,esi
c0026e67:	f7 d1                	not    ecx
c0026e69:	84 c9                	test   cl,cl
c0026e6b:	0f 84 ee 00 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026e71:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e77:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e7a:	83 f8 1f             	cmp    eax,0x1f
c0026e7d:	0f 8f dc 00 00 00    	jg     c0026f5f <__addsf3+0x2f9>
c0026e83:	89 d7                	mov    edi,edx
c0026e85:	88 c1                	mov    cl,al
c0026e87:	d3 ef                	shr    edi,cl
c0026e89:	b9 20 00 00 00       	mov    ecx,0x20
c0026e8e:	29 c1                	sub    ecx,eax
c0026e90:	d3 e2                	shl    edx,cl
c0026e92:	31 c0                	xor    eax,eax
c0026e94:	85 d2                	test   edx,edx
c0026e96:	0f 95 c0             	setne  al
c0026e99:	09 f8                	or     eax,edi
c0026e9b:	29 c3                	sub    ebx,eax
c0026e9d:	89 d8                	mov    eax,ebx
c0026e9f:	eb 51                	jmp    c0026ef2 <__addsf3+0x28c>
c0026ea1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ea4:	40                   	inc    eax
c0026ea5:	a8 fe                	test   al,0xfe
c0026ea7:	75 3d                	jne    c0026ee6 <__addsf3+0x280>
c0026ea9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ead:	0f 85 a7 00 00 00    	jne    c0026f5a <__addsf3+0x2f4>
c0026eb3:	85 d2                	test   edx,edx
c0026eb5:	75 12                	jne    c0026ec9 <__addsf3+0x263>
c0026eb7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eba:	85 db                	test   ebx,ebx
c0026ebc:	0f 85 9d 00 00 00    	jne    c0026f5f <__addsf3+0x2f9>
c0026ec2:	31 ff                	xor    edi,edi
c0026ec4:	e9 96 00 00 00       	jmp    c0026f5f <__addsf3+0x2f9>
c0026ec9:	85 db                	test   ebx,ebx
c0026ecb:	0f 84 8e 00 00 00    	je     c0026f5f <__addsf3+0x2f9>
c0026ed1:	89 d0                	mov    eax,edx
c0026ed3:	29 d8                	sub    eax,ebx
c0026ed5:	79 06                	jns    c0026edd <__addsf3+0x277>
c0026ed7:	89 d8                	mov    eax,ebx
c0026ed9:	29 d0                	sub    eax,edx
c0026edb:	eb 5a                	jmp    c0026f37 <__addsf3+0x2d1>
c0026edd:	bf 00 00 00 00       	mov    edi,0x0
c0026ee2:	74 7b                	je     c0026f5f <__addsf3+0x2f9>
c0026ee4:	eb 4a                	jmp    c0026f30 <__addsf3+0x2ca>
c0026ee6:	89 d0                	mov    eax,edx
c0026ee8:	29 d8                	sub    eax,ebx
c0026eea:	79 12                	jns    c0026efe <__addsf3+0x298>
c0026eec:	89 d8                	mov    eax,ebx
c0026eee:	29 d0                	sub    eax,edx
c0026ef0:	eb 09                	jmp    c0026efb <__addsf3+0x295>
c0026ef2:	85 c0                	test   eax,eax
c0026ef4:	79 41                	jns    c0026f37 <__addsf3+0x2d1>
c0026ef6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026efb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026efe:	31 f6                	xor    esi,esi
c0026f00:	85 c0                	test   eax,eax
c0026f02:	74 33                	je     c0026f37 <__addsf3+0x2d1>
c0026f04:	0f bd c8             	bsr    ecx,eax
c0026f07:	83 f1 1f             	xor    ecx,0x1f
c0026f0a:	d3 e0                	shl    eax,cl
c0026f0c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f10:	39 ca                	cmp    edx,ecx
c0026f12:	7f 10                	jg     c0026f24 <__addsf3+0x2be>
c0026f14:	29 d1                	sub    ecx,edx
c0026f16:	41                   	inc    ecx
c0026f17:	d3 e8                	shr    eax,cl
c0026f19:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f1c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f22:	eb 13                	jmp    c0026f37 <__addsf3+0x2d1>
c0026f24:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f27:	29 ce                	sub    esi,ecx
c0026f29:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f2e:	eb 07                	jmp    c0026f37 <__addsf3+0x2d1>
c0026f30:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f33:	eb 02                	jmp    c0026f37 <__addsf3+0x2d1>
c0026f35:	31 c0                	xor    eax,eax
c0026f37:	89 c2                	mov    edx,eax
c0026f39:	c1 ea 08             	shr    edx,0x8
c0026f3c:	a8 7f                	test   al,0x7f
c0026f3e:	0f 95 c1             	setne  cl
c0026f41:	09 d1                	or     ecx,edx
c0026f43:	83 e1 01             	and    ecx,0x1
c0026f46:	c1 e8 07             	shr    eax,0x7
c0026f49:	21 c8                	and    eax,ecx
c0026f4b:	c1 e6 17             	shl    esi,0x17
c0026f4e:	09 d6                	or     esi,edx
c0026f50:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f53:	eb 0a                	jmp    c0026f5f <__addsf3+0x2f9>
c0026f55:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f58:	eb 05                	jmp    c0026f5f <__addsf3+0x2f9>
c0026f5a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f5f:	89 f8                	mov    eax,edi
c0026f61:	5a                   	pop    edx
c0026f62:	59                   	pop    ecx
c0026f63:	5b                   	pop    ebx
c0026f64:	5e                   	pop    esi
c0026f65:	5f                   	pop    edi
c0026f66:	5d                   	pop    ebp
c0026f67:	c3                   	ret    

c0026f68 <__subsf3>:
c0026f68:	55                   	push   ebp
c0026f69:	89 e5                	mov    ebp,esp
c0026f6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f6e:	05 00 00 00 80       	add    eax,0x80000000
c0026f73:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f76:	5d                   	pop    ebp
c0026f77:	e9 ea fc ff ff       	jmp    c0026c66 <__addsf3>

c0026f7c <__negsf2>:
c0026f7c:	55                   	push   ebp
c0026f7d:	89 e5                	mov    ebp,esp
c0026f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f82:	05 00 00 00 80       	add    eax,0x80000000
c0026f87:	5d                   	pop    ebp
c0026f88:	c3                   	ret    

c0026f89 <__mulsf3>:
c0026f89:	55                   	push   ebp
c0026f8a:	89 e5                	mov    ebp,esp
c0026f8c:	57                   	push   edi
c0026f8d:	56                   	push   esi
c0026f8e:	53                   	push   ebx
c0026f8f:	83 ec 1c             	sub    esp,0x1c
c0026f92:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f95:	89 f0                	mov    eax,esi
c0026f97:	89 f1                	mov    ecx,esi
c0026f99:	c1 f9 17             	sar    ecx,0x17
c0026f9c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f9f:	c1 e0 08             	shl    eax,0x8
c0026fa2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fa7:	89 c1                	mov    ecx,eax
c0026fa9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026faf:	89 c7                	mov    edi,eax
c0026fb1:	c1 ff 17             	sar    edi,0x17
c0026fb4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fb8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fbb:	89 f8                	mov    eax,edi
c0026fbd:	0f b6 c0             	movzx  eax,al
c0026fc0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fc3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fc7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fca:	42                   	inc    edx
c0026fcb:	80 e2 fe             	and    dl,0xfe
c0026fce:	75 7b                	jne    c002704b <__mulsf3+0xc2>
c0026fd0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fd4:	74 54                	je     c002702a <__mulsf3+0xa1>
c0026fd6:	85 c9                	test   ecx,ecx
c0026fd8:	0f 85 64 01 00 00    	jne    c0027142 <__mulsf3+0x1b9>
c0026fde:	8d 57 01             	lea    edx,[edi+0x1]
c0026fe1:	80 e2 fe             	and    dl,0xfe
c0026fe4:	75 1f                	jne    c0027005 <__mulsf3+0x7c>
c0026fe6:	85 c0                	test   eax,eax
c0026fe8:	b8 00 00 00 00       	mov    eax,0x0
c0026fed:	74 29                	je     c0027018 <__mulsf3+0x8f>
c0026fef:	53                   	push   ebx
c0026ff0:	53                   	push   ebx
c0026ff1:	50                   	push   eax
c0026ff2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ff5:	e8 96 05 00 00       	call   c0027590 <__nesf2>
c0026ffa:	83 c4 10             	add    esp,0x10
c0026ffd:	85 c0                	test   eax,eax
c0026fff:	0f 85 3a 01 00 00    	jne    c002713f <__mulsf3+0x1b6>
c0027005:	85 ff                	test   edi,edi
c0027007:	0f 89 35 01 00 00    	jns    c0027142 <__mulsf3+0x1b9>
c002700d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027013:	e9 2a 01 00 00       	jmp    c0027142 <__mulsf3+0x1b9>
c0027018:	51                   	push   ecx
c0027019:	51                   	push   ecx
c002701a:	50                   	push   eax
c002701b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002701e:	e8 6d 05 00 00       	call   c0027590 <__nesf2>
c0027023:	83 c4 10             	add    esp,0x10
c0027026:	85 c0                	test   eax,eax
c0027028:	eb 15                	jmp    c002703f <__mulsf3+0xb6>
c002702a:	85 c9                	test   ecx,ecx
c002702c:	74 0b                	je     c0027039 <__mulsf3+0xb0>
c002702e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027031:	01 c9                	add    ecx,ecx
c0027033:	78 16                	js     c002704b <__mulsf3+0xc2>
c0027035:	89 d3                	mov    ebx,edx
c0027037:	eb f5                	jmp    c002702e <__mulsf3+0xa5>
c0027039:	89 f8                	mov    eax,edi
c002703b:	f7 d0                	not    eax
c002703d:	84 c0                	test   al,al
c002703f:	75 c4                	jne    c0027005 <__mulsf3+0x7c>
c0027041:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027046:	e9 f7 00 00 00       	jmp    c0027142 <__mulsf3+0x1b9>
c002704b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002704e:	c1 e6 08             	shl    esi,0x8
c0027051:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027057:	8d 57 01             	lea    edx,[edi+0x1]
c002705a:	80 e2 fe             	and    dl,0xfe
c002705d:	75 63                	jne    c00270c2 <__mulsf3+0x139>
c002705f:	85 c0                	test   eax,eax
c0027061:	74 2f                	je     c0027092 <__mulsf3+0x109>
c0027063:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027067:	0f 89 d2 00 00 00    	jns    c002713f <__mulsf3+0x1b6>
c002706d:	52                   	push   edx
c002706e:	52                   	push   edx
c002706f:	6a 00                	push   0x0
c0027071:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027074:	e8 dc 04 00 00       	call   c0027555 <__eqsf2>
c0027079:	83 c4 10             	add    esp,0x10
c002707c:	85 c0                	test   eax,eax
c002707e:	0f 85 bb 00 00 00    	jne    c002713f <__mulsf3+0x1b6>
c0027084:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027087:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002708d:	e9 b0 00 00 00       	jmp    c0027142 <__mulsf3+0x1b9>
c0027092:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027095:	50                   	push   eax
c0027096:	50                   	push   eax
c0027097:	6a 00                	push   0x0
c0027099:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002709c:	e8 b4 04 00 00       	call   c0027555 <__eqsf2>
c00270a1:	83 c4 10             	add    esp,0x10
c00270a4:	85 c0                	test   eax,eax
c00270a6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270a9:	75 0c                	jne    c00270b7 <__mulsf3+0x12e>
c00270ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270af:	0f 89 8a 00 00 00    	jns    c002713f <__mulsf3+0x1b6>
c00270b5:	eb cd                	jmp    c0027084 <__mulsf3+0xfb>
c00270b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270ba:	01 f6                	add    esi,esi
c00270bc:	78 04                	js     c00270c2 <__mulsf3+0x139>
c00270be:	89 c3                	mov    ebx,eax
c00270c0:	eb f5                	jmp    c00270b7 <__mulsf3+0x12e>
c00270c2:	89 c8                	mov    eax,ecx
c00270c4:	0d 00 00 00 80       	or     eax,0x80000000
c00270c9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270cf:	f7 e6                	mul    esi
c00270d1:	85 c0                	test   eax,eax
c00270d3:	0f 95 c0             	setne  al
c00270d6:	0f b6 c0             	movzx  eax,al
c00270d9:	09 c2                	or     edx,eax
c00270db:	78 03                	js     c00270e0 <__mulsf3+0x157>
c00270dd:	01 d2                	add    edx,edx
c00270df:	4b                   	dec    ebx
c00270e0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00270e6:	7f 22                	jg     c002710a <__mulsf3+0x181>
c00270e8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270ee:	85 db                	test   ebx,ebx
c00270f0:	7f 23                	jg     c0027115 <__mulsf3+0x18c>
c00270f2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270f5:	7c 1a                	jl     c0027111 <__mulsf3+0x188>
c00270f7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270fd:	b9 01 00 00 00       	mov    ecx,0x1
c0027102:	29 d9                	sub    ecx,ebx
c0027104:	d3 ea                	shr    edx,cl
c0027106:	31 db                	xor    ebx,ebx
c0027108:	eb 0b                	jmp    c0027115 <__mulsf3+0x18c>
c002710a:	bb ff 00 00 00       	mov    ebx,0xff
c002710f:	eb 02                	jmp    c0027113 <__mulsf3+0x18a>
c0027111:	31 db                	xor    ebx,ebx
c0027113:	31 d2                	xor    edx,edx
c0027115:	89 d0                	mov    eax,edx
c0027117:	c1 e8 08             	shr    eax,0x8
c002711a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002711d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027123:	09 fb                	or     ebx,edi
c0027125:	c1 e3 17             	shl    ebx,0x17
c0027128:	09 c3                	or     ebx,eax
c002712a:	f6 c2 7f             	test   dl,0x7f
c002712d:	0f 95 c1             	setne  cl
c0027130:	09 c8                	or     eax,ecx
c0027132:	83 e0 01             	and    eax,0x1
c0027135:	c1 ea 07             	shr    edx,0x7
c0027138:	21 c2                	and    edx,eax
c002713a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002713d:	eb 03                	jmp    c0027142 <__mulsf3+0x1b9>
c002713f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027142:	89 f0                	mov    eax,esi
c0027144:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027147:	5b                   	pop    ebx
c0027148:	5e                   	pop    esi
c0027149:	5f                   	pop    edi
c002714a:	5d                   	pop    ebp
c002714b:	c3                   	ret    

c002714c <__divsf3>:
c002714c:	55                   	push   ebp
c002714d:	89 e5                	mov    ebp,esp
c002714f:	57                   	push   edi
c0027150:	56                   	push   esi
c0027151:	53                   	push   ebx
c0027152:	83 ec 1c             	sub    esp,0x1c
c0027155:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027158:	89 d8                	mov    eax,ebx
c002715a:	89 d9                	mov    ecx,ebx
c002715c:	c1 f9 17             	sar    ecx,0x17
c002715f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027162:	c1 e0 08             	shl    eax,0x8
c0027165:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002716a:	89 c1                	mov    ecx,eax
c002716c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002716f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027172:	89 c7                	mov    edi,eax
c0027174:	c1 ff 17             	sar    edi,0x17
c0027177:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002717b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002717e:	89 f8                	mov    eax,edi
c0027180:	0f b6 c0             	movzx  eax,al
c0027183:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027186:	29 c6                	sub    esi,eax
c0027188:	83 c6 7f             	add    esi,0x7f
c002718b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002718e:	42                   	inc    edx
c002718f:	80 e2 fe             	and    dl,0xfe
c0027192:	0f 85 9c 00 00 00    	jne    c0027234 <__divsf3+0xe8>
c0027198:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002719c:	74 33                	je     c00271d1 <__divsf3+0x85>
c002719e:	85 c9                	test   ecx,ecx
c00271a0:	0f 85 c7 01 00 00    	jne    c002736d <__divsf3+0x221>
c00271a6:	8d 57 01             	lea    edx,[edi+0x1]
c00271a9:	80 e2 fe             	and    dl,0xfe
c00271ac:	75 2f                	jne    c00271dd <__divsf3+0x91>
c00271ae:	85 c0                	test   eax,eax
c00271b0:	74 2b                	je     c00271dd <__divsf3+0x91>
c00271b2:	51                   	push   ecx
c00271b3:	51                   	push   ecx
c00271b4:	6a 00                	push   0x0
c00271b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b9:	e8 d2 03 00 00       	call   c0027590 <__nesf2>
c00271be:	83 c4 10             	add    esp,0x10
c00271c1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271c4:	85 c0                	test   eax,eax
c00271c6:	0f 85 a1 01 00 00    	jne    c002736d <__divsf3+0x221>
c00271cc:	e9 92 01 00 00       	jmp    c0027363 <__divsf3+0x217>
c00271d1:	85 c9                	test   ecx,ecx
c00271d3:	75 1b                	jne    c00271f0 <__divsf3+0xa4>
c00271d5:	8d 57 01             	lea    edx,[edi+0x1]
c00271d8:	80 e2 fe             	and    dl,0xfe
c00271db:	74 1e                	je     c00271fb <__divsf3+0xaf>
c00271dd:	85 ff                	test   edi,edi
c00271df:	0f 89 88 01 00 00    	jns    c002736d <__divsf3+0x221>
c00271e5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271eb:	e9 7d 01 00 00       	jmp    c002736d <__divsf3+0x221>
c00271f0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271f3:	01 c9                	add    ecx,ecx
c00271f5:	78 3d                	js     c0027234 <__divsf3+0xe8>
c00271f7:	89 d6                	mov    esi,edx
c00271f9:	eb f5                	jmp    c00271f0 <__divsf3+0xa4>
c00271fb:	85 c0                	test   eax,eax
c00271fd:	b8 00 00 00 00       	mov    eax,0x0
c0027202:	74 18                	je     c002721c <__divsf3+0xd0>
c0027204:	52                   	push   edx
c0027205:	52                   	push   edx
c0027206:	50                   	push   eax
c0027207:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002720a:	e8 81 03 00 00       	call   c0027590 <__nesf2>
c002720f:	83 c4 10             	add    esp,0x10
c0027212:	85 c0                	test   eax,eax
c0027214:	0f 85 50 01 00 00    	jne    c002736a <__divsf3+0x21e>
c002721a:	eb c1                	jmp    c00271dd <__divsf3+0x91>
c002721c:	56                   	push   esi
c002721d:	56                   	push   esi
c002721e:	50                   	push   eax
c002721f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027222:	e8 69 03 00 00       	call   c0027590 <__nesf2>
c0027227:	83 c4 10             	add    esp,0x10
c002722a:	85 c0                	test   eax,eax
c002722c:	0f 84 31 01 00 00    	je     c0027363 <__divsf3+0x217>
c0027232:	eb a9                	jmp    c00271dd <__divsf3+0x91>
c0027234:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027237:	c1 e3 08             	shl    ebx,0x8
c002723a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027240:	8d 57 01             	lea    edx,[edi+0x1]
c0027243:	80 e2 fe             	and    dl,0xfe
c0027246:	75 71                	jne    c00272b9 <__divsf3+0x16d>
c0027248:	85 c0                	test   eax,eax
c002724a:	ba 00 00 00 00       	mov    edx,0x0
c002724f:	74 2f                	je     c0027280 <__divsf3+0x134>
c0027251:	51                   	push   ecx
c0027252:	51                   	push   ecx
c0027253:	52                   	push   edx
c0027254:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027257:	e8 f9 02 00 00       	call   c0027555 <__eqsf2>
c002725c:	83 c4 10             	add    esp,0x10
c002725f:	85 c0                	test   eax,eax
c0027261:	0f 85 03 01 00 00    	jne    c002736a <__divsf3+0x21e>
c0027267:	31 d2                	xor    edx,edx
c0027269:	89 d3                	mov    ebx,edx
c002726b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002726e:	31 f8                	xor    eax,edi
c0027270:	0f 89 f7 00 00 00    	jns    c002736d <__divsf3+0x221>
c0027276:	bb 00 00 00 80       	mov    ebx,0x80000000
c002727b:	e9 ed 00 00 00       	jmp    c002736d <__divsf3+0x221>
c0027280:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027283:	50                   	push   eax
c0027284:	50                   	push   eax
c0027285:	52                   	push   edx
c0027286:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027289:	e8 c7 02 00 00       	call   c0027555 <__eqsf2>
c002728e:	83 c4 10             	add    esp,0x10
c0027291:	85 c0                	test   eax,eax
c0027293:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027296:	75 16                	jne    c00272ae <__divsf3+0x162>
c0027298:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002729b:	31 fb                	xor    ebx,edi
c002729d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272a3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272a9:	e9 bf 00 00 00       	jmp    c002736d <__divsf3+0x221>
c00272ae:	8d 46 01             	lea    eax,[esi+0x1]
c00272b1:	01 db                	add    ebx,ebx
c00272b3:	78 04                	js     c00272b9 <__divsf3+0x16d>
c00272b5:	89 c6                	mov    esi,eax
c00272b7:	eb f5                	jmp    c00272ae <__divsf3+0x162>
c00272b9:	89 c8                	mov    eax,ecx
c00272bb:	0d 00 00 00 80       	or     eax,0x80000000
c00272c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272c6:	31 d2                	xor    edx,edx
c00272c8:	39 d8                	cmp    eax,ebx
c00272ca:	72 07                	jb     c00272d3 <__divsf3+0x187>
c00272cc:	29 d8                	sub    eax,ebx
c00272ce:	ba 01 00 00 00       	mov    edx,0x1
c00272d3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272da:	01 d2                	add    edx,edx
c00272dc:	89 c1                	mov    ecx,eax
c00272de:	01 c0                	add    eax,eax
c00272e0:	85 c9                	test   ecx,ecx
c00272e2:	78 04                	js     c00272e8 <__divsf3+0x19c>
c00272e4:	39 c3                	cmp    ebx,eax
c00272e6:	77 05                	ja     c00272ed <__divsf3+0x1a1>
c00272e8:	29 d8                	sub    eax,ebx
c00272ea:	83 ca 01             	or     edx,0x1
c00272ed:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272f0:	75 e8                	jne    c00272da <__divsf3+0x18e>
c00272f2:	85 c0                	test   eax,eax
c00272f4:	0f 95 c0             	setne  al
c00272f7:	0f b6 c0             	movzx  eax,al
c00272fa:	c1 e2 06             	shl    edx,0x6
c00272fd:	09 c2                	or     edx,eax
c00272ff:	78 03                	js     c0027304 <__divsf3+0x1b8>
c0027301:	01 d2                	add    edx,edx
c0027303:	4e                   	dec    esi
c0027304:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002730a:	7f 22                	jg     c002732e <__divsf3+0x1e2>
c002730c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027312:	85 f6                	test   esi,esi
c0027314:	7f 23                	jg     c0027339 <__divsf3+0x1ed>
c0027316:	83 fe e9             	cmp    esi,0xffffffe9
c0027319:	7c 1a                	jl     c0027335 <__divsf3+0x1e9>
c002731b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027321:	b9 01 00 00 00       	mov    ecx,0x1
c0027326:	29 f1                	sub    ecx,esi
c0027328:	d3 ea                	shr    edx,cl
c002732a:	31 f6                	xor    esi,esi
c002732c:	eb 0b                	jmp    c0027339 <__divsf3+0x1ed>
c002732e:	be ff 00 00 00       	mov    esi,0xff
c0027333:	eb 02                	jmp    c0027337 <__divsf3+0x1eb>
c0027335:	31 f6                	xor    esi,esi
c0027337:	31 d2                	xor    edx,edx
c0027339:	89 d0                	mov    eax,edx
c002733b:	c1 e8 08             	shr    eax,0x8
c002733e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027341:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027347:	09 fe                	or     esi,edi
c0027349:	c1 e6 17             	shl    esi,0x17
c002734c:	09 c6                	or     esi,eax
c002734e:	f6 c2 7f             	test   dl,0x7f
c0027351:	0f 95 c1             	setne  cl
c0027354:	09 c8                	or     eax,ecx
c0027356:	83 e0 01             	and    eax,0x1
c0027359:	c1 ea 07             	shr    edx,0x7
c002735c:	21 c2                	and    edx,eax
c002735e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027361:	eb 0a                	jmp    c002736d <__divsf3+0x221>
c0027363:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027368:	eb 03                	jmp    c002736d <__divsf3+0x221>
c002736a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002736d:	89 d8                	mov    eax,ebx
c002736f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027372:	5b                   	pop    ebx
c0027373:	5e                   	pop    esi
c0027374:	5f                   	pop    edi
c0027375:	5d                   	pop    ebp
c0027376:	c3                   	ret    

c0027377 <__floatsisf>:
c0027377:	55                   	push   ebp
c0027378:	89 e5                	mov    ebp,esp
c002737a:	53                   	push   ebx
c002737b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002737e:	85 d2                	test   edx,edx
c0027380:	7e 2b                	jle    c00273ad <__floatsisf+0x36>
c0027382:	0f bd ca             	bsr    ecx,edx
c0027385:	83 f1 1f             	xor    ecx,0x1f
c0027388:	d3 e2                	shl    edx,cl
c002738a:	89 d0                	mov    eax,edx
c002738c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027391:	89 c3                	mov    ebx,eax
c0027393:	c1 eb 08             	shr    ebx,0x8
c0027396:	80 e2 7f             	and    dl,0x7f
c0027399:	0f 95 c2             	setne  dl
c002739c:	09 da                	or     edx,ebx
c002739e:	83 e2 01             	and    edx,0x1
c00273a1:	c1 e8 07             	shr    eax,0x7
c00273a4:	21 c2                	and    edx,eax
c00273a6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273ab:	eb 32                	jmp    c00273df <__floatsisf+0x68>
c00273ad:	b8 00 00 00 00       	mov    eax,0x0
c00273b2:	74 34                	je     c00273e8 <__floatsisf+0x71>
c00273b4:	f7 da                	neg    edx
c00273b6:	0f bd ca             	bsr    ecx,edx
c00273b9:	83 f1 1f             	xor    ecx,0x1f
c00273bc:	d3 e2                	shl    edx,cl
c00273be:	89 d0                	mov    eax,edx
c00273c0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273c5:	89 c3                	mov    ebx,eax
c00273c7:	c1 eb 08             	shr    ebx,0x8
c00273ca:	80 e2 7f             	and    dl,0x7f
c00273cd:	0f 95 c2             	setne  dl
c00273d0:	09 da                	or     edx,ebx
c00273d2:	83 e2 01             	and    edx,0x1
c00273d5:	c1 e8 07             	shr    eax,0x7
c00273d8:	21 c2                	and    edx,eax
c00273da:	b8 9e 01 00 00       	mov    eax,0x19e
c00273df:	29 c8                	sub    eax,ecx
c00273e1:	c1 e0 17             	shl    eax,0x17
c00273e4:	09 d8                	or     eax,ebx
c00273e6:	01 d0                	add    eax,edx
c00273e8:	5b                   	pop    ebx
c00273e9:	5d                   	pop    ebp
c00273ea:	c3                   	ret    

c00273eb <__floatunsisf>:
c00273eb:	55                   	push   ebp
c00273ec:	89 e5                	mov    ebp,esp
c00273ee:	53                   	push   ebx
c00273ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273f2:	31 c0                	xor    eax,eax
c00273f4:	85 d2                	test   edx,edx
c00273f6:	74 32                	je     c002742a <__floatunsisf+0x3f>
c00273f8:	0f bd ca             	bsr    ecx,edx
c00273fb:	83 f1 1f             	xor    ecx,0x1f
c00273fe:	d3 e2                	shl    edx,cl
c0027400:	89 d0                	mov    eax,edx
c0027402:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027407:	89 c3                	mov    ebx,eax
c0027409:	c1 eb 08             	shr    ebx,0x8
c002740c:	80 e2 7f             	and    dl,0x7f
c002740f:	0f 95 c2             	setne  dl
c0027412:	09 da                	or     edx,ebx
c0027414:	83 e2 01             	and    edx,0x1
c0027417:	c1 e8 07             	shr    eax,0x7
c002741a:	21 c2                	and    edx,eax
c002741c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027421:	29 c8                	sub    eax,ecx
c0027423:	c1 e0 17             	shl    eax,0x17
c0027426:	09 d8                	or     eax,ebx
c0027428:	01 d0                	add    eax,edx
c002742a:	5b                   	pop    ebx
c002742b:	5d                   	pop    ebp
c002742c:	c3                   	ret    

c002742d <__fixsfsi>:
c002742d:	55                   	push   ebp
c002742e:	89 e5                	mov    ebp,esp
c0027430:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027433:	89 d1                	mov    ecx,edx
c0027435:	c1 e1 08             	shl    ecx,0x8
c0027438:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002743e:	c1 fa 17             	sar    edx,0x17
c0027441:	78 1c                	js     c002745f <__fixsfsi+0x32>
c0027443:	83 ea 7f             	sub    edx,0x7f
c0027446:	31 c0                	xor    eax,eax
c0027448:	83 fa 1e             	cmp    edx,0x1e
c002744b:	77 40                	ja     c002748d <__fixsfsi+0x60>
c002744d:	89 c8                	mov    eax,ecx
c002744f:	0d 00 00 00 80       	or     eax,0x80000000
c0027454:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027459:	29 d1                	sub    ecx,edx
c002745b:	d3 e8                	shr    eax,cl
c002745d:	eb 2e                	jmp    c002748d <__fixsfsi+0x60>
c002745f:	31 c0                	xor    eax,eax
c0027461:	81 c2 81 00 00 00    	add    edx,0x81
c0027467:	78 24                	js     c002748d <__fixsfsi+0x60>
c0027469:	83 fa 1e             	cmp    edx,0x1e
c002746c:	7e 09                	jle    c0027477 <__fixsfsi+0x4a>
c002746e:	83 fa 1f             	cmp    edx,0x1f
c0027471:	75 18                	jne    c002748b <__fixsfsi+0x5e>
c0027473:	85 c9                	test   ecx,ecx
c0027475:	75 14                	jne    c002748b <__fixsfsi+0x5e>
c0027477:	89 c8                	mov    eax,ecx
c0027479:	0d 00 00 00 80       	or     eax,0x80000000
c002747e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027483:	29 d1                	sub    ecx,edx
c0027485:	d3 e8                	shr    eax,cl
c0027487:	f7 d8                	neg    eax
c0027489:	eb 02                	jmp    c002748d <__fixsfsi+0x60>
c002748b:	31 c0                	xor    eax,eax
c002748d:	5d                   	pop    ebp
c002748e:	c3                   	ret    

c002748f <__fixunssfsi>:
c002748f:	55                   	push   ebp
c0027490:	89 e5                	mov    ebp,esp
c0027492:	53                   	push   ebx
c0027493:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027496:	89 d3                	mov    ebx,edx
c0027498:	c1 fb 17             	sar    ebx,0x17
c002749b:	83 eb 7f             	sub    ebx,0x7f
c002749e:	31 c0                	xor    eax,eax
c00274a0:	83 fb 1f             	cmp    ebx,0x1f
c00274a3:	77 18                	ja     c00274bd <__fixunssfsi+0x2e>
c00274a5:	89 d0                	mov    eax,edx
c00274a7:	c1 e0 08             	shl    eax,0x8
c00274aa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274af:	0d 00 00 00 80       	or     eax,0x80000000
c00274b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274b9:	29 d9                	sub    ecx,ebx
c00274bb:	d3 e8                	shr    eax,cl
c00274bd:	5b                   	pop    ebx
c00274be:	5d                   	pop    ebp
c00274bf:	c3                   	ret    

c00274c0 <__cmpsf2>:
c00274c0:	55                   	push   ebp
c00274c1:	89 e5                	mov    ebp,esp
c00274c3:	57                   	push   edi
c00274c4:	56                   	push   esi
c00274c5:	53                   	push   ebx
c00274c6:	83 ec 24             	sub    esp,0x24
c00274c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274cf:	e8 4f 10 00 00       	call   c0028523 <__truncdfsf2>
c00274d4:	5a                   	pop    edx
c00274d5:	59                   	pop    ecx
c00274d6:	89 c3                	mov    ebx,eax
c00274d8:	c1 e8 17             	shr    eax,0x17
c00274db:	0f b6 f0             	movzx  esi,al
c00274de:	89 d8                	mov    eax,ebx
c00274e0:	c1 e8 1f             	shr    eax,0x1f
c00274e3:	31 c6                	xor    esi,eax
c00274e5:	c1 e3 08             	shl    ebx,0x8
c00274e8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274eb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274ee:	e8 30 10 00 00       	call   c0028523 <__truncdfsf2>
c00274f3:	83 c4 10             	add    esp,0x10
c00274f6:	89 c1                	mov    ecx,eax
c00274f8:	c1 e9 17             	shr    ecx,0x17
c00274fb:	0f b6 c9             	movzx  ecx,cl
c00274fe:	89 c7                	mov    edi,eax
c0027500:	c1 ef 1f             	shr    edi,0x1f
c0027503:	89 ca                	mov    edx,ecx
c0027505:	31 fa                	xor    edx,edi
c0027507:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002750a:	c1 e0 08             	shl    eax,0x8
c002750d:	89 c2                	mov    edx,eax
c002750f:	89 d8                	mov    eax,ebx
c0027511:	09 d0                	or     eax,edx
c0027513:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027518:	09 f0                	or     eax,esi
c002751a:	75 08                	jne    c0027524 <__cmpsf2+0x64>
c002751c:	31 c0                	xor    eax,eax
c002751e:	39 f9                	cmp    ecx,edi
c0027520:	75 0c                	jne    c002752e <__cmpsf2+0x6e>
c0027522:	eb 29                	jmp    c002754d <__cmpsf2+0x8d>
c0027524:	b8 01 00 00 00       	mov    eax,0x1
c0027529:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002752c:	7f 1f                	jg     c002754d <__cmpsf2+0x8d>
c002752e:	83 c8 ff             	or     eax,0xffffffff
c0027531:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027534:	7c 17                	jl     c002754d <__cmpsf2+0x8d>
c0027536:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002753c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027542:	b8 01 00 00 00       	mov    eax,0x1
c0027547:	39 d3                	cmp    ebx,edx
c0027549:	77 02                	ja     c002754d <__cmpsf2+0x8d>
c002754b:	19 c0                	sbb    eax,eax
c002754d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027550:	5b                   	pop    ebx
c0027551:	5e                   	pop    esi
c0027552:	5f                   	pop    edi
c0027553:	5d                   	pop    ebp
c0027554:	c3                   	ret    

c0027555 <__eqsf2>:
c0027555:	55                   	push   ebp
c0027556:	89 e5                	mov    ebp,esp
c0027558:	83 ec 24             	sub    esp,0x24
c002755b:	6a 01                	push   0x1
c002755d:	83 ec 0c             	sub    esp,0xc
c0027560:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027563:	e8 df 10 00 00       	call   c0028647 <__extendsfdf2>
c0027568:	83 c4 10             	add    esp,0x10
c002756b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002756e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027571:	52                   	push   edx
c0027572:	50                   	push   eax
c0027573:	50                   	push   eax
c0027574:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027577:	e8 cb 10 00 00       	call   c0028647 <__extendsfdf2>
c002757c:	59                   	pop    ecx
c002757d:	59                   	pop    ecx
c002757e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027581:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027584:	52                   	push   edx
c0027585:	50                   	push   eax
c0027586:	e8 35 ff ff ff       	call   c00274c0 <__cmpsf2>
c002758b:	83 c4 20             	add    esp,0x20
c002758e:	c9                   	leave  
c002758f:	c3                   	ret    

c0027590 <__nesf2>:
c0027590:	eb c3                	jmp    c0027555 <__eqsf2>

c0027592 <__gtsf2>:
c0027592:	55                   	push   ebp
c0027593:	89 e5                	mov    ebp,esp
c0027595:	83 ec 24             	sub    esp,0x24
c0027598:	6a ff                	push   0xffffffff
c002759a:	83 ec 0c             	sub    esp,0xc
c002759d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275a0:	e8 a2 10 00 00       	call   c0028647 <__extendsfdf2>
c00275a5:	83 c4 10             	add    esp,0x10
c00275a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275ae:	52                   	push   edx
c00275af:	50                   	push   eax
c00275b0:	50                   	push   eax
c00275b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275b4:	e8 8e 10 00 00       	call   c0028647 <__extendsfdf2>
c00275b9:	59                   	pop    ecx
c00275ba:	59                   	pop    ecx
c00275bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275c1:	52                   	push   edx
c00275c2:	50                   	push   eax
c00275c3:	e8 f8 fe ff ff       	call   c00274c0 <__cmpsf2>
c00275c8:	83 c4 20             	add    esp,0x20
c00275cb:	c9                   	leave  
c00275cc:	c3                   	ret    

c00275cd <__gesf2>:
c00275cd:	eb c3                	jmp    c0027592 <__gtsf2>

c00275cf <__ltsf2>:
c00275cf:	eb 84                	jmp    c0027555 <__eqsf2>

c00275d1 <__lesf2>:
c00275d1:	eb 82                	jmp    c0027555 <__eqsf2>

c00275d3 <__adddf3>:
c00275d3:	55                   	push   ebp
c00275d4:	89 e5                	mov    ebp,esp
c00275d6:	57                   	push   edi
c00275d7:	56                   	push   esi
c00275d8:	53                   	push   ebx
c00275d9:	83 ec 24             	sub    esp,0x24
c00275dc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275df:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00275e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275eb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275ee:	89 c8                	mov    eax,ecx
c00275f0:	89 ce                	mov    esi,ecx
c00275f2:	c1 fe 14             	sar    esi,0x14
c00275f5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275f8:	89 fb                	mov    ebx,edi
c00275fa:	89 fa                	mov    edx,edi
c00275fc:	c1 e2 0b             	shl    edx,0xb
c00275ff:	c1 e0 0b             	shl    eax,0xb
c0027602:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027607:	c1 eb 15             	shr    ebx,0x15
c002760a:	09 d8                	or     eax,ebx
c002760c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002760f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027612:	c1 fe 14             	sar    esi,0x14
c0027615:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027618:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002761b:	89 f3                	mov    ebx,esi
c002761d:	c1 e3 0b             	shl    ebx,0xb
c0027620:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027623:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027626:	c1 e3 0b             	shl    ebx,0xb
c0027629:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002762f:	c1 ee 15             	shr    esi,0x15
c0027632:	09 f3                	or     ebx,esi
c0027634:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027637:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002763a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002763d:	0f 88 5f 02 00 00    	js     c00278a2 <__adddf3+0x2cf>
c0027643:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027646:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027649:	85 db                	test   ebx,ebx
c002764b:	0f 8e c7 00 00 00    	jle    c0027718 <__adddf3+0x145>
c0027651:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027658:	75 1a                	jne    c0027674 <__adddf3+0xa1>
c002765a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002765d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027660:	0f 84 b2 05 00 00    	je     c0027c18 <__adddf3+0x645>
c0027666:	4b                   	dec    ebx
c0027667:	75 23                	jne    c002768c <__adddf3+0xb9>
c0027669:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002766c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002766f:	e9 99 00 00 00       	jmp    c002770d <__adddf3+0x13a>
c0027674:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027677:	f7 d6                	not    esi
c0027679:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002767f:	0f 84 93 05 00 00    	je     c0027c18 <__adddf3+0x645>
c0027685:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002768c:	83 fb 1f             	cmp    ebx,0x1f
c002768f:	7e 42                	jle    c00276d3 <__adddf3+0x100>
c0027691:	83 fb 3f             	cmp    ebx,0x3f
c0027694:	0f 8f 7e 05 00 00    	jg     c0027c18 <__adddf3+0x645>
c002769a:	83 e3 1f             	and    ebx,0x1f
c002769d:	89 d9                	mov    ecx,ebx
c002769f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276a2:	d3 ef                	shr    edi,cl
c00276a4:	31 db                	xor    ebx,ebx
c00276a6:	85 c9                	test   ecx,ecx
c00276a8:	74 15                	je     c00276bf <__adddf3+0xec>
c00276aa:	be 20 00 00 00       	mov    esi,0x20
c00276af:	29 ce                	sub    esi,ecx
c00276b1:	89 f1                	mov    ecx,esi
c00276b3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276b6:	d3 e6                	shl    esi,cl
c00276b8:	31 db                	xor    ebx,ebx
c00276ba:	85 f6                	test   esi,esi
c00276bc:	0f 95 c3             	setne  bl
c00276bf:	31 c9                	xor    ecx,ecx
c00276c1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276c5:	0f 95 c1             	setne  cl
c00276c8:	09 cf                	or     edi,ecx
c00276ca:	09 fb                	or     ebx,edi
c00276cc:	01 da                	add    edx,ebx
c00276ce:	83 d0 00             	adc    eax,0x0
c00276d1:	eb 3a                	jmp    c002770d <__adddf3+0x13a>
c00276d3:	bf 20 00 00 00       	mov    edi,0x20
c00276d8:	29 df                	sub    edi,ebx
c00276da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276e3:	d3 e6                	shl    esi,cl
c00276e5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276e8:	88 d9                	mov    cl,bl
c00276ea:	d3 ef                	shr    edi,cl
c00276ec:	09 fe                	or     esi,edi
c00276ee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276f1:	88 d9                	mov    cl,bl
c00276f3:	d3 ef                	shr    edi,cl
c00276f5:	89 fb                	mov    ebx,edi
c00276f7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276fa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276fd:	d3 e7                	shl    edi,cl
c00276ff:	85 ff                	test   edi,edi
c0027701:	0f 95 c1             	setne  cl
c0027704:	0f b6 c9             	movzx  ecx,cl
c0027707:	09 ce                	or     esi,ecx
c0027709:	01 f2                	add    edx,esi
c002770b:	11 d8                	adc    eax,ebx
c002770d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027710:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027713:	e9 52 01 00 00       	jmp    c002786a <__adddf3+0x297>
c0027718:	0f 84 d5 00 00 00    	je     c00277f3 <__adddf3+0x220>
c002771e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027721:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027724:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027727:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002772a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027731:	75 20                	jne    c0027753 <__adddf3+0x180>
c0027733:	89 d6                	mov    esi,edx
c0027735:	09 c6                	or     esi,eax
c0027737:	0f 84 db 04 00 00    	je     c0027c18 <__adddf3+0x645>
c002773d:	4b                   	dec    ebx
c002773e:	75 29                	jne    c0027769 <__adddf3+0x196>
c0027740:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027743:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027746:	01 d1                	add    ecx,edx
c0027748:	11 c6                	adc    esi,eax
c002774a:	89 f0                	mov    eax,esi
c002774c:	89 ca                	mov    edx,ecx
c002774e:	e9 17 01 00 00       	jmp    c002786a <__adddf3+0x297>
c0027753:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027756:	f7 d6                	not    esi
c0027758:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002775e:	0f 84 b4 04 00 00    	je     c0027c18 <__adddf3+0x645>
c0027764:	0d 00 00 00 80       	or     eax,0x80000000
c0027769:	83 fb 1f             	cmp    ebx,0x1f
c002776c:	7e 48                	jle    c00277b6 <__adddf3+0x1e3>
c002776e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027771:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027774:	83 fb 3f             	cmp    ebx,0x3f
c0027777:	0f 8f 9b 04 00 00    	jg     c0027c18 <__adddf3+0x645>
c002777d:	83 e3 1f             	and    ebx,0x1f
c0027780:	89 d9                	mov    ecx,ebx
c0027782:	89 c7                	mov    edi,eax
c0027784:	d3 ef                	shr    edi,cl
c0027786:	31 db                	xor    ebx,ebx
c0027788:	85 c9                	test   ecx,ecx
c002778a:	74 12                	je     c002779e <__adddf3+0x1cb>
c002778c:	be 20 00 00 00       	mov    esi,0x20
c0027791:	29 ce                	sub    esi,ecx
c0027793:	89 f1                	mov    ecx,esi
c0027795:	d3 e0                	shl    eax,cl
c0027797:	31 db                	xor    ebx,ebx
c0027799:	85 c0                	test   eax,eax
c002779b:	0f 95 c3             	setne  bl
c002779e:	31 c0                	xor    eax,eax
c00277a0:	85 d2                	test   edx,edx
c00277a2:	0f 95 c0             	setne  al
c00277a5:	09 c7                	or     edi,eax
c00277a7:	09 fb                	or     ebx,edi
c00277a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277ac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277af:	01 da                	add    edx,ebx
c00277b1:	83 d6 00             	adc    esi,0x0
c00277b4:	eb 39                	jmp    c00277ef <__adddf3+0x21c>
c00277b6:	be 20 00 00 00       	mov    esi,0x20
c00277bb:	29 de                	sub    esi,ebx
c00277bd:	89 c7                	mov    edi,eax
c00277bf:	89 f1                	mov    ecx,esi
c00277c1:	d3 e7                	shl    edi,cl
c00277c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277c6:	89 d7                	mov    edi,edx
c00277c8:	88 d9                	mov    cl,bl
c00277ca:	d3 ef                	shr    edi,cl
c00277cc:	89 f9                	mov    ecx,edi
c00277ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277d1:	09 cf                	or     edi,ecx
c00277d3:	88 d9                	mov    cl,bl
c00277d5:	d3 e8                	shr    eax,cl
c00277d7:	89 f1                	mov    ecx,esi
c00277d9:	d3 e2                	shl    edx,cl
c00277db:	85 d2                	test   edx,edx
c00277dd:	0f 95 c2             	setne  dl
c00277e0:	0f b6 d2             	movzx  edx,dl
c00277e3:	09 d7                	or     edi,edx
c00277e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277eb:	01 fa                	add    edx,edi
c00277ed:	11 c6                	adc    esi,eax
c00277ef:	89 f0                	mov    eax,esi
c00277f1:	eb 77                	jmp    c002786a <__adddf3+0x297>
c00277f3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277f6:	46                   	inc    esi
c00277f7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277fa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027800:	75 41                	jne    c0027843 <__adddf3+0x270>
c0027802:	89 d3                	mov    ebx,edx
c0027804:	09 c3                	or     ebx,eax
c0027806:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002780d:	75 27                	jne    c0027836 <__adddf3+0x263>
c002780f:	85 db                	test   ebx,ebx
c0027811:	0f 84 fb 03 00 00    	je     c0027c12 <__adddf3+0x63f>
c0027817:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002781a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002781d:	0f 84 f5 03 00 00    	je     c0027c18 <__adddf3+0x645>
c0027823:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027826:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027829:	85 c0                	test   eax,eax
c002782b:	0f 89 91 03 00 00    	jns    c0027bc2 <__adddf3+0x5ef>
c0027831:	e9 85 03 00 00       	jmp    c0027bbb <__adddf3+0x5e8>
c0027836:	85 db                	test   ebx,ebx
c0027838:	0f 85 da 03 00 00    	jne    c0027c18 <__adddf3+0x645>
c002783e:	e9 cf 03 00 00       	jmp    c0027c12 <__adddf3+0x63f>
c0027843:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027846:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027849:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002784c:	f7 d1                	not    ecx
c002784e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027854:	0f 84 70 03 00 00    	je     c0027bca <__adddf3+0x5f7>
c002785a:	d1 ea                	shr    edx,1
c002785c:	89 c1                	mov    ecx,eax
c002785e:	c1 e1 1f             	shl    ecx,0x1f
c0027861:	09 ca                	or     edx,ecx
c0027863:	d1 e8                	shr    eax,1
c0027865:	e9 6f 03 00 00       	jmp    c0027bd9 <__adddf3+0x606>
c002786a:	85 c0                	test   eax,eax
c002786c:	0f 89 67 03 00 00    	jns    c0027bd9 <__adddf3+0x606>
c0027872:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027875:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027878:	f7 d1                	not    ecx
c002787a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027880:	0f 84 44 03 00 00    	je     c0027bca <__adddf3+0x5f7>
c0027886:	89 d1                	mov    ecx,edx
c0027888:	d1 e9                	shr    ecx,1
c002788a:	83 e2 01             	and    edx,0x1
c002788d:	09 ca                	or     edx,ecx
c002788f:	89 c1                	mov    ecx,eax
c0027891:	c1 e1 1f             	shl    ecx,0x1f
c0027894:	09 ca                	or     edx,ecx
c0027896:	d1 e8                	shr    eax,1
c0027898:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002789d:	e9 37 03 00 00       	jmp    c0027bd9 <__adddf3+0x606>
c00278a2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278a5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278ab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278b1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278b7:	29 de                	sub    esi,ebx
c00278b9:	85 f6                	test   esi,esi
c00278bb:	0f 8e bd 00 00 00    	jle    c002797e <__adddf3+0x3ab>
c00278c1:	85 db                	test   ebx,ebx
c00278c3:	75 17                	jne    c00278dc <__adddf3+0x309>
c00278c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278cb:	0f 84 47 03 00 00    	je     c0027c18 <__adddf3+0x645>
c00278d1:	4e                   	dec    esi
c00278d2:	75 20                	jne    c00278f4 <__adddf3+0x321>
c00278d4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278d7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278da:	eb 5b                	jmp    c0027937 <__adddf3+0x364>
c00278dc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278df:	f7 d3                	not    ebx
c00278e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278e7:	0f 84 2b 03 00 00    	je     c0027c18 <__adddf3+0x645>
c00278ed:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278f4:	83 fe 1f             	cmp    esi,0x1f
c00278f7:	7e 49                	jle    c0027942 <__adddf3+0x36f>
c00278f9:	83 fe 3f             	cmp    esi,0x3f
c00278fc:	0f 8f 16 03 00 00    	jg     c0027c18 <__adddf3+0x645>
c0027902:	83 e6 1f             	and    esi,0x1f
c0027905:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027908:	89 f1                	mov    ecx,esi
c002790a:	d3 ef                	shr    edi,cl
c002790c:	31 db                	xor    ebx,ebx
c002790e:	85 f6                	test   esi,esi
c0027910:	74 13                	je     c0027925 <__adddf3+0x352>
c0027912:	b9 20 00 00 00       	mov    ecx,0x20
c0027917:	29 f1                	sub    ecx,esi
c0027919:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002791c:	d3 e6                	shl    esi,cl
c002791e:	31 db                	xor    ebx,ebx
c0027920:	85 f6                	test   esi,esi
c0027922:	0f 95 c3             	setne  bl
c0027925:	31 c9                	xor    ecx,ecx
c0027927:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002792b:	0f 95 c1             	setne  cl
c002792e:	09 cf                	or     edi,ecx
c0027930:	09 fb                	or     ebx,edi
c0027932:	29 da                	sub    edx,ebx
c0027934:	83 d8 00             	sbb    eax,0x0
c0027937:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002793a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002793d:	e9 aa 01 00 00       	jmp    c0027aec <__adddf3+0x519>
c0027942:	bf 20 00 00 00       	mov    edi,0x20
c0027947:	29 f7                	sub    edi,esi
c0027949:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002794c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002794f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027952:	d3 e3                	shl    ebx,cl
c0027954:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027957:	89 f1                	mov    ecx,esi
c0027959:	d3 ef                	shr    edi,cl
c002795b:	09 fb                	or     ebx,edi
c002795d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027960:	89 f1                	mov    ecx,esi
c0027962:	d3 ef                	shr    edi,cl
c0027964:	89 fe                	mov    esi,edi
c0027966:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027969:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002796c:	d3 e7                	shl    edi,cl
c002796e:	85 ff                	test   edi,edi
c0027970:	0f 95 c1             	setne  cl
c0027973:	0f b6 c9             	movzx  ecx,cl
c0027976:	09 cb                	or     ebx,ecx
c0027978:	29 da                	sub    edx,ebx
c002797a:	19 f0                	sbb    eax,esi
c002797c:	eb b9                	jmp    c0027937 <__adddf3+0x364>
c002797e:	0f 84 cd 00 00 00    	je     c0027a51 <__adddf3+0x47e>
c0027984:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027987:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002798a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002798d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027991:	75 1b                	jne    c00279ae <__adddf3+0x3db>
c0027993:	89 d6                	mov    esi,edx
c0027995:	09 c6                	or     esi,eax
c0027997:	0f 84 7b 02 00 00    	je     c0027c18 <__adddf3+0x645>
c002799d:	4b                   	dec    ebx
c002799e:	75 24                	jne    c00279c4 <__adddf3+0x3f1>
c00279a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279a6:	29 d1                	sub    ecx,edx
c00279a8:	19 c6                	sbb    esi,eax
c00279aa:	89 ca                	mov    edx,ecx
c00279ac:	eb 61                	jmp    c0027a0f <__adddf3+0x43c>
c00279ae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279b1:	f7 d6                	not    esi
c00279b3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279b9:	0f 84 59 02 00 00    	je     c0027c18 <__adddf3+0x645>
c00279bf:	0d 00 00 00 80       	or     eax,0x80000000
c00279c4:	83 fb 1f             	cmp    ebx,0x1f
c00279c7:	7e 4d                	jle    c0027a16 <__adddf3+0x443>
c00279c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279cf:	83 fb 3f             	cmp    ebx,0x3f
c00279d2:	0f 8f 40 02 00 00    	jg     c0027c18 <__adddf3+0x645>
c00279d8:	83 e3 1f             	and    ebx,0x1f
c00279db:	89 d9                	mov    ecx,ebx
c00279dd:	89 c7                	mov    edi,eax
c00279df:	d3 ef                	shr    edi,cl
c00279e1:	31 db                	xor    ebx,ebx
c00279e3:	85 c9                	test   ecx,ecx
c00279e5:	74 12                	je     c00279f9 <__adddf3+0x426>
c00279e7:	be 20 00 00 00       	mov    esi,0x20
c00279ec:	29 ce                	sub    esi,ecx
c00279ee:	89 f1                	mov    ecx,esi
c00279f0:	d3 e0                	shl    eax,cl
c00279f2:	31 db                	xor    ebx,ebx
c00279f4:	85 c0                	test   eax,eax
c00279f6:	0f 95 c3             	setne  bl
c00279f9:	31 c0                	xor    eax,eax
c00279fb:	85 d2                	test   edx,edx
c00279fd:	0f 95 c0             	setne  al
c0027a00:	09 c7                	or     edi,eax
c0027a02:	09 fb                	or     ebx,edi
c0027a04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a07:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a0a:	29 da                	sub    edx,ebx
c0027a0c:	83 de 00             	sbb    esi,0x0
c0027a0f:	89 f0                	mov    eax,esi
c0027a11:	e9 d6 00 00 00       	jmp    c0027aec <__adddf3+0x519>
c0027a16:	be 20 00 00 00       	mov    esi,0x20
c0027a1b:	29 de                	sub    esi,ebx
c0027a1d:	89 c7                	mov    edi,eax
c0027a1f:	89 f1                	mov    ecx,esi
c0027a21:	d3 e7                	shl    edi,cl
c0027a23:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a26:	89 d7                	mov    edi,edx
c0027a28:	88 d9                	mov    cl,bl
c0027a2a:	d3 ef                	shr    edi,cl
c0027a2c:	89 f9                	mov    ecx,edi
c0027a2e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a31:	09 cf                	or     edi,ecx
c0027a33:	88 d9                	mov    cl,bl
c0027a35:	d3 e8                	shr    eax,cl
c0027a37:	89 f1                	mov    ecx,esi
c0027a39:	d3 e2                	shl    edx,cl
c0027a3b:	85 d2                	test   edx,edx
c0027a3d:	0f 95 c2             	setne  dl
c0027a40:	0f b6 d2             	movzx  edx,dl
c0027a43:	09 d7                	or     edi,edx
c0027a45:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a48:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a4b:	29 fa                	sub    edx,edi
c0027a4d:	19 c6                	sbb    esi,eax
c0027a4f:	eb be                	jmp    c0027a0f <__adddf3+0x43c>
c0027a51:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a54:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a57:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a5d:	75 6a                	jne    c0027ac9 <__adddf3+0x4f6>
c0027a5f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a63:	75 58                	jne    c0027abd <__adddf3+0x4ea>
c0027a65:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a68:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a6b:	89 d6                	mov    esi,edx
c0027a6d:	09 c6                	or     esi,eax
c0027a6f:	75 17                	jne    c0027a88 <__adddf3+0x4b5>
c0027a71:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a74:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a77:	85 db                	test   ebx,ebx
c0027a79:	0f 85 99 01 00 00    	jne    c0027c18 <__adddf3+0x645>
c0027a7f:	31 ff                	xor    edi,edi
c0027a81:	31 c9                	xor    ecx,ecx
c0027a83:	e9 90 01 00 00       	jmp    c0027c18 <__adddf3+0x645>
c0027a88:	85 db                	test   ebx,ebx
c0027a8a:	0f 84 88 01 00 00    	je     c0027c18 <__adddf3+0x645>
c0027a90:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a93:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a96:	85 c0                	test   eax,eax
c0027a98:	79 10                	jns    c0027aaa <__adddf3+0x4d7>
c0027a9a:	31 c9                	xor    ecx,ecx
c0027a9c:	f7 da                	neg    edx
c0027a9e:	0f 95 c1             	setne  cl
c0027aa1:	01 c8                	add    eax,ecx
c0027aa3:	f7 d8                	neg    eax
c0027aa5:	e9 2f 01 00 00       	jmp    c0027bd9 <__adddf3+0x606>
c0027aaa:	31 ff                	xor    edi,edi
c0027aac:	31 c9                	xor    ecx,ecx
c0027aae:	89 c3                	mov    ebx,eax
c0027ab0:	09 d3                	or     ebx,edx
c0027ab2:	0f 84 60 01 00 00    	je     c0027c18 <__adddf3+0x645>
c0027ab8:	e9 05 01 00 00       	jmp    c0027bc2 <__adddf3+0x5ef>
c0027abd:	31 ff                	xor    edi,edi
c0027abf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ac4:	e9 4f 01 00 00       	jmp    c0027c18 <__adddf3+0x645>
c0027ac9:	89 c1                	mov    ecx,eax
c0027acb:	89 d0                	mov    eax,edx
c0027acd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027ad0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027ad3:	89 ca                	mov    edx,ecx
c0027ad5:	85 c9                	test   ecx,ecx
c0027ad7:	79 2c                	jns    c0027b05 <__adddf3+0x532>
c0027ad9:	31 c9                	xor    ecx,ecx
c0027adb:	f7 d8                	neg    eax
c0027add:	0f 95 c1             	setne  cl
c0027ae0:	01 ca                	add    edx,ecx
c0027ae2:	f7 da                	neg    edx
c0027ae4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ae7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027aea:	eb 19                	jmp    c0027b05 <__adddf3+0x532>
c0027aec:	85 c0                	test   eax,eax
c0027aee:	0f 89 e5 00 00 00    	jns    c0027bd9 <__adddf3+0x606>
c0027af4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027af9:	89 c1                	mov    ecx,eax
c0027afb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027afe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b01:	89 d0                	mov    eax,edx
c0027b03:	89 ca                	mov    edx,ecx
c0027b05:	85 d2                	test   edx,edx
c0027b07:	74 59                	je     c0027b62 <__adddf3+0x58f>
c0027b09:	0f bd da             	bsr    ebx,edx
c0027b0c:	83 f3 1f             	xor    ebx,0x1f
c0027b0f:	88 d9                	mov    cl,bl
c0027b11:	d3 e2                	shl    edx,cl
c0027b13:	bf 20 00 00 00       	mov    edi,0x20
c0027b18:	89 f9                	mov    ecx,edi
c0027b1a:	29 d9                	sub    ecx,ebx
c0027b1c:	89 c6                	mov    esi,eax
c0027b1e:	d3 ee                	shr    esi,cl
c0027b20:	09 d6                	or     esi,edx
c0027b22:	88 d9                	mov    cl,bl
c0027b24:	d3 e0                	shl    eax,cl
c0027b26:	89 c2                	mov    edx,eax
c0027b28:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b2b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b30:	39 d8                	cmp    eax,ebx
c0027b32:	7f 22                	jg     c0027b56 <__adddf3+0x583>
c0027b34:	29 c3                	sub    ebx,eax
c0027b36:	43                   	inc    ebx
c0027b37:	88 d9                	mov    cl,bl
c0027b39:	d3 ea                	shr    edx,cl
c0027b3b:	29 df                	sub    edi,ebx
c0027b3d:	89 f9                	mov    ecx,edi
c0027b3f:	89 f0                	mov    eax,esi
c0027b41:	d3 e0                	shl    eax,cl
c0027b43:	09 c2                	or     edx,eax
c0027b45:	89 f0                	mov    eax,esi
c0027b47:	88 d9                	mov    cl,bl
c0027b49:	d3 e8                	shr    eax,cl
c0027b4b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b4e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b54:	eb 6f                	jmp    c0027bc5 <__adddf3+0x5f2>
c0027b56:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b59:	29 d8                	sub    eax,ebx
c0027b5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b5e:	89 f0                	mov    eax,esi
c0027b60:	eb 59                	jmp    c0027bbb <__adddf3+0x5e8>
c0027b62:	85 c0                	test   eax,eax
c0027b64:	74 6a                	je     c0027bd0 <__adddf3+0x5fd>
c0027b66:	0f bd c8             	bsr    ecx,eax
c0027b69:	83 f1 1f             	xor    ecx,0x1f
c0027b6c:	d3 e0                	shl    eax,cl
c0027b6e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b71:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b77:	83 c1 20             	add    ecx,0x20
c0027b7a:	39 cb                	cmp    ebx,ecx
c0027b7c:	7f 35                	jg     c0027bb3 <__adddf3+0x5e0>
c0027b7e:	29 d9                	sub    ecx,ebx
c0027b80:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b83:	83 fe 1f             	cmp    esi,0x1f
c0027b86:	7e 09                	jle    c0027b91 <__adddf3+0x5be>
c0027b88:	83 e9 1f             	sub    ecx,0x1f
c0027b8b:	d3 e8                	shr    eax,cl
c0027b8d:	89 c3                	mov    ebx,eax
c0027b8f:	eb 11                	jmp    c0027ba2 <__adddf3+0x5cf>
c0027b91:	b9 20 00 00 00       	mov    ecx,0x20
c0027b96:	29 f1                	sub    ecx,esi
c0027b98:	89 c3                	mov    ebx,eax
c0027b9a:	d3 e3                	shl    ebx,cl
c0027b9c:	89 f1                	mov    ecx,esi
c0027b9e:	d3 e8                	shr    eax,cl
c0027ba0:	89 c2                	mov    edx,eax
c0027ba2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027baa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bad:	89 d0                	mov    eax,edx
c0027baf:	89 da                	mov    edx,ebx
c0027bb1:	eb 26                	jmp    c0027bd9 <__adddf3+0x606>
c0027bb3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bb6:	29 cf                	sub    edi,ecx
c0027bb8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bbb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bc0:	eb 17                	jmp    c0027bd9 <__adddf3+0x606>
c0027bc2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bc5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bc8:	eb 0f                	jmp    c0027bd9 <__adddf3+0x606>
c0027bca:	31 d2                	xor    edx,edx
c0027bcc:	31 c0                	xor    eax,eax
c0027bce:	eb 09                	jmp    c0027bd9 <__adddf3+0x606>
c0027bd0:	89 c2                	mov    edx,eax
c0027bd2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bd9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bdc:	c1 e1 14             	shl    ecx,0x14
c0027bdf:	89 c3                	mov    ebx,eax
c0027be1:	c1 eb 0b             	shr    ebx,0xb
c0027be4:	09 d9                	or     ecx,ebx
c0027be6:	89 d3                	mov    ebx,edx
c0027be8:	c1 eb 0b             	shr    ebx,0xb
c0027beb:	c1 e0 15             	shl    eax,0x15
c0027bee:	09 d8                	or     eax,ebx
c0027bf0:	89 c7                	mov    edi,eax
c0027bf2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027bf8:	0f 95 c0             	setne  al
c0027bfb:	89 c6                	mov    esi,eax
c0027bfd:	09 f3                	or     ebx,esi
c0027bff:	83 e3 01             	and    ebx,0x1
c0027c02:	c1 ea 0a             	shr    edx,0xa
c0027c05:	21 da                	and    edx,ebx
c0027c07:	89 f8                	mov    eax,edi
c0027c09:	01 d0                	add    eax,edx
c0027c0b:	83 d1 00             	adc    ecx,0x0
c0027c0e:	89 c7                	mov    edi,eax
c0027c10:	eb 06                	jmp    c0027c18 <__adddf3+0x645>
c0027c12:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c15:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c18:	89 f8                	mov    eax,edi
c0027c1a:	89 ca                	mov    edx,ecx
c0027c1c:	83 c4 24             	add    esp,0x24
c0027c1f:	5b                   	pop    ebx
c0027c20:	5e                   	pop    esi
c0027c21:	5f                   	pop    edi
c0027c22:	5d                   	pop    ebp
c0027c23:	c3                   	ret    

c0027c24 <__subdf3>:
c0027c24:	55                   	push   ebp
c0027c25:	89 e5                	mov    ebp,esp
c0027c27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c2a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c2d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c33:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c36:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c39:	5d                   	pop    ebp
c0027c3a:	e9 94 f9 ff ff       	jmp    c00275d3 <__adddf3>

c0027c3f <__negdf2>:
c0027c3f:	55                   	push   ebp
c0027c40:	89 e5                	mov    ebp,esp
c0027c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c45:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c4e:	5d                   	pop    ebp
c0027c4f:	c3                   	ret    

c0027c50 <__muldf3>:
c0027c50:	55                   	push   ebp
c0027c51:	89 e5                	mov    ebp,esp
c0027c53:	57                   	push   edi
c0027c54:	56                   	push   esi
c0027c55:	53                   	push   ebx
c0027c56:	83 ec 24             	sub    esp,0x24
c0027c59:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c62:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c65:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c68:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c6b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c6e:	89 c8                	mov    eax,ecx
c0027c70:	c1 f8 14             	sar    eax,0x14
c0027c73:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c76:	89 f8                	mov    eax,edi
c0027c78:	89 fb                	mov    ebx,edi
c0027c7a:	c1 e3 0b             	shl    ebx,0xb
c0027c7d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c80:	c1 e1 0b             	shl    ecx,0xb
c0027c83:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c89:	c1 e8 15             	shr    eax,0x15
c0027c8c:	09 c1                	or     ecx,eax
c0027c8e:	89 d6                	mov    esi,edx
c0027c90:	89 d0                	mov    eax,edx
c0027c92:	c1 f8 14             	sar    eax,0x14
c0027c95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c98:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c9b:	89 c3                	mov    ebx,eax
c0027c9d:	c1 e3 0b             	shl    ebx,0xb
c0027ca0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ca3:	c1 e6 0b             	shl    esi,0xb
c0027ca6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cac:	c1 e8 15             	shr    eax,0x15
c0027caf:	09 c6                	or     esi,eax
c0027cb1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cb4:	25 ff 07 00 00       	and    eax,0x7ff
c0027cb9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cbc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cbf:	25 ff 07 00 00       	and    eax,0x7ff
c0027cc4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027cc7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ccd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cd4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cd7:	40                   	inc    eax
c0027cd8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cdd:	0f 85 8d 00 00 00    	jne    c0027d70 <__muldf3+0x120>
c0027ce3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ce6:	09 c8                	or     eax,ecx
c0027ce8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027cec:	74 44                	je     c0027d32 <__muldf3+0xe2>
c0027cee:	85 c0                	test   eax,eax
c0027cf0:	0f 85 31 02 00 00    	jne    c0027f27 <__muldf3+0x2d7>
c0027cf6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cf9:	40                   	inc    eax
c0027cfa:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cff:	75 13                	jne    c0027d14 <__muldf3+0xc4>
c0027d01:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d04:	09 f1                	or     ecx,esi
c0027d06:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d0a:	74 22                	je     c0027d2e <__muldf3+0xde>
c0027d0c:	85 c9                	test   ecx,ecx
c0027d0e:	0f 85 0d 02 00 00    	jne    c0027f21 <__muldf3+0x2d1>
c0027d14:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d18:	0f 89 09 02 00 00    	jns    c0027f27 <__muldf3+0x2d7>
c0027d1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d21:	05 00 00 00 80       	add    eax,0x80000000
c0027d26:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d29:	e9 f9 01 00 00       	jmp    c0027f27 <__muldf3+0x2d7>
c0027d2e:	85 c9                	test   ecx,ecx
c0027d30:	eb 2e                	jmp    c0027d60 <__muldf3+0x110>
c0027d32:	85 c0                	test   eax,eax
c0027d34:	74 20                	je     c0027d56 <__muldf3+0x106>
c0027d36:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d3c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d3f:	c1 ef 1f             	shr    edi,0x1f
c0027d42:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d45:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d48:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d4b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d4e:	09 f9                	or     ecx,edi
c0027d50:	78 1e                	js     c0027d70 <__muldf3+0x120>
c0027d52:	89 c3                	mov    ebx,eax
c0027d54:	eb e0                	jmp    c0027d36 <__muldf3+0xe6>
c0027d56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d59:	f7 d0                	not    eax
c0027d5b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d60:	75 b2                	jne    c0027d14 <__muldf3+0xc4>
c0027d62:	31 ff                	xor    edi,edi
c0027d64:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d6b:	e9 b7 01 00 00       	jmp    c0027f27 <__muldf3+0x2d7>
c0027d70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d73:	40                   	inc    eax
c0027d74:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d79:	75 57                	jne    c0027dd2 <__muldf3+0x182>
c0027d7b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d7e:	09 f0                	or     eax,esi
c0027d80:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d84:	74 23                	je     c0027da9 <__muldf3+0x159>
c0027d86:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d8a:	0f 89 91 01 00 00    	jns    c0027f21 <__muldf3+0x2d1>
c0027d90:	85 c0                	test   eax,eax
c0027d92:	0f 85 89 01 00 00    	jne    c0027f21 <__muldf3+0x2d1>
c0027d98:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d9b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027da1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027da4:	e9 7e 01 00 00       	jmp    c0027f27 <__muldf3+0x2d7>
c0027da9:	85 c0                	test   eax,eax
c0027dab:	75 0c                	jne    c0027db9 <__muldf3+0x169>
c0027dad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027db1:	0f 89 6a 01 00 00    	jns    c0027f21 <__muldf3+0x2d1>
c0027db7:	eb df                	jmp    c0027d98 <__muldf3+0x148>
c0027db9:	01 f6                	add    esi,esi
c0027dbb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dbe:	c1 ea 1f             	shr    edx,0x1f
c0027dc1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027dc4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027dc7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dca:	09 d6                	or     esi,edx
c0027dcc:	78 04                	js     c0027dd2 <__muldf3+0x182>
c0027dce:	89 c3                	mov    ebx,eax
c0027dd0:	eb e7                	jmp    c0027db9 <__muldf3+0x169>
c0027dd2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027dd8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dde:	89 c8                	mov    eax,ecx
c0027de0:	f7 e6                	mul    esi
c0027de2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027de5:	89 c7                	mov    edi,eax
c0027de7:	89 c8                	mov    eax,ecx
c0027de9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027dec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027def:	89 c1                	mov    ecx,eax
c0027df1:	89 f0                	mov    eax,esi
c0027df3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027df6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027df9:	89 c6                	mov    esi,eax
c0027dfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dfe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e01:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e04:	31 c0                	xor    eax,eax
c0027e06:	01 f1                	add    ecx,esi
c0027e08:	0f 92 c0             	setb   al
c0027e0b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e0e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e11:	83 d6 00             	adc    esi,0x0
c0027e14:	01 c7                	add    edi,eax
c0027e16:	83 d6 00             	adc    esi,0x0
c0027e19:	01 ca                	add    edx,ecx
c0027e1b:	0f 92 c1             	setb   cl
c0027e1e:	0f b6 c9             	movzx  ecx,cl
c0027e21:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e24:	83 d6 00             	adc    esi,0x0
c0027e27:	01 cf                	add    edi,ecx
c0027e29:	83 d6 00             	adc    esi,0x0
c0027e2c:	31 c9                	xor    ecx,ecx
c0027e2e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e31:	0f 95 c1             	setne  cl
c0027e34:	09 cf                	or     edi,ecx
c0027e36:	85 f6                	test   esi,esi
c0027e38:	78 0c                	js     c0027e46 <__muldf3+0x1f6>
c0027e3a:	01 f6                	add    esi,esi
c0027e3c:	89 f8                	mov    eax,edi
c0027e3e:	c1 e8 1f             	shr    eax,0x1f
c0027e41:	09 c6                	or     esi,eax
c0027e43:	01 ff                	add    edi,edi
c0027e45:	4b                   	dec    ebx
c0027e46:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e4c:	0f 8f 85 00 00 00    	jg     c0027ed7 <__muldf3+0x287>
c0027e52:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e58:	85 db                	test   ebx,ebx
c0027e5a:	0f 8f 84 00 00 00    	jg     c0027ee4 <__muldf3+0x294>
c0027e60:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e63:	7c 79                	jl     c0027ede <__muldf3+0x28e>
c0027e65:	ba 01 00 00 00       	mov    edx,0x1
c0027e6a:	29 da                	sub    edx,ebx
c0027e6c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e72:	83 fa 1f             	cmp    edx,0x1f
c0027e75:	7e 30                	jle    c0027ea7 <__muldf3+0x257>
c0027e77:	83 fa 20             	cmp    edx,0x20
c0027e7a:	75 0b                	jne    c0027e87 <__muldf3+0x237>
c0027e7c:	31 c0                	xor    eax,eax
c0027e7e:	85 ff                	test   edi,edi
c0027e80:	0f 95 c0             	setne  al
c0027e83:	89 c7                	mov    edi,eax
c0027e85:	eb 1a                	jmp    c0027ea1 <__muldf3+0x251>
c0027e87:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e8a:	89 f0                	mov    eax,esi
c0027e8c:	d3 e0                	shl    eax,cl
c0027e8e:	09 f8                	or     eax,edi
c0027e90:	0f 95 c0             	setne  al
c0027e93:	0f b6 c0             	movzx  eax,al
c0027e96:	89 c7                	mov    edi,eax
c0027e98:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e9d:	29 d9                	sub    ecx,ebx
c0027e9f:	d3 ee                	shr    esi,cl
c0027ea1:	09 f7                	or     edi,esi
c0027ea3:	31 db                	xor    ebx,ebx
c0027ea5:	eb 3b                	jmp    c0027ee2 <__muldf3+0x292>
c0027ea7:	83 c3 1f             	add    ebx,0x1f
c0027eaa:	89 f0                	mov    eax,esi
c0027eac:	88 d9                	mov    cl,bl
c0027eae:	d3 e0                	shl    eax,cl
c0027eb0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027eb3:	89 f8                	mov    eax,edi
c0027eb5:	88 d1                	mov    cl,dl
c0027eb7:	d3 e8                	shr    eax,cl
c0027eb9:	89 c1                	mov    ecx,eax
c0027ebb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ebe:	09 c8                	or     eax,ecx
c0027ec0:	88 d9                	mov    cl,bl
c0027ec2:	d3 e7                	shl    edi,cl
c0027ec4:	31 db                	xor    ebx,ebx
c0027ec6:	85 ff                	test   edi,edi
c0027ec8:	0f 95 c3             	setne  bl
c0027ecb:	89 df                	mov    edi,ebx
c0027ecd:	09 c7                	or     edi,eax
c0027ecf:	88 d1                	mov    cl,dl
c0027ed1:	d3 ee                	shr    esi,cl
c0027ed3:	31 db                	xor    ebx,ebx
c0027ed5:	eb 0d                	jmp    c0027ee4 <__muldf3+0x294>
c0027ed7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027edc:	eb 02                	jmp    c0027ee0 <__muldf3+0x290>
c0027ede:	31 db                	xor    ebx,ebx
c0027ee0:	31 ff                	xor    edi,edi
c0027ee2:	31 f6                	xor    esi,esi
c0027ee4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ee7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027eea:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027eef:	09 c3                	or     ebx,eax
c0027ef1:	c1 e3 14             	shl    ebx,0x14
c0027ef4:	89 f0                	mov    eax,esi
c0027ef6:	c1 e8 0b             	shr    eax,0xb
c0027ef9:	09 c3                	or     ebx,eax
c0027efb:	89 f8                	mov    eax,edi
c0027efd:	c1 e8 0b             	shr    eax,0xb
c0027f00:	c1 e6 15             	shl    esi,0x15
c0027f03:	09 c6                	or     esi,eax
c0027f05:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f0b:	0f 95 c1             	setne  cl
c0027f0e:	09 c8                	or     eax,ecx
c0027f10:	83 e0 01             	and    eax,0x1
c0027f13:	c1 ef 0a             	shr    edi,0xa
c0027f16:	21 c7                	and    edi,eax
c0027f18:	01 f7                	add    edi,esi
c0027f1a:	83 d3 00             	adc    ebx,0x0
c0027f1d:	89 da                	mov    edx,ebx
c0027f1f:	eb 03                	jmp    c0027f24 <__muldf3+0x2d4>
c0027f21:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f24:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f27:	89 f8                	mov    eax,edi
c0027f29:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f2c:	83 c4 24             	add    esp,0x24
c0027f2f:	5b                   	pop    ebx
c0027f30:	5e                   	pop    esi
c0027f31:	5f                   	pop    edi
c0027f32:	5d                   	pop    ebp
c0027f33:	c3                   	ret    

c0027f34 <__divdf3>:
c0027f34:	55                   	push   ebp
c0027f35:	89 e5                	mov    ebp,esp
c0027f37:	57                   	push   edi
c0027f38:	56                   	push   esi
c0027f39:	53                   	push   ebx
c0027f3a:	83 ec 2c             	sub    esp,0x2c
c0027f3d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f40:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f43:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f46:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f49:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f4c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f4f:	89 ce                	mov    esi,ecx
c0027f51:	89 c8                	mov    eax,ecx
c0027f53:	c1 f8 14             	sar    eax,0x14
c0027f56:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f59:	89 f8                	mov    eax,edi
c0027f5b:	89 fb                	mov    ebx,edi
c0027f5d:	c1 e3 0b             	shl    ebx,0xb
c0027f60:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f63:	c1 e6 0b             	shl    esi,0xb
c0027f66:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f6c:	c1 e8 15             	shr    eax,0x15
c0027f6f:	09 c6                	or     esi,eax
c0027f71:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f74:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f77:	89 c2                	mov    edx,eax
c0027f79:	c1 fa 14             	sar    edx,0x14
c0027f7c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f7f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f82:	89 de                	mov    esi,ebx
c0027f84:	c1 e6 0b             	shl    esi,0xb
c0027f87:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f8a:	c1 e0 0b             	shl    eax,0xb
c0027f8d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f92:	c1 eb 15             	shr    ebx,0x15
c0027f95:	09 d8                	or     eax,ebx
c0027f97:	89 c2                	mov    edx,eax
c0027f99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f9c:	25 ff 07 00 00       	and    eax,0x7ff
c0027fa1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027fa4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fa7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fb0:	29 d8                	sub    eax,ebx
c0027fb2:	05 ff 03 00 00       	add    eax,0x3ff
c0027fb7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027fba:	46                   	inc    esi
c0027fbb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fc1:	0f 85 a5 00 00 00    	jne    c002806c <__divdf3+0x138>
c0027fc7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fcd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027fd1:	74 2a                	je     c0027ffd <__divdf3+0xc9>
c0027fd3:	85 f6                	test   esi,esi
c0027fd5:	0f 85 cc 02 00 00    	jne    c00282a7 <__divdf3+0x373>
c0027fdb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fde:	40                   	inc    eax
c0027fdf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fe4:	75 26                	jne    c002800c <__divdf3+0xd8>
c0027fe6:	85 db                	test   ebx,ebx
c0027fe8:	74 22                	je     c002800c <__divdf3+0xd8>
c0027fea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fed:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ff0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ff3:	09 d0                	or     eax,edx
c0027ff5:	0f 85 ac 02 00 00    	jne    c00282a7 <__divdf3+0x373>
c0027ffb:	eb 63                	jmp    c0028060 <__divdf3+0x12c>
c0027ffd:	85 f6                	test   esi,esi
c0027fff:	75 22                	jne    c0028023 <__divdf3+0xef>
c0028001:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028004:	40                   	inc    eax
c0028005:	a9 fe 07 00 00       	test   eax,0x7fe
c002800a:	74 36                	je     c0028042 <__divdf3+0x10e>
c002800c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028010:	0f 89 91 02 00 00    	jns    c00282a7 <__divdf3+0x373>
c0028016:	89 f8                	mov    eax,edi
c0028018:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002801e:	e9 80 02 00 00       	jmp    c00282a3 <__divdf3+0x36f>
c0028023:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028026:	01 f6                	add    esi,esi
c0028028:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002802b:	c1 ef 1f             	shr    edi,0x1f
c002802e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028031:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028034:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028037:	09 f7                	or     edi,esi
c0028039:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002803c:	78 2e                	js     c002806c <__divdf3+0x138>
c002803e:	89 c8                	mov    eax,ecx
c0028040:	eb e1                	jmp    c0028023 <__divdf3+0xef>
c0028042:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028045:	09 d0                	or     eax,edx
c0028047:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002804b:	74 0f                	je     c002805c <__divdf3+0x128>
c002804d:	85 c0                	test   eax,eax
c002804f:	74 bb                	je     c002800c <__divdf3+0xd8>
c0028051:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028054:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028057:	e9 4b 02 00 00       	jmp    c00282a7 <__divdf3+0x373>
c002805c:	85 c0                	test   eax,eax
c002805e:	75 ac                	jne    c002800c <__divdf3+0xd8>
c0028060:	31 ff                	xor    edi,edi
c0028062:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028067:	e9 3b 02 00 00       	jmp    c00282a7 <__divdf3+0x373>
c002806c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002806f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028072:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028078:	75 6b                	jne    c00280e5 <__divdf3+0x1b1>
c002807a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002807d:	09 d6                	or     esi,edx
c002807f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028083:	74 28                	je     c00280ad <__divdf3+0x179>
c0028085:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028088:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002808b:	85 f6                	test   esi,esi
c002808d:	0f 85 14 02 00 00    	jne    c00282a7 <__divdf3+0x373>
c0028093:	31 ff                	xor    edi,edi
c0028095:	31 c9                	xor    ecx,ecx
c0028097:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002809a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002809d:	0f 89 04 02 00 00    	jns    c00282a7 <__divdf3+0x373>
c00280a3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280a8:	e9 fa 01 00 00       	jmp    c00282a7 <__divdf3+0x373>
c00280ad:	85 f6                	test   esi,esi
c00280af:	75 1b                	jne    c00280cc <__divdf3+0x198>
c00280b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280b4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280b7:	25 00 00 00 80       	and    eax,0x80000000
c00280bc:	31 c9                	xor    ecx,ecx
c00280be:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280c3:	89 cf                	mov    edi,ecx
c00280c5:	89 c1                	mov    ecx,eax
c00280c7:	e9 db 01 00 00       	jmp    c00282a7 <__divdf3+0x373>
c00280cc:	01 d2                	add    edx,edx
c00280ce:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280d1:	c1 eb 1f             	shr    ebx,0x1f
c00280d4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280d7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280da:	8d 48 01             	lea    ecx,[eax+0x1]
c00280dd:	09 da                	or     edx,ebx
c00280df:	78 04                	js     c00280e5 <__divdf3+0x1b1>
c00280e1:	89 c8                	mov    eax,ecx
c00280e3:	eb e7                	jmp    c00280cc <__divdf3+0x198>
c00280e5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280ee:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280f4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280f7:	39 d6                	cmp    esi,edx
c00280f9:	77 0d                	ja     c0028108 <__divdf3+0x1d4>
c00280fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280fe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028101:	72 1b                	jb     c002811e <__divdf3+0x1ea>
c0028103:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028106:	75 16                	jne    c002811e <__divdf3+0x1ea>
c0028108:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002810b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002810e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028111:	83 de 00             	sbb    esi,0x0
c0028114:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028117:	ba 01 00 00 00       	mov    edx,0x1
c002811c:	eb 02                	jmp    c0028120 <__divdf3+0x1ec>
c002811e:	31 d2                	xor    edx,edx
c0028120:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028127:	31 ff                	xor    edi,edi
c0028129:	01 ff                	add    edi,edi
c002812b:	89 d1                	mov    ecx,edx
c002812d:	c1 e9 1f             	shr    ecx,0x1f
c0028130:	09 cf                	or     edi,ecx
c0028132:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028135:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028138:	89 da                	mov    edx,ebx
c002813a:	89 f3                	mov    ebx,esi
c002813c:	8d 34 36             	lea    esi,[esi+esi*1]
c002813f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028142:	c1 e9 1f             	shr    ecx,0x1f
c0028145:	09 ce                	or     esi,ecx
c0028147:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002814a:	01 c9                	add    ecx,ecx
c002814c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002814f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028152:	85 db                	test   ebx,ebx
c0028154:	78 29                	js     c002817f <__divdf3+0x24b>
c0028156:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028159:	72 07                	jb     c0028162 <__divdf3+0x22e>
c002815b:	75 3c                	jne    c0028199 <__divdf3+0x265>
c002815d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028160:	77 37                	ja     c0028199 <__divdf3+0x265>
c0028162:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028165:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028168:	31 d2                	xor    edx,edx
c002816a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002816d:	0f 97 c2             	seta   dl
c0028170:	29 d6                	sub    esi,edx
c0028172:	89 d9                	mov    ecx,ebx
c0028174:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028177:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002817a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002817d:	eb 17                	jmp    c0028196 <__divdf3+0x262>
c002817f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028182:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028185:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028188:	0f 97 c1             	seta   cl
c002818b:	0f b6 c9             	movzx  ecx,cl
c002818e:	29 ce                	sub    esi,ecx
c0028190:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028193:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028196:	83 ca 01             	or     edx,0x1
c0028199:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002819c:	75 8b                	jne    c0028129 <__divdf3+0x1f5>
c002819e:	c1 e7 09             	shl    edi,0x9
c00281a1:	89 d1                	mov    ecx,edx
c00281a3:	c1 e9 17             	shr    ecx,0x17
c00281a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281a9:	09 f3                	or     ebx,esi
c00281ab:	0f 95 c3             	setne  bl
c00281ae:	0f b6 db             	movzx  ebx,bl
c00281b1:	c1 e2 09             	shl    edx,0x9
c00281b4:	09 d3                	or     ebx,edx
c00281b6:	89 ca                	mov    edx,ecx
c00281b8:	09 fa                	or     edx,edi
c00281ba:	78 0c                	js     c00281c8 <__divdf3+0x294>
c00281bc:	01 d2                	add    edx,edx
c00281be:	89 d9                	mov    ecx,ebx
c00281c0:	c1 e9 1f             	shr    ecx,0x1f
c00281c3:	09 ca                	or     edx,ecx
c00281c5:	01 db                	add    ebx,ebx
c00281c7:	48                   	dec    eax
c00281c8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281cd:	0f 8f 83 00 00 00    	jg     c0028256 <__divdf3+0x322>
c00281d3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281d9:	85 c0                	test   eax,eax
c00281db:	0f 8f 82 00 00 00    	jg     c0028263 <__divdf3+0x32f>
c00281e1:	83 f8 cc             	cmp    eax,0xffffffcc
c00281e4:	7c 77                	jl     c002825d <__divdf3+0x329>
c00281e6:	be 01 00 00 00       	mov    esi,0x1
c00281eb:	29 c6                	sub    esi,eax
c00281ed:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281f3:	83 fe 1f             	cmp    esi,0x1f
c00281f6:	7e 2f                	jle    c0028227 <__divdf3+0x2f3>
c00281f8:	83 fe 20             	cmp    esi,0x20
c00281fb:	75 0a                	jne    c0028207 <__divdf3+0x2d3>
c00281fd:	85 db                	test   ebx,ebx
c00281ff:	0f 95 c3             	setne  bl
c0028202:	0f b6 db             	movzx  ebx,bl
c0028205:	eb 1a                	jmp    c0028221 <__divdf3+0x2ed>
c0028207:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002820a:	89 d7                	mov    edi,edx
c002820c:	d3 e7                	shl    edi,cl
c002820e:	89 f9                	mov    ecx,edi
c0028210:	09 d9                	or     ecx,ebx
c0028212:	0f 95 c3             	setne  bl
c0028215:	0f b6 db             	movzx  ebx,bl
c0028218:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002821d:	29 c1                	sub    ecx,eax
c002821f:	d3 ea                	shr    edx,cl
c0028221:	09 d3                	or     ebx,edx
c0028223:	31 c0                	xor    eax,eax
c0028225:	eb 3a                	jmp    c0028261 <__divdf3+0x32d>
c0028227:	83 c0 1f             	add    eax,0x1f
c002822a:	89 d7                	mov    edi,edx
c002822c:	88 c1                	mov    cl,al
c002822e:	d3 e7                	shl    edi,cl
c0028230:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028233:	89 df                	mov    edi,ebx
c0028235:	89 f1                	mov    ecx,esi
c0028237:	d3 ef                	shr    edi,cl
c0028239:	89 f9                	mov    ecx,edi
c002823b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002823e:	09 cf                	or     edi,ecx
c0028240:	88 c1                	mov    cl,al
c0028242:	d3 e3                	shl    ebx,cl
c0028244:	85 db                	test   ebx,ebx
c0028246:	0f 95 c3             	setne  bl
c0028249:	0f b6 db             	movzx  ebx,bl
c002824c:	09 fb                	or     ebx,edi
c002824e:	89 f1                	mov    ecx,esi
c0028250:	d3 ea                	shr    edx,cl
c0028252:	31 c0                	xor    eax,eax
c0028254:	eb 0d                	jmp    c0028263 <__divdf3+0x32f>
c0028256:	b8 ff 07 00 00       	mov    eax,0x7ff
c002825b:	eb 02                	jmp    c002825f <__divdf3+0x32b>
c002825d:	31 c0                	xor    eax,eax
c002825f:	31 db                	xor    ebx,ebx
c0028261:	31 d2                	xor    edx,edx
c0028263:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028266:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028269:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002826f:	09 c8                	or     eax,ecx
c0028271:	c1 e0 14             	shl    eax,0x14
c0028274:	89 d1                	mov    ecx,edx
c0028276:	c1 e9 0b             	shr    ecx,0xb
c0028279:	09 c8                	or     eax,ecx
c002827b:	89 c6                	mov    esi,eax
c002827d:	89 d9                	mov    ecx,ebx
c002827f:	c1 e9 0b             	shr    ecx,0xb
c0028282:	c1 e2 15             	shl    edx,0x15
c0028285:	09 ca                	or     edx,ecx
c0028287:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002828d:	0f 95 c0             	setne  al
c0028290:	09 c1                	or     ecx,eax
c0028292:	83 e1 01             	and    ecx,0x1
c0028295:	c1 eb 0a             	shr    ebx,0xa
c0028298:	21 cb                	and    ebx,ecx
c002829a:	01 d3                	add    ebx,edx
c002829c:	89 d8                	mov    eax,ebx
c002829e:	83 d6 00             	adc    esi,0x0
c00282a1:	89 f2                	mov    edx,esi
c00282a3:	89 c7                	mov    edi,eax
c00282a5:	89 d1                	mov    ecx,edx
c00282a7:	89 f8                	mov    eax,edi
c00282a9:	89 ca                	mov    edx,ecx
c00282ab:	83 c4 2c             	add    esp,0x2c
c00282ae:	5b                   	pop    ebx
c00282af:	5e                   	pop    esi
c00282b0:	5f                   	pop    edi
c00282b1:	5d                   	pop    ebp
c00282b2:	c3                   	ret    

c00282b3 <__floatsidf>:
c00282b3:	55                   	push   ebp
c00282b4:	89 e5                	mov    ebp,esp
c00282b6:	56                   	push   esi
c00282b7:	53                   	push   ebx
c00282b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282bb:	85 db                	test   ebx,ebx
c00282bd:	7e 15                	jle    c00282d4 <__floatsidf+0x21>
c00282bf:	0f bd cb             	bsr    ecx,ebx
c00282c2:	83 f1 1f             	xor    ecx,0x1f
c00282c5:	d3 e3                	shl    ebx,cl
c00282c7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282cd:	b8 1e 04 00 00       	mov    eax,0x41e
c00282d2:	eb 21                	jmp    c00282f5 <__floatsidf+0x42>
c00282d4:	b8 00 00 00 00       	mov    eax,0x0
c00282d9:	ba 00 00 00 00       	mov    edx,0x0
c00282de:	74 2a                	je     c002830a <__floatsidf+0x57>
c00282e0:	f7 db                	neg    ebx
c00282e2:	0f bd cb             	bsr    ecx,ebx
c00282e5:	83 f1 1f             	xor    ecx,0x1f
c00282e8:	d3 e3                	shl    ebx,cl
c00282ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282f0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282f5:	29 c8                	sub    eax,ecx
c00282f7:	c1 e0 14             	shl    eax,0x14
c00282fa:	89 c1                	mov    ecx,eax
c00282fc:	89 de                	mov    esi,ebx
c00282fe:	c1 ee 0b             	shr    esi,0xb
c0028301:	09 f1                	or     ecx,esi
c0028303:	89 ca                	mov    edx,ecx
c0028305:	c1 e3 15             	shl    ebx,0x15
c0028308:	89 d8                	mov    eax,ebx
c002830a:	5b                   	pop    ebx
c002830b:	5e                   	pop    esi
c002830c:	5d                   	pop    ebp
c002830d:	c3                   	ret    

c002830e <__floatunsidf>:
c002830e:	55                   	push   ebp
c002830f:	89 e5                	mov    ebp,esp
c0028311:	56                   	push   esi
c0028312:	53                   	push   ebx
c0028313:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028316:	85 db                	test   ebx,ebx
c0028318:	74 2a                	je     c0028344 <__floatunsidf+0x36>
c002831a:	0f bd cb             	bsr    ecx,ebx
c002831d:	83 f1 1f             	xor    ecx,0x1f
c0028320:	d3 e3                	shl    ebx,cl
c0028322:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028328:	b8 1e 04 00 00       	mov    eax,0x41e
c002832d:	29 c8                	sub    eax,ecx
c002832f:	c1 e0 14             	shl    eax,0x14
c0028332:	89 c1                	mov    ecx,eax
c0028334:	89 de                	mov    esi,ebx
c0028336:	c1 ee 0b             	shr    esi,0xb
c0028339:	09 f1                	or     ecx,esi
c002833b:	89 ca                	mov    edx,ecx
c002833d:	c1 e3 15             	shl    ebx,0x15
c0028340:	89 d8                	mov    eax,ebx
c0028342:	eb 04                	jmp    c0028348 <__floatunsidf+0x3a>
c0028344:	31 c0                	xor    eax,eax
c0028346:	31 d2                	xor    edx,edx
c0028348:	5b                   	pop    ebx
c0028349:	5e                   	pop    esi
c002834a:	5d                   	pop    ebp
c002834b:	c3                   	ret    

c002834c <__fixdfsi>:
c002834c:	55                   	push   ebp
c002834d:	89 e5                	mov    ebp,esp
c002834f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028352:	89 d1                	mov    ecx,edx
c0028354:	c1 e1 0b             	shl    ecx,0xb
c0028357:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002835d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028360:	c1 e8 15             	shr    eax,0x15
c0028363:	09 c1                	or     ecx,eax
c0028365:	c1 fa 14             	sar    edx,0x14
c0028368:	78 1f                	js     c0028389 <__fixdfsi+0x3d>
c002836a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028370:	31 c0                	xor    eax,eax
c0028372:	83 fa 1e             	cmp    edx,0x1e
c0028375:	77 40                	ja     c00283b7 <__fixdfsi+0x6b>
c0028377:	89 c8                	mov    eax,ecx
c0028379:	0d 00 00 00 80       	or     eax,0x80000000
c002837e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028383:	29 d1                	sub    ecx,edx
c0028385:	d3 e8                	shr    eax,cl
c0028387:	eb 2e                	jmp    c00283b7 <__fixdfsi+0x6b>
c0028389:	31 c0                	xor    eax,eax
c002838b:	81 c2 01 04 00 00    	add    edx,0x401
c0028391:	78 24                	js     c00283b7 <__fixdfsi+0x6b>
c0028393:	83 fa 1e             	cmp    edx,0x1e
c0028396:	7e 09                	jle    c00283a1 <__fixdfsi+0x55>
c0028398:	83 fa 1f             	cmp    edx,0x1f
c002839b:	75 18                	jne    c00283b5 <__fixdfsi+0x69>
c002839d:	85 c9                	test   ecx,ecx
c002839f:	75 14                	jne    c00283b5 <__fixdfsi+0x69>
c00283a1:	89 c8                	mov    eax,ecx
c00283a3:	0d 00 00 00 80       	or     eax,0x80000000
c00283a8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283ad:	29 d1                	sub    ecx,edx
c00283af:	d3 e8                	shr    eax,cl
c00283b1:	f7 d8                	neg    eax
c00283b3:	eb 02                	jmp    c00283b7 <__fixdfsi+0x6b>
c00283b5:	31 c0                	xor    eax,eax
c00283b7:	5d                   	pop    ebp
c00283b8:	c3                   	ret    

c00283b9 <__fixunsdfsi>:
c00283b9:	55                   	push   ebp
c00283ba:	89 e5                	mov    ebp,esp
c00283bc:	53                   	push   ebx
c00283bd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283c3:	89 d3                	mov    ebx,edx
c00283c5:	c1 fb 14             	sar    ebx,0x14
c00283c8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283ce:	31 c0                	xor    eax,eax
c00283d0:	83 fb 1f             	cmp    ebx,0x1f
c00283d3:	77 1d                	ja     c00283f2 <__fixunsdfsi+0x39>
c00283d5:	89 d0                	mov    eax,edx
c00283d7:	c1 e0 0b             	shl    eax,0xb
c00283da:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283df:	c1 e9 15             	shr    ecx,0x15
c00283e2:	09 c8                	or     eax,ecx
c00283e4:	0d 00 00 00 80       	or     eax,0x80000000
c00283e9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283ee:	29 d9                	sub    ecx,ebx
c00283f0:	d3 e8                	shr    eax,cl
c00283f2:	5b                   	pop    ebx
c00283f3:	5d                   	pop    ebp
c00283f4:	c3                   	ret    

c00283f5 <__cmpdf2>:
c00283f5:	55                   	push   ebp
c00283f6:	89 e5                	mov    ebp,esp
c00283f8:	57                   	push   edi
c00283f9:	56                   	push   esi
c00283fa:	53                   	push   ebx
c00283fb:	83 ec 0c             	sub    esp,0xc
c00283fe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028401:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028404:	89 ca                	mov    edx,ecx
c0028406:	c1 ea 14             	shr    edx,0x14
c0028409:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002840f:	89 cb                	mov    ebx,ecx
c0028411:	c1 fb 1f             	sar    ebx,0x1f
c0028414:	31 da                	xor    edx,ebx
c0028416:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028419:	89 df                	mov    edi,ebx
c002841b:	c1 e7 0b             	shl    edi,0xb
c002841e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028421:	c1 e1 0b             	shl    ecx,0xb
c0028424:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002842a:	c1 eb 15             	shr    ebx,0x15
c002842d:	09 d9                	or     ecx,ebx
c002842f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028432:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028435:	89 ce                	mov    esi,ecx
c0028437:	c1 ee 14             	shr    esi,0x14
c002843a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028440:	89 cb                	mov    ebx,ecx
c0028442:	c1 fb 1f             	sar    ebx,0x1f
c0028445:	31 de                	xor    esi,ebx
c0028447:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002844a:	89 df                	mov    edi,ebx
c002844c:	c1 e7 0b             	shl    edi,0xb
c002844f:	c1 e1 0b             	shl    ecx,0xb
c0028452:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028458:	c1 eb 15             	shr    ebx,0x15
c002845b:	09 d9                	or     ecx,ebx
c002845d:	89 d3                	mov    ebx,edx
c002845f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028465:	43                   	inc    ebx
c0028466:	83 fb 01             	cmp    ebx,0x1
c0028469:	77 08                	ja     c0028473 <__cmpdf2+0x7e>
c002846b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002846e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028471:	75 68                	jne    c00284db <__cmpdf2+0xe6>
c0028473:	89 f3                	mov    ebx,esi
c0028475:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002847b:	43                   	inc    ebx
c002847c:	83 fb 01             	cmp    ebx,0x1
c002847f:	77 06                	ja     c0028487 <__cmpdf2+0x92>
c0028481:	89 fb                	mov    ebx,edi
c0028483:	09 cb                	or     ebx,ecx
c0028485:	75 54                	jne    c00284db <__cmpdf2+0xe6>
c0028487:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002848a:	09 f8                	or     eax,edi
c002848c:	09 c8                	or     eax,ecx
c002848e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028491:	75 12                	jne    c00284a5 <__cmpdf2+0xb0>
c0028493:	8d 42 01             	lea    eax,[edx+0x1]
c0028496:	83 f8 01             	cmp    eax,0x1
c0028499:	77 0a                	ja     c00284a5 <__cmpdf2+0xb0>
c002849b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002849e:	31 c0                	xor    eax,eax
c00284a0:	83 fb 01             	cmp    ebx,0x1
c00284a3:	76 36                	jbe    c00284db <__cmpdf2+0xe6>
c00284a5:	b8 01 00 00 00       	mov    eax,0x1
c00284aa:	39 f2                	cmp    edx,esi
c00284ac:	7f 2d                	jg     c00284db <__cmpdf2+0xe6>
c00284ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284b3:	7c 26                	jl     c00284db <__cmpdf2+0xe6>
c00284b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284b8:	77 07                	ja     c00284c1 <__cmpdf2+0xcc>
c00284ba:	72 16                	jb     c00284d2 <__cmpdf2+0xdd>
c00284bc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284bf:	76 0a                	jbe    c00284cb <__cmpdf2+0xd6>
c00284c1:	89 d0                	mov    eax,edx
c00284c3:	c1 f8 1f             	sar    eax,0x1f
c00284c6:	83 c8 01             	or     eax,0x1
c00284c9:	eb 10                	jmp    c00284db <__cmpdf2+0xe6>
c00284cb:	b8 00 00 00 00       	mov    eax,0x0
c00284d0:	73 09                	jae    c00284db <__cmpdf2+0xe6>
c00284d2:	89 d0                	mov    eax,edx
c00284d4:	c1 f8 1f             	sar    eax,0x1f
c00284d7:	83 e0 02             	and    eax,0x2
c00284da:	48                   	dec    eax
c00284db:	83 c4 0c             	add    esp,0xc
c00284de:	5b                   	pop    ebx
c00284df:	5e                   	pop    esi
c00284e0:	5f                   	pop    edi
c00284e1:	5d                   	pop    ebp
c00284e2:	c3                   	ret    

c00284e3 <__eqdf2>:
c00284e3:	55                   	push   ebp
c00284e4:	89 e5                	mov    ebp,esp
c00284e6:	50                   	push   eax
c00284e7:	6a 01                	push   0x1
c00284e9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284f5:	e8 fb fe ff ff       	call   c00283f5 <__cmpdf2>
c00284fa:	83 c4 18             	add    esp,0x18
c00284fd:	c9                   	leave  
c00284fe:	c3                   	ret    

c00284ff <__nedf2>:
c00284ff:	eb e2                	jmp    c00284e3 <__eqdf2>

c0028501 <__gtdf2>:
c0028501:	55                   	push   ebp
c0028502:	89 e5                	mov    ebp,esp
c0028504:	50                   	push   eax
c0028505:	6a ff                	push   0xffffffff
c0028507:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002850a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002850d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028513:	e8 dd fe ff ff       	call   c00283f5 <__cmpdf2>
c0028518:	83 c4 18             	add    esp,0x18
c002851b:	c9                   	leave  
c002851c:	c3                   	ret    

c002851d <__gedf2>:
c002851d:	eb e2                	jmp    c0028501 <__gtdf2>

c002851f <__ltdf2>:
c002851f:	eb c2                	jmp    c00284e3 <__eqdf2>

c0028521 <__ledf2>:
c0028521:	eb c0                	jmp    c00284e3 <__eqdf2>

c0028523 <__truncdfsf2>:
c0028523:	55                   	push   ebp
c0028524:	89 e5                	mov    ebp,esp
c0028526:	57                   	push   edi
c0028527:	56                   	push   esi
c0028528:	53                   	push   ebx
c0028529:	83 ec 0c             	sub    esp,0xc
c002852c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002852f:	89 d1                	mov    ecx,edx
c0028531:	c1 f9 14             	sar    ecx,0x14
c0028534:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028537:	89 df                	mov    edi,ebx
c0028539:	c1 e7 0b             	shl    edi,0xb
c002853c:	89 d0                	mov    eax,edx
c002853e:	c1 e0 0b             	shl    eax,0xb
c0028541:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028546:	c1 eb 15             	shr    ebx,0x15
c0028549:	09 d8                	or     eax,ebx
c002854b:	89 cb                	mov    ebx,ecx
c002854d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028553:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028559:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002855f:	0f 86 9e 00 00 00    	jbe    c0028603 <__truncdfsf2+0xe0>
c0028565:	85 db                	test   ebx,ebx
c0028567:	75 0a                	jne    c0028573 <__truncdfsf2+0x50>
c0028569:	c1 fa 17             	sar    edx,0x17
c002856c:	30 d2                	xor    dl,dl
c002856e:	e9 84 00 00 00       	jmp    c00285f7 <__truncdfsf2+0xd4>
c0028573:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028579:	83 fe 83             	cmp    esi,0xffffff83
c002857c:	7d 4b                	jge    c00285c9 <__truncdfsf2+0xa6>
c002857e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028583:	29 f1                	sub    ecx,esi
c0028585:	83 f9 1f             	cmp    ecx,0x1f
c0028588:	7f 6b                	jg     c00285f5 <__truncdfsf2+0xd2>
c002858a:	0d 00 00 00 80       	or     eax,0x80000000
c002858f:	89 c3                	mov    ebx,eax
c0028591:	d3 eb                	shr    ebx,cl
c0028593:	be 01 00 00 00       	mov    esi,0x1
c0028598:	d3 e6                	shl    esi,cl
c002859a:	4e                   	dec    esi
c002859b:	21 f0                	and    eax,esi
c002859d:	09 f8                	or     eax,edi
c002859f:	0f 95 c0             	setne  al
c00285a2:	0f b6 c0             	movzx  eax,al
c00285a5:	09 c3                	or     ebx,eax
c00285a7:	89 d9                	mov    ecx,ebx
c00285a9:	c1 e9 08             	shr    ecx,0x8
c00285ac:	f6 c3 7f             	test   bl,0x7f
c00285af:	0f 95 c0             	setne  al
c00285b2:	09 c8                	or     eax,ecx
c00285b4:	83 e0 01             	and    eax,0x1
c00285b7:	c1 eb 07             	shr    ebx,0x7
c00285ba:	21 c3                	and    ebx,eax
c00285bc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285c2:	09 d1                	or     ecx,edx
c00285c4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285c7:	eb 76                	jmp    c002863f <__truncdfsf2+0x11c>
c00285c9:	83 c6 80             	add    esi,0xffffff80
c00285cc:	7e 1d                	jle    c00285eb <__truncdfsf2+0xc8>
c00285ce:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285d4:	75 0b                	jne    c00285e1 <__truncdfsf2+0xbe>
c00285d6:	09 f8                	or     eax,edi
c00285d8:	74 09                	je     c00285e3 <__truncdfsf2+0xc0>
c00285da:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285df:	eb 02                	jmp    c00285e3 <__truncdfsf2+0xc0>
c00285e1:	31 c0                	xor    eax,eax
c00285e3:	c1 fa 17             	sar    edx,0x17
c00285e6:	80 ca ff             	or     dl,0xff
c00285e9:	eb 0e                	jmp    c00285f9 <__truncdfsf2+0xd6>
c00285eb:	c1 fa 1f             	sar    edx,0x1f
c00285ee:	c1 e2 08             	shl    edx,0x8
c00285f1:	09 ca                	or     edx,ecx
c00285f3:	eb 04                	jmp    c00285f9 <__truncdfsf2+0xd6>
c00285f5:	31 d2                	xor    edx,edx
c00285f7:	31 c0                	xor    eax,eax
c00285f9:	c1 e2 17             	shl    edx,0x17
c00285fc:	c1 e8 08             	shr    eax,0x8
c00285ff:	09 d0                	or     eax,edx
c0028601:	eb 3c                	jmp    c002863f <__truncdfsf2+0x11c>
c0028603:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028609:	89 ca                	mov    edx,ecx
c002860b:	c1 fa 0b             	sar    edx,0xb
c002860e:	c1 e2 08             	shl    edx,0x8
c0028611:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028614:	31 db                	xor    ebx,ebx
c0028616:	85 ff                	test   edi,edi
c0028618:	0f 95 c3             	setne  bl
c002861b:	09 d8                	or     eax,ebx
c002861d:	89 c3                	mov    ebx,eax
c002861f:	c1 eb 08             	shr    ebx,0x8
c0028622:	a8 7f                	test   al,0x7f
c0028624:	0f 95 c2             	setne  dl
c0028627:	89 d6                	mov    esi,edx
c0028629:	09 de                	or     esi,ebx
c002862b:	83 e6 01             	and    esi,0x1
c002862e:	c1 e8 07             	shr    eax,0x7
c0028631:	21 f0                	and    eax,esi
c0028633:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028636:	09 ca                	or     edx,ecx
c0028638:	c1 e2 17             	shl    edx,0x17
c002863b:	09 da                	or     edx,ebx
c002863d:	01 d0                	add    eax,edx
c002863f:	83 c4 0c             	add    esp,0xc
c0028642:	5b                   	pop    ebx
c0028643:	5e                   	pop    esi
c0028644:	5f                   	pop    edi
c0028645:	5d                   	pop    ebp
c0028646:	c3                   	ret    

c0028647 <__extendsfdf2>:
c0028647:	55                   	push   ebp
c0028648:	89 e5                	mov    ebp,esp
c002864a:	57                   	push   edi
c002864b:	56                   	push   esi
c002864c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002864f:	89 d1                	mov    ecx,edx
c0028651:	c1 f9 17             	sar    ecx,0x17
c0028654:	c1 e2 08             	shl    edx,0x8
c0028657:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002865d:	89 c8                	mov    eax,ecx
c002865f:	80 e4 f8             	and    ah,0xf8
c0028662:	8d 71 01             	lea    esi,[ecx+0x1]
c0028665:	81 e6 fe 00 00 00    	and    esi,0xfe
c002866b:	75 27                	jne    c0028694 <__extendsfdf2+0x4d>
c002866d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028673:	75 18                	jne    c002868d <__extendsfdf2+0x46>
c0028675:	85 d2                	test   edx,edx
c0028677:	74 20                	je     c0028699 <__extendsfdf2+0x52>
c0028679:	41                   	inc    ecx
c002867a:	01 d2                	add    edx,edx
c002867c:	79 fb                	jns    c0028679 <__extendsfdf2+0x32>
c002867e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028684:	29 c8                	sub    eax,ecx
c0028686:	05 81 03 00 00       	add    eax,0x381
c002868b:	eb 0c                	jmp    c0028699 <__extendsfdf2+0x52>
c002868d:	05 00 07 00 00       	add    eax,0x700
c0028692:	eb 05                	jmp    c0028699 <__extendsfdf2+0x52>
c0028694:	05 80 03 00 00       	add    eax,0x380
c0028699:	c1 e0 14             	shl    eax,0x14
c002869c:	89 c1                	mov    ecx,eax
c002869e:	89 d0                	mov    eax,edx
c00286a0:	c1 e8 0b             	shr    eax,0xb
c00286a3:	09 c1                	or     ecx,eax
c00286a5:	c1 e2 15             	shl    edx,0x15
c00286a8:	89 d0                	mov    eax,edx
c00286aa:	89 ca                	mov    edx,ecx
c00286ac:	5e                   	pop    esi
c00286ad:	5f                   	pop    edi
c00286ae:	5d                   	pop    ebp
c00286af:	c3                   	ret    

c00286b0 <fabs>:
c00286b0:	83 ec 0c             	sub    esp,0xc
c00286b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286c7:	dd 04 24             	fld    QWORD PTR [esp]
c00286ca:	83 c4 0c             	add    esp,0xc
c00286cd:	c3                   	ret    
c00286ce:	66 90                	xchg   ax,ax

c00286d0 <lrint>:
c00286d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286d4:	83 ec 04             	sub    esp,0x4
c00286d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286da:	58                   	pop    eax
c00286db:	c3                   	ret    

c00286dc <lrintf>:
c00286dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286e0:	83 ec 04             	sub    esp,0x4
c00286e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286e6:	58                   	pop    eax
c00286e7:	c3                   	ret    

Disassembly of section .init:

c00286e8 <_init>:
c00286e8:	55                   	push   ebp
c00286e9:	89 e5                	mov    ebp,esp
c00286eb:	e8 28 7a fd ff       	call   c0000118 <frame_dummy>
c00286f0:	e8 63 e0 ff ff       	call   c0026758 <__do_global_ctors_aux>
c00286f5:	5d                   	pop    ebp
c00286f6:	c3                   	ret    

Disassembly of section .fini:

c00286f7 <_fini>:
c00286f7:	55                   	push   ebp
c00286f8:	89 e5                	mov    ebp,esp
c00286fa:	e8 a9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286ff:	5d                   	pop    ebp
c0028700:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028702 <Computer::~Computer()>:
c0028702:	83 ec 0c             	sub    esp,0xc
c0028705:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c002870a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870e:	89 10                	mov    DWORD PTR [eax],edx
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	83 ec 0c             	sub    esp,0xc
c0028717:	50                   	push   eax
c0028718:	e8 c5 bb fe ff       	call   c00142e2 <Device::~Device()>
c002871d:	83 c4 10             	add    esp,0x10
c0028720:	90                   	nop
c0028721:	83 c4 0c             	add    esp,0xc
c0028724:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028726 <Computer::~Computer()>:
c0028726:	83 ec 0c             	sub    esp,0xc
c0028729:	83 ec 0c             	sub    esp,0xc
c002872c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028730:	e8 cd ff ff ff       	call   c0028702 <Computer::~Computer()>
c0028735:	83 c4 10             	add    esp,0x10
c0028738:	83 ec 08             	sub    esp,0x8
c002873b:	68 ec 01 00 00       	push   0x1ec
c0028740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028744:	e8 c1 a7 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028749:	83 c4 10             	add    esp,0x10
c002874c:	83 c4 0c             	add    esp,0xc
c002874f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028750 <idleCommon()>:
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	e8 1e 57 ff ff       	call   c001de76 <lockScheduler()>
c0028758:	e8 55 5a ff ff       	call   c001e1b2 <schedule()>
c002875d:	83 c4 0c             	add    esp,0xc
c0028760:	e9 13 57 ff ff       	jmp    c001de78 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028766 <LinkedList<UnixFile>::~LinkedList()>:
c0028766:	90                   	nop
c0028767:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028768 <LinkedList<UnixFile>::LinkedList()>:
c0028768:	83 ec 0c             	sub    esp,0xc
c002876b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002878b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287ab:	83 ec 0c             	sub    esp,0xc
c00287ae:	68 56 a5 02 c0       	push   0xc002a556
c00287b3:	e8 32 a8 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00287b8:	83 c4 10             	add    esp,0x10
c00287bb:	90                   	nop
c00287bc:	83 c4 0c             	add    esp,0xc
c00287bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287c0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287c0:	83 ec 0c             	sub    esp,0xc
c00287c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287c8:	75 10                	jne    c00287da <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287ca:	83 ec 0c             	sub    esp,0xc
c00287cd:	68 70 a5 02 c0       	push   0xc002a570
c00287d2:	e8 c4 1e ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00287d7:	83 c4 10             	add    esp,0x10
c00287da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287de:	8b 00                	mov    eax,DWORD PTR [eax]
c00287e0:	85 c0                	test   eax,eax
c00287e2:	74 34                	je     c0028818 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287eb:	85 c0                	test   eax,eax
c00287ed:	74 29                	je     c0028818 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028801:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028805:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028816:	eb 65                	jmp    c002887d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 00                	mov    eax,DWORD PTR [eax]
c002881e:	85 c0                	test   eax,eax
c0028820:	75 4b                	jne    c002886d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	85 c0                	test   eax,eax
c002882b:	75 40                	jne    c002886d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028835:	89 10                	mov    DWORD PTR [eax],edx
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002883f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028854:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028857:	85 c0                	test   eax,eax
c0028859:	74 22                	je     c002887d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002885b:	83 ec 0c             	sub    esp,0xc
c002885e:	68 92 a5 02 c0       	push   0xc002a592
c0028863:	e8 33 1e ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028868:	83 c4 10             	add    esp,0x10
c002886b:	eb 10                	jmp    c002887d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002886d:	83 ec 0c             	sub    esp,0xc
c0028870:	68 9c a5 02 c0       	push   0xc002a59c
c0028875:	e8 21 1e ff ff       	call   c001a69b <Krnl::panic(char const*)>
c002887a:	83 c4 10             	add    esp,0x10
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028884:	8d 50 01             	lea    edx,[eax+0x1]
c0028887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002888e:	90                   	nop
c002888f:	83 c4 0c             	add    esp,0xc
c0028892:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028894 <LinkedList<UnixFile>::getFirstElement()>:
c0028894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028898:	8b 00                	mov    eax,DWORD PTR [eax]
c002889a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002889c <LinkedList<UnixFile>::removeFirst()>:
c002889c:	83 ec 0c             	sub    esp,0xc
c002889f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288a5:	85 c0                	test   eax,eax
c00288a7:	75 12                	jne    c00288bb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288a9:	83 ec 0c             	sub    esp,0xc
c00288ac:	68 a8 a5 02 c0       	push   0xc002a5a8
c00288b1:	e8 e5 1d ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00288b6:	83 c4 10             	add    esp,0x10
c00288b9:	eb 7e                	jmp    c0028939 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c5:	85 c0                	test   eax,eax
c00288c7:	74 10                	je     c00288d9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288c9:	83 ec 0c             	sub    esp,0xc
c00288cc:	68 f3 a5 02 c0       	push   0xc002a5f3
c00288d1:	e8 c5 1d ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00288d6:	83 c4 10             	add    esp,0x10
c00288d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e2:	85 c0                	test   eax,eax
c00288e4:	75 33                	jne    c0028919 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028902:	83 f8 01             	cmp    eax,0x1
c0028905:	74 21                	je     c0028928 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028907:	83 ec 0c             	sub    esp,0xc
c002890a:	68 cc a5 02 c0       	push   0xc002a5cc
c002890f:	e8 87 1d ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028914:	83 c4 10             	add    esp,0x10
c0028917:	eb 0f                	jmp    c0028928 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891d:	8b 00                	mov    eax,DWORD PTR [eax]
c002891f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	89 10                	mov    DWORD PTR [eax],edx
c0028928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002892f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028939:	83 c4 0c             	add    esp,0xc
c002893c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002893e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002893e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028942:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028945:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028946 <DriverlessDevice::~DriverlessDevice()>:
c0028946:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c002894b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002894f:	89 10                	mov    DWORD PTR [eax],edx
c0028951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028955:	50                   	push   eax
c0028956:	e8 87 b9 fe ff       	call   c00142e2 <Device::~Device()>
c002895b:	83 c4 04             	add    esp,0x4
c002895e:	90                   	nop
c002895f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028960 <DriverlessDevice::~DriverlessDevice()>:
c0028960:	83 ec 0c             	sub    esp,0xc
c0028963:	83 ec 0c             	sub    esp,0xc
c0028966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002896a:	e8 d7 ff ff ff       	call   c0028946 <DriverlessDevice::~DriverlessDevice()>
c002896f:	83 c4 10             	add    esp,0x10
c0028972:	83 ec 08             	sub    esp,0x8
c0028975:	68 58 01 00 00       	push   0x158
c002897a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002897e:	e8 87 a5 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028983:	83 c4 10             	add    esp,0x10
c0028986:	83 c4 0c             	add    esp,0xc
c0028989:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002898a <LinkedList<Device>::addElement(Device*)>:
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028992:	75 10                	jne    c00289a4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028994:	83 ec 0c             	sub    esp,0xc
c0028997:	68 70 a5 02 c0       	push   0xc002a570
c002899c:	e8 fa 1c ff ff       	call   c001a69b <Krnl::panic(char const*)>
c00289a1:	83 c4 10             	add    esp,0x10
c00289a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289aa:	85 c0                	test   eax,eax
c00289ac:	74 3a                	je     c00289e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b5:	85 c0                	test   eax,eax
c00289b7:	74 2f                	je     c00289e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289c4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289dc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289e6:	eb 68                	jmp    c0028a50 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ee:	85 c0                	test   eax,eax
c00289f0:	75 4e                	jne    c0028a40 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f9:	85 c0                	test   eax,eax
c00289fb:	75 43                	jne    c0028a40 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a05:	89 10                	mov    DWORD PTR [eax],edx
c0028a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a19:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a2a:	85 c0                	test   eax,eax
c0028a2c:	74 22                	je     c0028a50 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a2e:	83 ec 0c             	sub    esp,0xc
c0028a31:	68 92 a5 02 c0       	push   0xc002a592
c0028a36:	e8 60 1c ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028a3b:	83 c4 10             	add    esp,0x10
c0028a3e:	eb 10                	jmp    c0028a50 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a40:	83 ec 0c             	sub    esp,0xc
c0028a43:	68 9c a5 02 c0       	push   0xc002a59c
c0028a48:	e8 4e 1c ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028a4d:	83 c4 10             	add    esp,0x10
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a57:	8d 50 01             	lea    edx,[eax+0x1]
c0028a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a61:	90                   	nop
c0028a62:	83 c4 0c             	add    esp,0xc
c0028a65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a66 <LinkedList<Device>::LinkedList()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028aa9:	83 ec 0c             	sub    esp,0xc
c0028aac:	68 56 a5 02 c0       	push   0xc002a556
c0028ab1:	e8 34 a5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0028ab6:	83 c4 10             	add    esp,0x10
c0028ab9:	90                   	nop
c0028aba:	83 c4 0c             	add    esp,0xc
c0028abd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028abe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028ac6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0028acc:	85 c0                	test   eax,eax
c0028ace:	75 0e                	jne    c0028ade <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ad7:	85 c0                	test   eax,eax
c0028ad9:	75 03                	jne    c0028ade <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028adb:	b0 01                	mov    al,0x1
c0028add:	c3                   	ret    
c0028ade:	b0 00                	mov    al,0x0
c0028ae0:	90                   	nop
c0028ae1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028ae2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028ae2:	83 ec 0c             	sub    esp,0xc
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aeb:	85 c0                	test   eax,eax
c0028aed:	75 15                	jne    c0028b04 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028aef:	83 ec 0c             	sub    esp,0xc
c0028af2:	68 a8 a5 02 c0       	push   0xc002a5a8
c0028af7:	e8 9f 1b ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028afc:	83 c4 10             	add    esp,0x10
c0028aff:	e9 88 00 00 00       	jmp    c0028b8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b0e:	85 c0                	test   eax,eax
c0028b10:	0f 95 c0             	setne  al
c0028b13:	84 c0                	test   al,al
c0028b15:	74 10                	je     c0028b27 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b17:	83 ec 0c             	sub    esp,0xc
c0028b1a:	68 f3 a5 02 c0       	push   0xc002a5f3
c0028b1f:	e8 77 1b ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028b24:	83 c4 10             	add    esp,0x10
c0028b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b30:	85 c0                	test   eax,eax
c0028b32:	0f 94 c0             	sete   al
c0028b35:	84 c0                	test   al,al
c0028b37:	74 33                	je     c0028b6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b55:	83 f8 01             	cmp    eax,0x1
c0028b58:	74 21                	je     c0028b7b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b5a:	83 ec 0c             	sub    esp,0xc
c0028b5d:	68 cc a5 02 c0       	push   0xc002a5cc
c0028b62:	e8 34 1b ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028b67:	83 c4 10             	add    esp,0x10
c0028b6a:	eb 0f                	jmp    c0028b7b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b72:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b79:	89 10                	mov    DWORD PTR [eax],edx
c0028b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b82:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b89:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b8c:	83 c4 0c             	add    esp,0xc
c0028b8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b90:	83 ec 0c             	sub    esp,0xc
c0028b93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b98:	75 10                	jne    c0028baa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b9a:	83 ec 0c             	sub    esp,0xc
c0028b9d:	68 70 a5 02 c0       	push   0xc002a570
c0028ba2:	e8 f4 1a ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028ba7:	83 c4 10             	add    esp,0x10
c0028baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bb0:	85 c0                	test   eax,eax
c0028bb2:	74 34                	je     c0028be8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bbb:	85 c0                	test   eax,eax
c0028bbd:	74 29                	je     c0028be8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bd5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bdf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028be6:	eb 65                	jmp    c0028c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bee:	85 c0                	test   eax,eax
c0028bf0:	75 4b                	jne    c0028c3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bf9:	85 c0                	test   eax,eax
c0028bfb:	75 40                	jne    c0028c3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c05:	89 10                	mov    DWORD PTR [eax],edx
c0028c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c19:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c27:	85 c0                	test   eax,eax
c0028c29:	74 22                	je     c0028c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c2b:	83 ec 0c             	sub    esp,0xc
c0028c2e:	68 92 a5 02 c0       	push   0xc002a592
c0028c33:	e8 63 1a ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028c38:	83 c4 10             	add    esp,0x10
c0028c3b:	eb 10                	jmp    c0028c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c3d:	83 ec 0c             	sub    esp,0xc
c0028c40:	68 9c a5 02 c0       	push   0xc002a59c
c0028c45:	e8 51 1a ff ff       	call   c001a69b <Krnl::panic(char const*)>
c0028c4a:	83 c4 10             	add    esp,0x10
c0028c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c54:	8d 50 01             	lea    edx,[eax+0x1]
c0028c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c5e:	90                   	nop
c0028c5f:	83 c4 0c             	add    esp,0xc
c0028c62:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c64 <ACPI::~ACPI()>:
c0028c64:	83 ec 0c             	sub    esp,0xc
c0028c67:	ba 18 b7 02 c0       	mov    edx,0xc002b718
c0028c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c70:	89 10                	mov    DWORD PTR [eax],edx
c0028c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c76:	83 ec 0c             	sub    esp,0xc
c0028c79:	50                   	push   eax
c0028c7a:	e8 63 b6 fe ff       	call   c00142e2 <Device::~Device()>
c0028c7f:	83 c4 10             	add    esp,0x10
c0028c82:	90                   	nop
c0028c83:	83 c4 0c             	add    esp,0xc
c0028c86:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c88 <ACPI::~ACPI()>:
c0028c88:	83 ec 0c             	sub    esp,0xc
c0028c8b:	83 ec 0c             	sub    esp,0xc
c0028c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c92:	e8 cd ff ff ff       	call   c0028c64 <ACPI::~ACPI()>
c0028c97:	83 c4 10             	add    esp,0x10
c0028c9a:	83 ec 08             	sub    esp,0x8
c0028c9d:	68 68 12 00 00       	push   0x1268
c0028ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca6:	e8 5f a2 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028cab:	83 c4 10             	add    esp,0x10
c0028cae:	83 c4 0c             	add    esp,0xc
c0028cb1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028cb2 <CPU::~CPU()>:
c0028cb2:	83 ec 0c             	sub    esp,0xc
c0028cb5:	ba 08 bb 02 c0       	mov    edx,0xc002bb08
c0028cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbe:	89 10                	mov    DWORD PTR [eax],edx
c0028cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc4:	83 ec 0c             	sub    esp,0xc
c0028cc7:	50                   	push   eax
c0028cc8:	e8 15 b6 fe ff       	call   c00142e2 <Device::~Device()>
c0028ccd:	83 c4 10             	add    esp,0x10
c0028cd0:	90                   	nop
c0028cd1:	83 c4 0c             	add    esp,0xc
c0028cd4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028cd6 <CPU::~CPU()>:
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	83 ec 0c             	sub    esp,0xc
c0028cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce0:	e8 cd ff ff ff       	call   c0028cb2 <CPU::~CPU()>
c0028ce5:	83 c4 10             	add    esp,0x10
c0028ce8:	83 ec 08             	sub    esp,0x8
c0028ceb:	68 98 11 00 00       	push   0x1198
c0028cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf4:	e8 11 a2 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028cf9:	83 c4 10             	add    esp,0x10
c0028cfc:	83 c4 0c             	add    esp,0xc
c0028cff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d00 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d00:	90                   	nop
c0028d01:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d02 <ThreadControlBlock::ThreadControlBlock()>:
c0028d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d06:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d11:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d1c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d27:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d32:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d3a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d3e:	90                   	nop
c0028d3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d40:	83 ec 0c             	sub    esp,0xc
c0028d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d83:	83 ec 0c             	sub    esp,0xc
c0028d86:	68 56 a5 02 c0       	push   0xc002a556
c0028d8b:	e8 5a a2 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0028d90:	83 c4 10             	add    esp,0x10
c0028d93:	90                   	nop
c0028d94:	83 c4 0c             	add    esp,0xc
c0028d97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d98 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d9f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028da0 <Vm::_FPUState::_FPUState()>:
c0028da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028da4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dab:	90                   	nop
c0028dac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dae <PCI::~PCI()>:
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	ba 7c cb 02 c0       	mov    edx,0xc002cb7c
c0028db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dba:	89 10                	mov    DWORD PTR [eax],edx
c0028dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	50                   	push   eax
c0028dc4:	e8 f1 ae fe ff       	call   c0013cba <Bus::~Bus()>
c0028dc9:	83 c4 10             	add    esp,0x10
c0028dcc:	90                   	nop
c0028dcd:	83 c4 0c             	add    esp,0xc
c0028dd0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028dd2 <PCI::~PCI()>:
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	83 ec 0c             	sub    esp,0xc
c0028dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ddc:	e8 cd ff ff ff       	call   c0028dae <PCI::~PCI()>
c0028de1:	83 c4 10             	add    esp,0x10
c0028de4:	83 ec 08             	sub    esp,0x8
c0028de7:	68 58 01 00 00       	push   0x158
c0028dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df0:	e8 15 a1 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028df5:	83 c4 10             	add    esp,0x10
c0028df8:	83 c4 0c             	add    esp,0xc
c0028dfb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028dfc <IDE::~IDE()>:
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	ba e0 cd 02 c0       	mov    edx,0xc002cde0
c0028e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e08:	89 10                	mov    DWORD PTR [eax],edx
c0028e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	50                   	push   eax
c0028e12:	e8 bb b9 fe ff       	call   c00147d2 <HardDiskController::~HardDiskController()>
c0028e17:	83 c4 10             	add    esp,0x10
c0028e1a:	90                   	nop
c0028e1b:	83 c4 0c             	add    esp,0xc
c0028e1e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e20 <IDE::~IDE()>:
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	83 ec 0c             	sub    esp,0xc
c0028e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2a:	e8 cd ff ff ff       	call   c0028dfc <IDE::~IDE()>
c0028e2f:	83 c4 10             	add    esp,0x10
c0028e32:	83 ec 08             	sub    esp,0x8
c0028e35:	68 70 02 00 00       	push   0x270
c0028e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3e:	e8 c7 a0 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028e43:	83 c4 10             	add    esp,0x10
c0028e46:	83 c4 0c             	add    esp,0xc
c0028e49:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e4a <SATABus::~SATABus()>:
c0028e4a:	83 ec 0c             	sub    esp,0xc
c0028e4d:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0028e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e56:	89 10                	mov    DWORD PTR [eax],edx
c0028e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	50                   	push   eax
c0028e60:	e8 6d b9 fe ff       	call   c00147d2 <HardDiskController::~HardDiskController()>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	90                   	nop
c0028e69:	83 c4 0c             	add    esp,0xc
c0028e6c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e6e <SATABus::~SATABus()>:
c0028e6e:	83 ec 0c             	sub    esp,0xc
c0028e71:	83 ec 0c             	sub    esp,0xc
c0028e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e78:	e8 cd ff ff ff       	call   c0028e4a <SATABus::~SATABus()>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	83 ec 08             	sub    esp,0x8
c0028e83:	68 64 01 00 00       	push   0x164
c0028e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8c:	e8 79 a0 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028e91:	83 c4 10             	add    esp,0x10
c0028e94:	83 c4 0c             	add    esp,0xc
c0028e97:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e98 <ATA::~ATA()>:
c0028e98:	83 ec 0c             	sub    esp,0xc
c0028e9b:	ba 0c cf 02 c0       	mov    edx,0xc002cf0c
c0028ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea4:	89 10                	mov    DWORD PTR [eax],edx
c0028ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	50                   	push   eax
c0028eae:	e8 11 ba fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028eb3:	83 c4 10             	add    esp,0x10
c0028eb6:	90                   	nop
c0028eb7:	83 c4 0c             	add    esp,0xc
c0028eba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ebc <ATA::~ATA()>:
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	83 ec 0c             	sub    esp,0xc
c0028ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec6:	e8 cd ff ff ff       	call   c0028e98 <ATA::~ATA()>
c0028ecb:	83 c4 10             	add    esp,0x10
c0028ece:	83 ec 08             	sub    esp,0x8
c0028ed1:	68 7c 01 00 00       	push   0x17c
c0028ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eda:	e8 2b a0 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028edf:	83 c4 10             	add    esp,0x10
c0028ee2:	83 c4 0c             	add    esp,0xc
c0028ee5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ee6 <ATAPI::~ATAPI()>:
c0028ee6:	83 ec 0c             	sub    esp,0xc
c0028ee9:	ba 44 cf 02 c0       	mov    edx,0xc002cf44
c0028eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef2:	89 10                	mov    DWORD PTR [eax],edx
c0028ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef8:	83 ec 0c             	sub    esp,0xc
c0028efb:	50                   	push   eax
c0028efc:	e8 c3 b9 fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028f01:	83 c4 10             	add    esp,0x10
c0028f04:	90                   	nop
c0028f05:	83 c4 0c             	add    esp,0xc
c0028f08:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f0a <ATAPI::~ATAPI()>:
c0028f0a:	83 ec 0c             	sub    esp,0xc
c0028f0d:	83 ec 0c             	sub    esp,0xc
c0028f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f14:	e8 cd ff ff ff       	call   c0028ee6 <ATAPI::~ATAPI()>
c0028f19:	83 c4 10             	add    esp,0x10
c0028f1c:	83 ec 08             	sub    esp,0x8
c0028f1f:	68 80 01 00 00       	push   0x180
c0028f24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f28:	e8 dd 9f fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028f2d:	83 c4 10             	add    esp,0x10
c0028f30:	83 c4 0c             	add    esp,0xc
c0028f33:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f34 <SATA::~SATA()>:
c0028f34:	83 ec 0c             	sub    esp,0xc
c0028f37:	ba f8 cf 02 c0       	mov    edx,0xc002cff8
c0028f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f40:	89 10                	mov    DWORD PTR [eax],edx
c0028f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	50                   	push   eax
c0028f4a:	e8 75 b9 fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028f4f:	83 c4 10             	add    esp,0x10
c0028f52:	90                   	nop
c0028f53:	83 c4 0c             	add    esp,0xc
c0028f56:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f58 <SATA::~SATA()>:
c0028f58:	83 ec 0c             	sub    esp,0xc
c0028f5b:	83 ec 0c             	sub    esp,0xc
c0028f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f62:	e8 cd ff ff ff       	call   c0028f34 <SATA::~SATA()>
c0028f67:	83 c4 10             	add    esp,0x10
c0028f6a:	83 ec 08             	sub    esp,0x8
c0028f6d:	68 7c 01 00 00       	push   0x17c
c0028f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f76:	e8 8f 9f fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028f7b:	83 c4 10             	add    esp,0x10
c0028f7e:	83 c4 0c             	add    esp,0xc
c0028f81:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f82 <SATAPI::~SATAPI()>:
c0028f82:	83 ec 0c             	sub    esp,0xc
c0028f85:	ba d4 d0 02 c0       	mov    edx,0xc002d0d4
c0028f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8e:	89 10                	mov    DWORD PTR [eax],edx
c0028f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	50                   	push   eax
c0028f98:	e8 27 b9 fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028f9d:	83 c4 10             	add    esp,0x10
c0028fa0:	90                   	nop
c0028fa1:	83 c4 0c             	add    esp,0xc
c0028fa4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028fa6 <SATAPI::~SATAPI()>:
c0028fa6:	83 ec 0c             	sub    esp,0xc
c0028fa9:	83 ec 0c             	sub    esp,0xc
c0028fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb0:	e8 cd ff ff ff       	call   c0028f82 <SATAPI::~SATAPI()>
c0028fb5:	83 c4 10             	add    esp,0x10
c0028fb8:	83 ec 08             	sub    esp,0x8
c0028fbb:	68 80 01 00 00       	push   0x180
c0028fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc4:	e8 41 9f fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028fc9:	83 c4 10             	add    esp,0x10
c0028fcc:	83 c4 0c             	add    esp,0xc
c0028fcf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028fd0 <AVX::~AVX()>:
c0028fd0:	83 ec 0c             	sub    esp,0xc
c0028fd3:	ba 14 d1 02 c0       	mov    edx,0xc002d114
c0028fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdc:	89 10                	mov    DWORD PTR [eax],edx
c0028fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe2:	83 ec 0c             	sub    esp,0xc
c0028fe5:	50                   	push   eax
c0028fe6:	e8 5d b9 fe ff       	call   c0014948 <FPU::~FPU()>
c0028feb:	83 c4 10             	add    esp,0x10
c0028fee:	90                   	nop
c0028fef:	83 c4 0c             	add    esp,0xc
c0028ff2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028ff4 <AVX::~AVX()>:
c0028ff4:	83 ec 0c             	sub    esp,0xc
c0028ff7:	83 ec 0c             	sub    esp,0xc
c0028ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffe:	e8 cd ff ff ff       	call   c0028fd0 <AVX::~AVX()>
c0029003:	83 c4 10             	add    esp,0x10
c0029006:	83 ec 08             	sub    esp,0x8
c0029009:	68 58 01 00 00       	push   0x158
c002900e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029012:	e8 f3 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029017:	83 c4 10             	add    esp,0x10
c002901a:	83 c4 0c             	add    esp,0xc
c002901d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002901e <MMX::~MMX()>:
c002901e:	83 ec 0c             	sub    esp,0xc
c0029021:	ba 54 d1 02 c0       	mov    edx,0xc002d154
c0029026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902a:	89 10                	mov    DWORD PTR [eax],edx
c002902c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029030:	83 ec 0c             	sub    esp,0xc
c0029033:	50                   	push   eax
c0029034:	e8 0f b9 fe ff       	call   c0014948 <FPU::~FPU()>
c0029039:	83 c4 10             	add    esp,0x10
c002903c:	90                   	nop
c002903d:	83 c4 0c             	add    esp,0xc
c0029040:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029042 <MMX::~MMX()>:
c0029042:	83 ec 0c             	sub    esp,0xc
c0029045:	83 ec 0c             	sub    esp,0xc
c0029048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904c:	e8 cd ff ff ff       	call   c002901e <MMX::~MMX()>
c0029051:	83 c4 10             	add    esp,0x10
c0029054:	83 ec 08             	sub    esp,0x8
c0029057:	68 58 01 00 00       	push   0x158
c002905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029060:	e8 a5 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029065:	83 c4 10             	add    esp,0x10
c0029068:	83 c4 0c             	add    esp,0xc
c002906b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002906c <SSE::~SSE()>:
c002906c:	83 ec 0c             	sub    esp,0xc
c002906f:	ba 94 d1 02 c0       	mov    edx,0xc002d194
c0029074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029078:	89 10                	mov    DWORD PTR [eax],edx
c002907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907e:	83 ec 0c             	sub    esp,0xc
c0029081:	50                   	push   eax
c0029082:	e8 c1 b8 fe ff       	call   c0014948 <FPU::~FPU()>
c0029087:	83 c4 10             	add    esp,0x10
c002908a:	90                   	nop
c002908b:	83 c4 0c             	add    esp,0xc
c002908e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029090 <SSE::~SSE()>:
c0029090:	83 ec 0c             	sub    esp,0xc
c0029093:	83 ec 0c             	sub    esp,0xc
c0029096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909a:	e8 cd ff ff ff       	call   c002906c <SSE::~SSE()>
c002909f:	83 c4 10             	add    esp,0x10
c00290a2:	83 ec 08             	sub    esp,0x8
c00290a5:	68 58 01 00 00       	push   0x158
c00290aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ae:	e8 57 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00290b3:	83 c4 10             	add    esp,0x10
c00290b6:	83 c4 0c             	add    esp,0xc
c00290b9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290ba <x87::~x87()>:
c00290ba:	83 ec 0c             	sub    esp,0xc
c00290bd:	ba d4 d1 02 c0       	mov    edx,0xc002d1d4
c00290c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c6:	89 10                	mov    DWORD PTR [eax],edx
c00290c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	50                   	push   eax
c00290d0:	e8 73 b8 fe ff       	call   c0014948 <FPU::~FPU()>
c00290d5:	83 c4 10             	add    esp,0x10
c00290d8:	90                   	nop
c00290d9:	83 c4 0c             	add    esp,0xc
c00290dc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290de <x87::~x87()>:
c00290de:	83 ec 0c             	sub    esp,0xc
c00290e1:	83 ec 0c             	sub    esp,0xc
c00290e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e8:	e8 cd ff ff ff       	call   c00290ba <x87::~x87()>
c00290ed:	83 c4 10             	add    esp,0x10
c00290f0:	83 ec 08             	sub    esp,0x8
c00290f3:	68 58 01 00 00       	push   0x158
c00290f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fc:	e8 09 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029101:	83 c4 10             	add    esp,0x10
c0029104:	83 c4 0c             	add    esp,0xc
c0029107:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029108 <IOAPIC::~IOAPIC()>:
c0029108:	83 ec 0c             	sub    esp,0xc
c002910b:	ba 2c d3 02 c0       	mov    edx,0xc002d32c
c0029110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029114:	89 10                	mov    DWORD PTR [eax],edx
c0029116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911a:	83 ec 0c             	sub    esp,0xc
c002911d:	50                   	push   eax
c002911e:	e8 bf b1 fe ff       	call   c00142e2 <Device::~Device()>
c0029123:	83 c4 10             	add    esp,0x10
c0029126:	90                   	nop
c0029127:	83 c4 0c             	add    esp,0xc
c002912a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002912c <IOAPIC::~IOAPIC()>:
c002912c:	83 ec 0c             	sub    esp,0xc
c002912f:	83 ec 0c             	sub    esp,0xc
c0029132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029136:	e8 cd ff ff ff       	call   c0029108 <IOAPIC::~IOAPIC()>
c002913b:	83 c4 10             	add    esp,0x10
c002913e:	83 ec 08             	sub    esp,0x8
c0029141:	68 68 01 00 00       	push   0x168
c0029146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002914a:	e8 bb 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c002914f:	83 c4 10             	add    esp,0x10
c0029152:	83 c4 0c             	add    esp,0xc
c0029155:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029156 <APIC::~APIC()>:
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	ba e4 d2 02 c0       	mov    edx,0xc002d2e4
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	89 10                	mov    DWORD PTR [eax],edx
c0029164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029168:	83 ec 0c             	sub    esp,0xc
c002916b:	50                   	push   eax
c002916c:	e8 a1 bc fe ff       	call   c0014e12 <InterruptController::~InterruptController()>
c0029171:	83 c4 10             	add    esp,0x10
c0029174:	90                   	nop
c0029175:	83 c4 0c             	add    esp,0xc
c0029178:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002917a <APIC::~APIC()>:
c002917a:	83 ec 0c             	sub    esp,0xc
c002917d:	83 ec 0c             	sub    esp,0xc
c0029180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029184:	e8 cd ff ff ff       	call   c0029156 <APIC::~APIC()>
c0029189:	83 c4 10             	add    esp,0x10
c002918c:	83 ec 08             	sub    esp,0x8
c002918f:	68 58 21 00 00       	push   0x2158
c0029194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029198:	e8 6d 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c002919d:	83 c4 10             	add    esp,0x10
c00291a0:	83 c4 0c             	add    esp,0xc
c00291a3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291a4 <PIC::~PIC()>:
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	ba 7c d3 02 c0       	mov    edx,0xc002d37c
c00291ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b0:	89 10                	mov    DWORD PTR [eax],edx
c00291b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b6:	83 ec 0c             	sub    esp,0xc
c00291b9:	50                   	push   eax
c00291ba:	e8 53 bc fe ff       	call   c0014e12 <InterruptController::~InterruptController()>
c00291bf:	83 c4 10             	add    esp,0x10
c00291c2:	90                   	nop
c00291c3:	83 c4 0c             	add    esp,0xc
c00291c6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291c8 <PIC::~PIC()>:
c00291c8:	83 ec 0c             	sub    esp,0xc
c00291cb:	83 ec 0c             	sub    esp,0xc
c00291ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d2:	e8 cd ff ff ff       	call   c00291a4 <PIC::~PIC()>
c00291d7:	83 c4 10             	add    esp,0x10
c00291da:	83 ec 08             	sub    esp,0x8
c00291dd:	68 58 21 00 00       	push   0x2158
c00291e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e6:	e8 1f 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00291eb:	83 c4 10             	add    esp,0x10
c00291ee:	83 c4 0c             	add    esp,0xc
c00291f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291f2 <APICTimer::~APICTimer()>:
c00291f2:	83 ec 0c             	sub    esp,0xc
c00291f5:	ba d0 d3 02 c0       	mov    edx,0xc002d3d0
c00291fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fe:	89 10                	mov    DWORD PTR [eax],edx
c0029200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029204:	83 ec 0c             	sub    esp,0xc
c0029207:	50                   	push   eax
c0029208:	e8 61 db fe ff       	call   c0016d6e <Timer::~Timer()>
c002920d:	83 c4 10             	add    esp,0x10
c0029210:	90                   	nop
c0029211:	83 c4 0c             	add    esp,0xc
c0029214:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029216 <APICTimer::~APICTimer()>:
c0029216:	83 ec 0c             	sub    esp,0xc
c0029219:	83 ec 0c             	sub    esp,0xc
c002921c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029220:	e8 cd ff ff ff       	call   c00291f2 <APICTimer::~APICTimer()>
c0029225:	83 c4 10             	add    esp,0x10
c0029228:	83 ec 08             	sub    esp,0x8
c002922b:	68 60 01 00 00       	push   0x160
c0029230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029234:	e8 d1 9c fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029239:	83 c4 10             	add    esp,0x10
c002923c:	83 c4 0c             	add    esp,0xc
c002923f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029240 <PIT::~PIT()>:
c0029240:	83 ec 0c             	sub    esp,0xc
c0029243:	ba 20 d4 02 c0       	mov    edx,0xc002d420
c0029248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924c:	89 10                	mov    DWORD PTR [eax],edx
c002924e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029252:	83 ec 0c             	sub    esp,0xc
c0029255:	50                   	push   eax
c0029256:	e8 13 db fe ff       	call   c0016d6e <Timer::~Timer()>
c002925b:	83 c4 10             	add    esp,0x10
c002925e:	90                   	nop
c002925f:	83 c4 0c             	add    esp,0xc
c0029262:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029264 <PIT::~PIT()>:
c0029264:	83 ec 0c             	sub    esp,0xc
c0029267:	83 ec 0c             	sub    esp,0xc
c002926a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002926e:	e8 cd ff ff ff       	call   c0029240 <PIT::~PIT()>
c0029273:	83 c4 10             	add    esp,0x10
c0029276:	83 ec 08             	sub    esp,0x8
c0029279:	68 5c 01 00 00       	push   0x15c
c002927e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029282:	e8 83 9c fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029287:	83 c4 10             	add    esp,0x10
c002928a:	83 c4 0c             	add    esp,0xc
c002928d:	c3                   	ret    
