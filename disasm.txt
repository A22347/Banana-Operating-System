
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 86 02 00       	call   c0028698 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 92 02 c0       	mov    ebx,0xc0029242
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 92 02 c0    	cmp    ebx,0xc0029250
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 db 02 c0       	mov    eax,0xc002db98
c0000049:	3d 98 db 02 c0       	cmp    eax,0xc002db98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 db 02 c0       	push   0xc002db98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 db 02 c0       	mov    eax,0xc002db98
c0000075:	2d 98 db 02 c0       	sub    eax,0xc002db98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 db 02 c0       	push   0xc002db98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 92 02 c0       	mov    ebx,0xc0029258
c00000bb:	81 eb 54 92 02 c0    	sub    ebx,0xc0029254
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 92 02 c0       	mov    esi,0xc0029254
c00000ca:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc e1 02 c0       	mov    ds:0xc002e1cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 db 02 c0       	push   0xc002db98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 e1 02 c0       	push   0xc002e1d0
c000012c:	68 98 db 02 c0       	push   0xc002db98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 4b d6 01 00       	call   c001d9e6 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 84 29 01 00       	call   c0012d37 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 29 d6 01 00       	call   c001d9e6 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 77 da 01 00       	call   c001de53 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 25 e0 01 00       	call   c001e40a <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 e6 02 c0 	lgdtd  ds:0xc002e610
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 62 46 01 00       	call   c0014c3b <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 e1 02 c0       	mov    ds:0xc002e1e8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1e8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6da0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6da0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6da0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e200
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1dfc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1dfc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e23c
c0000e60:	c7 42 0c 34 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e234
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 e2 02 c0 02 	test   BYTE PTR ds:0xc002e200,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e200
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1dfc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dfc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 e2 02 c0 	lea    edx,[eax*8-0x3ffd1dcc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e240
c00011e2:	81 fb 34 e2 02 c0    	cmp    ebx,0xc002e234
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 e2 02 c0       	cmp    eax,0xc002e234
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 e2 02 c0    	cmp    DWORD PTR ds:0xc002e230,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c e2 02 c0       	mov    ds:0xc002e23c,eax
c000121e:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c0001223:	a3 30 e2 02 c0       	mov    ds:0xc002e230,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e234
c0001231:	c7 40 0c 34 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e234
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e234
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e08]
c0001282:	8b 14 95 00 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e00]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1e00]
c000129d:	8b 14 95 00 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e00]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1acc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 e2 02 c0 	lea    eax,[eax*8-0x3ffd1dcc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,ecx
c0001357:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c000135d:	c7 41 08 34 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e234
c0001364:	c7 41 0c 34 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e234
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1dd4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1acc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1acc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c e2 02 c0 	lea    edx,[eax*4-0x3ffd1dd4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1acc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,edi
c000142a:	89 3d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,edi
c0001430:	c7 47 08 34 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e234
c0001437:	c7 47 0c 34 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e234
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 e2 02 c0       	mov    edx,0xc002e200
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e554
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 e5 02 c0    	mov    DWORD PTR ds:0xc002e554,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c e5 02 c0    	push   DWORD PTR ds:0xc002e55c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c e5 02 c0       	mov    eax,ds:0xc002e55c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e22c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dfc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 e2 02 c0       	mov    eax,0xc002e234
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c e5 02 c0       	cmp    eax,0xc002e52c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e550
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e564
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e574
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c9c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 e5 02 c0    	mov    DWORD PTR ds:0xc002e548,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c e5 02 c0    	mov    DWORD PTR ds:0xc002e54c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce320]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 d6 f1 01 00       	jmp    c0020e02 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce320]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 07 f2 01 00       	jmp    c0020e49 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce320]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 2f f2 01 00       	jmp    c0020e90 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 b8 4a 02 00       	call   c00269fc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b80]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b80]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 0c ca 02 c0       	mov    edx,0xc002ca0c
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 94 02 c0       	mov    edx,0xc0029490
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a60]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 e5 02 c0    	mov    ax,ds:0xc002e580
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 e5 02 c0    	mov    ds:0xc002e580,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 b5 38 02 00       	call   c00269fc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c00]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 94 02 c0       	mov    eax,0xc00294bb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b80]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 80 22 02 00       	call   c00269fc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 94 02 c0       	mov    edx,0xc0029490
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a60]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a60],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 47 0c 02 00       	call   c00269fc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 2d 0c 02 00       	call   c00269fc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 93 02 c0       	mov    eax,0xc00293d7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 93 02 c0       	mov    eax,0xc00293d0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a60]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 93 02 c0       	mov    esi,0xc00293c0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 70 f3 01 00       	call   c00269fc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 94 02 c0       	mov    edx,0xc00294ce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029800
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029800
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 95 02 c0       	mov    eax,0xc0029540
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 c4 fc 01 00       	call   c00284cf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 87 fc 01 00       	call   c00284b1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 5b fc 01 00       	call   c00284cf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 0e f3 01 00       	call   c0027bd4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 88 fd 01 00       	call   c0028660 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 d5 fb 01 00       	call   c00284cf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 17 fb 01 00       	call   c00284cf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 e4 fa 01 00       	call   c00284b1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 d1 f9 01 00       	call   c00284cf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 99 f9 01 00       	call   c00284b1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 a5 f7 01 00       	call   c00284cf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 6a f7 01 00       	call   c00284b1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 7a f4 01 00       	call   c0028263 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 f8 ed 01 00       	call   c0027c00 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 b4 f6 01 00       	call   c00284d3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 a2 f7 01 00       	call   c00285f7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 8c ed 01 00       	call   c0027c00 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 37 f6 01 00       	call   c00284cd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 18 f6 01 00       	call   c00284d1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 a6 f7 01 00       	call   c0028680 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 58 f3 01 00       	call   c0028263 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 d6 ec 01 00       	call   c0027c00 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 92 f5 01 00       	call   c00284d3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 80 f6 01 00       	call   c00285f7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 6a ec 01 00       	call   c0027c00 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 15 f5 01 00       	call   c00284cd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 f5 f4 01 00       	call   c00284d1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 82 f6 01 00       	call   c0028680 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 30 f4 01 00       	call   c00284cf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ee f3 01 00       	call   c00284b1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 d6 f3 01 00       	call   c00284cf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 48 f1 01 00       	call   c0028263 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 4a e4 01 00       	call   c0027583 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ad ea 01 00       	call   c0027c00 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ff f0 01 00       	call   c0028263 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 05 e4 01 00       	call   c0027583 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 d4 f0 01 00       	call   c0028263 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 24 f3 01 00       	call   c00284cd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 01 ea 01 00       	call   c0027bd4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 7b f4 01 00       	call   c0028660 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 aa f2 01 00       	call   c00284b1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 a5 e9 01 00       	call   c0027bd4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 23 f0 01 00       	call   c0028263 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 a6 e9 01 00       	call   c0027c00 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 f8 ef 01 00       	call   c0028263 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 5f ec 01 00       	call   c0027ee4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 de e2 01 00       	call   c0027583 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 3e dc 01 00       	call   c0026f18 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 15 f3 01 00       	call   c00285f7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 fe e8 01 00       	call   c0027c00 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 e5 f2 01 00       	call   c00285f7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 57 e2 01 00       	call   c0027583 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 90 f1 01 00       	call   c00284d3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 78 eb 01 00       	call   c0027ee4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 fe e1 01 00       	call   c0027583 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 e4 f2 01 00       	call   c0028680 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 be ee 01 00       	call   c0028263 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 15 e8 01 00       	call   c0027bd4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 f4 f0 01 00       	call   c00284cf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 8d e1 01 00       	call   c0027583 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 b9 e7 01 00       	call   c0027bd4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 53 f2 01 00       	call   c0028680 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 0c ee 01 00       	call   c0028263 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 89 e7 01 00       	call   c0027c00 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 dc ed 01 00       	call   c0028263 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 e2 e0 01 00       	call   c0027583 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 b2 ed 01 00       	call   c0028263 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 04 f0 01 00       	call   c00284cf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 db e6 01 00       	call   c0027bd4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 55 f1 01 00       	call   c0028660 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 84 ef 01 00       	call   c00284b1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 7e e6 01 00       	call   c0027bd4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 fc ec 01 00       	call   c0028263 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 7f e6 01 00       	call   c0027c00 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 d1 ec 01 00       	call   c0028263 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 38 e9 01 00       	call   c0027ee4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 b7 df 01 00       	call   c0027583 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 07 d9 01 00       	call   c0026f18 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 de ef 01 00       	call   c00285f7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 c7 e5 01 00       	call   c0027c00 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ae ef 01 00       	call   c00285f7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 20 df 01 00       	call   c0027583 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 59 ee 01 00       	call   c00284d3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 40 e8 01 00       	call   c0027ee4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 bf de 01 00       	call   c0027583 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 a5 ef 01 00       	call   c0028680 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 7f eb 01 00       	call   c0028263 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 d6 e4 01 00       	call   c0027bd4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 b5 ed 01 00       	call   c00284cf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 4e de 01 00       	call   c0027583 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 7a e4 01 00       	call   c0027bd4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 ef ea 01 00       	call   c0028263 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 f5 dd 01 00       	call   c0027583 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 9d 02 c0       	mov    eax,0xc0029dd4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 6a e9 01 00       	call   c0028263 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 e8 e2 01 00       	call   c0027c00 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 7a d5 01 00       	call   c0026f18 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 51 ec 01 00       	call   c00285f7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 3a e2 01 00       	call   c0027c00 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 1d ec 01 00       	call   c00285f7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 8f db 01 00       	call   c0027583 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 ef eb 01 00       	call   c00285f7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 de e1 01 00       	call   c0027c00 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 47 db 01 00       	call   c0027583 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 68 d4 01 00       	call   c0026f18 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 3f eb 01 00       	call   c00285f7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 28 e1 01 00       	call   c0027c00 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 0b eb 01 00       	call   c00285f7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 7d da 01 00       	call   c0027583 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 dd ea 01 00       	call   c00285f7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 cc e0 01 00       	call   c0027c00 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 35 da 01 00       	call   c0027583 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 13 da 01 00       	call   c0027583 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 ef d2 01 00       	call   c0026f18 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 c6 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 af df 01 00       	call   c0027c00 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 92 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 04 d9 01 00       	call   c0027583 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 64 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 4d df 01 00       	call   c0027c00 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 b6 d8 01 00       	call   c0027583 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 16 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ff de 01 00       	call   c0027c00 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 68 d8 01 00       	call   c0027583 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 7d d1 01 00       	call   c0026f18 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 54 e8 01 00       	call   c00285f7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 3d de 01 00       	call   c0027c00 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 24 e8 01 00       	call   c00285f7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 96 d7 01 00       	call   c0027583 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 f6 e7 01 00       	call   c00285f7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 df dd 01 00       	call   c0027c00 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 48 d7 01 00       	call   c0027583 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 a8 e7 01 00       	call   c00285f7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 91 dd 01 00       	call   c0027c00 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 fa d6 01 00       	call   c0027583 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 ce d6 01 00       	call   c0027583 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 2b dd 01 00       	call   c0027c00 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 e7 e5 01 00       	call   c00284d3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 76 d6 01 00       	call   c0027583 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 d3 dc 01 00       	call   c0027c00 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 8f e5 01 00       	call   c00284d3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 09 cf 01 00       	call   c0026f18 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 e0 e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 c9 db 01 00       	call   c0027c00 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ac e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 1e d5 01 00       	call   c0027583 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 7e e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 67 db 01 00       	call   c0027c00 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 d0 d4 01 00       	call   c0027583 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 30 e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 19 db 01 00       	call   c0027c00 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 82 d4 01 00       	call   c0027583 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 e2 e4 01 00       	call   c00285f7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 cb da 01 00       	call   c0027c00 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 34 d4 01 00       	call   c0027583 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 94 e4 01 00       	call   c00285f7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 7d da 01 00       	call   c0027c00 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 e6 d3 01 00       	call   c0027583 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 e8 cc 01 00       	call   c0026f18 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 bf e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 a8 d9 01 00       	call   c0027c00 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 8f e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 01 d3 01 00       	call   c0027583 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 61 e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 4a d9 01 00       	call   c0027c00 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 b3 d2 01 00       	call   c0027583 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 13 e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 fc d8 01 00       	call   c0027c00 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 65 d2 01 00       	call   c0027583 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 c5 e2 01 00       	call   c00285f7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ae d8 01 00       	call   c0027c00 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 17 d2 01 00       	call   c0027583 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 77 e2 01 00       	call   c00285f7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 60 d8 01 00       	call   c0027c00 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 c9 d1 01 00       	call   c0027583 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 9d d1 01 00       	call   c0027583 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 fa d7 01 00       	call   c0027c00 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 b6 e0 01 00       	call   c00284d3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 45 d1 01 00       	call   c0027583 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 a2 d7 01 00       	call   c0027c00 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 5e e0 01 00       	call   c00284d3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ec d0 01 00       	call   c0027583 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 49 d7 01 00       	call   c0027c00 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 05 e0 01 00       	call   c00284d3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 93 d0 01 00       	call   c0027583 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 f0 d6 01 00       	call   c0027c00 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ac df 01 00       	call   c00284d3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 0a c9 01 00       	call   c0026f18 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 e1 df 01 00       	call   c00285f7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ca d5 01 00       	call   c0027c00 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ad df 01 00       	call   c00285f7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 1f cf 01 00       	call   c0027583 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 7f df 01 00       	call   c00285f7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 68 d5 01 00       	call   c0027c00 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 d1 ce 01 00       	call   c0027583 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 31 df 01 00       	call   c00285f7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 1a d5 01 00       	call   c0027c00 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 83 ce 01 00       	call   c0027583 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 e3 de 01 00       	call   c00285f7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 cc d4 01 00       	call   c0027c00 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 35 ce 01 00       	call   c0027583 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 95 de 01 00       	call   c00285f7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 7e d4 01 00       	call   c0027c00 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 e7 cd 01 00       	call   c0027583 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 47 de 01 00       	call   c00285f7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 30 d4 01 00       	call   c0027c00 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 96 cd 01 00       	call   c0027583 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 f6 dd 01 00       	call   c00285f7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 df d3 01 00       	call   c0027c00 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 48 cd 01 00       	call   c0027583 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 42 c6 01 00       	call   c0026f18 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 19 dd 01 00       	call   c00285f7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 02 d3 01 00       	call   c0027c00 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 e2 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 54 cc 01 00       	call   c0027583 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 b4 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 9d d2 01 00       	call   c0027c00 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 06 cc 01 00       	call   c0027583 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 66 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 4f d2 01 00       	call   c0027c00 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 b8 cb 01 00       	call   c0027583 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 18 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 01 d2 01 00       	call   c0027c00 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 6a cb 01 00       	call   c0027583 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ca db 01 00       	call   c00285f7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 b3 d1 01 00       	call   c0027c00 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 1c cb 01 00       	call   c0027583 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 7c db 01 00       	call   c00285f7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 65 d1 01 00       	call   c0027c00 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 cb ca 01 00       	call   c0027583 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 2b db 01 00       	call   c00285f7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 14 d1 01 00       	call   c0027c00 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 83 ca 01 00       	call   c0027583 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 5c ca 01 00       	call   c0027583 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ba d0 01 00       	call   c0027c00 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 76 d9 01 00       	call   c00284d3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 05 ca 01 00       	call   c0027583 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 63 d0 01 00       	call   c0027c00 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 1f d9 01 00       	call   c00284d3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ad c9 01 00       	call   c0027583 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 0b d0 01 00       	call   c0027c00 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 c7 d8 01 00       	call   c00284d3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 55 c9 01 00       	call   c0027583 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 b3 cf 01 00       	call   c0027c00 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 6f d8 01 00       	call   c00284d3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 fd c8 01 00       	call   c0027583 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 5b cf 01 00       	call   c0027c00 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 17 d8 01 00       	call   c00284d3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 ab c8 01 00       	call   c0027583 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 09 cf 01 00       	call   c0027c00 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 c5 d7 01 00       	call   c00284d3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 d9 c0 01 00       	call   c0026f18 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 b0 d7 01 00       	call   c00285f7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 99 cd 01 00       	call   c0027c00 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 80 d7 01 00       	call   c00285f7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 f2 c6 01 00       	call   c0027583 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 26 d7 01 00       	call   c00285f7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 0f cd 01 00       	call   c0027c00 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 7a c6 01 00       	call   c0027583 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 c7 d6 01 00       	call   c00285f7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 b0 cc 01 00       	call   c0027c00 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 1b c6 01 00       	call   c0027583 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 68 d6 01 00       	call   c00285f7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 51 cc 01 00       	call   c0027c00 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 bc c5 01 00       	call   c0027583 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 09 d6 01 00       	call   c00285f7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 f2 cb 01 00       	call   c0027c00 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 5d c5 01 00       	call   c0027583 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 aa d5 01 00       	call   c00285f7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 93 cb 01 00       	call   c0027c00 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 fe c4 01 00       	call   c0027583 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 4b d5 01 00       	call   c00285f7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 34 cb 01 00       	call   c0027c00 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 9f c4 01 00       	call   c0027583 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ec d4 01 00       	call   c00285f7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 d5 ca 01 00       	call   c0027c00 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 40 c4 01 00       	call   c0027583 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 8d d4 01 00       	call   c00285f7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 76 ca 01 00       	call   c0027c00 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 e1 c3 01 00       	call   c0027583 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 eb bc 01 00       	call   c0026f18 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 c2 d3 01 00       	call   c00285f7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 ab c9 01 00       	call   c0027c00 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 92 d3 01 00       	call   c00285f7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 04 c3 01 00       	call   c0027583 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 37 d3 01 00       	call   c00285f7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 20 c9 01 00       	call   c0027c00 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 8b c2 01 00       	call   c0027583 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 d7 d2 01 00       	call   c00285f7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 c0 c8 01 00       	call   c0027c00 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 2b c2 01 00       	call   c0027583 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 77 d2 01 00       	call   c00285f7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 60 c8 01 00       	call   c0027c00 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 cb c1 01 00       	call   c0027583 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 17 d2 01 00       	call   c00285f7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 00 c8 01 00       	call   c0027c00 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 6b c1 01 00       	call   c0027583 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 b7 d1 01 00       	call   c00285f7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 a0 c7 01 00       	call   c0027c00 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 0b c1 01 00       	call   c0027583 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 57 d1 01 00       	call   c00285f7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 40 c7 01 00       	call   c0027c00 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 ab c0 01 00       	call   c0027583 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 f7 d0 01 00       	call   c00285f7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 e0 c6 01 00       	call   c0027c00 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 4b c0 01 00       	call   c0027583 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 97 d0 01 00       	call   c00285f7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 80 c6 01 00       	call   c0027c00 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 eb bf 01 00       	call   c0027583 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 90 bf 01 00       	call   c0027583 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ed c5 01 00       	call   c0027c00 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 a9 ce 01 00       	call   c00284d3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 33 bf 01 00       	call   c0027583 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 90 c5 01 00       	call   c0027c00 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 4c ce 01 00       	call   c00284d3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 d6 be 01 00       	call   c0027583 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 33 c5 01 00       	call   c0027c00 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 ef cd 01 00       	call   c00284d3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 79 be 01 00       	call   c0027583 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 d6 c4 01 00       	call   c0027c00 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 92 cd 01 00       	call   c00284d3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 1c be 01 00       	call   c0027583 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 79 c4 01 00       	call   c0027c00 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 35 cd 01 00       	call   c00284d3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 bf bd 01 00       	call   c0027583 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 1c c4 01 00       	call   c0027c00 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 d8 cc 01 00       	call   c00284d3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 62 bd 01 00       	call   c0027583 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 bf c3 01 00       	call   c0027c00 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 7b cc 01 00       	call   c00284d3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 05 bd 01 00       	call   c0027583 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 62 c3 01 00       	call   c0027c00 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 1e cc 01 00       	call   c00284d3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 1a c3 01 00       	call   c0027c00 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 8a cd 01 00       	jmp    c0028680 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 fc c9 01 00       	call   c00284cf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ba c9 01 00       	call   c00284b1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 51 c7 01 00       	call   c0028263 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 52 ba 01 00       	call   c0027583 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 21 c7 01 00       	call   c0028263 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 88 c3 01 00       	call   c0027ee4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 27 c9 01 00       	call   c00284b1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 2a c9 01 00       	call   c00284cf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 fd c8 01 00       	call   c00284cf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 f6 c2 01 00       	call   c0027ee4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 78 ca 01 00       	call   c0028680 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 53 ca 01 00       	call   c0028680 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 2d c6 01 00       	call   c0028263 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 84 bf 01 00       	call   c0027bd4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 63 c8 01 00       	call   c00284cf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 fc b8 01 00       	call   c0027583 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 20 bf 01 00       	call   c0027bd4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ba c9 01 00       	call   c0028680 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 fa c1 01 00       	call   c0027ee4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 77 b8 01 00       	call   c0027583 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 a3 c4 01 00       	call   c0028263 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 a3 b7 01 00       	call   c0027583 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 83 b7 01 00       	call   c0027583 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 53 c4 01 00       	call   c0028263 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 a3 c6 01 00       	call   c00284cd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 82 bd 01 00       	call   c0027bd4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 fc c7 01 00       	call   c0028660 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 2b c6 01 00       	call   c00284b1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 29 bd 01 00       	call   c0027bd4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 a7 c3 01 00       	call   c0028263 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 2a bd 01 00       	call   c0027c00 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 7c c3 01 00       	call   c0028263 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 e3 bf 01 00       	call   c0027ee4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 62 b6 01 00       	call   c0027583 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 2c c3 01 00       	call   c0028263 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 78 c5 01 00       	call   c00284cf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 6d bc 01 00       	call   c0027c00 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 3f bc 01 00       	call   c0027c00 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 78 c2 01 00       	call   c0028263 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 dc be 01 00       	call   c0027ee4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 a4 be 01 00       	call   c0027ee4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 23 b5 01 00       	call   c0027583 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 08 c6 01 00       	call   c0028680 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 e2 c1 01 00       	call   c0028263 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 39 bb 01 00       	call   c0027bd4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 18 c4 01 00       	call   c00284cf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 b0 b4 01 00       	call   c0027583 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 d4 ba 01 00       	call   c0027bd4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 6e c5 01 00       	call   c0028680 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 37 c3 01 00       	call   c00284cf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 f5 c2 01 00       	call   c00284b1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 8c c0 01 00       	call   c0028263 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 8d b3 01 00       	call   c0027583 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 5c c0 01 00       	call   c0028263 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 c3 bc 01 00       	call   c0027ee4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 62 c2 01 00       	call   c00284b1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 65 c2 01 00       	call   c00284cf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 38 c2 01 00       	call   c00284cf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 31 bc 01 00       	call   c0027ee4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 b3 c3 01 00       	call   c0028680 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 8e c3 01 00       	call   c0028680 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 68 bf 01 00       	call   c0028263 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 bf b8 01 00       	call   c0027bd4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 9e c1 01 00       	call   c00284cf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 37 b2 01 00       	call   c0027583 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 5b b8 01 00       	call   c0027bd4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 f5 c2 01 00       	call   c0028680 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 35 bb 01 00       	call   c0027ee4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 b2 b1 01 00       	call   c0027583 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 dd bd 01 00       	call   c0028263 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 dd b0 01 00       	call   c0027583 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 bd b0 01 00       	call   c0027583 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 8d bd 01 00       	call   c0028263 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 dd bf 01 00       	call   c00284cd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 bb b6 01 00       	call   c0027bd4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 35 c1 01 00       	call   c0028660 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 64 bf 01 00       	call   c00284b1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 61 b6 01 00       	call   c0027bd4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 df bc 01 00       	call   c0028263 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 62 b6 01 00       	call   c0027c00 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 b4 bc 01 00       	call   c0028263 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 1b b9 01 00       	call   c0027ee4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 9a af 01 00       	call   c0027583 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 64 bc 01 00       	call   c0028263 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 b0 be 01 00       	call   c00284cf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 a5 b5 01 00       	call   c0027c00 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 77 b5 01 00       	call   c0027c00 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ae bb 01 00       	call   c0028263 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 12 b8 01 00       	call   c0027ee4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 df b7 01 00       	call   c0027ee4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 5e ae 01 00       	call   c0027583 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 43 bf 01 00       	call   c0028680 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 1d bb 01 00       	call   c0028263 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 74 b4 01 00       	call   c0027bd4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 53 bd 01 00       	call   c00284cf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 eb ad 01 00       	call   c0027583 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 0f b4 01 00       	call   c0027bd4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 a9 be 01 00       	call   c0028680 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 72 bc 01 00       	call   c00284cf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 30 bc 01 00       	call   c00284b1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 c7 b9 01 00       	call   c0028263 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 c8 ac 01 00       	call   c0027583 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 97 b9 01 00       	call   c0028263 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 fe b5 01 00       	call   c0027ee4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 9d bb 01 00       	call   c00284b1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 a0 bb 01 00       	call   c00284cf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 73 bb 01 00       	call   c00284cf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 6c b5 01 00       	call   c0027ee4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ee bc 01 00       	call   c0028680 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 c9 bc 01 00       	call   c0028680 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 a3 b8 01 00       	call   c0028263 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 fa b1 01 00       	call   c0027bd4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 d9 ba 01 00       	call   c00284cf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 72 ab 01 00       	call   c0027583 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 96 b1 01 00       	call   c0027bd4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 30 bc 01 00       	call   c0028680 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 70 b4 01 00       	call   c0027ee4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ed aa 01 00       	call   c0027583 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 18 b7 01 00       	call   c0028263 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 18 aa 01 00       	call   c0027583 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 f8 a9 01 00       	call   c0027583 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 c8 b6 01 00       	call   c0028263 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 18 b9 01 00       	call   c00284cd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 f6 af 01 00       	call   c0027bd4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 70 ba 01 00       	call   c0028660 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 9f b8 01 00       	call   c00284b1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 9c af 01 00       	call   c0027bd4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 1a b6 01 00       	call   c0028263 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 9d af 01 00       	call   c0027c00 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 ef b5 01 00       	call   c0028263 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 56 b2 01 00       	call   c0027ee4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 d5 a8 01 00       	call   c0027583 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 9f b5 01 00       	call   c0028263 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 eb b7 01 00       	call   c00284cf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 e0 ae 01 00       	call   c0027c00 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 b2 ae 01 00       	call   c0027c00 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 e9 b4 01 00       	call   c0028263 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 4d b1 01 00       	call   c0027ee4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 1a b1 01 00       	call   c0027ee4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 99 a7 01 00       	call   c0027583 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 7e b8 01 00       	call   c0028680 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 58 b4 01 00       	call   c0028263 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 af ad 01 00       	call   c0027bd4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 8e b6 01 00       	call   c00284cf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 26 a7 01 00       	call   c0027583 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 4a ad 01 00       	call   c0027bd4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 e4 b7 01 00       	call   c0028680 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ad b5 01 00       	call   c00284cf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 6b b5 01 00       	call   c00284b1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 02 b3 01 00       	call   c0028263 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 03 a6 01 00       	call   c0027583 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 d2 b2 01 00       	call   c0028263 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 39 af 01 00       	call   c0027ee4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 d8 b4 01 00       	call   c00284b1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 db b4 01 00       	call   c00284cf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ae b4 01 00       	call   c00284cf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 a7 ae 01 00       	call   c0027ee4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 29 b6 01 00       	call   c0028680 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 04 b6 01 00       	call   c0028680 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 de b1 01 00       	call   c0028263 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 35 ab 01 00       	call   c0027bd4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 14 b4 01 00       	call   c00284cf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ad a4 01 00       	call   c0027583 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 d1 aa 01 00       	call   c0027bd4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 6b b5 01 00       	call   c0028680 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 ab ad 01 00       	call   c0027ee4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 28 a4 01 00       	call   c0027583 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 53 b0 01 00       	call   c0028263 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 53 a3 01 00       	call   c0027583 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 33 a3 01 00       	call   c0027583 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 03 b0 01 00       	call   c0028263 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 53 b2 01 00       	call   c00284cd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 31 a9 01 00       	call   c0027bd4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 ab b3 01 00       	call   c0028660 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 da b1 01 00       	call   c00284b1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 d7 a8 01 00       	call   c0027bd4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 55 af 01 00       	call   c0028263 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 d8 a8 01 00       	call   c0027c00 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 2a af 01 00       	call   c0028263 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 91 ab 01 00       	call   c0027ee4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 10 a2 01 00       	call   c0027583 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 da ae 01 00       	call   c0028263 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 26 b1 01 00       	call   c00284cf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 1b a8 01 00       	call   c0027c00 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ed a7 01 00       	call   c0027c00 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 24 ae 01 00       	call   c0028263 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 88 aa 01 00       	call   c0027ee4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 55 aa 01 00       	call   c0027ee4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 d4 a0 01 00       	call   c0027583 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 b9 b1 01 00       	call   c0028680 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 93 ad 01 00       	call   c0028263 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 ea a6 01 00       	call   c0027bd4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 c9 af 01 00       	call   c00284cf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 61 a0 01 00       	call   c0027583 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 85 a6 01 00       	call   c0027bd4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 1f b1 01 00       	call   c0028680 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 e5 ae 01 00       	call   c00284cf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 a3 ae 01 00       	call   c00284b1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 3a ac 01 00       	call   c0028263 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 3b 9f 01 00       	call   c0027583 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 0a ac 01 00       	call   c0028263 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 71 a8 01 00       	call   c0027ee4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 10 ae 01 00       	call   c00284b1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 13 ae 01 00       	call   c00284cf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 e6 ad 01 00       	call   c00284cf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 df a7 01 00       	call   c0027ee4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 61 af 01 00       	call   c0028680 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 38 af 01 00       	call   c0028680 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 12 ab 01 00       	call   c0028263 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 69 a4 01 00       	call   c0027bd4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 48 ad 01 00       	call   c00284cf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 e1 9d 01 00       	call   c0027583 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 09 a4 01 00       	call   c0027bd4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 a3 ae 01 00       	call   c0028680 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 e4 a6 01 00       	call   c0027ee4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 61 9d 01 00       	call   c0027583 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 8d a9 01 00       	call   c0028263 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 8d 9c 01 00       	call   c0027583 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 6d 9c 01 00       	call   c0027583 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 3d a9 01 00       	call   c0028263 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 71 ab 01 00       	call   c00284b1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 68 a2 01 00       	call   c0027bd4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 e2 ac 01 00       	call   c0028660 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 11 ab 01 00       	call   c00284b1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 0b a2 01 00       	call   c0027bd4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 89 a8 01 00       	call   c0028263 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 0c a2 01 00       	call   c0027c00 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 5e a8 01 00       	call   c0028263 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 c5 a4 01 00       	call   c0027ee4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 44 9b 01 00       	call   c0027583 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 0e a8 01 00       	call   c0028263 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 5a aa 01 00       	call   c00284cf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 4f a1 01 00       	call   c0027c00 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 21 a1 01 00       	call   c0027c00 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 65 a7 01 00       	call   c0028263 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 cc a3 01 00       	call   c0027ee4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 b5 a0 01 00       	call   c0027c00 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 71 a9 01 00       	call   c00284d3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 64 a3 01 00       	call   c0027ee4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 e3 99 01 00       	call   c0027583 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 c8 aa 01 00       	call   c0028680 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 a2 a6 01 00       	call   c0028263 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 f9 9f 01 00       	call   c0027bd4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 d8 a8 01 00       	call   c00284cf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 70 99 01 00       	call   c0027583 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 98 9f 01 00       	call   c0027bd4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 32 aa 01 00       	call   c0028680 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd619c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ed a6 01 00       	call   c00284cf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 ab a6 01 00       	call   c00284b1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 97 a6 01 00       	call   c00284cf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 09 a4 01 00       	call   c0028263 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 87 9d 01 00       	call   c0027c00 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 d9 a3 01 00       	call   c0028263 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 df 96 01 00       	call   c0027583 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ae a3 01 00       	call   c0028263 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 fe a5 01 00       	call   c00284cd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 df 9c 01 00       	call   c0027bd4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 59 a7 01 00       	call   c0028660 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 88 a5 01 00       	call   c00284b1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 87 9c 01 00       	call   c0027bd4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 05 a3 01 00       	call   c0028263 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 88 9c 01 00       	call   c0027c00 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 da a2 01 00       	call   c0028263 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 41 9f 01 00       	call   c0027ee4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 c0 95 01 00       	call   c0027583 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 e8 9e 01 00       	call   c0027ee4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 6e 95 01 00       	call   c0027583 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 54 a6 01 00       	call   c0028680 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 2e a2 01 00       	call   c0028263 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 85 9b 01 00       	call   c0027bd4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 64 a4 01 00       	call   c00284cf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 fd 94 01 00       	call   c0027583 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 29 9b 01 00       	call   c0027bd4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 c3 a5 01 00       	call   c0028680 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 78 a1 01 00       	call   c0028263 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 f5 9a 01 00       	call   c0027c00 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 46 a1 01 00       	call   c0028263 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 4c 94 01 00       	call   c0027583 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 1c a1 01 00       	call   c0028263 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 70 a3 01 00       	call   c00284d1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 49 9a 01 00       	call   c0027bd4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 c3 a4 01 00       	call   c0028660 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 f2 a2 01 00       	call   c00284b1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 f0 99 01 00       	call   c0027bd4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 6e a0 01 00       	call   c0028263 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 f1 99 01 00       	call   c0027c00 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 43 a0 01 00       	call   c0028263 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 aa 9c 01 00       	call   c0027ee4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 29 93 01 00       	call   c0027583 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 45 9c 01 00       	call   c0027ee4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 c4 92 01 00       	call   c0027583 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 aa a3 01 00       	call   c0028680 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 84 9f 01 00       	call   c0028263 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 db 98 01 00       	call   c0027bd4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ba a1 01 00       	call   c00284cf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 53 92 01 00       	call   c0027583 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 7f 98 01 00       	call   c0027bd4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 f0 9e 01 00       	call   c0028263 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 f6 91 01 00       	call   c0027583 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9f 02 c0       	mov    eax,0xc0029f8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9f 02 c0       	push   0xc0029fc6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 e6 02 c0       	mov    eax,0xc002e608
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 fc 69 02 c0       	mov    eax,0xc00269fc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9f 02 c0       	push   0xc0029fd9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 30 67 02 c0       	mov    eax,0xc0026730
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 fc 6a 02 c0       	mov    eax,0xc0026afc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9f 02 c0       	push   0xc0029fec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 7c 68 02 c0       	mov    eax,0xc002687c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9f 02 c0       	push   0xc0029ff5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c e6 02 c0       	mov    eax,0xc002e60c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 a0 02 c0       	push   0xc002a002
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d e6 02 c0       	mov    eax,0xc002e60d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 d3 5e 00 00       	call   c00144f6 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c000e668:	68 0f a0 02 c0       	push   0xc002a00f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 df f5 00 00       	call   c001dc54 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 c8 f8 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 b0 e7 01 c0       	push   0xc001e7b0
c000e693:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c000e699:	e8 b4 f8 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c000e6a6:	c6 05 0d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e60d,0x1
c000e6ad:	e8 7f 04 01 00       	call   c001eb31 <Vm::initialise8086()>
c000e6b2:	e8 27 4c 00 00       	call   c00132de <Fs::initVFS()>
c000e6b7:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 11 df 00 00       	call   c001c5e4 <Sys::loadSyscalls()>
c000e6d3:	e8 ea bd 00 00       	call   c001a4c2 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c a0 02 c0       	push   0xc002a01c
c000e6e2:	68 25 a0 02 c0       	push   0xc002a025
c000e6e7:	e8 fc ca 00 00       	call   c001b1e8 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 d2 56 00 00       	call   c0013dc6 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 c5 5d 00 00       	call   c00144ca <Device::loadDriversForAll()>
c000e705:	e8 fe b8 00 00       	call   c001a008 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d a0 02 c0       	push   0xc002a02d
c000e719:	e8 5a f0 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 85 f2 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 82 fb 00 00       	call   c001e2b6 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 a0 02 c0       	push   0xc002a049
c000e749:	50                   	push   eax
c000e74a:	e8 21 5e 00 00       	call   c0014570 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 e6 02 c0 04 	test   BYTE PTR ds:0xc002e621,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 e3 7d 01 00       	call   c00266c6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 fc a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 d5 a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 b3 a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 91 a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e620,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 9f a2 00 00       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 7a a2 00 00       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 4d 7c 01 00       	call   c0026680 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 0a 7c 01 00       	call   c0026660 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 96 a2 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 a0 02 c0       	push   0xc002a059
c000eaaf:	e8 a5 44 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c a0 02 c0       	push   0xc002a06c
c000ead2:	e8 82 44 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d a0 02 c0       	push   0xc002a07d
c000eaf5:	e8 5f 44 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e a0 02 c0       	push   0xc002a08e
c000eb18:	e8 3c 44 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f a0 02 c0       	push   0xc002a09f
c000eb3b:	e8 19 44 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 a0 02 c0       	push   0xc002a0b0
c000eb5e:	e8 f6 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 a0 02 c0       	push   0xc002a0c1
c000eb81:	e8 d3 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 a0 02 c0       	push   0xc002a0d2
c000eba4:	e8 b0 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 a0 02 c0       	push   0xc002a0e3
c000ebc7:	e8 8d 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 a0 02 c0       	push   0xc002a0f4
c000ebea:	e8 6a 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 a1 02 c0       	push   0xc002a105
c000ec0d:	e8 47 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 a1 02 c0       	push   0xc002a116
c000ec30:	e8 24 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 a1 02 c0       	push   0xc002a127
c000ec53:	e8 01 43 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 a1 02 c0       	push   0xc002a138
c000ec76:	e8 de 42 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 a1 02 c0       	push   0xc002a149
c000ec99:	e8 bb 42 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a a1 02 c0       	push   0xc002a15a
c000ecbc:	e8 98 42 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b a1 02 c0       	push   0xc002a16b
c000ecdf:	e8 75 42 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c a1 02 c0       	push   0xc002a17c
c000ed02:	e8 52 42 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d a1 02 c0       	push   0xc002a18d
c000ed21:	e8 33 42 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc70
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 22 42 00 00       	jmp    c0012f59 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e a1 02 c0       	push   0xc002a19e
c000ee0a:	e8 ec b7 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 a1 02 c0       	push   0xc002a1a4
c000ee42:	e8 b4 b7 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 e6 02 c0 04 	test   BYTE PTR ds:0xc002e620,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 d5 02 c0 	sete   BYTE PTR ds:0xc002d544
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 35 93 00 00       	call   c00181ea <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 bc 54 00 00       	call   c0014380 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 de 9e 00 00       	call   c0018dd2 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 7d 54 00 00       	call   c0014380 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 e7 59 00 00       	call   c0014906 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 4d 54 00 00       	call   c0014380 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 fd f0 00 00       	call   c001e052 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa a1 02 c0       	push   0xc002a1aa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 b6 3f 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb a1 02 c0       	push   0xc002a1bb
c000efc0:	e8 36 b6 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 a1 02 c0       	push   0xc002a1c8
c000efd5:	e8 21 b6 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1d2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 0a b6 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c a2 02 c0       	push   0xc002a20c
c000f086:	e8 ce 3e 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 e6 02 c0       	mov    ds:0xc002e612,eax
c000f0c7:	66 89 15 10 e6 02 c0 	mov    WORD PTR ds:0xc002e610,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 44 ec 00 00       	call   c001de22 <unlockScheduler()>
c000f1de:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 d4 94 01 00       	call   c0028700 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 cb 94 01 00       	call   c0028700 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e618,0x7ff
c000f323:	a3 1a e6 02 c0       	mov    ds:0xc002e61a,eax
c000f328:	0f 01 1d 18 e6 02 c0 	lidtd  ds:0xc002e618
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 11 28 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 42 2e 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 7e 1e 00 00       	call   c00114bc <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 af 1e 00 00       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 20 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d520
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 a2 02 c0       	push   0xc002a228
c000f6f4:	e8 60 38 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 20 d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d520,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 07 27 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 20 d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d520
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 29 2c 00 00       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 20 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d520
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 a2 02 c0       	push   0xc002a258
c000f7ad:	e8 49 ae 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d a2 02 c0       	push   0xc002a25d
c000f7c3:	e8 33 ae 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 47 e6 00 00       	call   c001de20 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 38 e6 00 00       	call   c001de22 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 2b 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 58 2c 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 10 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 fb 28 00 00       	call   c001211e <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 40 d5 02 c0       	mov    eax,ds:0xc002d540
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 40 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d540
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 40 d5 02 c0       	mov    eax,ds:0xc002d540
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 9e 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 60 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 f7 0c 00 00       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 40 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d540
c000fb46:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 40 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d540,0x8000
c000fba0:	c6 05 a0 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6a0,0x1
c000fba7:	c7 05 d8 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e6d8,0xc000fa13
c000fbb1:	c7 05 c4 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e6c4,0xc000f89a
c000fbbb:	c7 05 c0 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e6c0,0xc000f8e5
c000fbc5:	c7 05 cc e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e6cc,0xc000fa59
c000fbcf:	c7 05 d4 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e6d4,0xc000f963
c000fbd9:	c7 05 c8 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e6c8,0xc000f9c1
c000fbe3:	c7 05 d0 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e6d0,0xc000f9c2
c000fbed:	c7 05 dc e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e6dc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 de 09 00 00       	call   c00105e8 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 64 a2 02 c0       	push   0xc002a264
c000fc4a:	e8 0a 33 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 3d 04 00 00       	call   c00100a3 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 df 20 00 00       	call   c0011d4a <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 71 bc 02 c0       	push   0xc002bc71
c000fc92:	e8 64 a9 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 20 e6 02 c0    	mov    DWORD PTR ds:0xc002e620,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 af 22 00 00       	call   c0011f5c <VAS::VAS()>
c000fcad:	89 1d 88 e7 02 c0    	mov    DWORD PTR ds:0xc002e788,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 7b a2 02 c0 	mov    DWORD PTR [esp],0xc002a27b
c000fcbf:	e8 95 32 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 00 21 00 00       	call   c0011dc9 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 98 a2 02 c0       	push   0xc002a298
c000fced:	e8 67 32 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 ea 24 00 00       	call   c00121f6 <VAS::~VAS()>
c000fd0c:	c7 04 24 ab a2 02 c0 	mov    DWORD PTR [esp],0xc002a2ab
c000fd13:	e8 e3 a8 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 60 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19a0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 60 e6 02 c0       	mov    esi,0xc002e660
c000fd89:	8d 90 60 e6 02 c0    	lea    edx,[eax-0x3ffd19a0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 60 e6 02 c0    	lea    eax,[edx-0x3ffd19a0]
c000fdef:	8d 94 11 60 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19a0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 24 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d524
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 24 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d524
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 24 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d524
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 50 e6 02 c0       	mov    ds:0xc002e650,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 54 e6 02 c0    	idiv   DWORD PTR ds:0xc002e654
c000fe91:	39 05 4c e6 02 c0    	cmp    DWORD PTR ds:0xc002e64c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 4c e6 02 c0       	mov    ds:0xc002e64c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 c2 0a 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 c6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2c6
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 19 a7 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 44 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e644
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 44 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e644,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 f0 a2 02 c0       	push   0xc002a2f0
c000ff27:	e8 2d 30 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x109>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 01 a3 02 c0       	push   0xc002a301
c000ff4b:	e8 ab a6 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 44 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e644
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c000ff71:	40                   	inc    eax
c000ff72:	a3 50 e6 02 c0       	mov    ds:0xc002e650,eax
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	c1 e0 02             	shl    eax,0x2
c000ff80:	99                   	cdq    
c000ff81:	f7 3d 54 e6 02 c0    	idiv   DWORD PTR ds:0xc002e654
c000ff87:	5a                   	pop    edx
c000ff88:	39 05 4c e6 02 c0    	cmp    DWORD PTR ds:0xc002e64c,eax
c000ff8e:	59                   	pop    ecx
c000ff8f:	75 60                	jne    c000fff1 <Phys::allocatePage()+0x10f>
c000ff91:	83 f8 46             	cmp    eax,0x46
c000ff94:	7e 4d                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c000ff96:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000ff9d:	75 44                	jne    c000ffe3 <Phys::allocatePage()+0x101>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 3b                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 34                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 2a                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	68 dc a2 02 c0       	push   0xc002a2dc
c000ffc1:	e8 93 2f 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	6a 04                	push   0x4
c000ffcb:	6a 08                	push   0x8
c000ffcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffdb:	e8 56 2c 00 00       	call   c0012c36 <VAS::scanForEviction(int, int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c000ffe8:	c1 e0 0c             	shl    eax,0xc
c000ffeb:	83 c4 14             	add    esp,0x14
c000ffee:	5b                   	pop    ebx
c000ffef:	5e                   	pop    esi
c000fff0:	c3                   	ret    
c000fff1:	83 ec 0c             	sub    esp,0xc
c000fff4:	a3 4c e6 02 c0       	mov    ds:0xc002e64c,eax
c000fff9:	50                   	push   eax
c000fffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fffe:	e8 79 09 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000a:	83 f8 46             	cmp    eax,0x46
c001000d:	7e d4                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c001000f:	eb 85                	jmp    c000ff96 <Phys::allocatePage()+0xb4>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	31 db                	xor    ebx,ebx
c0010016:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001001a:	e8 01 de 00 00       	call   c001de20 <lockScheduler()>
c001001f:	85 db                	test   ebx,ebx
c0010021:	75 11                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010023:	e8 ba fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010028:	83 ff 01             	cmp    edi,0x1
c001002b:	89 c6                	mov    esi,eax
c001002d:	74 21                	je     c0010050 <Phys::allocateContiguousPages(int)+0x3f>
c001002f:	bb 01 00 00 00       	mov    ebx,0x1
c0010034:	e8 a9 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010039:	89 da                	mov    edx,ebx
c001003b:	c1 e2 0c             	shl    edx,0xc
c001003e:	01 f2                	add    edx,esi
c0010040:	39 c2                	cmp    edx,eax
c0010042:	74 17                	je     c001005b <Phys::allocateContiguousPages(int)+0x4a>
c0010044:	bb 01 00 00 00       	mov    ebx,0x1
c0010049:	89 c6                	mov    esi,eax
c001004b:	83 ff 01             	cmp    edi,0x1
c001004e:	75 e4                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010050:	e8 cd dd 00 00       	call   c001de22 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    
c001005b:	43                   	inc    ebx
c001005c:	39 fb                	cmp    ebx,edi
c001005e:	75 bf                	jne    c001001f <Phys::allocateContiguousPages(int)+0xe>
c0010060:	e8 bd dd 00 00       	call   c001de22 <unlockScheduler()>
c0010065:	89 f0                	mov    eax,esi
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	c3                   	ret    

c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006b:	56                   	push   esi
c001006c:	53                   	push   ebx
c001006d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010071:	39 1d 48 e6 02 c0    	cmp    DWORD PTR ds:0xc002e648,ebx
c0010077:	73 06                	jae    c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010079:	89 1d 48 e6 02 c0    	mov    DWORD PTR ds:0xc002e648,ebx
c001007f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010083:	c1 eb 0c             	shr    ebx,0xc
c0010086:	c1 e8 0c             	shr    eax,0xc
c0010089:	39 d8                	cmp    eax,ebx
c001008b:	73 13                	jae    c00100a0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008d:	6a 00                	push   0x0
c001008f:	8d 70 01             	lea    esi,[eax+0x1]
c0010092:	50                   	push   eax
c0010093:	e8 72 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010098:	5a                   	pop    edx
c0010099:	89 f0                	mov    eax,esi
c001009b:	59                   	pop    ecx
c001009c:	39 f3                	cmp    ebx,esi
c001009e:	75 ed                	jne    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	c3                   	ret    

c00100a3 <Phys::physicalMemorySetup(unsigned int)>:
c00100a3:	55                   	push   ebp
c00100a4:	57                   	push   edi
c00100a5:	56                   	push   esi
c00100a6:	53                   	push   ebx
c00100a7:	31 db                	xor    ebx,ebx
c00100a9:	83 ec 40             	sub    esp,0x40
c00100ac:	6a 30                	push   0x30
c00100ae:	6a 00                	push   0x0
c00100b0:	68 60 e6 02 c0       	push   0xc002e660
c00100b5:	e8 be 06 ff ff       	call   c0000778 <memset>
c00100ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c3:	05 00 10 00 00       	add    eax,0x1000
c00100c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	83 ec 08             	sub    esp,0x8
c00100d2:	6a 01                	push   0x1
c00100d4:	53                   	push   ebx
c00100d5:	43                   	inc    ebx
c00100d6:	e8 2f fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e4:	75 e9                	jne    c00100cf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ed:	66 85 c0             	test   ax,ax
c00100f0:	0f 84 8e 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010102:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010106:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001010f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010117:	eb 15                	jmp    c001012e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010119:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011d:	83 c3 18             	add    ebx,0x18
c0010120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010124:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010128:	0f 84 66 01 00 00    	je     c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001012e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010134:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010137:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001013f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010141:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010144:	01 f0                	add    eax,esi
c0010146:	55                   	push   ebp
c0010147:	11 fa                	adc    edx,edi
c0010149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010155:	56                   	push   esi
c0010156:	68 3c a3 02 c0       	push   0xc002a33c
c001015b:	e8 f9 2d 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0010160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	09 f8                	or     eax,edi
c0010169:	0f 85 25 01 00 00    	jne    c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001016f:	4d                   	dec    ebp
c0010170:	75 a7                	jne    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010172:	ba 00 00 08 00       	mov    edx,0x80000
c0010177:	89 c1                	mov    ecx,eax
c0010179:	39 f2                	cmp    edx,esi
c001017b:	19 f9                	sbb    ecx,edi
c001017d:	0f 82 a7 00 00 00    	jb     c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010187:	89 c1                	mov    ecx,eax
c0010189:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018d:	0f 83 97 00 00 00    	jae    c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010193:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010198:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a0:	39 fa                	cmp    edx,edi
c00101a2:	19 e8                	sbb    eax,ebp
c00101a4:	0f 82 14 01 00 00    	jb     c00102be <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101ae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bd:	83 d5 ff             	adc    ebp,0xffffffff
c00101c0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ca:	39 fa                	cmp    edx,edi
c00101cc:	89 c1                	mov    ecx,eax
c00101ce:	19 e9                	sbb    ecx,ebp
c00101d0:	0f 83 43 ff ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	be 00 00 08 00       	mov    esi,0x80000
c00101db:	50                   	push   eax
c00101dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e0:	57                   	push   edi
c00101e1:	56                   	push   esi
c00101e2:	68 60 a3 02 c0       	push   0xc002a360
c00101e7:	e8 6d 2d 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00101ec:	5a                   	pop    edx
c00101ed:	59                   	pop    ecx
c00101ee:	57                   	push   edi
c00101ef:	56                   	push   esi
c00101f0:	e8 76 fe ff ff       	call   c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101fd:	83 c4 0c             	add    esp,0xc
c0010200:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010204:	03 05 54 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e654
c001020a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010211:	a3 54 e6 02 c0       	mov    ds:0xc002e654,eax
c0010216:	52                   	push   edx
c0010217:	50                   	push   eax
c0010218:	68 1d a3 02 c0       	push   0xc002a31d
c001021d:	e8 37 2d 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0010222:	83 c4 10             	add    esp,0x10
c0010225:	e9 ef fe ff ff       	jmp    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001022e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010236:	39 ea                	cmp    edx,ebp
c0010238:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023c:	0f 82 d7 fe ff ff    	jb     c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010247:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001024f:	0f 83 c4 fe ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010255:	39 ee                	cmp    esi,ebp
c0010257:	89 f8                	mov    eax,edi
c0010259:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025d:	0f 83 78 ff ff ff    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010267:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001026f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010273:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001027f:	e9 57 ff ff ff       	jmp    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	68 0f a3 02 c0       	push   0xc002a30f
c001028c:	e8 6a a3 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	bb 40 01 00 00       	mov    ebx,0x140
c0010299:	83 ec 08             	sub    esp,0x8
c001029c:	6a 00                	push   0x0
c001029e:	53                   	push   ebx
c001029f:	43                   	inc    ebx
c00102a0:	e8 65 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102a5:	ff 05 54 e6 02 c0    	inc    DWORD PTR ds:0xc002e654
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b4:	75 e3                	jne    c0010299 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b6:	83 c4 3c             	add    esp,0x3c
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	5f                   	pop    edi
c00102bc:	5d                   	pop    ebp
c00102bd:	c3                   	ret    
c00102be:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ce:	e9 d7 fe ff ff       	jmp    c00101aa <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d3:	90                   	nop

c00102d4 <Pipe::isAtty()>:
c00102d4:	31 c0                	xor    eax,eax
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::~Pipe()>:
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	ba cc a3 02 c0       	mov    edx,0xc002a3cc
c00102e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e4:	89 10                	mov    DWORD PTR [eax],edx
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	83 ec 0c             	sub    esp,0xc
c00102ed:	50                   	push   eax
c00102ee:	e8 37 16 00 00       	call   c001192a <UnixFile::~UnixFile()>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	90                   	nop
c00102f7:	83 c4 0c             	add    esp,0xc
c00102fa:	c3                   	ret    
c00102fb:	90                   	nop

c00102fc <Pipe::~Pipe()>:
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	83 ec 0c             	sub    esp,0xc
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 cd ff ff ff       	call   c00102d8 <Pipe::~Pipe()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 ec 08             	sub    esp,0x8
c0010311:	6a 20                	push   0x20
c0010313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010317:	e8 5d 2b 00 00       	call   c0012e79 <operator delete(void*, unsigned long)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	83 c4 0c             	add    esp,0xc
c0010322:	c3                   	ret    
c0010323:	90                   	nop

c0010324 <Pipe::read(unsigned long long, void*, int*)>:
c0010324:	55                   	push   ebp
c0010325:	57                   	push   edi
c0010326:	56                   	push   esi
c0010327:	53                   	push   ebx
c0010328:	83 ec 1c             	sub    esp,0x1c
c001032b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001032f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010333:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010337:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033a:	89 c8                	mov    eax,ecx
c001033c:	99                   	cdq    
c001033d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010341:	74 19                	je     c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010343:	39 f9                	cmp    ecx,edi
c0010345:	89 d1                	mov    ecx,edx
c0010347:	19 f1                	sbb    ecx,esi
c0010349:	73 11                	jae    c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034b:	e8 d0 da 00 00       	call   c001de20 <lockScheduler()>
c0010350:	e8 07 de 00 00       	call   c001e15c <schedule()>
c0010355:	e8 c8 da 00 00       	call   c001de22 <unlockScheduler()>
c001035a:	eb db                	jmp    c0010337 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035c:	39 f8                	cmp    eax,edi
c001035e:	89 d1                	mov    ecx,edx
c0010360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010364:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010368:	19 f1                	sbb    ecx,esi
c001036a:	73 08                	jae    c0010374 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001036c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010374:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010377:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001037a:	29 c6                	sub    esi,eax
c001037c:	89 f1                	mov    ecx,esi
c001037e:	c1 f9 1f             	sar    ecx,0x1f
c0010381:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010385:	89 ca                	mov    edx,ecx
c0010387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001038b:	19 d1                	sbb    ecx,edx
c001038d:	73 04                	jae    c0010393 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001038f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010393:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010397:	89 fd                	mov    ebp,edi
c0010399:	29 f5                	sub    ebp,esi
c001039b:	85 f6                	test   esi,esi
c001039d:	74 12                	je     c00103b1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001039f:	52                   	push   edx
c00103a0:	56                   	push   esi
c00103a1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103a4:	50                   	push   eax
c00103a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103a9:	e8 96 03 ff ff       	call   c0000744 <memcpy>
c00103ae:	83 c4 10             	add    esp,0x10
c00103b1:	85 ed                	test   ebp,ebp
c00103b3:	74 12                	je     c00103c7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103b5:	50                   	push   eax
c00103b6:	55                   	push   ebp
c00103b7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ba:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103be:	56                   	push   esi
c00103bf:	e8 80 03 ff ff       	call   c0000744 <memcpy>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d0:	99                   	cdq    
c00103d1:	89 f7                	mov    edi,esi
c00103d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103db:	c1 ff 1f             	sar    edi,0x1f
c00103de:	57                   	push   edi
c00103df:	56                   	push   esi
c00103e0:	52                   	push   edx
c00103e1:	50                   	push   eax
c00103e2:	e8 15 67 01 00       	call   c0026afc <__umoddi3>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ed:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103f2:	75 10                	jne    c0010404 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	68 89 a3 02 c0       	push   0xc002a389
c00103fc:	e8 fa a1 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001040c:	89 10                	mov    DWORD PTR [eax],edx
c001040e:	83 c4 1c             	add    esp,0x1c
c0010411:	31 c0                	xor    eax,eax
c0010413:	5b                   	pop    ebx
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	5d                   	pop    ebp
c0010417:	c3                   	ret    

c0010418 <Pipe::write(unsigned long long, void*, int*)>:
c0010418:	55                   	push   ebp
c0010419:	57                   	push   edi
c001041a:	56                   	push   esi
c001041b:	53                   	push   ebx
c001041c:	83 ec 1c             	sub    esp,0x1c
c001041f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010423:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001042b:	89 04 24             	mov    DWORD PTR [esp],eax
c001042e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010431:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010434:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010438:	89 de                	mov    esi,ebx
c001043a:	89 df                	mov    edi,ebx
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	01 c6                	add    esi,eax
c0010441:	89 c8                	mov    eax,ecx
c0010443:	11 d7                	adc    edi,edx
c0010445:	99                   	cdq    
c0010446:	39 f1                	cmp    ecx,esi
c0010448:	89 d0                	mov    eax,edx
c001044a:	19 f8                	sbb    eax,edi
c001044c:	b8 01 00 00 00       	mov    eax,0x1
c0010451:	0f 82 80 00 00 00    	jb     c00104d7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010457:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001045a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001045d:	01 d8                	add    eax,ebx
c001045f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010463:	99                   	cdq    
c0010464:	f7 f9                	idiv   ecx
c0010466:	29 d1                	sub    ecx,edx
c0010468:	89 d7                	mov    edi,edx
c001046a:	89 c8                	mov    eax,ecx
c001046c:	99                   	cdq    
c001046d:	39 ce                	cmp    esi,ecx
c001046f:	19 d3                	sbb    ebx,edx
c0010471:	bb 00 00 00 00       	mov    ebx,0x0
c0010476:	72 04                	jb     c001047c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010478:	89 f3                	mov    ebx,esi
c001047a:	29 cb                	sub    ebx,ecx
c001047c:	89 f1                	mov    ecx,esi
c001047e:	29 d9                	sub    ecx,ebx
c0010480:	74 1a                	je     c001049c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010482:	52                   	push   edx
c0010483:	51                   	push   ecx
c0010484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010488:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001048c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001048f:	57                   	push   edi
c0010490:	e8 af 02 ff ff       	call   c0000744 <memcpy>
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001049c:	85 db                	test   ebx,ebx
c001049e:	74 12                	je     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104a0:	50                   	push   eax
c00104a1:	53                   	push   ebx
c00104a2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104a6:	51                   	push   ecx
c00104a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104b5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ba:	75 10                	jne    c00104cc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	68 a5 a3 02 c0       	push   0xc002a3a5
c00104c4:	e8 32 a1 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104d3:	89 38                	mov    DWORD PTR [eax],edi
c00104d5:	31 c0                	xor    eax,eax
c00104d7:	83 c4 1c             	add    esp,0x1c
c00104da:	5b                   	pop    ebx
c00104db:	5e                   	pop    esi
c00104dc:	5f                   	pop    edi
c00104dd:	5d                   	pop    ebp
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <Pipe::Pipe(int)>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	6a 00                	push   0x0
c00104ec:	50                   	push   eax
c00104ed:	e8 56 12 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	ba cc a3 02 c0       	mov    edx,0xc002a3cc
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	89 10                	mov    DWORD PTR [eax],edx
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010508:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	50                   	push   eax
c0010529:	e8 12 f3 ff ff       	call   c000f840 <malloc>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 c2                	mov    edx,eax
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010542:	90                   	nop
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <VgaText::isAtty()>:
c0010548:	b0 01                	mov    al,0x1
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <VgaText::~VgaText()>:
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	89 10                	mov    DWORD PTR [eax],edx
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	50                   	push   eax
c0010562:	e8 c3 13 00 00       	call   c001192a <UnixFile::~UnixFile()>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	90                   	nop
c001056b:	83 c4 0c             	add    esp,0xc
c001056e:	c3                   	ret    
c001056f:	90                   	nop

c0010570 <VgaText::~VgaText()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	83 ec 0c             	sub    esp,0xc
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 cd ff ff ff       	call   c001054c <VgaText::~VgaText()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	68 60 12 00 00       	push   0x1260
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 e6 28 00 00       	call   c0012e79 <operator delete(void*, unsigned long)>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    

c001059a <VgaText::read(unsigned long long, void*, int*)>:
c001059a:	83 ec 10             	sub    esp,0x10
c001059d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a9:	e8 4e 5d 00 00       	call   c00162fc <readKeyboard(VgaText*, char*, unsigned long)>
c00105ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105b2:	89 02                	mov    DWORD PTR [edx],eax
c00105b4:	31 c0                	xor    eax,eax
c00105b6:	83 c4 1c             	add    esp,0x1c
c00105b9:	c3                   	ret    

c00105ba <setTerminalScrollLock(bool)>:
c00105ba:	c3                   	ret    

c00105bb <addToTerminalCycle(VgaText*)>:
c00105bb:	8b 15 e0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e0
c00105c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c5:	85 d2                	test   edx,edx
c00105c7:	75 0c                	jne    c00105d5 <addToTerminalCycle(VgaText*)+0x1a>
c00105c9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105cf:	a3 e0 e6 02 c0       	mov    ds:0xc002e6e0,eax
c00105d4:	c3                   	ret    
c00105d5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105db:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105e1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105e7:	c3                   	ret    

c00105e8 <installVgaTextImplementation()>:
c00105e8:	83 ec 10             	sub    esp,0x10
c00105eb:	6a 20                	push   0x20
c00105ed:	6a 00                	push   0x0
c00105ef:	68 c0 e6 02 c0       	push   0xc002e6c0
c00105f4:	e8 7f 01 ff ff       	call   c0000778 <memset>
c00105f9:	83 c4 1c             	add    esp,0x1c
c00105fc:	c3                   	ret    

c00105fd <scrollTerminalScrollLock(int)>:
c00105fd:	c3                   	ret    

c00105fe <VgaText::load()>:
c00105fe:	53                   	push   ebx
c00105ff:	31 c0                	xor    eax,eax
c0010601:	83 ec 58             	sub    esp,0x58
c0010604:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010608:	89 e2                	mov    edx,esp
c001060a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001060e:	40                   	inc    eax
c001060f:	83 f8 50             	cmp    eax,0x50
c0010612:	75 f6                	jne    c001060a <VgaText::load()+0xc>
c0010614:	31 c0                	xor    eax,eax
c0010616:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001061d:	84 c9                	test   cl,cl
c001061f:	74 06                	je     c0010627 <VgaText::load()+0x29>
c0010621:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010624:	40                   	inc    eax
c0010625:	eb ef                	jmp    c0010616 <VgaText::load()+0x18>
c0010627:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001062d:	85 c0                	test   eax,eax
c001062f:	74 09                	je     c001063a <VgaText::load()+0x3c>
c0010631:	51                   	push   ecx
c0010632:	51                   	push   ecx
c0010633:	52                   	push   edx
c0010634:	53                   	push   ebx
c0010635:	ff d0                	call   eax
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010640:	85 c0                	test   eax,eax
c0010642:	74 09                	je     c001064d <VgaText::load()+0x4f>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	53                   	push   ebx
c0010648:	ff d0                	call   eax
c001064a:	83 c4 10             	add    esp,0x10
c001064d:	83 c4 58             	add    esp,0x58
c0010650:	5b                   	pop    ebx
c0010651:	c3                   	ret    

c0010652 <VgaText::updateCursor()>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	39 05 e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,eax
c001065c:	75 0c                	jne    c001066a <VgaText::updateCursor()+0x18>
c001065e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010664:	85 c0                	test   eax,eax
c0010666:	74 02                	je     c001066a <VgaText::updateCursor()+0x18>
c0010668:	ff e0                	jmp    eax
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::showCursor(bool)>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::disableBlink(bool)>:
c001067c:	56                   	push   esi
c001067d:	53                   	push   ebx
c001067e:	51                   	push   ecx
c001067f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010687:	39 1d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ebx
c001068d:	75 18                	jne    c00106a7 <VgaText::disableBlink(bool)+0x2b>
c001068f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 0e                	je     c00106a7 <VgaText::disableBlink(bool)+0x2b>
c0010699:	89 f1                	mov    ecx,esi
c001069b:	52                   	push   edx
c001069c:	52                   	push   edx
c001069d:	0f b6 d1             	movzx  edx,cl
c00106a0:	52                   	push   edx
c00106a1:	53                   	push   ebx
c00106a2:	ff d0                	call   eax
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	89 f0                	mov    eax,esi
c00106a9:	83 f0 01             	xor    eax,0x1
c00106ac:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106b2:	58                   	pop    eax
c00106b3:	5b                   	pop    ebx
c00106b4:	5e                   	pop    esi
c00106b5:	c3                   	ret    

c00106b6 <VgaText::doANSI_SGR(int)>:
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106be:	85 d2                	test   edx,edx
c00106c0:	75 14                	jne    c00106d6 <VgaText::doANSI_SGR(int)+0x20>
c00106c2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106c8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ce:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106d4:	eb 65                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	83 fa 07             	cmp    edx,0x7
c00106d9:	75 14                	jne    c00106ef <VgaText::doANSI_SGR(int)+0x39>
c00106db:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106e1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106e7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ed:	eb 4c                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106ef:	83 fa 1b             	cmp    edx,0x1b
c00106f2:	74 ce                	je     c00106c2 <VgaText::doANSI_SGR(int)+0xc>
c00106f4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106f7:	83 f9 07             	cmp    ecx,0x7
c00106fa:	77 09                	ja     c0010705 <VgaText::doANSI_SGR(int)+0x4f>
c00106fc:	8b 14 8d 60 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2aa0]
c0010703:	eb 20                	jmp    c0010725 <VgaText::doANSI_SGR(int)+0x6f>
c0010705:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010708:	83 f9 07             	cmp    ecx,0x7
c001070b:	77 09                	ja     c0010716 <VgaText::doANSI_SGR(int)+0x60>
c001070d:	8b 14 8d 60 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2aa0]
c0010714:	eb 25                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c0010716:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010719:	83 f9 07             	cmp    ecx,0x7
c001071c:	77 0e                	ja     c001072c <VgaText::doANSI_SGR(int)+0x76>
c001071e:	8b 14 95 18 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2be8]
c0010725:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072b:	c3                   	ret    
c001072c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 0d                	ja     c0010741 <VgaText::doANSI_SGR(int)+0x8b>
c0010734:	8b 14 95 f0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c10]
c001073b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010741:	c3                   	ret    

c0010742 <VgaText::setDefaultBgColour(VgaColour)>:
c0010742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010750:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <VgaText::setDefaultFgColour(VgaColour)>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010760:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010766:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001076e:	53                   	push   ebx
c001076f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010773:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010777:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001077b:	51                   	push   ecx
c001077c:	e8 c1 ff ff ff       	call   c0010742 <VgaText::setDefaultBgColour(VgaColour)>
c0010781:	58                   	pop    eax
c0010782:	5a                   	pop    edx
c0010783:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010787:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001078b:	5b                   	pop    ebx
c001078c:	eb ca                	jmp    c0010758 <VgaText::setDefaultFgColour(VgaColour)>

c001078e <VgaText::combineColours(unsigned char, unsigned char)>:
c001078e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010792:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010797:	83 e0 0f             	and    eax,0xf
c001079a:	c1 e2 04             	shl    edx,0x4
c001079d:	09 d0                	or     eax,edx
c001079f:	c3                   	ret    

c00107a0 <VgaText::scrollScreen()>:
c00107a0:	57                   	push   edi
c00107a1:	56                   	push   esi
c00107a2:	be 01 00 00 00       	mov    esi,0x1
c00107a7:	53                   	push   ebx
c00107a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ac:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107b2:	31 ff                	xor    edi,edi
c00107b4:	01 d9                	add    ecx,ebx
c00107b6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107b9:	83 fe 17             	cmp    esi,0x17
c00107bc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107c2:	75 28                	jne    c00107ec <VgaText::scrollScreen()+0x4c>
c00107c4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ca:	74 1c                	je     c00107e8 <VgaText::scrollScreen()+0x48>
c00107cc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107d3:	50                   	push   eax
c00107d4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107db:	50                   	push   eax
c00107dc:	e8 ad ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00107e1:	5a                   	pop    edx
c00107e2:	5a                   	pop    edx
c00107e3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107e6:	eb 04                	jmp    c00107ec <VgaText::scrollScreen()+0x4c>
c00107e8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ec:	47                   	inc    edi
c00107ed:	41                   	inc    ecx
c00107ee:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107f4:	75 c0                	jne    c00107b6 <VgaText::scrollScreen()+0x16>
c00107f6:	46                   	inc    esi
c00107f7:	83 fe 18             	cmp    esi,0x18
c00107fa:	75 b0                	jne    c00107ac <VgaText::scrollScreen()+0xc>
c00107fc:	39 1d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ebx
c0010802:	75 24                	jne    c0010828 <VgaText::scrollScreen()+0x88>
c0010804:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001080b:	74 08                	je     c0010815 <VgaText::scrollScreen()+0x75>
c001080d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010813:	eb 13                	jmp    c0010828 <VgaText::scrollScreen()+0x88>
c0010815:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001081b:	85 c0                	test   eax,eax
c001081d:	74 09                	je     c0010828 <VgaText::scrollScreen()+0x88>
c001081f:	83 ec 0c             	sub    esp,0xc
c0010822:	53                   	push   ebx
c0010823:	ff d0                	call   eax
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082c:	5b                   	pop    ebx
c001082d:	5e                   	pop    esi
c001082e:	5f                   	pop    edi
c001082f:	e9 1e fe ff ff       	jmp    c0010652 <VgaText::updateCursor()>

c0010834 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010839:	c1 e0 08             	shl    eax,0x8
c001083c:	89 c2                	mov    edx,eax
c001083e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010843:	09 d0                	or     eax,edx
c0010845:	c3                   	ret    

c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010846:	53                   	push   ebx
c0010847:	83 ec 08             	sub    esp,0x8
c001084a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001084e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010853:	50                   	push   eax
c0010854:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010859:	50                   	push   eax
c001085a:	e8 2f ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	0f b6 c0             	movzx  eax,al
c0010863:	5b                   	pop    ebx
c0010864:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010869:	50                   	push   eax
c001086a:	53                   	push   ebx
c001086b:	e8 c4 ff ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010870:	5a                   	pop    edx
c0010871:	5a                   	pop    edx
c0010872:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010878:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001087c:	0f b7 d2             	movzx  edx,dx
c001087f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010884:	39 0d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ecx
c001088a:	75 14                	jne    c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010892:	85 c0                	test   eax,eax
c0010894:	74 0a                	je     c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010896:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001089a:	83 c4 08             	add    esp,0x8
c001089d:	5b                   	pop    ebx
c001089e:	ff e0                	jmp    eax
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorX()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorY()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::setCursor(int, int)>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108c6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108d0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108d6:	e9 77 fd ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c00108db:	90                   	nop

c00108dc <VgaText::setCursorX(int)>:
c00108dc:	83 ec 10             	sub    esp,0x10
c00108df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108e3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ed:	50                   	push   eax
c00108ee:	e8 cb ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00108f3:	83 c4 1c             	add    esp,0x1c
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <VgaText::setCursorY(int)>:
c00108f8:	83 ec 10             	sub    esp,0x10
c00108fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010903:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010909:	50                   	push   eax
c001090a:	e8 af ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c001090f:	83 c4 1c             	add    esp,0x1c
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <VgaText::incrementCursor(bool)>:
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	51                   	push   ecx
c0010917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001091f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010925:	40                   	inc    eax
c0010926:	83 f8 50             	cmp    eax,0x50
c0010929:	74 08                	je     c0010933 <VgaText::incrementCursor(bool)+0x1f>
c001092b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010931:	eb 33                	jmp    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010933:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010939:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010943:	8d 50 01             	lea    edx,[eax+0x1]
c0010946:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001094c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010952:	75 12                	jne    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001095d:	53                   	push   ebx
c001095e:	e8 3d fe ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	89 f0                	mov    eax,esi
c0010968:	84 c0                	test   al,al
c001096a:	74 0c                	je     c0010978 <VgaText::incrementCursor(bool)+0x64>
c001096c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010970:	5a                   	pop    edx
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	e9 da fc ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010978:	58                   	pop    eax
c0010979:	5b                   	pop    ebx
c001097a:	5e                   	pop    esi
c001097b:	c3                   	ret    

c001097c <VgaText::updateRAMUsageDisplay(int)>:
c001097c:	56                   	push   esi
c001097d:	8b 35 40 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d540
c0010983:	53                   	push   ebx
c0010984:	bb 0a 00 00 00       	mov    ebx,0xa
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 fc fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	59                   	pop    ecx
c0010994:	0f b6 c8             	movzx  ecx,al
c0010997:	51                   	push   ecx
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	99                   	cdq    
c001099d:	f7 fb                	idiv   ebx
c001099f:	89 d3                	mov    ebx,edx
c00109a1:	83 c0 30             	add    eax,0x30
c00109a4:	83 c3 30             	add    ebx,0x30
c00109a7:	0f be c0             	movsx  eax,al
c00109aa:	0f b6 db             	movzx  ebx,bl
c00109ad:	50                   	push   eax
c00109ae:	e8 81 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5a                   	pop    edx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109bc:	51                   	push   ecx
c00109bd:	53                   	push   ebx
c00109be:	e8 71 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c3:	5b                   	pop    ebx
c00109c4:	5a                   	pop    edx
c00109c5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109cc:	51                   	push   ecx
c00109cd:	6a 25                	push   0x25
c00109cf:	e8 60 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d4:	59                   	pop    ecx
c00109d5:	5b                   	pop    ebx
c00109d6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109dd:	5b                   	pop    ebx
c00109de:	5e                   	pop    esi
c00109df:	c3                   	ret    

c00109e0 <VgaText::updateDiskUsage()>:
c00109e0:	55                   	push   ebp
c00109e1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109e6:	57                   	push   edi
c00109e7:	8b 3d 40 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d540
c00109ed:	56                   	push   esi
c00109ee:	53                   	push   ebx
c00109ef:	6a 0f                	push   0xf
c00109f1:	6a 00                	push   0x0
c00109f3:	e8 96 fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00109f8:	5a                   	pop    edx
c00109f9:	0f b6 d8             	movzx  ebx,al
c00109fc:	59                   	pop    ecx
c00109fd:	8b 35 68 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032968
c0010a03:	53                   	push   ebx
c0010a04:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	8d 42 30             	lea    eax,[edx+0x30]
c0010a14:	0f b6 c0             	movzx  eax,al
c0010a17:	50                   	push   eax
c0010a18:	e8 17 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5d                   	pop    ebp
c0010a1e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a23:	5a                   	pop    edx
c0010a24:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a28:	53                   	push   ebx
c0010a29:	89 f0                	mov    eax,esi
c0010a2b:	99                   	cdq    
c0010a2c:	f7 fd                	idiv   ebp
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 f7 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5d                   	pop    ebp
c0010a3e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a43:	5a                   	pop    edx
c0010a44:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a4b:	53                   	push   ebx
c0010a4c:	89 f0                	mov    eax,esi
c0010a4e:	99                   	cdq    
c0010a4f:	f7 fd                	idiv   ebp
c0010a51:	99                   	cdq    
c0010a52:	f7 f9                	idiv   ecx
c0010a54:	8d 42 30             	lea    eax,[edx+0x30]
c0010a57:	0f b6 c0             	movzx  eax,al
c0010a5a:	50                   	push   eax
c0010a5b:	e8 d4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a60:	5d                   	pop    ebp
c0010a61:	5a                   	pop    edx
c0010a62:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a69:	53                   	push   ebx
c0010a6a:	89 f0                	mov    eax,esi
c0010a6c:	99                   	cdq    
c0010a6d:	f7 f9                	idiv   ecx
c0010a6f:	89 d6                	mov    esi,edx
c0010a71:	99                   	cdq    
c0010a72:	f7 f9                	idiv   ecx
c0010a74:	8d 42 30             	lea    eax,[edx+0x30]
c0010a77:	0f b6 c0             	movzx  eax,al
c0010a7a:	50                   	push   eax
c0010a7b:	e8 b4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a80:	5d                   	pop    ebp
c0010a81:	5a                   	pop    edx
c0010a82:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a89:	53                   	push   ebx
c0010a8a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8d:	0f b6 f0             	movzx  esi,al
c0010a90:	56                   	push   esi
c0010a91:	e8 9e fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5e                   	pop    esi
c0010a97:	8b 35 64 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032964
c0010a9d:	5d                   	pop    ebp
c0010a9e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aa5:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aaa:	53                   	push   ebx
c0010aab:	89 f0                	mov    eax,esi
c0010aad:	99                   	cdq    
c0010aae:	f7 fd                	idiv   ebp
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 75 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	5d                   	pop    ebp
c0010ac1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ac8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010acd:	53                   	push   ebx
c0010ace:	89 f0                	mov    eax,esi
c0010ad0:	99                   	cdq    
c0010ad1:	f7 fd                	idiv   ebp
c0010ad3:	99                   	cdq    
c0010ad4:	f7 f9                	idiv   ecx
c0010ad6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad9:	0f b6 c0             	movzx  eax,al
c0010adc:	50                   	push   eax
c0010add:	e8 52 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae2:	5a                   	pop    edx
c0010ae3:	5d                   	pop    ebp
c0010ae4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aeb:	bd 64 00 00 00       	mov    ebp,0x64
c0010af0:	53                   	push   ebx
c0010af1:	89 f0                	mov    eax,esi
c0010af3:	99                   	cdq    
c0010af4:	f7 fd                	idiv   ebp
c0010af6:	99                   	cdq    
c0010af7:	f7 f9                	idiv   ecx
c0010af9:	83 c2 30             	add    edx,0x30
c0010afc:	0f b6 d2             	movzx  edx,dl
c0010aff:	52                   	push   edx
c0010b00:	e8 2f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b05:	5a                   	pop    edx
c0010b06:	5d                   	pop    ebp
c0010b07:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b0e:	53                   	push   ebx
c0010b0f:	89 f0                	mov    eax,esi
c0010b11:	99                   	cdq    
c0010b12:	f7 f9                	idiv   ecx
c0010b14:	89 d6                	mov    esi,edx
c0010b16:	99                   	cdq    
c0010b17:	f7 f9                	idiv   ecx
c0010b19:	8d 42 30             	lea    eax,[edx+0x30]
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	50                   	push   eax
c0010b20:	e8 0f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b25:	5a                   	pop    edx
c0010b26:	59                   	pop    ecx
c0010b27:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b2e:	53                   	push   ebx
c0010b2f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b32:	0f b6 f0             	movzx  esi,al
c0010b35:	56                   	push   esi
c0010b36:	e8 f9 fc ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	5d                   	pop    ebp
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <VgaText::updateTitle()>:
c0010b4a:	53                   	push   ebx
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	83 ec 58             	sub    esp,0x58
c0010b50:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b54:	89 e1                	mov    ecx,esp
c0010b56:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b5a:	40                   	inc    eax
c0010b5b:	83 f8 50             	cmp    eax,0x50
c0010b5e:	75 f6                	jne    c0010b56 <VgaText::updateTitle()+0xc>
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b69:	84 db                	test   bl,bl
c0010b6b:	74 06                	je     c0010b73 <VgaText::updateTitle()+0x29>
c0010b6d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b70:	40                   	inc    eax
c0010b71:	eb ef                	jmp    c0010b62 <VgaText::updateTitle()+0x18>
c0010b73:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b79:	85 c0                	test   eax,eax
c0010b7b:	74 09                	je     c0010b86 <VgaText::updateTitle()+0x3c>
c0010b7d:	53                   	push   ebx
c0010b7e:	53                   	push   ebx
c0010b7f:	51                   	push   ecx
c0010b80:	52                   	push   edx
c0010b81:	ff d0                	call   eax
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	e8 55 fe ff ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0010b8b:	83 c4 58             	add    esp,0x58
c0010b8e:	5b                   	pop    ebx
c0010b8f:	c3                   	ret    

c0010b90 <VgaText::setTitleTextColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b9e:	eb aa                	jmp    c0010b4a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitleColour(VgaColour)>:
c0010ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bae:	eb 9a                	jmp    c0010b4a <VgaText::updateTitle()>

c0010bb0 <VgaText::setTitle(char*)>:
c0010bb0:	53                   	push   ebx
c0010bb1:	83 ec 10             	sub    esp,0x10
c0010bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bc2:	50                   	push   eax
c0010bc3:	e8 6c fc fe ff       	call   c0000834 <strcpy>
c0010bc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bcc:	83 c4 18             	add    esp,0x18
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 75 ff ff ff       	jmp    c0010b4a <VgaText::updateTitle()>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::decrementCursor(bool)>:
c0010bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bde:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010be4:	85 c0                	test   eax,eax
c0010be6:	74 07                	je     c0010bef <VgaText::decrementCursor(bool)+0x19>
c0010be8:	48                   	dec    eax
c0010be9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bef:	84 c9                	test   cl,cl
c0010bf1:	74 09                	je     c0010bfc <VgaText::decrementCursor(bool)+0x26>
c0010bf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf7:	e9 56 fa ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bfe:	53                   	push   ebx
c0010bff:	83 ec 08             	sub    esp,0x8
c0010c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c12:	3c 07                	cmp    al,0x7
c0010c14:	75 2a                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c16:	a1 90 e7 02 c0       	mov    eax,ds:0xc002e790
c0010c1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c23:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c2b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	e9 18 31 00 00       	jmp    c0013d58 <Buzzer::beep(int, int, bool)>
c0010c40:	3c 0d                	cmp    al,0xd
c0010c42:	75 0c                	jne    c0010c50 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c44:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c4e:	eb 3b                	jmp    c0010c8b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c50:	3c 0a                	cmp    al,0xa
c0010c52:	75 40                	jne    c0010c94 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c54:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c64:	8d 50 01             	lea    edx,[eax+0x1]
c0010c67:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c6d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c73:	75 12                	jne    c0010c87 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 1c fb ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c8b:	83 c4 08             	add    esp,0x8
c0010c8e:	5b                   	pop    ebx
c0010c8f:	e9 be f9 ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010c94:	3c 08                	cmp    al,0x8
c0010c96:	75 31                	jne    c0010cc9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c98:	50                   	push   eax
c0010c99:	50                   	push   eax
c0010c9a:	6a 01                	push   0x1
c0010c9c:	53                   	push   ebx
c0010c9d:	e8 34 ff ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ca2:	5a                   	pop    edx
c0010ca3:	59                   	pop    ecx
c0010ca4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010caa:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cb0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cb6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cbc:	6a 20                	push   0x20
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 82 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc4:	83 c4 28             	add    esp,0x28
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	0f be c0             	movsx  eax,al
c0010ccf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cd5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cdb:	51                   	push   ecx
c0010cdc:	52                   	push   edx
c0010cdd:	50                   	push   eax
c0010cde:	53                   	push   ebx
c0010cdf:	e8 62 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ce4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ce8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cf0:	83 c4 28             	add    esp,0x28
c0010cf3:	5b                   	pop    ebx
c0010cf4:	e9 1b fc ff ff       	jmp    c0010914 <VgaText::incrementCursor(bool)>
c0010cf9:	90                   	nop

c0010cfa <VgaText::isShowingCursor()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop

c0010d06 <VgaText::isBlinkDisabled()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d10:	83 f0 01             	xor    eax,0x1
c0010d13:	c3                   	ret    

c0010d14 <VgaText::setCursorHeight(int)>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d1c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d22:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d2d:	e9 3a f9 ff ff       	jmp    c001066c <VgaText::showCursor(bool)>

c0010d32 <VgaText::getCursorHeight()>:
c0010d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d36:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d3c:	c3                   	ret    

c0010d3d <setActiveTerminal(VgaText*)>:
c0010d3d:	53                   	push   ebx
c0010d3e:	83 ec 08             	sub    esp,0x8
c0010d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d45:	85 db                	test   ebx,ebx
c0010d47:	75 11                	jne    c0010d5a <setActiveTerminal(VgaText*)+0x1d>
c0010d49:	c7 44 24 10 e0 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3e0
c0010d51:	83 c4 08             	add    esp,0x8
c0010d54:	5b                   	pop    ebx
c0010d55:	e9 a1 98 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c0010d5a:	50                   	push   eax
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	68 ee a3 02 c0       	push   0xc002a3ee
c0010d62:	e8 f2 21 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0010d67:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	85 c0                	test   eax,eax
c0010d71:	74 0c                	je     c0010d7f <setActiveTerminal(VgaText*)+0x42>
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	50                   	push   eax
c0010d77:	e8 d6 f8 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 1d e4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e4,ebx
c0010d85:	51                   	push   ecx
c0010d86:	51                   	push   ecx
c0010d87:	53                   	push   ebx
c0010d88:	68 06 a4 02 c0       	push   0xc002a406
c0010d8d:	e8 c7 21 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0010d92:	83 c4 0c             	add    esp,0xc
c0010d95:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d9b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010da1:	53                   	push   ebx
c0010da2:	e8 17 fb ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 57 ff ff ff       	call   c0010d06 <VgaText::isBlinkDisabled()>
c0010daf:	5a                   	pop    edx
c0010db0:	0f b6 c0             	movzx  eax,al
c0010db3:	59                   	pop    ecx
c0010db4:	50                   	push   eax
c0010db5:	53                   	push   ebx
c0010db6:	e8 c1 f8 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 6f ff ff ff       	call   c0010d32 <VgaText::getCursorHeight()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	59                   	pop    ecx
c0010dc5:	50                   	push   eax
c0010dc6:	53                   	push   ebx
c0010dc7:	e8 48 ff ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dd6:	75 0a                	jne    c0010de2 <setActiveTerminal(VgaText*)+0xa5>
c0010dd8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010de2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010de6:	83 c4 08             	add    esp,0x8
c0010de9:	5b                   	pop    ebx
c0010dea:	e9 0f f8 ff ff       	jmp    c00105fe <VgaText::load()>

c0010def <doTerminalCycle()>:
c0010def:	83 ec 18             	sub    esp,0x18
c0010df2:	a1 e0 e6 02 c0       	mov    eax,ds:0xc002e6e0
c0010df7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dfd:	50                   	push   eax
c0010dfe:	a3 e0 e6 02 c0       	mov    ds:0xc002e6e0,eax
c0010e03:	e8 35 ff ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0010e08:	83 c4 1c             	add    esp,0x1c
c0010e0b:	c3                   	ret    

c0010e0c <VgaText::doUpdate()>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e16:	85 c0                	test   eax,eax
c0010e18:	74 02                	je     c0010e1c <VgaText::doUpdate()+0x10>
c0010e1a:	ff e0                	jmp    eax
c0010e1c:	c3                   	ret    
c0010e1d:	90                   	nop

c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e35:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e38:	50                   	push   eax
c0010e39:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3e:	50                   	push   eax
c0010e3f:	e8 4a f9 ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e44:	59                   	pop    ecx
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	5b                   	pop    ebx
c0010e49:	31 c9                	xor    ecx,ecx
c0010e4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e57:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e61:	0f b7 db             	movzx  ebx,bx
c0010e64:	01 db                	add    ebx,ebx
c0010e66:	01 fb                	add    ebx,edi
c0010e68:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e6b:	84 c0                	test   al,al
c0010e6d:	0f 84 38 01 00 00    	je     c0010fab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e73:	3c 0d                	cmp    al,0xd
c0010e75:	75 0f                	jne    c0010e86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e77:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e81:	e9 1f 01 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e86:	3c 0a                	cmp    al,0xa
c0010e88:	75 5b                	jne    c0010ee5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e8a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e90:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e9d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ea3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ea9:	75 12                	jne    c0010ebd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 e6 f8 ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	83 ec 0c             	sub    esp,0xc
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 8c f7 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010ec6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed7:	31 c9                	xor    ecx,ecx
c0010ed9:	0f b7 db             	movzx  ebx,bx
c0010edc:	01 db                	add    ebx,ebx
c0010ede:	01 fb                	add    ebx,edi
c0010ee0:	e9 c0 00 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee5:	3c 08                	cmp    al,0x8
c0010ee7:	75 4e                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ee9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010eed:	53                   	push   ebx
c0010eee:	53                   	push   ebx
c0010eef:	6a 01                	push   0x1
c0010ef1:	55                   	push   ebp
c0010ef2:	e8 df fc ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ef7:	58                   	pop    eax
c0010ef8:	5a                   	pop    edx
c0010ef9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eff:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f05:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f0b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f11:	6a 20                	push   0x20
c0010f13:	55                   	push   ebp
c0010f14:	e8 2d f9 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f19:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f21:	83 c4 20             	add    esp,0x20
c0010f24:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2e:	0f b7 db             	movzx  ebx,bx
c0010f31:	01 db                	add    ebx,ebx
c0010f33:	01 fb                	add    ebx,edi
c0010f35:	eb 6e                	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f37:	51                   	push   ecx
c0010f38:	51                   	push   ecx
c0010f39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f3d:	50                   	push   eax
c0010f3e:	e8 f1 f8 ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f49:	39 2d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ebp
c0010f4f:	75 2a                	jne    c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f51:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f57:	85 c0                	test   eax,eax
c0010f59:	74 20                	je     c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5b:	52                   	push   edx
c0010f5c:	52                   	push   edx
c0010f5d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f63:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f71:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f74:	51                   	push   ecx
c0010f75:	55                   	push   ebp
c0010f76:	ff d0                	call   eax
c0010f78:	83 c4 20             	add    esp,0x20
c0010f7b:	83 c3 02             	add    ebx,0x2
c0010f7e:	50                   	push   eax
c0010f7f:	50                   	push   eax
c0010f80:	6a 00                	push   0x0
c0010f82:	55                   	push   ebp
c0010f83:	e8 8c f9 ff ff       	call   c0010914 <VgaText::incrementCursor(bool)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f92:	75 0f                	jne    c0010fa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f94:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f9c:	0f b7 db             	movzx  ebx,bx
c0010f9f:	01 db                	add    ebx,ebx
c0010fa1:	01 fb                	add    ebx,edi
c0010fa3:	b1 01                	mov    cl,0x1
c0010fa5:	46                   	inc    esi
c0010fa6:	e9 bd fe ff ff       	jmp    c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 9a f6 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fbf:	84 c9                	test   cl,cl
c0010fc1:	74 0c                	je     c0010fcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 40 fe ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fd6:	83 c4 1c             	add    esp,0x1c
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	5f                   	pop    edi
c0010fdc:	5d                   	pop    ebp
c0010fdd:	c3                   	ret    

c0010fde <VgaText::clearScreen()>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	31 f6                	xor    esi,esi
c0010fe2:	53                   	push   ebx
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	52                   	push   edx
c0010fe8:	6a 00                	push   0x0
c0010fea:	6a 00                	push   0x0
c0010fec:	53                   	push   ebx
c0010fed:	e8 cc f8 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010ff2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011002:	7e 26                	jle    c001102a <VgaText::clearScreen()+0x4c>
c0011004:	31 ff                	xor    edi,edi
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	56                   	push   esi
c0011009:	57                   	push   edi
c001100a:	47                   	inc    edi
c001100b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011011:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011017:	6a 20                	push   0x20
c0011019:	53                   	push   ebx
c001101a:	e8 27 f8 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001101f:	83 c4 20             	add    esp,0x20
c0011022:	83 ff 50             	cmp    edi,0x50
c0011025:	75 df                	jne    c0011006 <VgaText::clearScreen()+0x28>
c0011027:	46                   	inc    esi
c0011028:	eb d2                	jmp    c0010ffc <VgaText::clearScreen()+0x1e>
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	53                   	push   ebx
c001102e:	e8 d9 fd ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011033:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	5b                   	pop    ebx
c001103e:	5e                   	pop    esi
c001103f:	5f                   	pop    edi
c0011040:	c3                   	ret    
c0011041:	90                   	nop

c0011042 <VgaText::putchar(char)>:
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 14             	sub    esp,0x14
c0011047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001104b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001104f:	3c 5b                	cmp    al,0x5b
c0011051:	75 21                	jne    c0011074 <VgaText::putchar(char)+0x32>
c0011053:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001105a:	74 28                	je     c0011084 <VgaText::putchar(char)+0x42>
c001105c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011065:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001106f:	e9 e2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011074:	3c 1b                	cmp    al,0x1b
c0011076:	75 0c                	jne    c0011084 <VgaText::putchar(char)+0x42>
c0011078:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001107f:	e9 d2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011084:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001108a:	84 c9                	test   cl,cl
c001108c:	0f 84 ab 00 00 00    	je     c001113d <VgaText::putchar(char)+0xfb>
c0011092:	8d 50 c0             	lea    edx,[eax-0x40]
c0011095:	80 fa 3e             	cmp    dl,0x3e
c0011098:	0f 87 82 00 00 00    	ja     c0011120 <VgaText::putchar(char)+0xde>
c001109e:	3c 6d                	cmp    al,0x6d
c00110a0:	75 4d                	jne    c00110ef <VgaText::putchar(char)+0xad>
c00110a2:	31 f6                	xor    esi,esi
c00110a4:	31 d2                	xor    edx,edx
c00110a6:	31 c0                	xor    eax,eax
c00110a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ae:	7e 30                	jle    c00110e0 <VgaText::putchar(char)+0x9e>
c00110b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110b8:	80 fa 3b             	cmp    dl,0x3b
c00110bb:	75 17                	jne    c00110d4 <VgaText::putchar(char)+0x92>
c00110bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110c1:	50                   	push   eax
c00110c2:	53                   	push   ebx
c00110c3:	e8 ee f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110c8:	59                   	pop    ecx
c00110c9:	31 d2                	xor    edx,edx
c00110cb:	58                   	pop    eax
c00110cc:	31 c0                	xor    eax,eax
c00110ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110d2:	eb 09                	jmp    c00110dd <VgaText::putchar(char)+0x9b>
c00110d4:	6b c0 0a             	imul   eax,eax,0xa
c00110d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110db:	88 ca                	mov    dl,cl
c00110dd:	46                   	inc    esi
c00110de:	eb c8                	jmp    c00110a8 <VgaText::putchar(char)+0x66>
c00110e0:	84 d2                	test   dl,dl
c00110e2:	74 31                	je     c0011115 <VgaText::putchar(char)+0xd3>
c00110e4:	50                   	push   eax
c00110e5:	53                   	push   ebx
c00110e6:	e8 cb f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110eb:	58                   	pop    eax
c00110ec:	5a                   	pop    edx
c00110ed:	eb 26                	jmp    c0011115 <VgaText::putchar(char)+0xd3>
c00110ef:	3c 4a                	cmp    al,0x4a
c00110f1:	75 22                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110fa:	75 19                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	53                   	push   ebx
c0011100:	e8 d9 fe ff ff       	call   c0010fde <VgaText::clearScreen()>
c0011105:	83 c4 0c             	add    esp,0xc
c0011108:	6a 00                	push   0x0
c001110a:	6a 00                	push   0x0
c001110c:	53                   	push   ebx
c001110d:	e8 ac f7 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001111e:	eb 36                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011120:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011126:	83 fa 0e             	cmp    edx,0xe
c0011129:	7f 2b                	jg     c0011156 <VgaText::putchar(char)+0x114>
c001112b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001112e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011134:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001113b:	eb 19                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c001113d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011143:	0f be c0             	movsx  eax,al
c0011146:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001114c:	50                   	push   eax
c001114d:	53                   	push   ebx
c001114e:	e8 ab fa ff ff       	call   c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	83 c4 14             	add    esp,0x14
c0011159:	5b                   	pop    ebx
c001115a:	5e                   	pop    esi
c001115b:	c3                   	ret    

c001115c <VgaText::puts(char const*)>:
c001115c:	53                   	push   ebx
c001115d:	83 ec 08             	sub    esp,0x8
c0011160:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011164:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011167:	84 c0                	test   al,al
c0011169:	74 12                	je     c001117d <VgaText::puts(char const*)+0x21>
c001116b:	43                   	inc    ebx
c001116c:	51                   	push   ecx
c001116d:	51                   	push   ecx
c001116e:	50                   	push   eax
c001116f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011173:	e8 ca fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	eb e7                	jmp    c0011164 <VgaText::puts(char const*)+0x8>
c001117d:	83 c4 08             	add    esp,0x8
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <VgaText::putx(unsigned int)>:
c0011182:	57                   	push   edi
c0011183:	b9 11 00 00 00       	mov    ecx,0x11
c0011188:	56                   	push   esi
c0011189:	be 22 a4 02 c0       	mov    esi,0xc002a422
c001118e:	53                   	push   ebx
c001118f:	83 ec 20             	sub    esp,0x20
c0011192:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011196:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001119a:	fc                   	cld    
c001119b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119d:	be 08 00 00 00       	mov    esi,0x8
c00111a2:	50                   	push   eax
c00111a3:	50                   	push   eax
c00111a4:	89 d8                	mov    eax,ebx
c00111a6:	c1 e3 04             	shl    ebx,0x4
c00111a9:	c1 e8 1c             	shr    eax,0x1c
c00111ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111b1:	50                   	push   eax
c00111b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111b6:	e8 87 fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	4e                   	dec    esi
c00111bf:	75 e1                	jne    c00111a2 <VgaText::putx(unsigned int)+0x20>
c00111c1:	83 c4 20             	add    esp,0x20
c00111c4:	5b                   	pop    ebx
c00111c5:	5e                   	pop    esi
c00111c6:	5f                   	pop    edi
c00111c7:	c3                   	ret    

c00111c8 <VgaText::VgaText(char const*)>:
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	6a 00                	push   0x0
c00111d4:	50                   	push   eax
c00111d5:	e8 6e 05 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	89 10                	mov    DWORD PTR [eax],edx
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001120f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011213:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011256:	bb c0 e6 02 c0       	mov    ebx,0xc002e6c0
c001125b:	b8 08 00 00 00       	mov    eax,0x8
c0011260:	fc                   	cld    
c0011261:	89 d7                	mov    edi,edx
c0011263:	89 de                	mov    esi,ebx
c0011265:	89 c1                	mov    ecx,eax
c0011267:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126d:	05 1e 10 00 00       	add    eax,0x101e
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011279:	50                   	push   eax
c001127a:	e8 b5 f5 fe ff       	call   c0000834 <strcpy>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011286:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	83 c0 0c             	add    eax,0xc
c0011297:	83 ec 04             	sub    esp,0x4
c001129a:	68 00 0f 00 00       	push   0xf00
c001129f:	6a 00                	push   0x0
c00112a1:	50                   	push   eax
c00112a2:	e8 d1 f4 fe ff       	call   c0000778 <memset>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 04             	sub    esp,0x4
c00112ad:	6a 00                	push   0x0
c00112af:	6a 07                	push   0x7
c00112b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b5:	e8 b4 f4 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	6a 02                	push   0x2
c00112c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c6:	e8 49 fa ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	83 ec 04             	sub    esp,0x4
c00112d1:	6a 00                	push   0x0
c00112d3:	6a 00                	push   0x0
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 e0 f5 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	6a 01                	push   0x1
c00112e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ea:	e8 7d f3 ff ff       	call   c001066c <VgaText::showCursor(bool)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	6a 01                	push   0x1
c00112f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fb:	e8 7c f3 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0011300:	83 c4 10             	add    esp,0x10
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 cf fc ff ff       	call   c0010fde <VgaText::clearScreen()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011316:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011321:	05 9e 10 00 00       	add    eax,0x109e
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	68 96 00 00 00       	push   0x96
c001132e:	6a 00                	push   0x0
c0011330:	50                   	push   eax
c0011331:	e8 42 f4 fe ff       	call   c0000778 <memset>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133d:	05 34 11 00 00       	add    eax,0x1134
c0011342:	83 ec 04             	sub    esp,0x4
c0011345:	68 2c 01 00 00       	push   0x12c
c001134a:	6a 00                	push   0x0
c001134c:	50                   	push   eax
c001134d:	e8 26 f4 fe ff       	call   c0000778 <memset>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	90                   	nop
c0011356:	5b                   	pop    ebx
c0011357:	5e                   	pop    esi
c0011358:	5f                   	pop    edi
c0011359:	c3                   	ret    

c001135a <VgaText::receiveKey(unsigned char)>:
c001135a:	55                   	push   ebp
c001135b:	57                   	push   edi
c001135c:	56                   	push   esi
c001135d:	53                   	push   ebx
c001135e:	83 ec 1c             	sub    esp,0x1c
c0011361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011365:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011369:	84 db                	test   bl,bl
c001136b:	0f 84 c9 00 00 00    	je     c001143a <VgaText::receiveKey(unsigned char)+0xe0>
c0011371:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011377:	80 fb 08             	cmp    bl,0x8
c001137a:	75 2c                	jne    c00113a8 <VgaText::receiveKey(unsigned char)+0x4e>
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	57                   	push   edi
c0011380:	e8 0f f4 fe ff       	call   c0000794 <strlen>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	85 c0                	test   eax,eax
c001138a:	74 41                	je     c00113cd <VgaText::receiveKey(unsigned char)+0x73>
c001138c:	50                   	push   eax
c001138d:	50                   	push   eax
c001138e:	6a 08                	push   0x8
c0011390:	56                   	push   esi
c0011391:	e8 ac fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113a6:	eb 22                	jmp    c00113ca <VgaText::receiveKey(unsigned char)+0x70>
c00113a8:	0f be c3             	movsx  eax,bl
c00113ab:	52                   	push   edx
c00113ac:	52                   	push   edx
c00113ad:	50                   	push   eax
c00113ae:	56                   	push   esi
c00113af:	e8 8e fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c00113b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113bd:	59                   	pop    ecx
c00113be:	5d                   	pop    ebp
c00113bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	e8 aa f5 fe ff       	call   c0000974 <strcat>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113d4:	75 05                	jne    c00113db <VgaText::receiveKey(unsigned char)+0x81>
c00113d6:	80 fb 0a             	cmp    bl,0xa
c00113d9:	75 53                	jne    c001142e <VgaText::receiveKey(unsigned char)+0xd4>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113e4:	53                   	push   ebx
c00113e5:	e8 aa f3 fe ff       	call   c0000794 <strlen>
c00113ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ed:	89 c5                	mov    ebp,eax
c00113ef:	e8 a0 f3 fe ff       	call   c0000794 <strlen>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011400:	76 10                	jbe    c0011412 <VgaText::receiveKey(unsigned char)+0xb8>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	68 33 a4 02 c0       	push   0xc002a433
c001140a:	e8 ec 91 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	50                   	push   eax
c0011413:	50                   	push   eax
c0011414:	57                   	push   edi
c0011415:	53                   	push   ebx
c0011416:	e8 59 f5 fe ff       	call   c0000974 <strcat>
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	68 96 00 00 00       	push   0x96
c0011423:	6a 00                	push   0x0
c0011425:	57                   	push   edi
c0011426:	e8 4d f3 fe ff       	call   c0000778 <memset>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	56                   	push   esi
c0011432:	e8 d5 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 c4 1c             	add    esp,0x1c
c001143d:	5b                   	pop    ebx
c001143e:	5e                   	pop    esi
c001143f:	5f                   	pop    edi
c0011440:	5d                   	pop    ebp
c0011441:	c3                   	ret    

c0011442 <VgaText::write(unsigned long long, void*, int*)>:
c0011442:	55                   	push   ebp
c0011443:	57                   	push   edi
c0011444:	56                   	push   esi
c0011445:	53                   	push   ebx
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001144d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011455:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001145c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001145f:	39 eb                	cmp    ebx,ebp
c0011461:	74 13                	je     c0011476 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011463:	43                   	inc    ebx
c0011464:	50                   	push   eax
c0011465:	50                   	push   eax
c0011466:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001146a:	50                   	push   eax
c001146b:	56                   	push   esi
c001146c:	e8 d1 fb ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	eb e9                	jmp    c001145f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011480:	56                   	push   esi
c0011481:	e8 86 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001148a:	89 38                	mov    DWORD PTR [eax],edi
c001148c:	83 c4 1c             	add    esp,0x1c
c001148f:	31 c0                	xor    eax,eax
c0011491:	5b                   	pop    ebx
c0011492:	5e                   	pop    esi
c0011493:	5f                   	pop    edi
c0011494:	5d                   	pop    ebp
c0011495:	c3                   	ret    

c0011496 <newTerminal(char*)>:
c0011496:	83 ec 28             	sub    esp,0x28
c0011499:	68 60 12 00 00       	push   0x1260
c001149e:	e8 9d e3 ff ff       	call   c000f840 <malloc>
c00114a3:	5a                   	pop    edx
c00114a4:	59                   	pop    ecx
c00114a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114a9:	50                   	push   eax
c00114aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ae:	e8 15 fd ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c00114b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b7:	83 c4 2c             	add    esp,0x2c
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::TSS()>:
c00114bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114c7:	90                   	nop
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop

c00114ca <TSS::setESP(unsigned long)>:
c00114ca:	55                   	push   ebp
c00114cb:	89 e5                	mov    ebp,esp
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d9:	90                   	nop
c00114da:	5d                   	pop    ebp
c00114db:	c3                   	ret    

c00114dc <TSS::flush()>:
c00114dc:	55                   	push   ebp
c00114dd:	89 e5                	mov    ebp,esp
c00114df:	83 ec 10             	sub    esp,0x10
c00114e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e7:	83 c8 03             	or     eax,0x3
c00114ea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114f2:	66 89 d0             	mov    ax,dx
c00114f5:	0f 00 d8             	ltr    ax
c00114f8:	90                   	nop
c00114f9:	c9                   	leave  
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <TSS::setup(unsigned long, unsigned long)>:
c00114fc:	55                   	push   ebp
c00114fd:	89 e5                	mov    ebp,esp
c00114ff:	83 ec 18             	sub    esp,0x18
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	6a 68                	push   0x68
c0011507:	e8 34 e3 ff ff       	call   c000f840 <malloc>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	89 c2                	mov    edx,eax
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	83 ec 04             	sub    esp,0x4
c0011520:	6a 68                	push   0x68
c0011522:	6a 00                	push   0x0
c0011524:	50                   	push   eax
c0011525:	e8 4e f2 fe ff       	call   c0000778 <memset>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001154e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c4:	0f 20 da             	mov    edx,cr3
c00115c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115cd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	50                   	push   eax
c00115da:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115dd:	50                   	push   eax
c00115de:	e8 3b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	83 ec 08             	sub    esp,0x8
c00115e9:	6a 68                	push   0x68
c00115eb:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ee:	50                   	push   eax
c00115ef:	e8 46 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115fb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fe:	83 e0 0f             	and    eax,0xf
c0011601:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011604:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011607:	83 c8 40             	or     eax,0x40
c001160a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001160d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0011612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011618:	05 78 01 00 00       	add    eax,0x178
c001161d:	83 ec 04             	sub    esp,0x4
c0011620:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011623:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011626:	50                   	push   eax
c0011627:	e8 42 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	89 c2                	mov    edx,eax
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	89 10                	mov    DWORD PTR [eax],edx
c0011636:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001163b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011641:	05 78 01 00 00       	add    eax,0x178
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	50                   	push   eax
c001164a:	e8 63 da ff ff       	call   c000f0b2 <GDT::flush()>
c001164f:	83 c4 10             	add    esp,0x10
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	8b 00                	mov    eax,DWORD PTR [eax]
c0011657:	83 ec 08             	sub    esp,0x8
c001165a:	50                   	push   eax
c001165b:	68 9c a4 02 c0       	push   0xc002a49c
c0011660:	e8 f4 18 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	c9                   	leave  
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001167b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011680:	75 08                	jne    c001168a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011682:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011688:	eb 38                	jmp    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001168a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001168f:	75 17                	jne    c00116a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011699:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001169f:	8b 10                	mov    edx,DWORD PTR [eax]
c00116a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116a8:	89 c1                	mov    ecx,eax
c00116aa:	83 e1 fd             	and    ecx,0xfffffffd
c00116ad:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116b3:	74 cd                	je     c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ba:	83 e0 ef             	and    eax,0xffffffef
c00116bd:	83 f8 08             	cmp    eax,0x8
c00116c0:	76 c0                	jbe    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c2:	31 c0                	xor    eax,eax
c00116c4:	c3                   	ret    
c00116c5:	90                   	nop

c00116c6 <ReservedFilename::isAtty()>:
c00116c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116cd:	31 c0                	xor    eax,eax
c00116cf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116d5:	74 09                	je     c00116e0 <ReservedFilename::isAtty()+0x1a>
c00116d7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116dd:	0f 94 c0             	sete   al
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116f6:	75 08                	jne    c0011700 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116fe:	eb 3d                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011700:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011705:	75 17                	jne    c001171e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011715:	8b 10                	mov    edx,DWORD PTR [eax]
c0011717:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001171e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011723:	75 04                	jne    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011725:	89 0a                	mov    DWORD PTR [edx],ecx
c0011727:	eb 14                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011729:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001172e:	74 c8                	je     c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011730:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011735:	83 e0 ef             	and    eax,0xffffffef
c0011738:	83 f8 08             	cmp    eax,0x8
c001173b:	76 bb                	jbe    c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173d:	31 c0                	xor    eax,eax
c001173f:	c3                   	ret    

c0011740 <UnixFile::getFileDescriptor()>:
c0011740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011747:	c3                   	ret    

c0011748 <UnixFile::UnixFile(int)>:
c0011748:	53                   	push   ebx
c0011749:	83 ec 28             	sub    esp,0x28
c001174c:	ba 88 a5 02 c0       	mov    edx,0xc002a588
c0011751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011755:	89 10                	mov    DWORD PTR [eax],edx
c0011757:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001175f:	0f 8f 8c 01 00 00    	jg     c00118f1 <UnixFile::UnixFile(int)+0x1a9>
c0011765:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001176a:	8d 50 01             	lea    edx,[eax+0x1]
c001176d:	89 15 a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,edx
c0011773:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011777:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011781:	68 78 e7 02 c0       	push   0xc002e778
c0011786:	e8 e5 6f 01 00       	call   c0028770 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	a0 74 e7 02 c0       	mov    al,ds:0xc002e774
c0011793:	83 f0 01             	xor    eax,0x1
c0011796:	84 c0                	test   al,al
c0011798:	0f 84 54 01 00 00    	je     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c001179e:	c6 05 74 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e774,0x1
c00117a5:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117b4:	e8 87 e0 ff ff       	call   c000f840 <malloc>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	89 c3                	mov    ebx,eax
c00117be:	83 ec 08             	sub    esp,0x8
c00117c1:	68 03 ff ff 0f       	push   0xfffff03
c00117c6:	53                   	push   ebx
c00117c7:	e8 2c 01 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117cc:	83 c4 10             	add    esp,0x10
c00117cf:	89 1d 6c e7 02 c0    	mov    DWORD PTR ds:0xc002e76c,ebx
c00117d5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 57 e0 ff ff       	call   c000f840 <malloc>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	89 c3                	mov    ebx,eax
c00117ee:	83 ec 08             	sub    esp,0x8
c00117f1:	68 01 ff ff 0f       	push   0xfffff01
c00117f6:	53                   	push   ebx
c00117f7:	e8 fc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 1d 70 e7 02 c0    	mov    DWORD PTR ds:0xc002e770,ebx
c0011805:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011814:	e8 27 e0 ff ff       	call   c000f840 <malloc>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	89 c3                	mov    ebx,eax
c001181e:	83 ec 08             	sub    esp,0x8
c0011821:	68 00 ff ff 0f       	push   0xfffff00
c0011826:	53                   	push   ebx
c0011827:	e8 cc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	89 1d 64 e7 02 c0    	mov    DWORD PTR ds:0xc002e764,ebx
c0011835:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 f7 df ff ff       	call   c000f840 <malloc>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	89 c3                	mov    ebx,eax
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	68 02 ff ff 0f       	push   0xfffff02
c0011856:	53                   	push   ebx
c0011857:	e8 9c 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 1d 68 e7 02 c0    	mov    DWORD PTR ds:0xc002e768,ebx
c0011865:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011872:	7f 7e                	jg     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c0011874:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011883:	e8 b8 df ff ff       	call   c000f840 <malloc>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	89 c3                	mov    ebx,eax
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	50                   	push   eax
c001189a:	53                   	push   ebx
c001189b:	e8 58 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a7:	89 1c 85 40 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18c0],ebx
c00118ae:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118bd:	e8 7e df ff ff       	call   c000f840 <malloc>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	89 c3                	mov    ebx,eax
c00118c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	50                   	push   eax
c00118d4:	53                   	push   ebx
c00118d5:	e8 1e 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e1:	89 1c 85 00 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1900],ebx
c00118e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ec:	e9 7c ff ff ff       	jmp    c001186d <UnixFile::UnixFile(int)+0x125>
c00118f1:	90                   	nop
c00118f2:	83 c4 28             	add    esp,0x28
c00118f5:	5b                   	pop    ebx
c00118f6:	c3                   	ret    
c00118f7:	90                   	nop

c00118f8 <ReservedFilename::ReservedFilename(int)>:
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ff:	83 ec 08             	sub    esp,0x8
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	50                   	push   eax
c0011907:	e8 3c fe ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	ba a4 a5 02 c0       	mov    edx,0xc002a5a4
c0011914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011918:	89 10                	mov    DWORD PTR [eax],edx
c001191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011922:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011925:	90                   	nop
c0011926:	83 c4 0c             	add    esp,0xc
c0011929:	c3                   	ret    

c001192a <UnixFile::~UnixFile()>:
c001192a:	83 ec 1c             	sub    esp,0x1c
c001192d:	ba 88 a5 02 c0       	mov    edx,0xc002a588
c0011932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011936:	89 10                	mov    DWORD PTR [eax],edx
c0011938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001193c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011944:	7f 73                	jg     c00119b9 <UnixFile::~UnixFile()+0x8f>
c0011946:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 78 e7 02 c0       	push   0xc002e778
c0011956:	e8 e9 6e 01 00       	call   c0028844 <LinkedList<UnixFile>::getFirstElement()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 78 e7 02 c0       	push   0xc002e778
c001196a:	e8 dd 6e 01 00       	call   c002884c <LinkedList<UnixFile>::removeFirst()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011976:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001197a:	74 40                	je     c00119bc <UnixFile::~UnixFile()+0x92>
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011983:	68 78 e7 02 c0       	push   0xc002e778
c0011988:	e8 e3 6d 01 00       	call   c0028770 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011994:	8d 50 01             	lea    edx,[eax+0x1]
c0011997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001199b:	3d 88 13 00 00       	cmp    eax,0x1388
c00119a0:	0f 94 c0             	sete   al
c00119a3:	84 c0                	test   al,al
c00119a5:	74 a7                	je     c001194e <UnixFile::~UnixFile()+0x24>
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	68 60 a5 02 c0       	push   0xc002a560
c00119af:	e8 47 8c 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	eb 95                	jmp    c001194e <UnixFile::~UnixFile()+0x24>
c00119b9:	90                   	nop
c00119ba:	eb 01                	jmp    c00119bd <UnixFile::~UnixFile()+0x93>
c00119bc:	90                   	nop
c00119bd:	90                   	nop
c00119be:	83 c4 1c             	add    esp,0x1c
c00119c1:	c3                   	ret    

c00119c2 <UnixFile::~UnixFile()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 59 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 97 14 00 00       	call   c0012e79 <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    
c00119e9:	90                   	nop

c00119ea <ReservedFilename::~ReservedFilename()>:
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	ba a4 a5 02 c0       	mov    edx,0xc002a5a4
c00119f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f6:	89 10                	mov    DWORD PTR [eax],edx
c00119f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	50                   	push   eax
c0011a00:	e8 25 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	90                   	nop
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	c3                   	ret    
c0011a0d:	90                   	nop

c0011a0e <ReservedFilename::~ReservedFilename()>:
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 cd ff ff ff       	call   c00119ea <ReservedFilename::~ReservedFilename()>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	83 ec 08             	sub    esp,0x8
c0011a23:	6a 0c                	push   0xc
c0011a25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a29:	e8 4b 14 00 00       	call   c0012e79 <operator delete(void*, unsigned long)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	83 c4 0c             	add    esp,0xc
c0011a34:	c3                   	ret    

c0011a35 <getFromFileDescriptor(int)>:
c0011a35:	53                   	push   ebx
c0011a36:	83 ec 08             	sub    esp,0x8
c0011a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a3d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a43:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a49:	7f 2c                	jg     c0011a77 <getFromFileDescriptor(int)+0x42>
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	68 78 e7 02 c0       	push   0xc002e778
c0011a53:	e8 ec 6d 01 00       	call   c0028844 <LinkedList<UnixFile>::getFirstElement()>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	75 04                	jne    c0011a63 <getFromFileDescriptor(int)+0x2e>
c0011a5f:	31 c0                	xor    eax,eax
c0011a61:	eb 6e                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a63:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a66:	74 69                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a68:	52                   	push   edx
c0011a69:	52                   	push   edx
c0011a6a:	50                   	push   eax
c0011a6b:	68 78 e7 02 c0       	push   0xc002e778
c0011a70:	e8 79 6e 01 00       	call   c00288ee <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a75:	eb e1                	jmp    c0011a58 <getFromFileDescriptor(int)+0x23>
c0011a77:	a1 6c e7 02 c0       	mov    eax,ds:0xc002e76c
c0011a7c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a82:	74 4d                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a84:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c0011a89:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a8f:	74 40                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a91:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0011a96:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a9c:	74 33                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 64 e7 02 c0       	mov    eax,ds:0xc002e764
c0011aa3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011aa9:	74 26                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011aab:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ab1:	83 f8 08             	cmp    eax,0x8
c0011ab4:	77 09                	ja     c0011abf <getFromFileDescriptor(int)+0x8a>
c0011ab6:	8b 04 85 40 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18c0]
c0011abd:	eb 12                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011abf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ac5:	83 fb 08             	cmp    ebx,0x8
c0011ac8:	77 95                	ja     c0011a5f <getFromFileDescriptor(int)+0x2a>
c0011aca:	8b 04 9d 00 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1900]
c0011ad1:	83 c4 08             	add    esp,0x8
c0011ad4:	5b                   	pop    ebx
c0011ad5:	c3                   	ret    

c0011ad6 <__static_initialization_and_destruction_0(int, int)>:
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ade:	75 34                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ae0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ae8:	75 2a                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	68 78 e7 02 c0       	push   0xc002e778
c0011af2:	e8 21 6c 01 00       	call   c0028718 <LinkedList<UnixFile>::LinkedList()>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	83 ec 04             	sub    esp,0x4
c0011afd:	68 1c d5 02 c0       	push   0xc002d51c
c0011b02:	68 78 e7 02 c0       	push   0xc002e778
c0011b07:	68 16 87 02 c0       	push   0xc0028716
c0011b0c:	e8 e2 12 00 00       	call   c0012df3 <__cxa_atexit>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	90                   	nop
c0011b15:	83 c4 0c             	add    esp,0xc
c0011b18:	c3                   	ret    

c0011b19 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	83 ec 08             	sub    esp,0x8
c0011b1f:	68 ff ff 00 00       	push   0xffff
c0011b24:	6a 01                	push   0x1
c0011b26:	e8 ab ff ff ff       	call   c0011ad6 <__static_initialization_and_destruction_0(int, int)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	83 c4 0c             	add    esp,0xc
c0011b31:	c3                   	ret    

c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b32:	53                   	push   ebx
c0011b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b41:	89 c8                	mov    eax,ecx
c0011b43:	d1 e8                	shr    eax,1
c0011b45:	03 05 a8 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5a8
c0011b4b:	83 e1 01             	and    ecx,0x1
c0011b4e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b50:	75 09                	jne    c0011b5b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b52:	83 e2 f0             	and    edx,0xfffffff0
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    
c0011b5b:	c1 e3 04             	shl    ebx,0x4
c0011b5e:	83 e2 0f             	and    edx,0xf
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    

c0011b67 <Virt::getPageState(unsigned long)>:
c0011b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6b:	8b 0d a8 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5a8
c0011b71:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b77:	89 d0                	mov    eax,edx
c0011b79:	d1 e8                	shr    eax,1
c0011b7b:	83 e2 01             	and    edx,0x1
c0011b7e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b81:	75 04                	jne    c0011b87 <Virt::getPageState(unsigned long)+0x20>
c0011b83:	83 e0 0f             	and    eax,0xf
c0011b86:	c3                   	ret    
c0011b87:	c0 e8 04             	shr    al,0x4
c0011b8a:	c3                   	ret    

c0011b8b <Virt::allocateKernelVirtualPages(int)>:
c0011b8b:	55                   	push   ebp
c0011b8c:	31 ed                	xor    ebp,ebp
c0011b8e:	57                   	push   edi
c0011b8f:	56                   	push   esi
c0011b90:	53                   	push   ebx
c0011b91:	31 db                	xor    ebx,ebx
c0011b93:	83 ec 1c             	sub    esp,0x1c
c0011b96:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b9a:	8b 3d a4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a4
c0011ba0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ba5:	57                   	push   edi
c0011ba6:	e8 bc ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011bab:	5a                   	pop    edx
c0011bac:	84 c0                	test   al,al
c0011bae:	75 3a                	jne    c0011bea <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bb0:	85 db                	test   ebx,ebx
c0011bb2:	75 02                	jne    c0011bb6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bb4:	89 fd                	mov    ebp,edi
c0011bb6:	43                   	inc    ebx
c0011bb7:	39 f3                	cmp    ebx,esi
c0011bb9:	74 5a                	je     c0011c15 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bbb:	47                   	inc    edi
c0011bbc:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bc2:	76 31                	jbe    c0011bf5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bc4:	c7 05 a4 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d5a4,0xc8000
c0011bce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bd3:	75 28                	jne    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bd5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bda:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bdf:	57                   	push   edi
c0011be0:	e8 82 ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011be5:	5a                   	pop    edx
c0011be6:	84 c0                	test   al,al
c0011be8:	74 c6                	je     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bea:	31 db                	xor    ebx,ebx
c0011bec:	47                   	inc    edi
c0011bed:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bf3:	77 cf                	ja     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bf5:	89 3d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,edi
c0011bfb:	eb a8                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011c05:	e8 f1 89 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011c0a:	8b 3d a4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a4
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	eb 90                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c15:	89 2d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,ebp
c0011c1b:	4b                   	dec    ebx
c0011c1c:	74 5f                	je     c0011c7d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c1e:	85 f6                	test   esi,esi
c0011c20:	74 3d                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	31 db                	xor    ebx,ebx
c0011c26:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c29:	eb 14                	jmp    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c2b:	6a 01                	push   0x1
c0011c2d:	43                   	inc    ebx
c0011c2e:	50                   	push   eax
c0011c2f:	e8 fe fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c34:	58                   	pop    eax
c0011c35:	39 f3                	cmp    ebx,esi
c0011c37:	5a                   	pop    edx
c0011c38:	74 25                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3a:	a1 a4 d5 02 c0       	mov    eax,ds:0xc002d5a4
c0011c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c42:	85 db                	test   ebx,ebx
c0011c44:	89 15 a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,edx
c0011c4a:	74 20                	je     c0011c6c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c4c:	39 df                	cmp    edi,ebx
c0011c4e:	75 db                	jne    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c50:	6a 03                	push   0x3
c0011c52:	43                   	inc    ebx
c0011c53:	50                   	push   eax
c0011c54:	e8 d9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c59:	59                   	pop    ecx
c0011c5a:	39 f3                	cmp    ebx,esi
c0011c5c:	58                   	pop    eax
c0011c5d:	75 db                	jne    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	89 e8                	mov    eax,ebp
c0011c64:	5b                   	pop    ebx
c0011c65:	c1 e0 0c             	shl    eax,0xc
c0011c68:	5e                   	pop    esi
c0011c69:	5f                   	pop    edi
c0011c6a:	5d                   	pop    ebp
c0011c6b:	c3                   	ret    
c0011c6c:	6a 02                	push   0x2
c0011c6e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c73:	50                   	push   eax
c0011c74:	e8 b9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	58                   	pop    eax
c0011c7a:	5a                   	pop    edx
c0011c7b:	eb bd                	jmp    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c7d:	6a 04                	push   0x4
c0011c7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c82:	55                   	push   ebp
c0011c83:	a3 a4 d5 02 c0       	mov    ds:0xc002d5a4,eax
c0011c88:	e8 a5 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	59                   	pop    ecx
c0011c8e:	89 e8                	mov    eax,ebp
c0011c90:	5b                   	pop    ebx
c0011c91:	c1 e0 0c             	shl    eax,0xc
c0011c94:	83 c4 1c             	add    esp,0x1c
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	5d                   	pop    ebp
c0011c9b:	c3                   	ret    

c0011c9c <Virt::freeSwapfilePage(unsigned long)>:
c0011c9c:	53                   	push   ebx
c0011c9d:	8b 15 84 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e784
c0011ca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ca7:	b8 01 00 00 00       	mov    eax,0x1
c0011cac:	89 cb                	mov    ebx,ecx
c0011cae:	d3 e0                	shl    eax,cl
c0011cb0:	c1 eb 05             	shr    ebx,0x5
c0011cb3:	f7 d0                	not    eax
c0011cb5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cb8:	5b                   	pop    ebx
c0011cb9:	c3                   	ret    

c0011cba <Virt::swapIDToSector(unsigned long)>:
c0011cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbe:	0f af 05 ac d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d5ac
c0011cc5:	03 05 b4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5b4
c0011ccb:	c3                   	ret    

c0011ccc <Virt::allocateSwapfilePage()>:
c0011ccc:	55                   	push   ebp
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 0c             	sub    esp,0xc
c0011cd5:	8b 0d ac d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ac
c0011cdb:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011ce0:	f7 f1                	div    ecx
c0011ce2:	39 0d b0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5b0,ecx
c0011ce8:	72 2d                	jb     c0011d17 <Virt::allocateSwapfilePage()+0x4b>
c0011cea:	8b 35 84 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e784
c0011cf0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cf2:	f6 c2 01             	test   dl,0x1
c0011cf5:	74 3c                	je     c0011d33 <Virt::allocateSwapfilePage()+0x67>
c0011cf7:	31 c9                	xor    ecx,ecx
c0011cf9:	bf 01 00 00 00       	mov    edi,0x1
c0011cfe:	eb 12                	jmp    c0011d12 <Virt::allocateSwapfilePage()+0x46>
c0011d00:	89 fd                	mov    ebp,edi
c0011d02:	89 ca                	mov    edx,ecx
c0011d04:	d3 e5                	shl    ebp,cl
c0011d06:	c1 ea 05             	shr    edx,0x5
c0011d09:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d0e:	85 ea                	test   edx,ebp
c0011d10:	74 2a                	je     c0011d3c <Virt::allocateSwapfilePage()+0x70>
c0011d12:	41                   	inc    ecx
c0011d13:	39 c8                	cmp    eax,ecx
c0011d15:	77 e9                	ja     c0011d00 <Virt::allocateSwapfilePage()+0x34>
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	68 2a a8 02 c0       	push   0xc002a82a
c0011d1f:	e8 d7 88 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	31 c9                	xor    ecx,ecx
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	89 c8                	mov    eax,ecx
c0011d2e:	5b                   	pop    ebx
c0011d2f:	5e                   	pop    esi
c0011d30:	5f                   	pop    edi
c0011d31:	5d                   	pop    ebp
c0011d32:	c3                   	ret    
c0011d33:	89 f3                	mov    ebx,esi
c0011d35:	bd 01 00 00 00       	mov    ebp,0x1
c0011d3a:	31 c9                	xor    ecx,ecx
c0011d3c:	09 ea                	or     edx,ebp
c0011d3e:	89 c8                	mov    eax,ecx
c0011d40:	89 13                	mov    DWORD PTR [ebx],edx
c0011d42:	83 c4 0c             	add    esp,0xc
c0011d45:	5b                   	pop    ebx
c0011d46:	5e                   	pop    esi
c0011d47:	5f                   	pop    edi
c0011d48:	5d                   	pop    ebp
c0011d49:	c3                   	ret    

c0011d4a <Virt::virtualMemorySetup()>:
c0011d4a:	53                   	push   ebx
c0011d4b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d50:	83 ec 08             	sub    esp,0x8
c0011d53:	6a 0f                	push   0xf
c0011d55:	53                   	push   ebx
c0011d56:	43                   	inc    ebx
c0011d57:	e8 d6 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5c:	59                   	pop    ecx
c0011d5d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d63:	58                   	pop    eax
c0011d64:	75 ed                	jne    c0011d53 <Virt::virtualMemorySetup()+0x9>
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6e:	68 00 00 00 c8       	push   0xc8000000
c0011d73:	68 41 a8 02 c0       	push   0xc002a841
c0011d78:	e8 dc 11 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011d7d:	58                   	pop    eax
c0011d7e:	5a                   	pop    edx
c0011d7f:	68 00 f0 ff ef       	push   0xeffff000
c0011d84:	68 55 a8 02 c0       	push   0xc002a855
c0011d89:	e8 cb 11 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	6a 00                	push   0x0
c0011d96:	53                   	push   ebx
c0011d97:	43                   	inc    ebx
c0011d98:	e8 95 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011da6:	75 e9                	jne    c0011d91 <Virt::virtualMemorySetup()+0x47>
c0011da8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	6a 0f                	push   0xf
c0011db2:	53                   	push   ebx
c0011db3:	43                   	inc    ebx
c0011db4:	e8 79 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dc2:	75 e9                	jne    c0011dad <Virt::virtualMemorySetup()+0x63>
c0011dc4:	83 c4 08             	add    esp,0x8
c0011dc7:	5b                   	pop    ebx
c0011dc8:	c3                   	ret    

c0011dc9 <Virt::swappingSetup()>:
c0011dc9:	83 ec 14             	sub    esp,0x14
c0011dcc:	31 d2                	xor    edx,edx
c0011dce:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011dd3:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011dd9:	c1 e8 05             	shr    eax,0x5
c0011ddc:	50                   	push   eax
c0011ddd:	68 69 a8 02 c0       	push   0xc002a869
c0011de2:	e8 72 11 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011de7:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011dec:	31 d2                	xor    edx,edx
c0011dee:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011df4:	c1 e8 05             	shr    eax,0x5
c0011df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dfa:	e8 41 da ff ff       	call   c000f840 <malloc>
c0011dff:	83 c4 0c             	add    esp,0xc
c0011e02:	89 c1                	mov    ecx,eax
c0011e04:	a3 84 e7 02 c0       	mov    ds:0xc002e784,eax
c0011e09:	31 d2                	xor    edx,edx
c0011e0b:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011e10:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011e16:	c1 e8 05             	shr    eax,0x5
c0011e19:	50                   	push   eax
c0011e1a:	6a 00                	push   0x0
c0011e1c:	51                   	push   ecx
c0011e1d:	e8 56 e9 fe ff       	call   c0000778 <memset>
c0011e22:	83 c4 1c             	add    esp,0x1c
c0011e25:	c3                   	ret    

c0011e26 <Virt::getAKernelVAS()>:
c0011e26:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0011e2b:	c3                   	ret    

c0011e2c <Virt::setupPageSwapping(int)>:
c0011e2c:	57                   	push   edi
c0011e2d:	56                   	push   esi
c0011e2e:	53                   	push   ebx
c0011e2f:	83 ec 1c             	sub    esp,0x1c
c0011e32:	68 14 01 00 00       	push   0x114
c0011e37:	e8 04 da ff ff       	call   c000f840 <malloc>
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	89 c6                	mov    esi,eax
c0011e41:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c0011e47:	68 84 a8 02 c0       	push   0xc002a884
c0011e4c:	50                   	push   eax
c0011e4d:	e8 60 16 00 00       	call   c00134b2 <File::File(char const*, Process*)>
c0011e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e55:	e8 34 18 00 00       	call   c001368e <File::unlink()>
c0011e5a:	58                   	pop    eax
c0011e5b:	5a                   	pop    edx
c0011e5c:	6a 12                	push   0x12
c0011e5e:	56                   	push   esi
c0011e5f:	e8 b2 16 00 00       	call   c0013516 <File::open(FileOpenMode)>
c0011e64:	83 c4 10             	add    esp,0x10
c0011e67:	85 c0                	test   eax,eax
c0011e69:	0f 85 ca 00 00 00    	jne    c0011f39 <Virt::setupPageSwapping(int)+0x10d>
c0011e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e7b:	c1 e3 08             	shl    ebx,0x8
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	68 00 00 01 00       	push   0x10000
c0011e86:	e8 b5 d9 ff ff       	call   c000f840 <malloc>
c0011e8b:	83 c4 0c             	add    esp,0xc
c0011e8e:	89 c7                	mov    edi,eax
c0011e90:	68 00 00 01 00       	push   0x10000
c0011e95:	6a 00                	push   0x0
c0011e97:	50                   	push   eax
c0011e98:	e8 db e8 fe ff       	call   c0000778 <memset>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	85 db                	test   ebx,ebx
c0011ea2:	79 03                	jns    c0011ea7 <Virt::setupPageSwapping(int)+0x7b>
c0011ea4:	83 c3 0f             	add    ebx,0xf
c0011ea7:	c1 fb 04             	sar    ebx,0x4
c0011eaa:	4b                   	dec    ebx
c0011eab:	83 fb ff             	cmp    ebx,0xffffffff
c0011eae:	74 4b                	je     c0011efb <Virt::setupPageSwapping(int)+0xcf>
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011eb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011eb9:	52                   	push   edx
c0011eba:	57                   	push   edi
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 00 00 01 00       	push   0x10000
c0011ec2:	56                   	push   esi
c0011ec3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	75 59                	jne    c0011f26 <Virt::setupPageSwapping(int)+0xfa>
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ed6:	74 d2                	je     c0011eaa <Virt::setupPageSwapping(int)+0x7e>
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	4b                   	dec    ebx
c0011edc:	50                   	push   eax
c0011edd:	68 d7 a8 02 c0       	push   0xc002a8d7
c0011ee2:	e8 72 10 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011ee7:	c7 04 24 e0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e0
c0011eee:	e8 08 87 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	83 fb ff             	cmp    ebx,0xffffffff
c0011ef9:	75 b5                	jne    c0011eb0 <Virt::setupPageSwapping(int)+0x84>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	56                   	push   esi
c0011eff:	e8 70 16 00 00       	call   c0013574 <File::close()>
c0011f04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f07:	e8 54 d9 ff ff       	call   c000f860 <rfree>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	85 f6                	test   esi,esi
c0011f11:	74 0c                	je     c0011f1f <Virt::setupPageSwapping(int)+0xf3>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f18:	56                   	push   esi
c0011f19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	5b                   	pop    ebx
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	c3                   	ret    
c0011f26:	83 ec 08             	sub    esp,0x8
c0011f29:	50                   	push   eax
c0011f2a:	68 bf a8 02 c0       	push   0xc002a8bf
c0011f2f:	e8 25 10 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	eb 94                	jmp    c0011ecd <Virt::setupPageSwapping(int)+0xa1>
c0011f39:	83 ec 08             	sub    esp,0x8
c0011f3c:	50                   	push   eax
c0011f3d:	68 9b a8 02 c0       	push   0xc002a89b
c0011f42:	e8 12 10 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0011f47:	c7 04 24 a4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a4
c0011f4e:	e8 a8 86 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	e9 14 ff ff ff       	jmp    c0011e6f <Virt::setupPageSwapping(int)+0x43>
c0011f5b:	90                   	nop

c0011f5c <VAS::VAS()>:
c0011f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6b:	a3 88 e7 02 c0       	mov    ds:0xc002e788,eax
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f8a:	90                   	nop
c0011f8b:	c3                   	ret    

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	68 d8 a5 02 c0       	push   0xc002a5d8
c0011fa2:	e8 54 86 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	90                   	nop
c0011fab:	83 c4 0c             	add    esp,0xc
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb4:	89 c2                	mov    edx,eax
c0011fb6:	c1 e8 0a             	shr    eax,0xa
c0011fb9:	c1 ea 16             	shr    edx,0x16
c0011fbc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc1:	19 c9                	sbb    ecx,ecx
c0011fc3:	c1 e2 0c             	shl    edx,0xc
c0011fc6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fcc:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::getPageTableEntry(unsigned long)>:
c0011fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe0:	89 ca                	mov    edx,ecx
c0011fe2:	c1 e9 0a             	shr    ecx,0xa
c0011fe5:	c1 ea 16             	shr    edx,0x16
c0011fe8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff4:	c1 e0 0c             	shl    eax,0xc
c0011ff7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ffa:	c3                   	ret    

c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	be 01 00 00 00       	mov    esi,0x1
c0012002:	53                   	push   ebx
c0012003:	83 ec 10             	sub    esp,0x10
c0012006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001200a:	c1 eb 0c             	shr    ebx,0xc
c001200d:	eb 3f                	jmp    c001204e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200f:	e8 12 fe ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	57                   	push   edi
c0012018:	50                   	push   eax
c0012019:	e8 be ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	8b 00                	mov    eax,DWORD PTR [eax]
c0012023:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012027:	f6 c4 04             	test   ah,0x4
c001202a:	75 5f                	jne    c001208b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202c:	80 fa 04             	cmp    dl,0x4
c001202f:	74 78                	je     c00120a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012031:	80 fa 02             	cmp    dl,0x2
c0012034:	0f 84 88 00 00 00    	je     c00120c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001203a:	80 fa 03             	cmp    dl,0x3
c001203d:	0f 84 ad 00 00 00    	je     c00120f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012043:	fe ca                	dec    dl
c0012045:	0f 84 92 00 00 00    	je     c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001204b:	43                   	inc    ebx
c001204c:	31 f6                	xor    esi,esi
c001204e:	53                   	push   ebx
c001204f:	e8 13 fb ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0012054:	5f                   	pop    edi
c0012055:	89 df                	mov    edi,ebx
c0012057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001205b:	c1 e7 0c             	shl    edi,0xc
c001205e:	84 c0                	test   al,al
c0012060:	75 ad                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 e6 a8 02 c0       	push   0xc002a8e6
c001206a:	e8 8c 85 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001206f:	e8 b2 fd ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012074:	5a                   	pop    edx
c0012075:	59                   	pop    ecx
c0012076:	57                   	push   edi
c0012077:	50                   	push   eax
c0012078:	e8 5f ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 00                	mov    eax,DWORD PTR [eax]
c0012082:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012086:	f6 c4 04             	test   ah,0x4
c0012089:	74 c0                	je     c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	50                   	push   eax
c0012098:	e8 bb dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a4:	80 fa 04             	cmp    dl,0x4
c00120a7:	75 88                	jne    c0012031 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a9:	89 f0                	mov    eax,esi
c00120ab:	84 c0                	test   al,al
c00120ad:	75 47                	jne    c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120af:	c7 44 24 20 fc a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5fc
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	e9 39 85 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	84 c0                	test   al,al
c00120c6:	75 15                	jne    c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 02 a9 02 c0       	push   0xc002a902
c00120d0:	e8 26 85 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	e9 6e ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120dd:	83 ec 08             	sub    esp,0x8
c00120e0:	6a 00                	push   0x0
c00120e2:	53                   	push   ebx
c00120e3:	e8 4a fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	e9 5b ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f0:	89 f0                	mov    eax,esi
c00120f2:	84 c0                	test   al,al
c00120f4:	75 15                	jne    c001210b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f6:	83 ec 08             	sub    esp,0x8
c00120f9:	6a 00                	push   0x0
c00120fb:	53                   	push   ebx
c00120fc:	e8 31 fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	c7 44 24 20 1e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a91e
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	e9 dd 84 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>

c001211e <VAS::freeAllocatedPages(unsigned long)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001212a:	74 09                	je     c0012135 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012130:	e9 c6 fe ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012135:	c7 44 24 04 20 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a620
c001213d:	e9 17 0e 00 00       	jmp    c0012f59 <Dbg::kprintf(char const*, ...)>

c0012142 <VAS::virtualToPhysical(unsigned long)>:
c0012142:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012146:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214a:	e8 8d fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001214f:	5a                   	pop    edx
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	59                   	pop    ecx
c0012153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::reflagRange(unsigned long, int, int, int)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012162:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001216a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216e:	85 db                	test   ebx,ebx
c0012170:	7e 22                	jle    c0012194 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012172:	c1 e3 0c             	shl    ebx,0xc
c0012175:	01 f3                	add    ebx,esi
c0012177:	56                   	push   esi
c0012178:	81 c6 00 10 00 00    	add    esi,0x1000
c001217e:	55                   	push   ebp
c001217f:	e8 58 fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012184:	5a                   	pop    edx
c0012185:	59                   	pop    ecx
c0012186:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012188:	21 f9                	and    ecx,edi
c001218a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218e:	39 f3                	cmp    ebx,esi
c0012190:	89 08                	mov    DWORD PTR [eax],ecx
c0012192:	75 e3                	jne    c0012177 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012194:	5b                   	pop    ebx
c0012195:	5e                   	pop    esi
c0012196:	5f                   	pop    edi
c0012197:	5d                   	pop    ebp
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::setToWriteCombining(unsigned long, int)>:
c001219a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001219f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121ac:	75 01                	jne    c00121af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ae:	c3                   	ret    
c00121af:	68 80 00 00 00       	push   0x80
c00121b4:	6a ff                	push   0xffffffff
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c2:	e8 93 ff ff ff       	call   c001215a <VAS::reflagRange(unsigned long, int, int, int)>
c00121c7:	83 c4 14             	add    esp,0x14
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00121cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121df:	19 c0                	sbb    eax,eax
c00121e1:	83 ca 03             	or     edx,0x3
c00121e4:	83 e0 fc             	and    eax,0xfffffffc
c00121e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ee:	0f 20 d8             	mov    eax,cr3
c00121f1:	0f 22 d8             	mov    cr3,eax
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <VAS::~VAS()>:
c00121f6:	83 ec 2c             	sub    esp,0x2c
c00121f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012201:	e8 1a bc 00 00       	call   c001de20 <lockScheduler()>
c0012206:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001220b:	8b 00                	mov    eax,DWORD PTR [eax]
c001220d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012210:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012216:	83 ec 04             	sub    esp,0x4
c0012219:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221d:	6a 01                	push   0x1
c001221f:	50                   	push   eax
c0012220:	e8 a7 ff ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012230:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012238:	0f 8f d7 00 00 00    	jg     c0012315 <VAS::~VAS()+0x11f>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	83 e0 01             	and    eax,0x1
c001225b:	0f 84 ab 00 00 00    	je     c001230c <VAS::~VAS()+0x116>
c0012261:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012269:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012271:	7f 75                	jg     c00122e8 <VAS::~VAS()+0xf2>
c0012273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012277:	c1 e0 0a             	shl    eax,0xa
c001227a:	89 c2                	mov    edx,eax
c001227c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012280:	01 d0                	add    eax,edx
c0012282:	c1 e0 0c             	shl    eax,0xc
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012293:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012299:	83 ec 04             	sub    esp,0x4
c001229c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a0:	6a 01                	push   0x1
c00122a2:	50                   	push   eax
c00122a3:	e8 08 fd ff ff       	call   c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bd:	25 01 04 00 00       	and    eax,0x401
c00122c2:	3d 01 04 00 00       	cmp    eax,0x401
c00122c7:	75 19                	jne    c00122e2 <VAS::~VAS()+0xec>
c00122c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 7d db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e6:	eb 81                	jmp    c0012269 <VAS::~VAS()+0x73>
c00122e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ec:	25 00 04 00 00       	and    eax,0x400
c00122f1:	74 19                	je     c001230c <VAS::~VAS()+0x116>
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	50                   	push   eax
c0012300:	e8 53 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012310:	e9 1b ff ff ff       	jmp    c0012230 <VAS::~VAS()+0x3a>
c0012315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012319:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	50                   	push   eax
c0012320:	e8 d6 fc ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	50                   	push   eax
c0012333:	e8 20 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012343:	c1 e0 02             	shl    eax,0x2
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	68 44 a6 02 c0       	push   0xc002a644
c001234f:	e8 05 0c 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	e8 c6 ba 00 00       	call   c001de22 <unlockScheduler()>
c001235c:	90                   	nop
c001235d:	83 c4 2c             	add    esp,0x2c
c0012360:	c3                   	ret    
c0012361:	90                   	nop

c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012362:	55                   	push   ebp
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	83 ec 1c             	sub    esp,0x1c
c0012369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012371:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012377:	77 08                	ja     c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012379:	0f 20 d8             	mov    eax,cr3
c001237c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001237f:	75 47                	jne    c00123c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012385:	09 d8                	or     eax,ebx
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 57                	jne    c00123e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238e:	89 de                	mov    esi,ebx
c0012390:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012393:	c1 ee 16             	shr    esi,0x16
c0012396:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a1:	74 54                	je     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b1:	c1 e6 0c             	shl    esi,0xc
c00123b4:	c1 eb 0a             	shr    ebx,0xa
c00123b7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c0:	83 c4 1c             	add    esp,0x1c
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	5d                   	pop    ebp
c00123c7:	c3                   	ret    
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 64 a6 02 c0       	push   0xc002a664
c00123d0:	e8 84 0b 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dc:	09 d8                	or     eax,ebx
c00123de:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e3:	74 a9                	je     c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 cc a6 02 c0       	push   0xc002a6cc
c00123ed:	e8 09 82 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	eb 97                	jmp    c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	e8 e2 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012400:	89 c5                	mov    ebp,eax
c0012402:	e8 1f fa ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240e:	6a 01                	push   0x1
c0012410:	e8 76 f7 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012415:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241c:	6a 01                	push   0x1
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	81 cd 07 04 00 00    	or     ebp,0x407
c0012426:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001242a:	51                   	push   ecx
c001242b:	e8 26 02 00 00       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012430:	83 c4 1c             	add    esp,0x1c
c0012433:	68 00 10 00 00       	push   0x1000
c0012438:	6a 00                	push   0x0
c001243a:	50                   	push   eax
c001243b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243f:	e8 34 e3 fe ff       	call   c0000778 <memset>
c0012444:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012448:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001244b:	e8 ab fb ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012454:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245d:	e9 41 ff ff ff       	jmp    c00123a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012462 <VAS::allocatePages(int, int)>:
c0012462:	55                   	push   ebp
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 1c             	sub    esp,0x1c
c0012469:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247e:	83 e0 01             	and    eax,0x1
c0012481:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012485:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012489:	0f 85 cc 00 00 00    	jne    c001255b <VAS::allocatePages(int, int)+0xf9>
c001248f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 84 a1 00 00 00    	je     c001253f <VAS::allocatePages(int, int)+0xdd>
c001249e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a6:	c1 e6 0c             	shl    esi,0xc
c00124a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ad:	85 c0                	test   eax,eax
c00124af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b2:	7e 33                	jle    c00124e7 <VAS::allocatePages(int, int)+0x85>
c00124b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bc:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c2:	e8 1b da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124c7:	55                   	push   ebp
c00124c8:	53                   	push   ebx
c00124c9:	50                   	push   eax
c00124ca:	57                   	push   edi
c00124cb:	e8 92 fe ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d8:	74 03                	je     c00124dd <VAS::allocatePages(int, int)+0x7b>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 de                	cmp    esi,ebx
c00124e5:	75 db                	jne    c00124c2 <VAS::allocatePages(int, int)+0x60>
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	75 12                	jne    c0012500 <VAS::allocatePages(int, int)+0x9e>
c00124ee:	0f 20 d8             	mov    eax,cr3
c00124f1:	0f 22 d8             	mov    cr3,eax
c00124f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    
c0012500:	c1 ee 0a             	shr    esi,0xa
c0012503:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012507:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250d:	c1 eb 0a             	shr    ebx,0xa
c0012510:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012516:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012522:	39 c3                	cmp    ebx,eax
c0012524:	77 ce                	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c0012526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012529:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252f:	39 d8                	cmp    eax,ebx
c0012531:	73 f3                	jae    c0012526 <VAS::allocatePages(int, int)+0xc4>
c0012533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012537:	83 c4 1c             	add    esp,0x1c
c001253a:	5b                   	pop    ebx
c001253b:	5e                   	pop    esi
c001253c:	5f                   	pop    edi
c001253d:	5d                   	pop    ebp
c001253e:	c3                   	ret    
c001253f:	83 ec 0c             	sub    esp,0xc
c0012542:	68 f0 a6 02 c0       	push   0xc002a6f0
c0012547:	e8 af 80 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001254c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	e9 43 ff ff ff       	jmp    c001249e <VAS::allocatePages(int, int)+0x3c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012562:	e8 24 f6 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012573:	0f 87 9b 00 00 00    	ja     c0012614 <VAS::allocatePages(int, int)+0x1b2>
c0012579:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257d:	85 d2                	test   edx,edx
c001257f:	7e 3c                	jle    c00125bd <VAS::allocatePages(int, int)+0x15b>
c0012581:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012585:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258d:	c1 e5 0c             	shl    ebp,0xc
c0012590:	81 ce 00 04 00 00    	or     esi,0x400
c0012596:	01 dd                	add    ebp,ebx
c0012598:	e8 45 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	50                   	push   eax
c00125a0:	57                   	push   edi
c00125a1:	e8 bc fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ae:	74 03                	je     c00125b3 <VAS::allocatePages(int, int)+0x151>
c00125b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b9:	39 dd                	cmp    ebp,ebx
c00125bb:	75 db                	jne    c0012598 <VAS::allocatePages(int, int)+0x136>
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	0f 84 26 ff ff ff    	je     c00124ee <VAS::allocatePages(int, int)+0x8c>
c00125c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d0:	89 d3                	mov    ebx,edx
c00125d2:	c1 e0 0c             	shl    eax,0xc
c00125d5:	c1 eb 0a             	shr    ebx,0xa
c00125d8:	01 d0                	add    eax,edx
c00125da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e0:	c1 e8 0a             	shr    eax,0xa
c00125e3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ee:	2d 00 00 40 00       	sub    eax,0x400000
c00125f3:	39 c3                	cmp    ebx,eax
c00125f5:	0f 87 f9 fe ff ff    	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 d8                	cmp    eax,ebx
c0012606:	73 f3                	jae    c00125fb <VAS::allocatePages(int, int)+0x199>
c0012608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260c:	83 c4 1c             	add    esp,0x1c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    
c0012614:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012626:	0f 84 4d ff ff ff    	je     c0012579 <VAS::allocatePages(int, int)+0x117>
c001262c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012634:	e9 40 ff ff ff       	jmp    c0012579 <VAS::allocatePages(int, int)+0x117>
c0012639:	90                   	nop

c001263a <VAS::setCPUSpecific(unsigned long)>:
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	6a 05                	push   0x5
c001263f:	68 00 00 40 c2       	push   0xc2400000
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264c:	e8 11 fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	c3                   	ret    
c0012655:	90                   	nop

c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012656:	55                   	push   ebp
c0012657:	57                   	push   edi
c0012658:	56                   	push   esi
c0012659:	53                   	push   ebx
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012662:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012666:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012670:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001267a:	83 e0 01             	and    eax,0x1
c001267d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012685:	85 c0                	test   eax,eax
c0012687:	7e 39                	jle    c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012689:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268d:	89 f3                	mov    ebx,esi
c001268f:	c1 e0 0c             	shl    eax,0xc
c0012692:	01 f0                	add    eax,esi
c0012694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012698:	55                   	push   ebp
c0012699:	53                   	push   ebx
c001269a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269e:	29 f0                	sub    eax,esi
c00126a0:	01 d8                	add    eax,ebx
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 b9 fc ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b1:	74 03                	je     c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c0:	75 d6                	jne    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	75 10                	jne    c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c9:	0f 20 d8             	mov    eax,cr3
c00126cc:	0f 22 d8             	mov    cr3,eax
c00126cf:	83 c4 1c             	add    esp,0x1c
c00126d2:	89 f0                	mov    eax,esi
c00126d4:	5b                   	pop    ebx
c00126d5:	5e                   	pop    esi
c00126d6:	5f                   	pop    edi
c00126d7:	5d                   	pop    ebp
c00126d8:	c3                   	ret    
c00126d9:	89 f3                	mov    ebx,esi
c00126db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126df:	c1 eb 0a             	shr    ebx,0xa
c00126e2:	c1 e0 0c             	shl    eax,0xc
c00126e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126eb:	01 f0                	add    eax,esi
c00126ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f3:	c1 e8 0a             	shr    eax,0xa
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012700:	39 c3                	cmp    ebx,eax
c0012702:	77 cb                	ja     c00126cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012704:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012707:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270d:	39 d8                	cmp    eax,ebx
c001270f:	73 f3                	jae    c0012704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012711:	83 c4 1c             	add    esp,0x1c
c0012714:	89 f0                	mov    eax,esi
c0012716:	5b                   	pop    ebx
c0012717:	5e                   	pop    esi
c0012718:	5f                   	pop    edi
c0012719:	5d                   	pop    ebp
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001272b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012733:	a9 ff 0f 00 00       	test   eax,0xfff
c0012738:	75 4a                	jne    c0012784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001273a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012741:	c1 eb 16             	shr    ebx,0x16
c0012744:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001274b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274f:	74 4d                	je     c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012759:	c1 e8 0a             	shr    eax,0xa
c001275c:	80 fa 01             	cmp    dl,0x1
c001275f:	19 d2                	sbb    edx,edx
c0012761:	c1 e3 0c             	shl    ebx,0xc
c0012764:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012768:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276e:	25 fc 0f 00 00       	and    eax,0xffc
c0012773:	01 d8                	add    eax,ebx
c0012775:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	5b                   	pop    ebx
c0012780:	5e                   	pop    esi
c0012781:	5f                   	pop    edi
c0012782:	5d                   	pop    ebp
c0012783:	c3                   	ret    
c0012784:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 1c a7 02 c0       	push   0xc002a71c
c0012790:	e8 66 7e 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279c:	eb 9c                	jmp    c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a2:	e8 3b d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127a7:	89 c5                	mov    ebp,eax
c00127a9:	e8 78 f6 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b5:	6a 01                	push   0x1
c00127b7:	e8 cf f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c00127bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c3:	6a 01                	push   0x1
c00127c5:	50                   	push   eax
c00127c6:	55                   	push   ebp
c00127c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d1:	51                   	push   ecx
c00127d2:	e8 7f fe ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d7:	83 c4 1c             	add    esp,0x1c
c00127da:	68 00 10 00 00       	push   0x1000
c00127df:	6a 00                	push   0x0
c00127e1:	50                   	push   eax
c00127e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e6:	e8 8d df fe ff       	call   c0000778 <memset>
c00127eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f2:	e8 04 f8 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c00127f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	e9 48 ff ff ff       	jmp    c0012751 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012809:	90                   	nop

c001280a <VAS::VAS(bool)>:
c001280a:	53                   	push   ebx
c001280b:	83 ec 28             	sub    esp,0x28
c001280e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012812:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012825:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012829:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001282c:	e8 b1 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012831:	89 c2                	mov    edx,eax
c0012833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012837:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001283a:	e8 e7 f5 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001283f:	89 c3                	mov    ebx,eax
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	6a 01                	push   0x1
c0012846:	e8 40 f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001284b:	83 c4 10             	add    esp,0x10
c001284e:	89 c2                	mov    edx,eax
c0012850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	6a 03                	push   0x3
c001285c:	6a 01                	push   0x1
c001285e:	52                   	push   edx
c001285f:	50                   	push   eax
c0012860:	53                   	push   ebx
c0012861:	e8 f0 fd ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012866:	83 c4 20             	add    esp,0x20
c0012869:	89 c2                	mov    edx,eax
c001286b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012872:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001287a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012882:	7f 1c                	jg     c00128a0 <VAS::VAS(bool)+0x96>
c0012884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001288b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001288f:	c1 e2 02             	shl    edx,0x2
c0012892:	01 d0                	add    eax,edx
c0012894:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001289a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001289e:	eb da                	jmp    c001287a <VAS::VAS(bool)+0x70>
c00128a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128b0:	7f 7a                	jg     c001292c <VAS::VAS(bool)+0x122>
c00128b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b6:	2d 00 02 00 00       	sub    eax,0x200
c00128bb:	c1 e0 0c             	shl    eax,0xc
c00128be:	83 c8 03             	or     eax,0x3
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00128c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d4:	83 e0 10             	and    eax,0x10
c00128d7:	84 c0                	test   al,al
c00128d9:	74 07                	je     c00128e2 <VAS::VAS(bool)+0xd8>
c00128db:	b8 00 01 00 00       	mov    eax,0x100
c00128e0:	eb 05                	jmp    c00128e7 <VAS::VAS(bool)+0xdd>
c00128e2:	b8 00 00 00 00       	mov    eax,0x0
c00128e7:	09 d0                	or     eax,edx
c00128e9:	89 c1                	mov    ecx,eax
c00128eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f6:	c1 e2 02             	shl    edx,0x2
c00128f9:	01 d0                	add    eax,edx
c00128fb:	89 ca                	mov    edx,ecx
c00128fd:	89 10                	mov    DWORD PTR [eax],edx
c00128ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012903:	2d 40 03 00 00       	sub    eax,0x340
c0012908:	83 f8 7f             	cmp    eax,0x7f
c001290b:	77 16                	ja     c0012923 <VAS::VAS(bool)+0x119>
c001290d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012911:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012914:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012918:	c1 e2 02             	shl    edx,0x2
c001291b:	01 d0                	add    eax,edx
c001291d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012923:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012927:	e9 7c ff ff ff       	jmp    c00128a8 <VAS::VAS(bool)+0x9e>
c001292c:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012931:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012937:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293d:	83 e0 10             	and    eax,0x10
c0012940:	84 c0                	test   al,al
c0012942:	74 07                	je     c001294b <VAS::VAS(bool)+0x141>
c0012944:	b8 03 41 00 00       	mov    eax,0x4103
c0012949:	eb 05                	jmp    c0012950 <VAS::VAS(bool)+0x146>
c001294b:	b8 03 40 00 00       	mov    eax,0x4003
c0012950:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012954:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012957:	81 c2 20 0c 00 00    	add    edx,0xc20
c001295d:	89 02                	mov    DWORD PTR [edx],eax
c001295f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012964:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	50                   	push   eax
c0012974:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012978:	e8 bd fc ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012984:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012987:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001298c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012992:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012998:	83 e0 10             	and    eax,0x10
c001299b:	84 c0                	test   al,al
c001299d:	74 07                	je     c00129a6 <VAS::VAS(bool)+0x19c>
c001299f:	b8 00 01 00 00       	mov    eax,0x100
c00129a4:	eb 05                	jmp    c00129ab <VAS::VAS(bool)+0x1a1>
c00129a6:	b8 00 00 00 00       	mov    eax,0x0
c00129ab:	09 c2                	or     edx,eax
c00129ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129b4:	05 fc 0f 00 00       	add    eax,0xffc
c00129b9:	83 ca 03             	or     edx,0x3
c00129bc:	89 10                	mov    DWORD PTR [eax],edx
c00129be:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00129c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c9:	83 ec 0c             	sub    esp,0xc
c00129cc:	50                   	push   eax
c00129cd:	e8 9a 1c 00 00       	call   c001466c <Device::getName()>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	83 ec 08             	sub    esp,0x8
c00129d8:	68 38 a9 02 c0       	push   0xc002a938
c00129dd:	50                   	push   eax
c00129de:	e8 dd de fe ff       	call   c00008c0 <strcmp>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	85 c0                	test   eax,eax
c00129e8:	0f 94 c0             	sete   al
c00129eb:	84 c0                	test   al,al
c00129ed:	74 70                	je     c0012a5f <VAS::VAS(bool)+0x255>
c00129ef:	e8 0f b4 00 00       	call   c001de03 <disableIRQs()>
c00129f4:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00129f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ff:	05 7c 09 00 00       	add    eax,0x97c
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 af c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a15:	89 c3                	mov    ebx,eax
c0012a17:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a22:	05 7c 09 00 00       	add    eax,0x97c
c0012a27:	83 ec 0c             	sub    esp,0xc
c0012a2a:	50                   	push   eax
c0012a2b:	e8 8c c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	83 ec 08             	sub    esp,0x8
c0012a36:	50                   	push   eax
c0012a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a3b:	e8 9c f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a4a:	6a 11                	push   0x11
c0012a4c:	53                   	push   ebx
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a52:	e8 0b f9 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	e8 b2 b3 00 00       	call   c001de11 <enableIRQs()>
c0012a5f:	90                   	nop
c0012a60:	83 c4 28             	add    esp,0x28
c0012a63:	5b                   	pop    ebx
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <VAS::evict(unsigned long)>:
c0012a66:	57                   	push   edi
c0012a67:	56                   	push   esi
c0012a68:	53                   	push   ebx
c0012a69:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a71:	e8 aa b3 00 00       	call   c001de20 <lockScheduler()>
c0012a76:	83 ec 08             	sub    esp,0x8
c0012a79:	56                   	push   esi
c0012a7a:	68 40 a7 02 c0       	push   0xc002a740
c0012a7f:	e8 d5 04 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012a84:	e8 43 f2 ff ff       	call   c0011ccc <Virt::allocateSwapfilePage()>
c0012a89:	83 c4 0c             	add    esp,0xc
c0012a8c:	89 c3                	mov    ebx,eax
c0012a8e:	50                   	push   eax
c0012a8f:	50                   	push   eax
c0012a90:	68 46 a9 02 c0       	push   0xc002a946
c0012a95:	e8 bf 04 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a9d:	e8 18 f2 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012aa2:	c1 e3 0b             	shl    ebx,0xb
c0012aa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa8:	31 d2                	xor    edx,edx
c0012aaa:	6a 08                	push   0x8
c0012aac:	52                   	push   edx
c0012aad:	50                   	push   eax
c0012aae:	0f be 05 b8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5b8
c0012ab5:	ff 34 85 1c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14e4]
c0012abc:	e8 15 3d 00 00       	call   c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac1:	83 c4 18             	add    esp,0x18
c0012ac4:	56                   	push   esi
c0012ac5:	57                   	push   edi
c0012ac6:	e8 11 f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012acb:	89 c6                	mov    esi,eax
c0012acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012acf:	c1 e8 0c             	shr    eax,0xc
c0012ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ad5:	e8 7e d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012ada:	8b 16                	mov    edx,DWORD PTR [esi]
c0012adc:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ae2:	09 d3                	or     ebx,edx
c0012ae4:	89 1e                	mov    DWORD PTR [esi],ebx
c0012ae6:	c7 04 24 56 a9 02 c0 	mov    DWORD PTR [esp],0xc002a956
c0012aed:	e8 67 04 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	5b                   	pop    ebx
c0012af6:	5e                   	pop    esi
c0012af7:	5f                   	pop    edi
c0012af8:	e9 25 b3 00 00       	jmp    c001de22 <unlockScheduler()>
c0012afd:	90                   	nop

c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	83 ec 10             	sub    esp,0x10
c0012b04:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b08:	e8 13 b3 00 00       	call   c001de20 <lockScheduler()>
c0012b0d:	83 ec 08             	sub    esp,0x8
c0012b10:	56                   	push   esi
c0012b11:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b17:	68 60 a7 02 c0       	push   0xc002a760
c0012b1c:	e8 38 04 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012b21:	58                   	pop    eax
c0012b22:	5a                   	pop    edx
c0012b23:	56                   	push   esi
c0012b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b28:	e8 af f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012b2d:	59                   	pop    ecx
c0012b2e:	5b                   	pop    ebx
c0012b2f:	89 c3                	mov    ebx,eax
c0012b31:	ff 30                	push   DWORD PTR [eax]
c0012b33:	68 66 a9 02 c0       	push   0xc002a966
c0012b38:	e8 1c 04 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012b3d:	5f                   	pop    edi
c0012b3e:	58                   	pop    eax
c0012b3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b41:	c1 e8 0b             	shr    eax,0xb
c0012b44:	50                   	push   eax
c0012b45:	68 77 a9 02 c0       	push   0xc002a977
c0012b4a:	e8 0a 04 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012b4f:	83 c4 10             	add    esp,0x10
c0012b52:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012b58:	75 1e                	jne    c0012b78 <VAS::tryLoadBackOffDisk(unsigned long)+0x7a>
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	68 ec a9 02 c0       	push   0xc002a9ec
c0012b62:	e8 f2 03 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012b67:	e8 b6 b2 00 00       	call   c001de22 <unlockScheduler()>
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	31 c0                	xor    eax,eax
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	5b                   	pop    ebx
c0012b75:	5e                   	pop    esi
c0012b76:	5f                   	pop    edi
c0012b77:	c3                   	ret    
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	68 94 a9 02 c0       	push   0xc002a994
c0012b80:	e8 d4 03 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012b85:	c6 05 40 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e640,0x1
c0012b8c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012b8e:	e8 4f d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b93:	c1 ef 0b             	shr    edi,0xb
c0012b96:	5a                   	pop    edx
c0012b97:	c6 05 40 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e640,0x0
c0012b9e:	59                   	pop    ecx
c0012b9f:	50                   	push   eax
c0012ba0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ba4:	68 ac a9 02 c0       	push   0xc002a9ac
c0012ba9:	e8 ab 03 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012bae:	58                   	pop    eax
c0012baf:	5a                   	pop    edx
c0012bb0:	ff 33                	push   DWORD PTR [ebx]
c0012bb2:	68 c6 a9 02 c0       	push   0xc002a9c6
c0012bb7:	e8 9d 03 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bc0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bc2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bc8:	09 d0                	or     eax,edx
c0012bca:	0d 01 08 00 00       	or     eax,0x801
c0012bcf:	89 03                	mov    DWORD PTR [ebx],eax
c0012bd1:	59                   	pop    ecx
c0012bd2:	5b                   	pop    ebx
c0012bd3:	50                   	push   eax
c0012bd4:	68 d9 a9 02 c0       	push   0xc002a9d9
c0012bd9:	e8 7b 03 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012bde:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012be1:	e8 d4 f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012be6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012be9:	31 d2                	xor    edx,edx
c0012beb:	ff 35 ac d5 02 c0    	push   DWORD PTR ds:0xc002d5ac
c0012bf1:	52                   	push   edx
c0012bf2:	50                   	push   eax
c0012bf3:	0f be 05 b8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5b8
c0012bfa:	ff 34 85 1c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14e4]
c0012c01:	e8 64 3b 00 00       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0012c06:	83 c4 14             	add    esp,0x14
c0012c09:	57                   	push   edi
c0012c0a:	e8 8d f0 ff ff       	call   c0011c9c <Virt::freeSwapfilePage(unsigned long)>
c0012c0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c12:	e8 a3 f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012c17:	5e                   	pop    esi
c0012c18:	5f                   	pop    edi
c0012c19:	50                   	push   eax
c0012c1a:	68 8c a7 02 c0       	push   0xc002a78c
c0012c1f:	e8 35 03 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012c24:	e8 f9 b1 00 00       	call   c001de22 <unlockScheduler()>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	b0 01                	mov    al,0x1
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	5b                   	pop    ebx
c0012c32:	5e                   	pop    esi
c0012c33:	5f                   	pop    edi
c0012c34:	c3                   	ret    
c0012c35:	90                   	nop

c0012c36 <VAS::scanForEviction(int, int)>:
c0012c36:	55                   	push   ebp
c0012c37:	57                   	push   edi
c0012c38:	56                   	push   esi
c0012c39:	53                   	push   ebx
c0012c3a:	83 ec 1c             	sub    esp,0x1c
c0012c3d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012c41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c45:	85 c9                	test   ecx,ecx
c0012c47:	75 08                	jne    c0012c51 <VAS::scanForEviction(int, int)+0x1b>
c0012c49:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c51:	83 ec 0c             	sub    esp,0xc
c0012c54:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c59:	68 ac a7 02 c0       	push   0xc002a7ac
c0012c5e:	31 ff                	xor    edi,edi
c0012c60:	e8 f4 02 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012c65:	83 c4 10             	add    esp,0x10
c0012c68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c78:	eb 17                	jmp    c0012c91 <VAS::scanForEviction(int, int)+0x5b>
c0012c7a:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012c7f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c85:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012c8b:	0f 84 88 00 00 00    	je     c0012d19 <VAS::scanForEviction(int, int)+0xe3>
c0012c91:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012c94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012c98:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012c9c:	74 dc                	je     c0012c7a <VAS::scanForEviction(int, int)+0x44>
c0012c9e:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012ca4:	eb 0a                	jmp    c0012cb0 <VAS::scanForEviction(int, int)+0x7a>
c0012ca6:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012cac:	39 eb                	cmp    ebx,ebp
c0012cae:	74 ca                	je     c0012c7a <VAS::scanForEviction(int, int)+0x44>
c0012cb0:	83 ec 08             	sub    esp,0x8
c0012cb3:	55                   	push   ebp
c0012cb4:	56                   	push   esi
c0012cb5:	e8 22 f3 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cbf:	89 c2                	mov    edx,eax
c0012cc1:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012cc7:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ccd:	75 d7                	jne    c0012ca6 <VAS::scanForEviction(int, int)+0x70>
c0012ccf:	a8 01                	test   al,0x1
c0012cd1:	74 4e                	je     c0012d21 <VAS::scanForEviction(int, int)+0xeb>
c0012cd3:	83 ec 08             	sub    esp,0x8
c0012cd6:	55                   	push   ebp
c0012cd7:	68 d0 a7 02 c0       	push   0xc002a7d0
c0012cdc:	e8 78 02 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012ce1:	89 f8                	mov    eax,edi
c0012ce3:	99                   	cdq    
c0012ce4:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	85 d2                	test   edx,edx
c0012ced:	74 03                	je     c0012cf2 <VAS::scanForEviction(int, int)+0xbc>
c0012cef:	47                   	inc    edi
c0012cf0:	eb b4                	jmp    c0012ca6 <VAS::scanForEviction(int, int)+0x70>
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	68 05 aa 02 c0       	push   0xc002aa05
c0012cfa:	e8 5a 02 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012cff:	58                   	pop    eax
c0012d00:	5a                   	pop    edx
c0012d01:	55                   	push   ebp
c0012d02:	56                   	push   esi
c0012d03:	e8 5e fd ff ff       	call   c0012a66 <VAS::evict(unsigned long)>
c0012d08:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d10:	83 c4 10             	add    esp,0x10
c0012d13:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d17:	75 d6                	jne    c0012cef <VAS::scanForEviction(int, int)+0xb9>
c0012d19:	83 c4 1c             	add    esp,0x1c
c0012d1c:	5b                   	pop    ebx
c0012d1d:	5e                   	pop    esi
c0012d1e:	5f                   	pop    edi
c0012d1f:	5d                   	pop    ebp
c0012d20:	c3                   	ret    
c0012d21:	83 ec 08             	sub    esp,0x8
c0012d24:	55                   	push   ebp
c0012d25:	68 fc a7 02 c0       	push   0xc002a7fc
c0012d2a:	e8 2a 02 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012d2f:	83 c4 10             	add    esp,0x10
c0012d32:	e9 6f ff ff ff       	jmp    c0012ca6 <VAS::scanForEviction(int, int)+0x70>

c0012d37 <mapVASFirstTime>:
c0012d37:	55                   	push   ebp
c0012d38:	57                   	push   edi
c0012d39:	56                   	push   esi
c0012d3a:	53                   	push   ebx
c0012d3b:	83 ec 0c             	sub    esp,0xc
c0012d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d43:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d46:	4a                   	dec    edx
c0012d47:	0f 84 8e 00 00 00    	je     c0012ddb <mapVASFirstTime+0xa4>
c0012d4d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d50:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d53:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d58:	c1 e5 15             	shl    ebp,0x15
c0012d5b:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d60:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d66:	29 eb                	sub    ebx,ebp
c0012d68:	29 ee                	sub    esi,ebp
c0012d6a:	e8 73 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d6f:	83 ec 0c             	sub    esp,0xc
c0012d72:	68 03 04 00 00       	push   0x403
c0012d77:	6a 01                	push   0x1
c0012d79:	53                   	push   ebx
c0012d7a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d80:	50                   	push   eax
c0012d81:	57                   	push   edi
c0012d82:	e8 cf f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d87:	83 c4 20             	add    esp,0x20
c0012d8a:	39 f3                	cmp    ebx,esi
c0012d8c:	75 dc                	jne    c0012d6a <mapVASFirstTime+0x33>
c0012d8e:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d93:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d98:	29 ee                	sub    esi,ebp
c0012d9a:	29 e8                	sub    eax,ebp
c0012d9c:	89 c5                	mov    ebp,eax
c0012d9e:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012da2:	19 db                	sbb    ebx,ebx
c0012da4:	e8 39 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012da9:	83 e3 04             	and    ebx,0x4
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	81 c3 03 04 00 00    	add    ebx,0x403
c0012db5:	53                   	push   ebx
c0012db6:	6a 01                	push   0x1
c0012db8:	56                   	push   esi
c0012db9:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dbf:	50                   	push   eax
c0012dc0:	57                   	push   edi
c0012dc1:	e8 90 f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dc6:	83 c4 20             	add    esp,0x20
c0012dc9:	39 f5                	cmp    ebp,esi
c0012dcb:	75 d1                	jne    c0012d9e <mapVASFirstTime+0x67>
c0012dcd:	0f 20 d8             	mov    eax,cr3
c0012dd0:	0f 22 d8             	mov    cr3,eax
c0012dd3:	83 c4 0c             	add    esp,0xc
c0012dd6:	5b                   	pop    ebx
c0012dd7:	5e                   	pop    esi
c0012dd8:	5f                   	pop    edi
c0012dd9:	5d                   	pop    ebp
c0012dda:	c3                   	ret    
c0012ddb:	83 ec 0c             	sub    esp,0xc
c0012dde:	68 10 aa 02 c0       	push   0xc002aa10
c0012de3:	e8 71 01 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012de8:	83 c4 10             	add    esp,0x10
c0012deb:	83 c4 0c             	add    esp,0xc
c0012dee:	5b                   	pop    ebx
c0012def:	5e                   	pop    esi
c0012df0:	5f                   	pop    edi
c0012df1:	5d                   	pop    ebp
c0012df2:	c3                   	ret    

c0012df3 <__cxa_atexit>:
c0012df3:	31 c0                	xor    eax,eax
c0012df5:	c3                   	ret    

c0012df6 <__cxa_finalize>:
c0012df6:	c3                   	ret    

c0012df7 <__stack_chk_fail>:
c0012df7:	55                   	push   ebp
c0012df8:	89 e5                	mov    ebp,esp
c0012dfa:	83 ec 14             	sub    esp,0x14
c0012dfd:	68 29 aa 02 c0       	push   0xc002aa29
c0012e02:	e8 52 01 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012e07:	58                   	pop    eax
c0012e08:	5a                   	pop    edx
c0012e09:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e0c:	68 79 aa 02 c0       	push   0xc002aa79
c0012e11:	e8 43 01 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012e16:	59                   	pop    ecx
c0012e17:	58                   	pop    eax
c0012e18:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e1b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e1e:	68 79 aa 02 c0       	push   0xc002aa79
c0012e23:	e8 31 01 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012e28:	5a                   	pop    edx
c0012e29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e2c:	59                   	pop    ecx
c0012e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e2f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e32:	68 79 aa 02 c0       	push   0xc002aa79
c0012e37:	e8 1d 01 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012e3c:	5a                   	pop    edx
c0012e3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e40:	59                   	pop    ecx
c0012e41:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e45:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e48:	68 79 aa 02 c0       	push   0xc002aa79
c0012e4d:	e8 07 01 00 00       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0012e52:	c7 04 24 81 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa81
c0012e59:	e8 9d 77 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	c9                   	leave  
c0012e62:	c3                   	ret    

c0012e63 <__cxa_pure_virtual>:
c0012e63:	83 ec 18             	sub    esp,0x18
c0012e66:	68 99 aa 02 c0       	push   0xc002aa99
c0012e6b:	e8 8b 77 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012e70:	83 c4 1c             	add    esp,0x1c
c0012e73:	c3                   	ret    

c0012e74 <operator new[](unsigned long)>:
c0012e74:	e9 c7 c9 ff ff       	jmp    c000f840 <malloc>

c0012e79 <operator delete(void*, unsigned long)>:
c0012e79:	e9 e2 c9 ff ff       	jmp    c000f860 <rfree>

c0012e7e <operator delete[](void*)>:
c0012e7e:	e9 dd c9 ff ff       	jmp    c000f860 <rfree>

c0012e83 <operator delete[](void*, unsigned long)>:
c0012e83:	e9 d8 c9 ff ff       	jmp    c000f860 <rfree>

c0012e88 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e88:	57                   	push   edi
c0012e89:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e8e:	56                   	push   esi
c0012e8f:	be ac aa 02 c0       	mov    esi,0xc002aaac
c0012e94:	53                   	push   ebx
c0012e95:	83 ec 40             	sub    esp,0x40
c0012e98:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e9c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ea0:	fc                   	cld    
c0012ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ea3:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ea7:	83 f9 3e             	cmp    ecx,0x3e
c0012eaa:	7e 05                	jle    c0012eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012eac:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012eb1:	89 df                	mov    edi,ebx
c0012eb3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012eb7:	eb 02                	jmp    c0012ebb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012eb9:	89 c7                	mov    edi,eax
c0012ebb:	31 d2                	xor    edx,edx
c0012ebd:	46                   	inc    esi
c0012ebe:	89 f8                	mov    eax,edi
c0012ec0:	f7 f1                	div    ecx
c0012ec2:	39 cf                	cmp    edi,ecx
c0012ec4:	73 f3                	jae    c0012eb9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ec6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ec9:	eb 02                	jmp    c0012ecd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ecb:	89 c3                	mov    ebx,eax
c0012ecd:	31 d2                	xor    edx,edx
c0012ecf:	4e                   	dec    esi
c0012ed0:	89 d8                	mov    eax,ebx
c0012ed2:	f7 f1                	div    ecx
c0012ed4:	39 cb                	cmp    ebx,ecx
c0012ed6:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012eda:	88 16                	mov    BYTE PTR [esi],dl
c0012edc:	73 ed                	jae    c0012ecb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ede:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ee2:	83 c4 40             	add    esp,0x40
c0012ee5:	5b                   	pop    ebx
c0012ee6:	5e                   	pop    esi
c0012ee7:	5f                   	pop    edi
c0012ee8:	c3                   	ret    

c0012ee9 <Dbg::logc(char)>:
c0012ee9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eed:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ef2:	ec                   	in     al,dx
c0012ef3:	a8 20                	test   al,0x20
c0012ef5:	74 fb                	je     c0012ef2 <Dbg::logc(char)+0x9>
c0012ef7:	ba f8 03 00 00       	mov    edx,0x3f8
c0012efc:	88 c8                	mov    al,cl
c0012efe:	ee                   	out    dx,al
c0012eff:	c3                   	ret    

c0012f00 <Dbg::logs(char*)>:
c0012f00:	53                   	push   ebx
c0012f01:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f08:	84 c0                	test   al,al
c0012f0a:	74 0f                	je     c0012f1b <Dbg::logs(char*)+0x1b>
c0012f0c:	50                   	push   eax
c0012f0d:	43                   	inc    ebx
c0012f0e:	e8 d6 ff ff ff       	call   c0012ee9 <Dbg::logc(char)>
c0012f13:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f16:	5a                   	pop    edx
c0012f17:	84 c0                	test   al,al
c0012f19:	75 f1                	jne    c0012f0c <Dbg::logs(char*)+0xc>
c0012f1b:	5b                   	pop    ebx
c0012f1c:	c3                   	ret    

c0012f1d <Dbg::logWriteInt(unsigned int)>:
c0012f1d:	83 ec 10             	sub    esp,0x10
c0012f20:	6a 0a                	push   0xa
c0012f22:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f26:	50                   	push   eax
c0012f27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f2b:	e8 58 ff ff ff       	call   c0012e88 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f30:	50                   	push   eax
c0012f31:	e8 ca ff ff ff       	call   c0012f00 <Dbg::logs(char*)>
c0012f36:	83 c4 20             	add    esp,0x20
c0012f39:	c3                   	ret    

c0012f3a <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f3a:	83 ec 10             	sub    esp,0x10
c0012f3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f41:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f45:	50                   	push   eax
c0012f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4a:	e8 39 ff ff ff       	call   c0012e88 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f4f:	50                   	push   eax
c0012f50:	e8 ab ff ff ff       	call   c0012f00 <Dbg::logs(char*)>
c0012f55:	83 c4 20             	add    esp,0x20
c0012f58:	c3                   	ret    

c0012f59 <Dbg::kprintf(char const*, ...)>:
c0012f59:	55                   	push   ebp
c0012f5a:	57                   	push   edi
c0012f5b:	56                   	push   esi
c0012f5c:	53                   	push   ebx
c0012f5d:	83 ec 0c             	sub    esp,0xc
c0012f60:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f64:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f6c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f6f:	84 c0                	test   al,al
c0012f71:	74 4a                	je     c0012fbd <Dbg::kprintf(char const*, ...)+0x64>
c0012f73:	31 db                	xor    ebx,ebx
c0012f75:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f78:	3c 25                	cmp    al,0x25
c0012f7a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f7d:	0f 85 e4 00 00 00    	jne    c0013067 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f83:	83 c3 02             	add    ebx,0x2
c0012f86:	8a 07                	mov    al,BYTE PTR [edi]
c0012f88:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f8b:	83 e8 25             	sub    eax,0x25
c0012f8e:	3c 53                	cmp    al,0x53
c0012f90:	0f 87 ba 00 00 00    	ja     c0013050 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f96:	0f b6 c0             	movzx  eax,al
c0012f99:	ff 24 85 ec aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5514]
c0012fa0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fa4:	89 c8                	mov    eax,ecx
c0012fa6:	83 c1 04             	add    ecx,0x4
c0012fa9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fad:	ff 30                	push   DWORD PTR [eax]
c0012faf:	e8 4c ff ff ff       	call   c0012f00 <Dbg::logs(char*)>
c0012fb4:	58                   	pop    eax
c0012fb5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fb9:	84 c0                	test   al,al
c0012fbb:	75 b8                	jne    c0012f75 <Dbg::kprintf(char const*, ...)+0x1c>
c0012fbd:	83 c4 0c             	add    esp,0xc
c0012fc0:	5b                   	pop    ebx
c0012fc1:	5e                   	pop    esi
c0012fc2:	5f                   	pop    edi
c0012fc3:	5d                   	pop    ebp
c0012fc4:	c3                   	ret    
c0012fc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fc9:	89 d0                	mov    eax,edx
c0012fcb:	83 c2 04             	add    edx,0x4
c0012fce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fd2:	ff 30                	push   DWORD PTR [eax]
c0012fd4:	e8 44 ff ff ff       	call   c0012f1d <Dbg::logWriteInt(unsigned int)>
c0012fd9:	58                   	pop    eax
c0012fda:	eb d9                	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fe0:	89 d0                	mov    eax,edx
c0012fe2:	83 c2 04             	add    edx,0x4
c0012fe5:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fe8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fec:	50                   	push   eax
c0012fed:	e8 f7 fe ff ff       	call   c0012ee9 <Dbg::logc(char)>
c0012ff2:	58                   	pop    eax
c0012ff3:	eb c0                	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ff9:	89 c8                	mov    eax,ecx
c0012ffb:	83 c1 04             	add    ecx,0x4
c0012ffe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013002:	ff 30                	push   DWORD PTR [eax]
c0013004:	e8 14 ff ff ff       	call   c0012f1d <Dbg::logWriteInt(unsigned int)>
c0013009:	5f                   	pop    edi
c001300a:	eb a9                	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c001300c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013010:	89 c8                	mov    eax,ecx
c0013012:	83 c1 04             	add    ecx,0x4
c0013015:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013019:	6a 10                	push   0x10
c001301b:	ff 30                	push   DWORD PTR [eax]
c001301d:	e8 18 ff ff ff       	call   c0012f3a <Dbg::logWriteIntBase(unsigned int, int)>
c0013022:	59                   	pop    ecx
c0013023:	5f                   	pop    edi
c0013024:	eb 8f                	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0013026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001302a:	89 d0                	mov    eax,edx
c001302c:	83 c2 08             	add    edx,0x8
c001302f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013033:	6a 10                	push   0x10
c0013035:	ff 30                	push   DWORD PTR [eax]
c0013037:	e8 fe fe ff ff       	call   c0012f3a <Dbg::logWriteIntBase(unsigned int, int)>
c001303c:	58                   	pop    eax
c001303d:	5a                   	pop    edx
c001303e:	e9 72 ff ff ff       	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0013043:	6a 25                	push   0x25
c0013045:	e8 9f fe ff ff       	call   c0012ee9 <Dbg::logc(char)>
c001304a:	58                   	pop    eax
c001304b:	e9 65 ff ff ff       	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0013050:	6a 25                	push   0x25
c0013052:	e8 92 fe ff ff       	call   c0012ee9 <Dbg::logc(char)>
c0013057:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001305a:	50                   	push   eax
c001305b:	e8 89 fe ff ff       	call   c0012ee9 <Dbg::logc(char)>
c0013060:	5a                   	pop    edx
c0013061:	59                   	pop    ecx
c0013062:	e9 4e ff ff ff       	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0013067:	50                   	push   eax
c0013068:	89 eb                	mov    ebx,ebp
c001306a:	e8 7a fe ff ff       	call   c0012ee9 <Dbg::logc(char)>
c001306f:	89 fd                	mov    ebp,edi
c0013071:	58                   	pop    eax
c0013072:	e9 3e ff ff ff       	jmp    c0012fb5 <Dbg::kprintf(char const*, ...)+0x5c>
c0013077:	90                   	nop

c0013078 <File::read(unsigned long long, void*, int*)>:
c0013078:	53                   	push   ebx
c0013079:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013081:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013088:	3c 19                	cmp    al,0x19
c001308a:	77 35                	ja     c00130c1 <File::read(unsigned long long, void*, int*)+0x49>
c001308c:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0013093:	85 c0                	test   eax,eax
c0013095:	74 2a                	je     c00130c1 <File::read(unsigned long long, void*, int*)+0x49>
c0013097:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001309d:	85 c0                	test   eax,eax
c001309f:	74 20                	je     c00130c1 <File::read(unsigned long long, void*, int*)+0x49>
c00130a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a5:	74 21                	je     c00130c8 <File::read(unsigned long long, void*, int*)+0x50>
c00130a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130ad:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130bb:	5b                   	pop    ebx
c00130bc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130bf:	ff e0                	jmp    eax
c00130c1:	b8 0b 00 00 00       	mov    eax,0xb
c00130c6:	eb 05                	jmp    c00130cd <File::read(unsigned long long, void*, int*)+0x55>
c00130c8:	b8 05 00 00 00       	mov    eax,0x5
c00130cd:	5b                   	pop    ebx
c00130ce:	c3                   	ret    
c00130cf:	90                   	nop

c00130d0 <File::write(unsigned long long, void*, int*)>:
c00130d0:	53                   	push   ebx
c00130d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130d9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130e0:	3c 19                	cmp    al,0x19
c00130e2:	77 35                	ja     c0013119 <File::write(unsigned long long, void*, int*)+0x49>
c00130e4:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c00130eb:	85 c0                	test   eax,eax
c00130ed:	74 2a                	je     c0013119 <File::write(unsigned long long, void*, int*)+0x49>
c00130ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130f5:	85 c0                	test   eax,eax
c00130f7:	74 20                	je     c0013119 <File::write(unsigned long long, void*, int*)+0x49>
c00130f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130fd:	74 21                	je     c0013120 <File::write(unsigned long long, void*, int*)+0x50>
c00130ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013101:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013105:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001310b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001310f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013113:	5b                   	pop    ebx
c0013114:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013117:	ff e0                	jmp    eax
c0013119:	b8 0b 00 00 00       	mov    eax,0xb
c001311e:	eb 05                	jmp    c0013125 <File::write(unsigned long long, void*, int*)+0x55>
c0013120:	b8 05 00 00 00       	mov    eax,0x5
c0013125:	5b                   	pop    ebx
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <Directory::read(unsigned long long, void*, int*)>:
c0013128:	53                   	push   ebx
c0013129:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001312d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013131:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013138:	3c 19                	cmp    al,0x19
c001313a:	77 35                	ja     c0013171 <Directory::read(unsigned long long, void*, int*)+0x49>
c001313c:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0013143:	85 c0                	test   eax,eax
c0013145:	74 2a                	je     c0013171 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013147:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001314d:	85 c0                	test   eax,eax
c001314f:	74 20                	je     c0013171 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013151:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013155:	74 21                	je     c0013178 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013157:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013159:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001315d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013167:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001316b:	5b                   	pop    ebx
c001316c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001316f:	ff e0                	jmp    eax
c0013171:	b8 0b 00 00 00       	mov    eax,0xb
c0013176:	eb 05                	jmp    c001317d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013178:	b8 05 00 00 00       	mov    eax,0x5
c001317d:	5b                   	pop    ebx
c001317e:	c3                   	ret    
c001317f:	90                   	nop

c0013180 <Directory::write(unsigned long long, void*, int*)>:
c0013180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013184:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001318b:	b8 0b 00 00 00       	mov    eax,0xb
c0013190:	80 fa 19             	cmp    dl,0x19
c0013193:	77 18                	ja     c00131ad <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013195:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c001319c:	85 d2                	test   edx,edx
c001319e:	74 0d                	je     c00131ad <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131a0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131a7:	19 c0                	sbb    eax,eax
c00131a9:	83 e0 0a             	and    eax,0xa
c00131ac:	40                   	inc    eax
c00131ad:	c3                   	ret    

c00131ae <File::isAtty()>:
c00131ae:	31 c0                	xor    eax,eax
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::isAtty()>:
c00131b2:	31 c0                	xor    eax,eax
c00131b4:	c3                   	ret    
c00131b5:	90                   	nop

c00131b6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131b6:	b8 0a 00 00 00       	mov    eax,0xa
c00131bb:	c3                   	ret    

c00131bc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131bc:	b8 0a 00 00 00       	mov    eax,0xa
c00131c1:	c3                   	ret    

c00131c2 <File::~File()>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c00131ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ce:	89 10                	mov    DWORD PTR [eax],edx
c00131d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d4:	83 ec 0c             	sub    esp,0xc
c00131d7:	50                   	push   eax
c00131d8:	e8 4d e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	90                   	nop
c00131e1:	83 c4 0c             	add    esp,0xc
c00131e4:	c3                   	ret    
c00131e5:	90                   	nop

c00131e6 <File::~File()>:
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	83 ec 0c             	sub    esp,0xc
c00131ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f0:	e8 cd ff ff ff       	call   c00131c2 <File::~File()>
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	83 ec 08             	sub    esp,0x8
c00131fb:	68 14 01 00 00       	push   0x114
c0013200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013204:	e8 70 fc ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	83 c4 0c             	add    esp,0xc
c001320f:	c3                   	ret    

c0013210 <Directory::~Directory()>:
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0013218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001321c:	89 10                	mov    DWORD PTR [eax],edx
c001321e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013222:	83 ec 0c             	sub    esp,0xc
c0013225:	50                   	push   eax
c0013226:	e8 ff e6 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c001322b:	83 c4 10             	add    esp,0x10
c001322e:	90                   	nop
c001322f:	83 c4 0c             	add    esp,0xc
c0013232:	c3                   	ret    
c0013233:	90                   	nop

c0013234 <Directory::~Directory()>:
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	83 ec 0c             	sub    esp,0xc
c001323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323e:	e8 cd ff ff ff       	call   c0013210 <Directory::~Directory()>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	83 ec 08             	sub    esp,0x8
c0013249:	68 14 01 00 00       	push   0x114
c001324e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013252:	e8 22 fc ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	83 c4 0c             	add    esp,0xc
c001325d:	c3                   	ret    

c001325e <Filesystem::Filesystem()>:
c001325e:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c0013263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013267:	89 10                	mov    DWORD PTR [eax],edx
c0013269:	8b 15 8c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e78c
c001326f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013273:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001327a:	a3 8c e7 02 c0       	mov    ds:0xc002e78c,eax
c001327f:	90                   	nop
c0013280:	c3                   	ret    
c0013281:	90                   	nop

c0013282 <Filesystem::~Filesystem()>:
c0013282:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c0013287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328b:	89 10                	mov    DWORD PTR [eax],edx
c001328d:	90                   	nop
c001328e:	c3                   	ret    
c001328f:	90                   	nop

c0013290 <Filesystem::~Filesystem()>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013297:	e8 e6 ff ff ff       	call   c0013282 <Filesystem::~Filesystem()>
c001329c:	83 c4 04             	add    esp,0x4
c001329f:	83 ec 08             	sub    esp,0x8
c00132a2:	6a 08                	push   0x8
c00132a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a8:	e8 cc fb ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	83 c4 0c             	add    esp,0xc
c00132b3:	c3                   	ret    

c00132b4 <Fs::getcwd(Process*, char*, int)>:
c00132b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132b8:	31 c0                	xor    eax,eax
c00132ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132c1:	7d 15                	jge    c00132d8 <Fs::getcwd(Process*, char*, int)+0x24>
c00132c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132c7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132ce:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132d1:	84 c9                	test   cl,cl
c00132d3:	74 06                	je     c00132db <Fs::getcwd(Process*, char*, int)+0x27>
c00132d5:	40                   	inc    eax
c00132d6:	eb e2                	jmp    c00132ba <Fs::getcwd(Process*, char*, int)+0x6>
c00132d8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132db:	31 c0                	xor    eax,eax
c00132dd:	c3                   	ret    

c00132de <Fs::initVFS()>:
c00132de:	83 ec 18             	sub    esp,0x18
c00132e1:	6a 08                	push   0x8
c00132e3:	e8 58 c5 ff ff       	call   c000f840 <malloc>
c00132e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00132eb:	e8 a4 dc 00 00       	call   c0020f94 <FAT::FAT()>
c00132f0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132f7:	e8 44 c5 ff ff       	call   c000f840 <malloc>
c00132fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00132ff:	e8 e8 ee 00 00       	call   c00221ec <ISO9660::ISO9660()>
c0013304:	83 c4 1c             	add    esp,0x1c
c0013307:	c3                   	ret    

c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013308:	55                   	push   ebp
c0013309:	57                   	push   edi
c001330a:	56                   	push   esi
c001330b:	53                   	push   ebx
c001330c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013312:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013319:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013320:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013327:	68 00 04 00 00       	push   0x400
c001332c:	6a 00                	push   0x0
c001332e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013332:	56                   	push   esi
c0013333:	e8 40 d4 fe ff       	call   c0000778 <memset>
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001333f:	75 0b                	jne    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013341:	50                   	push   eax
c0013342:	50                   	push   eax
c0013343:	57                   	push   edi
c0013344:	56                   	push   esi
c0013345:	e8 ea d4 fe ff       	call   c0000834 <strcpy>
c001334a:	eb 41                	jmp    c001338d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001334c:	8a 07                	mov    al,BYTE PTR [edi]
c001334e:	3c 5c                	cmp    al,0x5c
c0013350:	74 04                	je     c0013356 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013352:	3c 2f                	cmp    al,0x2f
c0013354:	75 18                	jne    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013356:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013359:	3c 60                	cmp    al,0x60
c001335b:	7e 03                	jle    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001335d:	83 e8 20             	sub    eax,0x20
c0013360:	88 04 24             	mov    BYTE PTR [esp],al
c0013363:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001336a:	50                   	push   eax
c001336b:	50                   	push   eax
c001336c:	eb 18                	jmp    c0013386 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001336e:	50                   	push   eax
c001336f:	50                   	push   eax
c0013370:	55                   	push   ebp
c0013371:	56                   	push   esi
c0013372:	e8 bd d4 fe ff       	call   c0000834 <strcpy>
c0013377:	5a                   	pop    edx
c0013378:	59                   	pop    ecx
c0013379:	68 e1 c3 02 c0       	push   0xc002c3e1
c001337e:	56                   	push   esi
c001337f:	e8 f0 d5 fe ff       	call   c0000974 <strcat>
c0013384:	5d                   	pop    ebp
c0013385:	58                   	pop    eax
c0013386:	57                   	push   edi
c0013387:	56                   	push   esi
c0013388:	e8 e7 d5 fe ff       	call   c0000974 <strcat>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013393:	3c 60                	cmp    al,0x60
c0013395:	7e 03                	jle    c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013397:	83 e8 20             	sub    eax,0x20
c001339a:	88 04 24             	mov    BYTE PTR [esp],al
c001339d:	88 03                	mov    BYTE PTR [ebx],al
c001339f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133a6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133ac:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133b0:	bf 03 00 00 00       	mov    edi,0x3
c00133b5:	b8 03 00 00 00       	mov    eax,0x3
c00133ba:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133bd:	84 d2                	test   dl,dl
c00133bf:	0f 84 91 00 00 00    	je     c0013456 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133c5:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133c8:	80 fa 5c             	cmp    dl,0x5c
c00133cb:	74 05                	je     c00133d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133cd:	80 fa 2f             	cmp    dl,0x2f
c00133d0:	75 12                	jne    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133d2:	89 c5                	mov    ebp,eax
c00133d4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133d9:	74 09                	je     c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133db:	40                   	inc    eax
c00133dc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133e0:	89 cf                	mov    edi,ecx
c00133e2:	eb d6                	jmp    c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133e4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133e9:	75 5b                	jne    c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133eb:	80 fa 2e             	cmp    dl,0x2e
c00133ee:	75 56                	jne    c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133f0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133f4:	74 19                	je     c001340f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133f6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133fb:	74 53                	je     c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133fd:	89 f9                	mov    ecx,edi
c00133ff:	41                   	inc    ecx
c0013400:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013403:	80 fa 2f             	cmp    dl,0x2f
c0013406:	74 f7                	je     c00133ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013408:	80 fa 5c             	cmp    dl,0x5c
c001340b:	74 f2                	je     c00133ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001340d:	eb d1                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013414:	74 3a                	je     c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013416:	83 f8 03             	cmp    eax,0x3
c0013419:	74 c5                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001341b:	41                   	inc    ecx
c001341c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001341f:	80 fa 2f             	cmp    dl,0x2f
c0013422:	74 f7                	je     c001341b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013424:	80 fa 5c             	cmp    dl,0x5c
c0013427:	74 f2                	je     c001341b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013429:	48                   	dec    eax
c001342a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001342e:	75 06                	jne    c0013436 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013430:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013434:	eb f3                	jmp    c0013429 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013436:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001343a:	74 07                	je     c0013443 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001343c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013440:	48                   	dec    eax
c0013441:	eb f3                	jmp    c0013436 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013443:	40                   	inc    eax
c0013444:	eb 9a                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013446:	80 fa 2f             	cmp    dl,0x2f
c0013449:	74 95                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001344b:	80 fa 5c             	cmp    dl,0x5c
c001344e:	74 90                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013450:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013453:	40                   	inc    eax
c0013454:	eb 8a                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013456:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	53                   	push   ebx
c001345e:	e8 31 d3 fe ff       	call   c0000794 <strlen>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001346b:	75 26                	jne    c0013493 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001346d:	83 ec 0c             	sub    esp,0xc
c0013470:	53                   	push   ebx
c0013471:	e8 1e d3 fe ff       	call   c0000794 <strlen>
c0013476:	83 c4 10             	add    esp,0x10
c0013479:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001347e:	74 26                	je     c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	53                   	push   ebx
c0013484:	e8 0b d3 fe ff       	call   c0000794 <strlen>
c0013489:	83 c4 10             	add    esp,0x10
c001348c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013491:	eb c7                	jmp    c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013493:	83 ec 0c             	sub    esp,0xc
c0013496:	53                   	push   ebx
c0013497:	e8 f8 d2 fe ff       	call   c0000794 <strlen>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134a4:	74 c7                	je     c001346d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134a6:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134ac:	5b                   	pop    ebx
c00134ad:	5e                   	pop    esi
c00134ae:	5f                   	pop    edi
c00134af:	5d                   	pop    ebp
c00134b0:	c3                   	ret    
c00134b1:	90                   	nop

c00134b2 <File::File(char const*, Process*)>:
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b9:	83 ec 08             	sub    esp,0x8
c00134bc:	6a 00                	push   0x0
c00134be:	50                   	push   eax
c00134bf:	e8 84 e2 ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c00134cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d0:	89 10                	mov    DWORD PTR [eax],edx
c00134d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e0:	83 c0 0d             	add    eax,0xd
c00134e3:	83 ec 04             	sub    esp,0x4
c00134e6:	52                   	push   edx
c00134e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134eb:	50                   	push   eax
c00134ec:	e8 17 fe ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134fb:	8d 50 bf             	lea    edx,[eax-0x41]
c00134fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013502:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013510:	90                   	nop
c0013511:	83 c4 0c             	add    esp,0xc
c0013514:	c3                   	ret    
c0013515:	90                   	nop

c0013516 <File::open(FileOpenMode)>:
c0013516:	53                   	push   ebx
c0013517:	b8 0b 00 00 00       	mov    eax,0xb
c001351c:	83 ec 08             	sub    esp,0x8
c001351f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013523:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001352a:	80 fa 19             	cmp    dl,0x19
c001352d:	77 40                	ja     c001356f <File::open(FileOpenMode)+0x59>
c001352f:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0013536:	85 d2                	test   edx,edx
c0013538:	74 35                	je     c001356f <File::open(FileOpenMode)+0x59>
c001353a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013540:	85 d2                	test   edx,edx
c0013542:	74 2b                	je     c001356f <File::open(FileOpenMode)+0x59>
c0013544:	b8 06 00 00 00       	mov    eax,0x6
c0013549:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001354d:	75 20                	jne    c001356f <File::open(FileOpenMode)+0x59>
c001354f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013551:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001355b:	51                   	push   ecx
c001355c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001355f:	51                   	push   ecx
c0013560:	52                   	push   edx
c0013561:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	85 c0                	test   eax,eax
c0013569:	75 04                	jne    c001356f <File::open(FileOpenMode)+0x59>
c001356b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001356f:	83 c4 08             	add    esp,0x8
c0013572:	5b                   	pop    ebx
c0013573:	c3                   	ret    

c0013574 <File::close()>:
c0013574:	53                   	push   ebx
c0013575:	b8 0b 00 00 00       	mov    eax,0xb
c001357a:	83 ec 08             	sub    esp,0x8
c001357d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013581:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013588:	80 fa 19             	cmp    dl,0x19
c001358b:	77 41                	ja     c00135ce <File::close()+0x5a>
c001358d:	8b 1c 95 20 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13e0]
c0013594:	85 db                	test   ebx,ebx
c0013596:	74 36                	je     c00135ce <File::close()+0x5a>
c0013598:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001359f:	74 2d                	je     c00135ce <File::close()+0x5a>
c00135a1:	b8 05 00 00 00       	mov    eax,0x5
c00135a6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135aa:	74 22                	je     c00135ce <File::close()+0x5a>
c00135ac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135b0:	8b 04 95 20 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13e0]
c00135b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135bd:	53                   	push   ebx
c00135be:	53                   	push   ebx
c00135bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00135c1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135c7:	50                   	push   eax
c00135c8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	83 c4 08             	add    esp,0x8
c00135d1:	5b                   	pop    ebx
c00135d2:	c3                   	ret    
c00135d3:	90                   	nop

c00135d4 <File::seek(unsigned long long)>:
c00135d4:	56                   	push   esi
c00135d5:	53                   	push   ebx
c00135d6:	b8 0b 00 00 00       	mov    eax,0xb
c00135db:	51                   	push   ecx
c00135dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135ef:	80 fa 19             	cmp    dl,0x19
c00135f2:	77 31                	ja     c0013625 <File::seek(unsigned long long)+0x51>
c00135f4:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c00135fb:	85 d2                	test   edx,edx
c00135fd:	74 26                	je     c0013625 <File::seek(unsigned long long)+0x51>
c00135ff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013605:	85 d2                	test   edx,edx
c0013607:	74 1c                	je     c0013625 <File::seek(unsigned long long)+0x51>
c0013609:	b8 05 00 00 00       	mov    eax,0x5
c001360e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013612:	74 11                	je     c0013625 <File::seek(unsigned long long)+0x51>
c0013614:	8b 02                	mov    eax,DWORD PTR [edx]
c0013616:	53                   	push   ebx
c0013617:	51                   	push   ecx
c0013618:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001361e:	52                   	push   edx
c001361f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	5a                   	pop    edx
c0013626:	5b                   	pop    ebx
c0013627:	5e                   	pop    esi
c0013628:	c3                   	ret    
c0013629:	90                   	nop

c001362a <File::tell(unsigned long long*)>:
c001362a:	83 ec 0c             	sub    esp,0xc
c001362d:	b8 0b 00 00 00       	mov    eax,0xb
c0013632:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013636:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001363d:	80 fa 19             	cmp    dl,0x19
c0013640:	77 34                	ja     c0013676 <File::tell(unsigned long long*)+0x4c>
c0013642:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0013649:	85 d2                	test   edx,edx
c001364b:	74 29                	je     c0013676 <File::tell(unsigned long long*)+0x4c>
c001364d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013653:	85 d2                	test   edx,edx
c0013655:	74 1f                	je     c0013676 <File::tell(unsigned long long*)+0x4c>
c0013657:	b8 05 00 00 00       	mov    eax,0x5
c001365c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013660:	74 14                	je     c0013676 <File::tell(unsigned long long*)+0x4c>
c0013662:	50                   	push   eax
c0013663:	8b 02                	mov    eax,DWORD PTR [edx]
c0013665:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013669:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001366f:	52                   	push   edx
c0013670:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013673:	83 c4 10             	add    esp,0x10
c0013676:	83 c4 0c             	add    esp,0xc
c0013679:	c3                   	ret    

c001367a <File::rewind()>:
c001367a:	83 ec 10             	sub    esp,0x10
c001367d:	6a 00                	push   0x0
c001367f:	6a 00                	push   0x0
c0013681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013685:	e8 4a ff ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001368a:	83 c4 1c             	add    esp,0x1c
c001368d:	c3                   	ret    

c001368e <File::unlink()>:
c001368e:	83 ec 0c             	sub    esp,0xc
c0013691:	b8 0b 00 00 00       	mov    eax,0xb
c0013696:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001369a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a1:	80 f9 19             	cmp    cl,0x19
c00136a4:	77 2f                	ja     c00136d5 <File::unlink()+0x47>
c00136a6:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c00136ad:	85 c9                	test   ecx,ecx
c00136af:	74 24                	je     c00136d5 <File::unlink()+0x47>
c00136b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136b7:	85 c9                	test   ecx,ecx
c00136b9:	74 1a                	je     c00136d5 <File::unlink()+0x47>
c00136bb:	b8 06 00 00 00       	mov    eax,0x6
c00136c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c4:	75 0f                	jne    c00136d5 <File::unlink()+0x47>
c00136c6:	83 c2 0d             	add    edx,0xd
c00136c9:	50                   	push   eax
c00136ca:	50                   	push   eax
c00136cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136cd:	52                   	push   edx
c00136ce:	51                   	push   ecx
c00136cf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136d2:	83 c4 10             	add    esp,0x10
c00136d5:	83 c4 0c             	add    esp,0xc
c00136d8:	c3                   	ret    
c00136d9:	90                   	nop

c00136da <File::rename(char const*)>:
c00136da:	83 ec 0c             	sub    esp,0xc
c00136dd:	b8 0b 00 00 00       	mov    eax,0xb
c00136e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136ed:	80 f9 19             	cmp    cl,0x19
c00136f0:	77 32                	ja     c0013724 <File::rename(char const*)+0x4a>
c00136f2:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c00136f9:	85 c9                	test   ecx,ecx
c00136fb:	74 27                	je     c0013724 <File::rename(char const*)+0x4a>
c00136fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013703:	85 c9                	test   ecx,ecx
c0013705:	74 1d                	je     c0013724 <File::rename(char const*)+0x4a>
c0013707:	b8 06 00 00 00       	mov    eax,0x6
c001370c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013710:	75 12                	jne    c0013724 <File::rename(char const*)+0x4a>
c0013712:	83 c2 0d             	add    edx,0xd
c0013715:	50                   	push   eax
c0013716:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013718:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001371c:	52                   	push   edx
c001371d:	51                   	push   ecx
c001371e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013721:	83 c4 10             	add    esp,0x10
c0013724:	83 c4 0c             	add    esp,0xc
c0013727:	c3                   	ret    

c0013728 <File::chfatattr(unsigned char, unsigned char)>:
c0013728:	57                   	push   edi
c0013729:	b8 0b 00 00 00       	mov    eax,0xb
c001372e:	56                   	push   esi
c001372f:	53                   	push   ebx
c0013730:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013734:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013738:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001373f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013743:	80 f9 19             	cmp    cl,0x19
c0013746:	77 37                	ja     c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013748:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c001374f:	85 c9                	test   ecx,ecx
c0013751:	74 2c                	je     c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013753:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013759:	85 c9                	test   ecx,ecx
c001375b:	74 22                	je     c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001375d:	b8 06 00 00 00       	mov    eax,0x6
c0013762:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013766:	75 17                	jne    c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013768:	8b 39                	mov    edi,DWORD PTR [ecx]
c001376a:	89 f0                	mov    eax,esi
c001376c:	83 c2 0d             	add    edx,0xd
c001376f:	0f b6 f0             	movzx  esi,al
c0013772:	0f b6 db             	movzx  ebx,bl
c0013775:	56                   	push   esi
c0013776:	53                   	push   ebx
c0013777:	52                   	push   edx
c0013778:	51                   	push   ecx
c0013779:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	5b                   	pop    ebx
c0013780:	5e                   	pop    esi
c0013781:	5f                   	pop    edi
c0013782:	c3                   	ret    
c0013783:	90                   	nop

c0013784 <File::exists()>:
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	31 c0                	xor    eax,eax
c0013789:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001378d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013794:	80 f9 19             	cmp    cl,0x19
c0013797:	77 24                	ja     c00137bd <File::exists()+0x39>
c0013799:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c00137a0:	85 c9                	test   ecx,ecx
c00137a2:	74 19                	je     c00137bd <File::exists()+0x39>
c00137a4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137aa:	85 c9                	test   ecx,ecx
c00137ac:	74 0f                	je     c00137bd <File::exists()+0x39>
c00137ae:	83 c2 0d             	add    edx,0xd
c00137b1:	50                   	push   eax
c00137b2:	50                   	push   eax
c00137b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137b5:	52                   	push   edx
c00137b6:	51                   	push   ecx
c00137b7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	83 c4 0c             	add    esp,0xc
c00137c0:	c3                   	ret    
c00137c1:	90                   	nop

c00137c2 <File::stat(unsigned long long*, bool*)>:
c00137c2:	56                   	push   esi
c00137c3:	53                   	push   ebx
c00137c4:	50                   	push   eax
c00137c5:	b8 0b 00 00 00       	mov    eax,0xb
c00137ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137dd:	80 f9 19             	cmp    cl,0x19
c00137e0:	77 3d                	ja     c001381f <File::stat(unsigned long long*, bool*)+0x5d>
c00137e2:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c00137e9:	85 c9                	test   ecx,ecx
c00137eb:	74 32                	je     c001381f <File::stat(unsigned long long*, bool*)+0x5d>
c00137ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137f3:	85 c9                	test   ecx,ecx
c00137f5:	74 28                	je     c001381f <File::stat(unsigned long long*, bool*)+0x5d>
c00137f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137fd:	74 13                	je     c0013812 <File::stat(unsigned long long*, bool*)+0x50>
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	56                   	push   esi
c0013803:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013809:	51                   	push   ecx
c001380a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001380d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013810:	eb 0a                	jmp    c001381c <File::stat(unsigned long long*, bool*)+0x5a>
c0013812:	53                   	push   ebx
c0013813:	83 c2 0d             	add    edx,0xd
c0013816:	56                   	push   esi
c0013817:	52                   	push   edx
c0013818:	51                   	push   ecx
c0013819:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	5a                   	pop    edx
c0013820:	5b                   	pop    ebx
c0013821:	5e                   	pop    esi
c0013822:	c3                   	ret    

c0013823 <Fs::setcwd(Process*, char*)>:
c0013823:	55                   	push   ebp
c0013824:	57                   	push   edi
c0013825:	56                   	push   esi
c0013826:	53                   	push   ebx
c0013827:	81 ec 20 02 00 00    	sub    esp,0x220
c001382d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013834:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001383a:	57                   	push   edi
c001383b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013842:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013846:	56                   	push   esi
c0013847:	e8 bc fa ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001384c:	89 34 24             	mov    DWORD PTR [esp],esi
c001384f:	e8 40 cf fe ff       	call   c0000794 <strlen>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	83 f8 02             	cmp    eax,0x2
c001385a:	77 17                	ja     c0013873 <Fs::setcwd(Process*, char*)+0x50>
c001385c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013861:	83 e8 41             	sub    eax,0x41
c0013864:	83 f8 19             	cmp    eax,0x19
c0013867:	76 24                	jbe    c001388d <Fs::setcwd(Process*, char*)+0x6a>
c0013869:	b8 03 00 00 00       	mov    eax,0x3
c001386e:	e9 e0 00 00 00       	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013873:	83 ec 0c             	sub    esp,0xc
c0013876:	56                   	push   esi
c0013877:	e8 18 cf fe ff       	call   c0000794 <strlen>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	83 f8 03             	cmp    eax,0x3
c0013882:	75 34                	jne    c00138b8 <Fs::setcwd(Process*, char*)+0x95>
c0013884:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013889:	75 2d                	jne    c00138b8 <Fs::setcwd(Process*, char*)+0x95>
c001388b:	eb cf                	jmp    c001385c <Fs::setcwd(Process*, char*)+0x39>
c001388d:	8b 14 85 20 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13e0]
c0013894:	b8 05 00 00 00       	mov    eax,0x5
c0013899:	85 d2                	test   edx,edx
c001389b:	0f 84 b2 00 00 00    	je     c0013953 <Fs::setcwd(Process*, char*)+0x130>
c00138a1:	b8 06 00 00 00       	mov    eax,0x6
c00138a6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138ad:	0f 85 92 00 00 00    	jne    c0013945 <Fs::setcwd(Process*, char*)+0x122>
c00138b3:	e9 9b 00 00 00       	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c00138b8:	83 ec 0c             	sub    esp,0xc
c00138bb:	68 14 01 00 00       	push   0x114
c00138c0:	e8 7b bf ff ff       	call   c000f840 <malloc>
c00138c5:	83 c4 0c             	add    esp,0xc
c00138c8:	89 c3                	mov    ebx,eax
c00138ca:	55                   	push   ebp
c00138cb:	56                   	push   esi
c00138cc:	50                   	push   eax
c00138cd:	e8 e0 fb ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c00138d2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138d7:	83 c4 0c             	add    esp,0xc
c00138da:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138de:	50                   	push   eax
c00138df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138e3:	50                   	push   eax
c00138e4:	53                   	push   ebx
c00138e5:	e8 d8 fe ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	83 f8 02             	cmp    eax,0x2
c00138f0:	74 04                	je     c00138f6 <Fs::setcwd(Process*, char*)+0xd3>
c00138f2:	85 c0                	test   eax,eax
c00138f4:	74 1c                	je     c0013912 <Fs::setcwd(Process*, char*)+0xef>
c00138f6:	b8 01 00 00 00       	mov    eax,0x1
c00138fb:	85 db                	test   ebx,ebx
c00138fd:	74 54                	je     c0013953 <Fs::setcwd(Process*, char*)+0x130>
c00138ff:	83 ec 0c             	sub    esp,0xc
c0013902:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013904:	53                   	push   ebx
c0013905:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013908:	83 c4 10             	add    esp,0x10
c001390b:	b8 01 00 00 00       	mov    eax,0x1
c0013910:	eb 41                	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013912:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013917:	75 1c                	jne    c0013935 <Fs::setcwd(Process*, char*)+0x112>
c0013919:	b8 02 00 00 00       	mov    eax,0x2
c001391e:	85 db                	test   ebx,ebx
c0013920:	74 31                	je     c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013922:	83 ec 0c             	sub    esp,0xc
c0013925:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013927:	53                   	push   ebx
c0013928:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	b8 02 00 00 00       	mov    eax,0x2
c0013933:	eb 1e                	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013935:	85 db                	test   ebx,ebx
c0013937:	74 0c                	je     c0013945 <Fs::setcwd(Process*, char*)+0x122>
c0013939:	83 ec 0c             	sub    esp,0xc
c001393c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393e:	53                   	push   ebx
c001393f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	50                   	push   eax
c0013946:	50                   	push   eax
c0013947:	56                   	push   esi
c0013948:	57                   	push   edi
c0013949:	e8 e6 ce fe ff       	call   c0000834 <strcpy>
c001394e:	83 c4 10             	add    esp,0x10
c0013951:	31 c0                	xor    eax,eax
c0013953:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013959:	5b                   	pop    ebx
c001395a:	5e                   	pop    esi
c001395b:	5f                   	pop    edi
c001395c:	5d                   	pop    ebp
c001395d:	c3                   	ret    

c001395e <Directory::Directory(char const*, Process*)>:
c001395e:	83 ec 0c             	sub    esp,0xc
c0013961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013965:	83 ec 08             	sub    esp,0x8
c0013968:	6a 00                	push   0x0
c001396a:	50                   	push   eax
c001396b:	e8 d8 dd ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0013978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397c:	89 10                	mov    DWORD PTR [eax],edx
c001397e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013982:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398c:	83 c0 0d             	add    eax,0xd
c001398f:	83 ec 04             	sub    esp,0x4
c0013992:	52                   	push   edx
c0013993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013997:	50                   	push   eax
c0013998:	e8 6b f9 ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001399d:	83 c4 10             	add    esp,0x10
c00139a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139a7:	8d 50 bf             	lea    edx,[eax-0x41]
c00139aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139bc:	90                   	nop
c00139bd:	83 c4 0c             	add    esp,0xc
c00139c0:	c3                   	ret    
c00139c1:	90                   	nop

c00139c2 <Directory::open()>:
c00139c2:	53                   	push   ebx
c00139c3:	b8 0b 00 00 00       	mov    eax,0xb
c00139c8:	83 ec 08             	sub    esp,0x8
c00139cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139cf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139d6:	80 fa 19             	cmp    dl,0x19
c00139d9:	77 3d                	ja     c0013a18 <Directory::open()+0x56>
c00139db:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c00139e2:	85 d2                	test   edx,edx
c00139e4:	74 32                	je     c0013a18 <Directory::open()+0x56>
c00139e6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139ec:	85 d2                	test   edx,edx
c00139ee:	74 28                	je     c0013a18 <Directory::open()+0x56>
c00139f0:	b8 06 00 00 00       	mov    eax,0x6
c00139f5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139f9:	75 1d                	jne    c0013a18 <Directory::open()+0x56>
c00139fb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a01:	50                   	push   eax
c0013a02:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a04:	51                   	push   ecx
c0013a05:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a08:	51                   	push   ecx
c0013a09:	52                   	push   edx
c0013a0a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a0d:	83 c4 10             	add    esp,0x10
c0013a10:	85 c0                	test   eax,eax
c0013a12:	75 04                	jne    c0013a18 <Directory::open()+0x56>
c0013a14:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a18:	83 c4 08             	add    esp,0x8
c0013a1b:	5b                   	pop    ebx
c0013a1c:	c3                   	ret    
c0013a1d:	90                   	nop

c0013a1e <Directory::close()>:
c0013a1e:	53                   	push   ebx
c0013a1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a24:	83 ec 08             	sub    esp,0x8
c0013a27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a2b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a32:	80 fa 19             	cmp    dl,0x19
c0013a35:	77 41                	ja     c0013a78 <Directory::close()+0x5a>
c0013a37:	8b 1c 95 20 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13e0]
c0013a3e:	85 db                	test   ebx,ebx
c0013a40:	74 36                	je     c0013a78 <Directory::close()+0x5a>
c0013a42:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a49:	74 2d                	je     c0013a78 <Directory::close()+0x5a>
c0013a4b:	b8 05 00 00 00       	mov    eax,0x5
c0013a50:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a54:	74 22                	je     c0013a78 <Directory::close()+0x5a>
c0013a56:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a5a:	8b 04 95 20 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13e0]
c0013a61:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a67:	53                   	push   ebx
c0013a68:	53                   	push   ebx
c0013a69:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a6b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a71:	50                   	push   eax
c0013a72:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a75:	83 c4 10             	add    esp,0x10
c0013a78:	83 c4 08             	add    esp,0x8
c0013a7b:	5b                   	pop    ebx
c0013a7c:	c3                   	ret    
c0013a7d:	90                   	nop

c0013a7e <Directory::unlink()>:
c0013a7e:	83 ec 0c             	sub    esp,0xc
c0013a81:	b8 0b 00 00 00       	mov    eax,0xb
c0013a86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a91:	80 f9 19             	cmp    cl,0x19
c0013a94:	77 2f                	ja     c0013ac5 <Directory::unlink()+0x47>
c0013a96:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013a9d:	85 c9                	test   ecx,ecx
c0013a9f:	74 24                	je     c0013ac5 <Directory::unlink()+0x47>
c0013aa1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aa7:	85 c9                	test   ecx,ecx
c0013aa9:	74 1a                	je     c0013ac5 <Directory::unlink()+0x47>
c0013aab:	b8 06 00 00 00       	mov    eax,0x6
c0013ab0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ab4:	75 0f                	jne    c0013ac5 <Directory::unlink()+0x47>
c0013ab6:	83 c2 0d             	add    edx,0xd
c0013ab9:	50                   	push   eax
c0013aba:	50                   	push   eax
c0013abb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013abd:	52                   	push   edx
c0013abe:	51                   	push   ecx
c0013abf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ac2:	83 c4 10             	add    esp,0x10
c0013ac5:	83 c4 0c             	add    esp,0xc
c0013ac8:	c3                   	ret    
c0013ac9:	90                   	nop

c0013aca <Directory::rename(char const*)>:
c0013aca:	83 ec 0c             	sub    esp,0xc
c0013acd:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013add:	80 f9 19             	cmp    cl,0x19
c0013ae0:	77 32                	ja     c0013b14 <Directory::rename(char const*)+0x4a>
c0013ae2:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013ae9:	85 c9                	test   ecx,ecx
c0013aeb:	74 27                	je     c0013b14 <Directory::rename(char const*)+0x4a>
c0013aed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af3:	85 c9                	test   ecx,ecx
c0013af5:	74 1d                	je     c0013b14 <Directory::rename(char const*)+0x4a>
c0013af7:	b8 06 00 00 00       	mov    eax,0x6
c0013afc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b00:	75 12                	jne    c0013b14 <Directory::rename(char const*)+0x4a>
c0013b02:	83 c2 0d             	add    edx,0xd
c0013b05:	50                   	push   eax
c0013b06:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b0c:	52                   	push   edx
c0013b0d:	51                   	push   ecx
c0013b0e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b11:	83 c4 10             	add    esp,0x10
c0013b14:	83 c4 0c             	add    esp,0xc
c0013b17:	c3                   	ret    

c0013b18 <Directory::exists()>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	31 c0                	xor    eax,eax
c0013b1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b21:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b28:	80 f9 19             	cmp    cl,0x19
c0013b2b:	77 24                	ja     c0013b51 <Directory::exists()+0x39>
c0013b2d:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013b34:	85 c9                	test   ecx,ecx
c0013b36:	74 19                	je     c0013b51 <Directory::exists()+0x39>
c0013b38:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b3e:	85 c9                	test   ecx,ecx
c0013b40:	74 0f                	je     c0013b51 <Directory::exists()+0x39>
c0013b42:	83 c2 0d             	add    edx,0xd
c0013b45:	50                   	push   eax
c0013b46:	50                   	push   eax
c0013b47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b49:	52                   	push   edx
c0013b4a:	51                   	push   ecx
c0013b4b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b4e:	83 c4 10             	add    esp,0x10
c0013b51:	83 c4 0c             	add    esp,0xc
c0013b54:	c3                   	ret    
c0013b55:	90                   	nop

c0013b56 <Directory::read(dirent*)>:
c0013b56:	83 ec 1c             	sub    esp,0x1c
c0013b59:	b8 0b 00 00 00       	mov    eax,0xb
c0013b5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b62:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b69:	80 fa 19             	cmp    dl,0x19
c0013b6c:	77 30                	ja     c0013b9e <Directory::read(dirent*)+0x48>
c0013b6e:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0013b75:	85 d2                	test   edx,edx
c0013b77:	74 25                	je     c0013b9e <Directory::read(dirent*)+0x48>
c0013b79:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b80:	74 1c                	je     c0013b9e <Directory::read(dirent*)+0x48>
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b8b:	52                   	push   edx
c0013b8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b90:	6a 00                	push   0x0
c0013b92:	68 10 01 00 00       	push   0x110
c0013b97:	51                   	push   ecx
c0013b98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b9b:	83 c4 20             	add    esp,0x20
c0013b9e:	83 c4 1c             	add    esp,0x1c
c0013ba1:	c3                   	ret    

c0013ba2 <Directory::create()>:
c0013ba2:	83 ec 0c             	sub    esp,0xc
c0013ba5:	b8 0b 00 00 00       	mov    eax,0xb
c0013baa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb5:	80 f9 19             	cmp    cl,0x19
c0013bb8:	77 2f                	ja     c0013be9 <Directory::create()+0x47>
c0013bba:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013bc1:	85 c9                	test   ecx,ecx
c0013bc3:	74 24                	je     c0013be9 <Directory::create()+0x47>
c0013bc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bcb:	85 c9                	test   ecx,ecx
c0013bcd:	74 1a                	je     c0013be9 <Directory::create()+0x47>
c0013bcf:	b8 06 00 00 00       	mov    eax,0x6
c0013bd4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bd8:	75 0f                	jne    c0013be9 <Directory::create()+0x47>
c0013bda:	83 c2 0d             	add    edx,0xd
c0013bdd:	50                   	push   eax
c0013bde:	50                   	push   eax
c0013bdf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013be1:	52                   	push   edx
c0013be2:	51                   	push   ecx
c0013be3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bee:	b8 0a 00 00 00       	mov    eax,0xa
c0013bf3:	c3                   	ret    

c0013bf4 <Bus::Bus(char const*)>:
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfb:	83 ec 08             	sub    esp,0x8
c0013bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c02:	50                   	push   eax
c0013c03:	e8 68 09 00 00       	call   c0014570 <Device::Device(char const*)>
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	ba e0 ac 02 c0       	mov    edx,0xc002ace0
c0013c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c14:	89 10                	mov    DWORD PTR [eax],edx
c0013c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c24:	90                   	nop
c0013c25:	83 c4 0c             	add    esp,0xc
c0013c28:	c3                   	ret    
c0013c29:	90                   	nop

c0013c2a <Bus::~Bus()>:
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	ba e0 ac 02 c0       	mov    edx,0xc002ace0
c0013c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c36:	89 10                	mov    DWORD PTR [eax],edx
c0013c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	50                   	push   eax
c0013c40:	e8 0d 06 00 00       	call   c0014252 <Device::~Device()>
c0013c45:	83 c4 10             	add    esp,0x10
c0013c48:	90                   	nop
c0013c49:	83 c4 0c             	add    esp,0xc
c0013c4c:	c3                   	ret    
c0013c4d:	90                   	nop

c0013c4e <Bus::~Bus()>:
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	83 ec 0c             	sub    esp,0xc
c0013c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c58:	e8 cd ff ff ff       	call   c0013c2a <Bus::~Bus()>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	83 ec 08             	sub    esp,0x8
c0013c63:	68 58 01 00 00       	push   0x158
c0013c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6c:	e8 08 f2 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	83 c4 0c             	add    esp,0xc
c0013c77:	c3                   	ret    

c0013c78 <Buzzer::Buzzer(char const*)>:
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7f:	83 ec 08             	sub    esp,0x8
c0013c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c86:	50                   	push   eax
c0013c87:	e8 e4 08 00 00       	call   c0014570 <Device::Device(char const*)>
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c98:	89 10                	mov    DWORD PTR [eax],edx
c0013c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cac:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cb6:	90                   	nop
c0013cb7:	83 c4 0c             	add    esp,0xc
c0013cba:	c3                   	ret    
c0013cbb:	90                   	nop

c0013cbc <Buzzer::~Buzzer()>:
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc8:	89 10                	mov    DWORD PTR [eax],edx
c0013cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cce:	83 ec 0c             	sub    esp,0xc
c0013cd1:	50                   	push   eax
c0013cd2:	e8 7b 05 00 00       	call   c0014252 <Device::~Device()>
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	90                   	nop
c0013cdb:	83 c4 0c             	add    esp,0xc
c0013cde:	c3                   	ret    
c0013cdf:	90                   	nop

c0013ce0 <Buzzer::~Buzzer()>:
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	83 ec 0c             	sub    esp,0xc
c0013ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cea:	e8 cd ff ff ff       	call   c0013cbc <Buzzer::~Buzzer()>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	83 ec 08             	sub    esp,0x8
c0013cf5:	68 5c 01 00 00       	push   0x15c
c0013cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cfe:	e8 76 f1 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0013d03:	83 c4 10             	add    esp,0x10
c0013d06:	83 c4 0c             	add    esp,0xc
c0013d09:	c3                   	ret    

c0013d0a <Buzzer::stop()>:
c0013d0a:	83 ec 14             	sub    esp,0x14
c0013d0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d11:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d13:	6a 00                	push   0x0
c0013d15:	50                   	push   eax
c0013d16:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d19:	83 c4 1c             	add    esp,0x1c
c0013d1c:	c3                   	ret    

c0013d1d <beepThread(void*)>:
c0013d1d:	53                   	push   ebx
c0013d1e:	83 ec 08             	sub    esp,0x8
c0013d21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d25:	e8 f8 a0 00 00       	call   c001de22 <unlockScheduler()>
c0013d2a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d2f:	52                   	push   edx
c0013d30:	52                   	push   edx
c0013d31:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d37:	52                   	push   edx
c0013d38:	50                   	push   eax
c0013d39:	e8 32 a6 00 00       	call   c001e370 <nanoSleep(unsigned long long)>
c0013d3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d41:	e8 c4 ff ff ff       	call   c0013d0a <Buzzer::stop()>
c0013d46:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d4e:	83 c4 18             	add    esp,0x18
c0013d51:	5b                   	pop    ebx
c0013d52:	e9 5f a5 00 00       	jmp    c001e2b6 <blockTask(TaskState)>
c0013d57:	90                   	nop

c0013d58 <Buzzer::beep(int, int, bool)>:
c0013d58:	57                   	push   edi
c0013d59:	56                   	push   esi
c0013d5a:	53                   	push   ebx
c0013d5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d67:	52                   	push   edx
c0013d68:	52                   	push   edx
c0013d69:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6f:	56                   	push   esi
c0013d70:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	89 f8                	mov    eax,edi
c0013d78:	84 c0                	test   al,al
c0013d7a:	74 1f                	je     c0013d9b <Buzzer::beep(int, int, bool)+0x43>
c0013d7c:	50                   	push   eax
c0013d7d:	50                   	push   eax
c0013d7e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d84:	99                   	cdq    
c0013d85:	52                   	push   edx
c0013d86:	50                   	push   eax
c0013d87:	e8 e4 a5 00 00       	call   c001e370 <nanoSleep(unsigned long long)>
c0013d8c:	83 c4 10             	add    esp,0x10
c0013d8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d93:	5b                   	pop    ebx
c0013d94:	5e                   	pop    esi
c0013d95:	5f                   	pop    edi
c0013d96:	e9 6f ff ff ff       	jmp    c0013d0a <Buzzer::stop()>
c0013d9b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013da1:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0013da6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dae:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013db2:	c7 44 24 14 1d 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d1d
c0013dba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dbe:	5b                   	pop    ebx
c0013dbf:	5e                   	pop    esi
c0013dc0:	5f                   	pop    edi
c0013dc1:	e9 8c a1 00 00       	jmp    c001df52 <Process::createThread(void (*)(void*), void*, int)>

c0013dc6 <User::loadClockSettings(int)>:
c0013dc6:	53                   	push   ebx
c0013dc7:	83 ec 14             	sub    esp,0x14
c0013dca:	68 14 01 00 00       	push   0x114
c0013dcf:	e8 6c ba ff ff       	call   c000f840 <malloc>
c0013dd4:	83 c4 0c             	add    esp,0xc
c0013dd7:	89 c3                	mov    ebx,eax
c0013dd9:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c0013ddf:	68 34 ad 02 c0       	push   0xc002ad34
c0013de4:	50                   	push   eax
c0013de5:	e8 c8 f6 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c0013dea:	58                   	pop    eax
c0013deb:	5a                   	pop    edx
c0013dec:	6a 01                	push   0x1
c0013dee:	53                   	push   ebx
c0013def:	e8 22 f7 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c0013df4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df7:	e8 78 f7 ff ff       	call   c0013574 <File::close()>
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	85 db                	test   ebx,ebx
c0013e01:	74 0f                	je     c0013e12 <User::loadClockSettings(int)+0x4c>
c0013e03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e0c:	83 c4 08             	add    esp,0x8
c0013e0f:	5b                   	pop    ebx
c0013e10:	ff e0                	jmp    eax
c0013e12:	83 c4 08             	add    esp,0x8
c0013e15:	5b                   	pop    ebx
c0013e16:	c3                   	ret    
c0013e17:	90                   	nop

c0013e18 <Clock::Clock(char const*)>:
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1f:	83 ec 08             	sub    esp,0x8
c0013e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e26:	50                   	push   eax
c0013e27:	e8 44 07 00 00       	call   c0014570 <Device::Device(char const*)>
c0013e2c:	83 c4 10             	add    esp,0x10
c0013e2f:	ba 5c ad 02 c0       	mov    edx,0xc002ad5c
c0013e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e38:	89 10                	mov    DWORD PTR [eax],edx
c0013e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e48:	90                   	nop
c0013e49:	83 c4 0c             	add    esp,0xc
c0013e4c:	c3                   	ret    
c0013e4d:	90                   	nop

c0013e4e <Clock::~Clock()>:
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	ba 5c ad 02 c0       	mov    edx,0xc002ad5c
c0013e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5a:	89 10                	mov    DWORD PTR [eax],edx
c0013e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e60:	83 ec 0c             	sub    esp,0xc
c0013e63:	50                   	push   eax
c0013e64:	e8 e9 03 00 00       	call   c0014252 <Device::~Device()>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	90                   	nop
c0013e6d:	83 c4 0c             	add    esp,0xc
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <Clock::~Clock()>:
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	83 ec 0c             	sub    esp,0xc
c0013e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7c:	e8 cd ff ff ff       	call   c0013e4e <Clock::~Clock()>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	83 ec 08             	sub    esp,0x8
c0013e87:	68 58 01 00 00       	push   0x158
c0013e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e90:	e8 e4 ef ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	83 c4 0c             	add    esp,0xc
c0013e9b:	c3                   	ret    

c0013e9c <Clock::timeInSecondsLocal()>:
c0013e9c:	53                   	push   ebx
c0013e9d:	83 ec 14             	sub    esp,0x14
c0013ea0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ea6:	50                   	push   eax
c0013ea7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013eaa:	0f b6 0d 94 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e794
c0013eb1:	03 0d 98 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e798
c0013eb7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ebd:	89 cb                	mov    ebx,ecx
c0013ebf:	c1 fb 1f             	sar    ebx,0x1f
c0013ec2:	01 c8                	add    eax,ecx
c0013ec4:	11 da                	adc    edx,ebx
c0013ec6:	83 c4 10             	add    esp,0x10
c0013ec9:	31 c9                	xor    ecx,ecx
c0013ecb:	80 3d 95 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e795,0x0
c0013ed2:	74 05                	je     c0013ed9 <Clock::timeInSecondsLocal()+0x3d>
c0013ed4:	b9 08 07 00 00       	mov    ecx,0x708
c0013ed9:	31 db                	xor    ebx,ebx
c0013edb:	01 c8                	add    eax,ecx
c0013edd:	11 da                	adc    edx,ebx
c0013edf:	83 c4 08             	add    esp,0x8
c0013ee2:	5b                   	pop    ebx
c0013ee3:	c3                   	ret    

c0013ee4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ee4:	57                   	push   edi
c0013ee5:	56                   	push   esi
c0013ee6:	53                   	push   ebx
c0013ee7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013eeb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013eef:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ef1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ef5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ef8:	0f b6 05 94 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e794
c0013eff:	03 05 98 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e798
c0013f05:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f0b:	99                   	cdq    
c0013f0c:	29 c6                	sub    esi,eax
c0013f0e:	19 d7                	sbb    edi,edx
c0013f10:	89 f0                	mov    eax,esi
c0013f12:	89 fa                	mov    edx,edi
c0013f14:	31 f6                	xor    esi,esi
c0013f16:	80 3d 95 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e795,0x0
c0013f1d:	74 05                	je     c0013f24 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f1f:	be 08 07 00 00       	mov    esi,0x708
c0013f24:	31 ff                	xor    edi,edi
c0013f26:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f2a:	29 f0                	sub    eax,esi
c0013f2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f30:	19 fa                	sbb    edx,edi
c0013f32:	89 d8                	mov    eax,ebx
c0013f34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f38:	5b                   	pop    ebx
c0013f39:	5e                   	pop    esi
c0013f3a:	5f                   	pop    edi
c0013f3b:	ff e0                	jmp    eax

c0013f3d <datetimeToSeconds(datetime_t)>:
c0013f3d:	55                   	push   ebp
c0013f3e:	57                   	push   edi
c0013f3f:	56                   	push   esi
c0013f40:	53                   	push   ebx
c0013f41:	83 ec 14             	sub    esp,0x14
c0013f44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f48:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f4c:	89 d3                	mov    ebx,edx
c0013f4e:	0f b6 c6             	movzx  eax,dh
c0013f51:	c1 eb 10             	shr    ebx,0x10
c0013f54:	48                   	dec    eax
c0013f55:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f5a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f5e:	0f b6 f5             	movzx  esi,ch
c0013f61:	89 cf                	mov    edi,ecx
c0013f63:	6b f6 3c             	imul   esi,esi,0x3c
c0013f66:	c1 ef 10             	shr    edi,0x10
c0013f69:	0f b6 c9             	movzx  ecx,cl
c0013f6c:	89 f8                	mov    eax,edi
c0013f6e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f74:	0f b6 f8             	movzx  edi,al
c0013f77:	0f b6 d2             	movzx  edx,dl
c0013f7a:	01 fe                	add    esi,edi
c0013f7c:	01 f1                	add    ecx,esi
c0013f7e:	0f b7 f3             	movzx  esi,bx
c0013f81:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f85:	c1 f9 1f             	sar    ecx,0x1f
c0013f88:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f91:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f96:	8b 0c 8d a0 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5260]
c0013f9d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fa1:	76 29                	jbe    c0013fcc <datetimeToSeconds(datetime_t)+0x8f>
c0013fa3:	f6 c3 03             	test   bl,0x3
c0013fa6:	75 24                	jne    c0013fcc <datetimeToSeconds(datetime_t)+0x8f>
c0013fa8:	31 d2                	xor    edx,edx
c0013faa:	bf 64 00 00 00       	mov    edi,0x64
c0013faf:	89 d8                	mov    eax,ebx
c0013fb1:	66 f7 f7             	div    di
c0013fb4:	66 85 d2             	test   dx,dx
c0013fb7:	75 12                	jne    c0013fcb <datetimeToSeconds(datetime_t)+0x8e>
c0013fb9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fbf:	bf 90 01 00 00       	mov    edi,0x190
c0013fc4:	99                   	cdq    
c0013fc5:	f7 ff                	idiv   edi
c0013fc7:	85 d2                	test   edx,edx
c0013fc9:	75 01                	jne    c0013fcc <datetimeToSeconds(datetime_t)+0x8f>
c0013fcb:	41                   	inc    ecx
c0013fcc:	66 83 fb 46          	cmp    bx,0x46
c0013fd0:	76 45                	jbe    c0014017 <datetimeToSeconds(datetime_t)+0xda>
c0013fd2:	bb 46 00 00 00       	mov    ebx,0x46
c0013fd7:	bf 64 00 00 00       	mov    edi,0x64
c0013fdc:	bd 90 01 00 00       	mov    ebp,0x190
c0013fe1:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fe6:	f6 c3 03             	test   bl,0x3
c0013fe9:	75 23                	jne    c001400e <datetimeToSeconds(datetime_t)+0xd1>
c0013feb:	89 d8                	mov    eax,ebx
c0013fed:	99                   	cdq    
c0013fee:	f7 ff                	idiv   edi
c0013ff0:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ff5:	85 d2                	test   edx,edx
c0013ff7:	75 15                	jne    c001400e <datetimeToSeconds(datetime_t)+0xd1>
c0013ff9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fff:	99                   	cdq    
c0014000:	f7 fd                	idiv   ebp
c0014002:	83 fa 01             	cmp    edx,0x1
c0014005:	19 c0                	sbb    eax,eax
c0014007:	f7 d0                	not    eax
c0014009:	05 6e 01 00 00       	add    eax,0x16e
c001400e:	01 c1                	add    ecx,eax
c0014010:	43                   	inc    ebx
c0014011:	39 f3                	cmp    ebx,esi
c0014013:	7c cc                	jl     c0013fe1 <datetimeToSeconds(datetime_t)+0xa4>
c0014015:	eb 35                	jmp    c001404c <datetimeToSeconds(datetime_t)+0x10f>
c0014017:	74 33                	je     c001404c <datetimeToSeconds(datetime_t)+0x10f>
c0014019:	b8 45 00 00 00       	mov    eax,0x45
c001401e:	89 c2                	mov    edx,eax
c0014020:	83 e2 03             	and    edx,0x3
c0014023:	39 f0                	cmp    eax,esi
c0014025:	7e 0f                	jle    c0014036 <datetimeToSeconds(datetime_t)+0xf9>
c0014027:	83 fa 01             	cmp    edx,0x1
c001402a:	19 d2                	sbb    edx,edx
c001402c:	48                   	dec    eax
c001402d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014034:	eb e8                	jmp    c001401e <datetimeToSeconds(datetime_t)+0xe1>
c0014036:	b8 6d 01 00 00       	mov    eax,0x16d
c001403b:	85 d2                	test   edx,edx
c001403d:	75 0b                	jne    c001404a <datetimeToSeconds(datetime_t)+0x10d>
c001403f:	66 83 fb 01          	cmp    bx,0x1
c0014043:	19 c0                	sbb    eax,eax
c0014045:	05 6e 01 00 00       	add    eax,0x16e
c001404a:	29 c1                	sub    ecx,eax
c001404c:	b8 80 51 01 00       	mov    eax,0x15180
c0014051:	f7 e9                	imul   ecx
c0014053:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014057:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001405b:	83 c4 14             	add    esp,0x14
c001405e:	5b                   	pop    ebx
c001405f:	5e                   	pop    esi
c0014060:	5f                   	pop    edi
c0014061:	5d                   	pop    ebp
c0014062:	c3                   	ret    
c0014063:	90                   	nop

c0014064 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014064:	57                   	push   edi
c0014065:	56                   	push   esi
c0014066:	53                   	push   ebx
c0014067:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001406b:	8b 06                	mov    eax,DWORD PTR [esi]
c001406d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014070:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014074:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014078:	e8 c0 fe ff ff       	call   c0013f3d <datetimeToSeconds(datetime_t)>
c001407d:	59                   	pop    ecx
c001407e:	0f b6 0d 94 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e794
c0014085:	5b                   	pop    ebx
c0014086:	03 0d 98 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e798
c001408c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014092:	89 cb                	mov    ebx,ecx
c0014094:	c1 fb 1f             	sar    ebx,0x1f
c0014097:	29 c8                	sub    eax,ecx
c0014099:	19 da                	sbb    edx,ebx
c001409b:	31 c9                	xor    ecx,ecx
c001409d:	80 3d 95 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e795,0x0
c00140a4:	74 05                	je     c00140ab <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140a6:	b9 08 07 00 00       	mov    ecx,0x708
c00140ab:	31 db                	xor    ebx,ebx
c00140ad:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140b1:	29 c8                	sub    eax,ecx
c00140b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140b7:	19 da                	sbb    edx,ebx
c00140b9:	89 f8                	mov    eax,edi
c00140bb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140bf:	5b                   	pop    ebx
c00140c0:	5e                   	pop    esi
c00140c1:	5f                   	pop    edi
c00140c2:	ff e0                	jmp    eax

c00140c4 <secondsToDatetime(unsigned long long)>:
c00140c4:	55                   	push   ebp
c00140c5:	57                   	push   edi
c00140c6:	56                   	push   esi
c00140c7:	53                   	push   ebx
c00140c8:	83 ec 1c             	sub    esp,0x1c
c00140cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140d3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140d7:	6a 00                	push   0x0
c00140d9:	68 80 51 01 00       	push   0x15180
c00140de:	55                   	push   ebp
c00140df:	57                   	push   edi
c00140e0:	e8 17 29 01 00       	call   c00269fc <__udivdi3>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140f2:	6a 00                	push   0x0
c00140f4:	68 80 51 01 00       	push   0x15180
c00140f9:	55                   	push   ebp
c00140fa:	57                   	push   edi
c00140fb:	bf 10 0e 00 00       	mov    edi,0xe10
c0014100:	e8 f7 29 01 00       	call   c0026afc <__umoddi3>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	99                   	cdq    
c0014109:	f7 ff                	idiv   edi
c001410b:	bf 3c 00 00 00       	mov    edi,0x3c
c0014110:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014113:	89 d0                	mov    eax,edx
c0014115:	99                   	cdq    
c0014116:	f7 ff                	idiv   edi
c0014118:	85 db                	test   ebx,ebx
c001411a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001411d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014120:	79 11                	jns    c0014133 <secondsToDatetime(unsigned long long)+0x6f>
c0014122:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014126:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001412c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014131:	eb 07                	jmp    c001413a <secondsToDatetime(unsigned long long)+0x76>
c0014133:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014138:	89 d8                	mov    eax,ebx
c001413a:	bf b4 05 00 00       	mov    edi,0x5b4
c001413f:	99                   	cdq    
c0014140:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014145:	f7 f9                	idiv   ecx
c0014147:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001414c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014150:	31 d2                	xor    edx,edx
c0014152:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001415a:	01 c3                	add    ebx,eax
c001415c:	89 d8                	mov    eax,ebx
c001415e:	f7 f1                	div    ecx
c0014160:	31 d2                	xor    edx,edx
c0014162:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014165:	89 d8                	mov    eax,ebx
c0014167:	f7 f7                	div    edi
c0014169:	31 d2                	xor    edx,edx
c001416b:	29 c1                	sub    ecx,eax
c001416d:	89 d8                	mov    eax,ebx
c001416f:	f7 f5                	div    ebp
c0014171:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014176:	29 c1                	sub    ecx,eax
c0014178:	31 d2                	xor    edx,edx
c001417a:	89 c8                	mov    eax,ecx
c001417c:	f7 f5                	div    ebp
c001417e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014187:	31 d2                	xor    edx,edx
c0014189:	89 c8                	mov    eax,ecx
c001418b:	f7 f5                	div    ebp
c001418d:	31 d2                	xor    edx,edx
c001418f:	01 c3                	add    ebx,eax
c0014191:	89 c8                	mov    eax,ecx
c0014193:	f7 f7                	div    edi
c0014195:	bf 99 00 00 00       	mov    edi,0x99
c001419a:	29 c3                	sub    ebx,eax
c001419c:	31 d2                	xor    edx,edx
c001419e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141a6:	29 c3                	sub    ebx,eax
c00141a8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141ab:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141ae:	bb 05 00 00 00       	mov    ebx,0x5
c00141b3:	83 c1 02             	add    ecx,0x2
c00141b6:	89 c8                	mov    eax,ecx
c00141b8:	f7 f7                	div    edi
c00141ba:	31 d2                	xor    edx,edx
c00141bc:	89 c7                	mov    edi,eax
c00141be:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141c4:	83 c0 02             	add    eax,0x2
c00141c7:	f7 f3                	div    ebx
c00141c9:	89 eb                	mov    ebx,ebp
c00141cb:	29 c3                	sub    ebx,eax
c00141cd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141d3:	88 1e                	mov    BYTE PTR [esi],bl
c00141d5:	19 c0                	sbb    eax,eax
c00141d7:	31 d2                	xor    edx,edx
c00141d9:	83 e0 0c             	and    eax,0xc
c00141dc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141e0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141ec:	83 f9 01             	cmp    ecx,0x1
c00141ef:	0f 96 c2             	setbe  dl
c00141f2:	41                   	inc    ecx
c00141f3:	01 d0                	add    eax,edx
c00141f5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141f8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141fc:	83 c4 1c             	add    esp,0x1c
c00141ff:	89 f0                	mov    eax,esi
c0014201:	5b                   	pop    ebx
c0014202:	5e                   	pop    esi
c0014203:	5f                   	pop    edi
c0014204:	5d                   	pop    ebp
c0014205:	c2 04 00             	ret    0x4

c0014208 <Clock::timeInDatetimeLocal()>:
c0014208:	53                   	push   ebx
c0014209:	83 ec 14             	sub    esp,0x14
c001420c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014210:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014214:	e8 83 fc ff ff       	call   c0013e9c <Clock::timeInSecondsLocal()>
c0014219:	83 c4 0c             	add    esp,0xc
c001421c:	52                   	push   edx
c001421d:	50                   	push   eax
c001421e:	53                   	push   ebx
c001421f:	e8 a0 fe ff ff       	call   c00140c4 <secondsToDatetime(unsigned long long)>
c0014224:	89 d8                	mov    eax,ebx
c0014226:	83 c4 14             	add    esp,0x14
c0014229:	5b                   	pop    ebx
c001422a:	c2 04 00             	ret    0x4
c001422d:	90                   	nop

c001422e <Device::hibernate()>:
c001422e:	c3                   	ret    
c001422f:	90                   	nop

c0014230 <Device::wake()>:
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <Device::detect()>:
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <Device::disableLegacy()>:
c0014234:	c3                   	ret    
c0014235:	90                   	nop

c0014236 <Device::powerSaving(PowerSavingLevel)>:
c0014236:	c3                   	ret    
c0014237:	90                   	nop

c0014238 <DriverlessDevice::close(int, int, void*)>:
c0014238:	31 c0                	xor    eax,eax
c001423a:	c3                   	ret    
c001423b:	90                   	nop

c001423c <DriverlessDevice::detect()>:
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <DriverlessDevice::open(int, int, void*)>:
c001423e:	83 ec 18             	sub    esp,0x18
c0014241:	68 d0 ad 02 c0       	push   0xc002add0
c0014246:	e8 b0 63 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001424b:	83 c8 ff             	or     eax,0xffffffff
c001424e:	83 c4 1c             	add    esp,0x1c
c0014251:	c3                   	ret    

c0014252 <Device::~Device()>:
c0014252:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0014257:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001425b:	89 10                	mov    DWORD PTR [eax],edx
c001425d:	90                   	nop
c001425e:	c3                   	ret    
c001425f:	90                   	nop

c0014260 <Device::~Device()>:
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014267:	e8 e6 ff ff ff       	call   c0014252 <Device::~Device()>
c001426c:	83 c4 04             	add    esp,0x4
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	68 58 01 00 00       	push   0x158
c0014277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427b:	e8 f9 eb ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	83 c4 0c             	add    esp,0xc
c0014286:	c3                   	ret    
c0014287:	90                   	nop

c0014288 <Device::findAndLoadDriver()>:
c0014288:	c3                   	ret    
c0014289:	90                   	nop

c001428a <Device::preOpenPCI(PCIDeviceInfo)>:
c001428a:	57                   	push   edi
c001428b:	b9 09 00 00 00       	mov    ecx,0x9
c0014290:	56                   	push   esi
c0014291:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014295:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014299:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142a3:	81 c7 18 01 00 00    	add    edi,0x118
c00142a9:	fc                   	cld    
c00142aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142ac:	5e                   	pop    esi
c00142ad:	5f                   	pop    edi
c00142ae:	c3                   	ret    
c00142af:	90                   	nop

c00142b0 <Device::preOpenACPI(void*, char*, char*)>:
c00142b0:	56                   	push   esi
c00142b1:	53                   	push   ebx
c00142b2:	83 ec 08             	sub    esp,0x8
c00142b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142b9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142bd:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142cb:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142d1:	6a 1e                	push   0x1e
c00142d3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142dd:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142e3:	50                   	push   eax
c00142e4:	e8 5b c4 fe ff       	call   c0000744 <memcpy>
c00142e9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142ed:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142f1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142f9:	83 c4 14             	add    esp,0x14
c00142fc:	5b                   	pop    ebx
c00142fd:	5e                   	pop    esi
c00142fe:	e9 41 c4 fe ff       	jmp    c0000744 <memcpy>
c0014303:	90                   	nop

c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014308:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001430d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014314:	75 0b                	jne    c0014321 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014316:	8b 00                	mov    eax,DWORD PTR [eax]
c0014318:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001431c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001431f:	eb 1e                	jmp    c001433f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014321:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014326:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001432c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014332:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014334:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001433c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001433f:	ff e0                	jmp    eax
c0014341:	90                   	nop

c0014342 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014346:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001434b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014352:	75 0b                	jne    c001435f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014354:	8b 00                	mov    eax,DWORD PTR [eax]
c0014356:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001435a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001435d:	eb 1e                	jmp    c001437d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001435f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014364:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001436a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014370:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014372:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014376:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001437a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001437d:	ff e0                	jmp    eax
c001437f:	90                   	nop

c0014380 <Device::addChild(Device*)>:
c0014380:	53                   	push   ebx
c0014381:	83 ec 08             	sub    esp,0x8
c0014384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001438c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014392:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014398:	8b 13                	mov    edx,DWORD PTR [ebx]
c001439a:	85 d2                	test   edx,edx
c001439c:	74 04                	je     c00143a2 <Device::addChild(Device*)+0x22>
c001439e:	89 d3                	mov    ebx,edx
c00143a0:	eb f6                	jmp    c0014398 <Device::addChild(Device*)+0x18>
c00143a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143a5:	83 ec 0c             	sub    esp,0xc
c00143a8:	6a 08                	push   0x8
c00143aa:	e8 91 b4 ff ff       	call   c000f840 <malloc>
c00143af:	89 03                	mov    DWORD PTR [ebx],eax
c00143b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143be:	83 c4 18             	add    esp,0x18
c00143c1:	5b                   	pop    ebx
c00143c2:	c3                   	ret    
c00143c3:	90                   	nop

c00143c4 <Device::removeAllChildren()>:
c00143c4:	56                   	push   esi
c00143c5:	53                   	push   ebx
c00143c6:	52                   	push   edx
c00143c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143cb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d4:	74 17                	je     c00143ed <Device::removeAllChildren()+0x29>
c00143d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143d9:	85 c0                	test   eax,eax
c00143db:	74 0c                	je     c00143e9 <Device::removeAllChildren()+0x25>
c00143dd:	83 ec 0c             	sub    esp,0xc
c00143e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00143e2:	50                   	push   eax
c00143e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143e6:	83 c4 10             	add    esp,0x10
c00143e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143eb:	eb e4                	jmp    c00143d1 <Device::removeAllChildren()+0xd>
c00143ed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143f9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014406:	58                   	pop    eax
c0014407:	5b                   	pop    ebx
c0014408:	5e                   	pop    esi
c0014409:	c3                   	ret    

c001440a <Device::hibernateAll()>:
c001440a:	53                   	push   ebx
c001440b:	83 ec 14             	sub    esp,0x14
c001440e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014414:	53                   	push   ebx
c0014415:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014418:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014424:	74 0f                	je     c0014435 <Device::hibernateAll()+0x2b>
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001442c:	e8 d9 ff ff ff       	call   c001440a <Device::hibernateAll()>
c0014431:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014433:	eb e9                	jmp    c001441e <Device::hibernateAll()+0x14>
c0014435:	83 c4 08             	add    esp,0x8
c0014438:	5b                   	pop    ebx
c0014439:	c3                   	ret    

c001443a <Device::wakeAll()>:
c001443a:	53                   	push   ebx
c001443b:	83 ec 14             	sub    esp,0x14
c001443e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014442:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014444:	53                   	push   ebx
c0014445:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014448:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014454:	74 0f                	je     c0014465 <Device::wakeAll()+0x2b>
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001445c:	e8 d9 ff ff ff       	call   c001443a <Device::wakeAll()>
c0014461:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014463:	eb e9                	jmp    c001444e <Device::wakeAll()+0x14>
c0014465:	83 c4 08             	add    esp,0x8
c0014468:	5b                   	pop    ebx
c0014469:	c3                   	ret    

c001446a <Device::detectAll()>:
c001446a:	53                   	push   ebx
c001446b:	83 ec 14             	sub    esp,0x14
c001446e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014472:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014474:	53                   	push   ebx
c0014475:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014478:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014484:	74 0f                	je     c0014495 <Device::detectAll()+0x2b>
c0014486:	83 ec 0c             	sub    esp,0xc
c0014489:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448c:	e8 d9 ff ff ff       	call   c001446a <Device::detectAll()>
c0014491:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014493:	eb e9                	jmp    c001447e <Device::detectAll()+0x14>
c0014495:	83 c4 08             	add    esp,0x8
c0014498:	5b                   	pop    ebx
c0014499:	c3                   	ret    

c001449a <Device::disableLegacyAll()>:
c001449a:	53                   	push   ebx
c001449b:	83 ec 14             	sub    esp,0x14
c001449e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a4:	53                   	push   ebx
c00144a5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ae:	83 c4 10             	add    esp,0x10
c00144b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b4:	74 0f                	je     c00144c5 <Device::disableLegacyAll()+0x2b>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144bc:	e8 d9 ff ff ff       	call   c001449a <Device::disableLegacyAll()>
c00144c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c3:	eb e9                	jmp    c00144ae <Device::disableLegacyAll()+0x14>
c00144c5:	83 c4 08             	add    esp,0x8
c00144c8:	5b                   	pop    ebx
c00144c9:	c3                   	ret    

c00144ca <Device::loadDriversForAll()>:
c00144ca:	53                   	push   ebx
c00144cb:	83 ec 08             	sub    esp,0x8
c00144ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144d8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144da:	85 db                	test   ebx,ebx
c00144dc:	74 12                	je     c00144f0 <Device::loadDriversForAll()+0x26>
c00144de:	83 ec 0c             	sub    esp,0xc
c00144e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144e4:	e8 e1 ff ff ff       	call   c00144ca <Device::loadDriversForAll()>
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	89 d8                	mov    eax,ebx
c00144ee:	eb e8                	jmp    c00144d8 <Device::loadDriversForAll()+0xe>
c00144f0:	83 c4 08             	add    esp,0x8
c00144f3:	5b                   	pop    ebx
c00144f4:	c3                   	ret    
c00144f5:	90                   	nop

c00144f6 <Device::closeAll()>:
c00144f6:	53                   	push   ebx
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014500:	6a 00                	push   0x0
c0014502:	6a 00                	push   0x0
c0014504:	6a 00                	push   0x0
c0014506:	53                   	push   ebx
c0014507:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001450a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014516:	74 0f                	je     c0014527 <Device::closeAll()+0x31>
c0014518:	83 ec 0c             	sub    esp,0xc
c001451b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001451e:	e8 d3 ff ff ff       	call   c00144f6 <Device::closeAll()>
c0014523:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014525:	eb e9                	jmp    c0014510 <Device::closeAll()+0x1a>
c0014527:	83 c4 08             	add    esp,0x8
c001452a:	5b                   	pop    ebx
c001452b:	c3                   	ret    

c001452c <Device::powerSavingAll(PowerSavingLevel)>:
c001452c:	56                   	push   esi
c001452d:	53                   	push   ebx
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014535:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014539:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453b:	56                   	push   esi
c001453c:	53                   	push   ebx
c001453d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014540:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001454c:	74 0f                	je     c001455d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001454e:	52                   	push   edx
c001454f:	52                   	push   edx
c0014550:	56                   	push   esi
c0014551:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014554:	e8 d3 ff ff ff       	call   c001452c <Device::powerSavingAll(PowerSavingLevel)>
c0014559:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001455b:	eb e9                	jmp    c0014546 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001455d:	58                   	pop    eax
c001455e:	5b                   	pop    ebx
c001455f:	5e                   	pop    esi
c0014560:	c3                   	ret    
c0014561:	90                   	nop

c0014562 <Device::setName(char const*)>:
c0014562:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001456a:	e9 c5 c2 fe ff       	jmp    c0000834 <strcpy>
c001456f:	90                   	nop

c0014570 <Device::Device(char const*)>:
c0014570:	83 ec 1c             	sub    esp,0x1c
c0014573:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0014578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457c:	89 10                	mov    DWORD PTR [eax],edx
c001457e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014582:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001458c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014590:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001459a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145b6:	83 ec 08             	sub    esp,0x8
c00145b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145c1:	e8 9c ff ff ff       	call   c0014562 <Device::setName(char const*)>
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145d8:	e8 63 b2 ff ff       	call   c000f840 <malloc>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145f1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014601:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014611:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014627:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001462e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014632:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001463c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014640:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001464a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014666:	90                   	nop
c0014667:	83 c4 1c             	add    esp,0x1c
c001466a:	c3                   	ret    
c001466b:	90                   	nop

c001466c <Device::getName()>:
c001466c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014670:	05 d0 00 00 00       	add    eax,0xd0
c0014675:	c3                   	ret    

c0014676 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467d:	83 ec 08             	sub    esp,0x8
c0014680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014684:	50                   	push   eax
c0014685:	e8 e6 fe ff ff       	call   c0014570 <Device::Device(char const*)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014696:	89 10                	mov    DWORD PTR [eax],edx
c0014698:	90                   	nop
c0014699:	83 c4 0c             	add    esp,0xc
c001469c:	c3                   	ret    
c001469d:	90                   	nop

c001469e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001469e:	57                   	push   edi
c001469f:	56                   	push   esi
c00146a0:	53                   	push   ebx
c00146a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146ad:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146b3:	75 0c                	jne    c00146c1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146b5:	52                   	push   edx
c00146b6:	52                   	push   edx
c00146b7:	53                   	push   ebx
c00146b8:	56                   	push   esi
c00146b9:	e8 7c 42 01 00       	call   c002893a <LinkedList<Device>::addElement(Device*)>
c00146be:	83 c4 10             	add    esp,0x10
c00146c1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146ca:	74 12                	je     c00146de <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146cc:	50                   	push   eax
c00146cd:	57                   	push   edi
c00146ce:	56                   	push   esi
c00146cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146d2:	e8 c7 ff ff ff       	call   c001469e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146d9:	83 c4 10             	add    esp,0x10
c00146dc:	eb e9                	jmp    c00146c7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146de:	5b                   	pop    ebx
c00146df:	5e                   	pop    esi
c00146e0:	5f                   	pop    edi
c00146e1:	c3                   	ret    

c00146e2 <getDevicesOfType(DeviceType)>:
c00146e2:	53                   	push   ebx
c00146e3:	83 ec 14             	sub    esp,0x14
c00146e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146ea:	53                   	push   ebx
c00146eb:	e8 26 43 01 00       	call   c0028a16 <LinkedList<Device>::LinkedList()>
c00146f0:	83 c4 0c             	add    esp,0xc
c00146f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146f7:	53                   	push   ebx
c00146f8:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c00146fe:	e8 9b ff ff ff       	call   c001469e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014703:	89 d8                	mov    eax,ebx
c0014705:	83 c4 18             	add    esp,0x18
c0014708:	5b                   	pop    ebx
c0014709:	c2 04 00             	ret    0x4

c001470c <HardDiskController::HardDiskController(char const*)>:
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014713:	83 ec 08             	sub    esp,0x8
c0014716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471a:	50                   	push   eax
c001471b:	e8 50 fe ff ff       	call   c0014570 <Device::Device(char const*)>
c0014720:	83 c4 10             	add    esp,0x10
c0014723:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	89 10                	mov    DWORD PTR [eax],edx
c001472e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014732:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001473c:	90                   	nop
c001473d:	83 c4 0c             	add    esp,0xc
c0014740:	c3                   	ret    
c0014741:	90                   	nop

c0014742 <HardDiskController::~HardDiskController()>:
c0014742:	83 ec 0c             	sub    esp,0xc
c0014745:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c001474a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474e:	89 10                	mov    DWORD PTR [eax],edx
c0014750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	50                   	push   eax
c0014758:	e8 f5 fa ff ff       	call   c0014252 <Device::~Device()>
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	90                   	nop
c0014761:	83 c4 0c             	add    esp,0xc
c0014764:	c3                   	ret    
c0014765:	90                   	nop

c0014766 <HardDiskController::~HardDiskController()>:
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	83 ec 0c             	sub    esp,0xc
c001476c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014770:	e8 cd ff ff ff       	call   c0014742 <HardDiskController::~HardDiskController()>
c0014775:	83 c4 10             	add    esp,0x10
c0014778:	83 ec 08             	sub    esp,0x8
c001477b:	68 58 01 00 00       	push   0x158
c0014780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014784:	e8 f0 e6 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0014789:	83 c4 10             	add    esp,0x10
c001478c:	83 c4 0c             	add    esp,0xc
c001478f:	c3                   	ret    

c0014790 <PhysicalDisk::eject()>:
c0014790:	83 ec 18             	sub    esp,0x18
c0014793:	68 74 ae 02 c0       	push   0xc002ae74
c0014798:	e8 bc e7 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001479d:	83 c8 ff             	or     eax,0xffffffff
c00147a0:	83 c4 1c             	add    esp,0x1c
c00147a3:	c3                   	ret    

c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ab:	83 ec 08             	sub    esp,0x8
c00147ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b2:	50                   	push   eax
c00147b3:	e8 b8 fd ff ff       	call   c0014570 <Device::Device(char const*)>
c00147b8:	83 c4 10             	add    esp,0x10
c00147bb:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c00147c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c4:	89 10                	mov    DWORD PTR [eax],edx
c00147c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014806:	90                   	nop
c0014807:	83 c4 0c             	add    esp,0xc
c001480a:	c3                   	ret    
c001480b:	90                   	nop

c001480c <PhysicalDisk::startCache()>:
c001480c:	56                   	push   esi
c001480d:	53                   	push   ebx
c001480e:	83 ec 10             	sub    esp,0x10
c0014811:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014815:	6a 44                	push   0x44
c0014817:	e8 24 b0 ff ff       	call   c000f840 <malloc>
c001481c:	89 c6                	mov    esi,eax
c001481e:	58                   	pop    eax
c001481f:	5a                   	pop    edx
c0014820:	53                   	push   ebx
c0014821:	56                   	push   esi
c0014822:	e8 29 27 00 00       	call   c0016f50 <VCache::VCache(PhysicalDisk*)>
c0014827:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001482d:	83 c4 14             	add    esp,0x14
c0014830:	5b                   	pop    ebx
c0014831:	5e                   	pop    esi
c0014832:	c3                   	ret    
c0014833:	90                   	nop

c0014834 <PhysicalDisk::~PhysicalDisk()>:
c0014834:	83 ec 0c             	sub    esp,0xc
c0014837:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c001483c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014840:	89 10                	mov    DWORD PTR [eax],edx
c0014842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	50                   	push   eax
c001484a:	e8 03 fa ff ff       	call   c0014252 <Device::~Device()>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	90                   	nop
c0014853:	83 c4 0c             	add    esp,0xc
c0014856:	c3                   	ret    
c0014857:	90                   	nop

c0014858 <PhysicalDisk::~PhysicalDisk()>:
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	83 ec 0c             	sub    esp,0xc
c001485e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014862:	e8 cd ff ff ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	83 ec 08             	sub    esp,0x8
c001486d:	68 6c 01 00 00       	push   0x16c
c0014872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014876:	e8 fe e5 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c001487b:	83 c4 10             	add    esp,0x10
c001487e:	83 c4 0c             	add    esp,0xc
c0014881:	c3                   	ret    

c0014882 <FPU::FPU(char const*)>:
c0014882:	83 ec 0c             	sub    esp,0xc
c0014885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014889:	83 ec 08             	sub    esp,0x8
c001488c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014890:	50                   	push   eax
c0014891:	e8 da fc ff ff       	call   c0014570 <Device::Device(char const*)>
c0014896:	83 c4 10             	add    esp,0x10
c0014899:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c001489e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a2:	89 10                	mov    DWORD PTR [eax],edx
c00148a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a8:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148b2:	90                   	nop
c00148b3:	83 c4 0c             	add    esp,0xc
c00148b6:	c3                   	ret    
c00148b7:	90                   	nop

c00148b8 <FPU::~FPU()>:
c00148b8:	83 ec 0c             	sub    esp,0xc
c00148bb:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c00148c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c4:	89 10                	mov    DWORD PTR [eax],edx
c00148c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	50                   	push   eax
c00148ce:	e8 7f f9 ff ff       	call   c0014252 <Device::~Device()>
c00148d3:	83 c4 10             	add    esp,0x10
c00148d6:	90                   	nop
c00148d7:	83 c4 0c             	add    esp,0xc
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <FPU::~FPU()>:
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	83 ec 0c             	sub    esp,0xc
c00148e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148e6:	e8 cd ff ff ff       	call   c00148b8 <FPU::~FPU()>
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	83 ec 08             	sub    esp,0x8
c00148f1:	68 58 01 00 00       	push   0x158
c00148f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148fa:	e8 7a e5 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00148ff:	83 c4 10             	add    esp,0x10
c0014902:	83 c4 0c             	add    esp,0xc
c0014905:	c3                   	ret    

c0014906 <setupFPU()>:
c0014906:	53                   	push   ebx
c0014907:	83 ec 08             	sub    esp,0x8
c001490a:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0014910:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014917:	74 19                	je     c0014932 <setupFPU()+0x2c>
c0014919:	83 ec 0c             	sub    esp,0xc
c001491c:	68 58 01 00 00       	push   0x158
c0014921:	e8 1a af ff ff       	call   c000f840 <malloc>
c0014926:	89 c3                	mov    ebx,eax
c0014928:	89 04 24             	mov    DWORD PTR [esp],eax
c001492b:	e8 56 0c 01 00       	call   c0025586 <AVX::AVX()>
c0014930:	eb 5b                	jmp    c001498d <setupFPU()+0x87>
c0014932:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014938:	84 c0                	test   al,al
c001493a:	79 19                	jns    c0014955 <setupFPU()+0x4f>
c001493c:	83 ec 0c             	sub    esp,0xc
c001493f:	68 58 01 00 00       	push   0x158
c0014944:	e8 f7 ae ff ff       	call   c000f840 <malloc>
c0014949:	89 c3                	mov    ebx,eax
c001494b:	89 04 24             	mov    DWORD PTR [esp],eax
c001494e:	e8 59 0d 01 00       	call   c00256ac <SSE::SSE()>
c0014953:	eb 38                	jmp    c001498d <setupFPU()+0x87>
c0014955:	a8 20                	test   al,0x20
c0014957:	74 19                	je     c0014972 <setupFPU()+0x6c>
c0014959:	83 ec 0c             	sub    esp,0xc
c001495c:	68 58 01 00 00       	push   0x158
c0014961:	e8 da ae ff ff       	call   c000f840 <malloc>
c0014966:	89 c3                	mov    ebx,eax
c0014968:	89 04 24             	mov    DWORD PTR [esp],eax
c001496b:	e8 a6 0c 01 00       	call   c0025616 <MMX::MMX()>
c0014970:	eb 1b                	jmp    c001498d <setupFPU()+0x87>
c0014972:	a8 10                	test   al,0x10
c0014974:	74 1c                	je     c0014992 <setupFPU()+0x8c>
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	68 58 01 00 00       	push   0x158
c001497e:	e8 bd ae ff ff       	call   c000f840 <malloc>
c0014983:	89 c3                	mov    ebx,eax
c0014985:	89 04 24             	mov    DWORD PTR [esp],eax
c0014988:	e8 ad 0d 01 00       	call   c002573a <x87::x87()>
c001498d:	83 c4 10             	add    esp,0x10
c0014990:	eb 24                	jmp    c00149b6 <setupFPU()+0xb0>
c0014992:	83 e0 ef             	and    eax,0xffffffef
c0014995:	83 ec 0c             	sub    esp,0xc
c0014998:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001499e:	68 d4 ae 02 c0       	push   0xc002aed4
c00149a3:	e8 b1 e5 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00149a8:	0f 20 c0             	mov    eax,cr0
c00149ab:	83 c8 04             	or     eax,0x4
c00149ae:	0f 22 c0             	mov    cr0,eax
c00149b1:	31 db                	xor    ebx,ebx
c00149b3:	83 c4 10             	add    esp,0x10
c00149b6:	89 d8                	mov    eax,ebx
c00149b8:	83 c4 08             	add    esp,0x8
c00149bb:	5b                   	pop    ebx
c00149bc:	c3                   	ret    
c00149bd:	90                   	nop

c00149be <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149c6:	c1 e0 04             	shl    eax,0x4
c00149c9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149cd:	8d 50 10             	lea    edx,[eax+0x10]
c00149d0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149d6:	74 08                	je     c00149e0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149d8:	83 c0 04             	add    eax,0x4
c00149db:	39 d0                	cmp    eax,edx
c00149dd:	75 f1                	jne    c00149d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149df:	c3                   	ret    
c00149e0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149ea:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149f4:	eb e2                	jmp    c00149d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149f6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149f6:	57                   	push   edi
c00149f7:	31 c0                	xor    eax,eax
c00149f9:	56                   	push   esi
c00149fa:	53                   	push   ebx
c00149fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a07:	89 da                	mov    edx,ebx
c0014a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a0d:	c1 e2 04             	shl    edx,0x4
c0014a10:	01 ca                	add    edx,ecx
c0014a12:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a1a:	74 16                	je     c0014a32 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a1c:	40                   	inc    eax
c0014a1d:	83 f8 04             	cmp    eax,0x4
c0014a20:	75 f0                	jne    c0014a12 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a22:	c7 44 24 10 18 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af18
c0014a2a:	5b                   	pop    ebx
c0014a2b:	5e                   	pop    esi
c0014a2c:	5f                   	pop    edi
c0014a2d:	e9 c9 5b 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c0014a32:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a35:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a38:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a3e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a44:	5b                   	pop    ebx
c0014a45:	5e                   	pop    esi
c0014a46:	5f                   	pop    edi
c0014a47:	c3                   	ret    

c0014a48 <doubleFault(regs*, void*)>:
c0014a48:	55                   	push   ebp
c0014a49:	89 e5                	mov    ebp,esp
c0014a4b:	83 ec 08             	sub    esp,0x8
c0014a4e:	83 ec 0c             	sub    esp,0xc
c0014a51:	68 53 af 02 c0       	push   0xc002af53
c0014a56:	e8 a0 5b 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	90                   	nop
c0014a5f:	c9                   	leave  
c0014a60:	c3                   	ret    
c0014a61:	90                   	nop

c0014a62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a62:	56                   	push   esi
c0014a63:	53                   	push   ebx
c0014a64:	50                   	push   eax
c0014a65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a6d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a72:	75 35                	jne    c0014aa9 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a74:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a77:	31 d2                	xor    edx,edx
c0014a79:	89 c1                	mov    ecx,eax
c0014a7b:	c1 e1 04             	shl    ecx,0x4
c0014a7e:	01 f1                	add    ecx,esi
c0014a80:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a88:	74 3e                	je     c0014ac8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a8a:	42                   	inc    edx
c0014a8b:	83 fa 04             	cmp    edx,0x4
c0014a8e:	75 f0                	jne    c0014a80 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a90:	83 ec 0c             	sub    esp,0xc
c0014a93:	68 98 af 02 c0       	push   0xc002af98
c0014a98:	e8 5e 5b 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014aa5:	5a                   	pop    edx
c0014aa6:	5b                   	pop    ebx
c0014aa7:	5e                   	pop    esi
c0014aa8:	c3                   	ret    
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	56                   	push   esi
c0014aad:	e8 ba fb ff ff       	call   c001466c <Device::getName()>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ab8:	75 ba                	jne    c0014a74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aba:	83 fb 0f             	cmp    ebx,0xf
c0014abd:	7f 29                	jg     c0014ae8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014abf:	0f b6 9b 60 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27a0]
c0014ac6:	eb ac                	jmp    c0014a74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ac8:	8d 04 82             	lea    eax,[edx+eax*4]
c0014acb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014acf:	8d 04 86             	lea    eax,[esi+eax*4]
c0014ad2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ad8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014adc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ae2:	89 d8                	mov    eax,ebx
c0014ae4:	5a                   	pop    edx
c0014ae5:	5b                   	pop    ebx
c0014ae6:	5e                   	pop    esi
c0014ae7:	c3                   	ret    
c0014ae8:	83 ec 0c             	sub    esp,0xc
c0014aeb:	68 60 af 02 c0       	push   0xc002af60
c0014af0:	e8 06 5b 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014af5:	83 c4 10             	add    esp,0x10
c0014af8:	e9 77 ff ff ff       	jmp    c0014a74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014afd:	90                   	nop

c0014afe <InterruptController::clearAllHandlers(int, bool)>:
c0014afe:	56                   	push   esi
c0014aff:	53                   	push   ebx
c0014b00:	52                   	push   edx
c0014b01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b09:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b0e:	75 61                	jne    c0014b71 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b10:	8d 46 20             	lea    eax,[esi+0x20]
c0014b13:	c1 e6 04             	shl    esi,0x4
c0014b16:	c1 e0 04             	shl    eax,0x4
c0014b19:	01 de                	add    esi,ebx
c0014b1b:	01 d8                	add    eax,ebx
c0014b1d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b27:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b31:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b3b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b45:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b4f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b59:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b63:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b6d:	58                   	pop    eax
c0014b6e:	5b                   	pop    ebx
c0014b6f:	5e                   	pop    esi
c0014b70:	c3                   	ret    
c0014b71:	83 ec 0c             	sub    esp,0xc
c0014b74:	53                   	push   ebx
c0014b75:	e8 f2 fa ff ff       	call   c001466c <Device::getName()>
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b80:	75 8e                	jne    c0014b10 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b82:	83 fe 0f             	cmp    esi,0xf
c0014b85:	7f 09                	jg     c0014b90 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b87:	0f b6 b6 60 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27a0]
c0014b8e:	eb 80                	jmp    c0014b10 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	68 d4 af 02 c0       	push   0xc002afd4
c0014b98:	e8 5e 5a 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	e9 6b ff ff ff       	jmp    c0014b10 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ba5:	90                   	nop

c0014ba6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ba6:	56                   	push   esi
c0014ba7:	53                   	push   ebx
c0014ba8:	52                   	push   edx
c0014ba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bb1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bb6:	75 3a                	jne    c0014bf2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bbc:	8d 50 20             	lea    edx,[eax+0x20]
c0014bbf:	c1 e2 04             	shl    edx,0x4
c0014bc2:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bc5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bc9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bcf:	74 0b                	je     c0014bdc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bd1:	83 c0 04             	add    eax,0x4
c0014bd4:	39 d0                	cmp    eax,edx
c0014bd6:	75 f1                	jne    c0014bc9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bd8:	58                   	pop    eax
c0014bd9:	5b                   	pop    ebx
c0014bda:	5e                   	pop    esi
c0014bdb:	c3                   	ret    
c0014bdc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014be6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bf0:	eb df                	jmp    c0014bd1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bf2:	83 ec 0c             	sub    esp,0xc
c0014bf5:	56                   	push   esi
c0014bf6:	e8 71 fa ff ff       	call   c001466c <Device::getName()>
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c01:	75 b5                	jne    c0014bb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c03:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c08:	7f 11                	jg     c0014c1b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c0e:	0f b6 80 60 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27a0]
c0014c15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c19:	eb 9d                	jmp    c0014bb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c1b:	83 ec 0c             	sub    esp,0xc
c0014c1e:	68 d4 af 02 c0       	push   0xc002afd4
c0014c23:	e8 d3 59 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	eb 8b                	jmp    c0014bb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c2d <nmiHandler(regs*, void*)>:
c0014c2d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014c32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c36:	e9 51 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c3b <int_handler>:
c0014c3b:	55                   	push   ebp
c0014c3c:	57                   	push   edi
c0014c3d:	56                   	push   esi
c0014c3e:	53                   	push   ebx
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c46:	80 3d 64 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031164,0x0
c0014c4d:	74 0b                	je     c0014c5a <int_handler+0x1f>
c0014c4f:	fa                   	cli    
c0014c50:	f4                   	hlt    
c0014c51:	80 3d 64 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031164,0x0
c0014c58:	75 f5                	jne    c0014c4f <int_handler+0x14>
c0014c5a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014c5f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c68:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c6e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c71:	83 f8 17             	cmp    eax,0x17
c0014c74:	77 13                	ja     c0014c89 <int_handler+0x4e>
c0014c76:	83 ec 08             	sub    esp,0x8
c0014c79:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c7b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c7e:	0f b6 c0             	movzx  eax,al
c0014c81:	50                   	push   eax
c0014c82:	57                   	push   edi
c0014c83:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	83 c3 15             	add    ebx,0x15
c0014c8c:	c1 e3 04             	shl    ebx,0x4
c0014c8f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c93:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c9a:	31 db                	xor    ebx,ebx
c0014c9c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ca0:	85 c0                	test   eax,eax
c0014ca2:	74 13                	je     c0014cb7 <int_handler+0x7c>
c0014ca4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ca7:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014cab:	74 1c                	je     c0014cc9 <int_handler+0x8e>
c0014cad:	83 ec 08             	sub    esp,0x8
c0014cb0:	52                   	push   edx
c0014cb1:	56                   	push   esi
c0014cb2:	ff d0                	call   eax
c0014cb4:	83 c4 10             	add    esp,0x10
c0014cb7:	43                   	inc    ebx
c0014cb8:	83 fb 04             	cmp    ebx,0x4
c0014cbb:	75 df                	jne    c0014c9c <int_handler+0x61>
c0014cbd:	83 c4 0c             	add    esp,0xc
c0014cc0:	31 c0                	xor    eax,eax
c0014cc2:	5b                   	pop    ebx
c0014cc3:	31 d2                	xor    edx,edx
c0014cc5:	5e                   	pop    esi
c0014cc6:	5f                   	pop    edi
c0014cc7:	5d                   	pop    ebp
c0014cc8:	c3                   	ret    
c0014cc9:	83 ec 08             	sub    esp,0x8
c0014ccc:	52                   	push   edx
c0014ccd:	56                   	push   esi
c0014cce:	ff d0                	call   eax
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	83 c4 0c             	add    esp,0xc
c0014cd6:	5b                   	pop    ebx
c0014cd7:	5e                   	pop    esi
c0014cd8:	5f                   	pop    edi
c0014cd9:	5d                   	pop    ebp
c0014cda:	c3                   	ret    
c0014cdb:	90                   	nop

c0014cdc <InterruptController::InterruptController(char const*)>:
c0014cdc:	83 ec 1c             	sub    esp,0x1c
c0014cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce3:	83 ec 08             	sub    esp,0x8
c0014ce6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cea:	50                   	push   eax
c0014ceb:	e8 80 f8 ff ff       	call   c0014570 <Device::Device(char const*)>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c0014cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfc:	89 10                	mov    DWORD PTR [eax],edx
c0014cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d02:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d0c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d14:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d1c:	7f 5e                	jg     c0014d7c <InterruptController::InterruptController(char const*)+0xa0>
c0014d1e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d26:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d2b:	7f 49                	jg     c0014d76 <InterruptController::InterruptController(char const*)+0x9a>
c0014d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d35:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d40:	01 ca                	add    edx,ecx
c0014d42:	83 c2 54             	add    edx,0x54
c0014d45:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d55:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d60:	01 ca                	add    edx,ecx
c0014d62:	81 c2 54 04 00 00    	add    edx,0x454
c0014d68:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d70:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d74:	eb b0                	jmp    c0014d26 <InterruptController::InterruptController(char const*)+0x4a>
c0014d76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d7a:	eb 98                	jmp    c0014d14 <InterruptController::InterruptController(char const*)+0x38>
c0014d7c:	90                   	nop
c0014d7d:	83 c4 1c             	add    esp,0x1c
c0014d80:	c3                   	ret    
c0014d81:	90                   	nop

c0014d82 <InterruptController::~InterruptController()>:
c0014d82:	83 ec 0c             	sub    esp,0xc
c0014d85:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c0014d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d8e:	89 10                	mov    DWORD PTR [eax],edx
c0014d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d94:	83 ec 0c             	sub    esp,0xc
c0014d97:	50                   	push   eax
c0014d98:	e8 b5 f4 ff ff       	call   c0014252 <Device::~Device()>
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	90                   	nop
c0014da1:	83 c4 0c             	add    esp,0xc
c0014da4:	c3                   	ret    
c0014da5:	90                   	nop

c0014da6 <InterruptController::~InterruptController()>:
c0014da6:	83 ec 0c             	sub    esp,0xc
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db0:	e8 cd ff ff ff       	call   c0014d82 <InterruptController::~InterruptController()>
c0014db5:	83 c4 10             	add    esp,0x10
c0014db8:	83 ec 08             	sub    esp,0x8
c0014dbb:	68 58 21 00 00       	push   0x2158
c0014dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc4:	e8 b0 e0 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	83 c4 0c             	add    esp,0xc
c0014dcf:	c3                   	ret    

c0014dd0 <displayDebugInfo(regs*)>:
c0014dd0:	55                   	push   ebp
c0014dd1:	57                   	push   edi
c0014dd2:	56                   	push   esi
c0014dd3:	53                   	push   ebx
c0014dd4:	83 ec 24             	sub    esp,0x24
c0014dd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ddb:	0f 20 c2             	mov    edx,cr0
c0014dde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014de2:	0f 20 d7             	mov    edi,cr2
c0014de5:	0f 20 de             	mov    esi,cr3
c0014de8:	0f 20 e5             	mov    ebp,cr4
c0014deb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dee:	68 0e b0 02 c0       	push   0xc002b00e
c0014df3:	e8 61 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014df8:	59                   	pop    ecx
c0014df9:	58                   	pop    eax
c0014dfa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dfd:	68 19 b0 02 c0       	push   0xc002b019
c0014e02:	e8 52 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e07:	58                   	pop    eax
c0014e08:	5a                   	pop    edx
c0014e09:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e0c:	68 24 b0 02 c0       	push   0xc002b024
c0014e11:	e8 43 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e16:	59                   	pop    ecx
c0014e17:	58                   	pop    eax
c0014e18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e1b:	68 2f b0 02 c0       	push   0xc002b02f
c0014e20:	e8 34 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e25:	58                   	pop    eax
c0014e26:	5a                   	pop    edx
c0014e27:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e2a:	68 3a b0 02 c0       	push   0xc002b03a
c0014e2f:	e8 25 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e34:	59                   	pop    ecx
c0014e35:	58                   	pop    eax
c0014e36:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e39:	68 45 b0 02 c0       	push   0xc002b045
c0014e3e:	e8 16 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e43:	58                   	pop    eax
c0014e44:	5a                   	pop    edx
c0014e45:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e48:	68 50 b0 02 c0       	push   0xc002b050
c0014e4d:	e8 07 e1 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e52:	59                   	pop    ecx
c0014e53:	58                   	pop    eax
c0014e54:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e57:	68 5b b0 02 c0       	push   0xc002b05b
c0014e5c:	e8 f8 e0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e61:	58                   	pop    eax
c0014e62:	5a                   	pop    edx
c0014e63:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e66:	68 66 b0 02 c0       	push   0xc002b066
c0014e6b:	e8 e9 e0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e70:	59                   	pop    ecx
c0014e71:	58                   	pop    eax
c0014e72:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e75:	68 75 b0 02 c0       	push   0xc002b075
c0014e7a:	e8 da e0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e7f:	58                   	pop    eax
c0014e80:	5a                   	pop    edx
c0014e81:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e84:	68 80 b0 02 c0       	push   0xc002b080
c0014e89:	e8 cb e0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e8e:	59                   	pop    ecx
c0014e8f:	58                   	pop    eax
c0014e90:	57                   	push   edi
c0014e91:	68 8b b0 02 c0       	push   0xc002b08b
c0014e96:	e8 be e0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014e9b:	58                   	pop    eax
c0014e9c:	5a                   	pop    edx
c0014e9d:	56                   	push   esi
c0014e9e:	68 96 b0 02 c0       	push   0xc002b096
c0014ea3:	e8 b1 e0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0014ea8:	59                   	pop    ecx
c0014ea9:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014eae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb4:	e8 84 be ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0014eb9:	58                   	pop    eax
c0014eba:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ebd:	5a                   	pop    edx
c0014ebe:	c1 e0 05             	shl    eax,0x5
c0014ec1:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c0014ec6:	50                   	push   eax
c0014ec7:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed2:	e8 85 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ed7:	59                   	pop    ecx
c0014ed8:	58                   	pop    eax
c0014ed9:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014ede:	68 a1 b0 02 c0       	push   0xc002b0a1
c0014ee3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee9:	e8 6e c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014eee:	58                   	pop    eax
c0014eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef4:	5a                   	pop    edx
c0014ef5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ef8:	83 c0 0c             	add    eax,0xc
c0014efb:	50                   	push   eax
c0014efc:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f07:	e8 50 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f0c:	59                   	pop    ecx
c0014f0d:	58                   	pop    eax
c0014f0e:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f13:	68 aa b0 02 c0       	push   0xc002b0aa
c0014f18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1e:	e8 39 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f23:	58                   	pop    eax
c0014f24:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f29:	5a                   	pop    edx
c0014f2a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f33:	e8 4a c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f38:	59                   	pop    ecx
c0014f39:	58                   	pop    eax
c0014f3a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f3f:	68 b2 b0 02 c0       	push   0xc002b0b2
c0014f44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4a:	e8 0d c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f4f:	58                   	pop    eax
c0014f50:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f55:	5a                   	pop    edx
c0014f56:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5f:	e8 1e c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f64:	59                   	pop    ecx
c0014f65:	58                   	pop    eax
c0014f66:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f6b:	68 ba b0 02 c0       	push   0xc002b0ba
c0014f70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f76:	e8 e1 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f7b:	58                   	pop    eax
c0014f7c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f81:	5a                   	pop    edx
c0014f82:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8b:	e8 f2 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f90:	59                   	pop    ecx
c0014f91:	58                   	pop    eax
c0014f92:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f97:	68 c2 b0 02 c0       	push   0xc002b0c2
c0014f9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa2:	e8 b5 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fa7:	58                   	pop    eax
c0014fa8:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fad:	5a                   	pop    edx
c0014fae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb7:	e8 c6 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fbc:	59                   	pop    ecx
c0014fbd:	58                   	pop    eax
c0014fbe:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fc3:	68 ca b0 02 c0       	push   0xc002b0ca
c0014fc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fce:	e8 89 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fd3:	58                   	pop    eax
c0014fd4:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fd9:	5a                   	pop    edx
c0014fda:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe3:	e8 9a c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fe8:	59                   	pop    ecx
c0014fe9:	58                   	pop    eax
c0014fea:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fef:	68 d2 b0 02 c0       	push   0xc002b0d2
c0014ff4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffa:	e8 5d c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fff:	58                   	pop    eax
c0015000:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015005:	5a                   	pop    edx
c0015006:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015009:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500f:	e8 6e c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015014:	59                   	pop    ecx
c0015015:	58                   	pop    eax
c0015016:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001501b:	68 da b0 02 c0       	push   0xc002b0da
c0015020:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015026:	e8 31 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001502b:	58                   	pop    eax
c001502c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015031:	5a                   	pop    edx
c0015032:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015036:	52                   	push   edx
c0015037:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503d:	e8 40 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015042:	59                   	pop    ecx
c0015043:	58                   	pop    eax
c0015044:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015049:	68 e3 b0 02 c0       	push   0xc002b0e3
c001504e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015054:	e8 03 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015059:	58                   	pop    eax
c001505a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001505f:	5a                   	pop    edx
c0015060:	57                   	push   edi
c0015061:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015067:	e8 16 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001506c:	59                   	pop    ecx
c001506d:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015072:	5f                   	pop    edi
c0015073:	68 eb b0 02 c0       	push   0xc002b0eb
c0015078:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507e:	e8 d9 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015083:	58                   	pop    eax
c0015084:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015089:	5a                   	pop    edx
c001508a:	56                   	push   esi
c001508b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015091:	e8 ec c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015096:	59                   	pop    ecx
c0015097:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001509c:	5e                   	pop    esi
c001509d:	68 f3 b0 02 c0       	push   0xc002b0f3
c00150a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a8:	e8 af c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150ad:	5f                   	pop    edi
c00150ae:	58                   	pop    eax
c00150af:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150b4:	55                   	push   ebp
c00150b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bb:	e8 c2 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150c0:	58                   	pop    eax
c00150c1:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150c6:	5a                   	pop    edx
c00150c7:	68 fb b0 02 c0       	push   0xc002b0fb
c00150cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d2:	e8 85 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150d7:	0f 21 c0             	mov    eax,db0
c00150da:	59                   	pop    ecx
c00150db:	5e                   	pop    esi
c00150dc:	50                   	push   eax
c00150dd:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e8:	e8 95 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150ed:	5f                   	pop    edi
c00150ee:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150f3:	5d                   	pop    ebp
c00150f4:	68 04 b1 02 c0       	push   0xc002b104
c00150f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ff:	e8 58 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015104:	0f 21 c8             	mov    eax,db1
c0015107:	5a                   	pop    edx
c0015108:	59                   	pop    ecx
c0015109:	50                   	push   eax
c001510a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001510f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015115:	e8 68 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001511a:	5e                   	pop    esi
c001511b:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015120:	5f                   	pop    edi
c0015121:	68 0c b1 02 c0       	push   0xc002b10c
c0015126:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512c:	e8 2b c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015131:	0f 21 d0             	mov    eax,db2
c0015134:	5d                   	pop    ebp
c0015135:	5a                   	pop    edx
c0015136:	50                   	push   eax
c0015137:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001513c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015142:	e8 3b c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015147:	59                   	pop    ecx
c0015148:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001514d:	5e                   	pop    esi
c001514e:	68 14 b1 02 c0       	push   0xc002b114
c0015153:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015159:	e8 fe bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001515e:	0f 21 d8             	mov    eax,db3
c0015161:	5f                   	pop    edi
c0015162:	5d                   	pop    ebp
c0015163:	50                   	push   eax
c0015164:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015169:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516f:	e8 0e c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015174:	58                   	pop    eax
c0015175:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001517a:	5a                   	pop    edx
c001517b:	68 1c b1 02 c0       	push   0xc002b11c
c0015180:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015186:	e8 d1 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001518b:	0f 21 f0             	mov    eax,db6
c001518e:	59                   	pop    ecx
c001518f:	5e                   	pop    esi
c0015190:	50                   	push   eax
c0015191:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015196:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519c:	e8 e1 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00151a1:	5f                   	pop    edi
c00151a2:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151a7:	5d                   	pop    ebp
c00151a8:	68 24 b1 02 c0       	push   0xc002b124
c00151ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b3:	e8 a4 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151b8:	0f 21 f8             	mov    eax,db7
c00151bb:	5a                   	pop    edx
c00151bc:	59                   	pop    ecx
c00151bd:	50                   	push   eax
c00151be:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c9:	e8 b4 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00151ce:	5e                   	pop    esi
c00151cf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151d2:	e8 50 85 00 00       	call   c001d727 <Thr::getDriverNameFromAddress(unsigned long)>
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	85 c0                	test   eax,eax
c00151dc:	74 7d                	je     c001525b <displayDebugInfo(regs*)+0x48b>
c00151de:	89 c6                	mov    esi,eax
c00151e0:	50                   	push   eax
c00151e1:	50                   	push   eax
c00151e2:	56                   	push   esi
c00151e3:	68 2c b1 02 c0       	push   0xc002b12c
c00151e8:	e8 6c dd ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00151ed:	5a                   	pop    edx
c00151ee:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151f3:	59                   	pop    ecx
c00151f4:	68 3a b1 02 c0       	push   0xc002b13a
c00151f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ff:	e8 58 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015204:	5f                   	pop    edi
c0015205:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001520a:	5d                   	pop    ebp
c001520b:	56                   	push   esi
c001520c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015212:	e8 45 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015217:	58                   	pop    eax
c0015218:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001521d:	5a                   	pop    edx
c001521e:	68 46 b1 02 c0       	push   0xc002b146
c0015223:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015229:	e8 2e bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001522e:	59                   	pop    ecx
c001522f:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015234:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001523a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001523d:	e8 1c 85 00 00       	call   c001d75e <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015242:	5b                   	pop    ebx
c0015243:	5d                   	pop    ebp
c0015244:	50                   	push   eax
c0015245:	57                   	push   edi
c0015246:	e8 37 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001524b:	58                   	pop    eax
c001524c:	5a                   	pop    edx
c001524d:	56                   	push   esi
c001524e:	68 52 b1 02 c0       	push   0xc002b152
c0015253:	e8 01 dd ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0015258:	83 c4 10             	add    esp,0x10
c001525b:	fa                   	cli    
c001525c:	f4                   	hlt    
c001525d:	eb fe                	jmp    c001525d <displayDebugInfo(regs*)+0x48d>

c001525f <x87EmulHandler(regs*, void*)>:
c001525f:	53                   	push   ebx
c0015260:	83 ec 14             	sub    esp,0x14
c0015263:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015267:	53                   	push   ebx
c0015268:	e8 47 a8 00 00       	call   c001fab4 <Vm::x87Handler(regs*)>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	84 c0                	test   al,al
c0015272:	74 05                	je     c0015279 <x87EmulHandler(regs*, void*)+0x1a>
c0015274:	83 c4 08             	add    esp,0x8
c0015277:	5b                   	pop    ebx
c0015278:	c3                   	ret    
c0015279:	83 ec 0c             	sub    esp,0xc
c001527c:	68 62 b1 02 c0       	push   0xc002b162
c0015281:	e8 d3 dc ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0015286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015289:	e8 42 fb ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c001528e <gpFault(regs*, void*)>:
c001528e:	53                   	push   ebx
c001528f:	83 ec 14             	sub    esp,0x14
c0015292:	c7 05 b4 e7 02 c0 31 ee 01 c0 	mov    DWORD PTR ds:0xc002e7b4,0xc001ee31
c001529c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152a0:	53                   	push   ebx
c00152a1:	e8 8b 9b 00 00       	call   c001ee31 <Vm::faultHandler(regs*)>
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	84 c0                	test   al,al
c00152ab:	74 05                	je     c00152b2 <gpFault(regs*, void*)+0x24>
c00152ad:	83 c4 08             	add    esp,0x8
c00152b0:	5b                   	pop    ebx
c00152b1:	c3                   	ret    
c00152b2:	83 ec 0c             	sub    esp,0xc
c00152b5:	68 78 b1 02 c0       	push   0xc002b178
c00152ba:	e8 9a dc ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00152bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152c2:	e8 09 fb ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c00152c7 <pgFault(regs*, void*)>:
c00152c7:	83 ec 18             	sub    esp,0x18
c00152ca:	68 93 b1 02 c0       	push   0xc002b193
c00152cf:	e8 85 dc ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00152d4:	0f 20 d0             	mov    eax,cr2
c00152d7:	5a                   	pop    edx
c00152d8:	59                   	pop    ecx
c00152d9:	50                   	push   eax
c00152da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152e2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152e8:	e8 11 d8 ff ff       	call   c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>
c00152ed:	83 c4 10             	add    esp,0x10
c00152f0:	84 c0                	test   al,al
c00152f2:	74 04                	je     c00152f8 <pgFault(regs*, void*)+0x31>
c00152f4:	83 c4 0c             	add    esp,0xc
c00152f7:	c3                   	ret    
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ff:	e8 cc fa ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c0015304 <otherISRHandler(regs*, void*)>:
c0015304:	53                   	push   ebx
c0015305:	83 ec 0c             	sub    esp,0xc
c0015308:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001530c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001530f:	50                   	push   eax
c0015310:	50                   	push   eax
c0015311:	68 a0 b1 02 c0       	push   0xc002b1a0
c0015316:	e8 3e dc ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001531b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001531e:	e8 ad fa ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c0015323 <opcodeFault(regs*, void*)>:
c0015323:	55                   	push   ebp
c0015324:	89 e5                	mov    ebp,esp
c0015326:	56                   	push   esi
c0015327:	53                   	push   ebx
c0015328:	83 ec 40             	sub    esp,0x40
c001532b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0015330:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015336:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001533c:	84 c0                	test   al,al
c001533e:	74 24                	je     c0015364 <opcodeFault(regs*, void*)+0x41>
c0015340:	83 ec 0c             	sub    esp,0xc
c0015343:	68 c0 b1 02 c0       	push   0xc002b1c0
c0015348:	e8 0c dc ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001534d:	83 c4 10             	add    esp,0x10
c0015350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015353:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015356:	8d 50 19             	lea    edx,[eax+0x19]
c0015359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001535f:	e9 be 05 00 00       	jmp    c0015922 <opcodeFault(regs*, void*)+0x5ff>
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001536d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015371:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001537e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015381:	8a 00                	mov    al,BYTE PTR [eax]
c0015383:	3c f0                	cmp    al,0xf0
c0015385:	75 17                	jne    c001539e <opcodeFault(regs*, void*)+0x7b>
c0015387:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001538a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015390:	8d 50 01             	lea    edx,[eax+0x1]
c0015393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015396:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015399:	e9 da 00 00 00       	jmp    c0015478 <opcodeFault(regs*, void*)+0x155>
c001539e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a1:	8a 00                	mov    al,BYTE PTR [eax]
c00153a3:	3c f2                	cmp    al,0xf2
c00153a5:	74 09                	je     c00153b0 <opcodeFault(regs*, void*)+0x8d>
c00153a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153aa:	8a 00                	mov    al,BYTE PTR [eax]
c00153ac:	3c f3                	cmp    al,0xf3
c00153ae:	75 1b                	jne    c00153cb <opcodeFault(regs*, void*)+0xa8>
c00153b0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bd:	8d 50 01             	lea    edx,[eax+0x1]
c00153c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c6:	e9 ad 00 00 00       	jmp    c0015478 <opcodeFault(regs*, void*)+0x155>
c00153cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ce:	8a 00                	mov    al,BYTE PTR [eax]
c00153d0:	3c 66                	cmp    al,0x66
c00153d2:	75 1f                	jne    c00153f3 <opcodeFault(regs*, void*)+0xd0>
c00153d4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e5:	8d 50 01             	lea    edx,[eax+0x1]
c00153e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ee:	e9 85 00 00 00       	jmp    c0015478 <opcodeFault(regs*, void*)+0x155>
c00153f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f6:	8a 00                	mov    al,BYTE PTR [eax]
c00153f8:	3c 67                	cmp    al,0x67
c00153fa:	75 18                	jne    c0015414 <opcodeFault(regs*, void*)+0xf1>
c00153fc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015400:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015409:	8d 50 01             	lea    edx,[eax+0x1]
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015412:	eb 64                	jmp    c0015478 <opcodeFault(regs*, void*)+0x155>
c0015414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015417:	8a 00                	mov    al,BYTE PTR [eax]
c0015419:	3c 2e                	cmp    al,0x2e
c001541b:	74 09                	je     c0015426 <opcodeFault(regs*, void*)+0x103>
c001541d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015420:	8a 00                	mov    al,BYTE PTR [eax]
c0015422:	3c 3e                	cmp    al,0x3e
c0015424:	75 18                	jne    c001543e <opcodeFault(regs*, void*)+0x11b>
c0015426:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001542a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015430:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015433:	8d 50 01             	lea    edx,[eax+0x1]
c0015436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015439:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543c:	eb 3a                	jmp    c0015478 <opcodeFault(regs*, void*)+0x155>
c001543e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015441:	8a 00                	mov    al,BYTE PTR [eax]
c0015443:	3c 36                	cmp    al,0x36
c0015445:	74 1b                	je     c0015462 <opcodeFault(regs*, void*)+0x13f>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8a 00                	mov    al,BYTE PTR [eax]
c001544c:	3c 26                	cmp    al,0x26
c001544e:	74 12                	je     c0015462 <opcodeFault(regs*, void*)+0x13f>
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	3c 64                	cmp    al,0x64
c0015457:	74 09                	je     c0015462 <opcodeFault(regs*, void*)+0x13f>
c0015459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545c:	8a 00                	mov    al,BYTE PTR [eax]
c001545e:	3c 65                	cmp    al,0x65
c0015460:	75 16                	jne    c0015478 <opcodeFault(regs*, void*)+0x155>
c0015462:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015466:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546f:	8d 50 01             	lea    edx,[eax+0x1]
c0015472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015475:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	8a 00                	mov    al,BYTE PTR [eax]
c001547d:	3c 0f                	cmp    al,0xf
c001547f:	0f 85 ad 00 00 00    	jne    c0015532 <opcodeFault(regs*, void*)+0x20f>
c0015485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015488:	40                   	inc    eax
c0015489:	8a 00                	mov    al,BYTE PTR [eax]
c001548b:	3c c2                	cmp    al,0xc2
c001548d:	74 0e                	je     c001549d <opcodeFault(regs*, void*)+0x17a>
c001548f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015492:	40                   	inc    eax
c0015493:	8a 00                	mov    al,BYTE PTR [eax]
c0015495:	3c c3                	cmp    al,0xc3
c0015497:	0f 85 95 00 00 00    	jne    c0015532 <opcodeFault(regs*, void*)+0x20f>
c001549d:	83 ec 0c             	sub    esp,0xc
c00154a0:	68 e3 b1 02 c0       	push   0xc002b1e3
c00154a5:	e8 af da ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b3:	8d 50 01             	lea    edx,[eax+0x1]
c00154b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c2:	8a 00                	mov    al,BYTE PTR [eax]
c00154c4:	8d 50 fe             	lea    edx,[eax-0x2]
c00154c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ca:	88 10                	mov    BYTE PTR [eax],dl
c00154cc:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154cf:	50                   	push   eax
c00154d0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154d3:	50                   	push   eax
c00154d4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154d7:	50                   	push   eax
c00154d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154db:	e8 e2 47 00 00       	call   c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154ec:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154ef:	01 d0                	add    eax,edx
c00154f1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154fa:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154fd:	48                   	dec    eax
c00154fe:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015504:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015507:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550d:	83 ec 04             	sub    esp,0x4
c0015510:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015513:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015516:	50                   	push   eax
c0015517:	e8 98 ac fe ff       	call   c00001b4 <voodooXADD>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015522:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015525:	01 c2                	add    edx,eax
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001552d:	e9 f0 03 00 00       	jmp    c0015922 <opcodeFault(regs*, void*)+0x5ff>
c0015532:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015535:	8a 00                	mov    al,BYTE PTR [eax]
c0015537:	3c 0f                	cmp    al,0xf
c0015539:	0f 85 8b 01 00 00    	jne    c00156ca <opcodeFault(regs*, void*)+0x3a7>
c001553f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015542:	40                   	inc    eax
c0015543:	8a 00                	mov    al,BYTE PTR [eax]
c0015545:	3c c7                	cmp    al,0xc7
c0015547:	0f 86 7d 01 00 00    	jbe    c00156ca <opcodeFault(regs*, void*)+0x3a7>
c001554d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015550:	40                   	inc    eax
c0015551:	8a 00                	mov    al,BYTE PTR [eax]
c0015553:	3c cf                	cmp    al,0xcf
c0015555:	0f 87 6f 01 00 00    	ja     c00156ca <opcodeFault(regs*, void*)+0x3a7>
c001555b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555e:	40                   	inc    eax
c001555f:	8a 00                	mov    al,BYTE PTR [eax]
c0015561:	83 c0 38             	add    eax,0x38
c0015564:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015567:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001556b:	75 0b                	jne    c0015578 <opcodeFault(regs*, void*)+0x255>
c001556d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015570:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015573:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015576:	eb 75                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c0015578:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001557c:	75 0b                	jne    c0015589 <opcodeFault(regs*, void*)+0x266>
c001557e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015581:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015584:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015587:	eb 64                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c0015589:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001558d:	75 0b                	jne    c001559a <opcodeFault(regs*, void*)+0x277>
c001558f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015592:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015595:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015598:	eb 53                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c001559a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001559e:	75 0b                	jne    c00155ab <opcodeFault(regs*, void*)+0x288>
c00155a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a9:	eb 42                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c00155ab:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155af:	75 0b                	jne    c00155bc <opcodeFault(regs*, void*)+0x299>
c00155b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ba:	eb 31                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c00155bc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155c0:	75 0b                	jne    c00155cd <opcodeFault(regs*, void*)+0x2aa>
c00155c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155cb:	eb 20                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c00155cd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155d1:	75 0b                	jne    c00155de <opcodeFault(regs*, void*)+0x2bb>
c00155d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155dc:	eb 0f                	jmp    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c00155de:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155e2:	75 09                	jne    c00155ed <opcodeFault(regs*, void*)+0x2ca>
c00155e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ed:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155f1:	74 10                	je     c0015603 <opcodeFault(regs*, void*)+0x2e0>
c00155f3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155fa:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015601:	eb 2d                	jmp    c0015630 <opcodeFault(regs*, void*)+0x30d>
c0015603:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015606:	c1 e0 18             	shl    eax,0x18
c0015609:	89 c2                	mov    edx,eax
c001560b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001560e:	c1 e0 08             	shl    eax,0x8
c0015611:	25 00 00 ff 00       	and    eax,0xff0000
c0015616:	09 c2                	or     edx,eax
c0015618:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561b:	c1 e8 08             	shr    eax,0x8
c001561e:	25 00 ff 00 00       	and    eax,0xff00
c0015623:	09 c2                	or     edx,eax
c0015625:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015628:	c1 e8 18             	shr    eax,0x18
c001562b:	09 d0                	or     eax,edx
c001562d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015630:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015634:	75 0b                	jne    c0015641 <opcodeFault(regs*, void*)+0x31e>
c0015636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015639:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001563c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001563f:	eb 75                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c0015641:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015645:	75 0b                	jne    c0015652 <opcodeFault(regs*, void*)+0x32f>
c0015647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001564d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015650:	eb 64                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c0015652:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015656:	75 0b                	jne    c0015663 <opcodeFault(regs*, void*)+0x340>
c0015658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001565e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015661:	eb 53                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c0015663:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015667:	75 0b                	jne    c0015674 <opcodeFault(regs*, void*)+0x351>
c0015669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015672:	eb 42                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c0015674:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015678:	75 0b                	jne    c0015685 <opcodeFault(regs*, void*)+0x362>
c001567a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015680:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015683:	eb 31                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c0015685:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015689:	75 0b                	jne    c0015696 <opcodeFault(regs*, void*)+0x373>
c001568b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015691:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015694:	eb 20                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c0015696:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001569a:	75 0b                	jne    c00156a7 <opcodeFault(regs*, void*)+0x384>
c001569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156a5:	eb 0f                	jmp    c00156b6 <opcodeFault(regs*, void*)+0x393>
c00156a7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156ab:	75 09                	jne    c00156b6 <opcodeFault(regs*, void*)+0x393>
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156bc:	8d 50 02             	lea    edx,[eax+0x2]
c00156bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c5:	e9 58 02 00 00       	jmp    c0015922 <opcodeFault(regs*, void*)+0x5ff>
c00156ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156cd:	8a 00                	mov    al,BYTE PTR [eax]
c00156cf:	3c 0f                	cmp    al,0xf
c00156d1:	0f 85 76 01 00 00    	jne    c001584d <opcodeFault(regs*, void*)+0x52a>
c00156d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156da:	40                   	inc    eax
c00156db:	8a 00                	mov    al,BYTE PTR [eax]
c00156dd:	3c c7                	cmp    al,0xc7
c00156df:	0f 85 68 01 00 00    	jne    c001584d <opcodeFault(regs*, void*)+0x52a>
c00156e5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156ee:	8d 50 01             	lea    edx,[eax+0x1]
c00156f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156f7:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156fa:	50                   	push   eax
c00156fb:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156fe:	50                   	push   eax
c00156ff:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015702:	50                   	push   eax
c0015703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015706:	e8 b7 45 00 00       	call   c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001570b:	83 c4 10             	add    esp,0x10
c001570e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015711:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015714:	83 f0 01             	xor    eax,0x1
c0015717:	84 c0                	test   al,al
c0015719:	0f 84 2e 01 00 00    	je     c001584d <opcodeFault(regs*, void*)+0x52a>
c001571f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015722:	3c 01                	cmp    al,0x1
c0015724:	0f 85 23 01 00 00    	jne    c001584d <opcodeFault(regs*, void*)+0x52a>
c001572a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001572d:	83 f0 01             	xor    eax,0x1
c0015730:	84 c0                	test   al,al
c0015732:	0f 84 15 01 00 00    	je     c001584d <opcodeFault(regs*, void*)+0x52a>
c0015738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001573e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015741:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015748:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001574b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001574e:	89 c2                	mov    edx,eax
c0015750:	b8 00 00 00 00       	mov    eax,0x0
c0015755:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015758:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001575b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015761:	ba 00 00 00 00       	mov    edx,0x0
c0015766:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015769:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001576c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015772:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015775:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001577c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001577f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015782:	89 c2                	mov    edx,eax
c0015784:	b8 00 00 00 00       	mov    eax,0x0
c0015789:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001578c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001578f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015792:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015795:	ba 00 00 00 00       	mov    edx,0x0
c001579a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001579d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157a0:	e8 7b 86 00 00       	call   c001de20 <lockScheduler()>
c00157a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ad:	89 c1                	mov    ecx,eax
c00157af:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157b2:	89 cb                	mov    ebx,ecx
c00157b4:	89 d0                	mov    eax,edx
c00157b6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157b9:	89 c6                	mov    esi,eax
c00157bb:	89 f0                	mov    eax,esi
c00157bd:	09 d8                	or     eax,ebx
c00157bf:	85 c0                	test   eax,eax
c00157c1:	75 21                	jne    c00157e4 <opcodeFault(regs*, void*)+0x4c1>
c00157c3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157c6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157c9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157cc:	89 01                	mov    DWORD PTR [ecx],eax
c00157ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157d7:	83 c8 40             	or     eax,0x40
c00157da:	89 c2                	mov    edx,eax
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157e2:	eb 3e                	jmp    c0015822 <opcodeFault(regs*, void*)+0x4ff>
c00157e4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157e7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157ef:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157f2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157fb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157fe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015801:	89 d0                	mov    eax,edx
c0015803:	31 d2                	xor    edx,edx
c0015805:	89 c3                	mov    ebx,eax
c0015807:	89 d6                	mov    esi,edx
c0015809:	89 da                	mov    edx,ebx
c001580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015817:	83 e0 bf             	and    eax,0xffffffbf
c001581a:	89 c2                	mov    edx,eax
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015822:	e8 fb 85 00 00       	call   c001de22 <unlockScheduler()>
c0015827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001582d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015830:	01 c2                	add    edx,eax
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	68 f2 b1 02 c0       	push   0xc002b1f2
c0015840:	e8 14 d7 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	e9 d5 00 00 00       	jmp    c0015922 <opcodeFault(regs*, void*)+0x5ff>
c001584d:	83 ec 0c             	sub    esp,0xc
c0015850:	68 05 b2 02 c0       	push   0xc002b205
c0015855:	e8 ff d6 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015860:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015866:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015869:	c1 e0 04             	shl    eax,0x4
c001586c:	01 d0                	add    eax,edx
c001586e:	83 c0 03             	add    eax,0x3
c0015871:	8a 00                	mov    al,BYTE PTR [eax]
c0015873:	0f b6 d8             	movzx  ebx,al
c0015876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015879:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015882:	c1 e0 04             	shl    eax,0x4
c0015885:	01 d0                	add    eax,edx
c0015887:	83 c0 02             	add    eax,0x2
c001588a:	8a 00                	mov    al,BYTE PTR [eax]
c001588c:	0f b6 c8             	movzx  ecx,al
c001588f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015892:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015898:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589b:	c1 e0 04             	shl    eax,0x4
c001589e:	01 d0                	add    eax,edx
c00158a0:	40                   	inc    eax
c00158a1:	8a 00                	mov    al,BYTE PTR [eax]
c00158a3:	0f b6 d0             	movzx  edx,al
c00158a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b2:	c1 e0 04             	shl    eax,0x4
c00158b5:	01 f0                	add    eax,esi
c00158b7:	8a 00                	mov    al,BYTE PTR [eax]
c00158b9:	0f b6 c0             	movzx  eax,al
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	53                   	push   ebx
c00158c0:	51                   	push   ecx
c00158c1:	52                   	push   edx
c00158c2:	50                   	push   eax
c00158c3:	68 18 b2 02 c0       	push   0xc002b218
c00158c8:	e8 8c d6 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00158cd:	83 c4 20             	add    esp,0x20
c00158d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d6:	83 c0 03             	add    eax,0x3
c00158d9:	8a 00                	mov    al,BYTE PTR [eax]
c00158db:	0f b6 d8             	movzx  ebx,al
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e4:	83 c0 02             	add    eax,0x2
c00158e7:	8a 00                	mov    al,BYTE PTR [eax]
c00158e9:	0f b6 c8             	movzx  ecx,al
c00158ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f2:	40                   	inc    eax
c00158f3:	8a 00                	mov    al,BYTE PTR [eax]
c00158f5:	0f b6 d0             	movzx  edx,al
c00158f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015900:	0f b6 c0             	movzx  eax,al
c0015903:	83 ec 0c             	sub    esp,0xc
c0015906:	53                   	push   ebx
c0015907:	51                   	push   ecx
c0015908:	52                   	push   edx
c0015909:	50                   	push   eax
c001590a:	68 40 b2 02 c0       	push   0xc002b240
c001590f:	e8 45 d6 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0015914:	83 c4 20             	add    esp,0x20
c0015917:	83 ec 0c             	sub    esp,0xc
c001591a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001591d:	e8 ae f4 ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>
c0015922:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015925:	5b                   	pop    ebx
c0015926:	5e                   	pop    esi
c0015927:	5d                   	pop    ebp
c0015928:	c3                   	ret    

c0015929 <displayProgramFault(char const*)>:
c0015929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001592e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015931:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015937:	85 c0                	test   eax,eax
c0015939:	74 15                	je     c0015950 <displayProgramFault(char const*)+0x27>
c001593b:	83 ec 0c             	sub    esp,0xc
c001593e:	6a 04                	push   0x4
c0015940:	6a 0f                	push   0xf
c0015942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015946:	50                   	push   eax
c0015947:	e8 d2 b4 ff ff       	call   c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001594c:	83 c4 1c             	add    esp,0x1c
c001594f:	c3                   	ret    
c0015950:	c3                   	ret    

c0015951 <setupInterruptController()>:
c0015951:	55                   	push   ebp
c0015952:	89 e5                	mov    ebp,esp
c0015954:	53                   	push   ebx
c0015955:	83 ec 24             	sub    esp,0x24
c0015958:	b8 00 00 00 00       	mov    eax,0x0
c001595d:	85 c0                	test   eax,eax
c001595f:	0f 95 c0             	setne  al
c0015962:	84 c0                	test   al,al
c0015964:	74 5b                	je     c00159c1 <setupInterruptController()+0x70>
c0015966:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015973:	e8 c8 9e ff ff       	call   c000f840 <malloc>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	89 c3                	mov    ebx,eax
c001597d:	83 ec 0c             	sub    esp,0xc
c0015980:	53                   	push   ebx
c0015981:	e8 f2 ff 00 00       	call   c0025978 <APIC::APIC()>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001598c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001598f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015992:	8b 00                	mov    eax,DWORD PTR [eax]
c0015994:	83 c0 08             	add    eax,0x8
c0015997:	8b 00                	mov    eax,DWORD PTR [eax]
c0015999:	6a 00                	push   0x0
c001599b:	6a 00                	push   0x0
c001599d:	6a 00                	push   0x0
c001599f:	52                   	push   edx
c00159a0:	ff d0                	call   eax
c00159a2:	83 c4 10             	add    esp,0x10
c00159a5:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00159aa:	83 ec 08             	sub    esp,0x8
c00159ad:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159b0:	50                   	push   eax
c00159b1:	e8 ca e9 ff ff       	call   c0014380 <Device::addChild(Device*)>
c00159b6:	83 c4 10             	add    esp,0x10
c00159b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159bc:	e9 52 03 00 00       	jmp    c0015d13 <setupInterruptController()+0x3c2>
c00159c1:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00159c6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159cc:	83 e0 01             	and    eax,0x1
c00159cf:	84 c0                	test   al,al
c00159d1:	0f 95 c0             	setne  al
c00159d4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159d7:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159de:	83 ec 0c             	sub    esp,0xc
c00159e1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159e4:	e8 57 9e ff ff       	call   c000f840 <malloc>
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	89 c3                	mov    ebx,eax
c00159ee:	83 ec 0c             	sub    esp,0xc
c00159f1:	53                   	push   ebx
c00159f2:	e8 d9 04 01 00       	call   c0025ed0 <PIC::PIC()>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159fd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a05:	83 c0 08             	add    eax,0x8
c0015a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0a:	6a 00                	push   0x0
c0015a0c:	6a 00                	push   0x0
c0015a0e:	6a 00                	push   0x0
c0015a10:	52                   	push   edx
c0015a11:	ff d0                	call   eax
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a1a:	74 73                	je     c0015a8f <setupInterruptController()+0x13e>
c0015a1c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a24:	83 c0 0c             	add    eax,0xc
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	6a 00                	push   0x0
c0015a2b:	6a 00                	push   0x0
c0015a2d:	6a 00                	push   0x0
c0015a2f:	52                   	push   edx
c0015a30:	ff d0                	call   eax
c0015a32:	83 c4 10             	add    esp,0x10
c0015a35:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a39:	74 15                	je     c0015a50 <setupInterruptController()+0xff>
c0015a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	83 c0 04             	add    eax,0x4
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	83 ec 0c             	sub    esp,0xc
c0015a48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a4b:	ff d0                	call   eax
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a57:	83 ec 0c             	sub    esp,0xc
c0015a5a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a5d:	e8 de 9d ff ff       	call   c000f840 <malloc>
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	89 c3                	mov    ebx,eax
c0015a67:	83 ec 0c             	sub    esp,0xc
c0015a6a:	53                   	push   ebx
c0015a6b:	e8 08 ff 00 00       	call   c0025978 <APIC::APIC()>
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a76:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7e:	83 c0 08             	add    eax,0x8
c0015a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a83:	6a 00                	push   0x0
c0015a85:	6a 00                	push   0x0
c0015a87:	6a 00                	push   0x0
c0015a89:	52                   	push   edx
c0015a8a:	ff d0                	call   eax
c0015a8c:	83 c4 10             	add    esp,0x10
c0015a8f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0015a94:	83 ec 08             	sub    esp,0x8
c0015a97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9a:	50                   	push   eax
c0015a9b:	e8 e0 e8 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa8:	83 c0 24             	add    eax,0x24
c0015aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aad:	6a 00                	push   0x0
c0015aaf:	68 04 53 01 c0       	push   0xc0015304
c0015ab4:	6a 00                	push   0x0
c0015ab6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab9:	ff d0                	call   eax
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac3:	83 c0 24             	add    eax,0x24
c0015ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac8:	6a 00                	push   0x0
c0015aca:	68 04 53 01 c0       	push   0xc0015304
c0015acf:	6a 01                	push   0x1
c0015ad1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad4:	ff d0                	call   eax
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ade:	83 c0 24             	add    eax,0x24
c0015ae1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae3:	6a 00                	push   0x0
c0015ae5:	68 2d 4c 01 c0       	push   0xc0014c2d
c0015aea:	6a 02                	push   0x2
c0015aec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aef:	ff d0                	call   eax
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af9:	83 c0 24             	add    eax,0x24
c0015afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afe:	6a 00                	push   0x0
c0015b00:	68 04 53 01 c0       	push   0xc0015304
c0015b05:	6a 03                	push   0x3
c0015b07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0a:	ff d0                	call   eax
c0015b0c:	83 c4 10             	add    esp,0x10
c0015b0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b14:	83 c0 24             	add    eax,0x24
c0015b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b19:	6a 00                	push   0x0
c0015b1b:	68 04 53 01 c0       	push   0xc0015304
c0015b20:	6a 04                	push   0x4
c0015b22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b25:	ff d0                	call   eax
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2f:	83 c0 24             	add    eax,0x24
c0015b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b34:	6a 00                	push   0x0
c0015b36:	68 04 53 01 c0       	push   0xc0015304
c0015b3b:	6a 05                	push   0x5
c0015b3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b40:	ff d0                	call   eax
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4a:	83 c0 24             	add    eax,0x24
c0015b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4f:	6a 00                	push   0x0
c0015b51:	68 23 53 01 c0       	push   0xc0015323
c0015b56:	6a 06                	push   0x6
c0015b58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5b:	ff d0                	call   eax
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b65:	83 c0 24             	add    eax,0x24
c0015b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6a:	6a 00                	push   0x0
c0015b6c:	68 5f 52 01 c0       	push   0xc001525f
c0015b71:	6a 07                	push   0x7
c0015b73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b76:	ff d0                	call   eax
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b80:	83 c0 24             	add    eax,0x24
c0015b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b85:	6a 00                	push   0x0
c0015b87:	68 48 4a 01 c0       	push   0xc0014a48
c0015b8c:	6a 08                	push   0x8
c0015b8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b91:	ff d0                	call   eax
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9b:	83 c0 24             	add    eax,0x24
c0015b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba0:	6a 00                	push   0x0
c0015ba2:	68 04 53 01 c0       	push   0xc0015304
c0015ba7:	6a 09                	push   0x9
c0015ba9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bac:	ff d0                	call   eax
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb6:	83 c0 24             	add    eax,0x24
c0015bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbb:	6a 00                	push   0x0
c0015bbd:	68 04 53 01 c0       	push   0xc0015304
c0015bc2:	6a 0a                	push   0xa
c0015bc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc7:	ff d0                	call   eax
c0015bc9:	83 c4 10             	add    esp,0x10
c0015bcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd1:	83 c0 24             	add    eax,0x24
c0015bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd6:	6a 00                	push   0x0
c0015bd8:	68 04 53 01 c0       	push   0xc0015304
c0015bdd:	6a 0b                	push   0xb
c0015bdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be2:	ff d0                	call   eax
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bec:	83 c0 24             	add    eax,0x24
c0015bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf1:	6a 00                	push   0x0
c0015bf3:	68 04 53 01 c0       	push   0xc0015304
c0015bf8:	6a 0c                	push   0xc
c0015bfa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfd:	ff d0                	call   eax
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c07:	83 c0 24             	add    eax,0x24
c0015c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0c:	6a 00                	push   0x0
c0015c0e:	68 8e 52 01 c0       	push   0xc001528e
c0015c13:	6a 0d                	push   0xd
c0015c15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c18:	ff d0                	call   eax
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c22:	83 c0 24             	add    eax,0x24
c0015c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c27:	6a 00                	push   0x0
c0015c29:	68 c7 52 01 c0       	push   0xc00152c7
c0015c2e:	6a 0e                	push   0xe
c0015c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c33:	ff d0                	call   eax
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3d:	83 c0 24             	add    eax,0x24
c0015c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c42:	6a 00                	push   0x0
c0015c44:	68 04 53 01 c0       	push   0xc0015304
c0015c49:	6a 0f                	push   0xf
c0015c4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4e:	ff d0                	call   eax
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c58:	83 c0 24             	add    eax,0x24
c0015c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5d:	6a 00                	push   0x0
c0015c5f:	68 04 53 01 c0       	push   0xc0015304
c0015c64:	6a 10                	push   0x10
c0015c66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c69:	ff d0                	call   eax
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c73:	83 c0 24             	add    eax,0x24
c0015c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c78:	6a 00                	push   0x0
c0015c7a:	68 04 53 01 c0       	push   0xc0015304
c0015c7f:	6a 11                	push   0x11
c0015c81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c84:	ff d0                	call   eax
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8e:	83 c0 24             	add    eax,0x24
c0015c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c93:	6a 00                	push   0x0
c0015c95:	68 04 53 01 c0       	push   0xc0015304
c0015c9a:	6a 12                	push   0x12
c0015c9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9f:	ff d0                	call   eax
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca9:	83 c0 24             	add    eax,0x24
c0015cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cae:	6a 00                	push   0x0
c0015cb0:	68 04 53 01 c0       	push   0xc0015304
c0015cb5:	6a 13                	push   0x13
c0015cb7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cba:	ff d0                	call   eax
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc4:	83 c0 24             	add    eax,0x24
c0015cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc9:	6a 00                	push   0x0
c0015ccb:	68 04 53 01 c0       	push   0xc0015304
c0015cd0:	6a 14                	push   0x14
c0015cd2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd5:	ff d0                	call   eax
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdf:	83 c0 24             	add    eax,0x24
c0015ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce4:	6a 00                	push   0x0
c0015ce6:	68 04 53 01 c0       	push   0xc0015304
c0015ceb:	6a 1e                	push   0x1e
c0015ced:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf0:	ff d0                	call   eax
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfa:	83 c0 24             	add    eax,0x24
c0015cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cff:	6a 00                	push   0x0
c0015d01:	68 cf c7 01 c0       	push   0xc001c7cf
c0015d06:	6a 60                	push   0x60
c0015d08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0b:	ff d0                	call   eax
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d13:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d16:	c9                   	leave  
c0015d17:	c3                   	ret    

c0015d18 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d18:	55                   	push   ebp
c0015d19:	89 e5                	mov    ebp,esp
c0015d1b:	83 ec 08             	sub    esp,0x8
c0015d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d21:	83 ec 0c             	sub    esp,0xc
c0015d24:	50                   	push   eax
c0015d25:	e8 42 e9 ff ff       	call   c001466c <Device::getName()>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d2f:	3c 41                	cmp    al,0x41
c0015d31:	0f 94 c0             	sete   al
c0015d34:	84 c0                	test   al,al
c0015d36:	74 28                	je     c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d38:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d3c:	7f 12                	jg     c0015d50 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d41:	05 60 d8 02 c0       	add    eax,0xc002d860
c0015d46:	8a 00                	mov    al,BYTE PTR [eax]
c0015d48:	0f b6 c0             	movzx  eax,al
c0015d4b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d4e:	eb 10                	jmp    c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	68 60 af 02 c0       	push   0xc002af60
c0015d58:	e8 9e 48 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d63:	c9                   	leave  
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop

c0015d66 <startGUI(void*)>:
c0015d66:	55                   	push   ebp
c0015d67:	89 e5                	mov    ebp,esp
c0015d69:	53                   	push   ebx
c0015d6a:	83 ec 04             	sub    esp,0x4
c0015d6d:	e8 b0 80 00 00       	call   c001de22 <unlockScheduler()>
c0015d72:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015d78:	83 ec 08             	sub    esp,0x8
c0015d7b:	6a 01                	push   0x1
c0015d7d:	68 b0 b2 02 c0       	push   0xc002b2b0
c0015d82:	e8 f1 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	83 ec 08             	sub    esp,0x8
c0015d8d:	53                   	push   ebx
c0015d8e:	50                   	push   eax
c0015d8f:	e8 18 7c 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	6a 01                	push   0x1
c0015da2:	68 ca b2 02 c0       	push   0xc002b2ca
c0015da7:	e8 cc 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	83 ec 08             	sub    esp,0x8
c0015db2:	53                   	push   ebx
c0015db3:	50                   	push   eax
c0015db4:	e8 f3 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	90                   	nop
c0015dbd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dc0:	c9                   	leave  
c0015dc1:	c3                   	ret    

c0015dc2 <startGUIVESA(void*)>:
c0015dc2:	55                   	push   ebp
c0015dc3:	89 e5                	mov    ebp,esp
c0015dc5:	53                   	push   ebx
c0015dc6:	83 ec 04             	sub    esp,0x4
c0015dc9:	e8 54 80 00 00       	call   c001de22 <unlockScheduler()>
c0015dce:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015dd4:	83 ec 08             	sub    esp,0x8
c0015dd7:	6a 01                	push   0x1
c0015dd9:	68 e4 b2 02 c0       	push   0xc002b2e4
c0015dde:	e8 95 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	83 ec 08             	sub    esp,0x8
c0015de9:	53                   	push   ebx
c0015dea:	50                   	push   eax
c0015deb:	e8 bc 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	6a 01                	push   0x1
c0015dfe:	68 ca b2 02 c0       	push   0xc002b2ca
c0015e03:	e8 70 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	83 ec 08             	sub    esp,0x8
c0015e0e:	53                   	push   ebx
c0015e0f:	50                   	push   eax
c0015e10:	e8 97 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	90                   	nop
c0015e19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e1c:	c9                   	leave  
c0015e1d:	c3                   	ret    

c0015e1e <sendKeyToTerminal(unsigned char)>:
c0015e1e:	55                   	push   ebp
c0015e1f:	89 e5                	mov    ebp,esp
c0015e21:	83 ec 28             	sub    esp,0x28
c0015e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e2a:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0015e2f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	52                   	push   edx
c0015e37:	50                   	push   eax
c0015e38:	e8 1d b5 ff ff       	call   c001135a <VgaText::receiveKey(unsigned char)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e44:	75 41                	jne    c0015e87 <sendKeyToTerminal(unsigned char)+0x69>
c0015e46:	e8 fc 7f 00 00       	call   c001de47 <lockStuff()>
c0015e4b:	a1 c0 e7 02 c0       	mov    eax,ds:0xc002e7c0
c0015e50:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e53:	c7 05 c0 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7c0,0x0
c0015e5d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e61:	74 1f                	je     c0015e82 <sendKeyToTerminal(unsigned char)+0x64>
c0015e63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e6c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e6f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e72:	83 ec 0c             	sub    esp,0xc
c0015e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e78:	e8 bb 85 00 00       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	eb db                	jmp    c0015e5d <sendKeyToTerminal(unsigned char)+0x3f>
c0015e82:	e8 5a 83 00 00       	call   c001e1e1 <unlockStuff()>
c0015e87:	90                   	nop
c0015e88:	c9                   	leave  
c0015e89:	c3                   	ret    

c0015e8a <sendKeyboardToken(KeyboardToken)>:
c0015e8a:	55                   	push   ebp
c0015e8b:	89 e5                	mov    ebp,esp
c0015e8d:	83 ec 18             	sub    esp,0x18
c0015e90:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e96:	0f b7 c0             	movzx  eax,ax
c0015e99:	83 f2 01             	xor    edx,0x1
c0015e9c:	88 90 e0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1820],dl
c0015ea2:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0015ea7:	85 c0                	test   eax,eax
c0015ea9:	74 24                	je     c0015ecf <sendKeyboardToken(KeyboardToken)+0x45>
c0015eab:	8b 0d c8 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7c8
c0015eb1:	83 ec 04             	sub    esp,0x4
c0015eb4:	68 e0 e7 02 c0       	push   0xc002e7e0
c0015eb9:	83 ec 08             	sub    esp,0x8
c0015ebc:	89 e2                	mov    edx,esp
c0015ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec1:	89 02                	mov    DWORD PTR [edx],eax
c0015ec3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ec6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eca:	ff d1                	call   ecx
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed2:	66 3d 03 02          	cmp    ax,0x203
c0015ed6:	75 07                	jne    c0015edf <sendKeyboardToken(KeyboardToken)+0x55>
c0015ed8:	a0 e0 e8 02 c0       	mov    al,ds:0xc002e8e0
c0015edd:	84 c0                	test   al,al
c0015edf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ee3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ee6:	a0 e8 eb 02 c0       	mov    al,ds:0xc002ebe8
c0015eeb:	38 c2                	cmp    dl,al
c0015eed:	74 1c                	je     c0015f0b <sendKeyboardToken(KeyboardToken)+0x81>
c0015eef:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ef2:	a2 e8 eb 02 c0       	mov    ds:0xc002ebe8,al
c0015ef7:	a0 e8 eb 02 c0       	mov    al,ds:0xc002ebe8
c0015efc:	0f b6 c0             	movzx  eax,al
c0015eff:	83 ec 0c             	sub    esp,0xc
c0015f02:	50                   	push   eax
c0015f03:	e8 b2 a6 ff ff       	call   c00105ba <setTerminalScrollLock(bool)>
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f0e:	84 c0                	test   al,al
c0015f10:	0f 84 ae 00 00 00    	je     c0015fc4 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f19:	66 3d 10 03          	cmp    ax,0x310
c0015f1d:	75 06                	jne    c0015f25 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f1f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f28:	66 3d 11 03          	cmp    ax,0x311
c0015f2c:	75 06                	jne    c0015f34 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f2e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f37:	66 3d 12 03          	cmp    ax,0x312
c0015f3b:	75 06                	jne    c0015f43 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f3d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f46:	66 3d 13 03          	cmp    ax,0x313
c0015f4a:	75 06                	jne    c0015f52 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f4c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f55:	66 3d 14 03          	cmp    ax,0x314
c0015f59:	75 06                	jne    c0015f61 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f5b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f64:	66 3d 15 03          	cmp    ax,0x315
c0015f68:	75 06                	jne    c0015f70 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f6a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f73:	66 3d 16 03          	cmp    ax,0x316
c0015f77:	75 06                	jne    c0015f7f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f79:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f82:	66 3d 17 03          	cmp    ax,0x317
c0015f86:	75 06                	jne    c0015f8e <sendKeyboardToken(KeyboardToken)+0x104>
c0015f88:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	66 3d 18 03          	cmp    ax,0x318
c0015f95:	75 06                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x113>
c0015f97:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa0:	66 3d 19 03          	cmp    ax,0x319
c0015fa4:	75 06                	jne    c0015fac <sendKeyboardToken(KeyboardToken)+0x122>
c0015fa6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faf:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb3:	0f 85 c9 00 00 00    	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fb9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fbf:	e9 be 00 00 00       	jmp    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc7:	66 3d 10 03          	cmp    ax,0x310
c0015fcb:	75 0a                	jne    c0015fd7 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fcd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fd3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fda:	66 3d 11 03          	cmp    ax,0x311
c0015fde:	75 0a                	jne    c0015fea <sendKeyboardToken(KeyboardToken)+0x160>
c0015fe0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fe6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fed:	66 3d 12 03          	cmp    ax,0x312
c0015ff1:	75 0a                	jne    c0015ffd <sendKeyboardToken(KeyboardToken)+0x173>
c0015ff3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ff9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016000:	66 3d 13 03          	cmp    ax,0x313
c0016004:	75 0a                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x186>
c0016006:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001600c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 14 03          	cmp    ax,0x314
c0016017:	75 0a                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x199>
c0016019:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001601f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 15 03          	cmp    ax,0x315
c001602a:	75 0a                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001602c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 16 03          	cmp    ax,0x316
c001603d:	75 0a                	jne    c0016049 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001603f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016045:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604c:	66 3d 17 03          	cmp    ax,0x317
c0016050:	75 0a                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016052:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016058:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 18 03          	cmp    ax,0x318
c0016063:	75 0a                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016065:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001606b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 19 03          	cmp    ax,0x319
c0016076:	75 0a                	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016078:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001607e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 00 02          	cmp    ax,0x200
c0016089:	75 2c                	jne    c00160b7 <sendKeyboardToken(KeyboardToken)+0x22d>
c001608b:	a0 e0 eb 02 c0       	mov    al,ds:0xc002ebe0
c0016090:	83 f0 01             	xor    eax,0x1
c0016093:	84 c0                	test   al,al
c0016095:	74 20                	je     c00160b7 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016097:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001609c:	6a 01                	push   0x1
c001609e:	6a 00                	push   0x0
c00160a0:	68 66 5d 01 c0       	push   0xc0015d66
c00160a5:	50                   	push   eax
c00160a6:	e8 a7 7e 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c00160ab:	83 c4 10             	add    esp,0x10
c00160ae:	c6 05 e0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe0,0x1
c00160b5:	eb 33                	jmp    c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ba:	66 3d 01 02          	cmp    ax,0x201
c00160be:	75 2a                	jne    c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160c0:	a0 e0 eb 02 c0       	mov    al,ds:0xc002ebe0
c00160c5:	83 f0 01             	xor    eax,0x1
c00160c8:	84 c0                	test   al,al
c00160ca:	74 1e                	je     c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160cc:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00160d1:	6a 01                	push   0x1
c00160d3:	6a 00                	push   0x0
c00160d5:	68 c2 5d 01 c0       	push   0xc0015dc2
c00160da:	50                   	push   eax
c00160db:	e8 72 7e 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	c6 05 e0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe0,0x1
c00160ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ed:	66 3d 1d 03          	cmp    ax,0x31d
c00160f1:	75 06                	jne    c00160f9 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160f3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fc:	66 3d 1c 03          	cmp    ax,0x31c
c0016100:	75 06                	jne    c0016108 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016102:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610b:	66 3d 1b 03          	cmp    ax,0x31b
c001610f:	75 06                	jne    c0016117 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016111:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611a:	66 3d 1e 03          	cmp    ax,0x31e
c001611e:	75 06                	jne    c0016126 <sendKeyboardToken(KeyboardToken)+0x29c>
c0016120:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016129:	66 3d 1f 03          	cmp    ax,0x31f
c001612d:	75 06                	jne    c0016135 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001612f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016138:	66 3d 1a 03          	cmp    ax,0x31a
c001613c:	75 06                	jne    c0016144 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001613e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016144:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016148:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001614b:	83 f0 01             	xor    eax,0x1
c001614e:	84 c0                	test   al,al
c0016150:	74 77                	je     c00161c9 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016152:	a0 e1 e8 02 c0       	mov    al,ds:0xc002e8e1
c0016157:	84 c0                	test   al,al
c0016159:	74 41                	je     c001619c <sendKeyboardToken(KeyboardToken)+0x312>
c001615b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001615f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016163:	74 2b                	je     c0016190 <sendKeyboardToken(KeyboardToken)+0x306>
c0016165:	8b 15 e4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebe4
c001616b:	89 d0                	mov    eax,edx
c001616d:	c1 e0 02             	shl    eax,0x2
c0016170:	01 d0                	add    eax,edx
c0016172:	01 c0                	add    eax,eax
c0016174:	a3 e4 eb 02 c0       	mov    ds:0xc002ebe4,eax
c0016179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617c:	0f b7 c0             	movzx  eax,ax
c001617f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016182:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c0016187:	01 d0                	add    eax,edx
c0016189:	a3 e4 eb 02 c0       	mov    ds:0xc002ebe4,eax
c001618e:	eb 6d                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c0016190:	c7 05 e4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebe4,0x0
c001619a:	eb 61                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c001619c:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161a1:	85 c0                	test   eax,eax
c00161a3:	74 18                	je     c00161bd <sendKeyboardToken(KeyboardToken)+0x333>
c00161a5:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161aa:	0f b6 c0             	movzx  eax,al
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	50                   	push   eax
c00161b1:	e8 68 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00161b6:	83 c4 10             	add    esp,0x10
c00161b9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161bd:	c7 05 e4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebe4,0x0
c00161c7:	eb 34                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c00161c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161cc:	66 3d 01 01          	cmp    ax,0x101
c00161d0:	75 2b                	jne    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c00161d2:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161d7:	85 c0                	test   eax,eax
c00161d9:	74 18                	je     c00161f3 <sendKeyboardToken(KeyboardToken)+0x369>
c00161db:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161e0:	0f b6 c0             	movzx  eax,al
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	50                   	push   eax
c00161e7:	e8 32 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f3:	c7 05 e4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebe4,0x0
c00161fd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 4c                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016207:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001620a:	83 f0 01             	xor    eax,0x1
c001620d:	84 c0                	test   al,al
c001620f:	74 42                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016211:	a0 e0 e8 02 c0       	mov    al,ds:0xc002e8e0
c0016216:	83 f0 01             	xor    eax,0x1
c0016219:	84 c0                	test   al,al
c001621b:	74 36                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016220:	66 83 f8 1f          	cmp    ax,0x1f
c0016224:	76 09                	jbe    c001622f <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016229:	66 83 f8 7e          	cmp    ax,0x7e
c001622d:	76 12                	jbe    c0016241 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016232:	66 83 f8 0a          	cmp    ax,0xa
c0016236:	74 09                	je     c0016241 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623b:	66 83 f8 08          	cmp    ax,0x8
c001623f:	75 12                	jne    c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016244:	0f b6 c0             	movzx  eax,al
c0016247:	83 ec 0c             	sub    esp,0xc
c001624a:	50                   	push   eax
c001624b:	e8 ce fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 4f                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c001625d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016260:	83 f0 01             	xor    eax,0x1
c0016263:	84 c0                	test   al,al
c0016265:	74 45                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016267:	a0 e0 e8 02 c0       	mov    al,ds:0xc002e8e0
c001626c:	84 c0                	test   al,al
c001626e:	74 3c                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016273:	66 83 f8 3f          	cmp    ax,0x3f
c0016277:	76 33                	jbe    c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627c:	66 83 f8 7f          	cmp    ax,0x7f
c0016280:	77 2a                	ja     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016285:	88 c2                	mov    dl,al
c0016287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628a:	66 83 f8 5f          	cmp    ax,0x5f
c001628e:	76 04                	jbe    c0016294 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016290:	b0 20                	mov    al,0x20
c0016292:	eb 02                	jmp    c0016296 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016294:	b0 00                	mov    al,0x0
c0016296:	29 c2                	sub    edx,eax
c0016298:	88 d0                	mov    al,dl
c001629a:	83 e8 40             	sub    eax,0x40
c001629d:	0f b6 c0             	movzx  eax,al
c00162a0:	83 ec 0c             	sub    esp,0xc
c00162a3:	50                   	push   eax
c00162a4:	e8 75 fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162af:	66 3d 00 03          	cmp    ax,0x300
c00162b3:	75 0f                	jne    c00162c4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162b8:	83 f0 01             	xor    eax,0x1
c00162bb:	84 c0                	test   al,al
c00162bd:	74 05                	je     c00162c4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162bf:	e8 2b ab ff ff       	call   c0010def <doTerminalCycle()>
c00162c4:	90                   	nop
c00162c5:	c9                   	leave  
c00162c6:	c3                   	ret    

c00162c7 <clearInternalKeybuffer(VgaText*)>:
c00162c7:	55                   	push   ebp
c00162c8:	89 e5                	mov    ebp,esp
c00162ca:	83 ec 08             	sub    esp,0x8
c00162cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d0:	05 34 11 00 00       	add    eax,0x1134
c00162d5:	83 ec 0c             	sub    esp,0xc
c00162d8:	50                   	push   eax
c00162d9:	e8 b6 a4 fe ff       	call   c0000794 <strlen>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e4:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ea:	83 ec 04             	sub    esp,0x4
c00162ed:	50                   	push   eax
c00162ee:	6a 00                	push   0x0
c00162f0:	52                   	push   edx
c00162f1:	e8 82 a4 fe ff       	call   c0000778 <memset>
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	90                   	nop
c00162fa:	c9                   	leave  
c00162fb:	c3                   	ret    

c00162fc <readKeyboard(VgaText*, char*, unsigned long)>:
c00162fc:	55                   	push   ebp
c00162fd:	89 e5                	mov    ebp,esp
c00162ff:	83 ec 18             	sub    esp,0x18
c0016302:	fb                   	sti    
c0016303:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001630a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001630e:	0f 84 8a 00 00 00    	je     c001639e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016317:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001631d:	84 c0                	test   al,al
c001631f:	75 11                	jne    c0016332 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016321:	e8 fa 7a 00 00       	call   c001de20 <lockScheduler()>
c0016326:	e8 31 7e 00 00       	call   c001e15c <schedule()>
c001632b:	e8 f2 7a 00 00       	call   c001de22 <unlockScheduler()>
c0016330:	eb e2                	jmp    c0016314 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016332:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016335:	8d 50 01             	lea    edx,[eax+0x1]
c0016338:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001633b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001633e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016344:	88 10                	mov    BYTE PTR [eax],dl
c0016346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016349:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001634f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016355:	05 34 11 00 00       	add    eax,0x1134
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	50                   	push   eax
c001635e:	e8 31 a4 fe ff       	call   c0000794 <strlen>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016369:	81 c2 34 11 00 00    	add    edx,0x1134
c001636f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016372:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016375:	81 c2 34 11 00 00    	add    edx,0x1134
c001637b:	83 ec 04             	sub    esp,0x4
c001637e:	50                   	push   eax
c001637f:	51                   	push   ecx
c0016380:	52                   	push   edx
c0016381:	e8 f6 a2 fe ff       	call   c000067c <memmove>
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001638c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001638f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016393:	0f 85 71 ff ff ff    	jne    c001630a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016399:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001639c:	eb 03                	jmp    c00163a1 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001639e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163a1:	c9                   	leave  
c00163a2:	c3                   	ret    
c00163a3:	90                   	nop

c00163a4 <Keyboard::Keyboard(char const*)>:
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ab:	83 ec 08             	sub    esp,0x8
c00163ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b2:	50                   	push   eax
c00163b3:	e8 b8 e1 ff ff       	call   c0014570 <Device::Device(char const*)>
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	89 10                	mov    DWORD PTR [eax],edx
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163d4:	c6 05 c4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7c4,0x1
c00163db:	90                   	nop
c00163dc:	83 c4 0c             	add    esp,0xc
c00163df:	c3                   	ret    

c00163e0 <Keyboard::~Keyboard()>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	50                   	push   eax
c00163f6:	e8 57 de ff ff       	call   c0014252 <Device::~Device()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	90                   	nop
c00163ff:	83 c4 0c             	add    esp,0xc
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <Keyboard::~Keyboard()>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	e8 cd ff ff ff       	call   c00163e0 <Keyboard::~Keyboard()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	83 ec 08             	sub    esp,0x8
c0016419:	68 5c 01 00 00       	push   0x15c
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 52 ca ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <LogicalDisk::close(int, int, void*)>:
c001642e:	83 c8 ff             	or     eax,0xffffffff
c0016431:	c3                   	ret    

c0016432 <LogicalDisk::~LogicalDisk()>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	ba b8 b3 02 c0       	mov    edx,0xc002b3b8
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	89 10                	mov    DWORD PTR [eax],edx
c0016440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	50                   	push   eax
c0016448:	e8 05 de ff ff       	call   c0014252 <Device::~Device()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	90                   	nop
c0016451:	83 c4 0c             	add    esp,0xc
c0016454:	c3                   	ret    
c0016455:	90                   	nop

c0016456 <LogicalDisk::~LogicalDisk()>:
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 cd ff ff ff       	call   c0016432 <LogicalDisk::~LogicalDisk()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 ec 08             	sub    esp,0x8
c001646b:	68 74 01 00 00       	push   0x174
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 00 ca ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    

c0016480 <LogicalDisk::open(int, int, void*)>:
c0016480:	83 ec 18             	sub    esp,0x18
c0016483:	68 34 b3 02 c0       	push   0xc002b334
c0016488:	e8 6e 41 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001648d:	83 c8 ff             	or     eax,0xffffffff
c0016490:	83 c4 1c             	add    esp,0x1c
c0016493:	c3                   	ret    

c0016494 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016494:	53                   	push   ebx
c0016495:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001649d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164a1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164a7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164ad:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164b3:	77 10                	ja     c00164c5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164b5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164bb:	89 d3                	mov    ebx,edx
c00164bd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164c3:	72 05                	jb     c00164ca <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164c5:	83 c8 ff             	or     eax,0xffffffff
c00164c8:	89 c2                	mov    edx,eax
c00164ca:	5b                   	pop    ebx
c00164cb:	c3                   	ret    

c00164cc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164cc:	56                   	push   esi
c00164cd:	83 c8 ff             	or     eax,0xffffffff
c00164d0:	53                   	push   ebx
c00164d1:	89 c2                	mov    edx,eax
c00164d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164e5:	77 27                	ja     c001650e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164e7:	89 d8                	mov    eax,ebx
c00164e9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164ef:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164fa:	89 c2                	mov    edx,eax
c00164fc:	73 10                	jae    c001650e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164fe:	89 c8                	mov    eax,ecx
c0016500:	89 da                	mov    edx,ebx
c0016502:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016508:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001650e:	5b                   	pop    ebx
c001650f:	5e                   	pop    esi
c0016510:	c3                   	ret    
c0016511:	90                   	nop

c0016512 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016512:	83 ec 1c             	sub    esp,0x1c
c0016515:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001651d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016521:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016525:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016529:	89 04 24             	mov    DWORD PTR [esp],eax
c001652c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016530:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016538:	83 ec 08             	sub    esp,0x8
c001653b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001653f:	50                   	push   eax
c0016540:	e8 2b e0 ff ff       	call   c0014570 <Device::Device(char const*)>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	ba b8 b3 02 c0       	mov    edx,0xc002b3b8
c001654d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016551:	89 10                	mov    DWORD PTR [eax],edx
c0016553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016557:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001655e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016562:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016577:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001657b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001657f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016583:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016589:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001658f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016593:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001659a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165a0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165ae:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165c2:	90                   	nop
c00165c3:	83 c4 1c             	add    esp,0x1c
c00165c6:	c3                   	ret    
c00165c7:	90                   	nop

c00165c8 <LogicalDisk::assignDriveLetter()>:
c00165c8:	55                   	push   ebp
c00165c9:	57                   	push   edi
c00165ca:	56                   	push   esi
c00165cb:	53                   	push   ebx
c00165cc:	83 ec 14             	sub    esp,0x14
c00165cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165d3:	8b 3d 00 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec00
c00165d9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165df:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165e3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165e9:	8b 3d 04 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec04
c00165ef:	3c 01                	cmp    al,0x1
c00165f1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165f9:	19 c0                	sbb    eax,eax
c00165fb:	83 e0 02             	and    eax,0x2
c00165fe:	83 c0 41             	add    eax,0x41
c0016601:	0f be e8             	movsx  ebp,al
c0016604:	3c 43                	cmp    al,0x43
c0016606:	75 10                	jne    c0016618 <LogicalDisk::assignDriveLetter()+0x50>
c0016608:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001660f:	75 5d                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c0016611:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016616:	75 56                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c0016618:	8d 75 bf             	lea    esi,[ebp-0x41]
c001661b:	ba 01 00 00 00       	mov    edx,0x1
c0016620:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016624:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016628:	d3 e2                	shl    edx,cl
c001662a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001662e:	89 d7                	mov    edi,edx
c0016630:	89 d6                	mov    esi,edx
c0016632:	c1 ff 1f             	sar    edi,0x1f
c0016635:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016639:	21 f9                	and    ecx,edi
c001663b:	09 d1                	or     ecx,edx
c001663d:	75 2f                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c001663f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016647:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001664d:	09 f2                	or     edx,esi
c001664f:	89 15 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,edx
c0016655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016659:	09 fa                	or     edx,edi
c001665b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001665f:	89 15 04 ec 02 c0    	mov    DWORD PTR ds:0xc002ec04,edx
c0016665:	89 1c bd 20 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd13e0],ebx
c001666c:	eb 08                	jmp    c0016676 <LogicalDisk::assignDriveLetter()+0xae>
c001666e:	45                   	inc    ebp
c001666f:	40                   	inc    eax
c0016670:	3c 5b                	cmp    al,0x5b
c0016672:	75 90                	jne    c0016604 <LogicalDisk::assignDriveLetter()+0x3c>
c0016674:	31 c0                	xor    eax,eax
c0016676:	83 c4 14             	add    esp,0x14
c0016679:	5b                   	pop    ebx
c001667a:	5e                   	pop    esi
c001667b:	5f                   	pop    edi
c001667c:	5d                   	pop    ebp
c001667d:	c3                   	ret    

c001667e <LogicalDisk::mount()>:
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	51                   	push   ecx
c0016681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016685:	8b 1d 8c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e78c
c001668b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016695:	85 db                	test   ebx,ebx
c0016697:	74 50                	je     c00166e9 <LogicalDisk::mount()+0x6b>
c0016699:	e8 6d 77 00 00       	call   c001de0b <getIRQNestingLevel()>
c001669e:	52                   	push   edx
c001669f:	52                   	push   edx
c00166a0:	50                   	push   eax
c00166a1:	68 58 b3 02 c0       	push   0xc002b358
c00166a6:	e8 ae c8 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00166ab:	83 c4 0c             	add    esp,0xc
c00166ae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166b5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166b7:	83 e8 41             	sub    eax,0x41
c00166ba:	50                   	push   eax
c00166bb:	56                   	push   esi
c00166bc:	53                   	push   ebx
c00166bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166c0:	83 c4 10             	add    esp,0x10
c00166c3:	84 c0                	test   al,al
c00166c5:	74 08                	je     c00166cf <LogicalDisk::mount()+0x51>
c00166c7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166cd:	eb 1c                	jmp    c00166eb <LogicalDisk::mount()+0x6d>
c00166cf:	e8 37 77 00 00       	call   c001de0b <getIRQNestingLevel()>
c00166d4:	51                   	push   ecx
c00166d5:	51                   	push   ecx
c00166d6:	50                   	push   eax
c00166d7:	68 73 b3 02 c0       	push   0xc002b373
c00166dc:	e8 78 c8 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00166e1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166e4:	83 c4 10             	add    esp,0x10
c00166e7:	eb ac                	jmp    c0016695 <LogicalDisk::mount()+0x17>
c00166e9:	31 c0                	xor    eax,eax
c00166eb:	5a                   	pop    edx
c00166ec:	5b                   	pop    ebx
c00166ed:	5e                   	pop    esi
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop

c00166f0 <LogicalDisk::unmount()>:
c00166f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166fe:	c3                   	ret    
c00166ff:	90                   	nop

c0016700 <LogicalDisk::eject()>:
c0016700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016704:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001670a:	8b 10                	mov    edx,DWORD PTR [eax]
c001670c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016710:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016713:	90                   	nop

c0016714 <LogicalDisk::unassignDriveLetter()>:
c0016714:	57                   	push   edi
c0016715:	56                   	push   esi
c0016716:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001671a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016721:	84 c9                	test   cl,cl
c0016723:	75 0f                	jne    c0016734 <LogicalDisk::unassignDriveLetter()+0x20>
c0016725:	c7 44 24 0c 8e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b38e
c001672d:	5e                   	pop    esi
c001672e:	5f                   	pop    edi
c001672f:	e9 c7 3e 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c0016734:	83 e9 41             	sub    ecx,0x41
c0016737:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001673e:	b8 01 00 00 00       	mov    eax,0x1
c0016743:	c7 04 8d 20 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd13e0],0x0
c001674e:	d3 e0                	shl    eax,cl
c0016750:	89 c7                	mov    edi,eax
c0016752:	f7 d0                	not    eax
c0016754:	c1 ff 1f             	sar    edi,0x1f
c0016757:	21 05 00 ec 02 c0    	and    DWORD PTR ds:0xc002ec00,eax
c001675d:	89 fe                	mov    esi,edi
c001675f:	f7 d6                	not    esi
c0016761:	21 35 04 ec 02 c0    	and    DWORD PTR ds:0xc002ec04,esi
c0016767:	5e                   	pop    esi
c0016768:	5f                   	pop    edi
c0016769:	c3                   	ret    

c001676a <LogicalDisk::read(unsigned long long, int, void*)>:
c001676a:	57                   	push   edi
c001676b:	56                   	push   esi
c001676c:	53                   	push   ebx
c001676d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016771:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016775:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001677d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016783:	77 41                	ja     c00167c6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016785:	99                   	cdq    
c0016786:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001678c:	01 c8                	add    eax,ecx
c001678e:	11 da                	adc    edx,ebx
c0016790:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016796:	19 d7                	sbb    edi,edx
c0016798:	72 33                	jb     c00167cd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001679a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167a0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167aa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167ae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167be:	5b                   	pop    ebx
c00167bf:	5e                   	pop    esi
c00167c0:	5f                   	pop    edi
c00167c1:	e9 b0 0a 00 00       	jmp    c0017276 <VCache::read(unsigned long long, int, void*)>
c00167c6:	b8 05 00 00 00       	mov    eax,0x5
c00167cb:	eb 05                	jmp    c00167d2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167cd:	b8 07 00 00 00       	mov    eax,0x7
c00167d2:	5b                   	pop    ebx
c00167d3:	5e                   	pop    esi
c00167d4:	5f                   	pop    edi
c00167d5:	c3                   	ret    

c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167d6:	57                   	push   edi
c00167d7:	56                   	push   esi
c00167d8:	53                   	push   ebx
c00167d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167ef:	77 41                	ja     c0016832 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167f1:	99                   	cdq    
c00167f2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f8:	01 c8                	add    eax,ecx
c00167fa:	11 da                	adc    edx,ebx
c00167fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016802:	19 d7                	sbb    edi,edx
c0016804:	72 33                	jb     c0016839 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016806:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001680c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016816:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001681a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016820:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001682a:	5b                   	pop    ebx
c001682b:	5e                   	pop    esi
c001682c:	5f                   	pop    edi
c001682d:	e9 4e 09 00 00       	jmp    c0017180 <VCache::write(unsigned long long, int, void*)>
c0016832:	b8 05 00 00 00       	mov    eax,0x5
c0016837:	eb 05                	jmp    c001683e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016839:	b8 07 00 00 00       	mov    eax,0x7
c001683e:	5b                   	pop    ebx
c001683f:	5e                   	pop    esi
c0016840:	5f                   	pop    edi
c0016841:	c3                   	ret    

c0016842 <Mouse::Mouse(char const*)>:
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016849:	83 ec 08             	sub    esp,0x8
c001684c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016850:	50                   	push   eax
c0016851:	e8 1a dd ff ff       	call   c0014570 <Device::Device(char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c001685e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016862:	89 10                	mov    DWORD PTR [eax],edx
c0016864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016868:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016872:	90                   	nop
c0016873:	83 c4 0c             	add    esp,0xc
c0016876:	c3                   	ret    
c0016877:	90                   	nop

c0016878 <Mouse::~Mouse()>:
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c0016880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016884:	89 10                	mov    DWORD PTR [eax],edx
c0016886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	50                   	push   eax
c001688e:	e8 bf d9 ff ff       	call   c0014252 <Device::~Device()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	90                   	nop
c0016897:	83 c4 0c             	add    esp,0xc
c001689a:	c3                   	ret    
c001689b:	90                   	nop

c001689c <Mouse::~Mouse()>:
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	e8 cd ff ff ff       	call   c0016878 <Mouse::~Mouse()>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 ec 08             	sub    esp,0x8
c00168b1:	68 58 01 00 00       	push   0x158
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	e8 ba c5 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 c4 0c             	add    esp,0xc
c00168c5:	c3                   	ret    

c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168c6:	55                   	push   ebp
c00168c7:	57                   	push   edi
c00168c8:	56                   	push   esi
c00168c9:	53                   	push   ebx
c00168ca:	81 ec 28 01 00 00    	sub    esp,0x128
c00168d0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168d7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168de:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168e5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168f4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168fb:	e8 6c dd ff ff       	call   c001466c <Device::getName()>
c0016900:	5a                   	pop    edx
c0016901:	59                   	pop    ecx
c0016902:	50                   	push   eax
c0016903:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016907:	55                   	push   ebp
c0016908:	e8 27 9f fe ff       	call   c0000834 <strcpy>
c001690d:	5b                   	pop    ebx
c001690e:	58                   	pop    eax
c001690f:	68 08 b4 02 c0       	push   0xc002b408
c0016914:	55                   	push   ebp
c0016915:	e8 5a a0 fe ff       	call   c0000974 <strcat>
c001691a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016921:	e8 1a 8f ff ff       	call   c000f840 <malloc>
c0016926:	83 c4 0c             	add    esp,0xc
c0016929:	89 c3                	mov    ebx,eax
c001692b:	57                   	push   edi
c001692c:	56                   	push   esi
c001692d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016935:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001693c:	55                   	push   ebp
c001693d:	50                   	push   eax
c001693e:	e8 cf fb ff ff       	call   c0016512 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016943:	83 c4 14             	add    esp,0x14
c0016946:	53                   	push   ebx
c0016947:	e8 7c fc ff ff       	call   c00165c8 <LogicalDisk::assignDriveLetter()>
c001694c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001694f:	89 c6                	mov    esi,eax
c0016951:	e8 28 fd ff ff       	call   c001667e <LogicalDisk::mount()>
c0016956:	58                   	pop    eax
c0016957:	5a                   	pop    edx
c0016958:	53                   	push   ebx
c0016959:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016960:	e8 1b da ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016965:	59                   	pop    ecx
c0016966:	89 f0                	mov    eax,esi
c0016968:	5b                   	pop    ebx
c0016969:	0f be f0             	movsx  esi,al
c001696c:	56                   	push   esi
c001696d:	68 13 b4 02 c0       	push   0xc002b413
c0016972:	e8 e2 c5 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0016977:	81 c4 2c 01 00 00    	add    esp,0x12c
c001697d:	5b                   	pop    ebx
c001697e:	5e                   	pop    esi
c001697f:	5f                   	pop    edi
c0016980:	5d                   	pop    ebp
c0016981:	c3                   	ret    

c0016982 <createPartitionsForDisk(PhysicalDisk*)>:
c0016982:	55                   	push   ebp
c0016983:	57                   	push   edi
c0016984:	56                   	push   esi
c0016985:	53                   	push   ebx
c0016986:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001698c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016993:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016999:	3d 00 02 00 00       	cmp    eax,0x200
c001699e:	74 27                	je     c00169c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169ac:	83 ec 10             	sub    esp,0x10
c00169af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169b3:	99                   	cdq    
c00169b4:	c1 e6 0a             	shl    esi,0xa
c00169b7:	52                   	push   edx
c00169b8:	89 fd                	mov    ebp,edi
c00169ba:	50                   	push   eax
c00169bb:	55                   	push   ebp
c00169bc:	56                   	push   esi
c00169bd:	e8 3a 00 01 00       	call   c00269fc <__udivdi3>
c00169c2:	e9 b1 00 00 00       	jmp    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169c7:	83 ec 0c             	sub    esp,0xc
c00169ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169d0:	56                   	push   esi
c00169d1:	6a 01                	push   0x1
c00169d3:	6a 00                	push   0x0
c00169d5:	6a 00                	push   0x0
c00169d7:	53                   	push   ebx
c00169d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169db:	83 c4 20             	add    esp,0x20
c00169de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169e6:	75 0a                	jne    c00169f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169f0:	74 2c                	je     c0016a1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a04:	83 ec 10             	sub    esp,0x10
c0016a07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a0b:	89 f7                	mov    edi,esi
c0016a0d:	c1 e0 0a             	shl    eax,0xa
c0016a10:	c1 ff 1f             	sar    edi,0x1f
c0016a13:	57                   	push   edi
c0016a14:	56                   	push   esi
c0016a15:	52                   	push   edx
c0016a16:	50                   	push   eax
c0016a17:	e8 e0 ff 00 00       	call   c00269fc <__udivdi3>
c0016a1c:	eb 5a                	jmp    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a25:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a2c:	83 e1 7f             	and    ecx,0x7f
c0016a2f:	83 e0 7f             	and    eax,0x7f
c0016a32:	01 c1                	add    ecx,eax
c0016a34:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a3b:	83 e0 7f             	and    eax,0x7f
c0016a3e:	01 c1                	add    ecx,eax
c0016a40:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a47:	83 e0 7f             	and    eax,0x7f
c0016a4a:	00 c1                	add    cl,al
c0016a4c:	74 41                	je     c0016a8f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a4e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a60:	83 ec 10             	sub    esp,0x10
c0016a63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a67:	89 f7                	mov    edi,esi
c0016a69:	c1 e0 0a             	shl    eax,0xa
c0016a6c:	c1 ff 1f             	sar    edi,0x1f
c0016a6f:	57                   	push   edi
c0016a70:	56                   	push   esi
c0016a71:	52                   	push   edx
c0016a72:	50                   	push   eax
c0016a73:	e8 84 ff 00 00       	call   c00269fc <__udivdi3>
c0016a78:	83 c4 14             	add    esp,0x14
c0016a7b:	52                   	push   edx
c0016a7c:	50                   	push   eax
c0016a7d:	6a 00                	push   0x0
c0016a7f:	6a 00                	push   0x0
c0016a81:	53                   	push   ebx
c0016a82:	e8 3f fe ff ff       	call   c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a87:	83 c4 20             	add    esp,0x20
c0016a8a:	e9 79 01 00 00       	jmp    c0016c08 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a8f:	89 f0                	mov    eax,esi
c0016a91:	31 f6                	xor    esi,esi
c0016a93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a9a:	75 02                	jne    c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a9c:	89 f1                	mov    ecx,esi
c0016a9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016aa5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016aac:	c1 e2 08             	shl    edx,0x8
c0016aaf:	c1 e7 10             	shl    edi,0x10
c0016ab2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aba:	09 fa                	or     edx,edi
c0016abc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ac4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016acb:	83 c0 10             	add    eax,0x10
c0016ace:	09 fa                	or     edx,edi
c0016ad0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ad7:	c1 e7 18             	shl    edi,0x18
c0016ada:	09 fa                	or     edx,edi
c0016adc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ae3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ae7:	c1 e7 10             	shl    edi,0x10
c0016aea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016af1:	c1 e2 08             	shl    edx,0x8
c0016af4:	09 fa                	or     edx,edi
c0016af6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016afd:	09 fa                	or     edx,edi
c0016aff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b06:	c1 e7 18             	shl    edi,0x18
c0016b09:	09 fa                	or     edx,edi
c0016b0b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b0f:	46                   	inc    esi
c0016b10:	83 fe 04             	cmp    esi,0x4
c0016b13:	0f 85 7a ff ff ff    	jne    c0016a93 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1d:	83 f0 01             	xor    eax,0x1
c0016b20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b24:	75 57                	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b2a:	83 f0 01             	xor    eax,0x1
c0016b2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b31:	75 4a                	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b33:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b37:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b3f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b47:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b4d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b53:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b59:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b5d:	89 f7                	mov    edi,esi
c0016b5f:	c1 e0 0a             	shl    eax,0xa
c0016b62:	c1 ff 1f             	sar    edi,0x1f
c0016b65:	57                   	push   edi
c0016b66:	56                   	push   esi
c0016b67:	52                   	push   edx
c0016b68:	50                   	push   eax
c0016b69:	e8 8e fe 00 00       	call   c00269fc <__udivdi3>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b79:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b7d:	84 c9                	test   cl,cl
c0016b7f:	74 53                	je     c0016bd4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b81:	0f b6 c9             	movzx  ecx,cl
c0016b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b90:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b9c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ba0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016ba4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ba8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bb4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bb8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bbc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bc0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bc4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bcc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bd0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bd4:	31 ed                	xor    ebp,ebp
c0016bd6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bda:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bde:	89 f8                	mov    eax,edi
c0016be0:	09 f0                	or     eax,esi
c0016be2:	74 1e                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016be4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016be8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bec:	89 d1                	mov    ecx,edx
c0016bee:	09 c1                	or     ecx,eax
c0016bf0:	74 10                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	57                   	push   edi
c0016bf6:	56                   	push   esi
c0016bf7:	52                   	push   edx
c0016bf8:	50                   	push   eax
c0016bf9:	53                   	push   ebx
c0016bfa:	e8 c7 fc ff ff       	call   c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bff:	83 c4 20             	add    esp,0x20
c0016c02:	45                   	inc    ebp
c0016c03:	83 fd 04             	cmp    ebp,0x4
c0016c06:	75 ce                	jne    c0016bd6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c08:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c0e:	5b                   	pop    ebx
c0016c0f:	5e                   	pop    esi
c0016c10:	5f                   	pop    edi
c0016c11:	5d                   	pop    ebp
c0016c12:	c3                   	ret    
c0016c13:	90                   	nop

c0016c14 <Serial::Serial(char const*)>:
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1b:	83 ec 08             	sub    esp,0x8
c0016c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c22:	50                   	push   eax
c0016c23:	e8 48 d9 ff ff       	call   c0014570 <Device::Device(char const*)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0016c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c34:	89 10                	mov    DWORD PTR [eax],edx
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c44:	90                   	nop
c0016c45:	83 c4 0c             	add    esp,0xc
c0016c48:	c3                   	ret    
c0016c49:	90                   	nop

c0016c4a <Serial::~Serial()>:
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0016c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c56:	89 10                	mov    DWORD PTR [eax],edx
c0016c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	50                   	push   eax
c0016c60:	e8 ed d5 ff ff       	call   c0014252 <Device::~Device()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	90                   	nop
c0016c69:	83 c4 0c             	add    esp,0xc
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop

c0016c6e <Serial::~Serial()>:
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c78:	e8 cd ff ff ff       	call   c0016c4a <Serial::~Serial()>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	83 ec 08             	sub    esp,0x8
c0016c83:	68 58 01 00 00       	push   0x158
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 e8 c1 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 c4 0c             	add    esp,0xc
c0016c97:	c3                   	ret    

c0016c98 <Timer::Timer(char const*)>:
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9f:	83 ec 08             	sub    esp,0x8
c0016ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca6:	50                   	push   eax
c0016ca7:	e8 c4 d8 ff ff       	call   c0014570 <Device::Device(char const*)>
c0016cac:	83 c4 10             	add    esp,0x10
c0016caf:	ba 84 b4 02 c0       	mov    edx,0xc002b484
c0016cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb8:	89 10                	mov    DWORD PTR [eax],edx
c0016cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbe:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cc8:	90                   	nop
c0016cc9:	83 c4 0c             	add    esp,0xc
c0016ccc:	c3                   	ret    
c0016ccd:	90                   	nop

c0016cce <Timer::~Timer()>:
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	ba 84 b4 02 c0       	mov    edx,0xc002b484
c0016cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cda:	89 10                	mov    DWORD PTR [eax],edx
c0016cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	50                   	push   eax
c0016ce4:	e8 69 d5 ff ff       	call   c0014252 <Device::~Device()>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	90                   	nop
c0016ced:	83 c4 0c             	add    esp,0xc
c0016cf0:	c3                   	ret    
c0016cf1:	90                   	nop

c0016cf2 <Timer::~Timer()>:
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	83 ec 0c             	sub    esp,0xc
c0016cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfc:	e8 cd ff ff ff       	call   c0016cce <Timer::~Timer()>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	83 ec 08             	sub    esp,0x8
c0016d07:	68 5c 01 00 00       	push   0x15c
c0016d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d10:	e8 64 c1 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 c4 0c             	add    esp,0xc
c0016d1b:	c3                   	ret    

c0016d1c <Timer::read()>:
c0016d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d26:	c3                   	ret    

c0016d27 <timerHandler(unsigned long long)>:
c0016d27:	55                   	push   ebp
c0016d28:	57                   	push   edi
c0016d29:	56                   	push   esi
c0016d2a:	53                   	push   ebx
c0016d2b:	83 ec 0c             	sub    esp,0xc
c0016d2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d32:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d36:	01 35 90 ec 02 c0    	add    DWORD PTR ds:0xc002ec90,esi
c0016d3c:	11 3d 94 ec 02 c0    	adc    DWORD PTR ds:0xc002ec94,edi
c0016d42:	80 3d 0d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e60d,0x0
c0016d49:	0f 84 07 01 00 00    	je     c0016e56 <timerHandler(unsigned long long)+0x12f>
c0016d4f:	e8 f3 70 00 00       	call   c001de47 <lockStuff()>
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016d5c:	e8 0d 1d 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d61:	c7 04 24 5c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b5c
c0016d68:	89 c3                	mov    ebx,eax
c0016d6a:	e8 07 1d 01 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	84 c0                	test   al,al
c0016d74:	74 60                	je     c0016dd6 <timerHandler(unsigned long long)+0xaf>
c0016d76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d7c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d7f:	85 c0                	test   eax,eax
c0016d81:	0f 85 91 00 00 00    	jne    c0016e18 <timerHandler(unsigned long long)+0xf1>
c0016d87:	e9 be 00 00 00       	jmp    c0016e4a <timerHandler(unsigned long long)+0x123>
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	55                   	push   ebp
c0016d90:	e8 a3 76 00 00       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	39 eb                	cmp    ebx,ebp
c0016d9a:	75 12                	jne    c0016dae <timerHandler(unsigned long long)+0x87>
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016da4:	e8 c5 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016da9:	89 c3                	mov    ebx,eax
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016db6:	e8 bb 1c 01 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	84 c0                	test   al,al
c0016dc0:	75 b4                	jne    c0016d76 <timerHandler(unsigned long long)+0x4f>
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016dca:	e8 9f 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	39 d8                	cmp    eax,ebx
c0016dd4:	74 a0                	je     c0016d76 <timerHandler(unsigned long long)+0x4f>
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016dde:	e8 8b 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de3:	c7 04 24 5c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b5c
c0016dea:	89 c5                	mov    ebp,eax
c0016dec:	e8 a1 1c 01 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016df1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016df4:	83 c4 10             	add    esp,0x10
c0016df7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dfa:	39 15 90 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec90,edx
c0016e00:	a1 94 ec 02 c0       	mov    eax,ds:0xc002ec94
c0016e05:	19 c8                	sbb    eax,ecx
c0016e07:	73 83                	jae    c0016d8c <timerHandler(unsigned long long)+0x65>
c0016e09:	50                   	push   eax
c0016e0a:	50                   	push   eax
c0016e0b:	55                   	push   ebp
c0016e0c:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016e11:	e8 2a 1d 01 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e16:	eb 93                	jmp    c0016dab <timerHandler(unsigned long long)+0x84>
c0016e18:	80 3d 0c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e60c,0x0
c0016e1f:	74 29                	je     c0016e4a <timerHandler(unsigned long long)+0x123>
c0016e21:	39 c6                	cmp    esi,eax
c0016e23:	bb 00 00 00 00       	mov    ebx,0x0
c0016e28:	19 df                	sbb    edi,ebx
c0016e2a:	72 19                	jb     c0016e45 <timerHandler(unsigned long long)+0x11e>
c0016e2c:	e8 ef 6f 00 00       	call   c001de20 <lockScheduler()>
c0016e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e36:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e39:	e8 1e 73 00 00       	call   c001e15c <schedule()>
c0016e3e:	e8 df 6f 00 00       	call   c001de22 <unlockScheduler()>
c0016e43:	eb 05                	jmp    c0016e4a <timerHandler(unsigned long long)+0x123>
c0016e45:	29 f0                	sub    eax,esi
c0016e47:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e4a:	83 c4 0c             	add    esp,0xc
c0016e4d:	5b                   	pop    ebx
c0016e4e:	5e                   	pop    esi
c0016e4f:	5f                   	pop    edi
c0016e50:	5d                   	pop    ebp
c0016e51:	e9 8b 73 00 00       	jmp    c001e1e1 <unlockStuff()>
c0016e56:	83 c4 0c             	add    esp,0xc
c0016e59:	5b                   	pop    ebx
c0016e5a:	5e                   	pop    esi
c0016e5b:	5f                   	pop    edi
c0016e5c:	5d                   	pop    ebp
c0016e5d:	c3                   	ret    

c0016e5e <setupTimer(int)>:
c0016e5e:	57                   	push   edi
c0016e5f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016e64:	56                   	push   esi
c0016e65:	53                   	push   ebx
c0016e66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e79:	e8 ee d7 ff ff       	call   c001466c <Device::getName()>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e84:	0f 85 8d 00 00 00    	jne    c0016f17 <setupTimer(int)+0xb9>
c0016e8a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016e8f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e96:	74 7f                	je     c0016f17 <setupTimer(int)+0xb9>
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	68 5c 01 00 00       	push   0x15c
c0016ea0:	e8 9b 89 ff ff       	call   c000f840 <malloc>
c0016ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ea8:	89 c3                	mov    ebx,eax
c0016eaa:	e8 2b f7 00 00       	call   c00265da <PIT::PIT()>
c0016eaf:	59                   	pop    ecx
c0016eb0:	5f                   	pop    edi
c0016eb1:	53                   	push   ebx
c0016eb2:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0016eb8:	e8 c3 d4 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016ebd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ebf:	6a 00                	push   0x0
c0016ec1:	6a 00                	push   0x0
c0016ec3:	56                   	push   esi
c0016ec4:	53                   	push   ebx
c0016ec5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ec8:	83 c4 14             	add    esp,0x14
c0016ecb:	68 60 01 00 00       	push   0x160
c0016ed0:	e8 6b 89 ff ff       	call   c000f840 <malloc>
c0016ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed8:	89 c7                	mov    edi,eax
c0016eda:	e8 ab f5 00 00       	call   c002648a <APICTimer::APICTimer()>
c0016edf:	6a 00                	push   0x0
c0016ee1:	6a 00                	push   0x0
c0016ee3:	56                   	push   esi
c0016ee4:	57                   	push   edi
c0016ee5:	e8 a2 f4 00 00       	call   c002638c <APICTimer::open(int, int, void*)>
c0016eea:	83 c4 20             	add    esp,0x20
c0016eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eef:	6a 00                	push   0x0
c0016ef1:	6a 00                	push   0x0
c0016ef3:	6a 00                	push   0x0
c0016ef5:	53                   	push   ebx
c0016ef6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ef9:	58                   	pop    eax
c0016efa:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016eff:	5a                   	pop    edx
c0016f00:	57                   	push   edi
c0016f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f07:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f0d:	e8 6e d4 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016f12:	83 c4 10             	add    esp,0x10
c0016f15:	eb 33                	jmp    c0016f4a <setupTimer(int)+0xec>
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	68 5c 01 00 00       	push   0x15c
c0016f1f:	e8 1c 89 ff ff       	call   c000f840 <malloc>
c0016f24:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f27:	89 c3                	mov    ebx,eax
c0016f29:	e8 ac f6 00 00       	call   c00265da <PIT::PIT()>
c0016f2e:	58                   	pop    eax
c0016f2f:	5a                   	pop    edx
c0016f30:	53                   	push   ebx
c0016f31:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0016f37:	e8 44 d4 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016f3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f3e:	6a 00                	push   0x0
c0016f40:	6a 00                	push   0x0
c0016f42:	56                   	push   esi
c0016f43:	53                   	push   ebx
c0016f44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f47:	83 c4 20             	add    esp,0x20
c0016f4a:	89 d8                	mov    eax,ebx
c0016f4c:	5b                   	pop    ebx
c0016f4d:	5e                   	pop    esi
c0016f4e:	5f                   	pop    edi
c0016f4f:	c3                   	ret    

c0016f50 <VCache::VCache(PhysicalDisk*)>:
c0016f50:	53                   	push   ebx
c0016f51:	83 ec 18             	sub    esp,0x18
c0016f54:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0016f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5d:	89 10                	mov    DWORD PTR [eax],edx
c0016f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f63:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f79:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f92:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fb7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fca:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fda:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fe1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff0:	e8 4b 88 ff ff       	call   c000f840 <malloc>
c0016ff5:	83 c4 10             	add    esp,0x10
c0016ff8:	89 c3                	mov    ebx,eax
c0016ffa:	83 ec 0c             	sub    esp,0xc
c0016ffd:	53                   	push   ebx
c0016ffe:	e8 3d 6f 00 00       	call   c001df40 <Mutex::Mutex()>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017015:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017023:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017027:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017034:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017038:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001703e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017044:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017048:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001704b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017052:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017056:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017060:	05 00 01 00 00       	add    eax,0x100
c0017065:	c1 e0 04             	shl    eax,0x4
c0017068:	83 ec 0c             	sub    esp,0xc
c001706b:	50                   	push   eax
c001706c:	e8 cf 87 ff ff       	call   c000f840 <malloc>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	89 c2                	mov    edx,eax
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001707d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017081:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017090:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017094:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001709a:	c1 e0 07             	shl    eax,0x7
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	50                   	push   eax
c00170a1:	e8 9a 87 ff ff       	call   c000f840 <malloc>
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	89 c2                	mov    edx,eax
c00170ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170af:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170b2:	90                   	nop
c00170b3:	83 c4 18             	add    esp,0x18
c00170b6:	5b                   	pop    ebx
c00170b7:	c3                   	ret    

c00170b8 <VCache::invalidateReadBuffer()>:
c00170b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170bc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170c2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170c6:	c3                   	ret    
c00170c7:	90                   	nop

c00170c8 <VCache::writeWriteBuffer()>:
c00170c8:	53                   	push   ebx
c00170c9:	83 ec 14             	sub    esp,0x14
c00170cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00170d5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170e1:	50                   	push   eax
c00170e2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170e5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170ec:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170f3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170f7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170fe:	83 c4 28             	add    esp,0x28
c0017101:	5b                   	pop    ebx
c0017102:	c3                   	ret    
c0017103:	90                   	nop

c0017104 <VCache::~VCache()>:
c0017104:	83 ec 0c             	sub    esp,0xc
c0017107:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c001710c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017110:	89 10                	mov    DWORD PTR [eax],edx
c0017112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017116:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017119:	84 c0                	test   al,al
c001711b:	74 0f                	je     c001712c <VCache::~VCache()+0x28>
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017124:	e8 9f ff ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017130:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	50                   	push   eax
c0017137:	e8 14 87 ff ff       	call   c000f850 <free>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017143:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017146:	83 ec 0c             	sub    esp,0xc
c0017149:	50                   	push   eax
c001714a:	e8 01 87 ff ff       	call   c000f850 <free>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	90                   	nop
c0017153:	83 c4 0c             	add    esp,0xc
c0017156:	c3                   	ret    
c0017157:	90                   	nop

c0017158 <VCache::~VCache()>:
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	83 ec 0c             	sub    esp,0xc
c001715e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017162:	e8 9d ff ff ff       	call   c0017104 <VCache::~VCache()>
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	83 ec 08             	sub    esp,0x8
c001716d:	6a 44                	push   0x44
c001716f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017173:	e8 01 bd ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	83 c4 0c             	add    esp,0xc
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <VCache::write(unsigned long long, int, void*)>:
c0017180:	55                   	push   ebp
c0017181:	57                   	push   edi
c0017182:	56                   	push   esi
c0017183:	53                   	push   ebx
c0017184:	83 ec 28             	sub    esp,0x28
c0017187:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001718b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001718f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017193:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017197:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001719a:	e8 03 72 00 00       	call   c001e3a2 <Semaphore::acquire()>
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171a6:	74 0c                	je     c00171b4 <VCache::write(unsigned long long, int, void*)+0x34>
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	53                   	push   ebx
c00171ac:	e8 07 ff ff ff       	call   c00170b8 <VCache::invalidateReadBuffer()>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171b8:	74 66                	je     c0017220 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171bd:	99                   	cdq    
c00171be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171c8:	89 c1                	mov    ecx,eax
c00171ca:	89 d0                	mov    eax,edx
c00171cc:	31 f1                	xor    ecx,esi
c00171ce:	31 f8                	xor    eax,edi
c00171d0:	89 ca                	mov    edx,ecx
c00171d2:	09 c2                	or     edx,eax
c00171d4:	75 3e                	jne    c0017214 <VCache::write(unsigned long long, int, void*)+0x94>
c00171d6:	83 fd 01             	cmp    ebp,0x1
c00171d9:	75 39                	jne    c0017214 <VCache::write(unsigned long long, int, void*)+0x94>
c00171db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171e4:	51                   	push   ecx
c00171e5:	50                   	push   eax
c00171e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171ee:	0f af c8             	imul   ecx,eax
c00171f1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171f4:	51                   	push   ecx
c00171f5:	e8 4a 95 fe ff       	call   c0000744 <memcpy>
c00171fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	40                   	inc    eax
c0017201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017204:	83 c0 80             	add    eax,0xffffff80
c0017207:	75 57                	jne    c0017260 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	53                   	push   ebx
c001720d:	e8 b6 fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c0017212:	eb 34                	jmp    c0017248 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017214:	83 ec 0c             	sub    esp,0xc
c0017217:	53                   	push   ebx
c0017218:	e8 ab fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017223:	83 fd 7f             	cmp    ebp,0x7f
c0017226:	7f 25                	jg     c001724d <VCache::write(unsigned long long, int, void*)+0xcd>
c0017228:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001722b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001722e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017231:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017235:	52                   	push   edx
c0017236:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001723c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017240:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017243:	e8 fc 94 fe ff       	call   c0000744 <memcpy>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	eb 13                	jmp    c0017260 <VCache::write(unsigned long long, int, void*)+0xe0>
c001724d:	83 ec 0c             	sub    esp,0xc
c0017250:	8b 10                	mov    edx,DWORD PTR [eax]
c0017252:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017256:	55                   	push   ebp
c0017257:	57                   	push   edi
c0017258:	56                   	push   esi
c0017259:	50                   	push   eax
c001725a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001725d:	83 c4 20             	add    esp,0x20
c0017260:	83 ec 0c             	sub    esp,0xc
c0017263:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017266:	e8 e5 76 00 00       	call   c001e950 <Semaphore::release()>
c001726b:	83 c4 2c             	add    esp,0x2c
c001726e:	31 c0                	xor    eax,eax
c0017270:	5b                   	pop    ebx
c0017271:	5e                   	pop    esi
c0017272:	5f                   	pop    edi
c0017273:	5d                   	pop    ebp
c0017274:	c3                   	ret    
c0017275:	90                   	nop

c0017276 <VCache::read(unsigned long long, int, void*)>:
c0017276:	55                   	push   ebp
c0017277:	57                   	push   edi
c0017278:	56                   	push   esi
c0017279:	53                   	push   ebx
c001727a:	83 ec 28             	sub    esp,0x28
c001727d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017285:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001728d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017291:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017295:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001729c:	e8 01 71 00 00       	call   c001e3a2 <Semaphore::acquire()>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a8:	74 0c                	je     c00172b6 <VCache::read(unsigned long long, int, void*)+0x40>
c00172aa:	83 ec 0c             	sub    esp,0xc
c00172ad:	53                   	push   ebx
c00172ae:	e8 15 fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c00172b3:	83 c4 10             	add    esp,0x10
c00172b6:	83 fe 01             	cmp    esi,0x1
c00172b9:	0f 85 80 00 00 00    	jne    c001733f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172c9:	75 74                	jne    c001733f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172ce:	89 d1                	mov    ecx,edx
c00172d0:	f7 d9                	neg    ecx
c00172d2:	89 cf                	mov    edi,ecx
c00172d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172d8:	c1 ff 1f             	sar    edi,0x1f
c00172db:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172de:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172e2:	89 ce                	mov    esi,ecx
c00172e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172e8:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172f0:	89 cf                	mov    edi,ecx
c00172f2:	74 0a                	je     c00172fe <VCache::read(unsigned long long, int, void*)+0x88>
c00172f4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172f7:	75 05                	jne    c00172fe <VCache::read(unsigned long long, int, void*)+0x88>
c00172f9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172fc:	74 1c                	je     c001731a <VCache::read(unsigned long long, int, void*)+0xa4>
c00172fe:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017302:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017305:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001730d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017310:	52                   	push   edx
c0017311:	57                   	push   edi
c0017312:	56                   	push   esi
c0017313:	50                   	push   eax
c0017314:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017317:	83 c4 20             	add    esp,0x20
c001731a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001731d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017323:	50                   	push   eax
c0017324:	52                   	push   edx
c0017325:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017328:	48                   	dec    eax
c0017329:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001732d:	0f af c2             	imul   eax,edx
c0017330:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017333:	50                   	push   eax
c0017334:	55                   	push   ebp
c0017335:	e8 0a 94 fe ff       	call   c0000744 <memcpy>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	eb 21                	jmp    c0017360 <VCache::read(unsigned long long, int, void*)+0xea>
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	53                   	push   ebx
c0017343:	e8 70 fd ff ff       	call   c00170b8 <VCache::invalidateReadBuffer()>
c0017348:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734b:	8b 10                	mov    edx,DWORD PTR [eax]
c001734d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017350:	56                   	push   esi
c0017351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017359:	50                   	push   eax
c001735a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001735d:	83 c4 20             	add    esp,0x20
c0017360:	83 ec 0c             	sub    esp,0xc
c0017363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017366:	e8 e5 75 00 00       	call   c001e950 <Semaphore::release()>
c001736b:	83 c4 2c             	add    esp,0x2c
c001736e:	31 c0                	xor    eax,eax
c0017370:	5b                   	pop    ebx
c0017371:	5e                   	pop    esi
c0017372:	5f                   	pop    edi
c0017373:	5d                   	pop    ebp
c0017374:	c3                   	ret    
c0017375:	90                   	nop

c0017376 <Video::putrect(int, int, int, int, unsigned int)>:
c0017376:	55                   	push   ebp
c0017377:	57                   	push   edi
c0017378:	56                   	push   esi
c0017379:	53                   	push   ebx
c001737a:	83 ec 1c             	sub    esp,0x1c
c001737d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017385:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017389:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001738d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017395:	01 df                	add    edi,ebx
c0017397:	39 fb                	cmp    ebx,edi
c0017399:	7d 1f                	jge    c00173ba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001739b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001739f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173a3:	7d 12                	jge    c00173b7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00173a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173ab:	53                   	push   ebx
c00173ac:	55                   	push   ebp
c00173ad:	45                   	inc    ebp
c00173ae:	56                   	push   esi
c00173af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	eb e8                	jmp    c001739f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173b7:	43                   	inc    ebx
c00173b8:	eb dd                	jmp    c0017397 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173ba:	83 c4 1c             	add    esp,0x1c
c00173bd:	5b                   	pop    ebx
c00173be:	5e                   	pop    esi
c00173bf:	5f                   	pop    edi
c00173c0:	5d                   	pop    ebp
c00173c1:	c3                   	ret    

c00173c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173c2:	55                   	push   ebp
c00173c3:	57                   	push   edi
c00173c4:	31 ff                	xor    edi,edi
c00173c6:	56                   	push   esi
c00173c7:	53                   	push   ebx
c00173c8:	83 ec 1c             	sub    esp,0x1c
c00173cb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173d3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173da:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173e3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173eb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173f2:	01 f9                	add    ecx,edi
c00173f4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173f8:	7d 2f                	jge    c0017429 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173fa:	31 f6                	xor    esi,esi
c00173fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017400:	01 f2                	add    edx,esi
c0017402:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017406:	7d 1a                	jge    c0017422 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017408:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001740b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001740e:	46                   	inc    esi
c001740f:	51                   	push   ecx
c0017410:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017414:	52                   	push   edx
c0017415:	55                   	push   ebp
c0017416:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017419:	83 c4 10             	add    esp,0x10
c001741c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017420:	eb da                	jmp    c00173fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017422:	47                   	inc    edi
c0017423:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017427:	eb c5                	jmp    c00173ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017429:	83 c4 1c             	add    esp,0x1c
c001742c:	5b                   	pop    ebx
c001742d:	5e                   	pop    esi
c001742e:	5f                   	pop    edi
c001742f:	5d                   	pop    ebp
c0017430:	c3                   	ret    
c0017431:	90                   	nop

c0017432 <Video::blit(unsigned int*, int, int, int, int)>:
c0017432:	55                   	push   ebp
c0017433:	57                   	push   edi
c0017434:	56                   	push   esi
c0017435:	53                   	push   ebx
c0017436:	83 ec 1c             	sub    esp,0x1c
c0017439:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001743d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017441:	85 c0                	test   eax,eax
c0017443:	79 02                	jns    c0017447 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017445:	31 c0                	xor    eax,eax
c0017447:	c1 e0 02             	shl    eax,0x2
c001744a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001744e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017452:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017456:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001745a:	39 d8                	cmp    eax,ebx
c001745c:	7e 49                	jle    c00174a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001745e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017464:	7c 41                	jl     c00174a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017466:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001746a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001746e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017472:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017476:	39 f9                	cmp    ecx,edi
c0017478:	7e 22                	jle    c001749c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001747a:	83 c5 04             	add    ebp,0x4
c001747d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017483:	7c 14                	jl     c0017499 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017485:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017487:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001748a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001748e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017492:	56                   	push   esi
c0017493:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	47                   	inc    edi
c001749a:	eb d2                	jmp    c001746e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001749c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a0:	43                   	inc    ebx
c00174a1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174a5:	eb ab                	jmp    c0017452 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174a7:	83 c4 1c             	add    esp,0x1c
c00174aa:	5b                   	pop    ebx
c00174ab:	5e                   	pop    esi
c00174ac:	5f                   	pop    edi
c00174ad:	5d                   	pop    ebp
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <Video::clearScreen(unsigned int)>:
c00174b0:	57                   	push   edi
c00174b1:	56                   	push   esi
c00174b2:	53                   	push   ebx
c00174b3:	31 db                	xor    ebx,ebx
c00174b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174b9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174bf:	7e 1f                	jle    c00174e0 <Video::clearScreen(unsigned int)+0x30>
c00174c1:	31 ff                	xor    edi,edi
c00174c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174c9:	7e 12                	jle    c00174dd <Video::clearScreen(unsigned int)+0x2d>
c00174cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00174cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174d1:	53                   	push   ebx
c00174d2:	57                   	push   edi
c00174d3:	47                   	inc    edi
c00174d4:	56                   	push   esi
c00174d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	eb e6                	jmp    c00174c3 <Video::clearScreen(unsigned int)+0x13>
c00174dd:	43                   	inc    ebx
c00174de:	eb d9                	jmp    c00174b9 <Video::clearScreen(unsigned int)+0x9>
c00174e0:	5b                   	pop    ebx
c00174e1:	5e                   	pop    esi
c00174e2:	5f                   	pop    edi
c00174e3:	c3                   	ret    

c00174e4 <Video::putpixel(int, int, unsigned int)>:
c00174e4:	c7 44 24 04 bc b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b4bc
c00174ec:	e9 0a 31 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c00174f1:	90                   	nop

c00174f2 <Video::Video(char const*)>:
c00174f2:	83 ec 0c             	sub    esp,0xc
c00174f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f9:	83 ec 08             	sub    esp,0x8
c00174fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017500:	50                   	push   eax
c0017501:	e8 6a d0 ff ff       	call   c0014570 <Device::Device(char const*)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c001750e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017512:	89 10                	mov    DWORD PTR [eax],edx
c0017514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017518:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017522:	90                   	nop
c0017523:	83 c4 0c             	add    esp,0xc
c0017526:	c3                   	ret    
c0017527:	90                   	nop

c0017528 <Video::~Video()>:
c0017528:	83 ec 0c             	sub    esp,0xc
c001752b:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0017530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017534:	89 10                	mov    DWORD PTR [eax],edx
c0017536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753a:	83 ec 0c             	sub    esp,0xc
c001753d:	50                   	push   eax
c001753e:	e8 0f cd ff ff       	call   c0014252 <Device::~Device()>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	90                   	nop
c0017547:	83 c4 0c             	add    esp,0xc
c001754a:	c3                   	ret    
c001754b:	90                   	nop

c001754c <Video::~Video()>:
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	83 ec 0c             	sub    esp,0xc
c0017552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017556:	e8 cd ff ff ff       	call   c0017528 <Video::~Video()>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	83 ec 08             	sub    esp,0x8
c0017561:	68 64 01 00 00       	push   0x164
c0017566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001756a:	e8 0a b9 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	83 c4 0c             	add    esp,0xc
c0017575:	c3                   	ret    

c0017576 <Video::isMonochrome()>:
c0017576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <Video::getWidth()>:
c0017582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017586:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001758c:	c3                   	ret    
c001758d:	90                   	nop

c001758e <Video::getHeight()>:
c001758e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017592:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <Video::drawCursor(int, int, unsigned char*, int)>:
c001759a:	55                   	push   ebp
c001759b:	57                   	push   edi
c001759c:	56                   	push   esi
c001759d:	53                   	push   ebx
c001759e:	83 ec 2c             	sub    esp,0x2c
c00175a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175a9:	83 f8 01             	cmp    eax,0x1
c00175ac:	19 c9                	sbb    ecx,ecx
c00175ae:	31 db                	xor    ebx,ebx
c00175b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175b4:	89 cd                	mov    ebp,ecx
c00175b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175be:	f7 d5                	not    ebp
c00175c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175ca:	01 d8                	add    eax,ebx
c00175cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175d0:	56                   	push   esi
c00175d1:	e8 b8 ff ff ff       	call   c001758e <Video::getHeight()>
c00175d6:	59                   	pop    ecx
c00175d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175db:	7e 70                	jle    c001764d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175fb:	89 f8                	mov    eax,edi
c00175fd:	83 c0 20             	add    eax,0x20
c0017600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017604:	56                   	push   esi
c0017605:	e8 78 ff ff ff       	call   c0017582 <Video::getWidth()>
c001760a:	5a                   	pop    edx
c001760b:	39 c7                	cmp    edi,eax
c001760d:	7d 34                	jge    c0017643 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001760f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017614:	74 05                	je     c001761b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017616:	8b 06                	mov    eax,DWORD PTR [esi]
c0017618:	55                   	push   ebp
c0017619:	eb 0d                	jmp    c0017628 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001761b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017620:	74 12                	je     c0017634 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017622:	8b 06                	mov    eax,DWORD PTR [esi]
c0017624:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017628:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001762c:	57                   	push   edi
c001762d:	56                   	push   esi
c001762e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017638:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001763c:	47                   	inc    edi
c001763d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017641:	75 c1                	jne    c0017604 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017643:	43                   	inc    ebx
c0017644:	83 fb 20             	cmp    ebx,0x20
c0017647:	0f 85 79 ff ff ff    	jne    c00175c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001764d:	83 c4 2c             	add    esp,0x2c
c0017650:	5b                   	pop    ebx
c0017651:	5e                   	pop    esi
c0017652:	5f                   	pop    edi
c0017653:	5d                   	pop    ebp
c0017654:	c3                   	ret    
c0017655:	90                   	nop

c0017656 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017656:	55                   	push   ebp
c0017657:	57                   	push   edi
c0017658:	56                   	push   esi
c0017659:	53                   	push   ebx
c001765a:	83 ec 28             	sub    esp,0x28
c001765d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017661:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017665:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017669:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001766d:	c1 e7 08             	shl    edi,0x8
c0017670:	01 c7                	add    edi,eax
c0017672:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017676:	c1 e0 08             	shl    eax,0x8
c0017679:	01 d0                	add    eax,edx
c001767b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001767f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017683:	0f af c7             	imul   eax,edi
c0017686:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001768d:	50                   	push   eax
c001768e:	e8 ad 81 ff ff       	call   c000f840 <malloc>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	89 c5                	mov    ebp,eax
c0017698:	85 c0                	test   eax,eax
c001769a:	75 15                	jne    c00176b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	68 dd b4 02 c0       	push   0xc002b4dd
c00176a4:	e8 b0 b8 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	e9 1c 01 00 00       	jmp    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176b1:	be 12 00 00 00       	mov    esi,0x12
c00176b6:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ba:	74 11                	je     c00176cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176bc:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176c0:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176c4:	c1 fe 03             	sar    esi,0x3
c00176c7:	0f af f0             	imul   esi,eax
c00176ca:	83 c6 12             	add    esi,0x12
c00176cd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176d1:	74 04                	je     c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176d3:	85 ff                	test   edi,edi
c00176d5:	75 12                	jne    c00176e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176d7:	83 ec 0c             	sub    esp,0xc
c00176da:	68 f4 b4 02 c0       	push   0xc002b4f4
c00176df:	e8 75 b8 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00176e4:	e9 ce 00 00 00       	jmp    c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176e9:	52                   	push   edx
c00176ea:	52                   	push   edx
c00176eb:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176ef:	50                   	push   eax
c00176f0:	68 09 b5 02 c0       	push   0xc002b509
c00176f5:	e8 5f b8 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00176fa:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	80 fa 02             	cmp    dl,0x2
c0017704:	0f 85 98 00 00 00    	jne    c00177a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001770a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001770f:	75 10                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017711:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017715:	75 0a                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017717:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001771a:	83 e8 18             	sub    eax,0x18
c001771d:	a8 f7                	test   al,0xf7
c001771f:	74 0a                	je     c001772b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	68 16 b5 02 c0       	push   0xc002b516
c0017729:	eb 7f                	jmp    c00177aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001772b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017733:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001773b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001773f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017747:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001774b:	75 0c                	jne    c0017759 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001774d:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017752:	c1 e0 18             	shl    eax,0x18
c0017755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017759:	41                   	inc    ecx
c001775a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001775f:	c1 e2 10             	shl    edx,0x10
c0017762:	89 d0                	mov    eax,edx
c0017764:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017769:	c1 e2 08             	shl    edx,0x8
c001776c:	09 c2                	or     edx,eax
c001776e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017772:	09 c2                	or     edx,eax
c0017774:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017778:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001777c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017780:	c1 f8 03             	sar    eax,0x3
c0017783:	01 c6                	add    esi,eax
c0017785:	89 c8                	mov    eax,ecx
c0017787:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001778b:	39 c7                	cmp    edi,eax
c001778d:	7f b0                	jg     c001773f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001778f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017793:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017797:	39 14 24             	cmp    DWORD PTR [esp],edx
c001779a:	7e 22                	jle    c00177be <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001779c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177a0:	eb 99                	jmp    c001773b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177a2:	50                   	push   eax
c00177a3:	50                   	push   eax
c00177a4:	52                   	push   edx
c00177a5:	68 24 b5 02 c0       	push   0xc002b524
c00177aa:	e8 aa b7 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00177af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177b2:	e8 99 80 ff ff       	call   c000f850 <free>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	31 ed                	xor    ebp,ebp
c00177bc:	eb 0f                	jmp    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177c2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177c5:	89 38                	mov    DWORD PTR [eax],edi
c00177c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177cb:	89 08                	mov    DWORD PTR [eax],ecx
c00177cd:	83 c4 1c             	add    esp,0x1c
c00177d0:	89 e8                	mov    eax,ebp
c00177d2:	5b                   	pop    ebx
c00177d3:	5e                   	pop    esi
c00177d4:	5f                   	pop    edi
c00177d5:	5d                   	pop    ebp
c00177d6:	c3                   	ret    
c00177d7:	90                   	nop

c00177d8 <Video::putTGA(int, int, unsigned char*, int)>:
c00177d8:	55                   	push   ebp
c00177d9:	57                   	push   edi
c00177da:	56                   	push   esi
c00177db:	53                   	push   ebx
c00177dc:	83 ec 28             	sub    esp,0x28
c00177df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e7:	50                   	push   eax
c00177e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ec:	50                   	push   eax
c00177ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f5:	56                   	push   esi
c00177f6:	e8 5b fe ff ff       	call   c0017656 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177fb:	83 c4 20             	add    esp,0x20
c00177fe:	85 c0                	test   eax,eax
c0017800:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017804:	74 35                	je     c001783b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017806:	89 c7                	mov    edi,eax
c0017808:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001780c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017810:	39 d8                	cmp    eax,ebx
c0017812:	7e 27                	jle    c001783b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017814:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001781c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017820:	39 e8                	cmp    eax,ebp
c0017822:	7e 14                	jle    c0017838 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017824:	8b 06                	mov    eax,DWORD PTR [esi]
c0017826:	83 c7 04             	add    edi,0x4
c0017829:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001782c:	53                   	push   ebx
c001782d:	55                   	push   ebp
c001782e:	45                   	inc    ebp
c001782f:	56                   	push   esi
c0017830:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	eb e0                	jmp    c0017818 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017838:	43                   	inc    ebx
c0017839:	eb cd                	jmp    c0017808 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001783b:	83 c4 1c             	add    esp,0x1c
c001783e:	5b                   	pop    ebx
c001783f:	5e                   	pop    esi
c0017840:	5f                   	pop    edi
c0017841:	5d                   	pop    ebp
c0017842:	c3                   	ret    
c0017843:	90                   	nop

c0017844 <ACPI::close(int, int, void*)>:
c0017844:	83 ec 1c             	sub    esp,0x1c
c0017847:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001784f:	74 0a                	je     c001785b <ACPI::close(int, int, void*)+0x17>
c0017851:	b8 00 00 00 00       	mov    eax,0x0
c0017856:	e9 9a 00 00 00       	jmp    c00178f5 <ACPI::close(int, int, void*)+0xb1>
c001785b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017860:	75 37                	jne    c0017899 <ACPI::close(int, int, void*)+0x55>
c0017862:	83 ec 0c             	sub    esp,0xc
c0017865:	68 80 b5 02 c0       	push   0xc002b580
c001786a:	e8 ea b6 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017877:	85 c0                	test   eax,eax
c0017879:	74 07                	je     c0017882 <ACPI::close(int, int, void*)+0x3e>
c001787b:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017880:	ff d0                	call   eax
c0017882:	83 ec 0c             	sub    esp,0xc
c0017885:	68 a4 b6 02 c0       	push   0xc002b6a4
c001788a:	e8 6c 2d 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001788f:	83 c4 10             	add    esp,0x10
c0017892:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017897:	eb 5c                	jmp    c00178f5 <ACPI::close(int, int, void*)+0xb1>
c0017899:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001789e:	75 50                	jne    c00178f0 <ACPI::close(int, int, void*)+0xac>
c00178a0:	a1 c4 0c 03 c0       	mov    eax,ds:0xc0030cc4
c00178a5:	85 c0                	test   eax,eax
c00178a7:	74 07                	je     c00178b0 <ACPI::close(int, int, void*)+0x6c>
c00178a9:	a1 c4 0c 03 c0       	mov    eax,ds:0xc0030cc4
c00178ae:	ff d0                	call   eax
c00178b0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178b5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ba:	83 e0 02             	and    eax,0x2
c00178bd:	74 1c                	je     c00178db <ACPI::close(int, int, void*)+0x97>
c00178bf:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ca:	89 c2                	mov    edx,eax
c00178cc:	ec                   	in     al,dx
c00178cd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178d1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178d9:	eb da                	jmp    c00178b5 <ACPI::close(int, int, void*)+0x71>
c00178db:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178e2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178e7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178ef:	ee                   	out    dx,al
c00178f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178f5:	83 c4 1c             	add    esp,0x1c
c00178f8:	c3                   	ret    

c00178f9 <findRSDP()>:
c00178f9:	83 ec 1c             	sub    esp,0x1c
c00178fc:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017901:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017907:	83 e0 04             	and    eax,0x4
c001790a:	84 c0                	test   al,al
c001790c:	75 07                	jne    c0017915 <findRSDP()+0x1c>
c001790e:	b8 00 00 00 00       	mov    eax,0x0
c0017913:	eb 6a                	jmp    c001797f <findRSDP()+0x86>
c0017915:	a1 54 e6 02 c0       	mov    eax,ds:0xc002e654
c001791a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001791f:	7f 1b                	jg     c001793c <findRSDP()+0x43>
c0017921:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017926:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001792c:	83 e2 fb             	and    edx,0xfffffffb
c001792f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017935:	b8 00 00 00 00       	mov    eax,0x0
c001793a:	eb 43                	jmp    c001797f <findRSDP()+0x86>
c001793c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017944:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001794c:	77 2c                	ja     c001797a <findRSDP()+0x81>
c001794e:	83 ec 04             	sub    esp,0x4
c0017951:	6a 08                	push   0x8
c0017953:	68 8d b5 02 c0       	push   0xc002b58d
c0017958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001795c:	e8 df 8c fe ff       	call   c0000640 <memcmp>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	85 c0                	test   eax,eax
c0017966:	0f 94 c0             	sete   al
c0017969:	84 c0                	test   al,al
c001796b:	74 06                	je     c0017973 <findRSDP()+0x7a>
c001796d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017971:	eb 0c                	jmp    c001797f <findRSDP()+0x86>
c0017973:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017978:	eb ca                	jmp    c0017944 <findRSDP()+0x4b>
c001797a:	b8 00 00 00 00       	mov    eax,0x0
c001797f:	83 c4 1c             	add    esp,0x1c
c0017982:	c3                   	ret    

c0017983 <loadACPITables(unsigned char*)>:
c0017983:	56                   	push   esi
c0017984:	53                   	push   ebx
c0017985:	83 ec 44             	sub    esp,0x44
c0017988:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001798d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017993:	83 e0 04             	and    eax,0x4
c0017996:	84 c0                	test   al,al
c0017998:	0f 84 05 02 00 00    	je     c0017ba3 <loadACPITables(unsigned char*)+0x220>
c001799e:	a0 e0 0e 03 c0       	mov    al,ds:0xc0030ee0
c00179a3:	84 c0                	test   al,al
c00179a5:	74 75                	je     c0017a1c <loadACPITables(unsigned char*)+0x99>
c00179a7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b6:	83 e8 24             	sub    eax,0x24
c00179b9:	c1 e8 03             	shr    eax,0x3
c00179bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179c0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179cc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179d0:	0f 8d b2 00 00 00    	jge    c0017a88 <loadACPITables(unsigned char*)+0x105>
c00179d6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179da:	83 c0 24             	add    eax,0x24
c00179dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179ed:	c1 e0 03             	shl    eax,0x3
c00179f0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00179fd:	89 c1                	mov    ecx,eax
c00179ff:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017a04:	8d 50 01             	lea    edx,[eax+0x1]
c0017a07:	89 15 cc 0c 03 c0    	mov    DWORD PTR ds:0xc0030ccc,edx
c0017a0d:	89 ca                	mov    edx,ecx
c0017a0f:	89 14 c5 e4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf31c],edx
c0017a16:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a1a:	eb ac                	jmp    c00179c8 <loadACPITables(unsigned char*)+0x45>
c0017a1c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2b:	83 e8 24             	sub    eax,0x24
c0017a2e:	c1 e8 02             	shr    eax,0x2
c0017a31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a35:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a41:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a45:	7d 41                	jge    c0017a88 <loadACPITables(unsigned char*)+0x105>
c0017a47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a4b:	83 c0 24             	add    eax,0x24
c0017a4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a5e:	c1 e0 02             	shl    eax,0x2
c0017a61:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a6b:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017a70:	8d 50 01             	lea    edx,[eax+0x1]
c0017a73:	89 15 cc 0c 03 c0    	mov    DWORD PTR ds:0xc0030ccc,edx
c0017a79:	89 ca                	mov    edx,ecx
c0017a7b:	89 14 c5 e4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf31c],edx
c0017a82:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a86:	eb b5                	jmp    c0017a3d <loadACPITables(unsigned char*)+0xba>
c0017a88:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a90:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017a95:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a99:	0f 8d 05 01 00 00    	jge    c0017ba4 <loadACPITables(unsigned char*)+0x221>
c0017a9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa3:	8b 04 c5 e4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf31c]
c0017aaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aba:	25 ff 0f 00 00       	and    eax,0xfff
c0017abf:	89 c6                	mov    esi,eax
c0017ac1:	e8 60 a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017ac6:	89 c3                	mov    ebx,eax
c0017ac8:	83 ec 0c             	sub    esp,0xc
c0017acb:	6a 01                	push   0x1
c0017acd:	e8 b9 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ad9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017adf:	83 ec 0c             	sub    esp,0xc
c0017ae2:	6a 01                	push   0x1
c0017ae4:	6a 01                	push   0x1
c0017ae6:	50                   	push   eax
c0017ae7:	52                   	push   edx
c0017ae8:	53                   	push   ebx
c0017ae9:	e8 68 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017aee:	83 c4 20             	add    esp,0x20
c0017af1:	09 f0                	or     eax,esi
c0017af3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017af7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017afb:	c1 e0 03             	shl    eax,0x3
c0017afe:	05 e0 0c 03 c0       	add    eax,0xc0030ce0
c0017b03:	83 ec 04             	sub    esp,0x4
c0017b06:	6a 04                	push   0x4
c0017b08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b0c:	50                   	push   eax
c0017b0d:	e8 32 8c fe ff       	call   c0000744 <memcpy>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b24:	05 00 10 00 00       	add    eax,0x1000
c0017b29:	c1 e8 0c             	shr    eax,0xc
c0017b2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b34:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b3b:	25 ff 0f 00 00       	and    eax,0xfff
c0017b40:	89 c6                	mov    esi,eax
c0017b42:	e8 df a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017b47:	89 c3                	mov    ebx,eax
c0017b49:	83 ec 0c             	sub    esp,0xc
c0017b4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b50:	e8 36 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b5c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b62:	83 ec 0c             	sub    esp,0xc
c0017b65:	6a 01                	push   0x1
c0017b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b6b:	50                   	push   eax
c0017b6c:	52                   	push   edx
c0017b6d:	53                   	push   ebx
c0017b6e:	e8 e3 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b73:	83 c4 20             	add    esp,0x20
c0017b76:	09 f0                	or     eax,esi
c0017b78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	50                   	push   eax
c0017b83:	e8 73 a4 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b93:	89 14 c5 e4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf31c],edx
c0017b9a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b9e:	e9 ed fe ff ff       	jmp    c0017a90 <loadACPITables(unsigned char*)+0x10d>
c0017ba3:	90                   	nop
c0017ba4:	83 c4 44             	add    esp,0x44
c0017ba7:	5b                   	pop    ebx
c0017ba8:	5e                   	pop    esi
c0017ba9:	c3                   	ret    

c0017baa <findRSDT(unsigned char*)>:
c0017baa:	56                   	push   esi
c0017bab:	53                   	push   ebx
c0017bac:	83 ec 44             	sub    esp,0x44
c0017baf:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017bb4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bba:	83 e0 04             	and    eax,0x4
c0017bbd:	84 c0                	test   al,al
c0017bbf:	75 0a                	jne    c0017bcb <findRSDT(unsigned char*)+0x21>
c0017bc1:	b8 00 00 00 00       	mov    eax,0x0
c0017bc6:	e9 f7 00 00 00       	jmp    c0017cc2 <findRSDT(unsigned char*)+0x118>
c0017bcb:	83 ec 04             	sub    esp,0x4
c0017bce:	6a 24                	push   0x24
c0017bd0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bd4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bd8:	50                   	push   eax
c0017bd9:	e8 66 8b fe ff       	call   c0000744 <memcpy>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017be5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017be9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bf5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c09:	25 ff 0f 00 00       	and    eax,0xfff
c0017c0e:	89 c6                	mov    esi,eax
c0017c10:	e8 11 a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c15:	89 c3                	mov    ebx,eax
c0017c17:	83 ec 0c             	sub    esp,0xc
c0017c1a:	6a 02                	push   0x2
c0017c1c:	e8 6a 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c21:	83 c4 10             	add    esp,0x10
c0017c24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c2e:	83 ec 0c             	sub    esp,0xc
c0017c31:	6a 01                	push   0x1
c0017c33:	6a 02                	push   0x2
c0017c35:	50                   	push   eax
c0017c36:	52                   	push   edx
c0017c37:	53                   	push   ebx
c0017c38:	e8 19 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c3d:	83 c4 20             	add    esp,0x20
c0017c40:	09 f0                	or     eax,esi
c0017c42:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4a:	25 ff 0f 00 00       	and    eax,0xfff
c0017c4f:	89 c6                	mov    esi,eax
c0017c51:	e8 d0 a1 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c56:	89 c3                	mov    ebx,eax
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	6a 02                	push   0x2
c0017c5d:	e8 29 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c62:	83 c4 10             	add    esp,0x10
c0017c65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c69:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c6f:	83 ec 0c             	sub    esp,0xc
c0017c72:	6a 01                	push   0x1
c0017c74:	6a 02                	push   0x2
c0017c76:	50                   	push   eax
c0017c77:	52                   	push   edx
c0017c78:	53                   	push   ebx
c0017c79:	e8 d8 a9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c7e:	83 c4 20             	add    esp,0x20
c0017c81:	09 f0                	or     eax,esi
c0017c83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c87:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c8c:	75 11                	jne    c0017c9f <findRSDT(unsigned char*)+0xf5>
c0017c8e:	c6 05 e0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ee0,0x0
c0017c95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c9d:	eb 1f                	jmp    c0017cbe <findRSDT(unsigned char*)+0x114>
c0017c9f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ca4:	75 11                	jne    c0017cb7 <findRSDT(unsigned char*)+0x10d>
c0017ca6:	c6 05 e0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee0,0x1
c0017cad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cb1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cb5:	eb 07                	jmp    c0017cbe <findRSDT(unsigned char*)+0x114>
c0017cb7:	b8 00 00 00 00       	mov    eax,0x0
c0017cbc:	eb 04                	jmp    c0017cc2 <findRSDT(unsigned char*)+0x118>
c0017cbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cc2:	83 c4 44             	add    esp,0x44
c0017cc5:	5b                   	pop    ebx
c0017cc6:	5e                   	pop    esi
c0017cc7:	c3                   	ret    

c0017cc8 <findDataTable(unsigned char*, char*)>:
c0017cc8:	83 ec 1c             	sub    esp,0x1c
c0017ccb:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017cd0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cd6:	83 e0 04             	and    eax,0x4
c0017cd9:	84 c0                	test   al,al
c0017cdb:	75 07                	jne    c0017ce4 <findDataTable(unsigned char*, char*)+0x1c>
c0017cdd:	b8 00 00 00 00       	mov    eax,0x0
c0017ce2:	eb 7c                	jmp    c0017d60 <findDataTable(unsigned char*, char*)+0x98>
c0017ce4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cec:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017cf1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cf5:	7d 3a                	jge    c0017d31 <findDataTable(unsigned char*, char*)+0x69>
c0017cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cfb:	c1 e0 03             	shl    eax,0x3
c0017cfe:	05 e0 0c 03 c0       	add    eax,0xc0030ce0
c0017d03:	83 ec 04             	sub    esp,0x4
c0017d06:	6a 04                	push   0x4
c0017d08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d0c:	50                   	push   eax
c0017d0d:	e8 2e 89 fe ff       	call   c0000640 <memcmp>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	85 c0                	test   eax,eax
c0017d17:	0f 94 c0             	sete   al
c0017d1a:	84 c0                	test   al,al
c0017d1c:	74 0d                	je     c0017d2b <findDataTable(unsigned char*, char*)+0x63>
c0017d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d22:	8b 04 c5 e4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf31c]
c0017d29:	eb 35                	jmp    c0017d60 <findDataTable(unsigned char*, char*)+0x98>
c0017d2b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d2f:	eb bb                	jmp    c0017cec <findDataTable(unsigned char*, char*)+0x24>
c0017d31:	a0 e0 0e 03 c0       	mov    al,ds:0xc0030ee0
c0017d36:	84 c0                	test   al,al
c0017d38:	74 07                	je     c0017d41 <findDataTable(unsigned char*, char*)+0x79>
c0017d3a:	b8 58 00 00 00       	mov    eax,0x58
c0017d3f:	eb 05                	jmp    c0017d46 <findDataTable(unsigned char*, char*)+0x7e>
c0017d41:	b8 52 00 00 00       	mov    eax,0x52
c0017d46:	83 ec 04             	sub    esp,0x4
c0017d49:	50                   	push   eax
c0017d4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d4e:	68 c8 b6 02 c0       	push   0xc002b6c8
c0017d53:	e8 01 b2 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0017d58:	83 c4 10             	add    esp,0x10
c0017d5b:	b8 00 00 00 00       	mov    eax,0x0
c0017d60:	83 c4 1c             	add    esp,0x1c
c0017d63:	c3                   	ret    

c0017d64 <scanMADT()>:
c0017d64:	53                   	push   ebx
c0017d65:	83 ec 38             	sub    esp,0x38
c0017d68:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017d6d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d73:	83 e0 04             	and    eax,0x4
c0017d76:	84 c0                	test   al,al
c0017d78:	0f 84 63 04 00 00    	je     c00181e1 <scanMADT()+0x47d>
c0017d7e:	e8 76 fb ff ff       	call   c00178f9 <findRSDP()>
c0017d83:	a3 ec 0e 03 c0       	mov    ds:0xc0030eec,eax
c0017d88:	a1 ec 0e 03 c0       	mov    eax,ds:0xc0030eec
c0017d8d:	85 c0                	test   eax,eax
c0017d8f:	75 19                	jne    c0017daa <scanMADT()+0x46>
c0017d91:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017d96:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d9c:	83 e2 fb             	and    edx,0xfffffffb
c0017d9f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017da5:	e9 3b 04 00 00       	jmp    c00181e5 <scanMADT()+0x481>
c0017daa:	a1 ec 0e 03 c0       	mov    eax,ds:0xc0030eec
c0017daf:	83 ec 0c             	sub    esp,0xc
c0017db2:	50                   	push   eax
c0017db3:	e8 f2 fd ff ff       	call   c0017baa <findRSDT(unsigned char*)>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0017dc0:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0017dc5:	85 c0                	test   eax,eax
c0017dc7:	75 19                	jne    c0017de2 <scanMADT()+0x7e>
c0017dc9:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017dce:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dd4:	83 e2 fb             	and    edx,0xfffffffb
c0017dd7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ddd:	e9 03 04 00 00       	jmp    c00181e5 <scanMADT()+0x481>
c0017de2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0017de7:	83 ec 0c             	sub    esp,0xc
c0017dea:	50                   	push   eax
c0017deb:	e8 93 fb ff ff       	call   c0017983 <loadACPITables(unsigned char*)>
c0017df0:	83 c4 10             	add    esp,0x10
c0017df3:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0017df8:	83 ec 08             	sub    esp,0x8
c0017dfb:	68 96 b5 02 c0       	push   0xc002b596
c0017e00:	50                   	push   eax
c0017e01:	e8 c2 fe ff ff       	call   c0017cc8 <findDataTable(unsigned char*, char*)>
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e0d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e12:	75 19                	jne    c0017e2d <scanMADT()+0xc9>
c0017e14:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017e19:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e1f:	83 e2 fe             	and    edx,0xfffffffe
c0017e22:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e28:	e9 b8 03 00 00       	jmp    c00181e5 <scanMADT()+0x481>
c0017e2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e3c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e40:	0f 87 9f 03 00 00    	ja     c00181e5 <scanMADT()+0x481>
c0017e46:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e4e:	0f 87 91 03 00 00    	ja     c00181e5 <scanMADT()+0x481>
c0017e54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e58:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e60:	8d 50 01             	lea    edx,[eax+0x1]
c0017e63:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e6f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e77:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e82:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e86:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e8a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e8f:	0f 86 4f 03 00 00    	jbe    c00181e4 <scanMADT()+0x480>
c0017e95:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e9a:	75 57                	jne    c0017ef3 <scanMADT()+0x18f>
c0017e9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea7:	8a 15 e0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310e0
c0017ead:	0f b6 d2             	movzx  edx,dl
c0017eb0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eb4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eb8:	88 82 20 11 03 c0    	mov    BYTE PTR [edx-0x3ffceee0],al
c0017ebe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ec9:	8a 15 e0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310e0
c0017ecf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ed2:	88 0d e0 10 03 c0    	mov    BYTE PTR ds:0xc00310e0,cl
c0017ed8:	0f b6 d2             	movzx  edx,dl
c0017edb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017edf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ee3:	88 82 00 11 03 c0    	mov    BYTE PTR [edx-0x3ffcef00],al
c0017ee9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eee:	e9 da 02 00 00       	jmp    c00181cd <scanMADT()+0x469>
c0017ef3:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ef8:	0f 85 14 01 00 00    	jne    c0018012 <scanMADT()+0x2ae>
c0017efe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f02:	8d 50 01             	lea    edx,[eax+0x1]
c0017f05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f09:	8a 15 a0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fa0
c0017f0f:	0f b6 d2             	movzx  edx,dl
c0017f12:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f16:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f1a:	88 82 c0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf040],al
c0017f20:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2c:	01 d0                	add    eax,edx
c0017f2e:	83 c0 2c             	add    eax,0x2c
c0017f31:	8a 00                	mov    al,BYTE PTR [eax]
c0017f33:	0f b6 d0             	movzx  edx,al
c0017f36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f45:	0f b6 c0             	movzx  eax,al
c0017f48:	c1 e0 08             	shl    eax,0x8
c0017f4b:	89 d1                	mov    ecx,edx
c0017f4d:	09 c1                	or     ecx,eax
c0017f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f53:	8d 50 02             	lea    edx,[eax+0x2]
c0017f56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f5e:	0f b6 c0             	movzx  eax,al
c0017f61:	c1 e0 10             	shl    eax,0x10
c0017f64:	09 c1                	or     ecx,eax
c0017f66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6a:	8d 50 03             	lea    edx,[eax+0x3]
c0017f6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f75:	0f b6 c0             	movzx  eax,al
c0017f78:	c1 e0 18             	shl    eax,0x18
c0017f7b:	09 c1                	or     ecx,eax
c0017f7d:	89 ca                	mov    edx,ecx
c0017f7f:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0017f84:	0f b6 c0             	movzx  eax,al
c0017f87:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c0017f8e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9b:	01 d0                	add    eax,edx
c0017f9d:	83 c0 2c             	add    eax,0x2c
c0017fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fa2:	0f b6 d0             	movzx  edx,al
c0017fa5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fb4:	0f b6 c0             	movzx  eax,al
c0017fb7:	c1 e0 08             	shl    eax,0x8
c0017fba:	89 d1                	mov    ecx,edx
c0017fbc:	09 c1                	or     ecx,eax
c0017fbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0017fc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fcd:	0f b6 c0             	movzx  eax,al
c0017fd0:	c1 e0 10             	shl    eax,0x10
c0017fd3:	09 c1                	or     ecx,eax
c0017fd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd9:	8d 50 03             	lea    edx,[eax+0x3]
c0017fdc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fe4:	0f b6 c0             	movzx  eax,al
c0017fe7:	c1 e0 18             	shl    eax,0x18
c0017fea:	09 c1                	or     ecx,eax
c0017fec:	89 ca                	mov    edx,ecx
c0017fee:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0017ff3:	0f b6 c0             	movzx  eax,al
c0017ff6:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c0017ffd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018002:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0018007:	40                   	inc    eax
c0018008:	a2 a0 0f 03 c0       	mov    ds:0xc0030fa0,al
c001800d:	e9 bb 01 00 00       	jmp    c00181cd <scanMADT()+0x469>
c0018012:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018017:	0f 85 e9 00 00 00    	jne    c0018106 <scanMADT()+0x3a2>
c001801d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018021:	8d 50 01             	lea    edx,[eax+0x1]
c0018024:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018028:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018030:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018034:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018038:	8d 50 01             	lea    edx,[eax+0x1]
c001803b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001803f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018043:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018047:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001804b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001804f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018053:	01 d0                	add    eax,edx
c0018055:	83 c0 2c             	add    eax,0x2c
c0018058:	8a 00                	mov    al,BYTE PTR [eax]
c001805a:	0f b6 d0             	movzx  edx,al
c001805d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018061:	8d 48 01             	lea    ecx,[eax+0x1]
c0018064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018068:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001806c:	0f b6 c0             	movzx  eax,al
c001806f:	c1 e0 08             	shl    eax,0x8
c0018072:	89 d1                	mov    ecx,edx
c0018074:	09 c1                	or     ecx,eax
c0018076:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807a:	8d 50 02             	lea    edx,[eax+0x2]
c001807d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018081:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018085:	0f b6 c0             	movzx  eax,al
c0018088:	c1 e0 10             	shl    eax,0x10
c001808b:	09 c1                	or     ecx,eax
c001808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018091:	8d 50 03             	lea    edx,[eax+0x3]
c0018094:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018098:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001809c:	0f b6 c0             	movzx  eax,al
c001809f:	c1 e0 18             	shl    eax,0x18
c00180a2:	09 c8                	or     eax,ecx
c00180a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180a8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b5:	01 d0                	add    eax,edx
c00180b7:	83 c0 2c             	add    eax,0x2c
c00180ba:	8a 00                	mov    al,BYTE PTR [eax]
c00180bc:	0f b6 c0             	movzx  eax,al
c00180bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180c3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ca:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180ce:	0f b6 d2             	movzx  edx,dl
c00180d1:	c1 e2 08             	shl    edx,0x8
c00180d4:	09 d0                	or     eax,edx
c00180d6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180db:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180e0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180e9:	88 90 60 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27a0],dl
c00180ef:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180f4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180f9:	66 89 84 12 80 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf080],ax
c0018101:	e9 c7 00 00 00       	jmp    c00181cd <scanMADT()+0x469>
c0018106:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001810b:	0f 85 b0 00 00 00    	jne    c00181c1 <scanMADT()+0x45d>
c0018111:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018115:	8d 50 01             	lea    edx,[eax+0x1]
c0018118:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001811c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018120:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018124:	0f b6 c0             	movzx  eax,al
c0018127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001812b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018133:	01 d0                	add    eax,edx
c0018135:	83 c0 2c             	add    eax,0x2c
c0018138:	8a 00                	mov    al,BYTE PTR [eax]
c001813a:	0f b6 d0             	movzx  edx,al
c001813d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018141:	8d 48 01             	lea    ecx,[eax+0x1]
c0018144:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018148:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001814c:	0f b6 c0             	movzx  eax,al
c001814f:	c1 e0 08             	shl    eax,0x8
c0018152:	09 d0                	or     eax,edx
c0018154:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018158:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001815d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018161:	8d 50 01             	lea    edx,[eax+0x1]
c0018164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018168:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018170:	0f b6 c0             	movzx  eax,al
c0018173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817b:	c1 e0 08             	shl    eax,0x8
c001817e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018182:	89 c1                	mov    ecx,eax
c0018184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018188:	c1 e0 18             	shl    eax,0x18
c001818b:	89 c3                	mov    ebx,eax
c001818d:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c0018192:	8d 50 01             	lea    edx,[eax+0x1]
c0018195:	89 15 f0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ef0,edx
c001819b:	09 d9                	or     ecx,ebx
c001819d:	89 ca                	mov    edx,ecx
c001819f:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c00181a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181b2:	68 f8 b6 02 c0       	push   0xc002b6f8
c00181b7:	e8 9d ad ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00181bc:	83 c4 10             	add    esp,0x10
c00181bf:	eb 0c                	jmp    c00181cd <scanMADT()+0x469>
c00181c1:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181c6:	75 05                	jne    c00181cd <scanMADT()+0x469>
c00181c8:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181cd:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181d6:	01 d0                	add    eax,edx
c00181d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181dc:	e9 54 fc ff ff       	jmp    c0017e35 <scanMADT()+0xd1>
c00181e1:	90                   	nop
c00181e2:	eb 01                	jmp    c00181e5 <scanMADT()+0x481>
c00181e4:	90                   	nop
c00181e5:	83 c4 38             	add    esp,0x38
c00181e8:	5b                   	pop    ebx
c00181e9:	c3                   	ret    

c00181ea <ACPI::ACPI()>:
c00181ea:	83 ec 0c             	sub    esp,0xc
c00181ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f1:	83 ec 08             	sub    esp,0x8
c00181f4:	68 9b b5 02 c0       	push   0xc002b59b
c00181f9:	50                   	push   eax
c00181fa:	e8 71 c3 ff ff       	call   c0014570 <Device::Device(char const*)>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0018207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820b:	89 10                	mov    DWORD PTR [eax],edx
c001820d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018211:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018238:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001823f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018243:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001824a:	e8 15 fb ff ff       	call   c0017d64 <scanMADT()>
c001824f:	90                   	nop
c0018250:	83 c4 0c             	add    esp,0xc
c0018253:	c3                   	ret    

c0018254 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018254:	83 ec 2c             	sub    esp,0x2c
c0018257:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001825b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001825f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018263:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018267:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001826c:	88 d0                	mov    al,dl
c001826e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018272:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018277:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001827f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018283:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018289:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001828d:	0f 8d 97 00 00 00    	jge    c001832a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018293:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001829b:	83 c2 2a             	add    edx,0x2a
c001829e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182a2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182a7:	75 78                	jne    c0018321 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182b1:	83 c2 2a             	add    edx,0x2a
c00182b4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182b8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182bc:	75 63                	jne    c0018321 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182be:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182c3:	74 3a                	je     c00182ff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182cd:	83 c2 2a             	add    edx,0x2a
c00182d0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182db:	39 c2                	cmp    edx,eax
c00182dd:	74 10                	je     c00182ef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182df:	83 ec 0c             	sub    esp,0xc
c00182e2:	68 34 b7 02 c0       	push   0xc002b734
c00182e7:	e8 0f 23 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	68 a0 b5 02 c0       	push   0xc002b5a0
c00182f7:	e8 ff 22 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018303:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018307:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830b:	83 c2 2a             	add    edx,0x2a
c001830e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018312:	8b 02                	mov    eax,DWORD PTR [edx]
c0018314:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018317:	89 01                	mov    DWORD PTR [ecx],eax
c0018319:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001831c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018321:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018325:	e9 55 ff ff ff       	jmp    c001827f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001832a:	90                   	nop
c001832b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832f:	83 c4 2c             	add    esp,0x2c
c0018332:	c2 04 00             	ret    0x4
c0018335:	90                   	nop

c0018336 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018336:	83 ec 1c             	sub    esp,0x1c
c0018339:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001833d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018341:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018345:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001834a:	88 c8                	mov    al,cl
c001834c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018350:	88 d0                	mov    al,dl
c0018352:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018364:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018367:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001836b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001836f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018373:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018379:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001837d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018380:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018384:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018393:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018397:	8d 48 01             	lea    ecx,[eax+0x1]
c001839a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839e:	83 c2 2a             	add    edx,0x2a
c00183a1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183ba:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183c8:	8d 50 01             	lea    edx,[eax+0x1]
c00183cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183df:	3d 00 02 00 00       	cmp    eax,0x200
c00183e4:	75 10                	jne    c00183f6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183e6:	83 ec 0c             	sub    esp,0xc
c00183e9:	68 af b5 02 c0       	push   0xc002b5af
c00183ee:	e8 08 22 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	90                   	nop
c00183f7:	83 c4 1c             	add    esp,0x1c
c00183fa:	c3                   	ret    
c00183fb:	90                   	nop

c00183fc <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183fc:	b8 00 00 00 00       	mov    eax,0x0
c0018401:	c3                   	ret    

c0018402 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018402:	83 ec 1c             	sub    esp,0x1c
c0018405:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018409:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001840c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018410:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018415:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001841a:	83 ec 08             	sub    esp,0x8
c001841d:	52                   	push   edx
c001841e:	50                   	push   eax
c001841f:	e8 34 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018424:	83 c4 10             	add    esp,0x10
c0018427:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001842b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018430:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018435:	83 ec 04             	sub    esp,0x4
c0018438:	6a 01                	push   0x1
c001843a:	52                   	push   edx
c001843b:	50                   	push   eax
c001843c:	e8 2d 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	90                   	nop
c0018445:	83 c4 1c             	add    esp,0x1c
c0018448:	c3                   	ret    
c0018449:	90                   	nop

c001844a <ACPI::open(int, int, void*)>:
c001844a:	53                   	push   ebx
c001844b:	83 ec 28             	sub    esp,0x28
c001844e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018452:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018459:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018464:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018469:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001846f:	83 e0 04             	and    eax,0x4
c0018472:	84 c0                	test   al,al
c0018474:	74 47                	je     c00184bd <ACPI::open(int, int, void*)+0x73>
c0018476:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001847b:	83 ec 08             	sub    esp,0x8
c001847e:	68 cc b5 02 c0       	push   0xc002b5cc
c0018483:	50                   	push   eax
c0018484:	e8 3f f8 ff ff       	call   c0017cc8 <findDataTable(unsigned char*, char*)>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018490:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018495:	74 26                	je     c00184bd <ACPI::open(int, int, void*)+0x73>
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	68 d1 b5 02 c0       	push   0xc002b5d1
c001849f:	e8 b5 aa ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ab:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184bd:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184c9:	8a 00                	mov    al,BYTE PTR [eax]
c00184cb:	3c 01                	cmp    al,0x1
c00184cd:	75 28                	jne    c00184f7 <ACPI::open(int, int, void*)+0xad>
c00184cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184de:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	68 e2 b5 02 c0       	push   0xc002b5e2
c00184ed:	e8 67 aa ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	eb 25                	jmp    c001851c <ACPI::open(int, int, void*)+0xd2>
c00184f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184fb:	8a 00                	mov    al,BYTE PTR [eax]
c00184fd:	3c 02                	cmp    al,0x2
c00184ff:	75 1b                	jne    c001851c <ACPI::open(int, int, void*)+0xd2>
c0018501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018505:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001850c:	83 ec 0c             	sub    esp,0xc
c001850f:	68 ea b5 02 c0       	push   0xc002b5ea
c0018514:	e8 40 aa ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018520:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018526:	83 f0 01             	xor    eax,0x1
c0018529:	84 c0                	test   al,al
c001852b:	74 6a                	je     c0018597 <ACPI::open(int, int, void*)+0x14d>
c001852d:	83 ec 0c             	sub    esp,0xc
c0018530:	68 f2 b5 02 c0       	push   0xc002b5f2
c0018535:	e8 1f aa ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	e8 0e 7c fe ff       	call   c0000150 <manualPCIProbe>
c0018542:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018546:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001854b:	75 28                	jne    c0018575 <ACPI::open(int, int, void*)+0x12b>
c001854d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018551:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018558:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018563:	83 ec 0c             	sub    esp,0xc
c0018566:	68 00 b6 02 c0       	push   0xc002b600
c001856b:	e8 e9 a9 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018570:	83 c4 10             	add    esp,0x10
c0018573:	eb 22                	jmp    c0018597 <ACPI::open(int, int, void*)+0x14d>
c0018575:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001857a:	75 1b                	jne    c0018597 <ACPI::open(int, int, void*)+0x14d>
c001857c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018580:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018587:	83 ec 0c             	sub    esp,0xc
c001858a:	68 0a b6 02 c0       	push   0xc002b60a
c001858f:	e8 c5 a9 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185a1:	84 c0                	test   al,al
c00185a3:	74 13                	je     c00185b8 <ACPI::open(int, int, void*)+0x16e>
c00185a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a9:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185af:	83 f0 01             	xor    eax,0x1
c00185b2:	0f b6 c0             	movzx  eax,al
c00185b5:	40                   	inc    eax
c00185b6:	eb 05                	jmp    c00185bd <ACPI::open(int, int, void*)+0x173>
c00185b8:	b8 00 00 00 00       	mov    eax,0x0
c00185bd:	83 ec 08             	sub    esp,0x8
c00185c0:	50                   	push   eax
c00185c1:	68 14 b6 02 c0       	push   0xc002b614
c00185c6:	e8 8e a9 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185d8:	84 c0                	test   al,al
c00185da:	74 67                	je     c0018643 <ACPI::open(int, int, void*)+0x1f9>
c00185dc:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185eb:	e8 50 72 ff ff       	call   c000f840 <malloc>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	89 c3                	mov    ebx,eax
c00185f5:	83 ec 0c             	sub    esp,0xc
c00185f8:	53                   	push   ebx
c00185f9:	e8 26 a3 00 00       	call   c0022924 <PCI::PCI()>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018609:	83 ec 08             	sub    esp,0x8
c001860c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018610:	50                   	push   eax
c0018611:	e8 6a bd ff ff       	call   c0014380 <Device::addChild(Device*)>
c0018616:	83 c4 10             	add    esp,0x10
c0018619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861d:	8b 00                	mov    eax,DWORD PTR [eax]
c001861f:	83 c0 08             	add    eax,0x8
c0018622:	8b 00                	mov    eax,DWORD PTR [eax]
c0018624:	6a 00                	push   0x0
c0018626:	6a 00                	push   0x0
c0018628:	6a 00                	push   0x0
c001862a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001862e:	ff d0                	call   eax
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	83 ec 0c             	sub    esp,0xc
c0018636:	68 1d b6 02 c0       	push   0xc002b61d
c001863b:	e8 19 a9 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018640:	83 c4 10             	add    esp,0x10
c0018643:	83 ec 0c             	sub    esp,0xc
c0018646:	68 28 b6 02 c0       	push   0xc002b628
c001864b:	e8 cb 46 00 00       	call   c001cd1b <Thr::loadKernelSymbolTable(char const*)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0018659:	83 ec 08             	sub    esp,0x8
c001865c:	6a 01                	push   0x1
c001865e:	68 46 b6 02 c0       	push   0xc002b646
c0018663:	e8 10 51 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	83 ec 08             	sub    esp,0x8
c001866e:	53                   	push   ebx
c001866f:	50                   	push   eax
c0018670:	e8 37 53 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0018675:	83 c4 10             	add    esp,0x10
c0018678:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c001867e:	83 ec 08             	sub    esp,0x8
c0018681:	6a 01                	push   0x1
c0018683:	68 63 b6 02 c0       	push   0xc002b663
c0018688:	e8 eb 50 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c001868d:	83 c4 10             	add    esp,0x10
c0018690:	83 ec 08             	sub    esp,0x8
c0018693:	53                   	push   ebx
c0018694:	50                   	push   eax
c0018695:	e8 12 53 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00186a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186a8:	83 e0 04             	and    eax,0x4
c00186ab:	84 c0                	test   al,al
c00186ad:	0f 84 d2 00 00 00    	je     c0018785 <ACPI::open(int, int, void*)+0x33b>
c00186b3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186c1:	e8 7a 71 ff ff       	call   c000f840 <malloc>
c00186c6:	83 c4 10             	add    esp,0x10
c00186c9:	89 c3                	mov    ebx,eax
c00186cb:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00186d0:	83 ec 04             	sub    esp,0x4
c00186d3:	50                   	push   eax
c00186d4:	68 80 b6 02 c0       	push   0xc002b680
c00186d9:	53                   	push   ebx
c00186da:	e8 d3 ad ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186eb:	74 17                	je     c0018704 <ACPI::open(int, int, void*)+0x2ba>
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186f4:	e8 8b b0 ff ff       	call   c0013784 <File::exists()>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	84 c0                	test   al,al
c00186fe:	74 04                	je     c0018704 <ACPI::open(int, int, void*)+0x2ba>
c0018700:	b0 01                	mov    al,0x1
c0018702:	eb 02                	jmp    c0018706 <ACPI::open(int, int, void*)+0x2bc>
c0018704:	b0 00                	mov    al,0x0
c0018706:	84 c0                	test   al,al
c0018708:	74 22                	je     c001872c <ACPI::open(int, int, void*)+0x2e2>
c001870a:	83 ec 08             	sub    esp,0x8
c001870d:	6a 01                	push   0x1
c001870f:	68 80 b6 02 c0       	push   0xc002b680
c0018714:	e8 5f 50 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0018719:	83 c4 10             	add    esp,0x10
c001871c:	83 ec 08             	sub    esp,0x8
c001871f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018723:	50                   	push   eax
c0018724:	e8 83 52 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018731:	74 1e                	je     c0018751 <ACPI::open(int, int, void*)+0x307>
c0018733:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018738:	74 17                	je     c0018751 <ACPI::open(int, int, void*)+0x307>
c001873a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001873e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018740:	83 c0 08             	add    eax,0x8
c0018743:	8b 00                	mov    eax,DWORD PTR [eax]
c0018745:	83 ec 0c             	sub    esp,0xc
c0018748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001874c:	ff d0                	call   eax
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0018756:	83 ec 08             	sub    esp,0x8
c0018759:	68 9d b6 02 c0       	push   0xc002b69d
c001875e:	50                   	push   eax
c001875f:	e8 64 f5 ff ff       	call   c0017cc8 <findDataTable(unsigned char*, char*)>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001876b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018770:	74 13                	je     c0018785 <ACPI::open(int, int, void*)+0x33b>
c0018772:	83 ec 08             	sub    esp,0x8
c0018775:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018779:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001877d:	e8 80 fc ff ff       	call   c0018402 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	b8 00 00 00 00       	mov    eax,0x0
c001878a:	83 c4 28             	add    esp,0x28
c001878d:	5b                   	pop    ebx
c001878e:	c3                   	ret    
c001878f:	90                   	nop

c0018790 <ACPI::sleep()>:
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	a1 c0 0c 03 c0       	mov    eax,ds:0xc0030cc0
c0018798:	85 c0                	test   eax,eax
c001879a:	74 07                	je     c00187a3 <ACPI::sleep()+0x13>
c001879c:	a1 c0 0c 03 c0       	mov    eax,ds:0xc0030cc0
c00187a1:	ff d0                	call   eax
c00187a3:	90                   	nop
c00187a4:	83 c4 0c             	add    esp,0xc
c00187a7:	c3                   	ret    

c00187a8 <CPU::close(int, int, void*)>:
c00187a8:	31 c0                	xor    eax,eax
c00187aa:	c3                   	ret    
c00187ab:	90                   	nop

c00187ac <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187ac:	55                   	push   ebp
c00187ad:	57                   	push   edi
c00187ae:	56                   	push   esi
c00187af:	53                   	push   ebx
c00187b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187b8:	89 ce                	mov    esi,ecx
c00187ba:	89 d5                	mov    ebp,edx
c00187bc:	80 f9 04             	cmp    cl,0x4
c00187bf:	75 28                	jne    c00187e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187c1:	8d 42 f9             	lea    eax,[edx-0x7]
c00187c4:	3c 03                	cmp    al,0x3
c00187c6:	0f 86 63 01 00 00    	jbe    c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187cc:	80 fa 03             	cmp    dl,0x3
c00187cf:	0f 84 5a 01 00 00    	je     c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187d5:	8d 7a f2             	lea    edi,[edx-0xe]
c00187d8:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00187dd:	89 fb                	mov    ebx,edi
c00187df:	80 fb 01             	cmp    bl,0x1
c00187e2:	77 4e                	ja     c0018832 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187e4:	e9 52 01 00 00       	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e9:	80 f9 05             	cmp    cl,0x5
c00187ec:	75 4d                	jne    c001883b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187ee:	b8 40 da 02 c0       	mov    eax,0xc002da40
c00187f3:	80 fa 03             	cmp    dl,0x3
c00187f6:	0f 86 3f 01 00 00    	jbe    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fc:	8d 7a fa             	lea    edi,[edx-0x6]
c00187ff:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018804:	89 fb                	mov    ebx,edi
c0018806:	80 fb 01             	cmp    bl,0x1
c0018809:	0f 86 2c 01 00 00    	jbe    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880f:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018814:	80 fa 08             	cmp    dl,0x8
c0018817:	0f 84 1e 01 00 00    	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881d:	89 d7                	mov    edi,edx
c001881f:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018824:	83 e7 fb             	and    edi,0xfffffffb
c0018827:	89 fb                	mov    ebx,edi
c0018829:	80 fb 09             	cmp    bl,0x9
c001882c:	0f 84 09 01 00 00    	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018832:	31 c0                	xor    eax,eax
c0018834:	89 eb                	mov    ebx,ebp
c0018836:	0f b6 fb             	movzx  edi,bl
c0018839:	eb 30                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001883b:	31 c0                	xor    eax,eax
c001883d:	80 f9 06             	cmp    cl,0x6
c0018840:	75 f2                	jne    c0018834 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018842:	80 fa 0a             	cmp    dl,0xa
c0018845:	77 ed                	ja     c0018834 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018847:	bf de 05 00 00       	mov    edi,0x5de
c001884c:	0f a3 d7             	bt     edi,edx
c001884f:	73 e3                	jae    c0018834 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018851:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018856:	e9 e0 00 00 00       	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885b:	39 c7                	cmp    edi,eax
c001885d:	0f 84 d3 00 00 00    	je     c0018936 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018863:	40                   	inc    eax
c0018864:	3d d0 00 00 00       	cmp    eax,0xd0
c0018869:	74 09                	je     c0018874 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001886b:	89 f3                	mov    ebx,esi
c001886d:	80 fb 0f             	cmp    bl,0xf
c0018870:	75 f1                	jne    c0018863 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018872:	eb e7                	jmp    c001885b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018874:	80 f9 10             	cmp    cl,0x10
c0018877:	75 14                	jne    c001888d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018879:	8d 42 fc             	lea    eax,[edx-0x4]
c001887c:	83 e0 fb             	and    eax,0xfffffffb
c001887f:	3c 02                	cmp    al,0x2
c0018881:	76 34                	jbe    c00188b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018883:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018888:	80 fa 02             	cmp    dl,0x2
c001888b:	eb 24                	jmp    c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001888d:	80 f9 11             	cmp    cl,0x11
c0018890:	75 13                	jne    c00188a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018892:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018897:	80 fa 03             	cmp    dl,0x3
c001889a:	0f 85 9b 00 00 00    	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a0:	e9 91 00 00 00       	jmp    c0018936 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188a5:	80 f9 12             	cmp    cl,0x12
c00188a8:	75 14                	jne    c00188be <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188aa:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188af:	fe ca                	dec    dl
c00188b1:	0f 85 84 00 00 00    	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b7:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00188bc:	eb 7d                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188be:	80 f9 14             	cmp    cl,0x14
c00188c1:	75 12                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188c3:	4a                   	dec    edx
c00188c4:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188c9:	80 fa 01             	cmp    dl,0x1
c00188cc:	77 6d                	ja     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ce:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c00188d3:	eb 66                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d5:	80 f9 15             	cmp    cl,0x15
c00188d8:	75 31                	jne    c001890b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188da:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c00188df:	80 fa 01             	cmp    dl,0x1
c00188e2:	74 57                	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e4:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188e9:	80 fa 13             	cmp    dl,0x13
c00188ec:	76 0c                	jbe    c00188fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188ee:	80 fa 30             	cmp    dl,0x30
c00188f1:	75 48                	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f3:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c00188f8:	eb 41                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fa:	b9 04 00 09 00       	mov    ecx,0x90004
c00188ff:	0f a3 d1             	bt     ecx,edx
c0018902:	73 37                	jae    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018904:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018909:	eb 30                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890b:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018910:	80 f9 16             	cmp    cl,0x16
c0018913:	75 26                	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018915:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c001891a:	84 d2                	test   dl,dl
c001891c:	74 1d                	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891e:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018923:	80 fa 30             	cmp    dl,0x30
c0018926:	75 13                	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018928:	b8 00 db 02 c0       	mov    eax,0xc002db00
c001892d:	eb 0c                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892f:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018934:	eb 05                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018936:	b8 90 da 02 c0       	mov    eax,0xc002da90
c001893b:	5b                   	pop    ebx
c001893c:	5e                   	pop    esi
c001893d:	5f                   	pop    edi
c001893e:	5d                   	pop    ebp
c001893f:	c3                   	ret    

c0018940 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018940:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018948:	80 f9 04             	cmp    cl,0x4
c001894b:	75 6b                	jne    c00189b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001894d:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018952:	80 fa 01             	cmp    dl,0x1
c0018955:	0f 86 92 02 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895b:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018960:	80 fa 02             	cmp    dl,0x2
c0018963:	0f 84 84 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018969:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c001896e:	80 fa 03             	cmp    dl,0x3
c0018971:	0f 84 76 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018977:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001897c:	80 fa 04             	cmp    dl,0x4
c001897f:	0f 84 68 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018985:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001898a:	80 fa 05             	cmp    dl,0x5
c001898d:	0f 84 5a 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018993:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018998:	80 fa 07             	cmp    dl,0x7
c001899b:	0f 84 4c 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a1:	83 ea 08             	sub    edx,0x8
c00189a4:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00189a9:	80 fa 01             	cmp    dl,0x1
c00189ac:	0f 87 3b 02 00 00    	ja     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b2:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189b7:	c3                   	ret    
c00189b8:	80 f9 05             	cmp    cl,0x5
c00189bb:	75 45                	jne    c0018a02 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189bd:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189c0:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00189c5:	80 f9 02             	cmp    cl,0x2
c00189c8:	0f 86 1f 02 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ce:	80 fa 04             	cmp    dl,0x4
c00189d1:	0f 84 f3 01 00 00    	je     c0018bca <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189d7:	80 fa 07             	cmp    dl,0x7
c00189da:	0f 84 0d 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e0:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00189e5:	80 fa 08             	cmp    dl,0x8
c00189e8:	0f 84 ff 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ee:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00189f3:	80 fa 09             	cmp    dl,0x9
c00189f6:	0f 85 f1 01 00 00    	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fc:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a01:	c3                   	ret    
c0018a02:	80 f9 06             	cmp    cl,0x6
c0018a05:	0f 85 85 01 00 00    	jne    c0018b90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a0b:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a10:	80 fa 01             	cmp    dl,0x1
c0018a13:	0f 84 d4 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a1c:	3c 01                	cmp    al,0x1
c0018a1e:	0f 86 ac 01 00 00    	jbe    c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a24:	80 fa 03             	cmp    dl,0x3
c0018a27:	0f 84 a3 01 00 00    	je     c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a2d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a30:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a35:	80 f9 01             	cmp    cl,0x1
c0018a38:	0f 86 af 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3e:	80 fa 09             	cmp    dl,0x9
c0018a41:	0f 84 8f 01 00 00    	je     c0018bd6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a47:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a4a:	80 f9 01             	cmp    cl,0x1
c0018a4d:	0f 86 9a 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a53:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a58:	80 fa 0d             	cmp    dl,0xd
c0018a5b:	0f 84 8c 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a61:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a66:	80 fa 0e             	cmp    dl,0xe
c0018a69:	0f 84 7e 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6f:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a74:	80 fa 0f             	cmp    dl,0xf
c0018a77:	0f 84 70 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7d:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a82:	80 fa 15             	cmp    dl,0x15
c0018a85:	0f 84 62 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a8e:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a93:	80 f9 01             	cmp    cl,0x1
c0018a96:	0f 86 51 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	80 fa 1a             	cmp    dl,0x1a
c0018a9f:	0f 84 37 01 00 00    	je     c0018bdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018aa5:	80 fa 1c             	cmp    dl,0x1c
c0018aa8:	0f 84 34 01 00 00    	je     c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018aae:	80 fa 1d             	cmp    dl,0x1d
c0018ab1:	0f 84 36 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab7:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018abc:	80 fa 25             	cmp    dl,0x25
c0018abf:	0f 84 28 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac5:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ac8:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018acd:	80 f9 01             	cmp    cl,0x1
c0018ad0:	0f 86 17 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad6:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018adb:	80 fa 2a             	cmp    dl,0x2a
c0018ade:	0f 84 09 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae4:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018ae9:	80 fa 2c             	cmp    dl,0x2c
c0018aec:	0f 84 fb 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af2:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018af7:	80 fa 2d             	cmp    dl,0x2d
c0018afa:	0f 84 ed 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b00:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b05:	80 fa 2e             	cmp    dl,0x2e
c0018b08:	0f 84 df 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0e:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b13:	80 fa 2f             	cmp    dl,0x2f
c0018b16:	0f 84 d1 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b1f:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b24:	80 f9 01             	cmp    cl,0x1
c0018b27:	0f 86 c0 00 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b32:	80 fa 37             	cmp    dl,0x37
c0018b35:	0f 84 b2 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3b:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b40:	80 fa 3a             	cmp    dl,0x3a
c0018b43:	0f 84 a4 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b49:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b4e:	80 fa 3c             	cmp    dl,0x3c
c0018b51:	0f 84 96 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b57:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b5c:	80 fa 3d             	cmp    dl,0x3d
c0018b5f:	0f 84 88 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b65:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b6a:	80 fa 3e             	cmp    dl,0x3e
c0018b6d:	74 7e                	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b72:	3c 01                	cmp    al,0x1
c0018b74:	76 72                	jbe    c0018be8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b76:	80 fa 3f             	cmp    dl,0x3f
c0018b79:	74 6d                	je     c0018be8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b7b:	80 fa 4a             	cmp    dl,0x4a
c0018b7e:	74 0a                	je     c0018b8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b80:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018b85:	80 fa 4d             	cmp    dl,0x4d
c0018b88:	75 63                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8a:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b8f:	c3                   	ret    
c0018b90:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018b95:	80 f9 0b             	cmp    cl,0xb
c0018b98:	75 0a                	jne    c0018ba4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b9a:	fe ca                	dec    dl
c0018b9c:	75 4f                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9e:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018ba3:	c3                   	ret    
c0018ba4:	80 f9 0f             	cmp    cl,0xf
c0018ba7:	75 44                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba9:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018bae:	80 fa 02             	cmp    dl,0x2
c0018bb1:	76 3a                	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb3:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bb6:	3c 01                	cmp    al,0x1
c0018bb8:	76 0a                	jbe    c0018bc4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bba:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018bbf:	80 fa 06             	cmp    dl,0x6
c0018bc2:	75 29                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc4:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018bc9:	c3                   	ret    
c0018bca:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018bcf:	c3                   	ret    
c0018bd0:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018bd5:	c3                   	ret    
c0018bd6:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018bdb:	c3                   	ret    
c0018bdc:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018be1:	c3                   	ret    
c0018be2:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018be7:	c3                   	ret    
c0018be8:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018bed:	c3                   	ret    

c0018bee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bee:	60                   	pusha  
c0018bef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bfb:	9c                   	pushf  
c0018bfc:	fa                   	cli    
c0018bfd:	0f 09                	wbinvd 
c0018bff:	0f 30                	wrmsr  
c0018c01:	9d                   	popf   
c0018c02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c06:	89 02                	mov    DWORD PTR [edx],eax
c0018c08:	61                   	popa   
c0018c09:	c3                   	ret    

c0018c0a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c0a:	60                   	pusha  
c0018c0b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c0f:	9c                   	pushf  
c0018c10:	fa                   	cli    
c0018c11:	0f 09                	wbinvd 
c0018c13:	31 c0                	xor    eax,eax
c0018c15:	31 d2                	xor    edx,edx
c0018c17:	0f 32                	rdmsr  
c0018c19:	9d                   	popf   
c0018c1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c1e:	89 02                	mov    DWORD PTR [edx],eax
c0018c20:	61                   	popa   
c0018c21:	c3                   	ret    

c0018c22 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c22:	56                   	push   esi
c0018c23:	53                   	push   ebx
c0018c24:	83 ec 10             	sub    esp,0x10
c0018c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c2b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c30:	75 5d                	jne    c0018c8f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c32:	83 f8 08             	cmp    eax,0x8
c0018c35:	75 09                	jne    c0018c40 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c37:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c3c:	7e 13                	jle    c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c3e:	eb 30                	jmp    c0018c70 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c40:	83 f8 06             	cmp    eax,0x6
c0018c43:	7c 4a                	jl     c0018c8f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c45:	83 f8 07             	cmp    eax,0x7
c0018c48:	7e 07                	jle    c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c4a:	83 f8 09             	cmp    eax,0x9
c0018c4d:	74 21                	je     c0018c70 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c4f:	eb 3e                	jmp    c0018c8f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c51:	89 e6                	mov    esi,esp
c0018c53:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0018c59:	56                   	push   esi
c0018c5a:	c1 eb 15             	shr    ebx,0x15
c0018c5d:	68 82 00 00 c0       	push   0xc0000082
c0018c62:	83 e3 7e             	and    ebx,0x7e
c0018c65:	e8 a0 ff ff ff       	call   c0018c0a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c6a:	56                   	push   esi
c0018c6b:	6a 00                	push   0x0
c0018c6d:	53                   	push   ebx
c0018c6e:	eb 12                	jmp    c0018c82 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c70:	89 e3                	mov    ebx,esp
c0018c72:	53                   	push   ebx
c0018c73:	68 82 00 00 c0       	push   0xc0000082
c0018c78:	e8 8d ff ff ff       	call   c0018c0a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c7d:	53                   	push   ebx
c0018c7e:	6a 00                	push   0x0
c0018c80:	6a 00                	push   0x0
c0018c82:	68 82 00 00 c0       	push   0xc0000082
c0018c87:	e8 62 ff ff ff       	call   c0018bee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c8c:	83 c4 18             	add    esp,0x18
c0018c8f:	83 c4 10             	add    esp,0x10
c0018c92:	5b                   	pop    ebx
c0018c93:	5e                   	pop    esi
c0018c94:	c3                   	ret    
c0018c95:	90                   	nop

c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c96:	55                   	push   ebp
c0018c97:	57                   	push   edi
c0018c98:	56                   	push   esi
c0018c99:	53                   	push   ebx
c0018c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ca2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ca6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018caa:	39 05 20 db 02 c0    	cmp    DWORD PTR ds:0xc002db20,eax
c0018cb0:	75 23                	jne    c0018cd5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cb2:	a1 4c 11 03 c0       	mov    eax,ds:0xc003114c
c0018cb7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cbb:	89 06                	mov    DWORD PTR [esi],eax
c0018cbd:	a1 48 11 03 c0       	mov    eax,ds:0xc0031148
c0018cc2:	89 07                	mov    DWORD PTR [edi],eax
c0018cc4:	a1 44 11 03 c0       	mov    eax,ds:0xc0031144
c0018cc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ccc:	a1 40 11 03 c0       	mov    eax,ds:0xc0031140
c0018cd1:	89 02                	mov    DWORD PTR [edx],eax
c0018cd3:	eb 3f                	jmp    c0018d14 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cd5:	31 c9                	xor    ecx,ecx
c0018cd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cdb:	0f a2                	cpuid  
c0018cdd:	89 06                	mov    DWORD PTR [esi],eax
c0018cdf:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ce5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018ce8:	89 10                	mov    DWORD PTR [eax],edx
c0018cea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cee:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c0018cf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cf5:	a3 4c 11 03 c0       	mov    ds:0xc003114c,eax
c0018cfa:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cfc:	a3 48 11 03 c0       	mov    ds:0xc0031148,eax
c0018d01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d04:	a3 44 11 03 c0       	mov    ds:0xc0031144,eax
c0018d09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d0f:	a3 40 11 03 c0       	mov    ds:0xc0031140,eax
c0018d14:	5b                   	pop    ebx
c0018d15:	5e                   	pop    esi
c0018d16:	5f                   	pop    edi
c0018d17:	5d                   	pop    ebp
c0018d18:	c3                   	ret    
c0018d19:	90                   	nop

c0018d1a <CPU::cpuidCheckEDX(unsigned int)>:
c0018d1a:	83 ec 10             	sub    esp,0x10
c0018d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d21:	50                   	push   eax
c0018d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d26:	50                   	push   eax
c0018d27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2b:	50                   	push   eax
c0018d2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d30:	50                   	push   eax
c0018d31:	6a 01                	push   0x1
c0018d33:	e8 5e ff ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d3c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d40:	0f 95 c0             	setne  al
c0018d43:	83 c4 24             	add    esp,0x24
c0018d46:	c3                   	ret    
c0018d47:	90                   	nop

c0018d48 <CPU::cpuidCheckECX(unsigned int)>:
c0018d48:	83 ec 10             	sub    esp,0x10
c0018d4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4f:	50                   	push   eax
c0018d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d54:	50                   	push   eax
c0018d55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d59:	50                   	push   eax
c0018d5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5e:	50                   	push   eax
c0018d5f:	6a 01                	push   0x1
c0018d61:	e8 30 ff ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d6a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d6e:	0f 95 c0             	setne  al
c0018d71:	83 c4 24             	add    esp,0x24
c0018d74:	c3                   	ret    
c0018d75:	90                   	nop

c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d76:	83 ec 10             	sub    esp,0x10
c0018d79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7d:	50                   	push   eax
c0018d7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d82:	50                   	push   eax
c0018d83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d87:	50                   	push   eax
c0018d88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8c:	50                   	push   eax
c0018d8d:	6a 07                	push   0x7
c0018d8f:	e8 02 ff ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d98:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d9c:	0f 95 c0             	setne  al
c0018d9f:	83 c4 24             	add    esp,0x24
c0018da2:	c3                   	ret    
c0018da3:	90                   	nop

c0018da4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018da4:	83 ec 10             	sub    esp,0x10
c0018da7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dab:	50                   	push   eax
c0018dac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db0:	50                   	push   eax
c0018db1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db5:	50                   	push   eax
c0018db6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dba:	50                   	push   eax
c0018dbb:	6a 07                	push   0x7
c0018dbd:	e8 d4 fe ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dca:	0f 95 c0             	setne  al
c0018dcd:	83 c4 24             	add    esp,0x24
c0018dd0:	c3                   	ret    
c0018dd1:	90                   	nop

c0018dd2 <CPU::CPU()>:
c0018dd2:	83 ec 0c             	sub    esp,0xc
c0018dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd9:	83 ec 08             	sub    esp,0x8
c0018ddc:	68 82 ba 02 c0       	push   0xc002ba82
c0018de1:	50                   	push   eax
c0018de2:	e8 89 b7 ff ff       	call   c0014570 <Device::Device(char const*)>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	ba 5c bb 02 c0       	mov    edx,0xc002bb5c
c0018def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df3:	89 10                	mov    DWORD PTR [eax],edx
c0018df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e07:	05 78 01 00 00       	add    eax,0x178
c0018e0c:	83 ec 0c             	sub    esp,0xc
c0018e0f:	50                   	push   eax
c0018e10:	e8 43 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1c:	05 7c 09 00 00       	add    eax,0x97c
c0018e21:	83 ec 0c             	sub    esp,0xc
c0018e24:	50                   	push   eax
c0018e25:	e8 90 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e2a:	83 c4 10             	add    esp,0x10
c0018e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e31:	05 7c 11 00 00       	add    eax,0x117c
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	50                   	push   eax
c0018e3a:	e8 7d 86 ff ff       	call   c00114bc <TSS::TSS()>
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e46:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e51:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e5b:	90                   	nop
c0018e5c:	83 c4 0c             	add    esp,0xc
c0018e5f:	c3                   	ret    

c0018e60 <CPU::displayFeatures()>:
c0018e60:	53                   	push   ebx
c0018e61:	83 ec 10             	sub    esp,0x10
c0018e64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e68:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e6e:	68 90 b7 02 c0       	push   0xc002b790
c0018e73:	e8 e1 a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018e78:	59                   	pop    ecx
c0018e79:	58                   	pop    eax
c0018e7a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e80:	50                   	push   eax
c0018e81:	68 a1 b7 02 c0       	push   0xc002b7a1
c0018e86:	e8 ce a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018e8b:	58                   	pop    eax
c0018e8c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e92:	5a                   	pop    edx
c0018e93:	c1 e8 0e             	shr    eax,0xe
c0018e96:	0f b6 c0             	movzx  eax,al
c0018e99:	50                   	push   eax
c0018e9a:	68 b2 b7 02 c0       	push   0xc002b7b2
c0018e9f:	e8 b5 a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018ea4:	59                   	pop    ecx
c0018ea5:	58                   	pop    eax
c0018ea6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eac:	66 c1 e8 06          	shr    ax,0x6
c0018eb0:	0f b6 c0             	movzx  eax,al
c0018eb3:	50                   	push   eax
c0018eb4:	68 c3 b7 02 c0       	push   0xc002b7c3
c0018eb9:	e8 9b a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018ebe:	c7 04 24 70 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc70
c0018ec5:	e8 8f a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018eca:	83 c4 10             	add    esp,0x10
c0018ecd:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018ed2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ed9:	74 05                	je     c0018ee0 <CPU::displayFeatures()+0x80>
c0018edb:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018ee0:	52                   	push   edx
c0018ee1:	52                   	push   edx
c0018ee2:	50                   	push   eax
c0018ee3:	68 d4 b7 02 c0       	push   0xc002b7d4
c0018ee8:	e8 6c a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018ef5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018efc:	78 05                	js     c0018f03 <CPU::displayFeatures()+0xa3>
c0018efe:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f03:	51                   	push   ecx
c0018f04:	51                   	push   ecx
c0018f05:	50                   	push   eax
c0018f06:	68 eb b7 02 c0       	push   0xc002b7eb
c0018f0b:	e8 49 a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f18:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f1f:	75 05                	jne    c0018f26 <CPU::displayFeatures()+0xc6>
c0018f21:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f26:	52                   	push   edx
c0018f27:	52                   	push   edx
c0018f28:	50                   	push   eax
c0018f29:	68 02 b8 02 c0       	push   0xc002b802
c0018f2e:	e8 26 a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018f33:	83 c4 10             	add    esp,0x10
c0018f36:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f3b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f42:	75 05                	jne    c0018f49 <CPU::displayFeatures()+0xe9>
c0018f44:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f49:	51                   	push   ecx
c0018f4a:	51                   	push   ecx
c0018f4b:	50                   	push   eax
c0018f4c:	68 19 b8 02 c0       	push   0xc002b819
c0018f51:	e8 03 a0 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f5e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f65:	75 05                	jne    c0018f6c <CPU::displayFeatures()+0x10c>
c0018f67:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f6c:	52                   	push   edx
c0018f6d:	52                   	push   edx
c0018f6e:	50                   	push   eax
c0018f6f:	68 30 b8 02 c0       	push   0xc002b830
c0018f74:	e8 e0 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018f79:	83 c4 10             	add    esp,0x10
c0018f7c:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f81:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f88:	75 05                	jne    c0018f8f <CPU::displayFeatures()+0x12f>
c0018f8a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f8f:	51                   	push   ecx
c0018f90:	51                   	push   ecx
c0018f91:	50                   	push   eax
c0018f92:	68 47 b8 02 c0       	push   0xc002b847
c0018f97:	e8 bd 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fa4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fab:	75 05                	jne    c0018fb2 <CPU::displayFeatures()+0x152>
c0018fad:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fb2:	52                   	push   edx
c0018fb3:	52                   	push   edx
c0018fb4:	50                   	push   eax
c0018fb5:	68 5e b8 02 c0       	push   0xc002b85e
c0018fba:	e8 9a 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fc7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fce:	75 05                	jne    c0018fd5 <CPU::displayFeatures()+0x175>
c0018fd0:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fd5:	51                   	push   ecx
c0018fd6:	51                   	push   ecx
c0018fd7:	50                   	push   eax
c0018fd8:	68 75 b8 02 c0       	push   0xc002b875
c0018fdd:	e8 77 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fea:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ff1:	75 05                	jne    c0018ff8 <CPU::displayFeatures()+0x198>
c0018ff3:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018ff8:	52                   	push   edx
c0018ff9:	52                   	push   edx
c0018ffa:	50                   	push   eax
c0018ffb:	68 8c b8 02 c0       	push   0xc002b88c
c0019000:	e8 54 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0019005:	83 c4 10             	add    esp,0x10
c0019008:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001900d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019014:	75 05                	jne    c001901b <CPU::displayFeatures()+0x1bb>
c0019016:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c001901b:	51                   	push   ecx
c001901c:	51                   	push   ecx
c001901d:	50                   	push   eax
c001901e:	68 a3 b8 02 c0       	push   0xc002b8a3
c0019023:	e8 31 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019030:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019037:	75 05                	jne    c001903e <CPU::displayFeatures()+0x1de>
c0019039:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c001903e:	52                   	push   edx
c001903f:	52                   	push   edx
c0019040:	50                   	push   eax
c0019041:	68 ba b8 02 c0       	push   0xc002b8ba
c0019046:	e8 0e 9f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001904b:	83 c4 10             	add    esp,0x10
c001904e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019053:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001905a:	75 05                	jne    c0019061 <CPU::displayFeatures()+0x201>
c001905c:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019061:	51                   	push   ecx
c0019062:	51                   	push   ecx
c0019063:	50                   	push   eax
c0019064:	68 d1 b8 02 c0       	push   0xc002b8d1
c0019069:	e8 eb 9e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019076:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001907d:	75 05                	jne    c0019084 <CPU::displayFeatures()+0x224>
c001907f:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019084:	52                   	push   edx
c0019085:	52                   	push   edx
c0019086:	50                   	push   eax
c0019087:	68 e8 b8 02 c0       	push   0xc002b8e8
c001908c:	e8 c8 9e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019099:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190a0:	78 05                	js     c00190a7 <CPU::displayFeatures()+0x247>
c00190a2:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190a7:	51                   	push   ecx
c00190a8:	51                   	push   ecx
c00190a9:	50                   	push   eax
c00190aa:	68 ff b8 02 c0       	push   0xc002b8ff
c00190af:	e8 a5 9e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190bc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190c3:	75 05                	jne    c00190ca <CPU::displayFeatures()+0x26a>
c00190c5:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190ca:	52                   	push   edx
c00190cb:	52                   	push   edx
c00190cc:	50                   	push   eax
c00190cd:	68 16 b9 02 c0       	push   0xc002b916
c00190d2:	e8 82 9e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00190d7:	83 c4 18             	add    esp,0x18
c00190da:	5b                   	pop    ebx
c00190db:	c3                   	ret    

c00190dc <CPU::detectFeatures()>:
c00190dc:	55                   	push   ebp
c00190dd:	57                   	push   edi
c00190de:	56                   	push   esi
c00190df:	53                   	push   ebx
c00190e0:	83 ec 50             	sub    esp,0x50
c00190e3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190e7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190f1:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190f8:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190fe:	6a 0d                	push   0xd
c0019100:	6a 00                	push   0x0
c0019102:	57                   	push   edi
c0019103:	e8 70 76 fe ff       	call   c0000778 <memset>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019110:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019117:	0f 84 20 09 00 00    	je     c0019a3d <CPU::detectFeatures()+0x961>
c001911d:	83 ec 0c             	sub    esp,0xc
c0019120:	6a 10                	push   0x10
c0019122:	e8 f3 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019127:	83 e0 01             	and    eax,0x1
c001912a:	8d 14 00             	lea    edx,[eax+eax*1]
c001912d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019133:	83 e0 fd             	and    eax,0xfffffffd
c0019136:	09 d0                	or     eax,edx
c0019138:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001913e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019145:	e8 d0 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c001914a:	83 e0 01             	and    eax,0x1
c001914d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019154:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915a:	83 e0 fb             	and    eax,0xfffffffb
c001915d:	09 d0                	or     eax,edx
c001915f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019165:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001916c:	e8 a9 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019171:	83 e0 01             	and    eax,0x1
c0019174:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001917b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019181:	83 e0 f7             	and    eax,0xfffffff7
c0019184:	09 d0                	or     eax,edx
c0019186:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019193:	e8 82 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019198:	83 e0 01             	and    eax,0x1
c001919b:	c1 e0 04             	shl    eax,0x4
c001919e:	88 c2                	mov    dl,al
c00191a0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a6:	83 e0 ef             	and    eax,0xffffffef
c00191a9:	09 d0                	or     eax,edx
c00191ab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191b8:	e8 5d fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c00191bd:	83 e0 01             	and    eax,0x1
c00191c0:	c1 e0 05             	shl    eax,0x5
c00191c3:	88 c2                	mov    dl,al
c00191c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cb:	83 e0 df             	and    eax,0xffffffdf
c00191ce:	09 d0                	or     eax,edx
c00191d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191dd:	e8 38 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c00191e2:	83 e0 01             	and    eax,0x1
c00191e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00191e8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191ee:	83 e0 fd             	and    eax,0xfffffffd
c00191f1:	09 d0                	or     eax,edx
c00191f3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191f9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019200:	e8 15 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019205:	83 e0 01             	and    eax,0x1
c0019208:	c1 e0 06             	shl    eax,0x6
c001920b:	88 c2                	mov    dl,al
c001920d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019213:	83 e0 bf             	and    eax,0xffffffbf
c0019216:	09 d0                	or     eax,edx
c0019218:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001921e:	58                   	pop    eax
c001921f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019223:	56                   	push   esi
c0019224:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019228:	55                   	push   ebp
c0019229:	8d 44 24 28          	lea    eax,[esp+0x28]
c001922d:	50                   	push   eax
c001922e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019232:	52                   	push   edx
c0019233:	6a 00                	push   0x0
c0019235:	e8 5c fa ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001923a:	83 c4 1c             	add    esp,0x1c
c001923d:	6a 04                	push   0x4
c001923f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019243:	50                   	push   eax
c0019244:	57                   	push   edi
c0019245:	e8 fa 74 fe ff       	call   c0000744 <memcpy>
c001924a:	83 c4 0c             	add    esp,0xc
c001924d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019253:	6a 04                	push   0x4
c0019255:	56                   	push   esi
c0019256:	50                   	push   eax
c0019257:	e8 e8 74 fe ff       	call   c0000744 <memcpy>
c001925c:	83 c4 0c             	add    esp,0xc
c001925f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019265:	6a 04                	push   0x4
c0019267:	55                   	push   ebp
c0019268:	50                   	push   eax
c0019269:	e8 d6 74 fe ff       	call   c0000744 <memcpy>
c001926e:	58                   	pop    eax
c001926f:	5a                   	pop    edx
c0019270:	68 2d b9 02 c0       	push   0xc002b92d
c0019275:	57                   	push   edi
c0019276:	e8 45 76 fe ff       	call   c00008c0 <strcmp>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	85 c0                	test   eax,eax
c0019280:	75 0f                	jne    c0019291 <CPU::detectFeatures()+0x1b5>
c0019282:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001928c:	e9 22 02 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c0019291:	50                   	push   eax
c0019292:	50                   	push   eax
c0019293:	68 3a b9 02 c0       	push   0xc002b93a
c0019298:	57                   	push   edi
c0019299:	e8 22 76 fe ff       	call   c00008c0 <strcmp>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	85 c0                	test   eax,eax
c00192a3:	74 dd                	je     c0019282 <CPU::detectFeatures()+0x1a6>
c00192a5:	51                   	push   ecx
c00192a6:	51                   	push   ecx
c00192a7:	68 47 b9 02 c0       	push   0xc002b947
c00192ac:	57                   	push   edi
c00192ad:	e8 0e 76 fe ff       	call   c00008c0 <strcmp>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	85 c0                	test   eax,eax
c00192b7:	74 2a                	je     c00192e3 <CPU::detectFeatures()+0x207>
c00192b9:	52                   	push   edx
c00192ba:	52                   	push   edx
c00192bb:	68 54 b9 02 c0       	push   0xc002b954
c00192c0:	57                   	push   edi
c00192c1:	e8 fa 75 fe ff       	call   c00008c0 <strcmp>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	85 c0                	test   eax,eax
c00192cb:	74 16                	je     c00192e3 <CPU::detectFeatures()+0x207>
c00192cd:	50                   	push   eax
c00192ce:	50                   	push   eax
c00192cf:	68 61 b9 02 c0       	push   0xc002b961
c00192d4:	57                   	push   edi
c00192d5:	e8 e6 75 fe ff       	call   c00008c0 <strcmp>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	85 c0                	test   eax,eax
c00192df:	74 48                	je     c0019329 <CPU::detectFeatures()+0x24d>
c00192e1:	eb 0f                	jmp    c00192f2 <CPU::detectFeatures()+0x216>
c00192e3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192ed:	e9 c1 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00192f2:	50                   	push   eax
c00192f3:	50                   	push   eax
c00192f4:	68 6e b9 02 c0       	push   0xc002b96e
c00192f9:	57                   	push   edi
c00192fa:	e8 c1 75 fe ff       	call   c00008c0 <strcmp>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	85 c0                	test   eax,eax
c0019304:	74 23                	je     c0019329 <CPU::detectFeatures()+0x24d>
c0019306:	50                   	push   eax
c0019307:	50                   	push   eax
c0019308:	68 7b b9 02 c0       	push   0xc002b97b
c001930d:	57                   	push   edi
c001930e:	e8 ad 75 fe ff       	call   c00008c0 <strcmp>
c0019313:	83 c4 10             	add    esp,0x10
c0019316:	85 c0                	test   eax,eax
c0019318:	75 1e                	jne    c0019338 <CPU::detectFeatures()+0x25c>
c001931a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019324:	e9 8a 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c0019329:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019333:	e9 7b 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c0019338:	50                   	push   eax
c0019339:	50                   	push   eax
c001933a:	68 88 b9 02 c0       	push   0xc002b988
c001933f:	57                   	push   edi
c0019340:	e8 7b 75 fe ff       	call   c00008c0 <strcmp>
c0019345:	83 c4 10             	add    esp,0x10
c0019348:	85 c0                	test   eax,eax
c001934a:	75 0f                	jne    c001935b <CPU::detectFeatures()+0x27f>
c001934c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019356:	e9 58 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001935b:	50                   	push   eax
c001935c:	50                   	push   eax
c001935d:	68 47 b9 02 c0       	push   0xc002b947
c0019362:	57                   	push   edi
c0019363:	e8 58 75 fe ff       	call   c00008c0 <strcmp>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	85 c0                	test   eax,eax
c001936d:	75 0f                	jne    c001937e <CPU::detectFeatures()+0x2a2>
c001936f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019379:	e9 35 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001937e:	50                   	push   eax
c001937f:	50                   	push   eax
c0019380:	68 95 b9 02 c0       	push   0xc002b995
c0019385:	57                   	push   edi
c0019386:	e8 35 75 fe ff       	call   c00008c0 <strcmp>
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	85 c0                	test   eax,eax
c0019390:	75 0f                	jne    c00193a1 <CPU::detectFeatures()+0x2c5>
c0019392:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001939c:	e9 12 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00193a1:	51                   	push   ecx
c00193a2:	51                   	push   ecx
c00193a3:	68 a2 b9 02 c0       	push   0xc002b9a2
c00193a8:	57                   	push   edi
c00193a9:	e8 12 75 fe ff       	call   c00008c0 <strcmp>
c00193ae:	83 c4 10             	add    esp,0x10
c00193b1:	85 c0                	test   eax,eax
c00193b3:	75 0f                	jne    c00193c4 <CPU::detectFeatures()+0x2e8>
c00193b5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193bf:	e9 ef 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00193c4:	52                   	push   edx
c00193c5:	52                   	push   edx
c00193c6:	68 af b9 02 c0       	push   0xc002b9af
c00193cb:	57                   	push   edi
c00193cc:	e8 ef 74 fe ff       	call   c00008c0 <strcmp>
c00193d1:	83 c4 10             	add    esp,0x10
c00193d4:	85 c0                	test   eax,eax
c00193d6:	75 0f                	jne    c00193e7 <CPU::detectFeatures()+0x30b>
c00193d8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193e2:	e9 cc 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00193e7:	50                   	push   eax
c00193e8:	50                   	push   eax
c00193e9:	68 bc b9 02 c0       	push   0xc002b9bc
c00193ee:	57                   	push   edi
c00193ef:	e8 cc 74 fe ff       	call   c00008c0 <strcmp>
c00193f4:	83 c4 10             	add    esp,0x10
c00193f7:	85 c0                	test   eax,eax
c00193f9:	75 0f                	jne    c001940a <CPU::detectFeatures()+0x32e>
c00193fb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019405:	e9 a9 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001940a:	50                   	push   eax
c001940b:	50                   	push   eax
c001940c:	68 c9 b9 02 c0       	push   0xc002b9c9
c0019411:	57                   	push   edi
c0019412:	e8 a9 74 fe ff       	call   c00008c0 <strcmp>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	85 c0                	test   eax,eax
c001941c:	75 0f                	jne    c001942d <CPU::detectFeatures()+0x351>
c001941e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019428:	e9 86 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001942d:	50                   	push   eax
c001942e:	50                   	push   eax
c001942f:	68 d6 b9 02 c0       	push   0xc002b9d6
c0019434:	57                   	push   edi
c0019435:	e8 86 74 fe ff       	call   c00008c0 <strcmp>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	85 c0                	test   eax,eax
c001943f:	75 0c                	jne    c001944d <CPU::detectFeatures()+0x371>
c0019441:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001944b:	eb 66                	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001944d:	50                   	push   eax
c001944e:	50                   	push   eax
c001944f:	68 e3 b9 02 c0       	push   0xc002b9e3
c0019454:	57                   	push   edi
c0019455:	e8 66 74 fe ff       	call   c00008c0 <strcmp>
c001945a:	83 c4 10             	add    esp,0x10
c001945d:	85 c0                	test   eax,eax
c001945f:	75 0c                	jne    c001946d <CPU::detectFeatures()+0x391>
c0019461:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001946b:	eb 46                	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001946d:	50                   	push   eax
c001946e:	50                   	push   eax
c001946f:	68 f0 b9 02 c0       	push   0xc002b9f0
c0019474:	57                   	push   edi
c0019475:	e8 46 74 fe ff       	call   c00008c0 <strcmp>
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	85 c0                	test   eax,eax
c001947f:	74 e0                	je     c0019461 <CPU::detectFeatures()+0x385>
c0019481:	50                   	push   eax
c0019482:	50                   	push   eax
c0019483:	68 fd b9 02 c0       	push   0xc002b9fd
c0019488:	57                   	push   edi
c0019489:	e8 32 74 fe ff       	call   c00008c0 <strcmp>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	85 c0                	test   eax,eax
c0019493:	74 cc                	je     c0019461 <CPU::detectFeatures()+0x385>
c0019495:	51                   	push   ecx
c0019496:	51                   	push   ecx
c0019497:	68 0a ba 02 c0       	push   0xc002ba0a
c001949c:	57                   	push   edi
c001949d:	e8 1e 74 fe ff       	call   c00008c0 <strcmp>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	85 c0                	test   eax,eax
c00194a7:	74 b8                	je     c0019461 <CPU::detectFeatures()+0x385>
c00194a9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194b3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194b8:	0f 86 be 00 00 00    	jbe    c001957c <CPU::detectFeatures()+0x4a0>
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	68 80 00 00 00       	push   0x80
c00194c6:	e8 ab f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194cb:	83 e0 01             	and    eax,0x1
c00194ce:	c1 e0 06             	shl    eax,0x6
c00194d1:	88 c2                	mov    dl,al
c00194d3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194d9:	83 e0 bf             	and    eax,0xffffffbf
c00194dc:	09 d0                	or     eax,edx
c00194de:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194e4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194eb:	e8 86 f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194f0:	83 e0 01             	and    eax,0x1
c00194f3:	c1 e0 04             	shl    eax,0x4
c00194f6:	88 c2                	mov    dl,al
c00194f8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194fe:	83 e0 ef             	and    eax,0xffffffef
c0019501:	09 d0                	or     eax,edx
c0019503:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019509:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019510:	e8 61 f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019515:	c1 e0 07             	shl    eax,0x7
c0019518:	88 c2                	mov    dl,al
c001951a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019520:	83 e0 7f             	and    eax,0x7f
c0019523:	09 d0                	or     eax,edx
c0019525:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001952b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019532:	e8 6d f8 ff ff       	call   c0018da4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019537:	83 e0 01             	and    eax,0x1
c001953a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019541:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019547:	83 e0 f7             	and    eax,0xfffffff7
c001954a:	09 d0                	or     eax,edx
c001954c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019552:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019559:	e8 46 f8 ff ff       	call   c0018da4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	83 e0 01             	and    eax,0x1
c0019564:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001956b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019571:	83 e0 fb             	and    eax,0xfffffffb
c0019574:	09 d0                	or     eax,edx
c0019576:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	56                   	push   esi
c0019580:	55                   	push   ebp
c0019581:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019585:	57                   	push   edi
c0019586:	8d 44 24 28          	lea    eax,[esp+0x28]
c001958a:	50                   	push   eax
c001958b:	6a 01                	push   0x1
c001958d:	e8 04 f7 ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019592:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019596:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001959c:	88 ca                	mov    dl,cl
c001959e:	83 e0 f0             	and    eax,0xfffffff0
c00195a1:	83 e2 0f             	and    edx,0xf
c00195a4:	09 d0                	or     eax,edx
c00195a6:	88 ca                	mov    dl,cl
c00195a8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195ae:	c0 ea 04             	shr    dl,0x4
c00195b1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195b5:	0f b6 c2             	movzx  eax,dl
c00195b8:	83 c4 20             	add    esp,0x20
c00195bb:	c1 e0 06             	shl    eax,0x6
c00195be:	89 c5                	mov    ebp,eax
c00195c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195c6:	66 25 3f c0          	and    ax,0xc03f
c00195ca:	09 e8                	or     eax,ebp
c00195cc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195d3:	89 c8                	mov    eax,ecx
c00195d5:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195db:	c1 e8 08             	shr    eax,0x8
c00195de:	83 e2 3f             	and    edx,0x3f
c00195e1:	83 e0 0f             	and    eax,0xf
c00195e4:	89 c5                	mov    ebp,eax
c00195e6:	c1 e5 06             	shl    ebp,0x6
c00195e9:	09 d5                	or     ebp,edx
c00195eb:	89 ea                	mov    edx,ebp
c00195ed:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195f3:	88 c2                	mov    dl,al
c00195f5:	c0 ea 02             	shr    dl,0x2
c00195f8:	89 d5                	mov    ebp,edx
c00195fa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019600:	83 e2 c0             	and    edx,0xffffffc0
c0019603:	09 d5                	or     ebp,edx
c0019605:	89 ea                	mov    edx,ebp
c0019607:	89 cd                	mov    ebp,ecx
c0019609:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001960f:	c1 ed 0c             	shr    ebp,0xc
c0019612:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019618:	83 e5 03             	and    ebp,0x3
c001961b:	83 e2 cf             	and    edx,0xffffffcf
c001961e:	c1 e5 04             	shl    ebp,0x4
c0019621:	09 d5                	or     ebp,edx
c0019623:	3c 06                	cmp    al,0x6
c0019625:	89 ea                	mov    edx,ebp
c0019627:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001962d:	74 04                	je     c0019633 <CPU::detectFeatures()+0x557>
c001962f:	3c 0f                	cmp    al,0xf
c0019631:	75 5c                	jne    c001968f <CPU::detectFeatures()+0x5b3>
c0019633:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019637:	89 cd                	mov    ebp,ecx
c0019639:	c1 ed 10             	shr    ebp,0x10
c001963c:	c1 e5 04             	shl    ebp,0x4
c001963f:	09 ea                	or     edx,ebp
c0019641:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019647:	0f b6 d2             	movzx  edx,dl
c001964a:	66 81 e5 3f c0       	and    bp,0xc03f
c001964f:	c1 e2 06             	shl    edx,0x6
c0019652:	09 ea                	or     edx,ebp
c0019654:	3c 0f                	cmp    al,0xf
c0019656:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001965d:	75 30                	jne    c001968f <CPU::detectFeatures()+0x5b3>
c001965f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019665:	c1 e9 14             	shr    ecx,0x14
c0019668:	83 e0 3f             	and    eax,0x3f
c001966b:	83 c1 0f             	add    ecx,0xf
c001966e:	88 ca                	mov    dl,cl
c0019670:	c0 e9 02             	shr    cl,0x2
c0019673:	c1 e2 06             	shl    edx,0x6
c0019676:	09 d0                	or     eax,edx
c0019678:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001967e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019684:	83 e0 c0             	and    eax,0xffffffc0
c0019687:	09 c1                	or     ecx,eax
c0019689:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019699:	56                   	push   esi
c001969a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001969e:	50                   	push   eax
c001969f:	57                   	push   edi
c00196a0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196a4:	55                   	push   ebp
c00196a5:	68 00 00 00 80       	push   0x80000000
c00196aa:	e8 e7 f5 ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196af:	83 c4 20             	add    esp,0x20
c00196b2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196be:	76 1e                	jbe    c00196de <CPU::detectFeatures()+0x602>
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	56                   	push   esi
c00196c4:	50                   	push   eax
c00196c5:	57                   	push   edi
c00196c6:	55                   	push   ebp
c00196c7:	68 01 00 00 80       	push   0x80000001
c00196cc:	e8 c5 f5 ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196d1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196db:	83 c4 20             	add    esp,0x20
c00196de:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196e4:	83 f8 01             	cmp    eax,0x1
c00196e7:	75 6f                	jne    c0019758 <CPU::detectFeatures()+0x67c>
c00196e9:	51                   	push   ecx
c00196ea:	51                   	push   ecx
c00196eb:	68 16 ba 02 c0       	push   0xc002ba16
c00196f0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196f4:	56                   	push   esi
c00196f5:	e8 3a 71 fe ff       	call   c0000834 <strcpy>
c00196fa:	5f                   	pop    edi
c00196fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019701:	5d                   	pop    ebp
c0019702:	66 c1 e8 06          	shr    ax,0x6
c0019706:	0f b6 c0             	movzx  eax,al
c0019709:	50                   	push   eax
c001970a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019710:	c1 e8 0e             	shr    eax,0xe
c0019713:	0f b6 c0             	movzx  eax,al
c0019716:	50                   	push   eax
c0019717:	e8 24 f2 ff ff       	call   c0018940 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001971c:	5a                   	pop    edx
c001971d:	59                   	pop    ecx
c001971e:	50                   	push   eax
c001971f:	56                   	push   esi
c0019720:	e8 4f 72 fe ff       	call   c0000974 <strcat>
c0019725:	5f                   	pop    edi
c0019726:	5d                   	pop    ebp
c0019727:	56                   	push   esi
c0019728:	53                   	push   ebx
c0019729:	e8 34 ae ff ff       	call   c0014562 <Device::setName(char const*)>
c001972e:	58                   	pop    eax
c001972f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019735:	5a                   	pop    edx
c0019736:	68 1d ba 02 c0       	push   0xc002ba1d
c001973b:	50                   	push   eax
c001973c:	e8 7f 71 fe ff       	call   c00008c0 <strcmp>
c0019741:	83 c4 10             	add    esp,0x10
c0019744:	85 c0                	test   eax,eax
c0019746:	0f 85 71 03 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c001974c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019753:	e9 65 03 00 00       	jmp    c0019abd <CPU::detectFeatures()+0x9e1>
c0019758:	83 f8 02             	cmp    eax,0x2
c001975b:	0f 85 b5 00 00 00    	jne    c0019816 <CPU::detectFeatures()+0x73a>
c0019761:	57                   	push   edi
c0019762:	57                   	push   edi
c0019763:	68 2f ba 02 c0       	push   0xc002ba2f
c0019768:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001976c:	56                   	push   esi
c001976d:	e8 c2 70 fe ff       	call   c0000834 <strcpy>
c0019772:	5d                   	pop    ebp
c0019773:	58                   	pop    eax
c0019774:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977a:	66 c1 e8 06          	shr    ax,0x6
c001977e:	0f b6 c0             	movzx  eax,al
c0019781:	50                   	push   eax
c0019782:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019788:	c1 e8 0e             	shr    eax,0xe
c001978b:	0f b6 c0             	movzx  eax,al
c001978e:	50                   	push   eax
c001978f:	e8 18 f0 ff ff       	call   c00187ac <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019794:	5a                   	pop    edx
c0019795:	59                   	pop    ecx
c0019796:	50                   	push   eax
c0019797:	56                   	push   esi
c0019798:	e8 d7 71 fe ff       	call   c0000974 <strcat>
c001979d:	5f                   	pop    edi
c001979e:	5d                   	pop    ebp
c001979f:	56                   	push   esi
c00197a0:	53                   	push   ebx
c00197a1:	e8 bc ad ff ff       	call   c0014562 <Device::setName(char const*)>
c00197a6:	58                   	pop    eax
c00197a7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197ad:	5a                   	pop    edx
c00197ae:	68 34 ba 02 c0       	push   0xc002ba34
c00197b3:	50                   	push   eax
c00197b4:	e8 07 71 fe ff       	call   c00008c0 <strcmp>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	85 c0                	test   eax,eax
c00197be:	75 20                	jne    c00197e0 <CPU::detectFeatures()+0x704>
c00197c0:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c00197c6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197cc:	a8 01                	test   al,0x1
c00197ce:	74 10                	je     c00197e0 <CPU::detectFeatures()+0x704>
c00197d0:	83 e0 fe             	and    eax,0xfffffffe
c00197d3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197d9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197e6:	c1 e8 0e             	shr    eax,0xe
c00197e9:	3c 05                	cmp    al,0x5
c00197eb:	0f 85 cc 02 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c00197f1:	56                   	push   esi
c00197f2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197f8:	83 e0 0f             	and    eax,0xf
c00197fb:	50                   	push   eax
c00197fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019802:	66 c1 e8 06          	shr    ax,0x6
c0019806:	0f b6 c0             	movzx  eax,al
c0019809:	50                   	push   eax
c001980a:	6a 05                	push   0x5
c001980c:	e8 11 f4 ff ff       	call   c0018c22 <CPU::AMD_K6_writeback(int, int, int)>
c0019811:	e9 1f 02 00 00       	jmp    c0019a35 <CPU::detectFeatures()+0x959>
c0019816:	8d 50 fd             	lea    edx,[eax-0x3]
c0019819:	83 fa 01             	cmp    edx,0x1
c001981c:	76 09                	jbe    c0019827 <CPU::detectFeatures()+0x74b>
c001981e:	83 f8 06             	cmp    eax,0x6
c0019821:	0f 85 91 01 00 00    	jne    c00199b8 <CPU::detectFeatures()+0x8dc>
c0019827:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001982d:	c1 ea 0e             	shr    edx,0xe
c0019830:	80 fa 05             	cmp    dl,0x5
c0019833:	75 7b                	jne    c00198b0 <CPU::detectFeatures()+0x7d4>
c0019835:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001983b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019840:	66 81 fa 00 01       	cmp    dx,0x100
c0019845:	75 0c                	jne    c0019853 <CPU::detectFeatures()+0x777>
c0019847:	51                   	push   ecx
c0019848:	51                   	push   ecx
c0019849:	68 3b ba 02 c0       	push   0xc002ba3b
c001984e:	e9 dc 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019853:	66 81 fa 00 02       	cmp    dx,0x200
c0019858:	75 0c                	jne    c0019866 <CPU::detectFeatures()+0x78a>
c001985a:	52                   	push   edx
c001985b:	52                   	push   edx
c001985c:	68 4e ba 02 c0       	push   0xc002ba4e
c0019861:	e9 c9 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019866:	66 81 fa 40 02       	cmp    dx,0x240
c001986b:	75 0c                	jne    c0019879 <CPU::detectFeatures()+0x79d>
c001986d:	50                   	push   eax
c001986e:	50                   	push   eax
c001986f:	68 60 ba 02 c0       	push   0xc002ba60
c0019874:	e9 b6 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019879:	83 f8 06             	cmp    eax,0x6
c001987c:	75 0c                	jne    c001988a <CPU::detectFeatures()+0x7ae>
c001987e:	50                   	push   eax
c001987f:	50                   	push   eax
c0019880:	68 72 ba 02 c0       	push   0xc002ba72
c0019885:	e9 a5 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c001988a:	83 f8 04             	cmp    eax,0x4
c001988d:	75 0c                	jne    c001989b <CPU::detectFeatures()+0x7bf>
c001988f:	50                   	push   eax
c0019890:	50                   	push   eax
c0019891:	68 7e ba 02 c0       	push   0xc002ba7e
c0019896:	e9 94 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c001989b:	83 f8 03             	cmp    eax,0x3
c001989e:	0f 85 19 02 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c00198a4:	50                   	push   eax
c00198a5:	50                   	push   eax
c00198a6:	68 86 ba 02 c0       	push   0xc002ba86
c00198ab:	e9 7f 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00198b0:	80 fa 06             	cmp    dl,0x6
c00198b3:	0f 85 db 00 00 00    	jne    c0019994 <CPU::detectFeatures()+0x8b8>
c00198b9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198bf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198c4:	66 81 fa 80 01       	cmp    dx,0x180
c00198c9:	75 0c                	jne    c00198d7 <CPU::detectFeatures()+0x7fb>
c00198cb:	50                   	push   eax
c00198cc:	50                   	push   eax
c00198cd:	68 91 ba 02 c0       	push   0xc002ba91
c00198d2:	e9 58 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00198d7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198dd:	66 f7 c1 80 ff       	test   cx,0xff80
c00198e2:	75 0c                	jne    c00198f0 <CPU::detectFeatures()+0x814>
c00198e4:	50                   	push   eax
c00198e5:	50                   	push   eax
c00198e6:	68 a1 ba 02 c0       	push   0xc002baa1
c00198eb:	e9 3f 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00198f0:	66 81 fa 40 02       	cmp    dx,0x240
c00198f5:	75 0c                	jne    c0019903 <CPU::detectFeatures()+0x827>
c00198f7:	55                   	push   ebp
c00198f8:	55                   	push   ebp
c00198f9:	68 a8 ba 02 c0       	push   0xc002baa8
c00198fe:	e9 2c 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019903:	66 81 fa 80 02       	cmp    dx,0x280
c0019908:	75 0c                	jne    c0019916 <CPU::detectFeatures()+0x83a>
c001990a:	57                   	push   edi
c001990b:	57                   	push   edi
c001990c:	68 b1 ba 02 c0       	push   0xc002bab1
c0019911:	e9 19 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019916:	66 81 fa 40 03       	cmp    dx,0x340
c001991b:	74 ed                	je     c001990a <CPU::detectFeatures()+0x82e>
c001991d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019922:	75 0c                	jne    c0019930 <CPU::detectFeatures()+0x854>
c0019924:	56                   	push   esi
c0019925:	56                   	push   esi
c0019926:	68 b8 ba 02 c0       	push   0xc002bab8
c001992b:	e9 ff 00 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019930:	83 f8 06             	cmp    eax,0x6
c0019933:	0f 84 45 ff ff ff    	je     c001987e <CPU::detectFeatures()+0x7a2>
c0019939:	83 f8 04             	cmp    eax,0x4
c001993c:	0f 84 4d ff ff ff    	je     c001988f <CPU::detectFeatures()+0x7b3>
c0019942:	83 f8 03             	cmp    eax,0x3
c0019945:	0f 85 72 01 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c001994b:	51                   	push   ecx
c001994c:	51                   	push   ecx
c001994d:	68 c1 ba 02 c0       	push   0xc002bac1
c0019952:	53                   	push   ebx
c0019953:	e8 0a ac ff ff       	call   c0014562 <Device::setName(char const*)>
c0019958:	b1 c1                	mov    cl,0xc1
c001995a:	88 c8                	mov    al,cl
c001995c:	e6 22                	out    0x22,al
c001995e:	e4 23                	in     al,0x23
c0019960:	88 c2                	mov    dl,al
c0019962:	88 c8                	mov    al,cl
c0019964:	e6 22                	out    0x22,al
c0019966:	88 d0                	mov    al,dl
c0019968:	83 c8 10             	or     eax,0x10
c001996b:	e6 23                	out    0x23,al
c001996d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019974:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019977:	89 d0                	mov    eax,edx
c0019979:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001997f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019983:	40                   	inc    eax
c0019984:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001998a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001998f:	e9 a1 00 00 00       	jmp    c0019a35 <CPU::detectFeatures()+0x959>
c0019994:	83 f8 06             	cmp    eax,0x6
c0019997:	0f 84 e1 fe ff ff    	je     c001987e <CPU::detectFeatures()+0x7a2>
c001999d:	83 f8 04             	cmp    eax,0x4
c00199a0:	0f 84 e9 fe ff ff    	je     c001988f <CPU::detectFeatures()+0x7b3>
c00199a6:	83 f8 03             	cmp    eax,0x3
c00199a9:	0f 85 0e 01 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c00199af:	52                   	push   edx
c00199b0:	52                   	push   edx
c00199b1:	68 cc ba 02 c0       	push   0xc002bacc
c00199b6:	eb 77                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199b8:	83 f8 07             	cmp    eax,0x7
c00199bb:	75 09                	jne    c00199c6 <CPU::detectFeatures()+0x8ea>
c00199bd:	50                   	push   eax
c00199be:	50                   	push   eax
c00199bf:	68 d6 ba 02 c0       	push   0xc002bad6
c00199c4:	eb 69                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199c6:	83 f8 0a             	cmp    eax,0xa
c00199c9:	75 09                	jne    c00199d4 <CPU::detectFeatures()+0x8f8>
c00199cb:	50                   	push   eax
c00199cc:	50                   	push   eax
c00199cd:	68 e1 ba 02 c0       	push   0xc002bae1
c00199d2:	eb 5b                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199d4:	83 f8 0b             	cmp    eax,0xb
c00199d7:	75 09                	jne    c00199e2 <CPU::detectFeatures()+0x906>
c00199d9:	50                   	push   eax
c00199da:	50                   	push   eax
c00199db:	68 e9 ba 02 c0       	push   0xc002bae9
c00199e0:	eb 4d                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199e2:	83 f8 08             	cmp    eax,0x8
c00199e5:	75 09                	jne    c00199f0 <CPU::detectFeatures()+0x914>
c00199e7:	50                   	push   eax
c00199e8:	50                   	push   eax
c00199e9:	68 f2 ba 02 c0       	push   0xc002baf2
c00199ee:	eb 3f                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199f0:	83 f8 09             	cmp    eax,0x9
c00199f3:	75 09                	jne    c00199fe <CPU::detectFeatures()+0x922>
c00199f5:	50                   	push   eax
c00199f6:	50                   	push   eax
c00199f7:	68 fa ba 02 c0       	push   0xc002bafa
c00199fc:	eb 31                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199fe:	83 f8 05             	cmp    eax,0x5
c0019a01:	75 09                	jne    c0019a0c <CPU::detectFeatures()+0x930>
c0019a03:	50                   	push   eax
c0019a04:	50                   	push   eax
c0019a05:	68 02 bb 02 c0       	push   0xc002bb02
c0019a0a:	eb 23                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019a0c:	83 f8 0c             	cmp    eax,0xc
c0019a0f:	75 09                	jne    c0019a1a <CPU::detectFeatures()+0x93e>
c0019a11:	55                   	push   ebp
c0019a12:	55                   	push   ebp
c0019a13:	68 10 bb 02 c0       	push   0xc002bb10
c0019a18:	eb 15                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019a1a:	83 f8 0d             	cmp    eax,0xd
c0019a1d:	75 09                	jne    c0019a28 <CPU::detectFeatures()+0x94c>
c0019a1f:	57                   	push   edi
c0019a20:	57                   	push   edi
c0019a21:	68 1b bb 02 c0       	push   0xc002bb1b
c0019a26:	eb 07                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019a28:	56                   	push   esi
c0019a29:	56                   	push   esi
c0019a2a:	68 2f bb 02 c0       	push   0xc002bb2f
c0019a2f:	53                   	push   ebx
c0019a30:	e8 2d ab ff ff       	call   c0014562 <Device::setName(char const*)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	e9 80 00 00 00       	jmp    c0019abd <CPU::detectFeatures()+0x9e1>
c0019a3d:	51                   	push   ecx
c0019a3e:	51                   	push   ecx
c0019a3f:	68 7b b9 02 c0       	push   0xc002b97b
c0019a44:	57                   	push   edi
c0019a45:	e8 ea 6d fe ff       	call   c0000834 <strcpy>
c0019a4a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a54:	e8 55 68 fe ff       	call   c00002ae <is486>
c0019a59:	83 c4 10             	add    esp,0x10
c0019a5c:	85 c0                	test   eax,eax
c0019a5e:	74 2b                	je     c0019a8b <CPU::detectFeatures()+0x9af>
c0019a60:	52                   	push   edx
c0019a61:	52                   	push   edx
c0019a62:	68 3b bb 02 c0       	push   0xc002bb3b
c0019a67:	53                   	push   ebx
c0019a68:	e8 f5 aa ff ff       	call   c0014562 <Device::setName(char const*)>
c0019a6d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a74:	0f 20 c0             	mov    eax,cr0
c0019a77:	83 e0 14             	and    eax,0x14
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	83 f8 04             	cmp    eax,0x4
c0019a80:	75 1f                	jne    c0019aa1 <CPU::detectFeatures()+0x9c5>
c0019a82:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a89:	eb 32                	jmp    c0019abd <CPU::detectFeatures()+0x9e1>
c0019a8b:	50                   	push   eax
c0019a8c:	50                   	push   eax
c0019a8d:	68 46 bb 02 c0       	push   0xc002bb46
c0019a92:	53                   	push   ebx
c0019a93:	e8 ca aa ff ff       	call   c0014562 <Device::setName(char const*)>
c0019a98:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a9f:	eb d3                	jmp    c0019a74 <CPU::detectFeatures()+0x998>
c0019aa1:	e8 e3 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019aa6:	83 e0 01             	and    eax,0x1
c0019aa9:	8d 14 00             	lea    edx,[eax+eax*1]
c0019aac:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ab2:	83 e0 fd             	and    eax,0xfffffffd
c0019ab5:	09 d0                	or     eax,edx
c0019ab7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019abd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ac4:	83 c4 4c             	add    esp,0x4c
c0019ac7:	5b                   	pop    ebx
c0019ac8:	5e                   	pop    esi
c0019ac9:	5f                   	pop    edi
c0019aca:	5d                   	pop    ebp
c0019acb:	c3                   	ret    

c0019acc <CPU::setupSMEP()>:
c0019acc:	0f 20 e0             	mov    eax,cr4
c0019acf:	0d 00 00 10 00       	or     eax,0x100000
c0019ad4:	0f 22 e0             	mov    cr4,eax
c0019ad7:	c3                   	ret    

c0019ad8 <CPU::setupUMIP()>:
c0019ad8:	0f 20 e0             	mov    eax,cr4
c0019adb:	80 cc 08             	or     ah,0x8
c0019ade:	0f 22 e0             	mov    cr4,eax
c0019ae1:	c3                   	ret    

c0019ae2 <CPU::setupTSC()>:
c0019ae2:	0f 20 e0             	mov    eax,cr4
c0019ae5:	83 c8 04             	or     eax,0x4
c0019ae8:	0f 22 e0             	mov    cr4,eax
c0019aeb:	c3                   	ret    

c0019aec <CPU::setupLargePages()>:
c0019aec:	0f 20 e0             	mov    eax,cr4
c0019aef:	83 c8 10             	or     eax,0x10
c0019af2:	0f 22 e0             	mov    cr4,eax
c0019af5:	c3                   	ret    

c0019af6 <CPU::setupPAT()>:
c0019af6:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019afb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b02:	74 2c                	je     c0019b30 <CPU::setupPAT()+0x3a>
c0019b04:	53                   	push   ebx
c0019b05:	83 ec 10             	sub    esp,0x10
c0019b08:	68 77 02 00 00       	push   0x277
c0019b0d:	50                   	push   eax
c0019b0e:	e8 d5 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b13:	83 e2 f8             	and    edx,0xfffffff8
c0019b16:	83 ca 01             	or     edx,0x1
c0019b19:	52                   	push   edx
c0019b1a:	50                   	push   eax
c0019b1b:	68 77 02 00 00       	push   0x277
c0019b20:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0019b26:	e8 e9 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b2b:	83 c4 28             	add    esp,0x28
c0019b2e:	5b                   	pop    ebx
c0019b2f:	c3                   	ret    
c0019b30:	c3                   	ret    
c0019b31:	90                   	nop

c0019b32 <CPU::setupMTRR()>:
c0019b32:	c3                   	ret    
c0019b33:	90                   	nop

c0019b34 <CPU::setupGlobalPages()>:
c0019b34:	0f 20 e0             	mov    eax,cr4
c0019b37:	0c 80                	or     al,0x80
c0019b39:	0f 22 e0             	mov    cr4,eax
c0019b3c:	c3                   	ret    
c0019b3d:	90                   	nop

c0019b3e <CPU::allowUsermodeDataAccess()>:
c0019b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b42:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b49:	74 03                	je     c0019b4e <CPU::allowUsermodeDataAccess()+0x10>
c0019b4b:	0f 01 cb             	stac   
c0019b4e:	c3                   	ret    
c0019b4f:	90                   	nop

c0019b50 <CPU::prohibitUsermodeDataAccess()>:
c0019b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b54:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b5b:	74 03                	je     c0019b60 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b5d:	0f 01 ca             	clac   
c0019b60:	c3                   	ret    
c0019b61:	90                   	nop

c0019b62 <CPU::setupSMAP()>:
c0019b62:	0f 20 e0             	mov    eax,cr4
c0019b65:	0d 00 00 20 00       	or     eax,0x200000
c0019b6a:	0f 22 e0             	mov    cr4,eax
c0019b6d:	eb e1                	jmp    c0019b50 <CPU::prohibitUsermodeDataAccess()>
c0019b6f:	90                   	nop

c0019b70 <CPU::setupFeatures()>:
c0019b70:	83 ec 0c             	sub    esp,0xc
c0019b73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b77:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b7e:	74 07                	je     c0019b87 <CPU::setupFeatures()+0x17>
c0019b80:	52                   	push   edx
c0019b81:	e8 46 ff ff ff       	call   c0019acc <CPU::setupSMEP()>
c0019b86:	58                   	pop    eax
c0019b87:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b8e:	74 07                	je     c0019b97 <CPU::setupFeatures()+0x27>
c0019b90:	52                   	push   edx
c0019b91:	e8 cc ff ff ff       	call   c0019b62 <CPU::setupSMAP()>
c0019b96:	58                   	pop    eax
c0019b97:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b9e:	74 07                	je     c0019ba7 <CPU::setupFeatures()+0x37>
c0019ba0:	52                   	push   edx
c0019ba1:	e8 32 ff ff ff       	call   c0019ad8 <CPU::setupUMIP()>
c0019ba6:	58                   	pop    eax
c0019ba7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bae:	74 07                	je     c0019bb7 <CPU::setupFeatures()+0x47>
c0019bb0:	52                   	push   edx
c0019bb1:	e8 2c ff ff ff       	call   c0019ae2 <CPU::setupTSC()>
c0019bb6:	58                   	pop    eax
c0019bb7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bbe:	74 07                	je     c0019bc7 <CPU::setupFeatures()+0x57>
c0019bc0:	52                   	push   edx
c0019bc1:	e8 26 ff ff ff       	call   c0019aec <CPU::setupLargePages()>
c0019bc6:	59                   	pop    ecx
c0019bc7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bce:	74 07                	je     c0019bd7 <CPU::setupFeatures()+0x67>
c0019bd0:	52                   	push   edx
c0019bd1:	e8 5e ff ff ff       	call   c0019b34 <CPU::setupGlobalPages()>
c0019bd6:	58                   	pop    eax
c0019bd7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bde:	74 0c                	je     c0019bec <CPU::setupFeatures()+0x7c>
c0019be0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019be4:	83 c4 0c             	add    esp,0xc
c0019be7:	e9 0a ff ff ff       	jmp    c0019af6 <CPU::setupPAT()>
c0019bec:	83 c4 0c             	add    esp,0xc
c0019bef:	c3                   	ret    

c0019bf0 <CPU::open(int, int, void*)>:
c0019bf0:	57                   	push   edi
c0019bf1:	56                   	push   esi
c0019bf2:	53                   	push   ebx
c0019bf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bfb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c01:	83 ec 0c             	sub    esp,0xc
c0019c04:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c0a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c10:	50                   	push   eax
c0019c11:	e8 be 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c16:	83 c4 0c             	add    esp,0xc
c0019c19:	6a 00                	push   0x0
c0019c1b:	68 ef be ad de       	push   0xdeadbeef
c0019c20:	57                   	push   edi
c0019c21:	e8 d6 78 ff ff       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c0019c26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c29:	e8 ae 78 ff ff       	call   c00114dc <TSS::flush()>
c0019c2e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c34:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c37:	e8 f4 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c3c:	b8 00 04 00 00       	mov    eax,0x400
c0019c41:	0f 23 f8             	mov    db7,eax
c0019c44:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c4e:	e8 8f 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c53:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c59:	89 30                	mov    DWORD PTR [eax],esi
c0019c5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c61:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c64:	58                   	pop    eax
c0019c65:	5a                   	pop    edx
c0019c66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c70:	e8 c5 89 ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0019c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c78:	e8 5f f4 ff ff       	call   c00190dc <CPU::detectFeatures()>
c0019c7d:	e8 cf bc ff ff       	call   c0015951 <setupInterruptController()>
c0019c82:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c88:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0019c8d:	83 e0 10             	and    eax,0x10
c0019c90:	83 f8 01             	cmp    eax,0x1
c0019c93:	19 c0                	sbb    eax,eax
c0019c95:	83 e0 46             	and    eax,0x46
c0019c98:	83 c0 1e             	add    eax,0x1e
c0019c9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c9e:	e8 bb d1 ff ff       	call   c0016e5e <setupTimer(int)>
c0019ca3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019ca9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cac:	e8 bf fe ff ff       	call   c0019b70 <CPU::setupFeatures()>
c0019cb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cb4:	e8 a7 f1 ff ff       	call   c0018e60 <CPU::displayFeatures()>
c0019cb9:	83 c4 10             	add    esp,0x10
c0019cbc:	31 c0                	xor    eax,eax
c0019cbe:	5b                   	pop    ebx
c0019cbf:	5e                   	pop    esi
c0019cc0:	5f                   	pop    edi
c0019cc1:	c3                   	ret    

c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	53                   	push   ebx
c0019cc5:	51                   	push   ecx
c0019cc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cca:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ccd:	0f 02 c0             	lar    eax,ax
c0019cd0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cd7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cda:	88 ca                	mov    dl,cl
c0019cdc:	c0 ea 06             	shr    dl,0x6
c0019cdf:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ce3:	89 ca                	mov    edx,ecx
c0019ce5:	66 c1 ea 03          	shr    dx,0x3
c0019ce9:	83 e2 07             	and    edx,0x7
c0019cec:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cf1:	88 17                	mov    BYTE PTR [edi],dl
c0019cf3:	0f 84 a6 01 00 00    	je     c0019e9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cf9:	83 e1 07             	and    ecx,0x7
c0019cfc:	80 f9 04             	cmp    cl,0x4
c0019cff:	0f 84 98 00 00 00    	je     c0019d9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d05:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d0a:	0f 95 c0             	setne  al
c0019d0d:	80 f9 05             	cmp    cl,0x5
c0019d10:	0f 95 c2             	setne  dl
c0019d13:	08 c2                	or     dl,al
c0019d15:	74 79                	je     c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d17:	84 c9                	test   cl,cl
c0019d19:	75 05                	jne    c0019d20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d1b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d1e:	eb 3c                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d20:	80 f9 01             	cmp    cl,0x1
c0019d23:	75 05                	jne    c0019d2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d25:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d28:	eb 32                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2a:	80 f9 02             	cmp    cl,0x2
c0019d2d:	75 05                	jne    c0019d34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d2f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d32:	eb 28                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d34:	31 c0                	xor    eax,eax
c0019d36:	80 f9 03             	cmp    cl,0x3
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d3b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d3e:	eb 1c                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d40:	80 f9 05             	cmp    cl,0x5
c0019d43:	75 05                	jne    c0019d4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d45:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d48:	eb 12                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d4a:	80 f9 06             	cmp    cl,0x6
c0019d4d:	75 05                	jne    c0019d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d52:	eb 08                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d54:	80 f9 07             	cmp    cl,0x7
c0019d57:	75 03                	jne    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d59:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d5c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d61:	75 10                	jne    c0019d73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d63:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d67:	b9 03 00 00 00       	mov    ecx,0x3
c0019d6c:	01 d0                	add    eax,edx
c0019d6e:	e9 37 01 00 00       	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d73:	b9 02 00 00 00       	mov    ecx,0x2
c0019d78:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d7d:	0f 85 27 01 00 00    	jne    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d83:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d86:	b9 06 00 00 00       	mov    ecx,0x6
c0019d8b:	e9 1a 01 00 00       	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d90:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d93:	b9 06 00 00 00       	mov    ecx,0x6
c0019d98:	e9 0f 01 00 00       	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d9d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019da0:	88 ca                	mov    dl,cl
c0019da2:	c0 ea 06             	shr    dl,0x6
c0019da5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019da9:	89 ca                	mov    edx,ecx
c0019dab:	66 c1 ea 03          	shr    dx,0x3
c0019daf:	83 e2 07             	and    edx,0x7
c0019db2:	80 e1 07             	and    cl,0x7
c0019db5:	75 05                	jne    c0019dbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019db7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dba:	eb 4c                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbc:	80 f9 01             	cmp    cl,0x1
c0019dbf:	75 05                	jne    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dc1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dc4:	eb 42                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc6:	80 f9 02             	cmp    cl,0x2
c0019dc9:	75 05                	jne    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019dcb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dce:	eb 38                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd0:	80 f9 03             	cmp    cl,0x3
c0019dd3:	75 05                	jne    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dd5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dd8:	eb 2e                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dda:	80 f9 04             	cmp    cl,0x4
c0019ddd:	75 12                	jne    c0019df1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ddf:	f6 c4 60             	test   ah,0x60
c0019de2:	75 08                	jne    c0019dec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019de4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019de7:	8d 78 14             	lea    edi,[eax+0x14]
c0019dea:	eb 1c                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dec:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019def:	eb 17                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df1:	80 f9 05             	cmp    cl,0x5
c0019df4:	75 05                	jne    c0019dfb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019df6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019df9:	eb 0d                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dfb:	80 f9 06             	cmp    cl,0x6
c0019dfe:	75 05                	jne    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e00:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e03:	eb 03                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e05:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e08:	84 d2                	test   dl,dl
c0019e0a:	75 05                	jne    c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e0c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e0f:	eb 3c                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e11:	80 fa 01             	cmp    dl,0x1
c0019e14:	75 05                	jne    c0019e1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e16:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e19:	eb 32                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1b:	80 fa 02             	cmp    dl,0x2
c0019e1e:	75 05                	jne    c0019e25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e20:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e23:	eb 28                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e25:	80 fa 03             	cmp    dl,0x3
c0019e28:	75 05                	jne    c0019e2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e2a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e2d:	eb 1e                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e2f:	31 c0                	xor    eax,eax
c0019e31:	80 fa 04             	cmp    dl,0x4
c0019e34:	74 17                	je     c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e36:	80 fa 05             	cmp    dl,0x5
c0019e39:	75 05                	jne    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e3b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e3e:	eb 0d                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e40:	80 fa 06             	cmp    dl,0x6
c0019e43:	75 05                	jne    c0019e4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e48:	eb 03                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e4d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e52:	0f 94 c2             	sete   dl
c0019e55:	80 f9 05             	cmp    cl,0x5
c0019e58:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e5c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e61:	d3 e0                	shl    eax,cl
c0019e63:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e67:	74 0a                	je     c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e69:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e6c:	b9 07 00 00 00       	mov    ecx,0x7
c0019e71:	eb 37                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e73:	01 f8                	add    eax,edi
c0019e75:	b9 03 00 00 00       	mov    ecx,0x3
c0019e7a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e7f:	74 2b                	je     c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e81:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e86:	75 0d                	jne    c0019e95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e88:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e8c:	01 c8                	add    eax,ecx
c0019e8e:	b9 04 00 00 00       	mov    ecx,0x4
c0019e93:	eb 17                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e95:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e98:	b9 07 00 00 00       	mov    ecx,0x7
c0019e9d:	eb 0d                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e9f:	b9 02 00 00 00       	mov    ecx,0x2
c0019ea4:	b2 01                	mov    dl,0x1
c0019ea6:	31 c0                	xor    eax,eax
c0019ea8:	eb 02                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eaa:	31 d2                	xor    edx,edx
c0019eac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019eb0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019eb2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019eb6:	88 11                	mov    BYTE PTR [ecx],dl
c0019eb8:	5a                   	pop    edx
c0019eb9:	5b                   	pop    ebx
c0019eba:	5e                   	pop    esi
c0019ebb:	5f                   	pop    edi
c0019ebc:	c3                   	ret    

c0019ebd <Krnl::smpEntry()>:
c0019ebd:	eb fe                	jmp    c0019ebd <Krnl::smpEntry()>

c0019ebf <Krnl::startCPU(int)>:
c0019ebf:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019ec4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ecb:	0f 84 36 01 00 00    	je     c001a007 <Krnl::startCPU(int)+0x148>
c0019ed1:	53                   	push   ebx
c0019ed2:	83 ec 08             	sub    esp,0x8
c0019ed5:	e8 46 3f 00 00       	call   c001de20 <lockScheduler()>
c0019eda:	52                   	push   edx
c0019edb:	52                   	push   edx
c0019edc:	6a 1b                	push   0x1b
c0019ede:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0019ee4:	e8 ff 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ee9:	59                   	pop    ecx
c0019eea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019eef:	89 c3                	mov    ebx,eax
c0019ef1:	58                   	pop    eax
c0019ef2:	53                   	push   ebx
c0019ef3:	68 80 bb 02 c0       	push   0xc002bb80
c0019ef8:	e8 5c 90 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0019efd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f0b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f15:	c1 e0 18             	shl    eax,0x18
c0019f18:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f1e:	83 c4 10             	add    esp,0x10
c0019f21:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f27:	09 c2                	or     edx,eax
c0019f29:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f2f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f35:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f3b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f41:	80 cd c5             	or     ch,0xc5
c0019f44:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f4a:	f3 90                	pause  
c0019f4c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f4e:	0f ba e1 0c          	bt     ecx,0xc
c0019f52:	72 f6                	jb     c0019f4a <Krnl::startCPU(int)+0x8b>
c0019f54:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f5a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f60:	09 c1                	or     ecx,eax
c0019f62:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f68:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f6e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f74:	80 cd 85             	or     ch,0x85
c0019f77:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f7d:	f3 90                	pause  
c0019f7f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f81:	0f ba e1 0c          	bt     ecx,0xc
c0019f85:	72 f6                	jb     c0019f7d <Krnl::startCPU(int)+0xbe>
c0019f87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f91:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f97:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f9d:	09 c1                	or     ecx,eax
c0019f9f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fa5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fab:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fb1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fb7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fbd:	f3 90                	pause  
c0019fbf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fc1:	0f ba e1 0c          	bt     ecx,0xc
c0019fc5:	72 f6                	jb     c0019fbd <Krnl::startCPU(int)+0xfe>
c0019fc7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fd1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fd7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fdd:	09 c8                	or     eax,ecx
c0019fdf:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fe5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019feb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ff0:	0d 02 06 00 00       	or     eax,0x602
c0019ff5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019ffb:	f3 90                	pause  
c0019ffd:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fff:	0f ba e0 0c          	bt     eax,0xc
c001a003:	72 f6                	jb     c0019ffb <Krnl::startCPU(int)+0x13c>
c001a005:	eb fe                	jmp    c001a005 <Krnl::startCPU(int)+0x146>
c001a007:	c3                   	ret    

c001a008 <Krnl::startCPUs()>:
c001a008:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001a00d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a013:	88 c2                	mov    dl,al
c001a015:	83 e2 0a             	and    edx,0xa
c001a018:	80 fa 0a             	cmp    dl,0xa
c001a01b:	75 09                	jne    c001a026 <Krnl::startCPUs()+0x1e>
c001a01d:	a8 01                	test   al,0x1
c001a01f:	74 05                	je     c001a026 <Krnl::startCPUs()+0x1e>
c001a021:	e9 75 61 fe ff       	jmp    c000019b <prepareTramp>
c001a026:	c3                   	ret    
c001a027:	90                   	nop

c001a028 <EnvVarContainer::getEnv(char const*)>:
c001a028:	57                   	push   edi
c001a029:	56                   	push   esi
c001a02a:	53                   	push   ebx
c001a02b:	31 db                	xor    ebx,ebx
c001a02d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a031:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a033:	7e 2b                	jle    c001a060 <EnvVarContainer::getEnv(char const*)+0x38>
c001a035:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a03c:	50                   	push   eax
c001a03d:	50                   	push   eax
c001a03e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a041:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a044:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a048:	e8 73 68 fe ff       	call   c00008c0 <strcmp>
c001a04d:	83 c4 10             	add    esp,0x10
c001a050:	85 c0                	test   eax,eax
c001a052:	75 09                	jne    c001a05d <EnvVarContainer::getEnv(char const*)+0x35>
c001a054:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a057:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a05b:	eb 05                	jmp    c001a062 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a05d:	43                   	inc    ebx
c001a05e:	eb d1                	jmp    c001a031 <EnvVarContainer::getEnv(char const*)+0x9>
c001a060:	31 c0                	xor    eax,eax
c001a062:	5b                   	pop    ebx
c001a063:	5e                   	pop    esi
c001a064:	5f                   	pop    edi
c001a065:	c3                   	ret    

c001a066 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a066:	57                   	push   edi
c001a067:	56                   	push   esi
c001a068:	53                   	push   ebx
c001a069:	83 ec 1c             	sub    esp,0x1c
c001a06c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a070:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a074:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a078:	57                   	push   edi
c001a079:	e8 16 67 fe ff       	call   c0000794 <strlen>
c001a07e:	40                   	inc    eax
c001a07f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a082:	e8 b9 57 ff ff       	call   c000f840 <malloc>
c001a087:	89 34 24             	mov    DWORD PTR [esp],esi
c001a08a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a08e:	e8 01 67 fe ff       	call   c0000794 <strlen>
c001a093:	40                   	inc    eax
c001a094:	89 04 24             	mov    DWORD PTR [esp],eax
c001a097:	e8 a4 57 ff ff       	call   c000f840 <malloc>
c001a09c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a09f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0a3:	e8 ec 66 fe ff       	call   c0000794 <strlen>
c001a0a8:	83 c4 0c             	add    esp,0xc
c001a0ab:	40                   	inc    eax
c001a0ac:	50                   	push   eax
c001a0ad:	6a 00                	push   0x0
c001a0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b3:	e8 c0 66 fe ff       	call   c0000778 <memset>
c001a0b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0bb:	e8 d4 66 fe ff       	call   c0000794 <strlen>
c001a0c0:	83 c4 0c             	add    esp,0xc
c001a0c3:	40                   	inc    eax
c001a0c4:	50                   	push   eax
c001a0c5:	57                   	push   edi
c001a0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0ca:	e8 75 66 fe ff       	call   c0000744 <memcpy>
c001a0cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d2:	e8 bd 66 fe ff       	call   c0000794 <strlen>
c001a0d7:	83 c4 0c             	add    esp,0xc
c001a0da:	40                   	inc    eax
c001a0db:	50                   	push   eax
c001a0dc:	6a 00                	push   0x0
c001a0de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e2:	e8 91 66 fe ff       	call   c0000778 <memset>
c001a0e7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ea:	e8 a5 66 fe ff       	call   c0000794 <strlen>
c001a0ef:	83 c4 0c             	add    esp,0xc
c001a0f2:	40                   	inc    eax
c001a0f3:	50                   	push   eax
c001a0f4:	56                   	push   esi
c001a0f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0f9:	e8 46 66 fe ff       	call   c0000744 <memcpy>
c001a0fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a100:	40                   	inc    eax
c001a101:	89 03                	mov    DWORD PTR [ebx],eax
c001a103:	c1 e0 03             	shl    eax,0x3
c001a106:	5a                   	pop    edx
c001a107:	59                   	pop    ecx
c001a108:	50                   	push   eax
c001a109:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a10c:	e8 1b 57 ff ff       	call   c000f82c <realloc>
c001a111:	83 c4 0c             	add    esp,0xc
c001a114:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a117:	6a 08                	push   0x8
c001a119:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a11d:	52                   	push   edx
c001a11e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a120:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a124:	50                   	push   eax
c001a125:	e8 1a 66 fe ff       	call   c0000744 <memcpy>
c001a12a:	83 c4 20             	add    esp,0x20
c001a12d:	5b                   	pop    ebx
c001a12e:	5e                   	pop    esi
c001a12f:	5f                   	pop    edi
c001a130:	c3                   	ret    
c001a131:	90                   	nop

c001a132 <EnvVarContainer::deleteEnv(char const*)>:
c001a132:	c3                   	ret    
c001a133:	90                   	nop

c001a134 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a134:	55                   	push   ebp
c001a135:	57                   	push   edi
c001a136:	56                   	push   esi
c001a137:	53                   	push   ebx
c001a138:	81 ec 38 01 00 00    	sub    esp,0x138
c001a13e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a145:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a14c:	68 14 01 00 00       	push   0x114
c001a151:	e8 ea 56 ff ff       	call   c000f840 <malloc>
c001a156:	83 c4 0c             	add    esp,0xc
c001a159:	89 c7                	mov    edi,eax
c001a15b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a15e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a165:	50                   	push   eax
c001a166:	e8 47 93 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001a16b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a16e:	e8 11 96 ff ff       	call   c0013784 <File::exists()>
c001a173:	83 c4 10             	add    esp,0x10
c001a176:	84 c0                	test   al,al
c001a178:	75 31                	jne    c001a1ab <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a17a:	51                   	push   ecx
c001a17b:	51                   	push   ecx
c001a17c:	6a 12                	push   0x12
c001a17e:	57                   	push   edi
c001a17f:	e8 92 93 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001a184:	8b 07                	mov    eax,DWORD PTR [edi]
c001a186:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a189:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a18c:	e8 03 66 fe ff       	call   c0000794 <strlen>
c001a191:	5a                   	pop    edx
c001a192:	31 d2                	xor    edx,edx
c001a194:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a198:	51                   	push   ecx
c001a199:	55                   	push   ebp
c001a19a:	52                   	push   edx
c001a19b:	50                   	push   eax
c001a19c:	57                   	push   edi
c001a19d:	ff d3                	call   ebx
c001a19f:	83 c4 14             	add    esp,0x14
c001a1a2:	57                   	push   edi
c001a1a3:	e8 cc 93 ff ff       	call   c0013574 <File::close()>
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	31 db                	xor    ebx,ebx
c001a1ad:	50                   	push   eax
c001a1ae:	31 ed                	xor    ebp,ebp
c001a1b0:	68 00 01 00 00       	push   0x100
c001a1b5:	6a 00                	push   0x0
c001a1b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1bb:	50                   	push   eax
c001a1bc:	e8 b7 65 fe ff       	call   c0000778 <memset>
c001a1c1:	58                   	pop    eax
c001a1c2:	5a                   	pop    edx
c001a1c3:	6a 01                	push   0x1
c001a1c5:	57                   	push   edi
c001a1c6:	e8 4b 93 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001a1cb:	83 c4 10             	add    esp,0x10
c001a1ce:	83 ec 0c             	sub    esp,0xc
c001a1d1:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1d3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1d7:	51                   	push   ecx
c001a1d8:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1dc:	52                   	push   edx
c001a1dd:	6a 00                	push   0x0
c001a1df:	6a 01                	push   0x1
c001a1e1:	57                   	push   edi
c001a1e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1e5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1e9:	83 c4 20             	add    esp,0x20
c001a1ec:	3c 0d                	cmp    al,0xd
c001a1ee:	0f 84 12 01 00 00    	je     c001a306 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1f4:	85 db                	test   ebx,ebx
c001a1f6:	0f 84 fd 00 00 00    	je     c001a2f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1fc:	3c 0a                	cmp    al,0xa
c001a1fe:	74 13                	je     c001a213 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a200:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a205:	74 0c                	je     c001a213 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a207:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a20d:	0f 8e e6 00 00 00    	jle    c001a2f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a213:	83 ec 0c             	sub    esp,0xc
c001a216:	8d 53 01             	lea    edx,[ebx+0x1]
c001a219:	29 dd                	sub    ebp,ebx
c001a21b:	52                   	push   edx
c001a21c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a220:	e8 1b 56 ff ff       	call   c000f840 <malloc>
c001a225:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a228:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a22c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a22f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a233:	e8 08 56 ff ff       	call   c000f840 <malloc>
c001a238:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a23c:	83 c4 0c             	add    esp,0xc
c001a23f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a243:	52                   	push   edx
c001a244:	6a 00                	push   0x0
c001a246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a24a:	e8 29 65 fe ff       	call   c0000778 <memset>
c001a24f:	83 c4 0c             	add    esp,0xc
c001a252:	53                   	push   ebx
c001a253:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a257:	55                   	push   ebp
c001a258:	01 eb                	add    ebx,ebp
c001a25a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a25e:	e8 e1 64 fe ff       	call   c0000744 <memcpy>
c001a263:	83 c4 0c             	add    esp,0xc
c001a266:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a26a:	51                   	push   ecx
c001a26b:	6a 00                	push   0x0
c001a26d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a271:	e8 02 65 fe ff       	call   c0000778 <memset>
c001a276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a279:	e8 16 65 fe ff       	call   c0000794 <strlen>
c001a27e:	83 c4 0c             	add    esp,0xc
c001a281:	50                   	push   eax
c001a282:	53                   	push   ebx
c001a283:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a287:	e8 b8 64 fe ff       	call   c0000744 <memcpy>
c001a28c:	5b                   	pop    ebx
c001a28d:	58                   	pop    eax
c001a28e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a292:	68 91 bb 02 c0       	push   0xc002bb91
c001a297:	e8 bd 8c ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a29c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a29e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2a1:	40                   	inc    eax
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	89 06                	mov    DWORD PTR [esi],eax
c001a2a7:	85 d2                	test   edx,edx
c001a2a9:	75 0c                	jne    c001a2b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2ab:	83 ec 0c             	sub    esp,0xc
c001a2ae:	6a 08                	push   0x8
c001a2b0:	e8 8b 55 ff ff       	call   c000f840 <malloc>
c001a2b5:	eb 0c                	jmp    c001a2c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2b7:	c1 e0 03             	shl    eax,0x3
c001a2ba:	51                   	push   ecx
c001a2bb:	51                   	push   ecx
c001a2bc:	50                   	push   eax
c001a2bd:	52                   	push   edx
c001a2be:	e8 69 55 ff ff       	call   c000f82c <realloc>
c001a2c3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	31 db                	xor    ebx,ebx
c001a2cb:	52                   	push   edx
c001a2cc:	6a 08                	push   0x8
c001a2ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2d2:	50                   	push   eax
c001a2d3:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2d8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2dc:	50                   	push   eax
c001a2dd:	e8 62 64 fe ff       	call   c0000744 <memcpy>
c001a2e2:	83 c4 0c             	add    esp,0xc
c001a2e5:	68 00 01 00 00       	push   0x100
c001a2ea:	6a 00                	push   0x0
c001a2ec:	55                   	push   ebp
c001a2ed:	31 ed                	xor    ebp,ebp
c001a2ef:	e8 84 64 fe ff       	call   c0000778 <memset>
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	eb 0d                	jmp    c001a306 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2f9:	3c 3d                	cmp    al,0x3d
c001a2fb:	74 07                	je     c001a304 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2fd:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a301:	45                   	inc    ebp
c001a302:	eb 02                	jmp    c001a306 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a304:	89 eb                	mov    ebx,ebp
c001a306:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a30b:	0f 85 bd fe ff ff    	jne    c001a1ce <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a311:	50                   	push   eax
c001a312:	50                   	push   eax
c001a313:	ff 36                	push   DWORD PTR [esi]
c001a315:	68 9f bb 02 c0       	push   0xc002bb9f
c001a31a:	e8 3a 8c ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a31f:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a325:	5b                   	pop    ebx
c001a326:	5e                   	pop    esi
c001a327:	5f                   	pop    edi
c001a328:	5d                   	pop    ebp
c001a329:	c3                   	ret    

c001a32a <EnvVarContainer::__loadSystem()>:
c001a32a:	83 ec 10             	sub    esp,0x10
c001a32d:	68 40 db 02 c0       	push   0xc002db40
c001a332:	68 ca bb 02 c0       	push   0xc002bbca
c001a337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a33b:	e8 f4 fd ff ff       	call   c001a134 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a340:	83 c4 1c             	add    esp,0x1c
c001a343:	c3                   	ret    

c001a344 <EnvVarContainer::__loadUser()>:
c001a344:	c3                   	ret    
c001a345:	90                   	nop

c001a346 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a358:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a366:	90                   	nop
c001a367:	c3                   	ret    

c001a368 <EnvVarContainer::~EnvVarContainer()>:
c001a368:	83 ec 0c             	sub    esp,0xc
c001a36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a36f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a372:	85 c0                	test   eax,eax
c001a374:	74 1d                	je     c001a393 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a37c:	85 c0                	test   eax,eax
c001a37e:	74 13                	je     c001a393 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a387:	83 ec 0c             	sub    esp,0xc
c001a38a:	50                   	push   eax
c001a38b:	e8 c0 54 ff ff       	call   c000f850 <free>
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	90                   	nop
c001a394:	83 c4 0c             	add    esp,0xc
c001a397:	c3                   	ret    

c001a398 <Krnl::getEnv(Process*, char const*)>:
c001a398:	53                   	push   ebx
c001a399:	83 ec 08             	sub    esp,0x8
c001a39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3a4:	39 05 74 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b74,eax
c001a3aa:	74 04                	je     c001a3b0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3ac:	85 c0                	test   eax,eax
c001a3ae:	75 0b                	jne    c001a3bb <Krnl::getEnv(Process*, char const*)+0x23>
c001a3b0:	a1 54 11 03 c0       	mov    eax,ds:0xc0031154
c001a3b5:	85 c0                	test   eax,eax
c001a3b7:	75 19                	jne    c001a3d2 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3b9:	eb 27                	jmp    c001a3e2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3bb:	52                   	push   edx
c001a3bc:	52                   	push   edx
c001a3bd:	53                   	push   ebx
c001a3be:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3c4:	e8 5f fc ff ff       	call   c001a028 <EnvVarContainer::getEnv(char const*)>
c001a3c9:	83 c4 10             	add    esp,0x10
c001a3cc:	85 c0                	test   eax,eax
c001a3ce:	75 28                	jne    c001a3f8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3d0:	eb de                	jmp    c001a3b0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3d2:	52                   	push   edx
c001a3d3:	52                   	push   edx
c001a3d4:	53                   	push   ebx
c001a3d5:	50                   	push   eax
c001a3d6:	e8 4d fc ff ff       	call   c001a028 <EnvVarContainer::getEnv(char const*)>
c001a3db:	83 c4 10             	add    esp,0x10
c001a3de:	85 c0                	test   eax,eax
c001a3e0:	75 16                	jne    c001a3f8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3e6:	a1 58 11 03 c0       	mov    eax,ds:0xc0031158
c001a3eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3ef:	83 c4 08             	add    esp,0x8
c001a3f2:	5b                   	pop    ebx
c001a3f3:	e9 30 fc ff ff       	jmp    c001a028 <EnvVarContainer::getEnv(char const*)>
c001a3f8:	83 c4 08             	add    esp,0x8
c001a3fb:	5b                   	pop    ebx
c001a3fc:	c3                   	ret    

c001a3fd <Krnl::setEnvSystem(char const*, char const*)>:
c001a3fd:	83 ec 10             	sub    esp,0x10
c001a400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a404:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a408:	ff 35 58 11 03 c0    	push   DWORD PTR ds:0xc0031158
c001a40e:	e8 53 fc ff ff       	call   c001a066 <EnvVarContainer::setEnv(char const*, char const*)>
c001a413:	83 c4 1c             	add    esp,0x1c
c001a416:	c3                   	ret    

c001a417 <Krnl::setEnvUser(char const*, char const*)>:
c001a417:	a1 54 11 03 c0       	mov    eax,ds:0xc0031154
c001a41c:	85 c0                	test   eax,eax
c001a41e:	74 15                	je     c001a435 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a420:	83 ec 10             	sub    esp,0x10
c001a423:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a427:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42b:	50                   	push   eax
c001a42c:	e8 35 fc ff ff       	call   c001a066 <EnvVarContainer::setEnv(char const*, char const*)>
c001a431:	83 c4 1c             	add    esp,0x1c
c001a434:	c3                   	ret    
c001a435:	c3                   	ret    

c001a436 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a444:	e9 1d fc ff ff       	jmp    c001a066 <EnvVarContainer::setEnv(char const*, char const*)>

c001a449 <Krnl::deleteEnvSystem(char const*)>:
c001a449:	c3                   	ret    

c001a44a <Krnl::deleteEnvUser(char const*)>:
c001a44a:	c3                   	ret    

c001a44b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a44b:	c3                   	ret    

c001a44c <Krnl::newProcessEnv(Process*)>:
c001a44c:	83 ec 28             	sub    esp,0x28
c001a44f:	6a 0c                	push   0xc
c001a451:	e8 ea 53 ff ff       	call   c000f840 <malloc>
c001a456:	5a                   	pop    edx
c001a457:	59                   	pop    ecx
c001a458:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a45c:	50                   	push   eax
c001a45d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a461:	e8 e0 fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a466:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a46a:	83 c4 2c             	add    esp,0x2c
c001a46d:	c3                   	ret    

c001a46e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a46e:	56                   	push   esi
c001a46f:	53                   	push   ebx
c001a470:	83 ec 10             	sub    esp,0x10
c001a473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a477:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a47d:	6a 0c                	push   0xc
c001a47f:	e8 bc 53 ff ff       	call   c000f840 <malloc>
c001a484:	89 c3                	mov    ebx,eax
c001a486:	58                   	pop    eax
c001a487:	5a                   	pop    edx
c001a488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a48c:	53                   	push   ebx
c001a48d:	e8 b4 fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a492:	8b 06                	mov    eax,DWORD PTR [esi]
c001a494:	89 03                	mov    DWORD PTR [ebx],eax
c001a496:	c1 e0 03             	shl    eax,0x3
c001a499:	89 04 24             	mov    DWORD PTR [esp],eax
c001a49c:	e8 9f 53 ff ff       	call   c000f840 <malloc>
c001a4a1:	83 c4 0c             	add    esp,0xc
c001a4a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4a7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4a9:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4b0:	52                   	push   edx
c001a4b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4b4:	50                   	push   eax
c001a4b5:	e8 8a 62 fe ff       	call   c0000744 <memcpy>
c001a4ba:	89 d8                	mov    eax,ebx
c001a4bc:	83 c4 14             	add    esp,0x14
c001a4bf:	5b                   	pop    ebx
c001a4c0:	5e                   	pop    esi
c001a4c1:	c3                   	ret    

c001a4c2 <Krnl::loadSystemEnv()>:
c001a4c2:	53                   	push   ebx
c001a4c3:	83 ec 14             	sub    esp,0x14
c001a4c6:	6a 0c                	push   0xc
c001a4c8:	e8 73 53 ff ff       	call   c000f840 <malloc>
c001a4cd:	89 c3                	mov    ebx,eax
c001a4cf:	58                   	pop    eax
c001a4d0:	5a                   	pop    edx
c001a4d1:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001a4d7:	53                   	push   ebx
c001a4d8:	e8 69 fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4e0:	89 1d 58 11 03 c0    	mov    DWORD PTR ds:0xc0031158,ebx
c001a4e6:	e8 3f fe ff ff       	call   c001a32a <EnvVarContainer::__loadSystem()>
c001a4eb:	83 c4 18             	add    esp,0x18
c001a4ee:	5b                   	pop    ebx
c001a4ef:	c3                   	ret    

c001a4f0 <Krnl::loadUserEnv()>:
c001a4f0:	53                   	push   ebx
c001a4f1:	83 ec 14             	sub    esp,0x14
c001a4f4:	6a 0c                	push   0xc
c001a4f6:	e8 45 53 ff ff       	call   c000f840 <malloc>
c001a4fb:	89 c3                	mov    ebx,eax
c001a4fd:	58                   	pop    eax
c001a4fe:	5a                   	pop    edx
c001a4ff:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001a505:	53                   	push   ebx
c001a506:	e8 3b fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a50b:	89 1d 54 11 03 c0    	mov    DWORD PTR ds:0xc0031154,ebx
c001a511:	83 c4 18             	add    esp,0x18
c001a514:	5b                   	pop    ebx
c001a515:	c3                   	ret    

c001a516 <Krnl::flushEnv()>:
c001a516:	c3                   	ret    

c001a517 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a51b:	8b 15 54 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031154
c001a521:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a527:	a1 58 11 03 c0       	mov    eax,ds:0xc0031158
c001a52c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a52e:	03 01                	add    eax,DWORD PTR [ecx]
c001a530:	85 d2                	test   edx,edx
c001a532:	74 02                	je     c001a536 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a534:	03 02                	add    eax,DWORD PTR [edx]
c001a536:	c3                   	ret    

c001a537 <Krnl::getProcessEnvPair(Process*, int)>:
c001a537:	57                   	push   edi
c001a538:	8b 0d 54 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031154
c001a53e:	56                   	push   esi
c001a53f:	85 c9                	test   ecx,ecx
c001a541:	53                   	push   ebx
c001a542:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a546:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a54a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a550:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a554:	8b 02                	mov    eax,DWORD PTR [edx]
c001a556:	75 47                	jne    c001a59f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a558:	39 c3                	cmp    ebx,eax
c001a55a:	7c 47                	jl     c001a5a3 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a55c:	8b 15 58 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031158
c001a562:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a564:	01 c1                	add    ecx,eax
c001a566:	39 d9                	cmp    ecx,ebx
c001a568:	7e 6c                	jle    c001a5d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a56a:	51                   	push   ecx
c001a56b:	89 d9                	mov    ecx,ebx
c001a56d:	29 c1                	sub    ecx,eax
c001a56f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a572:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a576:	53                   	push   ebx
c001a577:	68 ec bb 02 c0       	push   0xc002bbec
c001a57c:	e8 d8 89 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a581:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a587:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a589:	a1 58 11 03 c0       	mov    eax,ds:0xc0031158
c001a58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a591:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a595:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a598:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a59b:	89 06                	mov    DWORD PTR [esi],eax
c001a59d:	eb 51                	jmp    c001a5f0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a59f:	39 c3                	cmp    ebx,eax
c001a5a1:	7d 05                	jge    c001a5a8 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5a6:	eb 20                	jmp    c001a5c8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5a8:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5aa:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5ad:	39 da                	cmp    edx,ebx
c001a5af:	7e 04                	jle    c001a5b5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5b1:	29 c3                	sub    ebx,eax
c001a5b3:	eb 10                	jmp    c001a5c5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5b5:	8b 0d 58 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031158
c001a5bb:	03 11                	add    edx,DWORD PTR [ecx]
c001a5bd:	39 da                	cmp    edx,ebx
c001a5bf:	7e 15                	jle    c001a5d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5c1:	29 c3                	sub    ebx,eax
c001a5c3:	29 fb                	sub    ebx,edi
c001a5c5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5c8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5cc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5cf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5d2:	89 06                	mov    DWORD PTR [esi],eax
c001a5d4:	eb 1d                	jmp    c001a5f3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5d6:	83 ec 0c             	sub    esp,0xc
c001a5d9:	68 00 bc 02 c0       	push   0xc002bc00
c001a5de:	e8 18 00 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001a5e3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5e9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	89 f0                	mov    eax,esi
c001a5f5:	5b                   	pop    ebx
c001a5f6:	5e                   	pop    esi
c001a5f7:	5f                   	pop    edi
c001a5f8:	c2 04 00             	ret    0x4

c001a5fb <Krnl::panic(char const*)>:
c001a5fb:	55                   	push   ebp
c001a5fc:	89 e5                	mov    ebp,esp
c001a5fe:	53                   	push   ebx
c001a5ff:	83 ec 0c             	sub    esp,0xc
c001a602:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a605:	fa                   	cli    
c001a606:	c6 05 64 11 03 c0 01 	mov    BYTE PTR ds:0xc0031164,0x1
c001a60d:	53                   	push   ebx
c001a60e:	c6 05 44 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d544,0x0
c001a615:	68 1a bc 02 c0       	push   0xc002bc1a
c001a61a:	e8 3a 89 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a61f:	58                   	pop    eax
c001a620:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a625:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62b:	e8 0d 67 ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001a630:	83 c4 0c             	add    esp,0xc
c001a633:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a638:	6a 01                	push   0x1
c001a63a:	6a 0f                	push   0xf
c001a63c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a642:	e8 27 61 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a647:	58                   	pop    eax
c001a648:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a64d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a653:	e8 86 69 ff ff       	call   c0010fde <VgaText::clearScreen()>
c001a658:	58                   	pop    eax
c001a659:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a65e:	5a                   	pop    edx
c001a65f:	68 33 bc 02 c0       	push   0xc002bc33
c001a664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66a:	e8 ed 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a66f:	59                   	pop    ecx
c001a670:	58                   	pop    eax
c001a671:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a676:	68 d8 bc 02 c0       	push   0xc002bcd8
c001a67b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a681:	e8 d6 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a686:	58                   	pop    eax
c001a687:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a68c:	5a                   	pop    edx
c001a68d:	68 4f bc 02 c0       	push   0xc002bc4f
c001a692:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a698:	e8 bf 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a69d:	59                   	pop    ecx
c001a69e:	58                   	pop    eax
c001a69f:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a6a4:	53                   	push   ebx
c001a6a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ab:	e8 ac 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6b0:	58                   	pop    eax
c001a6b1:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a6b6:	5a                   	pop    edx
c001a6b7:	68 6f bc 02 c0       	push   0xc002bc6f
c001a6bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c2:	e8 95 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6c7:	a1 60 11 03 c0       	mov    eax,ds:0xc0031160
c001a6cc:	83 c4 10             	add    esp,0x10
c001a6cf:	85 c0                	test   eax,eax
c001a6d1:	74 02                	je     c001a6d5 <Krnl::panic(char const*)+0xda>
c001a6d3:	ff d0                	call   eax
c001a6d5:	83 ec 0c             	sub    esp,0xc
c001a6d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6db:	e8 47 30 00 00       	call   c001d727 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6e0:	83 c4 10             	add    esp,0x10
c001a6e3:	89 c3                	mov    ebx,eax
c001a6e5:	85 c0                	test   eax,eax
c001a6e7:	0f 84 50 02 00 00    	je     c001a93d <Krnl::panic(char const*)+0x342>
c001a6ed:	83 ec 08             	sub    esp,0x8
c001a6f0:	8b 15 74 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b74
c001a6f6:	68 14 bd 02 c0       	push   0xc002bd14
c001a6fb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a701:	e8 56 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a706:	58                   	pop    eax
c001a707:	5a                   	pop    edx
c001a708:	8b 15 74 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b74
c001a70e:	68 4f bc 02 c0       	push   0xc002bc4f
c001a713:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a719:	e8 3e 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a71e:	59                   	pop    ecx
c001a71f:	58                   	pop    eax
c001a720:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a725:	53                   	push   ebx
c001a726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72c:	e8 2b 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	83 ec 08             	sub    esp,0x8
c001a737:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a73c:	68 6e bc 02 c0       	push   0xc002bc6e
c001a741:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a747:	e8 10 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a74c:	58                   	pop    eax
c001a74d:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a752:	5a                   	pop    edx
c001a753:	68 6c bd 02 c0       	push   0xc002bd6c
c001a758:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75e:	e8 f9 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a763:	59                   	pop    ecx
c001a764:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a769:	5b                   	pop    ebx
c001a76a:	68 ac bd 02 c0       	push   0xc002bdac
c001a76f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a775:	e8 e2 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a77a:	58                   	pop    eax
c001a77b:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a780:	5a                   	pop    edx
c001a781:	68 5a bc 02 c0       	push   0xc002bc5a
c001a786:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a78c:	e8 cb 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a791:	59                   	pop    ecx
c001a792:	5b                   	pop    ebx
c001a793:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a796:	68 72 bc 02 c0       	push   0xc002bc72
c001a79b:	e8 b9 87 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a7a0:	58                   	pop    eax
c001a7a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7a4:	5a                   	pop    edx
c001a7a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7a8:	68 7b bc 02 c0       	push   0xc002bc7b
c001a7ad:	e8 a7 87 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a7b2:	59                   	pop    ecx
c001a7b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7b6:	5b                   	pop    ebx
c001a7b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7bc:	68 84 bc 02 c0       	push   0xc002bc84
c001a7c1:	e8 93 87 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001a7c6:	58                   	pop    eax
c001a7c7:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a7cc:	5a                   	pop    edx
c001a7cd:	68 f0 bd 02 c0       	push   0xc002bdf0
c001a7d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d8:	e8 7f 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7dd:	59                   	pop    ecx
c001a7de:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a7e3:	5b                   	pop    ebx
c001a7e4:	68 8d bc 02 c0       	push   0xc002bc8d
c001a7e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ef:	e8 68 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7f4:	0f 20 c0             	mov    eax,cr0
c001a7f7:	5a                   	pop    edx
c001a7f8:	59                   	pop    ecx
c001a7f9:	50                   	push   eax
c001a7fa:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a7ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a805:	e8 78 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a80a:	5b                   	pop    ebx
c001a80b:	58                   	pop    eax
c001a80c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a811:	68 97 bc 02 c0       	push   0xc002bc97
c001a816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81c:	e8 3b 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a821:	0f 20 d0             	mov    eax,cr2
c001a824:	5a                   	pop    edx
c001a825:	59                   	pop    ecx
c001a826:	50                   	push   eax
c001a827:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a82c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a832:	e8 4b 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a837:	5b                   	pop    ebx
c001a838:	58                   	pop    eax
c001a839:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a83e:	68 a1 bc 02 c0       	push   0xc002bca1
c001a843:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a849:	e8 0e 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a84e:	0f 20 d8             	mov    eax,cr3
c001a851:	5a                   	pop    edx
c001a852:	59                   	pop    ecx
c001a853:	50                   	push   eax
c001a854:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a859:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85f:	e8 1e 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a864:	5b                   	pop    ebx
c001a865:	58                   	pop    eax
c001a866:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a86b:	68 b4 bc 02 c0       	push   0xc002bcb4
c001a870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a876:	e8 e1 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a87b:	0f 20 e0             	mov    eax,cr4
c001a87e:	5a                   	pop    edx
c001a87f:	59                   	pop    ecx
c001a880:	50                   	push   eax
c001a881:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a886:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88c:	e8 f1 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a891:	5b                   	pop    ebx
c001a892:	58                   	pop    eax
c001a893:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a898:	68 be bc 02 c0       	push   0xc002bcbe
c001a89d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a3:	e8 b4 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8a8:	5a                   	pop    edx
c001a8a9:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8ae:	59                   	pop    ecx
c001a8af:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8b8:	50                   	push   eax
c001a8b9:	e8 c4 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8be:	5b                   	pop    ebx
c001a8bf:	58                   	pop    eax
c001a8c0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8c5:	68 d5 bc 02 c0       	push   0xc002bcd5
c001a8ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d0:	e8 87 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8d5:	5a                   	pop    edx
c001a8d6:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8db:	59                   	pop    ecx
c001a8dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8e5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8e8:	50                   	push   eax
c001a8e9:	e8 94 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8ee:	5b                   	pop    ebx
c001a8ef:	58                   	pop    eax
c001a8f0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8f5:	68 d5 bc 02 c0       	push   0xc002bcd5
c001a8fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a900:	e8 57 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a905:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a90a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a90d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a913:	8b 12                	mov    edx,DWORD PTR [edx]
c001a915:	59                   	pop    ecx
c001a916:	5b                   	pop    ebx
c001a917:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a91a:	50                   	push   eax
c001a91b:	e8 62 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a920:	83 c4 10             	add    esp,0x10
c001a923:	b2 fe                	mov    dl,0xfe
c001a925:	e4 60                	in     al,0x60
c001a927:	3c 1c                	cmp    al,0x1c
c001a929:	74 04                	je     c001a92f <Krnl::panic(char const*)+0x334>
c001a92b:	3c 5a                	cmp    al,0x5a
c001a92d:	75 f6                	jne    c001a925 <Krnl::panic(char const*)+0x32a>
c001a92f:	e4 64                	in     al,0x64
c001a931:	a8 02                	test   al,0x2
c001a933:	75 fa                	jne    c001a92f <Krnl::panic(char const*)+0x334>
c001a935:	88 d0                	mov    al,dl
c001a937:	e6 64                	out    0x64,al
c001a939:	fa                   	cli    
c001a93a:	f4                   	hlt    
c001a93b:	eb e8                	jmp    c001a925 <Krnl::panic(char const*)+0x32a>
c001a93d:	50                   	push   eax
c001a93e:	50                   	push   eax
c001a93f:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a944:	68 40 bd 02 c0       	push   0xc002bd40
c001a949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94f:	e8 08 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a954:	58                   	pop    eax
c001a955:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a95a:	5a                   	pop    edx
c001a95b:	68 4f bc 02 c0       	push   0xc002bc4f
c001a960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a966:	e8 f1 67 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a96b:	59                   	pop    ecx
c001a96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a971:	5b                   	pop    ebx
c001a972:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a975:	83 c0 0c             	add    eax,0xc
c001a978:	50                   	push   eax
c001a979:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a97e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a984:	e8 d3 67 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	e9 a3 fd ff ff       	jmp    c001a734 <Krnl::panic(char const*)+0x139>

c001a991 <Net::switchEndian16(unsigned short)>:
c001a991:	83 ec 04             	sub    esp,0x4
c001a994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a998:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a99c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9a0:	c1 f8 08             	sar    eax,0x8
c001a9a3:	89 c2                	mov    edx,eax
c001a9a5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9a9:	c1 e0 08             	shl    eax,0x8
c001a9ac:	09 d0                	or     eax,edx
c001a9ae:	83 c4 04             	add    esp,0x4
c001a9b1:	c3                   	ret    

c001a9b2 <Net::switchEndian32(unsigned int)>:
c001a9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b6:	c1 e8 18             	shr    eax,0x18
c001a9b9:	89 c2                	mov    edx,eax
c001a9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9bf:	c1 e0 08             	shl    eax,0x8
c001a9c2:	25 00 00 ff 00       	and    eax,0xff0000
c001a9c7:	09 c2                	or     edx,eax
c001a9c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cd:	c1 e8 08             	shr    eax,0x8
c001a9d0:	25 00 ff 00 00       	and    eax,0xff00
c001a9d5:	09 c2                	or     edx,eax
c001a9d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9db:	c1 e0 18             	shl    eax,0x18
c001a9de:	09 d0                	or     eax,edx
c001a9e0:	c3                   	ret    

c001a9e1 <Net::crc32Calc(unsigned char*, int)>:
c001a9e1:	83 ec 10             	sub    esp,0x10
c001a9e4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9e9:	75 07                	jne    c001a9f2 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9eb:	b8 00 00 00 00       	mov    eax,0x0
c001a9f0:	eb 7c                	jmp    c001aa6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9f2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9f7:	7f 07                	jg     c001aa00 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9f9:	b8 00 00 00 00       	mov    eax,0x0
c001a9fe:	eb 6e                	jmp    c001aa6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa00:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa14:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa18:	7d 4e                	jge    c001aa68 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa22:	01 d0                	add    eax,edx
c001aa24:	8a 00                	mov    al,BYTE PTR [eax]
c001aa26:	0f b6 c0             	movzx  eax,al
c001aa29:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa35:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa3a:	7f 26                	jg     c001aa62 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa40:	83 e0 01             	and    eax,0x1
c001aa43:	74 0d                	je     c001aa52 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa49:	d1 e8                	shr    eax,1
c001aa4b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa50:	eb 06                	jmp    c001aa58 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa56:	d1 e8                	shr    eax,1
c001aa58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa60:	eb d3                	jmp    c001aa35 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa62:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa66:	eb a8                	jmp    c001aa10 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6c:	f7 d0                	not    eax
c001aa6e:	83 c4 10             	add    esp,0x10
c001aa71:	c3                   	ret    

c001aa72 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa72:	83 ec 1c             	sub    esp,0x1c
c001aa75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa85:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa8a:	7f 14                	jg     c001aaa0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa90:	8d 50 01             	lea    edx,[eax+0x1]
c001aa93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa97:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa9e:	eb e5                	jmp    c001aa85 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaab:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aaae:	83 ec 04             	sub    esp,0x4
c001aab1:	6a 06                	push   0x6
c001aab3:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aab7:	50                   	push   eax
c001aab8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aabc:	e8 83 5c fe ff       	call   c0000744 <memcpy>
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aac9:	83 ec 04             	sub    esp,0x4
c001aacc:	6a 06                	push   0x6
c001aace:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aad2:	50                   	push   eax
c001aad3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aad7:	e8 68 5c fe ff       	call   c0000744 <memcpy>
c001aadc:	83 c4 10             	add    esp,0x10
c001aadf:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aae4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aae8:	0f b7 c0             	movzx  eax,ax
c001aaeb:	c1 f8 08             	sar    eax,0x8
c001aaee:	89 c1                	mov    ecx,eax
c001aaf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aafb:	88 ca                	mov    dl,cl
c001aafd:	88 10                	mov    BYTE PTR [eax],dl
c001aaff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab07:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab0a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab0e:	88 10                	mov    BYTE PTR [eax],dl
c001ab10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab18:	83 ec 04             	sub    esp,0x4
c001ab1b:	52                   	push   edx
c001ab1c:	50                   	push   eax
c001ab1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab21:	e8 1e 5c fe ff       	call   c0000744 <memcpy>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab2d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab35:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab39:	83 ec 08             	sub    esp,0x8
c001ab3c:	50                   	push   eax
c001ab3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab41:	e8 9b fe ff ff       	call   c001a9e1 <Net::crc32Calc(unsigned char*, int)>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab51:	c1 e8 18             	shr    eax,0x18
c001ab54:	89 c1                	mov    ecx,eax
c001ab56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab61:	88 ca                	mov    dl,cl
c001ab63:	88 10                	mov    BYTE PTR [eax],dl
c001ab65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab69:	c1 e8 10             	shr    eax,0x10
c001ab6c:	89 c1                	mov    ecx,eax
c001ab6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab72:	8d 50 01             	lea    edx,[eax+0x1]
c001ab75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab79:	88 ca                	mov    dl,cl
c001ab7b:	88 10                	mov    BYTE PTR [eax],dl
c001ab7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab81:	c1 e8 08             	shr    eax,0x8
c001ab84:	89 c1                	mov    ecx,eax
c001ab86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab91:	88 ca                	mov    dl,cl
c001ab93:	88 10                	mov    BYTE PTR [eax],dl
c001ab95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab99:	8d 50 01             	lea    edx,[eax+0x1]
c001ab9c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aba0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aba4:	88 10                	mov    BYTE PTR [eax],dl
c001aba6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abaa:	83 c4 1c             	add    esp,0x1c
c001abad:	c3                   	ret    

c001abae <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abae:	83 ec 2c             	sub    esp,0x2c
c001abb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abb9:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abbe:	83 ec 04             	sub    esp,0x4
c001abc1:	6a 06                	push   0x6
c001abc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abcb:	83 c0 0e             	add    eax,0xe
c001abce:	50                   	push   eax
c001abcf:	e8 70 5b fe ff       	call   c0000744 <memcpy>
c001abd4:	83 c4 10             	add    esp,0x10
c001abd7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abdc:	83 ec 04             	sub    esp,0x4
c001abdf:	6a 06                	push   0x6
c001abe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abe5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abe9:	83 c0 08             	add    eax,0x8
c001abec:	50                   	push   eax
c001abed:	e8 52 5b fe ff       	call   c0000744 <memcpy>
c001abf2:	83 c4 10             	add    esp,0x10
c001abf5:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ac01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac05:	8a 00                	mov    al,BYTE PTR [eax]
c001ac07:	0f b6 c0             	movzx  eax,al
c001ac0a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac13:	8d 50 01             	lea    edx,[eax+0x1]
c001ac16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac1a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac1c:	0f b6 c0             	movzx  eax,al
c001ac1f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac24:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac29:	c1 e0 08             	shl    eax,0x8
c001ac2c:	89 c2                	mov    edx,eax
c001ac2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac32:	09 d0                	or     eax,edx
c001ac34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac38:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac3c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac41:	75 3a                	jne    c001ac7d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac47:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac4a:	66 3d dc 05          	cmp    ax,0x5dc
c001ac4e:	77 10                	ja     c001ac60 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac57:	0f b7 c0             	movzx  eax,ax
c001ac5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac5e:	eb 1d                	jmp    c001ac7d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	68 18 be 02 c0       	push   0xc002be18
c001ac68:	e8 ec 82 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ac6d:	83 c4 10             	add    esp,0x10
c001ac70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac74:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac78:	e9 c0 00 00 00       	jmp    c001ad3d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac7d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac87:	83 ec 04             	sub    esp,0x4
c001ac8a:	52                   	push   edx
c001ac8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac8f:	50                   	push   eax
c001ac90:	e8 af 5a fe ff       	call   c0000744 <memcpy>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac9c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aca0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca4:	8d 50 01             	lea    edx,[eax+0x1]
c001aca7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acab:	8a 00                	mov    al,BYTE PTR [eax]
c001acad:	0f b6 c0             	movzx  eax,al
c001acb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb8:	8d 50 01             	lea    edx,[eax+0x1]
c001acbb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbf:	8a 00                	mov    al,BYTE PTR [eax]
c001acc1:	0f b6 c0             	movzx  eax,al
c001acc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001accc:	8d 50 01             	lea    edx,[eax+0x1]
c001accf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd3:	8a 00                	mov    al,BYTE PTR [eax]
c001acd5:	0f b6 c0             	movzx  eax,al
c001acd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace0:	8d 50 01             	lea    edx,[eax+0x1]
c001ace3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ace7:	8a 00                	mov    al,BYTE PTR [eax]
c001ace9:	0f b6 c0             	movzx  eax,al
c001acec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf4:	c1 e0 18             	shl    eax,0x18
c001acf7:	89 c2                	mov    edx,eax
c001acf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfd:	c1 e0 10             	shl    eax,0x10
c001ad00:	09 c2                	or     edx,eax
c001ad02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad06:	c1 e0 08             	shl    eax,0x8
c001ad09:	09 d0                	or     eax,edx
c001ad0b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad17:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad1b:	83 e8 04             	sub    eax,0x4
c001ad1e:	83 ec 08             	sub    esp,0x8
c001ad21:	50                   	push   eax
c001ad22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad26:	e8 b6 fc ff ff       	call   c001a9e1 <Net::crc32Calc(unsigned char*, int)>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad32:	0f 94 c2             	sete   dl
c001ad35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad39:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad3c:	90                   	nop
c001ad3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad41:	83 c4 2c             	add    esp,0x2c
c001ad44:	c2 04 00             	ret    0x4

c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad47:	55                   	push   ebp
c001ad48:	57                   	push   edi
c001ad49:	56                   	push   esi
c001ad4a:	53                   	push   ebx
c001ad4b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad51:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad58:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad5a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad5d:	80 fb 40             	cmp    bl,0x40
c001ad60:	75 1b                	jne    c001ad7d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad62:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad64:	84 d2                	test   dl,dl
c001ad66:	0f 84 f1 00 00 00    	je     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad6c:	8d 46 01             	lea    eax,[esi+0x1]
c001ad6f:	80 fa 3a             	cmp    dl,0x3a
c001ad72:	74 04                	je     c001ad78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad74:	89 c6                	mov    esi,eax
c001ad76:	eb ea                	jmp    c001ad62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad78:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad7b:	89 c6                	mov    esi,eax
c001ad7d:	50                   	push   eax
c001ad7e:	6a 40                	push   0x40
c001ad80:	6a 00                	push   0x0
c001ad82:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad86:	50                   	push   eax
c001ad87:	e8 ec 59 fe ff       	call   c0000778 <memset>
c001ad8c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad93:	31 c0                	xor    eax,eax
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad9a:	84 c9                	test   cl,cl
c001ad9c:	0f 84 bb 00 00 00    	je     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada2:	3d c7 00 00 00       	cmp    eax,0xc7
c001ada7:	0f 8f b0 00 00 00    	jg     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adad:	80 f9 0a             	cmp    cl,0xa
c001adb0:	0f 85 98 00 00 00    	jne    c001ae4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adb6:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adbb:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adbf:	a8 df                	test   al,0xdf
c001adc1:	0f 94 c1             	sete   cl
c001adc4:	3c 23                	cmp    al,0x23
c001adc6:	0f 94 c2             	sete   dl
c001adc9:	08 d1                	or     cl,dl
c001adcb:	75 4a                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adcd:	8d 50 f7             	lea    edx,[eax-0x9]
c001add0:	80 fa 01             	cmp    dl,0x1
c001add3:	76 42                	jbe    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001add5:	3c 5b                	cmp    al,0x5b
c001add7:	75 42                	jne    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001add9:	80 fb 40             	cmp    bl,0x40
c001addc:	75 39                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ade5:	52                   	push   edx
c001ade6:	e8 a9 59 fe ff       	call   c0000794 <strlen>
c001adeb:	83 c4 10             	add    esp,0x10
c001adee:	83 f8 3f             	cmp    eax,0x3f
c001adf1:	77 6a                	ja     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf3:	50                   	push   eax
c001adf4:	50                   	push   eax
c001adf5:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adf9:	52                   	push   edx
c001adfa:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adfe:	52                   	push   edx
c001adff:	e8 30 5a fe ff       	call   c0000834 <strcpy>
c001ae04:	58                   	pop    eax
c001ae05:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae09:	52                   	push   edx
c001ae0a:	e8 85 59 fe ff       	call   c0000794 <strlen>
c001ae0f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae14:	83 c4 10             	add    esp,0x10
c001ae17:	31 d2                	xor    edx,edx
c001ae19:	eb 3a                	jmp    c001ae55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae1b:	80 fb 40             	cmp    bl,0x40
c001ae1e:	74 06                	je     c001ae26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae20:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae24:	eb 20                	jmp    c001ae46 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae26:	50                   	push   eax
c001ae27:	50                   	push   eax
c001ae28:	55                   	push   ebp
c001ae29:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae2d:	50                   	push   eax
c001ae2e:	e8 8d 5a fe ff       	call   c00008c0 <strcmp>
c001ae33:	83 c4 10             	add    esp,0x10
c001ae36:	85 c0                	test   eax,eax
c001ae38:	75 dd                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae3a:	eb e4                	jmp    c001ae20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae3c:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3f:	80 f9 3d             	cmp    cl,0x3d
c001ae42:	74 1d                	je     c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae44:	89 d0                	mov    eax,edx
c001ae46:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae48:	84 c9                	test   cl,cl
c001ae4a:	75 f0                	jne    c001ae3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae4c:	eb 0f                	jmp    c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ae51:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae55:	47                   	inc    edi
c001ae56:	89 d0                	mov    eax,edx
c001ae58:	e9 3b ff ff ff       	jmp    c001ad98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae5d:	31 c0                	xor    eax,eax
c001ae5f:	eb 33                	jmp    c001ae94 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae65:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae68:	50                   	push   eax
c001ae69:	50                   	push   eax
c001ae6a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae6e:	50                   	push   eax
c001ae6f:	56                   	push   esi
c001ae70:	e8 4b 5a fe ff       	call   c00008c0 <strcmp>
c001ae75:	83 c4 10             	add    esp,0x10
c001ae78:	85 c0                	test   eax,eax
c001ae7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae7e:	75 97                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae80:	51                   	push   ecx
c001ae81:	51                   	push   ecx
c001ae82:	52                   	push   edx
c001ae83:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae8a:	e8 a5 59 fe ff       	call   c0000834 <strcpy>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	b0 01                	mov    al,0x1
c001ae94:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae9a:	5b                   	pop    ebx
c001ae9b:	5e                   	pop    esi
c001ae9c:	5f                   	pop    edi
c001ae9d:	5d                   	pop    ebp
c001ae9e:	c3                   	ret    

c001ae9f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae9f:	57                   	push   edi
c001aea0:	56                   	push   esi
c001aea1:	53                   	push   ebx
c001aea2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aea8:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aeaf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aeb6:	53                   	push   ebx
c001aeb7:	e8 d8 58 fe ff       	call   c0000794 <strlen>
c001aebc:	89 34 24             	mov    DWORD PTR [esp],esi
c001aebf:	89 c7                	mov    edi,eax
c001aec1:	e8 ce 58 fe ff       	call   c0000794 <strlen>
c001aec6:	83 c4 10             	add    esp,0x10
c001aec9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aecd:	3d ff 00 00 00       	cmp    eax,0xff
c001aed2:	0f 87 d3 00 00 00    	ja     c001afab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aed8:	57                   	push   edi
c001aed9:	57                   	push   edi
c001aeda:	56                   	push   esi
c001aedb:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aedf:	56                   	push   esi
c001aee0:	e8 4f 59 fe ff       	call   c0000834 <strcpy>
c001aee5:	58                   	pop    eax
c001aee6:	5a                   	pop    edx
c001aee7:	68 e1 c3 02 c0       	push   0xc002c3e1
c001aeec:	56                   	push   esi
c001aeed:	e8 82 5a fe ff       	call   c0000974 <strcat>
c001aef2:	59                   	pop    ecx
c001aef3:	5f                   	pop    edi
c001aef4:	53                   	push   ebx
c001aef5:	56                   	push   esi
c001aef6:	e8 79 5a fe ff       	call   c0000974 <strcat>
c001aefb:	58                   	pop    eax
c001aefc:	5a                   	pop    edx
c001aefd:	68 64 be 02 c0       	push   0xc002be64
c001af02:	56                   	push   esi
c001af03:	e8 6c 5a fe ff       	call   c0000974 <strcat>
c001af08:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af0f:	e8 2c 49 ff ff       	call   c000f840 <malloc>
c001af14:	83 c4 0c             	add    esp,0xc
c001af17:	89 c3                	mov    ebx,eax
c001af19:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001af1f:	56                   	push   esi
c001af20:	50                   	push   eax
c001af21:	e8 8c 85 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001af26:	83 c4 10             	add    esp,0x10
c001af29:	85 db                	test   ebx,ebx
c001af2b:	74 7e                	je     c001afab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af2d:	51                   	push   ecx
c001af2e:	51                   	push   ecx
c001af2f:	6a 01                	push   0x1
c001af31:	53                   	push   ebx
c001af32:	e8 df 85 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	85 c0                	test   eax,eax
c001af3c:	74 08                	je     c001af46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af3e:	83 ec 0c             	sub    esp,0xc
c001af41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af43:	53                   	push   ebx
c001af44:	eb 5f                	jmp    c001afa5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af46:	52                   	push   edx
c001af47:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af4b:	50                   	push   eax
c001af4c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af50:	50                   	push   eax
c001af51:	53                   	push   ebx
c001af52:	e8 6b 88 ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001af57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af5b:	83 c4 10             	add    esp,0x10
c001af5e:	89 c1                	mov    ecx,eax
c001af60:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af64:	74 31                	je     c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af66:	83 ec 0c             	sub    esp,0xc
c001af69:	50                   	push   eax
c001af6a:	e8 d1 48 ff ff       	call   c000f840 <malloc>
c001af6f:	89 c6                	mov    esi,eax
c001af71:	58                   	pop    eax
c001af72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af74:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af78:	52                   	push   edx
c001af79:	56                   	push   esi
c001af7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af82:	53                   	push   ebx
c001af83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af86:	83 c4 20             	add    esp,0x20
c001af89:	85 c0                	test   eax,eax
c001af8b:	75 0a                	jne    c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af91:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af95:	74 18                	je     c001afaf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af97:	83 ec 0c             	sub    esp,0xc
c001af9a:	53                   	push   ebx
c001af9b:	e8 d4 85 ff ff       	call   c0013574 <File::close()>
c001afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afa5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afa8:	83 c4 10             	add    esp,0x10
c001afab:	31 c0                	xor    eax,eax
c001afad:	eb 3b                	jmp    c001afea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afaf:	83 ec 0c             	sub    esp,0xc
c001afb2:	53                   	push   ebx
c001afb3:	e8 bc 85 ff ff       	call   c0013574 <File::close()>
c001afb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afc0:	83 c4 0c             	add    esp,0xc
c001afc3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afca:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afd1:	56                   	push   esi
c001afd2:	e8 70 fd ff ff       	call   c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afd7:	89 34 24             	mov    DWORD PTR [esp],esi
c001afda:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afde:	e8 6d 48 ff ff       	call   c000f850 <free>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afea:	81 c4 20 01 00 00    	add    esp,0x120
c001aff0:	5b                   	pop    ebx
c001aff1:	5e                   	pop    esi
c001aff2:	5f                   	pop    edi
c001aff3:	c3                   	ret    

c001aff4 <Reg::getLine(char*, char*, char*)>:
c001aff4:	57                   	push   edi
c001aff5:	56                   	push   esi
c001aff6:	53                   	push   ebx
c001aff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001affb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b003:	57                   	push   edi
c001b004:	56                   	push   esi
c001b005:	53                   	push   ebx
c001b006:	68 69 be 02 c0       	push   0xc002be69
c001b00b:	e8 8f fe ff ff       	call   c001ae9f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	84 c0                	test   al,al
c001b015:	75 10                	jne    c001b027 <Reg::getLine(char*, char*, char*)+0x33>
c001b017:	57                   	push   edi
c001b018:	56                   	push   esi
c001b019:	53                   	push   ebx
c001b01a:	68 8e be 02 c0       	push   0xc002be8e
c001b01f:	e8 7b fe ff ff       	call   c001ae9f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	5b                   	pop    ebx
c001b028:	5e                   	pop    esi
c001b029:	5f                   	pop    edi
c001b02a:	c3                   	ret    

c001b02b <Reg::readInt(char*, char*, int*)>:
c001b02b:	55                   	push   ebp
c001b02c:	57                   	push   edi
c001b02d:	56                   	push   esi
c001b02e:	53                   	push   ebx
c001b02f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b035:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b039:	57                   	push   edi
c001b03a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b041:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b048:	e8 a7 ff ff ff       	call   c001aff4 <Reg::getLine(char*, char*, char*)>
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	84 c0                	test   al,al
c001b052:	0f 84 b3 00 00 00    	je     c001b10b <Reg::readInt(char*, char*, int*)+0xe0>
c001b058:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b05c:	80 fa 2b             	cmp    dl,0x2b
c001b05f:	74 0c                	je     c001b06d <Reg::readInt(char*, char*, int*)+0x42>
c001b061:	80 fa 2d             	cmp    dl,0x2d
c001b064:	75 0e                	jne    c001b074 <Reg::readInt(char*, char*, int*)+0x49>
c001b066:	ba 01 00 00 00       	mov    edx,0x1
c001b06b:	eb 0b                	jmp    c001b078 <Reg::readInt(char*, char*, int*)+0x4d>
c001b06d:	ba 01 00 00 00       	mov    edx,0x1
c001b072:	eb 02                	jmp    c001b076 <Reg::readInt(char*, char*, int*)+0x4b>
c001b074:	31 d2                	xor    edx,edx
c001b076:	31 c0                	xor    eax,eax
c001b078:	be 0a 00 00 00       	mov    esi,0xa
c001b07d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b082:	75 20                	jne    c001b0a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b084:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b088:	80 f9 78             	cmp    cl,0x78
c001b08b:	75 0a                	jne    c001b097 <Reg::readInt(char*, char*, int*)+0x6c>
c001b08d:	83 c2 02             	add    edx,0x2
c001b090:	be 10 00 00 00       	mov    esi,0x10
c001b095:	eb 0d                	jmp    c001b0a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b097:	80 f9 62             	cmp    cl,0x62
c001b09a:	75 08                	jne    c001b0a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b09c:	83 c2 02             	add    edx,0x2
c001b09f:	be 02 00 00 00       	mov    esi,0x2
c001b0a4:	01 d7                	add    edi,edx
c001b0a6:	31 d2                	xor    edx,edx
c001b0a8:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0aa:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0ae:	80 fb 0d             	cmp    bl,0xd
c001b0b1:	0f 94 c3             	sete   bl
c001b0b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0b9:	0f 94 c1             	sete   cl
c001b0bc:	08 cb                	or     bl,cl
c001b0be:	75 3a                	jne    c001b0fa <Reg::readInt(char*, char*, int*)+0xcf>
c001b0c0:	0f af d6             	imul   edx,esi
c001b0c3:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0c8:	83 fe 10             	cmp    esi,0x10
c001b0cb:	75 26                	jne    c001b0f3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0cd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0d1:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0d4:	89 e9                	mov    ecx,ebp
c001b0d6:	80 f9 05             	cmp    cl,0x5
c001b0d9:	77 06                	ja     c001b0e1 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0db:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0df:	eb 16                	jmp    c001b0f7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0e1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0e5:	83 e9 61             	sub    ecx,0x61
c001b0e8:	80 f9 05             	cmp    cl,0x5
c001b0eb:	77 06                	ja     c001b0f3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0ed:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0f1:	eb 04                	jmp    c001b0f7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0f3:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0f7:	47                   	inc    edi
c001b0f8:	eb ae                	jmp    c001b0a8 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0fa:	84 c0                	test   al,al
c001b0fc:	74 02                	je     c001b100 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0fe:	f7 da                	neg    edx
c001b100:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b107:	89 10                	mov    DWORD PTR [eax],edx
c001b109:	88 d8                	mov    al,bl
c001b10b:	81 c4 ec 00 00 00    	add    esp,0xec
c001b111:	5b                   	pop    ebx
c001b112:	5e                   	pop    esi
c001b113:	5f                   	pop    edi
c001b114:	5d                   	pop    ebp
c001b115:	c3                   	ret    

c001b116 <Reg::readString(char*, char*, char*, int)>:
c001b116:	57                   	push   edi
c001b117:	56                   	push   esi
c001b118:	53                   	push   ebx
c001b119:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b11f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b126:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b12a:	57                   	push   edi
c001b12b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b132:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b139:	e8 b6 fe ff ff       	call   c001aff4 <Reg::getLine(char*, char*, char*)>
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	89 c6                	mov    esi,eax
c001b143:	84 c0                	test   al,al
c001b145:	74 44                	je     c001b18b <Reg::readString(char*, char*, char*, int)+0x75>
c001b147:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b14e:	31 c0                	xor    eax,eax
c001b150:	4a                   	dec    edx
c001b151:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b154:	84 c9                	test   cl,cl
c001b156:	74 0f                	je     c001b167 <Reg::readString(char*, char*, char*, int)+0x51>
c001b158:	39 c2                	cmp    edx,eax
c001b15a:	7e 0b                	jle    c001b167 <Reg::readString(char*, char*, char*, int)+0x51>
c001b15c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b15f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b164:	40                   	inc    eax
c001b165:	eb ea                	jmp    c001b151 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b167:	83 ec 0c             	sub    esp,0xc
c001b16a:	53                   	push   ebx
c001b16b:	e8 24 56 fe ff       	call   c0000794 <strlen>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b178:	75 11                	jne    c001b18b <Reg::readString(char*, char*, char*, int)+0x75>
c001b17a:	83 ec 0c             	sub    esp,0xc
c001b17d:	53                   	push   ebx
c001b17e:	e8 11 56 fe ff       	call   c0000794 <strlen>
c001b183:	83 c4 10             	add    esp,0x10
c001b186:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b18b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b191:	89 f0                	mov    eax,esi
c001b193:	5b                   	pop    ebx
c001b194:	5e                   	pop    esi
c001b195:	5f                   	pop    edi
c001b196:	c3                   	ret    

c001b197 <Reg::readBool(char*, char*, bool*)>:
c001b197:	83 ec 20             	sub    esp,0x20
c001b19a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b19e:	50                   	push   eax
c001b19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a7:	e8 7f fe ff ff       	call   c001b02b <Reg::readInt(char*, char*, int*)>
c001b1ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1b5:	0f 95 02             	setne  BYTE PTR [edx]
c001b1b8:	83 c4 2c             	add    esp,0x2c
c001b1bb:	c3                   	ret    

c001b1bc <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1bc:	53                   	push   ebx
c001b1bd:	83 ec 1c             	sub    esp,0x1c
c001b1c0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1c8:	50                   	push   eax
c001b1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d1:	e8 c1 ff ff ff       	call   c001b197 <Reg::readBool(char*, char*, bool*)>
c001b1d6:	83 c4 10             	add    esp,0x10
c001b1d9:	84 c0                	test   al,al
c001b1db:	74 04                	je     c001b1e1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1dd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1e1:	88 d8                	mov    al,bl
c001b1e3:	83 c4 18             	add    esp,0x18
c001b1e6:	5b                   	pop    ebx
c001b1e7:	c3                   	ret    

c001b1e8 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1e8:	53                   	push   ebx
c001b1e9:	83 ec 1c             	sub    esp,0x1c
c001b1ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1f4:	50                   	push   eax
c001b1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1fd:	e8 29 fe ff ff       	call   c001b02b <Reg::readInt(char*, char*, int*)>
c001b202:	83 c4 10             	add    esp,0x10
c001b205:	84 c0                	test   al,al
c001b207:	74 04                	je     c001b20d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b209:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b20d:	89 d8                	mov    eax,ebx
c001b20f:	83 c4 18             	add    esp,0x18
c001b212:	5b                   	pop    ebx
c001b213:	c3                   	ret    

c001b214 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b214:	57                   	push   edi
c001b215:	56                   	push   esi
c001b216:	53                   	push   ebx
c001b217:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b21b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b21f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b223:	56                   	push   esi
c001b224:	53                   	push   ebx
c001b225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b22d:	e8 e4 fe ff ff       	call   c001b116 <Reg::readString(char*, char*, char*, int)>
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	84 c0                	test   al,al
c001b237:	75 1b                	jne    c001b254 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b239:	50                   	push   eax
c001b23a:	56                   	push   esi
c001b23b:	4e                   	dec    esi
c001b23c:	6a 00                	push   0x0
c001b23e:	53                   	push   ebx
c001b23f:	e8 34 55 fe ff       	call   c0000778 <memset>
c001b244:	83 c4 0c             	add    esp,0xc
c001b247:	56                   	push   esi
c001b248:	57                   	push   edi
c001b249:	53                   	push   ebx
c001b24a:	89 fb                	mov    ebx,edi
c001b24c:	e8 f3 54 fe ff       	call   c0000744 <memcpy>
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	89 d8                	mov    eax,ebx
c001b256:	5b                   	pop    ebx
c001b257:	5e                   	pop    esi
c001b258:	5f                   	pop    edi
c001b259:	c3                   	ret    

c001b25a <Sys::eject(regs*)>:
c001b25a:	83 ec 0c             	sub    esp,0xc
c001b25d:	83 ca ff             	or     edx,0xffffffff
c001b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b264:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b267:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b26c:	83 e9 41             	sub    ecx,0x41
c001b26f:	83 f9 19             	cmp    ecx,0x19
c001b272:	77 18                	ja     c001b28c <Sys::eject(regs*)+0x32>
c001b274:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c001b27b:	85 c9                	test   ecx,ecx
c001b27d:	74 0d                	je     c001b28c <Sys::eject(regs*)+0x32>
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	51                   	push   ecx
c001b283:	e8 78 b4 ff ff       	call   c0016700 <LogicalDisk::eject()>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	99                   	cdq    
c001b28c:	83 c4 0c             	add    esp,0xc
c001b28f:	c3                   	ret    

c001b290 <Sys::exit(regs*)>:
c001b290:	83 ec 18             	sub    esp,0x18
c001b293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b297:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b29a:	e8 c4 35 00 00       	call   c001e863 <terminateTask(int)>
c001b29f:	83 c8 ff             	or     eax,0xffffffff
c001b2a2:	83 c4 1c             	add    esp,0x1c
c001b2a5:	89 c2                	mov    edx,eax
c001b2a7:	c3                   	ret    

c001b2a8 <Sys::getCwd(regs*)>:
c001b2a8:	83 ec 10             	sub    esp,0x10
c001b2ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2af:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2bd:	e8 f2 7f ff ff       	call   c00132b4 <Fs::getcwd(Process*, char*, int)>
c001b2c2:	83 c4 1c             	add    esp,0x1c
c001b2c5:	99                   	cdq    
c001b2c6:	c3                   	ret    

c001b2c7 <Sys::getPID(regs*)>:
c001b2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2d1:	99                   	cdq    
c001b2d2:	c3                   	ret    

c001b2d3 <Sys::getRAMData(regs*)>:
c001b2d3:	8b 0d 54 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e654
c001b2d9:	6b 05 50 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e650,0x64
c001b2e0:	99                   	cdq    
c001b2e1:	f7 f9                	idiv   ecx
c001b2e3:	c1 e0 18             	shl    eax,0x18
c001b2e6:	09 c8                	or     eax,ecx
c001b2e8:	99                   	cdq    
c001b2e9:	c3                   	ret    

c001b2ea <Sys::loadDLL(regs*)>:
c001b2ea:	56                   	push   esi
c001b2eb:	53                   	push   ebx
c001b2ec:	31 d2                	xor    edx,edx
c001b2ee:	51                   	push   ecx
c001b2ef:	b8 01 00 00 00       	mov    eax,0x1
c001b2f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2f8:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2fc:	0f 84 8c 00 00 00    	je     c001b38e <Sys::loadDLL(regs*)+0xa4>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	68 14 01 00 00       	push   0x114
c001b30a:	e8 31 45 ff ff       	call   c000f840 <malloc>
c001b30f:	83 c4 0c             	add    esp,0xc
c001b312:	89 c3                	mov    ebx,eax
c001b314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b319:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b31c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b31f:	53                   	push   ebx
c001b320:	e8 8d 81 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001b325:	83 c4 10             	add    esp,0x10
c001b328:	31 d2                	xor    edx,edx
c001b32a:	b8 02 00 00 00       	mov    eax,0x2
c001b32f:	85 db                	test   ebx,ebx
c001b331:	74 5b                	je     c001b38e <Sys::loadDLL(regs*)+0xa4>
c001b333:	83 ec 0c             	sub    esp,0xc
c001b336:	53                   	push   ebx
c001b337:	e8 48 84 ff ff       	call   c0013784 <File::exists()>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	84 c0                	test   al,al
c001b341:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b343:	75 11                	jne    c001b356 <Sys::loadDLL(regs*)+0x6c>
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	53                   	push   ebx
c001b349:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b34c:	83 c4 10             	add    esp,0x10
c001b34f:	b8 03 00 00 00       	mov    eax,0x3
c001b354:	eb 36                	jmp    c001b38c <Sys::loadDLL(regs*)+0xa2>
c001b356:	83 ec 0c             	sub    esp,0xc
c001b359:	53                   	push   ebx
c001b35a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b35d:	58                   	pop    eax
c001b35e:	5a                   	pop    edx
c001b35f:	6a 00                	push   0x0
c001b361:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b364:	e8 0f 24 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c001b369:	83 c4 10             	add    esp,0x10
c001b36c:	89 c1                	mov    ecx,eax
c001b36e:	31 d2                	xor    edx,edx
c001b370:	b8 04 00 00 00       	mov    eax,0x4
c001b375:	85 c9                	test   ecx,ecx
c001b377:	74 15                	je     c001b38e <Sys::loadDLL(regs*)+0xa4>
c001b379:	53                   	push   ebx
c001b37a:	53                   	push   ebx
c001b37b:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c001b381:	51                   	push   ecx
c001b382:	e8 25 26 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	31 c0                	xor    eax,eax
c001b38c:	31 d2                	xor    edx,edx
c001b38e:	59                   	pop    ecx
c001b38f:	5b                   	pop    ebx
c001b390:	5e                   	pop    esi
c001b391:	c3                   	ret    

c001b392 <Sys::read(regs*)>:
c001b392:	57                   	push   edi
c001b393:	56                   	push   esi
c001b394:	53                   	push   ebx
c001b395:	83 ec 10             	sub    esp,0x10
c001b398:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b39c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b39f:	83 f8 02             	cmp    eax,0x2
c001b3a2:	77 10                	ja     c001b3b4 <Sys::read(regs*)+0x22>
c001b3a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3ac:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3b2:	eb 0e                	jmp    c001b3c2 <Sys::read(regs*)+0x30>
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	50                   	push   eax
c001b3b8:	e8 78 66 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	89 c1                	mov    ecx,eax
c001b3c2:	83 c8 ff             	or     eax,0xffffffff
c001b3c5:	85 c9                	test   ecx,ecx
c001b3c7:	89 c2                	mov    edx,eax
c001b3c9:	74 28                	je     c001b3f3 <Sys::read(regs*)+0x61>
c001b3cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d3:	31 ff                	xor    edi,edi
c001b3d5:	83 ec 0c             	sub    esp,0xc
c001b3d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3da:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3de:	52                   	push   edx
c001b3df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3e5:	57                   	push   edi
c001b3e6:	56                   	push   esi
c001b3e7:	51                   	push   ecx
c001b3e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3ef:	83 c4 20             	add    esp,0x20
c001b3f2:	99                   	cdq    
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	5b                   	pop    ebx
c001b3f7:	5e                   	pop    esi
c001b3f8:	5f                   	pop    edi
c001b3f9:	c3                   	ret    

c001b3fa <Sys::sbrk(regs*)>:
c001b3fa:	56                   	push   esi
c001b3fb:	53                   	push   ebx
c001b3fc:	83 ec 0c             	sub    esp,0xc
c001b3ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b403:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b408:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b40b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b411:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b414:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b417:	68 a9 be 02 c0       	push   0xc002bea9
c001b41c:	e8 38 7b ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b421:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b424:	83 c4 10             	add    esp,0x10
c001b427:	85 c0                	test   eax,eax
c001b429:	75 0a                	jne    c001b435 <Sys::sbrk(regs*)+0x3b>
c001b42b:	50                   	push   eax
c001b42c:	50                   	push   eax
c001b42d:	53                   	push   ebx
c001b42e:	68 c5 be 02 c0       	push   0xc002bec5
c001b433:	eb 54                	jmp    c001b489 <Sys::sbrk(regs*)+0x8f>
c001b435:	79 0a                	jns    c001b441 <Sys::sbrk(regs*)+0x47>
c001b437:	56                   	push   esi
c001b438:	56                   	push   esi
c001b439:	53                   	push   ebx
c001b43a:	68 d8 be 02 c0       	push   0xc002bed8
c001b43f:	eb 48                	jmp    c001b489 <Sys::sbrk(regs*)+0x8f>
c001b441:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b446:	76 17                	jbe    c001b45f <Sys::sbrk(regs*)+0x65>
c001b448:	51                   	push   ecx
c001b449:	51                   	push   ecx
c001b44a:	53                   	push   ebx
c001b44b:	68 ea be 02 c0       	push   0xc002beea
c001b450:	e8 04 7b ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b455:	83 c8 ff             	or     eax,0xffffffff
c001b458:	83 c4 10             	add    esp,0x10
c001b45b:	89 c2                	mov    edx,eax
c001b45d:	eb 36                	jmp    c001b495 <Sys::sbrk(regs*)+0x9b>
c001b45f:	05 ff 0f 00 00       	add    eax,0xfff
c001b464:	56                   	push   esi
c001b465:	c1 e8 0c             	shr    eax,0xc
c001b468:	68 07 04 00 00       	push   0x407
c001b46d:	50                   	push   eax
c001b46e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b473:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b476:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b47c:	e8 e1 6f ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001b481:	58                   	pop    eax
c001b482:	5a                   	pop    edx
c001b483:	53                   	push   ebx
c001b484:	68 03 bf 02 c0       	push   0xc002bf03
c001b489:	e8 cb 7a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b48e:	89 d8                	mov    eax,ebx
c001b490:	31 d2                	xor    edx,edx
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	59                   	pop    ecx
c001b496:	5b                   	pop    ebx
c001b497:	5e                   	pop    esi
c001b498:	c3                   	ret    

c001b499 <Sys::setCwd(regs*)>:
c001b499:	83 ec 14             	sub    esp,0x14
c001b49c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ab:	e8 73 83 ff ff       	call   c0013823 <Fs::setcwd(Process*, char*)>
c001b4b0:	83 c4 1c             	add    esp,0x1c
c001b4b3:	99                   	cdq    
c001b4b4:	c3                   	ret    

c001b4b5 <Sys::setTime(regs*)>:
c001b4b5:	55                   	push   ebp
c001b4b6:	31 d2                	xor    edx,edx
c001b4b8:	57                   	push   edi
c001b4b9:	bf 18 00 00 00       	mov    edi,0x18
c001b4be:	56                   	push   esi
c001b4bf:	53                   	push   ebx
c001b4c0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4c5:	83 ec 30             	sub    esp,0x30
c001b4c8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4cc:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4d2:	f7 f3                	div    ebx
c001b4d4:	89 d6                	mov    esi,edx
c001b4d6:	31 d2                	xor    edx,edx
c001b4d8:	f7 f3                	div    ebx
c001b4da:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4e1:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4e6:	31 d2                	xor    edx,edx
c001b4e8:	f7 f3                	div    ebx
c001b4ea:	31 d2                	xor    edx,edx
c001b4ec:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4f1:	f7 f7                	div    edi
c001b4f3:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4fa:	0f b7 cd             	movzx  ecx,bp
c001b4fd:	56                   	push   esi
c001b4fe:	89 c7                	mov    edi,eax
c001b500:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b504:	c1 e6 10             	shl    esi,0x10
c001b507:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b50b:	83 e7 1f             	and    edi,0x1f
c001b50e:	51                   	push   ecx
c001b50f:	47                   	inc    edi
c001b510:	c1 e8 05             	shr    eax,0x5
c001b513:	31 d2                	xor    edx,edx
c001b515:	f7 f3                	div    ebx
c001b517:	31 db                	xor    ebx,ebx
c001b519:	52                   	push   edx
c001b51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b51e:	57                   	push   edi
c001b51f:	68 29 bf 02 c0       	push   0xc002bf29
c001b524:	e8 30 7a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b529:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b52d:	89 f8                	mov    eax,edi
c001b52f:	31 c9                	xor    ecx,ecx
c001b531:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b535:	88 c1                	mov    cl,al
c001b537:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b53d:	88 d5                	mov    ch,dl
c001b53f:	c1 e0 10             	shl    eax,0x10
c001b542:	0f b7 d1             	movzx  edx,cx
c001b545:	09 c2                	or     edx,eax
c001b547:	89 d8                	mov    eax,ebx
c001b549:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b54e:	09 f0                	or     eax,esi
c001b550:	89 c3                	mov    ebx,eax
c001b552:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b556:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b55a:	83 c4 18             	add    esp,0x18
c001b55d:	53                   	push   ebx
c001b55e:	52                   	push   edx
c001b55f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b563:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b567:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b56b:	e8 cd 89 ff ff       	call   c0013f3d <datetimeToSeconds(datetime_t)>
c001b570:	83 c4 0c             	add    esp,0xc
c001b573:	52                   	push   edx
c001b574:	50                   	push   eax
c001b575:	56                   	push   esi
c001b576:	e8 49 8b ff ff       	call   c00140c4 <secondsToDatetime(unsigned long long)>
c001b57b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b57f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b583:	51                   	push   ecx
c001b584:	89 d6                	mov    esi,edx
c001b586:	51                   	push   ecx
c001b587:	c1 ee 10             	shr    esi,0x10
c001b58a:	89 f3                	mov    ebx,esi
c001b58c:	0f b6 f3             	movzx  esi,bl
c001b58f:	56                   	push   esi
c001b590:	0f b6 f6             	movzx  esi,dh
c001b593:	0f b6 d2             	movzx  edx,dl
c001b596:	56                   	push   esi
c001b597:	52                   	push   edx
c001b598:	89 c2                	mov    edx,eax
c001b59a:	c1 ea 10             	shr    edx,0x10
c001b59d:	52                   	push   edx
c001b59e:	0f b6 d4             	movzx  edx,ah
c001b5a1:	0f b6 c0             	movzx  eax,al
c001b5a4:	52                   	push   edx
c001b5a5:	50                   	push   eax
c001b5a6:	68 45 bf 02 c0       	push   0xc002bf45
c001b5ab:	e8 a9 79 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b5b0:	83 c4 2c             	add    esp,0x2c
c001b5b3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b5b8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5c0:	53                   	push   ebx
c001b5c1:	51                   	push   ecx
c001b5c2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5c8:	e8 97 8a ff ff       	call   c0014064 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5cd:	83 f0 01             	xor    eax,0x1
c001b5d0:	31 d2                	xor    edx,edx
c001b5d2:	0f b6 c0             	movzx  eax,al
c001b5d5:	83 c4 3c             	add    esp,0x3c
c001b5d8:	5b                   	pop    ebx
c001b5d9:	5e                   	pop    esi
c001b5da:	5f                   	pop    edi
c001b5db:	5d                   	pop    ebp
c001b5dc:	c3                   	ret    

c001b5dd <Sys::timezone(regs*)>:
c001b5dd:	53                   	push   ebx
c001b5de:	83 ec 08             	sub    esp,0x8
c001b5e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5e5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5e9:	75 17                	jne    c001b602 <Sys::timezone(regs*)+0x25>
c001b5eb:	83 ec 0c             	sub    esp,0xc
c001b5ee:	68 61 bf 02 c0       	push   0xc002bf61
c001b5f3:	e8 61 79 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b5f8:	83 c8 ff             	or     eax,0xffffffff
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	89 c2                	mov    edx,eax
c001b600:	eb 20                	jmp    c001b622 <Sys::timezone(regs*)+0x45>
c001b602:	83 ec 0c             	sub    esp,0xc
c001b605:	68 99 bf 02 c0       	push   0xc002bf99
c001b60a:	e8 4a 79 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b60f:	58                   	pop    eax
c001b610:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b613:	e8 ae 87 ff ff       	call   c0013dc6 <User::loadClockSettings(int)>
c001b618:	83 c4 10             	add    esp,0x10
c001b61b:	b8 01 00 00 00       	mov    eax,0x1
c001b620:	31 d2                	xor    edx,edx
c001b622:	83 c4 08             	add    esp,0x8
c001b625:	5b                   	pop    ebx
c001b626:	c3                   	ret    

c001b627 <Sys::write(regs*)>:
c001b627:	57                   	push   edi
c001b628:	56                   	push   esi
c001b629:	53                   	push   ebx
c001b62a:	83 ec 10             	sub    esp,0x10
c001b62d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b631:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b634:	83 f8 02             	cmp    eax,0x2
c001b637:	77 10                	ja     c001b649 <Sys::write(regs*)+0x22>
c001b639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b63e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b641:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b647:	eb 0e                	jmp    c001b657 <Sys::write(regs*)+0x30>
c001b649:	83 ec 0c             	sub    esp,0xc
c001b64c:	50                   	push   eax
c001b64d:	e8 e3 63 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	89 c1                	mov    ecx,eax
c001b657:	83 c8 ff             	or     eax,0xffffffff
c001b65a:	85 c9                	test   ecx,ecx
c001b65c:	89 c2                	mov    edx,eax
c001b65e:	74 28                	je     c001b688 <Sys::write(regs*)+0x61>
c001b660:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b668:	31 ff                	xor    edi,edi
c001b66a:	83 ec 0c             	sub    esp,0xc
c001b66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b66f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b673:	52                   	push   edx
c001b674:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b677:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b67a:	57                   	push   edi
c001b67b:	56                   	push   esi
c001b67c:	51                   	push   ecx
c001b67d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b684:	83 c4 20             	add    esp,0x20
c001b687:	99                   	cdq    
c001b688:	83 c4 10             	add    esp,0x10
c001b68b:	5b                   	pop    ebx
c001b68c:	5e                   	pop    esi
c001b68d:	5f                   	pop    edi
c001b68e:	c3                   	ret    

c001b68f <Sys::wsbe(regs*)>:
c001b68f:	57                   	push   edi
c001b690:	b9 0b 00 00 00       	mov    ecx,0xb
c001b695:	56                   	push   esi
c001b696:	be d8 bf 02 c0       	mov    esi,0xc002bfd8
c001b69b:	53                   	push   ebx
c001b69c:	83 ec 30             	sub    esp,0x30
c001b69f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6a3:	fc                   	cld    
c001b6a4:	83 ec 0c             	sub    esp,0xc
c001b6a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6a9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b5:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6bb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6bd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6c0:	57                   	push   edi
c001b6c1:	e8 ce 50 fe ff       	call   c0000794 <strlen>
c001b6c6:	5a                   	pop    edx
c001b6c7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6cb:	52                   	push   edx
c001b6cc:	31 d2                	xor    edx,edx
c001b6ce:	57                   	push   edi
c001b6cf:	52                   	push   edx
c001b6d0:	50                   	push   eax
c001b6d1:	56                   	push   esi
c001b6d2:	ff d3                	call   ebx
c001b6d4:	83 c4 14             	add    esp,0x14
c001b6d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6db:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6de:	e8 80 31 00 00       	call   c001e863 <terminateTask(int)>
c001b6e3:	83 c4 40             	add    esp,0x40
c001b6e6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6eb:	5b                   	pop    ebx
c001b6ec:	31 d2                	xor    edx,edx
c001b6ee:	5e                   	pop    esi
c001b6ef:	5f                   	pop    edi
c001b6f0:	c3                   	ret    

c001b6f1 <Sys::yield(regs*)>:
c001b6f1:	57                   	push   edi
c001b6f2:	56                   	push   esi
c001b6f3:	53                   	push   ebx
c001b6f4:	e8 27 27 00 00       	call   c001de20 <lockScheduler()>
c001b6f9:	e8 5e 2a 00 00       	call   c001e15c <schedule()>
c001b6fe:	e8 1f 27 00 00       	call   c001de22 <unlockScheduler()>
c001b703:	8b 35 90 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec90
c001b709:	8b 3d 94 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec94
c001b70f:	89 f0                	mov    eax,esi
c001b711:	89 fb                	mov    ebx,edi
c001b713:	89 f1                	mov    ecx,esi
c001b715:	c1 e0 07             	shl    eax,0x7
c001b718:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b71c:	25 80 30 0f 00       	and    eax,0xf3080
c001b721:	c1 eb 17             	shr    ebx,0x17
c001b724:	31 c8                	xor    eax,ecx
c001b726:	89 da                	mov    edx,ebx
c001b728:	5b                   	pop    ebx
c001b729:	5e                   	pop    esi
c001b72a:	5f                   	pop    edi
c001b72b:	c3                   	ret    

c001b72c <sysCallSeekDir(regs*)>:
c001b72c:	31 c0                	xor    eax,eax
c001b72e:	31 d2                	xor    edx,edx
c001b730:	c3                   	ret    

c001b731 <sysCallTellDir(regs*)>:
c001b731:	31 c0                	xor    eax,eax
c001b733:	31 d2                	xor    edx,edx
c001b735:	c3                   	ret    

c001b736 <sysCallVerify(regs*)>:
c001b736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b73a:	31 d2                	xor    edx,edx
c001b73c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b73f:	c3                   	ret    

c001b740 <sysFormatDisk(regs*)>:
c001b740:	56                   	push   esi
c001b741:	53                   	push   ebx
c001b742:	53                   	push   ebx
c001b743:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b747:	8b 1d 8c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e78c
c001b74d:	eb 25                	jmp    c001b774 <sysFormatDisk(regs*)+0x34>
c001b74f:	83 ec 0c             	sub    esp,0xc
c001b752:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b755:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b757:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b75a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b75d:	50                   	push   eax
c001b75e:	ff 34 85 20 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13e0]
c001b765:	53                   	push   ebx
c001b766:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b769:	83 c4 20             	add    esp,0x20
c001b76c:	83 f8 08             	cmp    eax,0x8
c001b76f:	75 12                	jne    c001b783 <sysFormatDisk(regs*)+0x43>
c001b771:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b774:	85 db                	test   ebx,ebx
c001b776:	75 d7                	jne    c001b74f <sysFormatDisk(regs*)+0xf>
c001b778:	59                   	pop    ecx
c001b779:	b8 03 00 00 00       	mov    eax,0x3
c001b77e:	31 d2                	xor    edx,edx
c001b780:	5b                   	pop    ebx
c001b781:	5e                   	pop    esi
c001b782:	c3                   	ret    
c001b783:	85 c0                	test   eax,eax
c001b785:	74 1b                	je     c001b7a2 <sysFormatDisk(regs*)+0x62>
c001b787:	83 f8 09             	cmp    eax,0x9
c001b78a:	74 0b                	je     c001b797 <sysFormatDisk(regs*)+0x57>
c001b78c:	59                   	pop    ecx
c001b78d:	b8 02 00 00 00       	mov    eax,0x2
c001b792:	31 d2                	xor    edx,edx
c001b794:	5b                   	pop    ebx
c001b795:	5e                   	pop    esi
c001b796:	c3                   	ret    
c001b797:	59                   	pop    ecx
c001b798:	b8 01 00 00 00       	mov    eax,0x1
c001b79d:	31 d2                	xor    edx,edx
c001b79f:	5b                   	pop    ebx
c001b7a0:	5e                   	pop    esi
c001b7a1:	c3                   	ret    
c001b7a2:	59                   	pop    ecx
c001b7a3:	31 c0                	xor    eax,eax
c001b7a5:	31 d2                	xor    edx,edx
c001b7a7:	5b                   	pop    ebx
c001b7a8:	5e                   	pop    esi
c001b7a9:	c3                   	ret    

c001b7aa <sysSetDiskVolumeLabel(regs*)>:
c001b7aa:	56                   	push   esi
c001b7ab:	53                   	push   ebx
c001b7ac:	53                   	push   ebx
c001b7ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7b1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7b4:	83 f8 19             	cmp    eax,0x19
c001b7b7:	77 29                	ja     c001b7e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7b9:	8b 0c 85 20 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13e0]
c001b7c0:	85 c9                	test   ecx,ecx
c001b7c2:	74 1e                	je     c001b7e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7c4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7c7:	85 d2                	test   edx,edx
c001b7c9:	74 17                	je     c001b7e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7cb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7d1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7d3:	52                   	push   edx
c001b7d4:	50                   	push   eax
c001b7d5:	51                   	push   ecx
c001b7d6:	53                   	push   ebx
c001b7d7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7da:	83 c4 10             	add    esp,0x10
c001b7dd:	99                   	cdq    
c001b7de:	59                   	pop    ecx
c001b7df:	5b                   	pop    ebx
c001b7e0:	5e                   	pop    esi
c001b7e1:	c3                   	ret    
c001b7e2:	59                   	pop    ecx
c001b7e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ed:	5b                   	pop    ebx
c001b7ee:	5e                   	pop    esi
c001b7ef:	c3                   	ret    

c001b7f0 <sysGetDiskVolumeLabel(regs*)>:
c001b7f0:	57                   	push   edi
c001b7f1:	56                   	push   esi
c001b7f2:	53                   	push   ebx
c001b7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7fa:	83 fa 19             	cmp    edx,0x19
c001b7fd:	77 34                	ja     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ff:	8b 0c 95 20 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd13e0]
c001b806:	85 c9                	test   ecx,ecx
c001b808:	74 29                	je     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b80a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b80d:	85 db                	test   ebx,ebx
c001b80f:	74 22                	je     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b811:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b814:	85 c0                	test   eax,eax
c001b816:	74 1b                	je     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b818:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b81e:	83 ec 0c             	sub    esp,0xc
c001b821:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b823:	50                   	push   eax
c001b824:	53                   	push   ebx
c001b825:	52                   	push   edx
c001b826:	51                   	push   ecx
c001b827:	56                   	push   esi
c001b828:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b82b:	83 c4 20             	add    esp,0x20
c001b82e:	99                   	cdq    
c001b82f:	5b                   	pop    ebx
c001b830:	5e                   	pop    esi
c001b831:	5f                   	pop    edi
c001b832:	c3                   	ret    
c001b833:	5b                   	pop    ebx
c001b834:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b839:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b83e:	5e                   	pop    esi
c001b83f:	5f                   	pop    edi
c001b840:	c3                   	ret    

c001b841 <sysShutdown(regs*)>:
c001b841:	83 ec 0c             	sub    esp,0xc
c001b844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b848:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b84b:	85 c0                	test   eax,eax
c001b84d:	74 18                	je     c001b867 <sysShutdown(regs*)+0x26>
c001b84f:	83 f8 01             	cmp    eax,0x1
c001b852:	74 38                	je     c001b88c <sysShutdown(regs*)+0x4b>
c001b854:	83 f8 02             	cmp    eax,0x2
c001b857:	74 24                	je     c001b87d <sysShutdown(regs*)+0x3c>
c001b859:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b85e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b863:	83 c4 0c             	add    esp,0xc
c001b866:	c3                   	ret    
c001b867:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b86c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b86e:	6a 00                	push   0x0
c001b870:	6a 00                	push   0x0
c001b872:	6a 00                	push   0x0
c001b874:	50                   	push   eax
c001b875:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b878:	83 c4 10             	add    esp,0x10
c001b87b:	eb dc                	jmp    c001b859 <sysShutdown(regs*)+0x18>
c001b87d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b882:	8b 10                	mov    edx,DWORD PTR [eax]
c001b884:	6a 00                	push   0x0
c001b886:	6a 00                	push   0x0
c001b888:	6a 01                	push   0x1
c001b88a:	eb e8                	jmp    c001b874 <sysShutdown(regs*)+0x33>
c001b88c:	a1 c0 0c 03 c0       	mov    eax,ds:0xc0030cc0
c001b891:	85 c0                	test   eax,eax
c001b893:	74 02                	je     c001b897 <sysShutdown(regs*)+0x56>
c001b895:	ff d0                	call   eax
c001b897:	31 c0                	xor    eax,eax
c001b899:	31 d2                	xor    edx,edx
c001b89b:	83 c4 0c             	add    esp,0xc
c001b89e:	c3                   	ret    

c001b89f <sysCallRealpath(regs*)>:
c001b89f:	83 ec 0c             	sub    esp,0xc
c001b8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8a9:	85 d2                	test   edx,edx
c001b8ab:	74 07                	je     c001b8b4 <sysCallRealpath(regs*)+0x15>
c001b8ad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8b0:	85 c0                	test   eax,eax
c001b8b2:	75 0b                	jne    c001b8bf <sysCallRealpath(regs*)+0x20>
c001b8b4:	b8 01 00 00 00       	mov    eax,0x1
c001b8b9:	31 d2                	xor    edx,edx
c001b8bb:	83 c4 0c             	add    esp,0xc
c001b8be:	c3                   	ret    
c001b8bf:	51                   	push   ecx
c001b8c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8c6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8c9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8cf:	51                   	push   ecx
c001b8d0:	52                   	push   edx
c001b8d1:	50                   	push   eax
c001b8d2:	e8 31 7a ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	31 c0                	xor    eax,eax
c001b8dc:	31 d2                	xor    edx,edx
c001b8de:	83 c4 0c             	add    esp,0xc
c001b8e1:	c3                   	ret    

c001b8e2 <sysCallGetArgc(regs*)>:
c001b8e2:	83 ec 14             	sub    esp,0x14
c001b8e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ed:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8f3:	68 04 c0 02 c0       	push   0xc002c004
c001b8f8:	e8 5c 76 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b8fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b902:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b905:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b90b:	83 c4 1c             	add    esp,0x1c
c001b90e:	99                   	cdq    
c001b90f:	c3                   	ret    

c001b910 <sysCallReadDir(regs*)>:
c001b910:	53                   	push   ebx
c001b911:	83 ec 18             	sub    esp,0x18
c001b914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b918:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b91b:	83 f8 02             	cmp    eax,0x2
c001b91e:	76 53                	jbe    c001b973 <sysCallReadDir(regs*)+0x63>
c001b920:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b923:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b929:	77 4f                	ja     c001b97a <sysCallReadDir(regs*)+0x6a>
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	50                   	push   eax
c001b92f:	e8 01 61 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b934:	83 c4 10             	add    esp,0x10
c001b937:	85 c0                	test   eax,eax
c001b939:	74 50                	je     c001b98b <sysCallReadDir(regs*)+0x7b>
c001b93b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b943:	83 ec 0c             	sub    esp,0xc
c001b946:	8b 10                	mov    edx,DWORD PTR [eax]
c001b948:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b94c:	51                   	push   ecx
c001b94d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b950:	6a 00                	push   0x0
c001b952:	68 10 01 00 00       	push   0x110
c001b957:	50                   	push   eax
c001b958:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b95b:	83 c4 20             	add    esp,0x20
c001b95e:	85 c0                	test   eax,eax
c001b960:	74 38                	je     c001b99a <sysCallReadDir(regs*)+0x8a>
c001b962:	83 f8 07             	cmp    eax,0x7
c001b965:	74 0c                	je     c001b973 <sysCallReadDir(regs*)+0x63>
c001b967:	b8 02 00 00 00       	mov    eax,0x2
c001b96c:	31 d2                	xor    edx,edx
c001b96e:	83 c4 18             	add    esp,0x18
c001b971:	5b                   	pop    ebx
c001b972:	c3                   	ret    
c001b973:	b8 01 00 00 00       	mov    eax,0x1
c001b978:	eb f2                	jmp    c001b96c <sysCallReadDir(regs*)+0x5c>
c001b97a:	83 ec 08             	sub    esp,0x8
c001b97d:	52                   	push   edx
c001b97e:	68 1c c1 02 c0       	push   0xc002c11c
c001b983:	e8 d1 75 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b990:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b995:	83 c4 18             	add    esp,0x18
c001b998:	5b                   	pop    ebx
c001b999:	c3                   	ret    
c001b99a:	31 c0                	xor    eax,eax
c001b99c:	eb ce                	jmp    c001b96c <sysCallReadDir(regs*)+0x5c>

c001b99e <sysCallIsATTY(regs*)>:
c001b99e:	83 ec 0c             	sub    esp,0xc
c001b9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9a8:	83 f8 02             	cmp    eax,0x2
c001b9ab:	76 07                	jbe    c001b9b4 <sysCallIsATTY(regs*)+0x16>
c001b9ad:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9b2:	75 26                	jne    c001b9da <sysCallIsATTY(regs*)+0x3c>
c001b9b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9c2:	85 c0                	test   eax,eax
c001b9c4:	74 24                	je     c001b9ea <sysCallIsATTY(regs*)+0x4c>
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9cb:	50                   	push   eax
c001b9cc:	ff 12                	call   DWORD PTR [edx]
c001b9ce:	31 d2                	xor    edx,edx
c001b9d0:	0f b6 c0             	movzx  eax,al
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	83 c4 0c             	add    esp,0xc
c001b9d9:	c3                   	ret    
c001b9da:	83 ec 0c             	sub    esp,0xc
c001b9dd:	50                   	push   eax
c001b9de:	e8 52 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	85 c0                	test   eax,eax
c001b9e8:	75 dc                	jne    c001b9c6 <sysCallIsATTY(regs*)+0x28>
c001b9ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f4:	83 c4 0c             	add    esp,0xc
c001b9f7:	c3                   	ret    

c001b9f8 <sysCallSeek(regs*)>:
c001b9f8:	53                   	push   ebx
c001b9f9:	83 ec 08             	sub    esp,0x8
c001b9fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba03:	83 f8 02             	cmp    eax,0x2
c001ba06:	76 4a                	jbe    c001ba52 <sysCallSeek(regs*)+0x5a>
c001ba08:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba0d:	77 32                	ja     c001ba41 <sysCallSeek(regs*)+0x49>
c001ba0f:	83 ec 0c             	sub    esp,0xc
c001ba12:	50                   	push   eax
c001ba13:	e8 1d 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba18:	83 c4 0c             	add    esp,0xc
c001ba1b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba1e:	31 db                	xor    ebx,ebx
c001ba20:	53                   	push   ebx
c001ba21:	51                   	push   ecx
c001ba22:	50                   	push   eax
c001ba23:	e8 ac 7b ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001ba28:	83 c4 10             	add    esp,0x10
c001ba2b:	85 c0                	test   eax,eax
c001ba2d:	0f 95 c0             	setne  al
c001ba30:	31 d2                	xor    edx,edx
c001ba32:	0f b6 c0             	movzx  eax,al
c001ba35:	f7 d8                	neg    eax
c001ba37:	83 d2 00             	adc    edx,0x0
c001ba3a:	83 c4 08             	add    esp,0x8
c001ba3d:	f7 da                	neg    edx
c001ba3f:	5b                   	pop    ebx
c001ba40:	c3                   	ret    
c001ba41:	83 ec 08             	sub    esp,0x8
c001ba44:	50                   	push   eax
c001ba45:	68 0f c0 02 c0       	push   0xc002c00f
c001ba4a:	e8 0a 75 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ba4f:	83 c4 10             	add    esp,0x10
c001ba52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba57:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba5c:	83 c4 08             	add    esp,0x8
c001ba5f:	5b                   	pop    ebx
c001ba60:	c3                   	ret    

c001ba61 <sysCallTell(regs*)>:
c001ba61:	53                   	push   ebx
c001ba62:	83 ec 08             	sub    esp,0x8
c001ba65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba6c:	83 f8 02             	cmp    eax,0x2
c001ba6f:	76 5e                	jbe    c001bacf <sysCallTell(regs*)+0x6e>
c001ba71:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba76:	77 2d                	ja     c001baa5 <sysCallTell(regs*)+0x44>
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	50                   	push   eax
c001ba7c:	e8 b4 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba81:	5a                   	pop    edx
c001ba82:	59                   	pop    ecx
c001ba83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba86:	50                   	push   eax
c001ba87:	e8 9e 7b ff ff       	call   c001362a <File::tell(unsigned long long*)>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	85 c0                	test   eax,eax
c001ba91:	0f 95 c0             	setne  al
c001ba94:	31 d2                	xor    edx,edx
c001ba96:	0f b6 c0             	movzx  eax,al
c001ba99:	f7 d8                	neg    eax
c001ba9b:	83 d2 00             	adc    edx,0x0
c001ba9e:	83 c4 08             	add    esp,0x8
c001baa1:	f7 da                	neg    edx
c001baa3:	5b                   	pop    ebx
c001baa4:	c3                   	ret    
c001baa5:	83 ec 08             	sub    esp,0x8
c001baa8:	50                   	push   eax
c001baa9:	68 29 c0 02 c0       	push   0xc002c029
c001baae:	e8 a6 74 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001bab3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001babf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac6:	31 d2                	xor    edx,edx
c001bac8:	31 c0                	xor    eax,eax
c001baca:	83 c4 08             	add    esp,0x8
c001bacd:	5b                   	pop    ebx
c001bace:	c3                   	ret    
c001bacf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad9:	83 c4 08             	add    esp,0x8
c001badc:	5b                   	pop    ebx
c001badd:	c3                   	ret    

c001bade <sysCallSize(regs*)>:
c001bade:	53                   	push   ebx
c001badf:	83 ec 18             	sub    esp,0x18
c001bae2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bae6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bae9:	83 f8 02             	cmp    eax,0x2
c001baec:	76 64                	jbe    c001bb52 <sysCallSize(regs*)+0x74>
c001baee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baf3:	77 33                	ja     c001bb28 <sysCallSize(regs*)+0x4a>
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	50                   	push   eax
c001baf9:	e8 37 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bafe:	83 c4 0c             	add    esp,0xc
c001bb01:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb05:	52                   	push   edx
c001bb06:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb09:	50                   	push   eax
c001bb0a:	e8 b3 7c ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001bb0f:	83 c4 10             	add    esp,0x10
c001bb12:	85 c0                	test   eax,eax
c001bb14:	0f 95 c0             	setne  al
c001bb17:	31 d2                	xor    edx,edx
c001bb19:	0f b6 c0             	movzx  eax,al
c001bb1c:	f7 d8                	neg    eax
c001bb1e:	83 d2 00             	adc    edx,0x0
c001bb21:	83 c4 18             	add    esp,0x18
c001bb24:	f7 da                	neg    edx
c001bb26:	5b                   	pop    ebx
c001bb27:	c3                   	ret    
c001bb28:	83 ec 08             	sub    esp,0x8
c001bb2b:	50                   	push   eax
c001bb2c:	68 43 c0 02 c0       	push   0xc002c043
c001bb31:	e8 23 74 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001bb36:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb49:	31 d2                	xor    edx,edx
c001bb4b:	31 c0                	xor    eax,eax
c001bb4d:	83 c4 18             	add    esp,0x18
c001bb50:	5b                   	pop    ebx
c001bb51:	c3                   	ret    
c001bb52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb57:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb5c:	83 c4 18             	add    esp,0x18
c001bb5f:	5b                   	pop    ebx
c001bb60:	c3                   	ret    

c001bb61 <sysCallSizeFromFilename(regs*)>:
c001bb61:	57                   	push   edi
c001bb62:	56                   	push   esi
c001bb63:	53                   	push   ebx
c001bb64:	83 ec 20             	sub    esp,0x20
c001bb67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb6b:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb6e:	83 fb 02             	cmp    ebx,0x2
c001bb71:	0f 86 99 00 00 00    	jbe    c001bc10 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb77:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb7d:	77 65                	ja     c001bbe4 <sysCallSizeFromFilename(regs*)+0x83>
c001bb7f:	83 ec 0c             	sub    esp,0xc
c001bb82:	68 14 01 00 00       	push   0x114
c001bb87:	e8 b4 3c ff ff       	call   c000f840 <malloc>
c001bb8c:	83 c4 0c             	add    esp,0xc
c001bb8f:	89 c6                	mov    esi,eax
c001bb91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb96:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb99:	53                   	push   ebx
c001bb9a:	56                   	push   esi
c001bb9b:	e8 12 79 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001bba0:	83 c4 0c             	add    esp,0xc
c001bba3:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bba7:	50                   	push   eax
c001bba8:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbab:	56                   	push   esi
c001bbac:	e8 11 7c ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001bbb1:	83 c4 10             	add    esp,0x10
c001bbb4:	85 f6                	test   esi,esi
c001bbb6:	74 14                	je     c001bbcc <sysCallSizeFromFilename(regs*)+0x6b>
c001bbb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbbc:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbbe:	83 ec 0c             	sub    esp,0xc
c001bbc1:	56                   	push   esi
c001bbc2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbcc:	85 c0                	test   eax,eax
c001bbce:	0f 95 c0             	setne  al
c001bbd1:	31 d2                	xor    edx,edx
c001bbd3:	0f b6 c0             	movzx  eax,al
c001bbd6:	f7 d8                	neg    eax
c001bbd8:	83 d2 00             	adc    edx,0x0
c001bbdb:	83 c4 20             	add    esp,0x20
c001bbde:	f7 da                	neg    edx
c001bbe0:	5b                   	pop    ebx
c001bbe1:	5e                   	pop    esi
c001bbe2:	5f                   	pop    edi
c001bbe3:	c3                   	ret    
c001bbe4:	83 ec 08             	sub    esp,0x8
c001bbe7:	53                   	push   ebx
c001bbe8:	68 43 c0 02 c0       	push   0xc002c043
c001bbed:	e8 67 73 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001bbf2:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc05:	31 d2                	xor    edx,edx
c001bc07:	83 c4 20             	add    esp,0x20
c001bc0a:	31 c0                	xor    eax,eax
c001bc0c:	5b                   	pop    ebx
c001bc0d:	5e                   	pop    esi
c001bc0e:	5f                   	pop    edi
c001bc0f:	c3                   	ret    
c001bc10:	83 c4 20             	add    esp,0x20
c001bc13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc18:	5b                   	pop    ebx
c001bc19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1e:	5e                   	pop    esi
c001bc1f:	5f                   	pop    edi
c001bc20:	c3                   	ret    

c001bc21 <sysCallClose(regs*)>:
c001bc21:	53                   	push   ebx
c001bc22:	83 ec 08             	sub    esp,0x8
c001bc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc29:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc2c:	83 f8 02             	cmp    eax,0x2
c001bc2f:	76 50                	jbe    c001bc81 <sysCallClose(regs*)+0x60>
c001bc31:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc36:	74 58                	je     c001bc90 <sysCallClose(regs*)+0x6f>
c001bc38:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc3d:	74 60                	je     c001bc9f <sysCallClose(regs*)+0x7e>
c001bc3f:	77 2f                	ja     c001bc70 <sysCallClose(regs*)+0x4f>
c001bc41:	83 ec 0c             	sub    esp,0xc
c001bc44:	50                   	push   eax
c001bc45:	e8 eb 5d ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bc4a:	89 c3                	mov    ebx,eax
c001bc4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc4f:	e8 20 79 ff ff       	call   c0013574 <File::close()>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	85 db                	test   ebx,ebx
c001bc59:	74 0c                	je     c001bc67 <sysCallClose(regs*)+0x46>
c001bc5b:	83 ec 0c             	sub    esp,0xc
c001bc5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc60:	53                   	push   ebx
c001bc61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc64:	83 c4 10             	add    esp,0x10
c001bc67:	31 c0                	xor    eax,eax
c001bc69:	31 d2                	xor    edx,edx
c001bc6b:	83 c4 08             	add    esp,0x8
c001bc6e:	5b                   	pop    ebx
c001bc6f:	c3                   	ret    
c001bc70:	83 ec 08             	sub    esp,0x8
c001bc73:	50                   	push   eax
c001bc74:	68 40 c1 02 c0       	push   0xc002c140
c001bc79:	e8 db 72 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8b:	83 c4 08             	add    esp,0x8
c001bc8e:	5b                   	pop    ebx
c001bc8f:	c3                   	ret    
c001bc90:	83 ec 0c             	sub    esp,0xc
c001bc93:	68 5e c0 02 c0       	push   0xc002c05e
c001bc98:	e8 bc 72 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001bc9d:	eb c5                	jmp    c001bc64 <sysCallClose(regs*)+0x43>
c001bc9f:	83 ec 0c             	sub    esp,0xc
c001bca2:	68 6c c0 02 c0       	push   0xc002c06c
c001bca7:	eb ef                	jmp    c001bc98 <sysCallClose(regs*)+0x77>

c001bca9 <sysCallOpenDir(regs*)>:
c001bca9:	56                   	push   esi
c001bcaa:	53                   	push   ebx
c001bcab:	53                   	push   ebx
c001bcac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcb0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcb3:	85 f6                	test   esi,esi
c001bcb5:	74 59                	je     c001bd10 <sysCallOpenDir(regs*)+0x67>
c001bcb7:	83 ec 0c             	sub    esp,0xc
c001bcba:	68 14 01 00 00       	push   0x114
c001bcbf:	e8 7c 3b ff ff       	call   c000f840 <malloc>
c001bcc4:	83 c4 0c             	add    esp,0xc
c001bcc7:	89 c6                	mov    esi,eax
c001bcc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd4:	56                   	push   esi
c001bcd5:	e8 84 7c ff ff       	call   c001395e <Directory::Directory(char const*, Process*)>
c001bcda:	83 c4 10             	add    esp,0x10
c001bcdd:	85 f6                	test   esi,esi
c001bcdf:	74 2f                	je     c001bd10 <sysCallOpenDir(regs*)+0x67>
c001bce1:	83 ec 0c             	sub    esp,0xc
c001bce4:	56                   	push   esi
c001bce5:	e8 d8 7c ff ff       	call   c00139c2 <Directory::open()>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	85 c0                	test   eax,eax
c001bcef:	75 1f                	jne    c001bd10 <sysCallOpenDir(regs*)+0x67>
c001bcf1:	83 ec 0c             	sub    esp,0xc
c001bcf4:	56                   	push   esi
c001bcf5:	e8 46 5a ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001bcfa:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	89 02                	mov    DWORD PTR [edx],eax
c001bd02:	c1 f8 1f             	sar    eax,0x1f
c001bd05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd08:	31 c0                	xor    eax,eax
c001bd0a:	59                   	pop    ecx
c001bd0b:	31 d2                	xor    edx,edx
c001bd0d:	5b                   	pop    ebx
c001bd0e:	5e                   	pop    esi
c001bd0f:	c3                   	ret    
c001bd10:	59                   	pop    ecx
c001bd11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1b:	5b                   	pop    ebx
c001bd1c:	5e                   	pop    esi
c001bd1d:	c3                   	ret    

c001bd1e <sysCallCloseDir(regs*)>:
c001bd1e:	53                   	push   ebx
c001bd1f:	83 ec 08             	sub    esp,0x8
c001bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd29:	83 f8 02             	cmp    eax,0x2
c001bd2c:	76 47                	jbe    c001bd75 <sysCallCloseDir(regs*)+0x57>
c001bd2e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd33:	77 2f                	ja     c001bd64 <sysCallCloseDir(regs*)+0x46>
c001bd35:	83 ec 0c             	sub    esp,0xc
c001bd38:	50                   	push   eax
c001bd39:	e8 f7 5c ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bd3e:	89 c3                	mov    ebx,eax
c001bd40:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd43:	e8 d6 7c ff ff       	call   c0013a1e <Directory::close()>
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	85 db                	test   ebx,ebx
c001bd4d:	74 0c                	je     c001bd5b <sysCallCloseDir(regs*)+0x3d>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd54:	53                   	push   ebx
c001bd55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd58:	83 c4 10             	add    esp,0x10
c001bd5b:	31 c0                	xor    eax,eax
c001bd5d:	31 d2                	xor    edx,edx
c001bd5f:	83 c4 08             	add    esp,0x8
c001bd62:	5b                   	pop    ebx
c001bd63:	c3                   	ret    
c001bd64:	83 ec 08             	sub    esp,0x8
c001bd67:	50                   	push   eax
c001bd68:	68 68 c1 02 c0       	push   0xc002c168
c001bd6d:	e8 e7 71 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd7f:	83 c4 08             	add    esp,0x8
c001bd82:	5b                   	pop    ebx
c001bd83:	c3                   	ret    

c001bd84 <sysCallMakeDir(regs*)>:
c001bd84:	56                   	push   esi
c001bd85:	53                   	push   ebx
c001bd86:	83 ec 10             	sub    esp,0x10
c001bd89:	68 14 01 00 00       	push   0x114
c001bd8e:	e8 ad 3a ff ff       	call   c000f840 <malloc>
c001bd93:	83 c4 0c             	add    esp,0xc
c001bd96:	89 c3                	mov    ebx,eax
c001bd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bda7:	53                   	push   ebx
c001bda8:	e8 b1 7b ff ff       	call   c001395e <Directory::Directory(char const*, Process*)>
c001bdad:	83 c4 10             	add    esp,0x10
c001bdb0:	85 db                	test   ebx,ebx
c001bdb2:	74 32                	je     c001bde6 <sysCallMakeDir(regs*)+0x62>
c001bdb4:	83 ec 0c             	sub    esp,0xc
c001bdb7:	53                   	push   ebx
c001bdb8:	e8 e5 7d ff ff       	call   c0013ba2 <Directory::create()>
c001bdbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc0:	89 c6                	mov    esi,eax
c001bdc2:	e8 57 7c ff ff       	call   c0013a1e <Directory::close()>
c001bdc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	31 c0                	xor    eax,eax
c001bdd4:	59                   	pop    ecx
c001bdd5:	85 f6                	test   esi,esi
c001bdd7:	5b                   	pop    ebx
c001bdd8:	0f 95 c0             	setne  al
c001bddb:	5e                   	pop    esi
c001bddc:	31 d2                	xor    edx,edx
c001bdde:	f7 d8                	neg    eax
c001bde0:	83 d2 00             	adc    edx,0x0
c001bde3:	f7 da                	neg    edx
c001bde5:	c3                   	ret    
c001bde6:	59                   	pop    ecx
c001bde7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf1:	5b                   	pop    ebx
c001bdf2:	5e                   	pop    esi
c001bdf3:	c3                   	ret    

c001bdf4 <sysCallWait(regs*)>:
c001bdf4:	83 ec 10             	sub    esp,0x10
c001bdf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdfb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdfe:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be01:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be04:	e8 ce 24 00 00       	call   c001e2d7 <waitTask(int, int*, int)>
c001be09:	83 c4 1c             	add    esp,0x1c
c001be0c:	99                   	cdq    
c001be0d:	c3                   	ret    

c001be0e <sysCallNotImpl(regs*)>:
c001be0e:	83 ec 18             	sub    esp,0x18
c001be11:	68 7a c0 02 c0       	push   0xc002c07a
c001be16:	e8 e0 e7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001be1b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be20:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be25:	83 c4 1c             	add    esp,0x1c
c001be28:	c3                   	ret    

c001be29 <sysPanic(regs*)>:
c001be29:	83 ec 18             	sub    esp,0x18
c001be2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be30:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be33:	e8 c3 e7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001be38:	c7 04 24 94 c0 02 c0 	mov    DWORD PTR [esp],0xc002c094
c001be3f:	e8 b7 e7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001be44:	b8 01 00 00 00       	mov    eax,0x1
c001be49:	31 d2                	xor    edx,edx
c001be4b:	83 c4 1c             	add    esp,0x1c
c001be4e:	c3                   	ret    

c001be4f <sysCallRmdir(regs*)>:
c001be4f:	56                   	push   esi
c001be50:	53                   	push   ebx
c001be51:	83 ec 20             	sub    esp,0x20
c001be54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be58:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be5b:	68 14 01 00 00       	push   0x114
c001be60:	e8 db 39 ff ff       	call   c000f840 <malloc>
c001be65:	83 c4 0c             	add    esp,0xc
c001be68:	89 c3                	mov    ebx,eax
c001be6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be72:	56                   	push   esi
c001be73:	53                   	push   ebx
c001be74:	e8 39 76 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001be79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be7c:	e8 0d 78 ff ff       	call   c001368e <File::unlink()>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	85 db                	test   ebx,ebx
c001be86:	74 14                	je     c001be9c <sysCallRmdir(regs*)+0x4d>
c001be88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be8e:	83 ec 0c             	sub    esp,0xc
c001be91:	53                   	push   ebx
c001be92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be9c:	85 c0                	test   eax,eax
c001be9e:	0f 95 c0             	setne  al
c001bea1:	31 d2                	xor    edx,edx
c001bea3:	0f b6 c0             	movzx  eax,al
c001bea6:	f7 d8                	neg    eax
c001bea8:	83 d2 00             	adc    edx,0x0
c001beab:	83 c4 14             	add    esp,0x14
c001beae:	f7 da                	neg    edx
c001beb0:	5b                   	pop    ebx
c001beb1:	5e                   	pop    esi
c001beb2:	c3                   	ret    

c001beb3 <sysCallUnlink(regs*)>:
c001beb3:	56                   	push   esi
c001beb4:	53                   	push   ebx
c001beb5:	83 ec 20             	sub    esp,0x20
c001beb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bebc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bebf:	68 14 01 00 00       	push   0x114
c001bec4:	e8 77 39 ff ff       	call   c000f840 <malloc>
c001bec9:	83 c4 0c             	add    esp,0xc
c001becc:	89 c3                	mov    ebx,eax
c001bece:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed6:	56                   	push   esi
c001bed7:	53                   	push   ebx
c001bed8:	e8 d5 75 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001bedd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee0:	e8 a9 77 ff ff       	call   c001368e <File::unlink()>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	85 db                	test   ebx,ebx
c001beea:	74 14                	je     c001bf00 <sysCallUnlink(regs*)+0x4d>
c001beec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bef0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bef2:	83 ec 0c             	sub    esp,0xc
c001bef5:	53                   	push   ebx
c001bef6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf00:	85 c0                	test   eax,eax
c001bf02:	0f 95 c0             	setne  al
c001bf05:	31 d2                	xor    edx,edx
c001bf07:	0f b6 c0             	movzx  eax,al
c001bf0a:	f7 d8                	neg    eax
c001bf0c:	83 d2 00             	adc    edx,0x0
c001bf0f:	83 c4 14             	add    esp,0x14
c001bf12:	f7 da                	neg    edx
c001bf14:	5b                   	pop    ebx
c001bf15:	5e                   	pop    esi
c001bf16:	c3                   	ret    

c001bf17 <sysCallGetArgv(regs*)>:
c001bf17:	83 ec 0c             	sub    esp,0xc
c001bf1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf1e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf21:	85 c0                	test   eax,eax
c001bf23:	78 2b                	js     c001bf50 <sysCallGetArgv(regs*)+0x39>
c001bf25:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf2b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf2e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf34:	7d 1a                	jge    c001bf50 <sysCallGetArgv(regs*)+0x39>
c001bf36:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf3d:	85 c0                	test   eax,eax
c001bf3f:	74 17                	je     c001bf58 <sysCallGetArgv(regs*)+0x41>
c001bf41:	83 ec 08             	sub    esp,0x8
c001bf44:	50                   	push   eax
c001bf45:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf48:	e8 e7 48 fe ff       	call   c0000834 <strcpy>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	31 c0                	xor    eax,eax
c001bf52:	31 d2                	xor    edx,edx
c001bf54:	83 c4 0c             	add    esp,0xc
c001bf57:	c3                   	ret    
c001bf58:	b8 01 00 00 00       	mov    eax,0x1
c001bf5d:	31 d2                	xor    edx,edx
c001bf5f:	83 c4 0c             	add    esp,0xc
c001bf62:	c3                   	ret    

c001bf63 <sysCallTTYName(regs*)>:
c001bf63:	56                   	push   esi
c001bf64:	53                   	push   ebx
c001bf65:	53                   	push   ebx
c001bf66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf6a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf6d:	85 c0                	test   eax,eax
c001bf6f:	74 5f                	je     c001bfd0 <sysCallTTYName(regs*)+0x6d>
c001bf71:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf74:	83 f8 02             	cmp    eax,0x2
c001bf77:	77 3e                	ja     c001bfb7 <sysCallTTYName(regs*)+0x54>
c001bf79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf81:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf87:	85 db                	test   ebx,ebx
c001bf89:	74 45                	je     c001bfd0 <sysCallTTYName(regs*)+0x6d>
c001bf8b:	83 ec 0c             	sub    esp,0xc
c001bf8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf90:	53                   	push   ebx
c001bf91:	ff 10                	call   DWORD PTR [eax]
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	84 c0                	test   al,al
c001bf98:	74 41                	je     c001bfdb <sysCallTTYName(regs*)+0x78>
c001bf9a:	83 ec 08             	sub    esp,0x8
c001bf9d:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfa3:	53                   	push   ebx
c001bfa4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfa7:	e8 88 48 fe ff       	call   c0000834 <strcpy>
c001bfac:	83 c4 10             	add    esp,0x10
c001bfaf:	31 c0                	xor    eax,eax
c001bfb1:	59                   	pop    ecx
c001bfb2:	31 d2                	xor    edx,edx
c001bfb4:	5b                   	pop    ebx
c001bfb5:	5e                   	pop    esi
c001bfb6:	c3                   	ret    
c001bfb7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfbc:	74 bb                	je     c001bf79 <sysCallTTYName(regs*)+0x16>
c001bfbe:	83 ec 0c             	sub    esp,0xc
c001bfc1:	50                   	push   eax
c001bfc2:	e8 6e 5a ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	89 c3                	mov    ebx,eax
c001bfcc:	85 db                	test   ebx,ebx
c001bfce:	75 bb                	jne    c001bf8b <sysCallTTYName(regs*)+0x28>
c001bfd0:	59                   	pop    ecx
c001bfd1:	b8 01 00 00 00       	mov    eax,0x1
c001bfd6:	31 d2                	xor    edx,edx
c001bfd8:	5b                   	pop    ebx
c001bfd9:	5e                   	pop    esi
c001bfda:	c3                   	ret    
c001bfdb:	59                   	pop    ecx
c001bfdc:	b8 02 00 00 00       	mov    eax,0x2
c001bfe1:	31 d2                	xor    edx,edx
c001bfe3:	5b                   	pop    ebx
c001bfe4:	5e                   	pop    esi
c001bfe5:	c3                   	ret    

c001bfe6 <sysCallUSleep(regs*)>:
c001bfe6:	83 ec 14             	sub    esp,0x14
c001bfe9:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bff2:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bff9:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bffc:	01 ca                	add    edx,ecx
c001bffe:	52                   	push   edx
c001bfff:	50                   	push   eax
c001c000:	e8 6b 23 00 00       	call   c001e370 <nanoSleep(unsigned long long)>
c001c005:	31 c0                	xor    eax,eax
c001c007:	31 d2                	xor    edx,edx
c001c009:	83 c4 1c             	add    esp,0x1c
c001c00c:	c3                   	ret    

c001c00d <sysCallSpawn(regs*)>:
c001c00d:	56                   	push   esi
c001c00e:	53                   	push   ebx
c001c00f:	53                   	push   ebx
c001c010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c014:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c017:	85 f6                	test   esi,esi
c001c019:	75 08                	jne    c001c023 <sysCallSpawn(regs*)+0x16>
c001c01b:	59                   	pop    ecx
c001c01c:	31 c0                	xor    eax,eax
c001c01e:	31 d2                	xor    edx,edx
c001c020:	5b                   	pop    ebx
c001c021:	5e                   	pop    esi
c001c022:	c3                   	ret    
c001c023:	83 ec 0c             	sub    esp,0xc
c001c026:	68 3f 07 00 00       	push   0x73f
c001c02b:	e8 10 38 ff ff       	call   c000f840 <malloc>
c001c030:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c033:	89 c6                	mov    esi,eax
c001c035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c03d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c040:	56                   	push   esi
c001c041:	e8 2a 1a 00 00       	call   c001da70 <Process::Process(char const*, Process*, char**)>
c001c046:	83 c4 20             	add    esp,0x20
c001c049:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c050:	75 c9                	jne    c001c01b <sysCallSpawn(regs*)+0xe>
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	56                   	push   esi
c001c056:	e8 db 1f 00 00       	call   c001e036 <Process::createUserThread()>
c001c05b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	99                   	cdq    
c001c061:	59                   	pop    ecx
c001c062:	5b                   	pop    ebx
c001c063:	5e                   	pop    esi
c001c064:	c3                   	ret    

c001c065 <sysCallGetEnv(regs*)>:
c001c065:	55                   	push   ebp
c001c066:	57                   	push   edi
c001c067:	56                   	push   esi
c001c068:	53                   	push   ebx
c001c069:	83 ec 28             	sub    esp,0x28
c001c06c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c070:	68 a3 c0 02 c0       	push   0xc002c0a3
c001c075:	e8 df 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c07a:	5f                   	pop    edi
c001c07b:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c07e:	5d                   	pop    ebp
c001c07f:	53                   	push   ebx
c001c080:	68 d2 c3 02 c0       	push   0xc002c3d2
c001c085:	e8 cf 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c08a:	58                   	pop    eax
c001c08b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c08e:	5a                   	pop    edx
c001c08f:	57                   	push   edi
c001c090:	68 ac c0 02 c0       	push   0xc002c0ac
c001c095:	e8 bf 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c09a:	59                   	pop    ecx
c001c09b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0a3:	e8 6f e4 ff ff       	call   c001a517 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0a8:	5a                   	pop    edx
c001c0a9:	89 c5                	mov    ebp,eax
c001c0ab:	59                   	pop    ecx
c001c0ac:	50                   	push   eax
c001c0ad:	68 b6 c0 02 c0       	push   0xc002c0b6
c001c0b2:	e8 a2 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c0b7:	83 c4 10             	add    esp,0x10
c001c0ba:	39 ef                	cmp    edi,ebp
c001c0bc:	7c 15                	jl     c001c0d3 <sysCallGetEnv(regs*)+0x6e>
c001c0be:	85 db                	test   ebx,ebx
c001c0c0:	75 0c                	jne    c001c0ce <sysCallGetEnv(regs*)+0x69>
c001c0c2:	83 c4 1c             	add    esp,0x1c
c001c0c5:	31 c0                	xor    eax,eax
c001c0c7:	5b                   	pop    ebx
c001c0c8:	31 d2                	xor    edx,edx
c001c0ca:	5e                   	pop    esi
c001c0cb:	5f                   	pop    edi
c001c0cc:	5d                   	pop    ebp
c001c0cd:	c3                   	ret    
c001c0ce:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0d1:	eb ef                	jmp    c001c0c2 <sysCallGetEnv(regs*)+0x5d>
c001c0d3:	83 ec 0c             	sub    esp,0xc
c001c0d6:	68 c2 c0 02 c0       	push   0xc002c0c2
c001c0db:	e8 79 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c0e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0e4:	83 c4 0c             	add    esp,0xc
c001c0e7:	57                   	push   edi
c001c0e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0ee:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0f1:	50                   	push   eax
c001c0f2:	e8 40 e4 ff ff       	call   c001a537 <Krnl::getProcessEnvPair(Process*, int)>
c001c0f7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0ff:	68 51 c4 02 c0       	push   0xc002c451
c001c104:	e8 50 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c10f:	85 f6                	test   esi,esi
c001c111:	75 47                	jne    c001c15a <sysCallGetEnv(regs*)+0xf5>
c001c113:	83 ec 0c             	sub    esp,0xc
c001c116:	55                   	push   ebp
c001c117:	e8 78 46 fe ff       	call   c0000794 <strlen>
c001c11c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c11f:	89 c3                	mov    ebx,eax
c001c121:	e8 6e 46 fe ff       	call   c0000794 <strlen>
c001c126:	5a                   	pop    edx
c001c127:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c12b:	59                   	pop    ecx
c001c12c:	50                   	push   eax
c001c12d:	68 c5 c0 02 c0       	push   0xc002c0c5
c001c132:	e8 22 6e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c13a:	e8 55 46 fe ff       	call   c0000794 <strlen>
c001c13f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c142:	89 c3                	mov    ebx,eax
c001c144:	e8 4b 46 fe ff       	call   c0000794 <strlen>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c150:	83 c4 1c             	add    esp,0x1c
c001c153:	31 d2                	xor    edx,edx
c001c155:	5b                   	pop    ebx
c001c156:	5e                   	pop    esi
c001c157:	5f                   	pop    edi
c001c158:	5d                   	pop    ebp
c001c159:	c3                   	ret    
c001c15a:	83 ec 0c             	sub    esp,0xc
c001c15d:	68 6b c4 02 c0       	push   0xc002c46b
c001c162:	e8 f2 6d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c167:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c16a:	58                   	pop    eax
c001c16b:	5a                   	pop    edx
c001c16c:	55                   	push   ebp
c001c16d:	53                   	push   ebx
c001c16e:	e8 c1 46 fe ff       	call   c0000834 <strcpy>
c001c173:	59                   	pop    ecx
c001c174:	5e                   	pop    esi
c001c175:	68 cf c0 02 c0       	push   0xc002c0cf
c001c17a:	53                   	push   ebx
c001c17b:	e8 f4 47 fe ff       	call   c0000974 <strcat>
c001c180:	5d                   	pop    ebp
c001c181:	58                   	pop    eax
c001c182:	57                   	push   edi
c001c183:	53                   	push   ebx
c001c184:	e8 eb 47 fe ff       	call   c0000974 <strcat>
c001c189:	c7 04 24 85 c4 02 c0 	mov    DWORD PTR [esp],0xc002c485
c001c190:	e8 c4 6d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c195:	83 c4 10             	add    esp,0x10
c001c198:	e9 25 ff ff ff       	jmp    c001c0c2 <sysCallGetEnv(regs*)+0x5d>

c001c19d <sysAppSettings(regs*)>:
c001c19d:	53                   	push   ebx
c001c19e:	83 ec 08             	sub    esp,0x8
c001c1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1a8:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1ae:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1b3:	66 3d c0 09          	cmp    ax,0x9c0
c001c1b7:	75 2f                	jne    c001c1e8 <sysAppSettings(regs*)+0x4b>
c001c1b9:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1bf:	83 e0 1f             	and    eax,0x1f
c001c1c2:	3c 01                	cmp    al,0x1
c001c1c4:	74 2e                	je     c001c1f4 <sysAppSettings(regs*)+0x57>
c001c1c6:	3c 07                	cmp    al,0x7
c001c1c8:	0f 84 bd 00 00 00    	je     c001c28b <sysAppSettings(regs*)+0xee>
c001c1ce:	84 c0                	test   al,al
c001c1d0:	0f 84 dc 00 00 00    	je     c001c2b2 <sysAppSettings(regs*)+0x115>
c001c1d6:	3c 08                	cmp    al,0x8
c001c1d8:	74 6d                	je     c001c247 <sysAppSettings(regs*)+0xaa>
c001c1da:	0f b6 c0             	movzx  eax,al
c001c1dd:	83 c4 08             	add    esp,0x8
c001c1e0:	05 e8 03 00 00       	add    eax,0x3e8
c001c1e5:	5b                   	pop    ebx
c001c1e6:	99                   	cdq    
c001c1e7:	c3                   	ret    
c001c1e8:	b8 01 00 00 00       	mov    eax,0x1
c001c1ed:	31 d2                	xor    edx,edx
c001c1ef:	83 c4 08             	add    esp,0x8
c001c1f2:	5b                   	pop    ebx
c001c1f3:	c3                   	ret    
c001c1f4:	51                   	push   ecx
c001c1f5:	68 00 01 00 00       	push   0x100
c001c1fa:	6a 00                	push   0x0
c001c1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c201:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c204:	83 c0 0c             	add    eax,0xc
c001c207:	50                   	push   eax
c001c208:	e8 6b 45 fe ff       	call   c0000778 <memset>
c001c20d:	83 c4 0c             	add    esp,0xc
c001c210:	68 ff 00 00 00       	push   0xff
c001c215:	53                   	push   ebx
c001c216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c21e:	83 c0 0c             	add    eax,0xc
c001c221:	50                   	push   eax
c001c222:	e8 1d 45 fe ff       	call   c0000744 <memcpy>
c001c227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22c:	5b                   	pop    ebx
c001c22d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c230:	5a                   	pop    edx
c001c231:	8d 50 0c             	lea    edx,[eax+0xc]
c001c234:	52                   	push   edx
c001c235:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23b:	e8 70 49 ff ff       	call   c0010bb0 <VgaText::setTitle(char*)>
c001c240:	83 c4 10             	add    esp,0x10
c001c243:	31 c0                	xor    eax,eax
c001c245:	eb a6                	jmp    c001c1ed <sysAppSettings(regs*)+0x50>
c001c247:	83 ec 08             	sub    esp,0x8
c001c24a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c250:	83 e0 0f             	and    eax,0xf
c001c253:	50                   	push   eax
c001c254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c25c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c262:	e8 39 49 ff ff       	call   c0010ba0 <VgaText::setTitleColour(VgaColour)>
c001c267:	58                   	pop    eax
c001c268:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c26e:	5a                   	pop    edx
c001c26f:	c1 e8 04             	shr    eax,0x4
c001c272:	83 e0 0f             	and    eax,0xf
c001c275:	50                   	push   eax
c001c276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c284:	e8 07 49 ff ff       	call   c0010b90 <VgaText::setTitleTextColour(VgaColour)>
c001c289:	eb b5                	jmp    c001c240 <sysAppSettings(regs*)+0xa3>
c001c28b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c293:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c299:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c29f:	c0 e8 06             	shr    al,0x6
c001c2a2:	83 e0 01             	and    eax,0x1
c001c2a5:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2ab:	31 c0                	xor    eax,eax
c001c2ad:	e9 3b ff ff ff       	jmp    c001c1ed <sysAppSettings(regs*)+0x50>
c001c2b2:	b8 02 00 00 00       	mov    eax,0x2
c001c2b7:	e9 31 ff ff ff       	jmp    c001c1ed <sysAppSettings(regs*)+0x50>

c001c2bc <sysSetFatAttrib(regs*)>:
c001c2bc:	57                   	push   edi
c001c2bd:	56                   	push   esi
c001c2be:	53                   	push   ebx
c001c2bf:	83 ec 1c             	sub    esp,0x1c
c001c2c2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2c6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2c9:	68 14 01 00 00       	push   0x114
c001c2ce:	e8 6d 35 ff ff       	call   c000f840 <malloc>
c001c2d3:	83 c4 0c             	add    esp,0xc
c001c2d6:	89 c3                	mov    ebx,eax
c001c2d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2dd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2e0:	57                   	push   edi
c001c2e1:	53                   	push   ebx
c001c2e2:	e8 cb 71 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001c2e7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ea:	83 c4 0c             	add    esp,0xc
c001c2ed:	0f b6 d4             	movzx  edx,ah
c001c2f0:	0f b6 c0             	movzx  eax,al
c001c2f3:	52                   	push   edx
c001c2f4:	50                   	push   eax
c001c2f5:	53                   	push   ebx
c001c2f6:	e8 2d 74 ff ff       	call   c0013728 <File::chfatattr(unsigned char, unsigned char)>
c001c2fb:	83 c4 10             	add    esp,0x10
c001c2fe:	85 db                	test   ebx,ebx
c001c300:	74 14                	je     c001c316 <sysSetFatAttrib(regs*)+0x5a>
c001c302:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c306:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c308:	83 ec 0c             	sub    esp,0xc
c001c30b:	53                   	push   ebx
c001c30c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c30f:	83 c4 10             	add    esp,0x10
c001c312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c316:	85 c0                	test   eax,eax
c001c318:	0f 95 c0             	setne  al
c001c31b:	31 d2                	xor    edx,edx
c001c31d:	0f b6 c0             	movzx  eax,al
c001c320:	f7 d8                	neg    eax
c001c322:	83 d2 00             	adc    edx,0x0
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	f7 da                	neg    edx
c001c32a:	5b                   	pop    ebx
c001c32b:	5e                   	pop    esi
c001c32c:	5f                   	pop    edi
c001c32d:	c3                   	ret    

c001c32e <sysPipe(regs*)>:
c001c32e:	57                   	push   edi
c001c32f:	56                   	push   esi
c001c330:	53                   	push   ebx
c001c331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c335:	83 ec 0c             	sub    esp,0xc
c001c338:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c33b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c33e:	6a 20                	push   0x20
c001c340:	e8 fb 34 ff ff       	call   c000f840 <malloc>
c001c345:	89 c3                	mov    ebx,eax
c001c347:	58                   	pop    eax
c001c348:	5a                   	pop    edx
c001c349:	68 00 50 00 00       	push   0x5000
c001c34e:	53                   	push   ebx
c001c34f:	e8 8c 41 ff ff       	call   c00104e0 <Pipe::Pipe(int)>
c001c354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c357:	e8 e4 53 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c35c:	89 07                	mov    DWORD PTR [edi],eax
c001c35e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c361:	e8 da 53 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c366:	83 c4 10             	add    esp,0x10
c001c369:	89 06                	mov    DWORD PTR [esi],eax
c001c36b:	31 d2                	xor    edx,edx
c001c36d:	5b                   	pop    ebx
c001c36e:	31 c0                	xor    eax,eax
c001c370:	5e                   	pop    esi
c001c371:	5f                   	pop    edi
c001c372:	c3                   	ret    

c001c373 <sysGetUnixTime(regs*)>:
c001c373:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001c378:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c37e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c382:	e9 15 7b ff ff       	jmp    c0013e9c <Clock::timeInSecondsLocal()>

c001c387 <string_ends_with(char const*, char const*)>:
c001c387:	57                   	push   edi
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c38e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	53                   	push   ebx
c001c396:	e8 f9 43 fe ff       	call   c0000794 <strlen>
c001c39b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c39e:	89 c6                	mov    esi,eax
c001c3a0:	e8 ef 43 fe ff       	call   c0000794 <strlen>
c001c3a5:	83 c4 10             	add    esp,0x10
c001c3a8:	39 c6                	cmp    esi,eax
c001c3aa:	7d 06                	jge    c001c3b2 <string_ends_with(char const*, char const*)+0x2b>
c001c3ac:	5b                   	pop    ebx
c001c3ad:	31 c0                	xor    eax,eax
c001c3af:	5e                   	pop    esi
c001c3b0:	5f                   	pop    edi
c001c3b1:	c3                   	ret    
c001c3b2:	83 ec 08             	sub    esp,0x8
c001c3b5:	29 c6                	sub    esi,eax
c001c3b7:	57                   	push   edi
c001c3b8:	01 f3                	add    ebx,esi
c001c3ba:	53                   	push   ebx
c001c3bb:	e8 00 45 fe ff       	call   c00008c0 <strcmp>
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	85 c0                	test   eax,eax
c001c3c5:	5b                   	pop    ebx
c001c3c6:	0f 94 c0             	sete   al
c001c3c9:	5e                   	pop    esi
c001c3ca:	0f b6 c0             	movzx  eax,al
c001c3cd:	5f                   	pop    edi
c001c3ce:	c3                   	ret    

c001c3cf <sysCallOpen(regs*)>:
c001c3cf:	56                   	push   esi
c001c3d0:	53                   	push   ebx
c001c3d1:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3d7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3de:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3e1:	85 c9                	test   ecx,ecx
c001c3e3:	0f 84 b3 00 00 00    	je     c001c49c <sysCallOpen(regs*)+0xcd>
c001c3e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3ec:	85 c0                	test   eax,eax
c001c3ee:	0f 84 a8 00 00 00    	je     c001c49c <sysCallOpen(regs*)+0xcd>
c001c3f4:	52                   	push   edx
c001c3f5:	68 d1 c0 02 c0       	push   0xc002c0d1
c001c3fa:	50                   	push   eax
c001c3fb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3ff:	56                   	push   esi
c001c400:	e8 03 6f ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c405:	89 34 24             	mov    DWORD PTR [esp],esi
c001c408:	e8 87 43 fe ff       	call   c0000794 <strlen>
c001c40d:	83 c4 10             	add    esp,0x10
c001c410:	48                   	dec    eax
c001c411:	74 1d                	je     c001c430 <sysCallOpen(regs*)+0x61>
c001c413:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c416:	eb 0f                	jmp    c001c427 <sysCallOpen(regs*)+0x58>
c001c418:	80 fa 3a             	cmp    dl,0x3a
c001c41b:	74 0f                	je     c001c42c <sysCallOpen(regs*)+0x5d>
c001c41d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c421:	48                   	dec    eax
c001c422:	74 0c                	je     c001c430 <sysCallOpen(regs*)+0x61>
c001c424:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c427:	80 fa 2e             	cmp    dl,0x2e
c001c42a:	75 ec                	jne    c001c418 <sysCallOpen(regs*)+0x49>
c001c42c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c430:	83 ec 08             	sub    esp,0x8
c001c433:	68 d5 c0 02 c0       	push   0xc002c0d5
c001c438:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43b:	e8 47 ff ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c440:	83 c4 10             	add    esp,0x10
c001c443:	85 c0                	test   eax,eax
c001c445:	75 17                	jne    c001c45e <sysCallOpen(regs*)+0x8f>
c001c447:	83 ec 08             	sub    esp,0x8
c001c44a:	68 f6 c0 02 c0       	push   0xc002c0f6
c001c44f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c452:	e8 30 ff ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	85 c0                	test   eax,eax
c001c45c:	74 51                	je     c001c4af <sysCallOpen(regs*)+0xe0>
c001c45e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c461:	83 ec 08             	sub    esp,0x8
c001c464:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c46a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c471:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c474:	ff 30                	push   DWORD PTR [eax]
c001c476:	68 da c0 02 c0       	push   0xc002c0da
c001c47b:	e8 d9 6a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c480:	c7 04 24 e9 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0e9
c001c487:	e8 cd 6a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	81 c4 04 01 00 00    	add    esp,0x104
c001c495:	31 c0                	xor    eax,eax
c001c497:	31 d2                	xor    edx,edx
c001c499:	5b                   	pop    ebx
c001c49a:	5e                   	pop    esi
c001c49b:	c3                   	ret    
c001c49c:	81 c4 04 01 00 00    	add    esp,0x104
c001c4a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4ac:	5b                   	pop    ebx
c001c4ad:	5e                   	pop    esi
c001c4ae:	c3                   	ret    
c001c4af:	83 ec 08             	sub    esp,0x8
c001c4b2:	68 d6 c0 02 c0       	push   0xc002c0d6
c001c4b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ba:	e8 01 44 fe ff       	call   c00008c0 <strcmp>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	85 c0                	test   eax,eax
c001c4c4:	74 98                	je     c001c45e <sysCallOpen(regs*)+0x8f>
c001c4c6:	83 ec 08             	sub    esp,0x8
c001c4c9:	68 d5 c0 02 c0       	push   0xc002c0d5
c001c4ce:	56                   	push   esi
c001c4cf:	e8 b3 fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	85 c0                	test   eax,eax
c001c4d9:	75 83                	jne    c001c45e <sysCallOpen(regs*)+0x8f>
c001c4db:	83 ec 08             	sub    esp,0x8
c001c4de:	68 fb c0 02 c0       	push   0xc002c0fb
c001c4e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4e6:	e8 9c fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	85 c0                	test   eax,eax
c001c4f0:	0f 85 d9 00 00 00    	jne    c001c5cf <sysCallOpen(regs*)+0x200>
c001c4f6:	83 ec 08             	sub    esp,0x8
c001c4f9:	68 00 c1 02 c0       	push   0xc002c100
c001c4fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c501:	e8 81 fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c506:	83 c4 10             	add    esp,0x10
c001c509:	85 c0                	test   eax,eax
c001c50b:	0f 85 be 00 00 00    	jne    c001c5cf <sysCallOpen(regs*)+0x200>
c001c511:	83 ec 08             	sub    esp,0x8
c001c514:	68 fc c0 02 c0       	push   0xc002c0fc
c001c519:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c51c:	e8 9f 43 fe ff       	call   c00008c0 <strcmp>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	85 c0                	test   eax,eax
c001c526:	0f 84 a3 00 00 00    	je     c001c5cf <sysCallOpen(regs*)+0x200>
c001c52c:	83 ec 08             	sub    esp,0x8
c001c52f:	68 fb c0 02 c0       	push   0xc002c0fb
c001c534:	56                   	push   esi
c001c535:	e8 4d fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	85 c0                	test   eax,eax
c001c53f:	0f 85 8a 00 00 00    	jne    c001c5cf <sysCallOpen(regs*)+0x200>
c001c545:	83 ec 0c             	sub    esp,0xc
c001c548:	68 14 01 00 00       	push   0x114
c001c54d:	e8 ee 32 ff ff       	call   c000f840 <malloc>
c001c552:	83 c4 0c             	add    esp,0xc
c001c555:	89 c6                	mov    esi,eax
c001c557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c55c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c55f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c562:	56                   	push   esi
c001c563:	e8 4a 6f ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001c568:	83 c4 10             	add    esp,0x10
c001c56b:	85 f6                	test   esi,esi
c001c56d:	0f 84 29 ff ff ff    	je     c001c49c <sysCallOpen(regs*)+0xcd>
c001c573:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c576:	0f b6 c2             	movzx  eax,dl
c001c579:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c57c:	89 d0                	mov    eax,edx
c001c57e:	83 e0 01             	and    eax,0x1
c001c581:	f6 c2 02             	test   dl,0x2
c001c584:	74 03                	je     c001c589 <sysCallOpen(regs*)+0x1ba>
c001c586:	83 c8 02             	or     eax,0x2
c001c589:	f6 c2 04             	test   dl,0x4
c001c58c:	74 03                	je     c001c591 <sysCallOpen(regs*)+0x1c2>
c001c58e:	83 c8 04             	or     eax,0x4
c001c591:	f6 c2 08             	test   dl,0x8
c001c594:	74 03                	je     c001c599 <sysCallOpen(regs*)+0x1ca>
c001c596:	83 c8 0a             	or     eax,0xa
c001c599:	83 e2 10             	and    edx,0x10
c001c59c:	74 03                	je     c001c5a1 <sysCallOpen(regs*)+0x1d2>
c001c59e:	83 c8 12             	or     eax,0x12
c001c5a1:	83 ec 08             	sub    esp,0x8
c001c5a4:	50                   	push   eax
c001c5a5:	56                   	push   esi
c001c5a6:	e8 6b 6f ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	85 c0                	test   eax,eax
c001c5b0:	0f 85 e6 fe ff ff    	jne    c001c49c <sysCallOpen(regs*)+0xcd>
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	56                   	push   esi
c001c5ba:	e8 81 51 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c5bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5c2:	89 02                	mov    DWORD PTR [edx],eax
c001c5c4:	c1 f8 1f             	sar    eax,0x1f
c001c5c7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5ca:	e9 bd fe ff ff       	jmp    c001c48c <sysCallOpen(regs*)+0xbd>
c001c5cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5d2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5df:	e9 ab fe ff ff       	jmp    c001c48f <sysCallOpen(regs*)+0xc0>

c001c5e4 <Sys::loadSyscalls()>:
c001c5e4:	c7 05 80 11 03 c0 f1 b6 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b6f1
c001c5ee:	c7 05 84 11 03 c0 90 b2 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001b290
c001c5f8:	c7 05 88 11 03 c0 fa b3 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001b3fa
c001c602:	c7 05 8c 11 03 c0 27 b6 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b627
c001c60c:	c7 05 90 11 03 c0 92 b3 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b392
c001c616:	c7 05 94 11 03 c0 c7 b2 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b2c7
c001c620:	c7 05 98 11 03 c0 a8 b2 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001b2a8
c001c62a:	c7 05 9c 11 03 c0 99 b4 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001b499
c001c634:	c7 05 a4 11 03 c0 21 bc 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001bc21
c001c63e:	c7 05 a0 11 03 c0 cf c3 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001c3cf
c001c648:	c7 05 a8 11 03 c0 a9 bc 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001bca9
c001c652:	c7 05 ac 11 03 c0 10 b9 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b910
c001c65c:	c7 05 b0 11 03 c0 2c b7 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001b72c
c001c666:	c7 05 b4 11 03 c0 31 b7 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b731
c001c670:	c7 05 b8 11 03 c0 84 bd 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bd84
c001c67a:	c7 05 bc 11 03 c0 1e bd 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001bd1e
c001c684:	c7 05 c0 11 03 c0 f8 b9 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b9f8
c001c68e:	c7 05 c4 11 03 c0 61 ba 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001ba61
c001c698:	c7 05 c8 11 03 c0 de ba 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001bade
c001c6a2:	c7 05 cc 11 03 c0 36 b7 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b736
c001c6ac:	c7 05 d0 11 03 c0 f4 bd 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001bdf4
c001c6b6:	c7 05 d4 11 03 c0 0e be 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001be0e
c001c6c0:	c7 05 d8 11 03 c0 0e be 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001be0e
c001c6ca:	c7 05 dc 11 03 c0 4f be 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001be4f
c001c6d4:	c7 05 e0 11 03 c0 b3 be 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001beb3
c001c6de:	c7 05 e4 11 03 c0 e2 b8 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001b8e2
c001c6e8:	c7 05 e8 11 03 c0 17 bf 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001bf17
c001c6f2:	c7 05 ec 11 03 c0 9f b8 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b89f
c001c6fc:	c7 05 f0 11 03 c0 63 bf 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001bf63
c001c706:	c7 05 f4 11 03 c0 9e b9 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b99e
c001c710:	c7 05 f8 11 03 c0 e6 bf 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001bfe6
c001c71a:	c7 05 fc 11 03 c0 61 bb 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001bb61
c001c724:	c7 05 00 12 03 c0 0d c0 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001c00d
c001c72e:	c7 05 04 12 03 c0 65 c0 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001c065
c001c738:	c7 05 08 12 03 c0 9d c1 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001c19d
c001c742:	c7 05 0c 12 03 c0 40 b7 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b740
c001c74c:	c7 05 10 12 03 c0 aa b7 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001b7aa
c001c756:	c7 05 14 12 03 c0 f0 b7 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001b7f0
c001c760:	c7 05 18 12 03 c0 bc c2 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001c2bc
c001c76a:	c7 05 1c 12 03 c0 29 be 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001be29
c001c774:	c7 05 20 12 03 c0 41 b8 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001b841
c001c77e:	c7 05 24 12 03 c0 2e c3 01 c0 	mov    DWORD PTR ds:0xc0031224,0xc001c32e
c001c788:	c7 05 28 12 03 c0 73 c3 01 c0 	mov    DWORD PTR ds:0xc0031228,0xc001c373
c001c792:	c7 05 2c 12 03 c0 ea b2 01 c0 	mov    DWORD PTR ds:0xc003122c,0xc001b2ea
c001c79c:	c7 05 30 12 03 c0 b5 b4 01 c0 	mov    DWORD PTR ds:0xc0031230,0xc001b4b5
c001c7a6:	c7 05 34 12 03 c0 dd b5 01 c0 	mov    DWORD PTR ds:0xc0031234,0xc001b5dd
c001c7b0:	c7 05 38 12 03 c0 5a b2 01 c0 	mov    DWORD PTR ds:0xc0031238,0xc001b25a
c001c7ba:	c7 05 3c 12 03 c0 8f b6 01 c0 	mov    DWORD PTR ds:0xc003123c,0xc001b68f
c001c7c4:	c7 05 40 12 03 c0 d3 b2 01 c0 	mov    DWORD PTR ds:0xc0031240,0xc001b2d3
c001c7ce:	c3                   	ret    

c001c7cf <Sys::systemCall(regs*, void*)>:
c001c7cf:	53                   	push   ebx
c001c7d0:	83 ec 08             	sub    esp,0x8
c001c7d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7da:	83 f8 7f             	cmp    eax,0x7f
c001c7dd:	77 16                	ja     c001c7f5 <Sys::systemCall(regs*, void*)+0x26>
c001c7df:	8b 14 85 80 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee80]
c001c7e6:	85 d2                	test   edx,edx
c001c7e8:	74 0b                	je     c001c7f5 <Sys::systemCall(regs*, void*)+0x26>
c001c7ea:	83 ec 0c             	sub    esp,0xc
c001c7ed:	53                   	push   ebx
c001c7ee:	ff d2                	call   edx
c001c7f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7f3:	eb 0d                	jmp    c001c802 <Sys::systemCall(regs*, void*)+0x33>
c001c7f5:	52                   	push   edx
c001c7f6:	52                   	push   edx
c001c7f7:	50                   	push   eax
c001c7f8:	68 05 c1 02 c0       	push   0xc002c105
c001c7fd:	e8 57 67 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c802:	83 c4 10             	add    esp,0x10
c001c805:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c80a:	31 d2                	xor    edx,edx
c001c80c:	83 c4 08             	add    esp,0x8
c001c80f:	5b                   	pop    ebx
c001c810:	c3                   	ret    

c001c811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c811:	55                   	push   ebp
c001c812:	57                   	push   edi
c001c813:	56                   	push   esi
c001c814:	53                   	push   ebx
c001c815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c81b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c822:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c829:	85 c0                	test   eax,eax
c001c82b:	0f 95 c1             	setne  cl
c001c82e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c836:	0f 94 c2             	sete   dl
c001c839:	84 d1                	test   cl,dl
c001c83b:	74 23                	je     c001c860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c83d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c843:	74 1b                	je     c001c860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c845:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c84b:	89 da                	mov    edx,ebx
c001c84d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c853:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c859:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c860:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c867:	05 ff 0f 00 00       	add    eax,0xfff
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c873:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c879:	c1 e8 0c             	shr    eax,0xc
c001c87c:	89 ef                	mov    edi,ebp
c001c87e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c882:	c1 ef 0c             	shr    edi,0xc
c001c885:	6a 01                	push   0x1
c001c887:	e8 ff 52 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001c88c:	89 c6                	mov    esi,eax
c001c88e:	58                   	pop    eax
c001c88f:	5a                   	pop    edx
c001c890:	57                   	push   edi
c001c891:	68 8b c1 02 c0       	push   0xc002c18b
c001c896:	e8 be 66 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c89b:	59                   	pop    ecx
c001c89c:	58                   	pop    eax
c001c89d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8a1:	68 9d c1 02 c0       	push   0xc002c19d
c001c8a6:	e8 ae 66 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8b4:	0f 86 24 01 00 00    	jbe    c001c9de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8ba:	c1 e7 0c             	shl    edi,0xc
c001c8bd:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8c0:	89 df                	mov    edi,ebx
c001c8c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8c6:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8cd:	01 dd                	add    ebp,ebx
c001c8cf:	29 fd                	sub    ebp,edi
c001c8d1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8d5:	0f 84 01 01 00 00    	je     c001c9dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8db:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8e1:	76 05                	jbe    c001c8e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8e3:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	31 d2                	xor    edx,edx
c001c8ed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8fa:	50                   	push   eax
c001c8fb:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8ff:	50                   	push   eax
c001c900:	52                   	push   edx
c001c901:	55                   	push   ebp
c001c902:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c909:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c90c:	83 c4 20             	add    esp,0x20
c001c90f:	85 c0                	test   eax,eax
c001c911:	74 0a                	je     c001c91d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c913:	53                   	push   ebx
c001c914:	53                   	push   ebx
c001c915:	50                   	push   eax
c001c916:	68 af c1 02 c0       	push   0xc002c1af
c001c91b:	eb 0f                	jmp    c001c92c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c91d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c921:	74 20                	je     c001c943 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c923:	51                   	push   ecx
c001c924:	51                   	push   ecx
c001c925:	6a 00                	push   0x0
c001c927:	68 da c1 02 c0       	push   0xc002c1da
c001c92c:	e8 28 66 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001c931:	89 34 24             	mov    DWORD PTR [esp],esi
c001c934:	e8 c2 56 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001c939:	83 c4 10             	add    esp,0x10
c001c93c:	31 c0                	xor    eax,eax
c001c93e:	e9 55 01 00 00       	jmp    c001ca98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c943:	e8 d8 14 00 00       	call   c001de20 <lockScheduler()>
c001c948:	e8 95 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c94d:	6a 07                	push   0x7
c001c94f:	89 c5                	mov    ebp,eax
c001c951:	56                   	push   esi
c001c952:	50                   	push   eax
c001c953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c958:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c961:	e8 fc 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c966:	83 c4 0c             	add    esp,0xc
c001c969:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c970:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c976:	6a 00                	push   0x0
c001c978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c97d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c980:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c986:	e8 41 58 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c98b:	58                   	pop    eax
c001c98c:	5a                   	pop    edx
c001c98d:	68 07 0c 00 00       	push   0xc07
c001c992:	57                   	push   edi
c001c993:	81 c7 00 10 00 00    	add    edi,0x1000
c001c999:	55                   	push   ebp
c001c99a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a7:	6a 00                	push   0x0
c001c9a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b7:	e8 60 5d ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9bc:	83 c4 1c             	add    esp,0x1c
c001c9bf:	68 00 10 00 00       	push   0x1000
c001c9c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9c8:	50                   	push   eax
c001c9c9:	56                   	push   esi
c001c9ca:	e8 75 3d fe ff       	call   c0000744 <memcpy>
c001c9cf:	e8 4e 14 00 00       	call   c001de22 <unlockScheduler()>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	e9 ea fe ff ff       	jmp    c001c8c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9dc:	89 fb                	mov    ebx,edi
c001c9de:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9e6:	0f 86 9e 00 00 00    	jbe    c001ca8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9ec:	e8 2f 14 00 00       	call   c001de20 <lockScheduler()>
c001c9f1:	51                   	push   ecx
c001c9f2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ff:	6a 00                	push   0x0
c001ca01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca09:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0f:	e8 b8 57 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001ca14:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca18:	c1 e7 0c             	shl    edi,0xc
c001ca1b:	01 df                	add    edi,ebx
c001ca1d:	83 c4 10             	add    esp,0x10
c001ca20:	39 fb                	cmp    ebx,edi
c001ca22:	74 61                	je     c001ca85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca24:	e8 b9 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca29:	6a 07                	push   0x7
c001ca2b:	89 c5                	mov    ebp,eax
c001ca2d:	56                   	push   esi
c001ca2e:	50                   	push   eax
c001ca2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca37:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca3d:	e8 20 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca42:	58                   	pop    eax
c001ca43:	5a                   	pop    edx
c001ca44:	68 07 0c 00 00       	push   0xc07
c001ca49:	53                   	push   ebx
c001ca4a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca50:	55                   	push   ebp
c001ca51:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca58:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca5e:	6a 00                	push   0x0
c001ca60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca68:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca6e:	e8 a9 5c ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca73:	83 c4 1c             	add    esp,0x1c
c001ca76:	68 00 10 00 00       	push   0x1000
c001ca7b:	6a 00                	push   0x0
c001ca7d:	56                   	push   esi
c001ca7e:	e8 f5 3c fe ff       	call   c0000778 <memset>
c001ca83:	eb 98                	jmp    c001ca1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca85:	e8 98 13 00 00       	call   c001de22 <unlockScheduler()>
c001ca8a:	83 ec 0c             	sub    esp,0xc
c001ca8d:	56                   	push   esi
c001ca8e:	e8 68 55 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	b0 01                	mov    al,0x1
c001ca98:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca9e:	5b                   	pop    ebx
c001ca9f:	5e                   	pop    esi
c001caa0:	5f                   	pop    edi
c001caa1:	5d                   	pop    ebp
c001caa2:	c3                   	ret    

c001caa3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caa3:	55                   	push   ebp
c001caa4:	57                   	push   edi
c001caa5:	56                   	push   esi
c001caa6:	53                   	push   ebx
c001caa7:	83 ec 48             	sub    esp,0x48
c001caaa:	68 14 01 00 00       	push   0x114
c001caaf:	e8 8c 2d ff ff       	call   c000f840 <malloc>
c001cab4:	83 c4 0c             	add    esp,0xc
c001cab7:	89 c6                	mov    esi,eax
c001cab9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cabd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cac1:	50                   	push   eax
c001cac2:	e8 eb 69 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001cac7:	58                   	pop    eax
c001cac8:	5a                   	pop    edx
c001cac9:	6a 01                	push   0x1
c001cacb:	56                   	push   esi
c001cacc:	e8 45 6a ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001cad1:	83 c4 10             	add    esp,0x10
c001cad4:	85 c0                	test   eax,eax
c001cad6:	0f 85 47 01 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cadc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	6a 34                	push   0x34
c001cae9:	e8 52 2d ff ff       	call   c000f840 <malloc>
c001caee:	89 c3                	mov    ebx,eax
c001caf0:	58                   	pop    eax
c001caf1:	8b 06                	mov    eax,DWORD PTR [esi]
c001caf3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caf7:	57                   	push   edi
c001caf8:	53                   	push   ebx
c001caf9:	6a 00                	push   0x0
c001cafb:	6a 34                	push   0x34
c001cafd:	56                   	push   esi
c001cafe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb01:	83 c4 20             	add    esp,0x20
c001cb04:	85 c0                	test   eax,eax
c001cb06:	0f 85 17 01 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb12:	0f 85 0b 01 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb1b:	85 c0                	test   eax,eax
c001cb1d:	0f 84 00 01 00 00    	je     c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb23:	31 d2                	xor    edx,edx
c001cb25:	55                   	push   ebp
c001cb26:	52                   	push   edx
c001cb27:	50                   	push   eax
c001cb28:	56                   	push   esi
c001cb29:	e8 a6 6a ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	85 c0                	test   eax,eax
c001cb33:	0f 85 ea 00 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb39:	83 ec 0c             	sub    esp,0xc
c001cb3c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb3f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb43:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb47:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb4b:	0f af c2             	imul   eax,edx
c001cb4e:	50                   	push   eax
c001cb4f:	e8 ec 2c ff ff       	call   c000f840 <malloc>
c001cb54:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb61:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb65:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb69:	0f af c2             	imul   eax,edx
c001cb6c:	99                   	cdq    
c001cb6d:	52                   	push   edx
c001cb6e:	50                   	push   eax
c001cb6f:	56                   	push   esi
c001cb70:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb73:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb76:	83 c4 20             	add    esp,0x20
c001cb79:	85 c0                	test   eax,eax
c001cb7b:	0f 84 a2 00 00 00    	je     c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb81:	31 d2                	xor    edx,edx
c001cb83:	51                   	push   ecx
c001cb84:	52                   	push   edx
c001cb85:	50                   	push   eax
c001cb86:	56                   	push   esi
c001cb87:	e8 48 6a ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	85 c0                	test   eax,eax
c001cb91:	0f 85 8c 00 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb97:	83 ec 0c             	sub    esp,0xc
c001cb9a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb9e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cba2:	31 ed                	xor    ebp,ebp
c001cba4:	0f af c2             	imul   eax,edx
c001cba7:	50                   	push   eax
c001cba8:	e8 93 2c ff ff       	call   c000f840 <malloc>
c001cbad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbb3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbba:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbbe:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbc2:	0f af c2             	imul   eax,edx
c001cbc5:	99                   	cdq    
c001cbc6:	52                   	push   edx
c001cbc7:	50                   	push   eax
c001cbc8:	56                   	push   esi
c001cbc9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbcc:	83 c4 20             	add    esp,0x20
c001cbcf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbd7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbdb:	0f 86 80 00 00 00    	jbe    c001cc61 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbe1:	0f b7 fd             	movzx  edi,bp
c001cbe4:	c1 e7 05             	shl    edi,0x5
c001cbe7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbeb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbee:	75 6b                	jne    c001cc5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbf0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbf7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbfe:	52                   	push   edx
c001cbff:	31 d2                	xor    edx,edx
c001cc01:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc04:	52                   	push   edx
c001cc05:	50                   	push   eax
c001cc06:	56                   	push   esi
c001cc07:	e8 c8 69 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	85 c0                	test   eax,eax
c001cc11:	74 17                	je     c001cc2a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc13:	83 ec 0c             	sub    esp,0xc
c001cc16:	68 06 c2 02 c0       	push   0xc002c206
c001cc1b:	e8 39 63 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001cc20:	83 c4 10             	add    esp,0x10
c001cc23:	31 c0                	xor    eax,eax
c001cc25:	e9 87 00 00 00       	jmp    c001ccb1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc30:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc33:	50                   	push   eax
c001cc34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc3c:	56                   	push   esi
c001cc3d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc41:	e8 cb fb ff ff       	call   c001c811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc4a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc4e:	83 c4 20             	add    esp,0x20
c001cc51:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc55:	73 04                	jae    c001cc5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc5b:	45                   	inc    ebp
c001cc5c:	e9 76 ff ff ff       	jmp    c001cbd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc61:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc6d:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc81:	05 00 10 00 00       	add    eax,0x1000
c001cc86:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8d:	e8 be 2b ff ff       	call   c000f850 <free>
c001cc92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc95:	e8 b6 2b ff ff       	call   c000f850 <free>
c001cc9a:	58                   	pop    eax
c001cc9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc9f:	e8 ac 2b ff ff       	call   c000f850 <free>
c001cca4:	89 34 24             	mov    DWORD PTR [esp],esi
c001cca7:	e8 c8 68 ff ff       	call   c0013574 <File::close()>
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	b0 01                	mov    al,0x1
c001ccb1:	83 c4 3c             	add    esp,0x3c
c001ccb4:	5b                   	pop    ebx
c001ccb5:	5e                   	pop    esi
c001ccb6:	5f                   	pop    edi
c001ccb7:	5d                   	pop    ebp
c001ccb8:	c3                   	ret    

c001ccb9 <Thr::runtimeReferenceHelper()>:
c001ccb9:	83 ec 18             	sub    esp,0x18
c001ccbc:	68 0e c2 02 c0       	push   0xc002c20e
c001ccc1:	e8 93 62 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ccc6:	fa                   	cli    
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	eb fe                	jmp    c001ccca <Thr::runtimeReferenceHelper()+0x11>

c001cccc <Thr::getAddressOfKernelSymbol(char const*)>:
c001cccc:	57                   	push   edi
c001cccd:	56                   	push   esi
c001ccce:	53                   	push   ebx
c001cccf:	31 db                	xor    ebx,ebx
c001ccd1:	39 1d 20 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b20,ebx
c001ccd7:	7e 3c                	jle    c001cd15 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccd9:	8b 34 9d a0 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce560]
c001cce0:	31 ff                	xor    edi,edi
c001cce2:	39 3c 9d a0 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce660],edi
c001cce9:	7e 27                	jle    c001cd12 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cceb:	50                   	push   eax
c001ccec:	50                   	push   eax
c001cced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf1:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccf3:	03 04 9d 20 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce5e0]
c001ccfa:	50                   	push   eax
c001ccfb:	e8 c0 3b fe ff       	call   c00008c0 <strcmp>
c001cd00:	83 c4 10             	add    esp,0x10
c001cd03:	85 c0                	test   eax,eax
c001cd05:	75 05                	jne    c001cd0c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd07:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd0a:	eb 0b                	jmp    c001cd17 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd0c:	83 c6 10             	add    esi,0x10
c001cd0f:	47                   	inc    edi
c001cd10:	eb d0                	jmp    c001cce2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd12:	43                   	inc    ebx
c001cd13:	eb bc                	jmp    c001ccd1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd15:	31 c0                	xor    eax,eax
c001cd17:	5b                   	pop    ebx
c001cd18:	5e                   	pop    esi
c001cd19:	5f                   	pop    edi
c001cd1a:	c3                   	ret    

c001cd1b <Thr::loadKernelSymbolTable(char const*)>:
c001cd1b:	55                   	push   ebp
c001cd1c:	57                   	push   edi
c001cd1d:	56                   	push   esi
c001cd1e:	53                   	push   ebx
c001cd1f:	83 ec 68             	sub    esp,0x68
c001cd22:	8b 35 74 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b74
c001cd28:	68 14 01 00 00       	push   0x114
c001cd2d:	e8 0e 2b ff ff       	call   c000f840 <malloc>
c001cd32:	83 c4 0c             	add    esp,0xc
c001cd35:	89 c3                	mov    ebx,eax
c001cd37:	56                   	push   esi
c001cd38:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd3c:	50                   	push   eax
c001cd3d:	e8 70 67 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001cd42:	5e                   	pop    esi
c001cd43:	5f                   	pop    edi
c001cd44:	6a 01                	push   0x1
c001cd46:	53                   	push   ebx
c001cd47:	e8 ca 67 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	85 c0                	test   eax,eax
c001cd51:	74 0a                	je     c001cd5d <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd53:	83 ec 0c             	sub    esp,0xc
c001cd56:	68 30 c2 02 c0       	push   0xc002c230
c001cd5b:	eb 34                	jmp    c001cd91 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd5d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd65:	83 ec 0c             	sub    esp,0xc
c001cd68:	6a 34                	push   0x34
c001cd6a:	e8 d1 2a ff ff       	call   c000f840 <malloc>
c001cd6f:	59                   	pop    ecx
c001cd70:	89 c7                	mov    edi,eax
c001cd72:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd76:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd78:	56                   	push   esi
c001cd79:	57                   	push   edi
c001cd7a:	6a 00                	push   0x0
c001cd7c:	6a 34                	push   0x34
c001cd7e:	53                   	push   ebx
c001cd7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd82:	83 c4 20             	add    esp,0x20
c001cd85:	85 c0                	test   eax,eax
c001cd87:	74 17                	je     c001cda0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd89:	83 ec 0c             	sub    esp,0xc
c001cd8c:	68 47 c2 02 c0       	push   0xc002c247
c001cd91:	e8 65 d8 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	31 c0                	xor    eax,eax
c001cd9b:	e9 31 02 00 00       	jmp    c001cfd1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cda0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cda6:	75 e1                	jne    c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cda8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdab:	85 c0                	test   eax,eax
c001cdad:	74 da                	je     c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdaf:	52                   	push   edx
c001cdb0:	31 d2                	xor    edx,edx
c001cdb2:	52                   	push   edx
c001cdb3:	50                   	push   eax
c001cdb4:	53                   	push   ebx
c001cdb5:	e8 1a 68 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	85 c0                	test   eax,eax
c001cdbf:	75 c8                	jne    c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdc1:	83 ec 0c             	sub    esp,0xc
c001cdc4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdc8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdcc:	31 ed                	xor    ebp,ebp
c001cdce:	0f af c2             	imul   eax,edx
c001cdd1:	50                   	push   eax
c001cdd2:	e8 69 2a ff ff       	call   c000f840 <malloc>
c001cdd7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cddd:	89 34 24             	mov    DWORD PTR [esp],esi
c001cde0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cde4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cde8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdec:	0f af c2             	imul   eax,edx
c001cdef:	99                   	cdq    
c001cdf0:	52                   	push   edx
c001cdf1:	50                   	push   eax
c001cdf2:	53                   	push   ebx
c001cdf3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdf6:	83 c4 20             	add    esp,0x20
c001cdf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce01:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce09:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce19:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce1d:	0f 86 aa 00 00 00    	jbe    c001cecd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce23:	0f b7 f5             	movzx  esi,bp
c001ce26:	6b f6 28             	imul   esi,esi,0x28
c001ce29:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce2d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce34:	50                   	push   eax
c001ce35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce39:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce3d:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce3f:	6b c0 28             	imul   eax,eax,0x28
c001ce42:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce46:	89 d0                	mov    eax,edx
c001ce48:	31 d2                	xor    edx,edx
c001ce4a:	52                   	push   edx
c001ce4b:	50                   	push   eax
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 82 67 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001ce52:	83 c4 0c             	add    esp,0xc
c001ce55:	6a 20                	push   0x20
c001ce57:	6a 00                	push   0x0
c001ce59:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce5d:	52                   	push   edx
c001ce5e:	e8 15 39 fe ff       	call   c0000778 <memset>
c001ce63:	58                   	pop    eax
c001ce64:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce66:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce6a:	51                   	push   ecx
c001ce6b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce6f:	52                   	push   edx
c001ce70:	6a 00                	push   0x0
c001ce72:	6a 1f                	push   0x1f
c001ce74:	53                   	push   ebx
c001ce75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce78:	83 c4 18             	add    esp,0x18
c001ce7b:	68 5e c2 02 c0       	push   0xc002c25e
c001ce80:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce84:	52                   	push   edx
c001ce85:	e8 36 3a fe ff       	call   c00008c0 <strcmp>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	85 c0                	test   eax,eax
c001ce8f:	75 0f                	jne    c001cea0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cea0:	50                   	push   eax
c001cea1:	50                   	push   eax
c001cea2:	68 66 c2 02 c0       	push   0xc002c266
c001cea7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ceab:	50                   	push   eax
c001ceac:	e8 0f 3a fe ff       	call   c00008c0 <strcmp>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	85 c0                	test   eax,eax
c001ceb6:	75 0f                	jne    c001cec7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceb8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cec7:	45                   	inc    ebp
c001cec8:	e9 4c ff ff ff       	jmp    c001ce19 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cecd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ced2:	75 10                	jne    c001cee4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ced4:	83 ec 0c             	sub    esp,0xc
c001ced7:	68 6e c2 02 c0       	push   0xc002c26e
c001cedc:	e8 1a d7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001cee1:	83 c4 10             	add    esp,0x10
c001cee4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cee9:	75 10                	jne    c001cefb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ceeb:	83 ec 0c             	sub    esp,0xc
c001ceee:	68 6e c2 02 c0       	push   0xc002c26e
c001cef3:	e8 03 d7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001cef8:	83 c4 10             	add    esp,0x10
c001cefb:	31 d2                	xor    edx,edx
c001cefd:	50                   	push   eax
c001cefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf02:	52                   	push   edx
c001cf03:	50                   	push   eax
c001cf04:	53                   	push   ebx
c001cf05:	e8 ca 66 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cf0a:	5a                   	pop    edx
c001cf0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf0f:	e8 2c 29 ff ff       	call   c000f840 <malloc>
c001cf14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf1c:	31 c9                	xor    ecx,ecx
c001cf1e:	5e                   	pop    esi
c001cf1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf21:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf25:	55                   	push   ebp
c001cf26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf2a:	51                   	push   ecx
c001cf2b:	52                   	push   edx
c001cf2c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf30:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf34:	53                   	push   ebx
c001cf35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf38:	83 c4 14             	add    esp,0x14
c001cf3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf3f:	e8 fc 28 ff ff       	call   c000f840 <malloc>
c001cf44:	89 c6                	mov    esi,eax
c001cf46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4b:	56                   	push   esi
c001cf4c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf54:	51                   	push   ecx
c001cf55:	52                   	push   edx
c001cf56:	53                   	push   ebx
c001cf57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf5e:	8b 15 20 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b20
c001cf64:	83 c4 1c             	add    esp,0x1c
c001cf67:	c1 e8 04             	shr    eax,0x4
c001cf6a:	89 04 95 a0 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce660],eax
c001cf71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf75:	31 d2                	xor    edx,edx
c001cf77:	52                   	push   edx
c001cf78:	50                   	push   eax
c001cf79:	53                   	push   ebx
c001cf7a:	e8 55 66 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cf7f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf81:	31 d2                	xor    edx,edx
c001cf83:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf86:	56                   	push   esi
c001cf87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf8b:	52                   	push   edx
c001cf8c:	50                   	push   eax
c001cf8d:	53                   	push   ebx
c001cf8e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf91:	83 c4 14             	add    esp,0x14
c001cf94:	53                   	push   ebx
c001cf95:	e8 da 65 ff ff       	call   c0013574 <File::close()>
c001cf9a:	5d                   	pop    ebp
c001cf9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf9f:	e8 ac 28 ff ff       	call   c000f850 <free>
c001cfa4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfa7:	e8 a4 28 ff ff       	call   c000f850 <free>
c001cfac:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c001cfb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfb5:	8d 50 01             	lea    edx,[eax+0x1]
c001cfb8:	89 0c 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],ecx
c001cfbf:	89 34 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],esi
c001cfc6:	89 15 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,edx
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	b0 01                	mov    al,0x1
c001cfd1:	83 c4 5c             	add    esp,0x5c
c001cfd4:	5b                   	pop    ebx
c001cfd5:	5e                   	pop    esi
c001cfd6:	5f                   	pop    edi
c001cfd7:	5d                   	pop    ebp
c001cfd8:	c3                   	ret    

c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfd9:	55                   	push   ebp
c001cfda:	57                   	push   edi
c001cfdb:	56                   	push   esi
c001cfdc:	53                   	push   ebx
c001cfdd:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfe3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfea:	8b 1d 74 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b74
c001cff0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cff4:	68 14 01 00 00       	push   0x114
c001cff9:	e8 42 28 ff ff       	call   c000f840 <malloc>
c001cffe:	83 c4 0c             	add    esp,0xc
c001d001:	89 c5                	mov    ebp,eax
c001d003:	53                   	push   ebx
c001d004:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d00b:	50                   	push   eax
c001d00c:	e8 a1 64 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001d011:	5e                   	pop    esi
c001d012:	5f                   	pop    edi
c001d013:	6a 01                	push   0x1
c001d015:	55                   	push   ebp
c001d016:	e8 fb 64 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001d01b:	83 c4 10             	add    esp,0x10
c001d01e:	85 c0                	test   eax,eax
c001d020:	0f 85 8d 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d026:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d02e:	83 ec 0c             	sub    esp,0xc
c001d031:	6a 34                	push   0x34
c001d033:	e8 08 28 ff ff       	call   c000f840 <malloc>
c001d038:	5b                   	pop    ebx
c001d039:	89 c7                	mov    edi,eax
c001d03b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d03f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d042:	53                   	push   ebx
c001d043:	57                   	push   edi
c001d044:	6a 00                	push   0x0
c001d046:	6a 34                	push   0x34
c001d048:	55                   	push   ebp
c001d049:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d04c:	83 c4 20             	add    esp,0x20
c001d04f:	85 c0                	test   eax,eax
c001d051:	0f 85 5c 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d057:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d05d:	0f 85 50 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d063:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d066:	85 c0                	test   eax,eax
c001d068:	0f 84 45 06 00 00    	je     c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d06e:	31 d2                	xor    edx,edx
c001d070:	51                   	push   ecx
c001d071:	52                   	push   edx
c001d072:	50                   	push   eax
c001d073:	55                   	push   ebp
c001d074:	e8 5b 65 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	85 c0                	test   eax,eax
c001d07e:	0f 85 2f 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d08a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d08e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d092:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d096:	0f af c2             	imul   eax,edx
c001d099:	50                   	push   eax
c001d09a:	e8 a1 27 ff ff       	call   c000f840 <malloc>
c001d09f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0b5:	0f af c2             	imul   eax,edx
c001d0b8:	99                   	cdq    
c001d0b9:	52                   	push   edx
c001d0ba:	50                   	push   eax
c001d0bb:	55                   	push   ebp
c001d0bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0bf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0c2:	83 c4 20             	add    esp,0x20
c001d0c5:	85 c0                	test   eax,eax
c001d0c7:	0f 84 e6 05 00 00    	je     c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cd:	52                   	push   edx
c001d0ce:	31 d2                	xor    edx,edx
c001d0d0:	52                   	push   edx
c001d0d1:	50                   	push   eax
c001d0d2:	55                   	push   ebp
c001d0d3:	e8 fc 64 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	85 c0                	test   eax,eax
c001d0dd:	0f 85 d0 05 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e3:	83 ec 0c             	sub    esp,0xc
c001d0e6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ea:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0ee:	31 f6                	xor    esi,esi
c001d0f0:	0f af c2             	imul   eax,edx
c001d0f3:	50                   	push   eax
c001d0f4:	e8 47 27 ff ff       	call   c000f840 <malloc>
c001d0f9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d103:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d107:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d10b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d10f:	0f af c2             	imul   eax,edx
c001d112:	99                   	cdq    
c001d113:	52                   	push   edx
c001d114:	50                   	push   eax
c001d115:	55                   	push   ebp
c001d116:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d119:	83 c4 20             	add    esp,0x20
c001d11c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d120:	0f 86 8a 00 00 00    	jbe    c001d1b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d126:	0f b7 de             	movzx  ebx,si
c001d129:	c1 e3 05             	shl    ebx,0x5
c001d12c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d130:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d133:	75 75                	jne    c001d1aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d135:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d138:	31 d2                	xor    edx,edx
c001d13a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d13e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d141:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d145:	50                   	push   eax
c001d146:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d149:	52                   	push   edx
c001d14a:	50                   	push   eax
c001d14b:	55                   	push   ebp
c001d14c:	e8 83 64 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d151:	83 c4 10             	add    esp,0x10
c001d154:	85 c0                	test   eax,eax
c001d156:	0f 85 57 05 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d15c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d163:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d166:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d16a:	31 d2                	xor    edx,edx
c001d16c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d177:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d17e:	50                   	push   eax
c001d17f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d187:	52                   	push   edx
c001d188:	50                   	push   eax
c001d189:	55                   	push   ebp
c001d18a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d18d:	83 c4 1c             	add    esp,0x1c
c001d190:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d193:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d196:	50                   	push   eax
c001d197:	6a 00                	push   0x0
c001d199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1a1:	50                   	push   eax
c001d1a2:	e8 d1 35 fe ff       	call   c0000778 <memset>
c001d1a7:	83 c4 10             	add    esp,0x10
c001d1aa:	46                   	inc    esi
c001d1ab:	e9 6c ff ff ff       	jmp    c001d11c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1b0:	53                   	push   ebx
c001d1b1:	31 db                	xor    ebx,ebx
c001d1b3:	68 00 01 00 00       	push   0x100
c001d1b8:	6a 00                	push   0x0
c001d1ba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1be:	50                   	push   eax
c001d1bf:	e8 b4 35 fe ff       	call   c0000778 <memset>
c001d1c4:	83 c4 0c             	add    esp,0xc
c001d1c7:	68 00 01 00 00       	push   0x100
c001d1cc:	6a 00                	push   0x0
c001d1ce:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1d5:	50                   	push   eax
c001d1d6:	e8 9d 35 fe ff       	call   c0000778 <memset>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1e6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1ee:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d206:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d20a:	0f 86 30 01 00 00    	jbe    c001d340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d210:	0f b7 f3             	movzx  esi,bx
c001d213:	6b f6 28             	imul   esi,esi,0x28
c001d216:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d21a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d21d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d221:	52                   	push   edx
c001d222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d226:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d22a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d22c:	6b d2 28             	imul   edx,edx,0x28
c001d22f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d233:	31 d2                	xor    edx,edx
c001d235:	52                   	push   edx
c001d236:	50                   	push   eax
c001d237:	55                   	push   ebp
c001d238:	e8 97 63 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d23d:	83 c4 0c             	add    esp,0xc
c001d240:	6a 20                	push   0x20
c001d242:	6a 00                	push   0x0
c001d244:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d24b:	51                   	push   ecx
c001d24c:	e8 27 35 fe ff       	call   c0000778 <memset>
c001d251:	59                   	pop    ecx
c001d252:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d255:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d259:	52                   	push   edx
c001d25a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d261:	51                   	push   ecx
c001d262:	6a 00                	push   0x0
c001d264:	6a 1f                	push   0x1f
c001d266:	55                   	push   ebp
c001d267:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d26a:	83 c4 1c             	add    esp,0x1c
c001d26d:	6a 09                	push   0x9
c001d26f:	68 88 c2 02 c0       	push   0xc002c288
c001d274:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d27b:	51                   	push   ecx
c001d27c:	e8 bf 33 fe ff       	call   c0000640 <memcmp>
c001d281:	83 c4 10             	add    esp,0x10
c001d284:	85 c0                	test   eax,eax
c001d286:	75 21                	jne    c001d2a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d290:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d294:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d298:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a2:	89 d0                	mov    eax,edx
c001d2a4:	40                   	inc    eax
c001d2a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a9:	50                   	push   eax
c001d2aa:	6a 09                	push   0x9
c001d2ac:	68 92 c2 02 c0       	push   0xc002c292
c001d2b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2b8:	50                   	push   eax
c001d2b9:	e8 82 33 fe ff       	call   c0000640 <memcmp>
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	85 c0                	test   eax,eax
c001d2c3:	75 21                	jne    c001d2e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2cd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2d8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2df:	89 d0                	mov    eax,edx
c001d2e1:	40                   	inc    eax
c001d2e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2e6:	50                   	push   eax
c001d2e7:	50                   	push   eax
c001d2e8:	68 5e c2 02 c0       	push   0xc002c25e
c001d2ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f4:	50                   	push   eax
c001d2f5:	e8 c6 35 fe ff       	call   c00008c0 <strcmp>
c001d2fa:	83 c4 10             	add    esp,0x10
c001d2fd:	85 c0                	test   eax,eax
c001d2ff:	75 0f                	jne    c001d310 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d301:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d304:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d30c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d310:	50                   	push   eax
c001d311:	50                   	push   eax
c001d312:	68 66 c2 02 c0       	push   0xc002c266
c001d317:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d31e:	50                   	push   eax
c001d31f:	e8 9c 35 fe ff       	call   c00008c0 <strcmp>
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	85 c0                	test   eax,eax
c001d329:	75 0f                	jne    c001d33a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d32b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d32e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d336:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d33a:	43                   	inc    ebx
c001d33b:	e9 c6 fe ff ff       	jmp    c001d206 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d340:	31 d2                	xor    edx,edx
c001d342:	50                   	push   eax
c001d343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d347:	52                   	push   edx
c001d348:	50                   	push   eax
c001d349:	55                   	push   ebp
c001d34a:	e8 85 62 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d34f:	58                   	pop    eax
c001d350:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d354:	e8 e7 24 ff ff       	call   c000f840 <malloc>
c001d359:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d35c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d360:	31 d2                	xor    edx,edx
c001d362:	58                   	pop    eax
c001d363:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d367:	53                   	push   ebx
c001d368:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d36c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d370:	52                   	push   edx
c001d371:	50                   	push   eax
c001d372:	55                   	push   ebp
c001d373:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d376:	83 c4 14             	add    esp,0x14
c001d379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d37d:	e8 be 24 ff ff       	call   c000f840 <malloc>
c001d382:	31 d2                	xor    edx,edx
c001d384:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d388:	83 c4 0c             	add    esp,0xc
c001d38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d38f:	52                   	push   edx
c001d390:	50                   	push   eax
c001d391:	55                   	push   ebp
c001d392:	e8 3d 62 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d397:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d39a:	31 d2                	xor    edx,edx
c001d39c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d39f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3a7:	52                   	push   edx
c001d3a8:	50                   	push   eax
c001d3a9:	55                   	push   ebp
c001d3aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3ad:	83 c4 20             	add    esp,0x20
c001d3b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3bc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3c0:	0f 84 f1 02 00 00    	je     c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3c6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3cd:	31 d2                	xor    edx,edx
c001d3cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d3:	c1 e8 03             	shr    eax,0x3
c001d3d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3da:	51                   	push   ecx
c001d3db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3df:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3e3:	52                   	push   edx
c001d3e4:	50                   	push   eax
c001d3e5:	55                   	push   ebp
c001d3e6:	e8 e9 61 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d3eb:	5b                   	pop    ebx
c001d3ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3f7:	e8 44 24 ff ff       	call   c000f840 <malloc>
c001d3fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d403:	31 d2                	xor    edx,edx
c001d405:	5e                   	pop    esi
c001d406:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d40a:	50                   	push   eax
c001d40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d40f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d413:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d41a:	52                   	push   edx
c001d41b:	50                   	push   eax
c001d41c:	55                   	push   ebp
c001d41d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d420:	83 c4 20             	add    esp,0x20
c001d423:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d42b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d42f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d433:	0f 8d 62 02 00 00    	jge    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d439:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d43d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d441:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d446:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d449:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d44d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d451:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d455:	89 d8                	mov    eax,ebx
c001d457:	c1 e8 08             	shr    eax,0x8
c001d45a:	89 c6                	mov    esi,eax
c001d45c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d460:	c1 e6 04             	shl    esi,0x4
c001d463:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d467:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d46a:	85 d2                	test   edx,edx
c001d46c:	0f 85 bf 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d479:	03 06                	add    eax,DWORD PTR [esi]
c001d47b:	50                   	push   eax
c001d47c:	e8 4b f8 ff ff       	call   c001cccc <Thr::getAddressOfKernelSymbol(char const*)>
c001d481:	83 c4 10             	add    esp,0x10
c001d484:	89 c2                	mov    edx,eax
c001d486:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d48b:	85 c0                	test   eax,eax
c001d48d:	0f 85 9e 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d493:	83 ec 0c             	sub    esp,0xc
c001d496:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d49a:	03 06                	add    eax,DWORD PTR [esi]
c001d49c:	50                   	push   eax
c001d49d:	e8 53 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4a2:	83 c4 10             	add    esp,0x10
c001d4a5:	89 c2                	mov    edx,eax
c001d4a7:	85 c0                	test   eax,eax
c001d4a9:	0f 85 82 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4b3:	50                   	push   eax
c001d4b4:	50                   	push   eax
c001d4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b9:	03 06                	add    eax,DWORD PTR [esi]
c001d4bb:	50                   	push   eax
c001d4bc:	68 9c c2 02 c0       	push   0xc002c29c
c001d4c1:	e8 93 5a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001d4c6:	58                   	pop    eax
c001d4c7:	5a                   	pop    edx
c001d4c8:	68 b6 c2 02 c0       	push   0xc002c2b6
c001d4cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d4:	50                   	push   eax
c001d4d5:	e8 5a 33 fe ff       	call   c0000834 <strcpy>
c001d4da:	59                   	pop    ecx
c001d4db:	58                   	pop    eax
c001d4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e0:	03 06                	add    eax,DWORD PTR [esi]
c001d4e2:	50                   	push   eax
c001d4e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ea:	50                   	push   eax
c001d4eb:	e8 84 34 fe ff       	call   c0000974 <strcat>
c001d4f0:	58                   	pop    eax
c001d4f1:	5a                   	pop    edx
c001d4f2:	68 4c c3 02 c0       	push   0xc002c34c
c001d4f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4fe:	50                   	push   eax
c001d4ff:	e8 70 34 fe ff       	call   c0000974 <strcat>
c001d504:	83 c4 10             	add    esp,0x10
c001d507:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d50c:	0f 84 43 01 00 00    	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51c:	50                   	push   eax
c001d51d:	e8 d9 d0 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d529:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d52d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d531:	80 fb 01             	cmp    bl,0x1
c001d534:	75 7d                	jne    c001d5b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d536:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d53d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d541:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d545:	01 ce                	add    esi,ecx
c001d547:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d54d:	0f 94 c0             	sete   al
c001d550:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d556:	0f 94 c3             	sete   bl
c001d559:	09 c3                	or     ebx,eax
c001d55b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d55d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d562:	74 36                	je     c001d59a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d564:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d567:	84 db                	test   bl,bl
c001d569:	75 0a                	jne    c001d575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d56b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d56f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d573:	76 37                	jbe    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d575:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d579:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d57e:	0f 84 d1 00 00 00    	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d584:	83 ec 0c             	sub    esp,0xc
c001d587:	68 cd c2 02 c0       	push   0xc002c2cd
c001d58c:	e8 6a d0 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d598:	eb 12                	jmp    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d59a:	01 c1                	add    ecx,eax
c001d59c:	84 db                	test   bl,bl
c001d59e:	75 0c                	jne    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5a8:	77 02                	ja     c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5aa:	01 d1                	add    ecx,edx
c001d5ac:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5ae:	e9 df 00 00 00       	jmp    c001d692 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5b3:	80 fb 02             	cmp    bl,0x2
c001d5b6:	75 71                	jne    c001d629 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5b8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5bf:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5c3:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5c7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5cd:	74 15                	je     c001d5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5cf:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5d5:	74 0d                	je     c001d5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5d7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5db:	83 e8 04             	sub    eax,0x4
c001d5de:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5e2:	76 1f                	jbe    c001d603 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5e4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ed:	74 66                	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5ef:	83 ec 0c             	sub    esp,0xc
c001d5f2:	68 e9 c2 02 c0       	push   0xc002c2e9
c001d5f7:	e8 ff cf ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d5fc:	83 c4 10             	add    esp,0x10
c001d5ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d603:	8b 06                	mov    eax,DWORD PTR [esi]
c001d605:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d60a:	74 13                	je     c001d61f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d60c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d610:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d617:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d61b:	01 c8                	add    eax,ecx
c001d61d:	eb 04                	jmp    c001d623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d61f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d623:	01 c2                	add    edx,eax
c001d625:	89 16                	mov    DWORD PTR [esi],edx
c001d627:	eb 69                	jmp    c001d692 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d629:	0f b6 db             	movzx  ebx,bl
c001d62c:	50                   	push   eax
c001d62d:	50                   	push   eax
c001d62e:	53                   	push   ebx
c001d62f:	68 05 c3 02 c0       	push   0xc002c305
c001d634:	e8 20 59 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d641:	74 12                	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d643:	83 ec 0c             	sub    esp,0xc
c001d646:	68 10 c3 02 c0       	push   0xc002c310
c001d64b:	e8 ab cf ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d650:	83 c4 10             	add    esp,0x10
c001d653:	eb 3d                	jmp    c001d692 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d655:	83 ec 0c             	sub    esp,0xc
c001d658:	55                   	push   ebp
c001d659:	e8 16 5f ff ff       	call   c0013574 <File::close()>
c001d65e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d661:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d664:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d667:	59                   	pop    ecx
c001d668:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d66c:	e8 df 21 ff ff       	call   c000f850 <free>
c001d671:	5b                   	pop    ebx
c001d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d676:	e8 d5 21 ff ff       	call   c000f850 <free>
c001d67b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d67e:	e8 cd 21 ff ff       	call   c000f850 <free>
c001d683:	5e                   	pop    esi
c001d684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d688:	e8 c3 21 ff ff       	call   c000f850 <free>
c001d68d:	83 c4 10             	add    esp,0x10
c001d690:	eb 21                	jmp    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d692:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d696:	e9 90 fd ff ff       	jmp    c001d42b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d69b:	83 ec 0c             	sub    esp,0xc
c001d69e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a2:	e8 a9 21 ff ff       	call   c000f850 <free>
c001d6a7:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6ab:	83 c4 10             	add    esp,0x10
c001d6ae:	e9 05 fd ff ff       	jmp    c001d3b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6b3:	31 c0                	xor    eax,eax
c001d6b5:	eb 33                	jmp    c001d6ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6b7:	83 ec 0c             	sub    esp,0xc
c001d6ba:	55                   	push   ebp
c001d6bb:	e8 b4 5e ff ff       	call   c0013574 <File::close()>
c001d6c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6c9:	58                   	pop    eax
c001d6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6ce:	e8 7d 21 ff ff       	call   c000f850 <free>
c001d6d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6d6:	e8 75 21 ff ff       	call   c000f850 <free>
c001d6db:	5a                   	pop    edx
c001d6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e0:	e8 6b 21 ff ff       	call   c000f850 <free>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	b0 01                	mov    al,0x1
c001d6ea:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6f0:	5b                   	pop    ebx
c001d6f1:	5e                   	pop    esi
c001d6f2:	5f                   	pop    edi
c001d6f3:	5d                   	pop    ebp
c001d6f4:	c3                   	ret    

c001d6f5 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6f5:	56                   	push   esi
c001d6f6:	31 d2                	xor    edx,edx
c001d6f8:	53                   	push   ebx
c001d6f9:	8b 1d 80 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031380
c001d6ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d703:	39 d3                	cmp    ebx,edx
c001d705:	7e 1b                	jle    c001d722 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d707:	8b 04 95 a0 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea60]
c001d70e:	39 c8                	cmp    eax,ecx
c001d710:	77 0d                	ja     c001d71f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d712:	8b 34 95 a0 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec60]
c001d719:	01 c6                	add    esi,eax
c001d71b:	39 ce                	cmp    esi,ecx
c001d71d:	77 05                	ja     c001d724 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d71f:	42                   	inc    edx
c001d720:	eb e1                	jmp    c001d703 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d722:	31 c0                	xor    eax,eax
c001d724:	5b                   	pop    ebx
c001d725:	5e                   	pop    esi
c001d726:	c3                   	ret    

c001d727 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d727:	53                   	push   ebx
c001d728:	31 c0                	xor    eax,eax
c001d72a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d72e:	8b 1d 80 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031380
c001d734:	39 c3                	cmp    ebx,eax
c001d736:	7e 22                	jle    c001d75a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d738:	8b 14 85 a0 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea60]
c001d73f:	39 ca                	cmp    edx,ecx
c001d741:	77 14                	ja     c001d757 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d743:	03 14 85 a0 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec60]
c001d74a:	39 ca                	cmp    edx,ecx
c001d74c:	76 09                	jbe    c001d757 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d74e:	8b 04 85 a0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce860]
c001d755:	eb 05                	jmp    c001d75c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d757:	40                   	inc    eax
c001d758:	eb da                	jmp    c001d734 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d75a:	31 c0                	xor    eax,eax
c001d75c:	5b                   	pop    ebx
c001d75d:	c3                   	ret    

c001d75e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d75e:	53                   	push   ebx
c001d75f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d763:	53                   	push   ebx
c001d764:	e8 8c ff ff ff       	call   c001d6f5 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d769:	5a                   	pop    edx
c001d76a:	31 d2                	xor    edx,edx
c001d76c:	85 c0                	test   eax,eax
c001d76e:	74 04                	je     c001d774 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d770:	89 da                	mov    edx,ebx
c001d772:	29 c2                	sub    edx,eax
c001d774:	89 d0                	mov    eax,edx
c001d776:	5b                   	pop    ebx
c001d777:	c3                   	ret    

c001d778 <Thr::loadDLL(char const*, bool)>:
c001d778:	55                   	push   ebp
c001d779:	57                   	push   edi
c001d77a:	56                   	push   esi
c001d77b:	53                   	push   ebx
c001d77c:	81 ec 34 01 00 00    	sub    esp,0x134
c001d782:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d789:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d790:	56                   	push   esi
c001d791:	68 28 c3 02 c0       	push   0xc002c328
c001d796:	e8 be 57 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001d79b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7a2:	e8 99 20 ff ff       	call   c000f840 <malloc>
c001d7a7:	83 c4 0c             	add    esp,0xc
c001d7aa:	89 c3                	mov    ebx,eax
c001d7ac:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001d7b2:	56                   	push   esi
c001d7b3:	50                   	push   eax
c001d7b4:	e8 f9 5c ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	85 db                	test   ebx,ebx
c001d7be:	75 3c                	jne    c001d7fc <Thr::loadDLL(char const*, bool)+0x84>
c001d7c0:	89 e8                	mov    eax,ebp
c001d7c2:	84 c0                	test   al,al
c001d7c4:	0f 84 d5 01 00 00    	je     c001d99f <Thr::loadDLL(char const*, bool)+0x227>
c001d7ca:	57                   	push   edi
c001d7cb:	57                   	push   edi
c001d7cc:	68 39 c3 02 c0       	push   0xc002c339
c001d7d1:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7d5:	57                   	push   edi
c001d7d6:	e8 59 30 fe ff       	call   c0000834 <strcpy>
c001d7db:	58                   	pop    eax
c001d7dc:	5a                   	pop    edx
c001d7dd:	56                   	push   esi
c001d7de:	57                   	push   edi
c001d7df:	e8 90 31 fe ff       	call   c0000974 <strcat>
c001d7e4:	59                   	pop    ecx
c001d7e5:	58                   	pop    eax
c001d7e6:	68 4c c3 02 c0       	push   0xc002c34c
c001d7eb:	57                   	push   edi
c001d7ec:	e8 83 31 fe ff       	call   c0000974 <strcat>
c001d7f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7f4:	e8 02 ce ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d7f9:	83 c4 10             	add    esp,0x10
c001d7fc:	51                   	push   ecx
c001d7fd:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d801:	50                   	push   eax
c001d802:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d806:	50                   	push   eax
c001d807:	53                   	push   ebx
c001d808:	e8 b5 5f ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	85 db                	test   ebx,ebx
c001d812:	74 0c                	je     c001d820 <Thr::loadDLL(char const*, bool)+0xa8>
c001d814:	83 ec 0c             	sub    esp,0xc
c001d817:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d819:	53                   	push   ebx
c001d81a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d81d:	83 c4 10             	add    esp,0x10
c001d820:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d825:	75 0a                	jne    c001d831 <Thr::loadDLL(char const*, bool)+0xb9>
c001d827:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d82b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d82f:	75 3c                	jne    c001d86d <Thr::loadDLL(char const*, bool)+0xf5>
c001d831:	89 e8                	mov    eax,ebp
c001d833:	84 c0                	test   al,al
c001d835:	0f 84 4c 01 00 00    	je     c001d987 <Thr::loadDLL(char const*, bool)+0x20f>
c001d83b:	51                   	push   ecx
c001d83c:	51                   	push   ecx
c001d83d:	68 39 c3 02 c0       	push   0xc002c339
c001d842:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d846:	53                   	push   ebx
c001d847:	e8 e8 2f fe ff       	call   c0000834 <strcpy>
c001d84c:	5f                   	pop    edi
c001d84d:	58                   	pop    eax
c001d84e:	56                   	push   esi
c001d84f:	53                   	push   ebx
c001d850:	e8 1f 31 fe ff       	call   c0000974 <strcat>
c001d855:	58                   	pop    eax
c001d856:	5a                   	pop    edx
c001d857:	68 4c c3 02 c0       	push   0xc002c34c
c001d85c:	53                   	push   ebx
c001d85d:	e8 12 31 fe ff       	call   c0000974 <strcat>
c001d862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d865:	e8 91 cd ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	e8 b4 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d872:	51                   	push   ecx
c001d873:	6a 03                	push   0x3
c001d875:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d879:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d87d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d883:	83 d3 00             	adc    ebx,0x0
c001d886:	89 ca                	mov    edx,ecx
c001d888:	89 d1                	mov    ecx,edx
c001d88a:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d88e:	51                   	push   ecx
c001d88f:	50                   	push   eax
c001d890:	e8 cd 4b ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001d895:	5f                   	pop    edi
c001d896:	89 c3                	mov    ebx,eax
c001d898:	58                   	pop    eax
c001d899:	53                   	push   ebx
c001d89a:	68 4e c3 02 c0       	push   0xc002c34e
c001d89f:	e8 b5 56 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001d8a4:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8a7:	e8 e8 2e fe ff       	call   c0000794 <strlen>
c001d8ac:	8b 3d 80 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031380
c001d8b2:	40                   	inc    eax
c001d8b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8b6:	e8 85 1f ff ff       	call   c000f840 <malloc>
c001d8bb:	89 04 bd a0 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce860],eax
c001d8c2:	58                   	pop    eax
c001d8c3:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c001d8c8:	5a                   	pop    edx
c001d8c9:	56                   	push   esi
c001d8ca:	ff 34 85 a0 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce860]
c001d8d1:	e8 5e 2f fe ff       	call   c0000834 <strcpy>
c001d8d6:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c001d8db:	8d 50 01             	lea    edx,[eax+0x1]
c001d8de:	89 1c 85 a0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea60],ebx
c001d8e5:	89 15 80 13 03 c0    	mov    DWORD PTR ds:0xc0031380,edx
c001d8eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8ef:	83 c4 0c             	add    esp,0xc
c001d8f2:	89 14 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],edx
c001d8f9:	6a 01                	push   0x1
c001d8fb:	53                   	push   ebx
c001d8fc:	56                   	push   esi
c001d8fd:	e8 d7 f6 ff ff       	call   c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	89 c7                	mov    edi,eax
c001d907:	84 c0                	test   al,al
c001d909:	0f 85 8c 00 00 00    	jne    c001d99b <Thr::loadDLL(char const*, bool)+0x223>
c001d90f:	89 e8                	mov    eax,ebp
c001d911:	84 c0                	test   al,al
c001d913:	74 76                	je     c001d98b <Thr::loadDLL(char const*, bool)+0x213>
c001d915:	83 ec 0c             	sub    esp,0xc
c001d918:	68 5b c3 02 c0       	push   0xc002c35b
c001d91d:	e8 d9 cc ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d922:	83 c4 10             	add    esp,0x10
c001d925:	eb 64                	jmp    c001d98b <Thr::loadDLL(char const*, bool)+0x213>
c001d927:	e8 fa 44 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d92c:	89 f5                	mov    ebp,esi
c001d92e:	c1 e5 0c             	shl    ebp,0xc
c001d931:	52                   	push   edx
c001d932:	01 dd                	add    ebp,ebx
c001d934:	52                   	push   edx
c001d935:	55                   	push   ebp
c001d936:	50                   	push   eax
c001d937:	e8 a0 46 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d942:	75 0c                	jne    c001d950 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d944:	83 ec 0c             	sub    esp,0xc
c001d947:	55                   	push   ebp
c001d948:	e8 0b 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d94d:	83 c4 10             	add    esp,0x10
c001d950:	46                   	inc    esi
c001d951:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d955:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d959:	05 ff 0f 00 00       	add    eax,0xfff
c001d95e:	83 d2 00             	adc    edx,0x0
c001d961:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d965:	c1 ea 0c             	shr    edx,0xc
c001d968:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d96c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d970:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d974:	ba 00 00 00 00       	mov    edx,0x0
c001d979:	89 d0                	mov    eax,edx
c001d97b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d97f:	72 a6                	jb     c001d927 <Thr::loadDLL(char const*, bool)+0x1af>
c001d981:	89 f8                	mov    eax,edi
c001d983:	84 c0                	test   al,al
c001d985:	75 18                	jne    c001d99f <Thr::loadDLL(char const*, bool)+0x227>
c001d987:	31 db                	xor    ebx,ebx
c001d989:	eb 14                	jmp    c001d99f <Thr::loadDLL(char const*, bool)+0x227>
c001d98b:	83 ec 0c             	sub    esp,0xc
c001d98e:	68 7a c3 02 c0       	push   0xc002c37a
c001d993:	e8 63 cc ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d998:	83 c4 10             	add    esp,0x10
c001d99b:	31 f6                	xor    esi,esi
c001d99d:	eb b2                	jmp    c001d951 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d99f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9a5:	89 d8                	mov    eax,ebx
c001d9a7:	5b                   	pop    ebx
c001d9a8:	5e                   	pop    esi
c001d9a9:	5f                   	pop    edi
c001d9aa:	5d                   	pop    ebp
c001d9ab:	c3                   	ret    

c001d9ac <Thr::executeDLL(unsigned long, void*)>:
c001d9ac:	56                   	push   esi
c001d9ad:	53                   	push   ebx
c001d9ae:	52                   	push   edx
c001d9af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9b7:	85 db                	test   ebx,ebx
c001d9b9:	75 10                	jne    c001d9cb <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9bb:	83 ec 0c             	sub    esp,0xc
c001d9be:	68 96 c3 02 c0       	push   0xc002c396
c001d9c3:	e8 33 cc ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d9c8:	83 c4 10             	add    esp,0x10
c001d9cb:	50                   	push   eax
c001d9cc:	50                   	push   eax
c001d9cd:	53                   	push   ebx
c001d9ce:	68 c0 c3 02 c0       	push   0xc002c3c0
c001d9d3:	e8 81 55 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001d9d8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9dc:	89 d8                	mov    eax,ebx
c001d9de:	83 c4 14             	add    esp,0x14
c001d9e1:	5b                   	pop    ebx
c001d9e2:	5e                   	pop    esi
c001d9e3:	ff e0                	jmp    eax
c001d9e5:	90                   	nop

c001d9e6 <changeTSS>:
c001d9e6:	83 ec 14             	sub    esp,0x14
c001d9e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9f1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9f6:	c1 e2 15             	shl    edx,0x15
c001d9f9:	29 d0                	sub    eax,edx
c001d9fb:	50                   	push   eax
c001d9fc:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001da01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da07:	05 7c 11 00 00       	add    eax,0x117c
c001da0c:	50                   	push   eax
c001da0d:	e8 b8 3a ff ff       	call   c00114ca <TSS::setESP(unsigned long)>
c001da12:	83 c4 1c             	add    esp,0x1c
c001da15:	c3                   	ret    

c001da16 <Process::addArgs(char**)>:
c001da16:	57                   	push   edi
c001da17:	56                   	push   esi
c001da18:	53                   	push   ebx
c001da19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da21:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da2b:	85 ff                	test   edi,edi
c001da2d:	74 3d                	je     c001da6c <Process::addArgs(char**)+0x56>
c001da2f:	8b 07                	mov    eax,DWORD PTR [edi]
c001da31:	85 c0                	test   eax,eax
c001da33:	74 37                	je     c001da6c <Process::addArgs(char**)+0x56>
c001da35:	31 db                	xor    ebx,ebx
c001da37:	83 ec 0c             	sub    esp,0xc
c001da3a:	50                   	push   eax
c001da3b:	e8 54 2d fe ff       	call   c0000794 <strlen>
c001da40:	40                   	inc    eax
c001da41:	89 04 24             	mov    DWORD PTR [esp],eax
c001da44:	e8 f7 1d ff ff       	call   c000f840 <malloc>
c001da49:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da50:	5a                   	pop    edx
c001da51:	59                   	pop    ecx
c001da52:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da55:	43                   	inc    ebx
c001da56:	50                   	push   eax
c001da57:	e8 d8 2d fe ff       	call   c0000834 <strcpy>
c001da5c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da62:	83 c4 10             	add    esp,0x10
c001da65:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da68:	85 c0                	test   eax,eax
c001da6a:	75 cb                	jne    c001da37 <Process::addArgs(char**)+0x21>
c001da6c:	5b                   	pop    ebx
c001da6d:	5e                   	pop    esi
c001da6e:	5f                   	pop    edi
c001da6f:	c3                   	ret    

c001da70 <Process::Process(char const*, Process*, char**)>:
c001da70:	56                   	push   esi
c001da71:	53                   	push   ebx
c001da72:	83 ec 14             	sub    esp,0x14
c001da75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da79:	05 0c 02 00 00       	add    eax,0x20c
c001da7e:	bb 07 00 00 00       	mov    ebx,0x7
c001da83:	89 c6                	mov    esi,eax
c001da85:	85 db                	test   ebx,ebx
c001da87:	78 12                	js     c001da9b <Process::Process(char const*, Process*, char**)+0x2b>
c001da89:	83 ec 0c             	sub    esp,0xc
c001da8c:	56                   	push   esi
c001da8d:	e8 20 b2 00 00       	call   c0028cb2 <ThreadControlBlock::ThreadControlBlock()>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	83 c6 63             	add    esi,0x63
c001da98:	4b                   	dec    ebx
c001da99:	eb ea                	jmp    c001da85 <Process::Process(char const*, Process*, char**)+0x15>
c001da9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daa6:	83 ec 0c             	sub    esp,0xc
c001daa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daad:	e8 9a c9 ff ff       	call   c001a44c <Krnl::newProcessEnv(Process*)>
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	89 c2                	mov    edx,eax
c001dab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dace:	a1 90 db 02 c0       	mov    eax,ds:0xc002db90
c001dad3:	8d 50 01             	lea    edx,[eax+0x1]
c001dad6:	89 15 90 db 02 c0    	mov    DWORD PTR ds:0xc002db90,edx
c001dadc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae0:	89 02                	mov    DWORD PTR [edx],eax
c001dae2:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001daea:	83 ec 0c             	sub    esp,0xc
c001daed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daf1:	e8 4a 1d ff ff       	call   c000f840 <malloc>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	89 c3                	mov    ebx,eax
c001dafb:	83 ec 08             	sub    esp,0x8
c001dafe:	6a 00                	push   0x0
c001db00:	53                   	push   ebx
c001db01:	e8 04 4d ff ff       	call   c001280a <VAS::VAS(bool)>
c001db06:	83 c4 10             	add    esp,0x10
c001db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db29:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db39:	85 c0                	test   eax,eax
c001db3b:	74 42                	je     c001db7f <Process::Process(char const*, Process*, char**)+0x10f>
c001db3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db61:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6b:	05 0c 01 00 00       	add    eax,0x10c
c001db70:	83 ec 08             	sub    esp,0x8
c001db73:	52                   	push   edx
c001db74:	50                   	push   eax
c001db75:	e8 ba 2c fe ff       	call   c0000834 <strcpy>
c001db7a:	83 c4 10             	add    esp,0x10
c001db7d:	eb 63                	jmp    c001dbe2 <Process::Process(char const*, Process*, char**)+0x172>
c001db7f:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db87:	83 ec 0c             	sub    esp,0xc
c001db8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db8e:	e8 ad 1c ff ff       	call   c000f840 <malloc>
c001db93:	83 c4 10             	add    esp,0x10
c001db96:	89 c3                	mov    ebx,eax
c001db98:	83 ec 08             	sub    esp,0x8
c001db9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db9f:	53                   	push   ebx
c001dba0:	e8 23 36 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbbc:	83 ec 0c             	sub    esp,0xc
c001dbbf:	50                   	push   eax
c001dbc0:	e8 f6 29 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001dbc5:	83 c4 10             	add    esp,0x10
c001dbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcc:	05 0c 01 00 00       	add    eax,0x10c
c001dbd1:	83 ec 08             	sub    esp,0x8
c001dbd4:	68 df c3 02 c0       	push   0xc002c3df
c001dbd9:	50                   	push   eax
c001dbda:	e8 55 2c fe ff       	call   c0000834 <strcpy>
c001dbdf:	83 c4 10             	add    esp,0x10
c001dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe6:	83 c0 0c             	add    eax,0xc
c001dbe9:	83 ec 08             	sub    esp,0x8
c001dbec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf0:	50                   	push   eax
c001dbf1:	e8 3e 2c fe ff       	call   c0000834 <strcpy>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	83 ec 08             	sub    esp,0x8
c001dbfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc04:	e8 0d fe ff ff       	call   c001da16 <Process::addArgs(char**)>
c001dc09:	83 c4 10             	add    esp,0x10
c001dc0c:	83 ec 08             	sub    esp,0x8
c001dc0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc17:	e8 87 ee ff ff       	call   c001caa3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc27:	83 f0 01             	xor    eax,0x1
c001dc2a:	88 c2                	mov    dl,al
c001dc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc30:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc36:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc3b:	83 ec 08             	sub    esp,0x8
c001dc3e:	50                   	push   eax
c001dc3f:	68 dc c4 02 c0       	push   0xc002c4dc
c001dc44:	e8 10 53 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	90                   	nop
c001dc4d:	83 c4 14             	add    esp,0x14
c001dc50:	5b                   	pop    ebx
c001dc51:	5e                   	pop    esi
c001dc52:	c3                   	ret    
c001dc53:	90                   	nop

c001dc54 <Process::Process(bool, char const*, Process*, char**)>:
c001dc54:	56                   	push   esi
c001dc55:	53                   	push   ebx
c001dc56:	83 ec 24             	sub    esp,0x24
c001dc59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc5d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc65:	05 0c 02 00 00       	add    eax,0x20c
c001dc6a:	bb 07 00 00 00       	mov    ebx,0x7
c001dc6f:	89 c6                	mov    esi,eax
c001dc71:	85 db                	test   ebx,ebx
c001dc73:	78 12                	js     c001dc87 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	56                   	push   esi
c001dc79:	e8 34 b0 00 00       	call   c0028cb2 <ThreadControlBlock::ThreadControlBlock()>
c001dc7e:	83 c4 10             	add    esp,0x10
c001dc81:	83 c6 63             	add    esi,0x63
c001dc84:	4b                   	dec    ebx
c001dc85:	eb ea                	jmp    c001dc71 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc99:	e8 ae c7 ff ff       	call   c001a44c <Krnl::newProcessEnv(Process*)>
c001dc9e:	83 c4 10             	add    esp,0x10
c001dca1:	89 c2                	mov    edx,eax
c001dca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcba:	a1 90 db 02 c0       	mov    eax,ds:0xc002db90
c001dcbf:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc2:	89 15 90 db 02 c0    	mov    DWORD PTR ds:0xc002db90,edx
c001dcc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dccc:	89 02                	mov    DWORD PTR [edx],eax
c001dcce:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dcd6:	83 ec 0c             	sub    esp,0xc
c001dcd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcdd:	e8 5e 1b ff ff       	call   c000f840 <malloc>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	89 c3                	mov    ebx,eax
c001dce7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcec:	83 ec 08             	sub    esp,0x8
c001dcef:	50                   	push   eax
c001dcf0:	53                   	push   ebx
c001dcf1:	e8 14 4b ff ff       	call   c001280a <VAS::VAS(bool)>
c001dcf6:	83 c4 10             	add    esp,0x10
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd07:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd15:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd19:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd23:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd29:	85 c0                	test   eax,eax
c001dd2b:	74 42                	je     c001dd6f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd31:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd37:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd51:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5b:	05 0c 01 00 00       	add    eax,0x10c
c001dd60:	83 ec 08             	sub    esp,0x8
c001dd63:	52                   	push   edx
c001dd64:	50                   	push   eax
c001dd65:	e8 ca 2a fe ff       	call   c0000834 <strcpy>
c001dd6a:	83 c4 10             	add    esp,0x10
c001dd6d:	eb 63                	jmp    c001ddd2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd6f:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd77:	83 ec 0c             	sub    esp,0xc
c001dd7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd7e:	e8 bd 1a ff ff       	call   c000f840 <malloc>
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	89 c3                	mov    ebx,eax
c001dd88:	83 ec 08             	sub    esp,0x8
c001dd8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd8f:	53                   	push   ebx
c001dd90:	e8 33 34 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dd95:	83 c4 10             	add    esp,0x10
c001dd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dda2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddac:	83 ec 0c             	sub    esp,0xc
c001ddaf:	50                   	push   eax
c001ddb0:	e8 06 28 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001ddb5:	83 c4 10             	add    esp,0x10
c001ddb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbc:	05 0c 01 00 00       	add    eax,0x10c
c001ddc1:	83 ec 08             	sub    esp,0x8
c001ddc4:	68 df c3 02 c0       	push   0xc002c3df
c001ddc9:	50                   	push   eax
c001ddca:	e8 65 2a fe ff       	call   c0000834 <strcpy>
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd6:	83 c0 0c             	add    eax,0xc
c001ddd9:	83 ec 08             	sub    esp,0x8
c001dddc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dde0:	50                   	push   eax
c001dde1:	e8 4e 2a fe ff       	call   c0000834 <strcpy>
c001dde6:	83 c4 10             	add    esp,0x10
c001dde9:	83 ec 08             	sub    esp,0x8
c001ddec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddf4:	e8 1d fc ff ff       	call   c001da16 <Process::addArgs(char**)>
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	90                   	nop
c001ddfd:	83 c4 24             	add    esp,0x24
c001de00:	5b                   	pop    ebx
c001de01:	5e                   	pop    esi
c001de02:	c3                   	ret    

c001de03 <disableIRQs()>:
c001de03:	fa                   	cli    
c001de04:	ff 05 4c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b4c
c001de0a:	c3                   	ret    

c001de0b <getIRQNestingLevel()>:
c001de0b:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c001de10:	c3                   	ret    

c001de11 <enableIRQs()>:
c001de11:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c001de16:	48                   	dec    eax
c001de17:	a3 4c 1b 03 c0       	mov    ds:0xc0031b4c,eax
c001de1c:	75 01                	jne    c001de1f <enableIRQs()+0xe>
c001de1e:	fb                   	sti    
c001de1f:	c3                   	ret    

c001de20 <lockScheduler()>:
c001de20:	eb e1                	jmp    c001de03 <disableIRQs()>

c001de22 <unlockScheduler()>:
c001de22:	eb ed                	jmp    c001de11 <enableIRQs()>

c001de24 <userModeEntryPoint(void*)>:
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	e8 f6 ff ff ff       	call   c001de22 <unlockScheduler()>
c001de2c:	fb                   	sti    
c001de2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de35:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de3f:	83 c4 0c             	add    esp,0xc
c001de42:	e9 e3 24 fe ff       	jmp    c000032a <goToUsermode>

c001de47 <lockStuff()>:
c001de47:	e8 b7 ff ff ff       	call   c001de03 <disableIRQs()>
c001de4c:	ff 05 48 1b 03 c0    	inc    DWORD PTR ds:0xc0031b48
c001de52:	c3                   	ret    

c001de53 <taskStartupFunction>:
c001de53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de58:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de5b:	c3                   	ret    

c001de5c <updateTimeUsed()>:
c001de5c:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001de61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de67:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de6e:	74 50                	je     c001dec0 <updateTimeUsed()+0x64>
c001de70:	57                   	push   edi
c001de71:	56                   	push   esi
c001de72:	53                   	push   ebx
c001de73:	0f 31                	rdtsc  
c001de75:	89 c1                	mov    ecx,eax
c001de77:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c001de7c:	2b 0d 78 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b78
c001de82:	89 d3                	mov    ebx,edx
c001de84:	89 0d 80 1b 03 c0    	mov    DWORD PTR ds:0xc0031b80,ecx
c001de8a:	1b 1d 7c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b7c
c001de90:	a3 78 1b 03 c0       	mov    ds:0xc0031b78,eax
c001de95:	89 1d 84 1b 03 c0    	mov    DWORD PTR ds:0xc0031b84,ebx
c001de9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dea0:	89 15 8c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b8c,edx
c001dea6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dea9:	89 15 7c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b7c,edx
c001deaf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deb2:	01 f1                	add    ecx,esi
c001deb4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001deb7:	11 fb                	adc    ebx,edi
c001deb9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001debc:	5b                   	pop    ebx
c001debd:	5e                   	pop    esi
c001debe:	5f                   	pop    edi
c001debf:	c3                   	ret    
c001dec0:	c3                   	ret    

c001dec1 <switchToThread(ThreadControlBlock*)>:
c001dec1:	53                   	push   ebx
c001dec2:	83 ec 08             	sub    esp,0x8
c001dec5:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001deca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dece:	85 c0                	test   eax,eax
c001ded0:	75 30                	jne    c001df02 <switchToThread(ThreadControlBlock*)+0x41>
c001ded2:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ded5:	3c ff                	cmp    al,0xff
c001ded7:	74 25                	je     c001defe <switchToThread(ThreadControlBlock*)+0x3d>
c001ded9:	0f b6 d0             	movzx  edx,al
c001dedc:	b8 84 03 00 00       	mov    eax,0x384
c001dee1:	29 d0                	sub    eax,edx
c001dee3:	c1 e0 10             	shl    eax,0x10
c001dee6:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dee9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001deec:	e8 6b ff ff ff       	call   c001de5c <updateTimeUsed()>
c001def1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001def5:	83 c4 08             	add    esp,0x8
c001def8:	5b                   	pop    ebx
c001def9:	e9 64 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001defe:	31 c0                	xor    eax,eax
c001df00:	eb e7                	jmp    c001dee9 <switchToThread(ThreadControlBlock*)+0x28>
c001df02:	c7 05 44 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b44,0x1
c001df0c:	83 c4 08             	add    esp,0x8
c001df0f:	5b                   	pop    ebx
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <Semaphore::Semaphore(int)>:
c001df12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df1a:	89 10                	mov    DWORD PTR [eax],edx
c001df1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df20:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df36:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df3d:	90                   	nop
c001df3e:	c3                   	ret    
c001df3f:	90                   	nop

c001df40 <Mutex::Mutex()>:
c001df40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df44:	6a 01                	push   0x1
c001df46:	50                   	push   eax
c001df47:	e8 c6 ff ff ff       	call   c001df12 <Semaphore::Semaphore(int)>
c001df4c:	83 c4 08             	add    esp,0x8
c001df4f:	90                   	nop
c001df50:	c3                   	ret    
c001df51:	90                   	nop

c001df52 <Process::createThread(void (*)(void*), void*, int)>:
c001df52:	55                   	push   ebp
c001df53:	31 c9                	xor    ecx,ecx
c001df55:	57                   	push   edi
c001df56:	56                   	push   esi
c001df57:	53                   	push   ebx
c001df58:	83 ec 1c             	sub    esp,0x1c
c001df5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df5f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df66:	89 f2                	mov    edx,esi
c001df68:	0f b7 c2             	movzx  eax,dx
c001df6b:	83 e2 01             	and    edx,0x1
c001df6e:	74 14                	je     c001df84 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df70:	d1 f8                	sar    eax,1
c001df72:	41                   	inc    ecx
c001df73:	89 c2                	mov    edx,eax
c001df75:	83 f9 10             	cmp    ecx,0x10
c001df78:	75 ee                	jne    c001df68 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df7a:	83 c4 1c             	add    esp,0x1c
c001df7d:	31 c0                	xor    eax,eax
c001df7f:	5b                   	pop    ebx
c001df80:	5e                   	pop    esi
c001df81:	5f                   	pop    edi
c001df82:	5d                   	pop    ebp
c001df83:	c3                   	ret    
c001df84:	83 ec 08             	sub    esp,0x8
c001df87:	b8 01 00 00 00       	mov    eax,0x1
c001df8c:	d3 e0                	shl    eax,cl
c001df8e:	09 c6                	or     esi,eax
c001df90:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df96:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df9d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dfa0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfa3:	01 ce                	add    esi,ecx
c001dfa5:	89 f0                	mov    eax,esi
c001dfa7:	c1 e0 05             	shl    eax,0x5
c001dfaa:	01 c6                	add    esi,eax
c001dfac:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfaf:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfb5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfbb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfbf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfc5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfcb:	89 ca                	mov    edx,ecx
c001dfcd:	f7 da                	neg    edx
c001dfcf:	c1 e2 15             	shl    edx,0x15
c001dfd2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfd8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfde:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfe2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfec:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dff2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dff6:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dffc:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e006:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e010:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e017:	50                   	push   eax
c001e018:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e01c:	68 68 1b 03 c0       	push   0xc0031b68
c001e021:	e8 1a ab 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e026:	83 c4 10             	add    esp,0x10
c001e029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e02d:	83 c4 1c             	add    esp,0x1c
c001e030:	5b                   	pop    ebx
c001e031:	5e                   	pop    esi
c001e032:	5f                   	pop    edi
c001e033:	5d                   	pop    ebp
c001e034:	c3                   	ret    
c001e035:	90                   	nop

c001e036 <Process::createUserThread()>:
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	68 80 00 00 00       	push   0x80
c001e03e:	6a 00                	push   0x0
c001e040:	68 24 de 01 c0       	push   0xc001de24
c001e045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e049:	e8 04 ff ff ff       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c001e04e:	83 c4 1c             	add    esp,0x1c
c001e051:	c3                   	ret    

c001e052 <setupMultitasking(void (*)())>:
c001e052:	56                   	push   esi
c001e053:	53                   	push   ebx
c001e054:	53                   	push   ebx
c001e055:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e059:	eb 10                	jmp    c001e06b <setupMultitasking(void (*)())+0x19>
c001e05b:	83 ec 0c             	sub    esp,0xc
c001e05e:	68 68 1b 03 c0       	push   0xc0031b68
c001e063:	e8 2a aa 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e068:	83 c4 10             	add    esp,0x10
c001e06b:	83 ec 0c             	sub    esp,0xc
c001e06e:	68 68 1b 03 c0       	push   0xc0031b68
c001e073:	e8 fe a9 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e078:	83 c4 10             	add    esp,0x10
c001e07b:	84 c0                	test   al,al
c001e07d:	74 dc                	je     c001e05b <setupMultitasking(void (*)())+0x9>
c001e07f:	83 ec 0c             	sub    esp,0xc
c001e082:	68 3f 07 00 00       	push   0x73f
c001e087:	e8 b4 17 ff ff       	call   c000f840 <malloc>
c001e08c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e093:	89 c3                	mov    ebx,eax
c001e095:	6a 00                	push   0x0
c001e097:	68 e3 c3 02 c0       	push   0xc002c3e3
c001e09c:	6a 01                	push   0x1
c001e09e:	50                   	push   eax
c001e09f:	e8 b0 fb ff ff       	call   c001dc54 <Process::Process(bool, char const*, Process*, char**)>
c001e0a4:	83 c4 18             	add    esp,0x18
c001e0a7:	89 1d 74 1b 03 c0    	mov    DWORD PTR ds:0xc0031b74,ebx
c001e0ad:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0b3:	68 04 c5 02 c0       	push   0xc002c504
c001e0b8:	e8 9c 4e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e0bd:	58                   	pop    eax
c001e0be:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0c4:	e8 74 2c ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001e0c9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0d1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0da:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0e4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0ea:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0f0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0fa:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e104:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e10e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e114:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e11a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e124:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e12a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e134:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e13a:	5a                   	pop    edx
c001e13b:	59                   	pop    ecx
c001e13c:	68 df c3 02 c0       	push   0xc002c3df
c001e141:	50                   	push   eax
c001e142:	e8 ed 26 fe ff       	call   c0000834 <strcpy>
c001e147:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e14e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e152:	83 c4 14             	add    esp,0x14
c001e155:	5b                   	pop    ebx
c001e156:	5e                   	pop    esi
c001e157:	e9 f8 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e15c <schedule()>:
c001e15c:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001e161:	85 c0                	test   eax,eax
c001e163:	74 0b                	je     c001e170 <schedule()+0x14>
c001e165:	c7 05 44 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b44,0x1
c001e16f:	c3                   	ret    
c001e170:	53                   	push   ebx
c001e171:	83 ec 14             	sub    esp,0x14
c001e174:	68 68 1b 03 c0       	push   0xc0031b68
c001e179:	e8 f8 a8 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	84 c0                	test   al,al
c001e183:	75 38                	jne    c001e1bd <schedule()+0x61>
c001e185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e18a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e18d:	4a                   	dec    edx
c001e18e:	74 32                	je     c001e1c2 <schedule()+0x66>
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	68 68 1b 03 c0       	push   0xc0031b68
c001e198:	e8 d1 a8 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e19d:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e1a4:	89 c3                	mov    ebx,eax
c001e1a6:	e8 e7 a8 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1ab:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1b5:	e8 07 fd ff ff       	call   c001dec1 <switchToThread(ThreadControlBlock*)>
c001e1ba:	83 c4 10             	add    esp,0x10
c001e1bd:	83 c4 08             	add    esp,0x8
c001e1c0:	5b                   	pop    ebx
c001e1c1:	c3                   	ret    
c001e1c2:	83 ec 08             	sub    esp,0x8
c001e1c5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1cc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1d2:	68 68 1b 03 c0       	push   0xc0031b68
c001e1d7:	e8 64 a9 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	eb af                	jmp    c001e190 <schedule()+0x34>

c001e1e1 <unlockStuff()>:
c001e1e1:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001e1e6:	48                   	dec    eax
c001e1e7:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001e1ec:	75 09                	jne    c001e1f7 <unlockStuff()+0x16>
c001e1ee:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c001e1f3:	85 c0                	test   eax,eax
c001e1f5:	75 05                	jne    c001e1fc <unlockStuff()+0x1b>
c001e1f7:	e9 15 fc ff ff       	jmp    c001de11 <enableIRQs()>
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	c7 05 44 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b44,0x0
c001e209:	e8 4e ff ff ff       	call   c001e15c <schedule()>
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	e9 fb fb ff ff       	jmp    c001de11 <enableIRQs()>

c001e216 <Semaphore::tryAcquire()>:
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21d:	e8 25 fc ff ff       	call   c001de47 <lockStuff()>
c001e222:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e225:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e227:	7c 0b                	jl     c001e234 <Semaphore::tryAcquire()+0x1e>
c001e229:	e8 b3 ff ff ff       	call   c001e1e1 <unlockStuff()>
c001e22e:	31 c0                	xor    eax,eax
c001e230:	83 c4 0c             	add    esp,0xc
c001e233:	c3                   	ret    
c001e234:	42                   	inc    edx
c001e235:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e238:	e8 a4 ff ff ff       	call   c001e1e1 <unlockStuff()>
c001e23d:	b0 01                	mov    al,0x1
c001e23f:	83 c4 0c             	add    esp,0xc
c001e242:	c3                   	ret    
c001e243:	90                   	nop

c001e244 <Semaphore::assertLocked(char const*)>:
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e24f:	e8 f3 fb ff ff       	call   c001de47 <lockStuff()>
c001e254:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e256:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e259:	7c 05                	jl     c001e260 <Semaphore::assertLocked(char const*)+0x1c>
c001e25b:	83 c4 0c             	add    esp,0xc
c001e25e:	eb 81                	jmp    c001e1e1 <unlockStuff()>
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	52                   	push   edx
c001e264:	e8 92 c3 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001e269:	83 c4 10             	add    esp,0x10
c001e26c:	83 c4 0c             	add    esp,0xc
c001e26f:	e9 6d ff ff ff       	jmp    c001e1e1 <unlockStuff()>

c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e274:	83 ec 0c             	sub    esp,0xc
c001e277:	e8 8f fb ff ff       	call   c001de0b <getIRQNestingLevel()>
c001e27c:	83 ec 08             	sub    esp,0x8
c001e27f:	50                   	push   eax
c001e280:	68 38 c5 02 c0       	push   0xc002c538
c001e285:	e8 cf 4c ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e28a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e293:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e296:	e8 c1 fe ff ff       	call   c001e15c <schedule()>
c001e29b:	e8 82 fb ff ff       	call   c001de22 <unlockScheduler()>
c001e2a0:	e8 66 fb ff ff       	call   c001de0b <getIRQNestingLevel()>
c001e2a5:	5a                   	pop    edx
c001e2a6:	59                   	pop    ecx
c001e2a7:	50                   	push   eax
c001e2a8:	68 6c c5 02 c0       	push   0xc002c56c
c001e2ad:	e8 a7 4c ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e2b2:	83 c4 1c             	add    esp,0x1c
c001e2b5:	c3                   	ret    

c001e2b6 <blockTask(TaskState)>:
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2bd:	e8 5e fb ff ff       	call   c001de20 <lockScheduler()>
c001e2c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2ca:	e8 8d fe ff ff       	call   c001e15c <schedule()>
c001e2cf:	83 c4 0c             	add    esp,0xc
c001e2d2:	e9 4b fb ff ff       	jmp    c001de22 <unlockScheduler()>

c001e2d7 <waitTask(int, int*, int)>:
c001e2d7:	83 ec 18             	sub    esp,0x18
c001e2da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2e3:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ef:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2f2:	6a 07                	push   0x7
c001e2f4:	e8 bd ff ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e2f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e304:	85 d2                	test   edx,edx
c001e306:	74 0a                	je     c001e312 <waitTask(int, int*, int)+0x3b>
c001e308:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e30b:	89 02                	mov    DWORD PTR [edx],eax
c001e30d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e312:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e315:	83 c4 0c             	add    esp,0xc
c001e318:	c3                   	ret    

c001e319 <nanoSleepUntil(unsigned long long)>:
c001e319:	83 ec 0c             	sub    esp,0xc
c001e31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e324:	3b 05 90 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec90
c001e32a:	89 d1                	mov    ecx,edx
c001e32c:	1b 0d 94 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec94
c001e332:	73 04                	jae    c001e338 <nanoSleepUntil(unsigned long long)+0x1f>
c001e334:	83 c4 0c             	add    esp,0xc
c001e337:	c3                   	ret    
c001e338:	e8 0a fb ff ff       	call   c001de47 <lockStuff()>
c001e33d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e343:	83 ec 08             	sub    esp,0x8
c001e346:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e349:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e34c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e352:	68 5c 1b 03 c0       	push   0xc0031b5c
c001e357:	e8 e4 a7 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e35c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e363:	e8 4e ff ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e368:	83 c4 1c             	add    esp,0x1c
c001e36b:	e9 71 fe ff ff       	jmp    c001e1e1 <unlockStuff()>

c001e370 <nanoSleep(unsigned long long)>:
c001e370:	a1 90 ec 02 c0       	mov    eax,ds:0xc002ec90
c001e375:	8b 15 94 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec94
c001e37b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e37f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e383:	eb 94                	jmp    c001e319 <nanoSleepUntil(unsigned long long)>

c001e385 <sleep(unsigned long long)>:
c001e385:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e38d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e392:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e396:	01 ca                	add    edx,ecx
c001e398:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e39c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3a0:	eb ce                	jmp    c001e370 <nanoSleep(unsigned long long)>

c001e3a2 <Semaphore::acquire()>:
c001e3a2:	83 ec 0c             	sub    esp,0xc
c001e3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a9:	e8 99 fa ff ff       	call   c001de47 <lockStuff()>
c001e3ae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3b1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3b3:	7d 0c                	jge    c001e3c1 <Semaphore::acquire()+0x1f>
c001e3b5:	42                   	inc    edx
c001e3b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3b9:	83 c4 0c             	add    esp,0xc
c001e3bc:	e9 20 fe ff ff       	jmp    c001e1e1 <unlockStuff()>
c001e3c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3c7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3d1:	85 d2                	test   edx,edx
c001e3d3:	74 2a                	je     c001e3ff <Semaphore::acquire()+0x5d>
c001e3d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3de:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3ed:	6a 05                	push   0x5
c001e3ef:	e8 c2 fe ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	83 c4 0c             	add    esp,0xc
c001e3fa:	e9 e2 fd ff ff       	jmp    c001e1e1 <unlockStuff()>
c001e3ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e408:	eb d7                	jmp    c001e3e1 <Semaphore::acquire()+0x3f>

c001e40a <taskReturned>:
c001e40a:	83 ec 18             	sub    esp,0x18
c001e40d:	68 a0 c5 02 c0       	push   0xc002c5a0
c001e412:	e8 e4 c1 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001e417:	83 c4 10             	add    esp,0x10
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	6a 02                	push   0x2
c001e41f:	e8 92 fe ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e424:	e8 f7 f9 ff ff       	call   c001de20 <lockScheduler()>
c001e429:	e8 2e fd ff ff       	call   c001e15c <schedule()>
c001e42e:	e8 ef f9 ff ff       	call   c001de22 <unlockScheduler()>
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	eb e2                	jmp    c001e41a <taskReturned+0x10>

c001e438 <unblockTask(ThreadControlBlock*)>:
c001e438:	53                   	push   ebx
c001e439:	83 ec 08             	sub    esp,0x8
c001e43c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e440:	e8 db f9 ff ff       	call   c001de20 <lockScheduler()>
c001e445:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e448:	85 c0                	test   eax,eax
c001e44a:	74 5c                	je     c001e4a8 <unblockTask(ThreadControlBlock*)+0x70>
c001e44c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e44f:	48                   	dec    eax
c001e450:	74 31                	je     c001e483 <unblockTask(ThreadControlBlock*)+0x4b>
c001e452:	83 ec 0c             	sub    esp,0xc
c001e455:	68 68 1b 03 c0       	push   0xc0031b68
c001e45a:	e8 0f a6 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e45f:	83 c4 10             	add    esp,0x10
c001e462:	85 c0                	test   eax,eax
c001e464:	75 17                	jne    c001e47d <unblockTask(ThreadControlBlock*)+0x45>
c001e466:	eb 65                	jmp    c001e4cd <unblockTask(ThreadControlBlock*)+0x95>
c001e468:	83 ec 08             	sub    esp,0x8
c001e46b:	50                   	push   eax
c001e46c:	68 68 1b 03 c0       	push   0xc0031b68
c001e471:	e8 d2 a8 00 00       	call   c0028d48 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	85 c0                	test   eax,eax
c001e47b:	74 50                	je     c001e4cd <unblockTask(ThreadControlBlock*)+0x95>
c001e47d:	39 c3                	cmp    ebx,eax
c001e47f:	75 e7                	jne    c001e468 <unblockTask(ThreadControlBlock*)+0x30>
c001e481:	eb 1c                	jmp    c001e49f <unblockTask(ThreadControlBlock*)+0x67>
c001e483:	83 ec 0c             	sub    esp,0xc
c001e486:	68 90 c6 02 c0       	push   0xc002c690
c001e48b:	e8 c9 4a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e490:	c7 04 24 1c c6 02 c0 	mov    DWORD PTR [esp],0xc002c61c
c001e497:	e8 bd 4a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e49c:	83 c4 10             	add    esp,0x10
c001e49f:	83 c4 08             	add    esp,0x8
c001e4a2:	5b                   	pop    ebx
c001e4a3:	e9 7a f9 ff ff       	jmp    c001de22 <unlockScheduler()>
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	68 d4 c5 02 c0       	push   0xc002c5d4
c001e4b0:	e8 a4 4a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e4b5:	c7 04 24 1c c6 02 c0 	mov    DWORD PTR [esp],0xc002c61c
c001e4bc:	e8 98 4a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	83 c4 08             	add    esp,0x8
c001e4c7:	5b                   	pop    ebx
c001e4c8:	e9 55 f9 ff ff       	jmp    c001de22 <unlockScheduler()>
c001e4cd:	83 ec 08             	sub    esp,0x8
c001e4d0:	53                   	push   ebx
c001e4d1:	68 68 1b 03 c0       	push   0xc0031b68
c001e4d6:	e8 65 a6 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4db:	83 c4 10             	add    esp,0x10
c001e4de:	83 c4 08             	add    esp,0x8
c001e4e1:	5b                   	pop    ebx
c001e4e2:	e9 3b f9 ff ff       	jmp    c001de22 <unlockScheduler()>

c001e4e7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4e7:	55                   	push   ebp
c001e4e8:	57                   	push   edi
c001e4e9:	56                   	push   esi
c001e4ea:	53                   	push   ebx
c001e4eb:	83 ec 1c             	sub    esp,0x1c
c001e4ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4f5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4fb:	85 ff                	test   edi,edi
c001e4fd:	7e 20                	jle    c001e51f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4ff:	31 f6                	xor    esi,esi
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e50b:	46                   	inc    esi
c001e50c:	e8 3f 13 ff ff       	call   c000f850 <free>
c001e511:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e514:	83 c4 10             	add    esp,0x10
c001e517:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e51d:	7f e2                	jg     c001e501 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e51f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e529:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e52e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e531:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e534:	d3 c0                	rol    eax,cl
c001e536:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e53d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e540:	89 f7                	mov    edi,esi
c001e542:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e54a:	0f 85 74 01 00 00    	jne    c001e6c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e550:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e556:	85 ed                	test   ebp,ebp
c001e558:	74 1b                	je     c001e575 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e55a:	83 ec 0c             	sub    esp,0xc
c001e55d:	55                   	push   ebp
c001e55e:	e8 05 be ff ff       	call   c001a368 <EnvVarContainer::~EnvVarContainer()>
c001e563:	59                   	pop    ecx
c001e564:	5e                   	pop    esi
c001e565:	6a 0c                	push   0xc
c001e567:	55                   	push   ebp
c001e568:	e8 0c 49 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c001e56d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e570:	83 c4 10             	add    esp,0x10
c001e573:	89 f7                	mov    edi,esi
c001e575:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e57b:	85 c0                	test   eax,eax
c001e57d:	0f 84 aa 00 00 00    	je     c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e583:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e586:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e58a:	31 c9                	xor    ecx,ecx
c001e58c:	eb 10                	jmp    c001e59e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e58e:	41                   	inc    ecx
c001e58f:	83 f9 10             	cmp    ecx,0x10
c001e592:	0f 84 95 00 00 00    	je     c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e598:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e59e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5a5:	d3 fa                	sar    edx,cl
c001e5a7:	83 e2 01             	and    edx,0x1
c001e5aa:	74 e2                	je     c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ac:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5af:	01 ca                	add    edx,ecx
c001e5b1:	89 d5                	mov    ebp,edx
c001e5b3:	c1 e5 05             	shl    ebp,0x5
c001e5b6:	01 ea                	add    edx,ebp
c001e5b8:	01 d0                	add    eax,edx
c001e5ba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5c0:	83 fd 07             	cmp    ebp,0x7
c001e5c3:	75 c9                	jne    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c5:	05 40 02 00 00       	add    eax,0x240
c001e5ca:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5cd:	83 fd ff             	cmp    ebp,0xffffffff
c001e5d0:	0f 8c 08 01 00 00    	jl     c001e6de <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5d6:	0f 84 b9 01 00 00    	je     c001e795 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5dc:	85 ed                	test   ebp,ebp
c001e5de:	0f 84 a0 01 00 00    	je     c001e784 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5e4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5e6:	75 a6                	jne    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5e8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5f2:	01 d0                	add    eax,edx
c001e5f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e601:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e604:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e60a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e611:	50                   	push   eax
c001e612:	e8 21 fe ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001e617:	83 c4 10             	add    esp,0x10
c001e61a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e61d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e621:	89 f7                	mov    edi,esi
c001e623:	41                   	inc    ecx
c001e624:	83 f9 10             	cmp    ecx,0x10
c001e627:	0f 85 6b ff ff ff    	jne    c001e598 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e62d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e633:	85 c0                	test   eax,eax
c001e635:	74 5d                	je     c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e637:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e63d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e643:	74 4f                	je     c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e645:	83 ec 0c             	sub    esp,0xc
c001e648:	68 68 1b 03 c0       	push   0xc0031b68
c001e64d:	e8 1c a4 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e652:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e659:	89 c7                	mov    edi,eax
c001e65b:	e8 16 a4 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	84 c0                	test   al,al
c001e665:	0f 84 e4 00 00 00    	je     c001e74f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e66b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e66e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e674:	85 d2                	test   edx,edx
c001e676:	74 0f                	je     c001e687 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e67d:	52                   	push   edx
c001e67e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e681:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e684:	83 c4 10             	add    esp,0x10
c001e687:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e691:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e694:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e69a:	85 db                	test   ebx,ebx
c001e69c:	74 16                	je     c001e6b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e69e:	83 ec 0c             	sub    esp,0xc
c001e6a1:	53                   	push   ebx
c001e6a2:	e8 4f 3b ff ff       	call   c00121f6 <VAS::~VAS()>
c001e6a7:	58                   	pop    eax
c001e6a8:	5a                   	pop    edx
c001e6a9:	6a 10                	push   0x10
c001e6ab:	53                   	push   ebx
c001e6ac:	e8 c8 47 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	68 ea c3 02 c0       	push   0xc002c3ea
c001e6bc:	e8 98 48 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e6c1:	83 c4 10             	add    esp,0x10
c001e6c4:	83 ec 08             	sub    esp,0x8
c001e6c7:	68 3f 07 00 00       	push   0x73f
c001e6cc:	68 f8 c3 02 c0       	push   0xc002c3f8
c001e6d1:	e8 83 48 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e6d6:	83 c4 2c             	add    esp,0x2c
c001e6d9:	5b                   	pop    ebx
c001e6da:	5e                   	pop    esi
c001e6db:	5f                   	pop    edi
c001e6dc:	5d                   	pop    ebp
c001e6dd:	c3                   	ret    
c001e6de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	68 d4 c6 02 c0       	push   0xc002c6d4
c001e6ea:	e8 0c bf ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001e6ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	89 f7                	mov    edi,esi
c001e6f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6fb:	e9 8e fe ff ff       	jmp    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e700:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e706:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e70c:	75 1c                	jne    c001e72a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	68 3c c7 02 c0       	push   0xc002c73c
c001e716:	e8 3e 48 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e71b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e722:	e8 8f fb ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e727:	83 c4 10             	add    esp,0x10
c001e72a:	83 ec 08             	sub    esp,0x8
c001e72d:	56                   	push   esi
c001e72e:	68 68 1b 03 c0       	push   0xc0031b68
c001e733:	e8 08 a4 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e738:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e73f:	e8 2a a3 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e744:	83 c4 10             	add    esp,0x10
c001e747:	39 f8                	cmp    eax,edi
c001e749:	0f 84 1c ff ff ff    	je     c001e66b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e74f:	83 ec 0c             	sub    esp,0xc
c001e752:	68 68 1b 03 c0       	push   0xc0031b68
c001e757:	e8 12 a3 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e75c:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e763:	89 c6                	mov    esi,eax
c001e765:	e8 28 a3 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	39 f3                	cmp    ebx,esi
c001e76f:	74 b9                	je     c001e72a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e771:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e774:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e777:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e77d:	75 ab                	jne    c001e72a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e77f:	e9 7c ff ff ff       	jmp    c001e700 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e784:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e788:	83 ec 0c             	sub    esp,0xc
c001e78b:	68 08 c7 02 c0       	push   0xc002c708
c001e790:	e9 55 ff ff ff       	jmp    c001e6ea <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e795:	8b 36                	mov    esi,DWORD PTR [esi]
c001e797:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e79b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e79e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7a1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7a7:	01 d7                	add    edi,edx
c001e7a9:	89 f8                	mov    eax,edi
c001e7ab:	e9 44 fe ff ff       	jmp    c001e5f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7b0 <cleanerTaskFunction(void*)>:
c001e7b0:	53                   	push   ebx
c001e7b1:	83 ec 08             	sub    esp,0x8
c001e7b4:	e8 69 f6 ff ff       	call   c001de22 <unlockScheduler()>
c001e7b9:	e8 62 f6 ff ff       	call   c001de20 <lockScheduler()>
c001e7be:	80 3d 2c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b2c,0x0
c001e7c5:	0f 85 8e 00 00 00    	jne    c001e859 <cleanerTaskFunction(void*)+0xa9>
c001e7cb:	83 ec 0c             	sub    esp,0xc
c001e7ce:	6a 02                	push   0x2
c001e7d0:	e8 9f fa ff ff       	call   c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7d5:	83 c4 10             	add    esp,0x10
c001e7d8:	c6 05 2c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b2c,0x0
c001e7df:	e8 63 f6 ff ff       	call   c001de47 <lockStuff()>
c001e7e4:	e8 37 f6 ff ff       	call   c001de20 <lockScheduler()>
c001e7e9:	83 ec 0c             	sub    esp,0xc
c001e7ec:	68 50 1b 03 c0       	push   0xc0031b50
c001e7f1:	e8 80 a2 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	84 c0                	test   al,al
c001e7fb:	75 40                	jne    c001e83d <cleanerTaskFunction(void*)+0x8d>
c001e7fd:	83 ec 0c             	sub    esp,0xc
c001e800:	68 50 1b 03 c0       	push   0xc0031b50
c001e805:	e8 64 a2 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e80a:	c7 04 24 50 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b50
c001e811:	89 c3                	mov    ebx,eax
c001e813:	e8 7a a2 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e818:	c7 04 24 0e c4 02 c0 	mov    DWORD PTR [esp],0xc002c40e
c001e81f:	e8 35 47 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e827:	e8 bb fc ff ff       	call   c001e4e7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e82c:	c7 04 24 27 c4 02 c0 	mov    DWORD PTR [esp],0xc002c427
c001e833:	e8 21 47 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e838:	83 c4 10             	add    esp,0x10
c001e83b:	eb ac                	jmp    c001e7e9 <cleanerTaskFunction(void*)+0x39>
c001e83d:	e8 e0 f5 ff ff       	call   c001de22 <unlockScheduler()>
c001e842:	e8 9a f9 ff ff       	call   c001e1e1 <unlockStuff()>
c001e847:	e8 d4 f5 ff ff       	call   c001de20 <lockScheduler()>
c001e84c:	80 3d 2c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b2c,0x0
c001e853:	0f 84 72 ff ff ff    	je     c001e7cb <cleanerTaskFunction(void*)+0x1b>
c001e859:	e8 c4 f5 ff ff       	call   c001de22 <unlockScheduler()>
c001e85e:	e9 75 ff ff ff       	jmp    c001e7d8 <cleanerTaskFunction(void*)+0x28>

c001e863 <terminateTask(int)>:
c001e863:	83 ec 14             	sub    esp,0x14
c001e866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e86b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e86e:	83 c0 0c             	add    eax,0xc
c001e871:	50                   	push   eax
c001e872:	68 64 c7 02 c0       	push   0xc002c764
c001e877:	e8 dd 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e87c:	e8 c6 f5 ff ff       	call   c001de47 <lockStuff()>
c001e881:	e8 9a f5 ff ff       	call   c001de20 <lockScheduler()>
c001e886:	c7 04 24 3a c4 02 c0 	mov    DWORD PTR [esp],0xc002c43a
c001e88d:	e8 c7 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e892:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e896:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e89b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e89e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8a6:	5a                   	pop    edx
c001e8a7:	59                   	pop    ecx
c001e8a8:	50                   	push   eax
c001e8a9:	68 50 1b 03 c0       	push   0xc0031b50
c001e8ae:	e8 8d a2 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8b8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8bf:	c7 04 24 54 c4 02 c0 	mov    DWORD PTR [esp],0xc002c454
c001e8c6:	e8 8e 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e8cb:	83 c4 10             	add    esp,0x10
c001e8ce:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001e8d3:	85 c0                	test   eax,eax
c001e8d5:	74 5a                	je     c001e931 <terminateTask(int)+0xce>
c001e8d7:	83 ec 0c             	sub    esp,0xc
c001e8da:	68 6e c4 02 c0       	push   0xc002c46e
c001e8df:	e8 75 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e8e4:	58                   	pop    eax
c001e8e5:	c6 05 2c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b2c,0x1
c001e8ec:	ff 35 28 1b 03 c0    	push   DWORD PTR ds:0xc0031b28
c001e8f2:	e8 41 fb ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001e8f7:	c7 04 24 88 c4 02 c0 	mov    DWORD PTR [esp],0xc002c488
c001e8fe:	e8 56 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	e8 17 f5 ff ff       	call   c001de22 <unlockScheduler()>
c001e90b:	e8 d1 f8 ff ff       	call   c001e1e1 <unlockStuff()>
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	68 c0 c4 02 c0       	push   0xc002c4c0
c001e918:	e8 3c 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	e8 fb f4 ff ff       	call   c001de20 <lockScheduler()>
c001e925:	e8 32 f8 ff ff       	call   c001e15c <schedule()>
c001e92a:	e8 f3 f4 ff ff       	call   c001de22 <unlockScheduler()>
c001e92f:	eb ef                	jmp    c001e920 <terminateTask(int)+0xbd>
c001e931:	83 ec 0c             	sub    esp,0xc
c001e934:	68 a2 c4 02 c0       	push   0xc002c4a2
c001e939:	e8 1b 46 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	eb c3                	jmp    c001e906 <terminateTask(int)+0xa3>

c001e943 <Thr::terminateFromIRQ(int)>:
c001e943:	83 ec 18             	sub    esp,0x18
c001e946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e94a:	e8 14 ff ff ff       	call   c001e863 <terminateTask(int)>
c001e94f:	90                   	nop

c001e950 <Semaphore::release()>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	e8 eb f4 ff ff       	call   c001de47 <lockStuff()>
c001e95c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e95f:	85 d2                	test   edx,edx
c001e961:	74 1a                	je     c001e97d <Semaphore::release()+0x2d>
c001e963:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e96c:	52                   	push   edx
c001e96d:	e8 c6 fa ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	83 c4 0c             	add    esp,0xc
c001e978:	e9 64 f8 ff ff       	jmp    c001e1e1 <unlockStuff()>
c001e97d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e980:	83 c4 0c             	add    esp,0xc
c001e983:	e9 59 f8 ff ff       	jmp    c001e1e1 <unlockStuff()>

c001e988 <__static_initialization_and_destruction_0(int, int)>:
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e990:	0f 85 88 00 00 00    	jne    c001ea1e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e996:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e99e:	75 7e                	jne    c001ea1e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9a0:	83 ec 0c             	sub    esp,0xc
c001e9a3:	68 68 1b 03 c0       	push   0xc0031b68
c001e9a8:	e8 43 a3 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	83 ec 04             	sub    esp,0x4
c001e9b3:	68 1c d5 02 c0       	push   0xc002d51c
c001e9b8:	68 68 1b 03 c0       	push   0xc0031b68
c001e9bd:	68 b0 8c 02 c0       	push   0xc0028cb0
c001e9c2:	e8 2c 44 ff ff       	call   c0012df3 <__cxa_atexit>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	68 5c 1b 03 c0       	push   0xc0031b5c
c001e9d2:	e8 19 a3 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	83 ec 04             	sub    esp,0x4
c001e9dd:	68 1c d5 02 c0       	push   0xc002d51c
c001e9e2:	68 5c 1b 03 c0       	push   0xc0031b5c
c001e9e7:	68 b0 8c 02 c0       	push   0xc0028cb0
c001e9ec:	e8 02 44 ff ff       	call   c0012df3 <__cxa_atexit>
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	83 ec 0c             	sub    esp,0xc
c001e9f7:	68 50 1b 03 c0       	push   0xc0031b50
c001e9fc:	e8 ef a2 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	83 ec 04             	sub    esp,0x4
c001ea07:	68 1c d5 02 c0       	push   0xc002d51c
c001ea0c:	68 50 1b 03 c0       	push   0xc0031b50
c001ea11:	68 b0 8c 02 c0       	push   0xc0028cb0
c001ea16:	e8 d8 43 ff ff       	call   c0012df3 <__cxa_atexit>
c001ea1b:	83 c4 10             	add    esp,0x10
c001ea1e:	90                   	nop
c001ea1f:	83 c4 0c             	add    esp,0xc
c001ea22:	c3                   	ret    

c001ea23 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea23:	83 ec 0c             	sub    esp,0xc
c001ea26:	83 ec 08             	sub    esp,0x8
c001ea29:	68 ff ff 00 00       	push   0xffff
c001ea2e:	6a 01                	push   0x1
c001ea30:	e8 53 ff ff ff       	call   c001e988 <__static_initialization_and_destruction_0(int, int)>
c001ea35:	83 c4 10             	add    esp,0x10
c001ea38:	83 c4 0c             	add    esp,0xc
c001ea3b:	c3                   	ret    

c001ea3c <Vm::inbv(unsigned short)>:
c001ea3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea40:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea45:	75 06                	jne    c001ea4d <Vm::inbv(unsigned short)+0x11>
c001ea47:	a0 ac 1b 03 c0       	mov    al,ds:0xc0031bac
c001ea4c:	c3                   	ret    
c001ea4d:	ec                   	in     al,dx
c001ea4e:	c3                   	ret    

c001ea4f <Vm::outbv(unsigned short, unsigned char)>:
c001ea4f:	53                   	push   ebx
c001ea50:	83 ec 08             	sub    esp,0x8
c001ea53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea57:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea5b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea60:	75 38                	jne    c001ea9a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea62:	0f b6 c3             	movzx  eax,bl
c001ea65:	51                   	push   ecx
c001ea66:	51                   	push   ecx
c001ea67:	50                   	push   eax
c001ea68:	68 83 c7 02 c0       	push   0xc002c783
c001ea6d:	e8 e7 44 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ea72:	8b 15 ac 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bac
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	8d 42 01             	lea    eax,[edx+0x1]
c001ea7e:	88 9a c0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce440],bl
c001ea84:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c001ea89:	83 f8 20             	cmp    eax,0x20
c001ea8c:	75 0f                	jne    c001ea9d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea8e:	c7 05 ac 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031bac,0x1f
c001ea98:	eb 03                	jmp    c001ea9d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea9a:	88 d8                	mov    al,bl
c001ea9c:	ee                   	out    dx,al
c001ea9d:	83 c4 08             	add    esp,0x8
c001eaa0:	5b                   	pop    ebx
c001eaa1:	c3                   	ret    

c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eaa2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eaa7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eaac:	c1 e0 04             	shl    eax,0x4
c001eaaf:	01 d0                	add    eax,edx
c001eab1:	c3                   	ret    

c001eab2 <Vm::getSegment(unsigned int)>:
c001eab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab6:	c1 e8 10             	shr    eax,0x10
c001eab9:	c3                   	ret    

c001eaba <Vm::getOffset(unsigned int)>:
c001eaba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eabe:	c3                   	ret    

c001eabf <Vm::mainloop2()>:
c001eabf:	83 ec 0c             	sub    esp,0xc
c001eac2:	e8 59 f3 ff ff       	call   c001de20 <lockScheduler()>
c001eac7:	83 ec 0c             	sub    esp,0xc
c001eaca:	c6 05 a5 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031ba5,0x1
c001ead1:	6a 02                	push   0x2
c001ead3:	e8 9c f7 ff ff       	call   c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ead8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eadd:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eae1:	52                   	push   edx
c001eae2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eae6:	52                   	push   edx
c001eae7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaeb:	52                   	push   edx
c001eaec:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaf0:	50                   	push   eax
c001eaf1:	e8 04 18 fe ff       	call   c00002fa <goToVM86>
c001eaf6:	83 c4 2c             	add    esp,0x2c
c001eaf9:	c3                   	ret    

c001eafa <Vm::mainVm8086Loop(void*)>:
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	e8 20 f3 ff ff       	call   c001de22 <unlockScheduler()>
c001eb02:	83 c4 0c             	add    esp,0xc
c001eb05:	eb b8                	jmp    c001eabf <Vm::mainloop2()>

c001eb07 <Vm::mainloop3(unsigned long)>:
c001eb07:	53                   	push   ebx
c001eb08:	83 ec 08             	sub    esp,0x8
c001eb0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb0f:	e8 0c f3 ff ff       	call   c001de20 <lockScheduler()>
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	89 1d a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,ebx
c001eb1d:	6a 02                	push   0x2
c001eb1f:	c6 05 a4 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031ba4,0x1
c001eb26:	e8 49 f7 ff ff       	call   c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb2b:	83 c4 18             	add    esp,0x18
c001eb2e:	5b                   	pop    ebx
c001eb2f:	eb 8e                	jmp    c001eabf <Vm::mainloop2()>

c001eb31 <Vm::initialise8086()>:
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	68 80 00 00 00       	push   0x80
c001eb39:	6a 00                	push   0x0
c001eb3b:	68 fa ea 01 c0       	push   0xc001eafa
c001eb40:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001eb46:	e8 07 f4 ff ff       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c001eb4b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb52:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c001eb57:	68 00 01 00 00       	push   0x100
c001eb5c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001eb61:	6a 00                	push   0x0
c001eb63:	6a 00                	push   0x0
c001eb65:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb6b:	e8 e6 3a ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb70:	83 c4 2c             	add    esp,0x2c
c001eb73:	c3                   	ret    

c001eb74 <Vm::finish8086()>:
c001eb74:	53                   	push   ebx
c001eb75:	83 ec 08             	sub    esp,0x8
c001eb78:	e8 a3 f2 ff ff       	call   c001de20 <lockScheduler()>
c001eb7d:	80 3d a4 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031ba4,0x0
c001eb84:	75 0c                	jne    c001eb92 <Vm::finish8086()+0x1e>
c001eb86:	e8 d1 f5 ff ff       	call   c001e15c <schedule()>
c001eb8b:	e8 92 f2 ff ff       	call   c001de22 <unlockScheduler()>
c001eb90:	eb e6                	jmp    c001eb78 <Vm::finish8086()+0x4>
c001eb92:	83 ec 0c             	sub    esp,0xc
c001eb95:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001eb9b:	ff 35 a8 1b 03 c0    	push   DWORD PTR ds:0xc0031ba8
c001eba1:	c6 05 a4 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031ba4,0x0
c001eba8:	e8 8b f8 ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001ebad:	e8 70 f2 ff ff       	call   c001de22 <unlockScheduler()>
c001ebb2:	89 d8                	mov    eax,ebx
c001ebb4:	83 c4 18             	add    esp,0x18
c001ebb7:	5b                   	pop    ebx
c001ebb8:	c3                   	ret    

c001ebb9 <Vm::getOutput8086(unsigned char*)>:
c001ebb9:	83 ec 10             	sub    esp,0x10
c001ebbc:	ff 35 ac 1b 03 c0    	push   DWORD PTR ds:0xc0031bac
c001ebc2:	68 c0 1b 03 c0       	push   0xc0031bc0
c001ebc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebcb:	e8 74 1b fe ff       	call   c0000744 <memcpy>
c001ebd0:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c001ebd5:	c7 05 ac 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bac,0x0
c001ebdf:	83 c4 1c             	add    esp,0x1c
c001ebe2:	c3                   	ret    

c001ebe3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebe3:	55                   	push   ebp
c001ebe4:	57                   	push   edi
c001ebe5:	56                   	push   esi
c001ebe6:	53                   	push   ebx
c001ebe7:	83 ec 2c             	sub    esp,0x2c
c001ebea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebee:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebf2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebf6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebfa:	e8 21 f2 ff ff       	call   c001de20 <lockScheduler()>
c001ebff:	a0 a5 1b 03 c0       	mov    al,ds:0xc0031ba5
c001ec04:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec08:	84 c0                	test   al,al
c001ec0a:	75 0c                	jne    c001ec18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec0c:	e8 4b f5 ff ff       	call   c001e15c <schedule()>
c001ec11:	e8 0c f2 ff ff       	call   c001de22 <unlockScheduler()>
c001ec16:	eb e2                	jmp    c001ebfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec18:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001ec1d:	c7 05 ac 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bac,0x0
c001ec27:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec2b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec2f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec33:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec37:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec3b:	50                   	push   eax
c001ec3c:	6a 20                	push   0x20
c001ec3e:	6a 00                	push   0x0
c001ec40:	68 c0 1b 03 c0       	push   0xc0031bc0
c001ec45:	e8 2e 1b fe ff       	call   c0000778 <memset>
c001ec4a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec51:	e8 ea 0b ff ff       	call   c000f840 <malloc>
c001ec56:	83 c4 0c             	add    esp,0xc
c001ec59:	89 c7                	mov    edi,eax
c001ec5b:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001ec61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec65:	50                   	push   eax
c001ec66:	e8 47 48 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	85 ff                	test   edi,edi
c001ec70:	75 0a                	jne    c001ec7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec72:	83 ec 0c             	sub    esp,0xc
c001ec75:	68 9f c7 02 c0       	push   0xc002c79f
c001ec7a:	eb 27                	jmp    c001eca3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec7c:	50                   	push   eax
c001ec7d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec81:	50                   	push   eax
c001ec82:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec86:	50                   	push   eax
c001ec87:	57                   	push   edi
c001ec88:	e8 35 4b ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001ec8d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	89 e8                	mov    eax,ebp
c001ec97:	84 c0                	test   al,al
c001ec99:	74 19                	je     c001ecb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec9b:	83 ec 0c             	sub    esp,0xc
c001ec9e:	68 b3 c7 02 c0       	push   0xc002c7b3
c001eca3:	e8 53 b9 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001eca8:	31 ed                	xor    ebp,ebp
c001ecaa:	e8 73 f1 ff ff       	call   c001de22 <unlockScheduler()>
c001ecaf:	83 c4 10             	add    esp,0x10
c001ecb2:	eb 75                	jmp    c001ed29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecb4:	50                   	push   eax
c001ecb5:	50                   	push   eax
c001ecb6:	6a 01                	push   0x1
c001ecb8:	57                   	push   edi
c001ecb9:	e8 58 48 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	85 c0                	test   eax,eax
c001ecc3:	74 17                	je     c001ecdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecc5:	83 ec 0c             	sub    esp,0xc
c001ecc8:	68 cc c7 02 c0       	push   0xc002c7cc
c001eccd:	e8 29 b9 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001ecd2:	e8 4b f1 ff ff       	call   c001de22 <unlockScheduler()>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	eb 4d                	jmp    c001ed29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecdc:	0f b7 f6             	movzx  esi,si
c001ecdf:	50                   	push   eax
c001ece0:	0f b7 db             	movzx  ebx,bx
c001ece3:	50                   	push   eax
c001ece4:	56                   	push   esi
c001ece5:	53                   	push   ebx
c001ece6:	e8 b7 fd ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001eceb:	5a                   	pop    edx
c001ecec:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecee:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecf2:	51                   	push   ecx
c001ecf3:	50                   	push   eax
c001ecf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecf8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecfc:	57                   	push   edi
c001ecfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed00:	83 c4 14             	add    esp,0x14
c001ed03:	57                   	push   edi
c001ed04:	e8 6b 48 ff ff       	call   c0013574 <File::close()>
c001ed09:	c6 05 a5 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031ba5,0x0
c001ed10:	e8 0d f1 ff ff       	call   c001de22 <unlockScheduler()>
c001ed15:	59                   	pop    ecx
c001ed16:	ff 35 a8 1b 03 c0    	push   DWORD PTR ds:0xc0031ba8
c001ed1c:	e8 17 f7 ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed29:	83 c4 2c             	add    esp,0x2c
c001ed2c:	89 e8                	mov    eax,ebp
c001ed2e:	5b                   	pop    ebx
c001ed2f:	5e                   	pop    esi
c001ed30:	5f                   	pop    edi
c001ed31:	5d                   	pop    ebp
c001ed32:	c3                   	ret    

c001ed33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed33:	57                   	push   edi
c001ed34:	56                   	push   esi
c001ed35:	53                   	push   ebx
c001ed36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed42:	83 e8 06             	sub    eax,0x6
c001ed45:	0f b7 c0             	movzx  eax,ax
c001ed48:	50                   	push   eax
c001ed49:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed4e:	50                   	push   eax
c001ed4f:	e8 4e fd ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed54:	5a                   	pop    edx
c001ed55:	5e                   	pop    esi
c001ed56:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed59:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed5c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed62:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed65:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed68:	83 c2 02             	add    edx,0x2
c001ed6b:	66 89 10             	mov    WORD PTR [eax],dx
c001ed6e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed71:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed75:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed78:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed7c:	89 d6                	mov    esi,edx
c001ed7e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed84:	66 81 e6 ff fd       	and    si,0xfdff
c001ed89:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed8d:	74 07                	je     c001ed96 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed8f:	89 d6                	mov    esi,edx
c001ed91:	66 81 ce 00 02       	or     si,0x200
c001ed96:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed9f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eda3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001edab:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edae:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edb6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edb9:	5b                   	pop    ebx
c001edba:	5e                   	pop    esi
c001edbb:	5f                   	pop    edi
c001edbc:	c3                   	ret    

c001edbd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edbd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc7:	c1 e0 04             	shl    eax,0x4
c001edca:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edcd:	c3                   	ret    

c001edce <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd8:	c1 e0 04             	shl    eax,0x4
c001eddb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001eddf:	c3                   	ret    

c001ede0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ede0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edea:	c1 e0 04             	shl    eax,0x4
c001eded:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edf0:	c3                   	ret    

c001edf1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edf1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edf6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edfb:	c1 e0 04             	shl    eax,0x4
c001edfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee02:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee05:	c3                   	ret    

c001ee06 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee10:	c1 e0 04             	shl    eax,0x4
c001ee13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee17:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee1b:	c3                   	ret    

c001ee1c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee26:	c1 e0 04             	shl    eax,0x4
c001ee29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee2d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee30:	c3                   	ret    

c001ee31 <Vm::faultHandler(regs*)>:
c001ee31:	55                   	push   ebp
c001ee32:	57                   	push   edi
c001ee33:	56                   	push   esi
c001ee34:	53                   	push   ebx
c001ee35:	83 ec 1c             	sub    esp,0x1c
c001ee38:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee3c:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee3f:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee42:	0f b7 c1             	movzx  eax,cx
c001ee45:	50                   	push   eax
c001ee46:	0f b7 c3             	movzx  eax,bx
c001ee49:	c1 e3 04             	shl    ebx,0x4
c001ee4c:	50                   	push   eax
c001ee4d:	e8 50 fc ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee52:	5a                   	pop    edx
c001ee53:	89 c5                	mov    ebp,eax
c001ee55:	5e                   	pop    esi
c001ee56:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee5a:	50                   	push   eax
c001ee5b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee5f:	50                   	push   eax
c001ee60:	e8 3d fc ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee65:	01 cb                	add    ebx,ecx
c001ee67:	89 c6                	mov    esi,eax
c001ee69:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee6d:	50                   	push   eax
c001ee6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee72:	50                   	push   eax
c001ee73:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee77:	50                   	push   eax
c001ee78:	55                   	push   ebp
c001ee79:	53                   	push   ebx
c001ee7a:	b3 06                	mov    bl,0x6
c001ee7c:	68 e5 c7 02 c0       	push   0xc002c7e5
c001ee81:	e8 d3 40 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ee86:	83 c4 20             	add    esp,0x20
c001ee89:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee8e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee93:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee97:	3c 9d                	cmp    al,0x9d
c001ee99:	0f 84 d7 02 00 00    	je     c001f176 <Vm::faultHandler(regs*)+0x345>
c001ee9f:	0f 87 a3 00 00 00    	ja     c001ef48 <Vm::faultHandler(regs*)+0x117>
c001eea5:	3c 66                	cmp    al,0x66
c001eea7:	0f 84 15 02 00 00    	je     c001f0c2 <Vm::faultHandler(regs*)+0x291>
c001eead:	77 5f                	ja     c001ef0e <Vm::faultHandler(regs*)+0xdd>
c001eeaf:	3c 36                	cmp    al,0x36
c001eeb1:	0f 84 f1 01 00 00    	je     c001f0a8 <Vm::faultHandler(regs*)+0x277>
c001eeb7:	77 28                	ja     c001eee1 <Vm::faultHandler(regs*)+0xb0>
c001eeb9:	3c 26                	cmp    al,0x26
c001eebb:	0f 84 99 01 00 00    	je     c001f05a <Vm::faultHandler(regs*)+0x229>
c001eec1:	3c 2e                	cmp    al,0x2e
c001eec3:	0f 85 3b 07 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	31 db                	xor    ebx,ebx
c001eece:	68 fa c7 02 c0       	push   0xc002c7fa
c001eed3:	e8 81 40 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001eed8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	45                   	inc    ebp
c001eedf:	eb b2                	jmp    c001ee93 <Vm::faultHandler(regs*)+0x62>
c001eee1:	3c 64                	cmp    al,0x64
c001eee3:	0f 84 8b 01 00 00    	je     c001f074 <Vm::faultHandler(regs*)+0x243>
c001eee9:	0f 87 9f 01 00 00    	ja     c001f08e <Vm::faultHandler(regs*)+0x25d>
c001eeef:	3c 3e                	cmp    al,0x3e
c001eef1:	0f 85 0d 07 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001eef7:	83 ec 0c             	sub    esp,0xc
c001eefa:	b3 01                	mov    bl,0x1
c001eefc:	68 fe c7 02 c0       	push   0xc002c7fe
c001ef01:	e8 53 40 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ef06:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	eb d0                	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001ef0e:	3c 6d                	cmp    al,0x6d
c001ef10:	0f 84 af 03 00 00    	je     c001f2c5 <Vm::faultHandler(regs*)+0x494>
c001ef16:	77 15                	ja     c001ef2d <Vm::faultHandler(regs*)+0xfc>
c001ef18:	3c 67                	cmp    al,0x67
c001ef1a:	0f 84 bf 01 00 00    	je     c001f0df <Vm::faultHandler(regs*)+0x2ae>
c001ef20:	3c 6c                	cmp    al,0x6c
c001ef22:	0f 84 3f 03 00 00    	je     c001f267 <Vm::faultHandler(regs*)+0x436>
c001ef28:	e9 d7 06 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001ef2d:	3c 6f                	cmp    al,0x6f
c001ef2f:	0f 84 a4 04 00 00    	je     c001f3d9 <Vm::faultHandler(regs*)+0x5a8>
c001ef35:	0f 82 11 04 00 00    	jb     c001f34c <Vm::faultHandler(regs*)+0x51b>
c001ef3b:	3c 9c                	cmp    al,0x9c
c001ef3d:	0f 84 ba 01 00 00    	je     c001f0fd <Vm::faultHandler(regs*)+0x2cc>
c001ef43:	e9 bc 06 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001ef48:	3c ec                	cmp    al,0xec
c001ef4a:	0f 84 24 06 00 00    	je     c001f574 <Vm::faultHandler(regs*)+0x743>
c001ef50:	0f 87 93 00 00 00    	ja     c001efe9 <Vm::faultHandler(regs*)+0x1b8>
c001ef56:	3c e4                	cmp    al,0xe4
c001ef58:	0f 84 5c 05 00 00    	je     c001f4ba <Vm::faultHandler(regs*)+0x689>
c001ef5e:	77 6a                	ja     c001efca <Vm::faultHandler(regs*)+0x199>
c001ef60:	3c cd                	cmp    al,0xcd
c001ef62:	0f 84 7e 02 00 00    	je     c001f1e6 <Vm::faultHandler(regs*)+0x3b5>
c001ef68:	3c cf                	cmp    al,0xcf
c001ef6a:	0f 85 94 06 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	68 42 c8 02 c0       	push   0xc002c842
c001ef78:	e8 dc 3f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001ef7d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef80:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef83:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef87:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef8a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef8e:	0d 00 02 02 00       	or     eax,0x20200
c001ef93:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef96:	56                   	push   esi
c001ef97:	53                   	push   ebx
c001ef98:	52                   	push   edx
c001ef99:	68 48 c8 02 c0       	push   0xc002c848
c001ef9e:	e8 b6 3f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001efa3:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efa7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efad:	66 c1 e8 09          	shr    ax,0x9
c001efb1:	83 e0 01             	and    eax,0x1
c001efb4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efb7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efba:	83 c0 06             	add    eax,0x6
c001efbd:	25 ff ff 00 00       	and    eax,0xffff
c001efc2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efc5:	e9 95 02 00 00       	jmp    c001f25f <Vm::faultHandler(regs*)+0x42e>
c001efca:	3c e6                	cmp    al,0xe6
c001efcc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efd0:	0f 84 4e 05 00 00    	je     c001f524 <Vm::faultHandler(regs*)+0x6f3>
c001efd6:	0f 82 0a 05 00 00    	jb     c001f4e6 <Vm::faultHandler(regs*)+0x6b5>
c001efdc:	3c e7                	cmp    al,0xe7
c001efde:	0f 84 69 05 00 00    	je     c001f54d <Vm::faultHandler(regs*)+0x71c>
c001efe4:	e9 1b 06 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001efe9:	3c ef                	cmp    al,0xef
c001efeb:	0f 84 e6 05 00 00    	je     c001f5d7 <Vm::faultHandler(regs*)+0x7a6>
c001eff1:	77 37                	ja     c001f02a <Vm::faultHandler(regs*)+0x1f9>
c001eff3:	3c ed                	cmp    al,0xed
c001eff5:	0f 84 a3 05 00 00    	je     c001f59e <Vm::faultHandler(regs*)+0x76d>
c001effb:	3c ee                	cmp    al,0xee
c001effd:	0f 85 01 06 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001f003:	52                   	push   edx
c001f004:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f007:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f00a:	68 e3 c8 02 c0       	push   0xc002c8e3
c001f00f:	e8 45 3f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f014:	59                   	pop    ecx
c001f015:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f019:	5b                   	pop    ebx
c001f01a:	50                   	push   eax
c001f01b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f01f:	50                   	push   eax
c001f020:	e8 2a fa ff ff       	call   c001ea4f <Vm::outbv(unsigned short, unsigned char)>
c001f025:	e9 a5 05 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f02a:	3c fa                	cmp    al,0xfa
c001f02c:	0f 84 f7 01 00 00    	je     c001f229 <Vm::faultHandler(regs*)+0x3f8>
c001f032:	3c fb                	cmp    al,0xfb
c001f034:	0f 84 0a 02 00 00    	je     c001f244 <Vm::faultHandler(regs*)+0x413>
c001f03a:	3c f3                	cmp    al,0xf3
c001f03c:	0f 85 c2 05 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001f042:	83 ec 0c             	sub    esp,0xc
c001f045:	68 1b c8 02 c0       	push   0xc002c81b
c001f04a:	e8 0a 3f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f04f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f052:	83 c4 10             	add    esp,0x10
c001f055:	e9 84 fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	b3 02                	mov    bl,0x2
c001f05f:	68 f6 c7 02 c0       	push   0xc002c7f6
c001f064:	e8 f0 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f069:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f06c:	83 c4 10             	add    esp,0x10
c001f06f:	e9 6a fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f074:	83 ec 0c             	sub    esp,0xc
c001f077:	b3 03                	mov    bl,0x3
c001f079:	68 02 c8 02 c0       	push   0xc002c802
c001f07e:	e8 d6 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f083:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f086:	83 c4 10             	add    esp,0x10
c001f089:	e9 50 fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f08e:	83 ec 0c             	sub    esp,0xc
c001f091:	b3 04                	mov    bl,0x4
c001f093:	68 06 c8 02 c0       	push   0xc002c806
c001f098:	e8 bc 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f09d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a0:	83 c4 10             	add    esp,0x10
c001f0a3:	e9 36 fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	b3 05                	mov    bl,0x5
c001f0ad:	68 0a c8 02 c0       	push   0xc002c80a
c001f0b2:	e8 a2 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f0b7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ba:	83 c4 10             	add    esp,0x10
c001f0bd:	e9 1c fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	68 0e c8 02 c0       	push   0xc002c80e
c001f0ca:	e8 8a 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0d5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0da:	e9 ff fd ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0df:	50                   	push   eax
c001f0e0:	50                   	push   eax
c001f0e1:	6a 01                	push   0x1
c001f0e3:	68 13 c8 02 c0       	push   0xc002c813
c001f0e8:	e8 6c 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f0ed:	83 c4 10             	add    esp,0x10
c001f0f0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0f8:	e9 e1 fd ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0fd:	83 ec 0c             	sub    esp,0xc
c001f100:	68 21 c8 02 c0       	push   0xc002c821
c001f105:	e8 4f 3e ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f10a:	83 c4 10             	add    esp,0x10
c001f10d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f110:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f115:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f118:	74 2f                	je     c001f149 <Vm::faultHandler(regs*)+0x318>
c001f11a:	83 ea 04             	sub    edx,0x4
c001f11d:	25 ff 0d 00 00       	and    eax,0xdff
c001f122:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f128:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f12b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f12e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f134:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f138:	0f 84 bf 04 00 00    	je     c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f13e:	80 cc 02             	or     ah,0x2
c001f141:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f144:	e9 b4 04 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f149:	83 ea 02             	sub    edx,0x2
c001f14c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f152:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f155:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f159:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f163:	74 05                	je     c001f16a <Vm::faultHandler(regs*)+0x339>
c001f165:	80 cc 02             	or     ah,0x2
c001f168:	eb 03                	jmp    c001f16d <Vm::faultHandler(regs*)+0x33c>
c001f16a:	80 e4 fd             	and    ah,0xfd
c001f16d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f171:	e9 87 04 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f176:	83 ec 0c             	sub    esp,0xc
c001f179:	68 28 c8 02 c0       	push   0xc002c828
c001f17e:	e8 d6 3d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f183:	83 c4 10             	add    esp,0x10
c001f186:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f18b:	74 28                	je     c001f1b5 <Vm::faultHandler(regs*)+0x384>
c001f18d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f18f:	25 ff 0d 00 00       	and    eax,0xdff
c001f194:	0d 00 02 02 00       	or     eax,0x20200
c001f199:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f19c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f19e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a4:	c1 e8 09             	shr    eax,0x9
c001f1a7:	83 e0 01             	and    eax,0x1
c001f1aa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1ad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1b0:	83 c0 04             	add    eax,0x4
c001f1b3:	eb 24                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x3a8>
c001f1b5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1b8:	0d 00 02 02 00       	or     eax,0x20200
c001f1bd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1c0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1c9:	66 c1 e8 09          	shr    ax,0x9
c001f1cd:	83 e0 01             	and    eax,0x1
c001f1d0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1d3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1d6:	83 c0 02             	add    eax,0x2
c001f1d9:	25 ff ff 00 00       	and    eax,0xffff
c001f1de:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1e1:	e9 17 04 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f1e6:	53                   	push   ebx
c001f1e7:	53                   	push   ebx
c001f1e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ec:	50                   	push   eax
c001f1ed:	68 2e c8 02 c0       	push   0xc002c82e
c001f1f2:	e8 62 3d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f1f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	3c ee                	cmp    al,0xee
c001f200:	75 10                	jne    c001f212 <Vm::faultHandler(regs*)+0x3e1>
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f208:	e8 fa f8 ff ff       	call   c001eb07 <Vm::mainloop3(unsigned long)>
c001f20d:	e9 c0 03 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7a1>
c001f212:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	53                   	push   ebx
c001f21a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f21e:	53                   	push   ebx
c001f21f:	55                   	push   ebp
c001f220:	50                   	push   eax
c001f221:	57                   	push   edi
c001f222:	e8 0c fb ff ff       	call   c001ed33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f227:	eb 36                	jmp    c001f25f <Vm::faultHandler(regs*)+0x42e>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	68 38 c8 02 c0       	push   0xc002c838
c001f231:	e8 23 3d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f23b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f23f:	e9 8b 03 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	68 3d c8 02 c0       	push   0xc002c83d
c001f24c:	e8 08 3d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f256:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f25a:	e9 70 03 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f25f:	83 c4 20             	add    esp,0x20
c001f262:	e9 99 03 00 00       	jmp    c001f600 <Vm::faultHandler(regs*)+0x7cf>
c001f267:	83 ec 0c             	sub    esp,0xc
c001f26a:	68 7b c8 02 c0       	push   0xc002c87b
c001f26f:	e8 e5 3c ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f274:	83 c4 10             	add    esp,0x10
c001f277:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f27a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f27f:	74 0d                	je     c001f28e <Vm::faultHandler(regs*)+0x45d>
c001f281:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f288:	0f 87 9e 01 00 00    	ja     c001f42c <Vm::faultHandler(regs*)+0x5fb>
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f295:	0f b7 db             	movzx  ebx,bx
c001f298:	50                   	push   eax
c001f299:	e8 9e f7 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f29e:	83 c4 0c             	add    esp,0xc
c001f2a1:	0f b6 c0             	movzx  eax,al
c001f2a4:	50                   	push   eax
c001f2a5:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2a9:	50                   	push   eax
c001f2aa:	53                   	push   ebx
c001f2ab:	e8 41 fb ff ff       	call   c001edf1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2b6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ba:	74 03                	je     c001f2bf <Vm::faultHandler(regs*)+0x48e>
c001f2bc:	48                   	dec    eax
c001f2bd:	eb 01                	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x48f>
c001f2bf:	40                   	inc    eax
c001f2c0:	0f b7 c0             	movzx  eax,ax
c001f2c3:	eb 7f                	jmp    c001f344 <Vm::faultHandler(regs*)+0x513>
c001f2c5:	83 ec 0c             	sub    esp,0xc
c001f2c8:	68 ad c8 02 c0       	push   0xc002c8ad
c001f2cd:	e8 87 3c ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f2d2:	83 c4 10             	add    esp,0x10
c001f2d5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2dd:	74 0d                	je     c001f2ec <Vm::faultHandler(regs*)+0x4bb>
c001f2df:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2e6:	0f 87 40 01 00 00    	ja     c001f42c <Vm::faultHandler(regs*)+0x5fb>
c001f2ec:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2ef:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2f3:	0f b7 db             	movzx  ebx,bx
c001f2f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2fb:	74 20                	je     c001f31d <Vm::faultHandler(regs*)+0x4ec>
c001f2fd:	ed                   	in     eax,dx
c001f2fe:	51                   	push   ecx
c001f2ff:	50                   	push   eax
c001f300:	56                   	push   esi
c001f301:	53                   	push   ebx
c001f302:	e8 15 fb ff ff       	call   c001ee1c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f307:	83 c4 10             	add    esp,0x10
c001f30a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f30d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f311:	74 05                	je     c001f318 <Vm::faultHandler(regs*)+0x4e7>
c001f313:	83 e8 04             	sub    eax,0x4
c001f316:	eb 27                	jmp    c001f33f <Vm::faultHandler(regs*)+0x50e>
c001f318:	83 c0 04             	add    eax,0x4
c001f31b:	eb 22                	jmp    c001f33f <Vm::faultHandler(regs*)+0x50e>
c001f31d:	66 ed                	in     ax,dx
c001f31f:	0f b7 c0             	movzx  eax,ax
c001f322:	52                   	push   edx
c001f323:	50                   	push   eax
c001f324:	56                   	push   esi
c001f325:	53                   	push   ebx
c001f326:	e8 db fa ff ff       	call   c001ee06 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f32b:	83 c4 10             	add    esp,0x10
c001f32e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f331:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f335:	74 05                	je     c001f33c <Vm::faultHandler(regs*)+0x50b>
c001f337:	83 e8 02             	sub    eax,0x2
c001f33a:	eb 03                	jmp    c001f33f <Vm::faultHandler(regs*)+0x50e>
c001f33c:	83 c0 02             	add    eax,0x2
c001f33f:	25 ff ff 00 00       	and    eax,0xffff
c001f344:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f347:	e9 b1 02 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f34c:	83 ec 0c             	sub    esp,0xc
c001f34f:	4b                   	dec    ebx
c001f350:	68 b3 c8 02 c0       	push   0xc002c8b3
c001f355:	e8 ff 3b ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f35a:	83 c4 10             	add    esp,0x10
c001f35d:	80 fb 05             	cmp    bl,0x5
c001f360:	77 0a                	ja     c001f36c <Vm::faultHandler(regs*)+0x53b>
c001f362:	0f b6 db             	movzx  ebx,bl
c001f365:	ff 24 9d 24 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36dc]
c001f36c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f370:	eb 1b                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f372:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f376:	eb 15                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f378:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f37c:	eb 0f                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f37e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f382:	eb 09                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f384:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f387:	eb 04                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f389:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f38d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f392:	74 0d                	je     c001f3a1 <Vm::faultHandler(regs*)+0x570>
c001f394:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f39b:	0f 87 8b 00 00 00    	ja     c001f42c <Vm::faultHandler(regs*)+0x5fb>
c001f3a1:	53                   	push   ebx
c001f3a2:	53                   	push   ebx
c001f3a3:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3a7:	52                   	push   edx
c001f3a8:	50                   	push   eax
c001f3a9:	e8 0f fa ff ff       	call   c001edbd <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3ae:	5e                   	pop    esi
c001f3af:	0f b6 c0             	movzx  eax,al
c001f3b2:	5d                   	pop    ebp
c001f3b3:	50                   	push   eax
c001f3b4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3b8:	50                   	push   eax
c001f3b9:	e8 91 f6 ff ff       	call   c001ea4f <Vm::outbv(unsigned short, unsigned char)>
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3c4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3c8:	74 03                	je     c001f3cd <Vm::faultHandler(regs*)+0x59c>
c001f3ca:	48                   	dec    eax
c001f3cb:	eb 01                	jmp    c001f3ce <Vm::faultHandler(regs*)+0x59d>
c001f3cd:	40                   	inc    eax
c001f3ce:	0f b7 c0             	movzx  eax,ax
c001f3d1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3d4:	e9 24 02 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f3d9:	83 ec 0c             	sub    esp,0xc
c001f3dc:	4b                   	dec    ebx
c001f3dd:	68 b3 c8 02 c0       	push   0xc002c8b3
c001f3e2:	e8 72 3b ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	80 fb 05             	cmp    bl,0x5
c001f3ed:	77 0a                	ja     c001f3f9 <Vm::faultHandler(regs*)+0x5c8>
c001f3ef:	0f b6 db             	movzx  ebx,bl
c001f3f2:	ff 24 9d 3c c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36c4]
c001f3f9:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3fd:	eb 1b                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f3ff:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f403:	eb 15                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f405:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f409:	eb 0f                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f40b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f40f:	eb 09                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f411:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f414:	eb 04                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f416:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f41a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f41d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f422:	74 39                	je     c001f45d <Vm::faultHandler(regs*)+0x62c>
c001f424:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f42a:	76 31                	jbe    c001f45d <Vm::faultHandler(regs*)+0x62c>
c001f42c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f430:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f434:	51                   	push   ecx
c001f435:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f439:	51                   	push   ecx
c001f43a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f43e:	51                   	push   ecx
c001f43f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f443:	51                   	push   ecx
c001f444:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f448:	52                   	push   edx
c001f449:	50                   	push   eax
c001f44a:	50                   	push   eax
c001f44b:	68 80 c8 02 c0       	push   0xc002c880
c001f450:	e8 04 3b ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f455:	83 c4 20             	add    esp,0x20
c001f458:	e9 fb 01 00 00       	jmp    c001f658 <Vm::faultHandler(regs*)+0x827>
c001f45d:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f460:	0f b7 d3             	movzx  edx,bx
c001f463:	81 e6 00 04 00 00    	and    esi,0x400
c001f469:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f46c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f471:	74 1d                	je     c001f490 <Vm::faultHandler(regs*)+0x65f>
c001f473:	51                   	push   ecx
c001f474:	51                   	push   ecx
c001f475:	52                   	push   edx
c001f476:	50                   	push   eax
c001f477:	e8 64 f9 ff ff       	call   c001ede0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f47c:	83 c4 10             	add    esp,0x10
c001f47f:	89 ea                	mov    edx,ebp
c001f481:	ef                   	out    dx,eax
c001f482:	85 f6                	test   esi,esi
c001f484:	74 05                	je     c001f48b <Vm::faultHandler(regs*)+0x65a>
c001f486:	83 eb 04             	sub    ebx,0x4
c001f489:	eb 21                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x67b>
c001f48b:	83 c3 04             	add    ebx,0x4
c001f48e:	eb 1c                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x67b>
c001f490:	51                   	push   ecx
c001f491:	51                   	push   ecx
c001f492:	52                   	push   edx
c001f493:	50                   	push   eax
c001f494:	e8 35 f9 ff ff       	call   c001edce <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f499:	83 c4 10             	add    esp,0x10
c001f49c:	89 ea                	mov    edx,ebp
c001f49e:	66 ef                	out    dx,ax
c001f4a0:	85 f6                	test   esi,esi
c001f4a2:	74 05                	je     c001f4a9 <Vm::faultHandler(regs*)+0x678>
c001f4a4:	83 eb 02             	sub    ebx,0x2
c001f4a7:	eb 03                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x67b>
c001f4a9:	83 c3 02             	add    ebx,0x2
c001f4ac:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4b2:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4b5:	e9 43 01 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f4ba:	53                   	push   ebx
c001f4bb:	53                   	push   ebx
c001f4bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4c0:	50                   	push   eax
c001f4c1:	68 b9 c8 02 c0       	push   0xc002c8b9
c001f4c6:	e8 8e 3a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f4cb:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4d9:	e8 5e f5 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f4de:	0f b6 c0             	movzx  eax,al
c001f4e1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4e4:	eb 5e                	jmp    c001f544 <Vm::faultHandler(regs*)+0x713>
c001f4e6:	51                   	push   ecx
c001f4e7:	51                   	push   ecx
c001f4e8:	53                   	push   ebx
c001f4e9:	68 bf c8 02 c0       	push   0xc002c8bf
c001f4ee:	e8 66 3a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4fb:	74 07                	je     c001f504 <Vm::faultHandler(regs*)+0x6d3>
c001f4fd:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f501:	ed                   	in     eax,dx
c001f502:	eb 14                	jmp    c001f518 <Vm::faultHandler(regs*)+0x6e7>
c001f504:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f507:	66 31 db             	xor    bx,bx
c001f50a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f50d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f511:	66 ed                	in     ax,dx
c001f513:	0f b7 c0             	movzx  eax,ax
c001f516:	09 d8                	or     eax,ebx
c001f518:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f51b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f51f:	e9 dc 00 00 00       	jmp    c001f600 <Vm::faultHandler(regs*)+0x7cf>
c001f524:	50                   	push   eax
c001f525:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f528:	53                   	push   ebx
c001f529:	68 c5 c8 02 c0       	push   0xc002c8c5
c001f52e:	e8 26 3a ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f533:	58                   	pop    eax
c001f534:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f538:	5a                   	pop    edx
c001f539:	50                   	push   eax
c001f53a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f53e:	50                   	push   eax
c001f53f:	e8 0b f5 ff ff       	call   c001ea4f <Vm::outbv(unsigned short, unsigned char)>
c001f544:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f548:	e9 85 00 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7a1>
c001f54d:	50                   	push   eax
c001f54e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f551:	53                   	push   ebx
c001f552:	68 ce c8 02 c0       	push   0xc002c8ce
c001f557:	e8 fd 39 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f55c:	83 c4 10             	add    esp,0x10
c001f55f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f563:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f568:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f56b:	74 03                	je     c001f570 <Vm::faultHandler(regs*)+0x73f>
c001f56d:	ef                   	out    dx,eax
c001f56e:	eb ab                	jmp    c001f51b <Vm::faultHandler(regs*)+0x6ea>
c001f570:	66 ef                	out    dx,ax
c001f572:	eb a7                	jmp    c001f51b <Vm::faultHandler(regs*)+0x6ea>
c001f574:	55                   	push   ebp
c001f575:	55                   	push   ebp
c001f576:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f579:	68 d7 c8 02 c0       	push   0xc002c8d7
c001f57e:	e8 d6 39 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f583:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f58a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f58e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f591:	e8 a6 f4 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f596:	0f b6 c0             	movzx  eax,al
c001f599:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f59c:	eb 31                	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f59e:	56                   	push   esi
c001f59f:	56                   	push   esi
c001f5a0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a3:	68 dd c8 02 c0       	push   0xc002c8dd
c001f5a8:	e8 ac 39 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f5ad:	83 c4 10             	add    esp,0x10
c001f5b0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5b3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5b8:	74 03                	je     c001f5bd <Vm::faultHandler(regs*)+0x78c>
c001f5ba:	ed                   	in     eax,dx
c001f5bb:	eb 0d                	jmp    c001f5ca <Vm::faultHandler(regs*)+0x799>
c001f5bd:	66 ed                	in     ax,dx
c001f5bf:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5c2:	0f b7 c0             	movzx  eax,ax
c001f5c5:	66 31 d2             	xor    dx,dx
c001f5c8:	09 d0                	or     eax,edx
c001f5ca:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5cd:	eb 2e                	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f5cf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5d2:	83 c4 10             	add    esp,0x10
c001f5d5:	eb 29                	jmp    c001f600 <Vm::faultHandler(regs*)+0x7cf>
c001f5d7:	50                   	push   eax
c001f5d8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5db:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5de:	68 ec c8 02 c0       	push   0xc002c8ec
c001f5e3:	e8 71 39 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f5e8:	83 c4 10             	add    esp,0x10
c001f5eb:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5ee:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5f3:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5f6:	74 03                	je     c001f5fb <Vm::faultHandler(regs*)+0x7ca>
c001f5f8:	ef                   	out    dx,eax
c001f5f9:	eb 02                	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f5fb:	66 ef                	out    dx,ax
c001f5fd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f600:	b0 01                	mov    al,0x1
c001f602:	eb 56                	jmp    c001f65a <Vm::faultHandler(regs*)+0x829>
c001f604:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f608:	51                   	push   ecx
c001f609:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f60d:	51                   	push   ecx
c001f60e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f612:	51                   	push   ecx
c001f613:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f617:	51                   	push   ecx
c001f618:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f61c:	52                   	push   edx
c001f61d:	50                   	push   eax
c001f61e:	50                   	push   eax
c001f61f:	68 f5 c8 02 c0       	push   0xc002c8f5
c001f624:	e8 30 39 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c001f629:	83 c4 20             	add    esp,0x20
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	6a 60                	push   0x60
c001f631:	e8 06 f4 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f636:	83 c4 10             	add    esp,0x10
c001f639:	3c 1c                	cmp    al,0x1c
c001f63b:	74 04                	je     c001f641 <Vm::faultHandler(regs*)+0x810>
c001f63d:	3c 5a                	cmp    al,0x5a
c001f63f:	75 eb                	jne    c001f62c <Vm::faultHandler(regs*)+0x7fb>
c001f641:	3c 1c                	cmp    al,0x1c
c001f643:	74 04                	je     c001f649 <Vm::faultHandler(regs*)+0x818>
c001f645:	3c 5a                	cmp    al,0x5a
c001f647:	75 0f                	jne    c001f658 <Vm::faultHandler(regs*)+0x827>
c001f649:	83 ec 0c             	sub    esp,0xc
c001f64c:	6a 60                	push   0x60
c001f64e:	e8 e9 f3 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f653:	83 c4 10             	add    esp,0x10
c001f656:	eb e9                	jmp    c001f641 <Vm::faultHandler(regs*)+0x810>
c001f658:	31 c0                	xor    eax,eax
c001f65a:	83 c4 1c             	add    esp,0x1c
c001f65d:	5b                   	pop    ebx
c001f65e:	5e                   	pop    esi
c001f65f:	5f                   	pop    edi
c001f660:	5d                   	pop    ebp
c001f661:	c3                   	ret    

c001f662 <Vm::fpuInternalTo32(unsigned long long)>:
c001f662:	57                   	push   edi
c001f663:	56                   	push   esi
c001f664:	53                   	push   ebx
c001f665:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66d:	89 d6                	mov    esi,edx
c001f66f:	89 d7                	mov    edi,edx
c001f671:	89 c1                	mov    ecx,eax
c001f673:	c1 ef 14             	shr    edi,0x14
c001f676:	89 d3                	mov    ebx,edx
c001f678:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f67e:	31 d2                	xor    edx,edx
c001f680:	89 f8                	mov    eax,edi
c001f682:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f688:	bf ff 00 00 00       	mov    edi,0xff
c001f68d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f692:	83 d2 ff             	adc    edx,0xffffffff
c001f695:	39 c7                	cmp    edi,eax
c001f697:	bf 00 00 00 00       	mov    edi,0x0
c001f69c:	19 d7                	sbb    edi,edx
c001f69e:	72 15                	jb     c001f6b5 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6a0:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6a4:	c1 e0 17             	shl    eax,0x17
c001f6a7:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6ad:	09 f1                	or     ecx,esi
c001f6af:	09 c1                	or     ecx,eax
c001f6b1:	89 cf                	mov    edi,ecx
c001f6b3:	eb 02                	jmp    c001f6b7 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6b5:	31 ff                	xor    edi,edi
c001f6b7:	89 f8                	mov    eax,edi
c001f6b9:	5b                   	pop    ebx
c001f6ba:	5e                   	pop    esi
c001f6bb:	5f                   	pop    edi
c001f6bc:	c3                   	ret    

c001f6bd <Vm::fpuInternalTo64(unsigned long long)>:
c001f6bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6c5:	c3                   	ret    

c001f6c6 <Vm::fpu32ToInternal(unsigned int)>:
c001f6c6:	57                   	push   edi
c001f6c7:	31 ff                	xor    edi,edi
c001f6c9:	56                   	push   esi
c001f6ca:	53                   	push   ebx
c001f6cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6cf:	89 cb                	mov    ebx,ecx
c001f6d1:	89 ce                	mov    esi,ecx
c001f6d3:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6d9:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6df:	c1 e9 17             	shr    ecx,0x17
c001f6e2:	89 f0                	mov    eax,esi
c001f6e4:	0f b6 d1             	movzx  edx,cl
c001f6e7:	81 c2 80 03 00 00    	add    edx,0x380
c001f6ed:	89 d1                	mov    ecx,edx
c001f6ef:	89 fa                	mov    edx,edi
c001f6f1:	c1 e1 14             	shl    ecx,0x14
c001f6f4:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6f8:	c1 e0 1d             	shl    eax,0x1d
c001f6fb:	89 d7                	mov    edi,edx
c001f6fd:	89 c6                	mov    esi,eax
c001f6ff:	89 ca                	mov    edx,ecx
c001f701:	89 f0                	mov    eax,esi
c001f703:	09 fa                	or     edx,edi
c001f705:	09 da                	or     edx,ebx
c001f707:	5b                   	pop    ebx
c001f708:	5e                   	pop    esi
c001f709:	5f                   	pop    edi
c001f70a:	c3                   	ret    

c001f70b <Vm::fpu64ToInternal(unsigned long long)>:
c001f70b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f713:	c3                   	ret    

c001f714 <Vm::fpuFloatToLong(unsigned long long)>:
c001f714:	57                   	push   edi
c001f715:	31 c0                	xor    eax,eax
c001f717:	56                   	push   esi
c001f718:	31 d2                	xor    edx,edx
c001f71a:	53                   	push   ebx
c001f71b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f723:	89 d9                	mov    ecx,ebx
c001f725:	c1 e9 14             	shr    ecx,0x14
c001f728:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f72e:	89 cf                	mov    edi,ecx
c001f730:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f736:	78 33                	js     c001f76b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f738:	89 d9                	mov    ecx,ebx
c001f73a:	89 f0                	mov    eax,esi
c001f73c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f742:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f748:	89 ca                	mov    edx,ecx
c001f74a:	b9 34 00 00 00       	mov    ecx,0x34
c001f74f:	29 f9                	sub    ecx,edi
c001f751:	0f ad d0             	shrd   eax,edx,cl
c001f754:	d3 fa                	sar    edx,cl
c001f756:	f6 c1 20             	test   cl,0x20
c001f759:	74 05                	je     c001f760 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f75b:	89 d0                	mov    eax,edx
c001f75d:	c1 fa 1f             	sar    edx,0x1f
c001f760:	85 db                	test   ebx,ebx
c001f762:	79 07                	jns    c001f76b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f764:	f7 d8                	neg    eax
c001f766:	83 d2 00             	adc    edx,0x0
c001f769:	f7 da                	neg    edx
c001f76b:	5b                   	pop    ebx
c001f76c:	5e                   	pop    esi
c001f76d:	5f                   	pop    edi
c001f76e:	c3                   	ret    

c001f76f <Vm::fpuULongToFloat(unsigned long long)>:
c001f76f:	57                   	push   edi
c001f770:	31 c9                	xor    ecx,ecx
c001f772:	56                   	push   esi
c001f773:	53                   	push   ebx
c001f774:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f778:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f77c:	0f ba e7 14          	bt     edi,0x14
c001f780:	72 07                	jb     c001f789 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f782:	01 f6                	add    esi,esi
c001f784:	11 ff                	adc    edi,edi
c001f786:	41                   	inc    ecx
c001f787:	eb f3                	jmp    c001f77c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f789:	89 fa                	mov    edx,edi
c001f78b:	89 f0                	mov    eax,esi
c001f78d:	bb 33 04 00 00       	mov    ebx,0x433
c001f792:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f798:	29 cb                	sub    ebx,ecx
c001f79a:	89 d9                	mov    ecx,ebx
c001f79c:	5b                   	pop    ebx
c001f79d:	c1 e1 14             	shl    ecx,0x14
c001f7a0:	5e                   	pop    esi
c001f7a1:	09 ca                	or     edx,ecx
c001f7a3:	5f                   	pop    edi
c001f7a4:	c3                   	ret    

c001f7a5 <Vm::fpuLongToFloat(long long)>:
c001f7a5:	56                   	push   esi
c001f7a6:	31 c0                	xor    eax,eax
c001f7a8:	53                   	push   ebx
c001f7a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7b1:	39 c8                	cmp    eax,ecx
c001f7b3:	19 d8                	sbb    eax,ebx
c001f7b5:	7d 04                	jge    c001f7bb <Vm::fpuLongToFloat(long long)+0x16>
c001f7b7:	31 f6                	xor    esi,esi
c001f7b9:	eb 0c                	jmp    c001f7c7 <Vm::fpuLongToFloat(long long)+0x22>
c001f7bb:	f7 d9                	neg    ecx
c001f7bd:	be 01 00 00 00       	mov    esi,0x1
c001f7c2:	83 d3 00             	adc    ebx,0x0
c001f7c5:	f7 db                	neg    ebx
c001f7c7:	31 c0                	xor    eax,eax
c001f7c9:	0f ba e3 14          	bt     ebx,0x14
c001f7cd:	72 07                	jb     c001f7d6 <Vm::fpuLongToFloat(long long)+0x31>
c001f7cf:	01 c9                	add    ecx,ecx
c001f7d1:	11 db                	adc    ebx,ebx
c001f7d3:	40                   	inc    eax
c001f7d4:	eb f3                	jmp    c001f7c9 <Vm::fpuLongToFloat(long long)+0x24>
c001f7d6:	ba 33 04 00 00       	mov    edx,0x433
c001f7db:	29 c2                	sub    edx,eax
c001f7dd:	89 c8                	mov    eax,ecx
c001f7df:	c1 e2 14             	shl    edx,0x14
c001f7e2:	89 d9                	mov    ecx,ebx
c001f7e4:	89 f3                	mov    ebx,esi
c001f7e6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7ec:	09 ca                	or     edx,ecx
c001f7ee:	84 db                	test   bl,bl
c001f7f0:	74 06                	je     c001f7f8 <Vm::fpuLongToFloat(long long)+0x53>
c001f7f2:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7f8:	5b                   	pop    ebx
c001f7f9:	5e                   	pop    esi
c001f7fa:	c3                   	ret    

c001f7fb <Vm::fpuGet0()>:
c001f7fb:	31 c0                	xor    eax,eax
c001f7fd:	31 d2                	xor    edx,edx
c001f7ff:	c3                   	ret    

c001f800 <Vm::fpuGet1()>:
c001f800:	b8 01 00 00 00       	mov    eax,0x1
c001f805:	31 d2                	xor    edx,edx
c001f807:	c3                   	ret    

c001f808 <Vm::fpuGetPi()>:
c001f808:	b8 03 00 00 00       	mov    eax,0x3
c001f80d:	31 d2                	xor    edx,edx
c001f80f:	c3                   	ret    

c001f810 <Vm::fpuGetLog2E()>:
c001f810:	83 ec 18             	sub    esp,0x18
c001f813:	68 54 c9 02 c0       	push   0xc002c954
c001f818:	e8 de ad ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f81d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f822:	31 d2                	xor    edx,edx
c001f824:	83 c4 1c             	add    esp,0x1c
c001f827:	c3                   	ret    

c001f828 <Vm::fpuGetLogE2()>:
c001f828:	83 ec 18             	sub    esp,0x18
c001f82b:	68 60 c9 02 c0       	push   0xc002c960
c001f830:	e8 c6 ad ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f835:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f83a:	31 d2                	xor    edx,edx
c001f83c:	83 c4 1c             	add    esp,0x1c
c001f83f:	c3                   	ret    

c001f840 <Vm::fpuGetLog210()>:
c001f840:	83 ec 18             	sub    esp,0x18
c001f843:	68 6c c9 02 c0       	push   0xc002c96c
c001f848:	e8 ae ad ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f84d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f852:	31 d2                	xor    edx,edx
c001f854:	83 c4 1c             	add    esp,0x1c
c001f857:	c3                   	ret    

c001f858 <Vm::fpuGetLog102()>:
c001f858:	83 ec 18             	sub    esp,0x18
c001f85b:	68 79 c9 02 c0       	push   0xc002c979
c001f860:	e8 96 ad ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f865:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f86a:	31 d2                	xor    edx,edx
c001f86c:	83 c4 1c             	add    esp,0x1c
c001f86f:	c3                   	ret    

c001f870 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f874:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f87c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f880:	0f 92 c0             	setb   al
c001f883:	c3                   	ret    

c001f884 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f890:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f894:	09 c2                	or     edx,eax
c001f896:	0f 94 c0             	sete   al
c001f899:	c3                   	ret    

c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f89a:	57                   	push   edi
c001f89b:	56                   	push   esi
c001f89c:	53                   	push   ebx
c001f89d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8ad:	57                   	push   edi
c001f8ae:	56                   	push   esi
c001f8af:	53                   	push   ebx
c001f8b0:	51                   	push   ecx
c001f8b1:	e8 ce ff ff ff       	call   c001f884 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8b6:	83 c4 10             	add    esp,0x10
c001f8b9:	88 c2                	mov    dl,al
c001f8bb:	31 c0                	xor    eax,eax
c001f8bd:	84 d2                	test   dl,dl
c001f8bf:	75 0c                	jne    c001f8cd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	53                   	push   ebx
c001f8c4:	51                   	push   ecx
c001f8c5:	e8 a6 ff ff ff       	call   c001f870 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8ca:	83 c4 10             	add    esp,0x10
c001f8cd:	83 e0 01             	and    eax,0x1
c001f8d0:	5b                   	pop    ebx
c001f8d1:	88 c1                	mov    cl,al
c001f8d3:	83 e2 01             	and    edx,0x1
c001f8d6:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001f8db:	c1 e2 06             	shl    edx,0x6
c001f8de:	83 e0 ba             	and    eax,0xffffffba
c001f8e1:	5e                   	pop    esi
c001f8e2:	09 c8                	or     eax,ecx
c001f8e4:	5f                   	pop    edi
c001f8e5:	09 d0                	or     eax,edx
c001f8e7:	a2 e1 1b 03 c0       	mov    ds:0xc0031be1,al
c001f8ec:	c3                   	ret    

c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8f9:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8fd:	c3                   	ret    

c001f8fe <Vm::fpuAbs(unsigned long long)>:
c001f8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f902:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f906:	c3                   	ret    

c001f907 <Vm::fpuChs(unsigned long long)>:
c001f907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f90f:	f7 d8                	neg    eax
c001f911:	83 d2 00             	adc    edx,0x0
c001f914:	f7 da                	neg    edx
c001f916:	c3                   	ret    

c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f917:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f91b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f920:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f924:	eb c7                	jmp    c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f926:	53                   	push   ebx
c001f927:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f92b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f92f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f933:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f937:	0f af ca             	imul   ecx,edx
c001f93a:	0f af d8             	imul   ebx,eax
c001f93d:	f7 e2                	mul    edx
c001f93f:	01 d9                	add    ecx,ebx
c001f941:	5b                   	pop    ebx
c001f942:	01 ca                	add    edx,ecx
c001f944:	c3                   	ret    

c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f945:	83 ec 0c             	sub    esp,0xc
c001f948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f958:	e8 9f 70 00 00       	call   c00269fc <__udivdi3>
c001f95d:	83 c4 1c             	add    esp,0x1c
c001f960:	c3                   	ret    

c001f961 <Vm::fpuSquare(unsigned long long)>:
c001f961:	50                   	push   eax
c001f962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f966:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f96a:	52                   	push   edx
c001f96b:	50                   	push   eax
c001f96c:	52                   	push   edx
c001f96d:	50                   	push   eax
c001f96e:	e8 b3 ff ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f973:	83 c4 14             	add    esp,0x14
c001f976:	c3                   	ret    

c001f977 <Vm::fpuGetReg(int)>:
c001f977:	83 ec 0c             	sub    esp,0xc
c001f97a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f97f:	76 10                	jbe    c001f991 <Vm::fpuGetReg(int)+0x1a>
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	68 86 c9 02 c0       	push   0xc002c986
c001f989:	e8 6d ac ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001f996:	b9 08 00 00 00       	mov    ecx,0x8
c001f99b:	c0 e8 03             	shr    al,0x3
c001f99e:	83 e0 07             	and    eax,0x7
c001f9a1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9a5:	99                   	cdq    
c001f9a6:	f7 f9                	idiv   ecx
c001f9a8:	8b 04 d5 e4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce41c]
c001f9af:	8b 14 d5 e8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce418]
c001f9b6:	83 c4 0c             	add    esp,0xc
c001f9b9:	c3                   	ret    

c001f9ba <Vm::fpuSetReg(int, unsigned long long)>:
c001f9ba:	57                   	push   edi
c001f9bb:	56                   	push   esi
c001f9bc:	52                   	push   edx
c001f9bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9c5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9ca:	76 10                	jbe    c001f9dc <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	68 99 c9 02 c0       	push   0xc002c999
c001f9d4:	e8 22 ac ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f9d9:	83 c4 10             	add    esp,0x10
c001f9dc:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001f9e1:	b9 08 00 00 00       	mov    ecx,0x8
c001f9e6:	c0 e8 03             	shr    al,0x3
c001f9e9:	83 e0 07             	and    eax,0x7
c001f9ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9f0:	99                   	cdq    
c001f9f1:	f7 f9                	idiv   ecx
c001f9f3:	89 34 d5 e4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce41c],esi
c001f9fa:	89 3c d5 e8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce418],edi
c001fa01:	58                   	pop    eax
c001fa02:	5e                   	pop    esi
c001fa03:	5f                   	pop    edi
c001fa04:	c3                   	ret    

c001fa05 <Vm::fpuPush(unsigned long long)>:
c001fa05:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001fa0a:	c0 e8 03             	shr    al,0x3
c001fa0d:	83 e0 07             	and    eax,0x7
c001fa10:	83 c0 07             	add    eax,0x7
c001fa13:	88 c2                	mov    dl,al
c001fa15:	83 e0 07             	and    eax,0x7
c001fa18:	83 e2 07             	and    edx,0x7
c001fa1b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa22:	8a 15 e1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031be1
c001fa28:	83 e2 c7             	and    edx,0xffffffc7
c001fa2b:	09 ca                	or     edx,ecx
c001fa2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa31:	88 15 e1 1b 03 c0    	mov    BYTE PTR ds:0xc0031be1,dl
c001fa37:	89 0c c5 e8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce418],ecx
c001fa3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa42:	89 14 c5 e4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce41c],edx
c001fa49:	a1 24 1c 03 c0       	mov    eax,ds:0xc0031c24
c001fa4e:	83 f8 08             	cmp    eax,0x8
c001fa51:	75 08                	jne    c001fa5b <Vm::fpuPush(unsigned long long)+0x56>
c001fa53:	80 0d e0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031be0,0x40
c001fa5a:	c3                   	ret    
c001fa5b:	40                   	inc    eax
c001fa5c:	a3 24 1c 03 c0       	mov    ds:0xc0031c24,eax
c001fa61:	c3                   	ret    

c001fa62 <Vm::fpuPop()>:
c001fa62:	8a 0d e1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031be1
c001fa68:	53                   	push   ebx
c001fa69:	c0 e9 03             	shr    cl,0x3
c001fa6c:	8a 1d e1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031be1
c001fa72:	83 e1 07             	and    ecx,0x7
c001fa75:	83 e3 c7             	and    ebx,0xffffffc7
c001fa78:	8b 04 cd e4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce41c]
c001fa7f:	8b 14 cd e8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce418]
c001fa86:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa8d:	83 e1 38             	and    ecx,0x38
c001fa90:	09 d9                	or     ecx,ebx
c001fa92:	88 0d e1 1b 03 c0    	mov    BYTE PTR ds:0xc0031be1,cl
c001fa98:	8b 0d 24 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c24
c001fa9e:	85 c9                	test   ecx,ecx
c001faa0:	74 09                	je     c001faab <Vm::fpuPop()+0x49>
c001faa2:	49                   	dec    ecx
c001faa3:	89 0d 24 1c 03 c0    	mov    DWORD PTR ds:0xc0031c24,ecx
c001faa9:	eb 07                	jmp    c001fab2 <Vm::fpuPop()+0x50>
c001faab:	80 0d e0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031be0,0x40
c001fab2:	5b                   	pop    ebx
c001fab3:	c3                   	ret    

c001fab4 <Vm::x87Handler(regs*)>:
c001fab4:	55                   	push   ebp
c001fab5:	57                   	push   edi
c001fab6:	56                   	push   esi
c001fab7:	53                   	push   ebx
c001fab8:	83 ec 1c             	sub    esp,0x1c
c001fabb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fabf:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fac4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fac7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001facf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fad3:	50                   	push   eax
c001fad4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fad8:	50                   	push   eax
c001fad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fadd:	50                   	push   eax
c001fade:	53                   	push   ebx
c001fadf:	e8 de a1 ff ff       	call   c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fae4:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	89 c6                	mov    esi,eax
c001faec:	80 fa d9             	cmp    dl,0xd9
c001faef:	0f 85 52 01 00 00    	jne    c001fc47 <Vm::x87Handler(regs*)+0x193>
c001faf5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf9:	8d 50 20             	lea    edx,[eax+0x20]
c001fafc:	80 fa 0e             	cmp    dl,0xe
c001faff:	0f 87 86 00 00 00    	ja     c001fb8b <Vm::x87Handler(regs*)+0xd7>
c001fb05:	0f b6 d2             	movzx  edx,dl
c001fb08:	ff 24 95 ac c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3654]
c001fb0f:	e8 e7 fc ff ff       	call   c001f7fb <Vm::fpuGet0()>
c001fb14:	eb 05                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb16:	e8 e5 fc ff ff       	call   c001f800 <Vm::fpuGet1()>
c001fb1b:	57                   	push   edi
c001fb1c:	57                   	push   edi
c001fb1d:	52                   	push   edx
c001fb1e:	50                   	push   eax
c001fb1f:	e8 e1 fe ff ff       	call   c001fa05 <Vm::fpuPush(unsigned long long)>
c001fb24:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb28:	83 c4 10             	add    esp,0x10
c001fb2b:	b0 01                	mov    al,0x1
c001fb2d:	e9 e3 09 00 00       	jmp    c0020515 <Vm::x87Handler(regs*)+0xa61>
c001fb32:	83 ec 0c             	sub    esp,0xc
c001fb35:	6a 00                	push   0x0
c001fb37:	e8 3b fe ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fb3c:	59                   	pop    ecx
c001fb3d:	5e                   	pop    esi
c001fb3e:	52                   	push   edx
c001fb3f:	50                   	push   eax
c001fb40:	e8 c2 fd ff ff       	call   c001f907 <Vm::fpuChs(unsigned long long)>
c001fb45:	eb 13                	jmp    c001fb5a <Vm::x87Handler(regs*)+0xa6>
c001fb47:	83 ec 0c             	sub    esp,0xc
c001fb4a:	6a 00                	push   0x0
c001fb4c:	e8 26 fe ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fb51:	5f                   	pop    edi
c001fb52:	5d                   	pop    ebp
c001fb53:	52                   	push   edx
c001fb54:	50                   	push   eax
c001fb55:	e8 a4 fd ff ff       	call   c001f8fe <Vm::fpuAbs(unsigned long long)>
c001fb5a:	83 c4 0c             	add    esp,0xc
c001fb5d:	52                   	push   edx
c001fb5e:	50                   	push   eax
c001fb5f:	6a 00                	push   0x0
c001fb61:	e8 54 fe ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c001fb66:	eb bc                	jmp    c001fb24 <Vm::x87Handler(regs*)+0x70>
c001fb68:	e8 d3 fc ff ff       	call   c001f840 <Vm::fpuGetLog210()>
c001fb6d:	eb ac                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb6f:	e8 9c fc ff ff       	call   c001f810 <Vm::fpuGetLog2E()>
c001fb74:	eb a5                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb76:	e8 8d fc ff ff       	call   c001f808 <Vm::fpuGetPi()>
c001fb7b:	eb 9e                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb7d:	e8 d6 fc ff ff       	call   c001f858 <Vm::fpuGetLog102()>
c001fb82:	eb 97                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb84:	e8 9f fc ff ff       	call   c001f828 <Vm::fpuGetLogE2()>
c001fb89:	eb 90                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb8b:	8d 50 40             	lea    edx,[eax+0x40]
c001fb8e:	80 fa 07             	cmp    dl,0x7
c001fb91:	77 15                	ja     c001fba8 <Vm::x87Handler(regs*)+0xf4>
c001fb93:	83 ec 0c             	sub    esp,0xc
c001fb96:	2d c0 00 00 00       	sub    eax,0xc0
c001fb9b:	50                   	push   eax
c001fb9c:	e8 d6 fd ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fba1:	59                   	pop    ecx
c001fba2:	5e                   	pop    esi
c001fba3:	e9 75 ff ff ff       	jmp    c001fb1d <Vm::x87Handler(regs*)+0x69>
c001fba8:	8d 50 38             	lea    edx,[eax+0x38]
c001fbab:	80 fa 07             	cmp    dl,0x7
c001fbae:	77 3c                	ja     c001fbec <Vm::x87Handler(regs*)+0x138>
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb8:	50                   	push   eax
c001fbb9:	e8 b9 fd ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fbbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc5:	89 c6                	mov    esi,eax
c001fbc7:	89 d7                	mov    edi,edx
c001fbc9:	e8 a9 fd ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fbce:	83 c4 0c             	add    esp,0xc
c001fbd1:	52                   	push   edx
c001fbd2:	50                   	push   eax
c001fbd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbd7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbdc:	50                   	push   eax
c001fbdd:	e8 d8 fd ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c001fbe2:	83 c4 0c             	add    esp,0xc
c001fbe5:	57                   	push   edi
c001fbe6:	56                   	push   esi
c001fbe7:	e9 73 ff ff ff       	jmp    c001fb5f <Vm::x87Handler(regs*)+0xab>
c001fbec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbf0:	84 d2                	test   dl,dl
c001fbf2:	75 0f                	jne    c001fc03 <Vm::x87Handler(regs*)+0x14f>
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	ff 36                	push   DWORD PTR [esi]
c001fbf9:	e8 c8 fa ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c001fbfe:	e9 bf 00 00 00       	jmp    c001fcc2 <Vm::x87Handler(regs*)+0x20e>
c001fc03:	80 fa 03             	cmp    dl,0x3
c001fc06:	75 13                	jne    c001fc1b <Vm::x87Handler(regs*)+0x167>
c001fc08:	e8 55 fe ff ff       	call   c001fa62 <Vm::fpuPop()>
c001fc0d:	55                   	push   ebp
c001fc0e:	55                   	push   ebp
c001fc0f:	52                   	push   edx
c001fc10:	50                   	push   eax
c001fc11:	e8 4c fa ff ff       	call   c001f662 <Vm::fpuInternalTo32(unsigned long long)>
c001fc16:	e9 88 00 00 00       	jmp    c001fca3 <Vm::x87Handler(regs*)+0x1ef>
c001fc1b:	80 fa 05             	cmp    dl,0x5
c001fc1e:	75 0e                	jne    c001fc2e <Vm::x87Handler(regs*)+0x17a>
c001fc20:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc23:	66 a3 e2 1b 03 c0    	mov    ds:0xc0031be2,ax
c001fc29:	e9 df 00 00 00       	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c001fc2e:	31 c0                	xor    eax,eax
c001fc30:	80 fa 07             	cmp    dl,0x7
c001fc33:	0f 85 dc 08 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c001fc39:	66 a1 e2 1b 03 c0    	mov    ax,ds:0xc0031be2
c001fc3f:	66 89 06             	mov    WORD PTR [esi],ax
c001fc42:	e9 c6 00 00 00       	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c001fc47:	80 fa d8             	cmp    dl,0xd8
c001fc4a:	0f 84 c9 00 00 00    	je     c001fd19 <Vm::x87Handler(regs*)+0x265>
c001fc50:	80 fa dc             	cmp    dl,0xdc
c001fc53:	0f 84 0d 02 00 00    	je     c001fe66 <Vm::x87Handler(regs*)+0x3b2>
c001fc59:	80 fa de             	cmp    dl,0xde
c001fc5c:	0f 84 cd 02 00 00    	je     c001ff2f <Vm::x87Handler(regs*)+0x47b>
c001fc62:	80 fa dd             	cmp    dl,0xdd
c001fc65:	0f 84 5f 04 00 00    	je     c00200ca <Vm::x87Handler(regs*)+0x616>
c001fc6b:	80 fa da             	cmp    dl,0xda
c001fc6e:	0f 84 24 05 00 00    	je     c0020198 <Vm::x87Handler(regs*)+0x6e4>
c001fc74:	80 fa df             	cmp    dl,0xdf
c001fc77:	0f 84 68 05 00 00    	je     c00201e5 <Vm::x87Handler(regs*)+0x731>
c001fc7d:	31 c0                	xor    eax,eax
c001fc7f:	80 fa db             	cmp    dl,0xdb
c001fc82:	0f 85 8d 08 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c001fc88:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc8c:	80 fa 03             	cmp    dl,0x3
c001fc8f:	0f 85 70 06 00 00    	jne    c0020305 <Vm::x87Handler(regs*)+0x851>
c001fc95:	e8 c8 fd ff ff       	call   c001fa62 <Vm::fpuPop()>
c001fc9a:	55                   	push   ebp
c001fc9b:	55                   	push   ebp
c001fc9c:	52                   	push   edx
c001fc9d:	50                   	push   eax
c001fc9e:	e8 71 fa ff ff       	call   c001f714 <Vm::fpuFloatToLong(unsigned long long)>
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	89 06                	mov    DWORD PTR [esi],eax
c001fca8:	eb 63                	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c001fcaa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcae:	84 d2                	test   dl,dl
c001fcb0:	0f 85 e6 05 00 00    	jne    c002029c <Vm::x87Handler(regs*)+0x7e8>
c001fcb6:	57                   	push   edi
c001fcb7:	57                   	push   edi
c001fcb8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcbb:	ff 36                	push   DWORD PTR [esi]
c001fcbd:	e8 49 fa ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c001fcc2:	5e                   	pop    esi
c001fcc3:	5f                   	pop    edi
c001fcc4:	52                   	push   edx
c001fcc5:	50                   	push   eax
c001fcc6:	e8 3a fd ff ff       	call   c001fa05 <Vm::fpuPush(unsigned long long)>
c001fccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fccf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcd2:	e9 51 fe ff ff       	jmp    c001fb28 <Vm::x87Handler(regs*)+0x74>
c001fcd7:	80 fa 03             	cmp    dl,0x3
c001fcda:	0f 85 d7 06 00 00    	jne    c00203b7 <Vm::x87Handler(regs*)+0x903>
c001fce0:	57                   	push   edi
c001fce1:	57                   	push   edi
c001fce2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce5:	ff 36                	push   DWORD PTR [esi]
c001fce7:	e8 1f fa ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c001fcec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf3:	89 c6                	mov    esi,eax
c001fcf5:	89 d7                	mov    edi,edx
c001fcf7:	e8 7b fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fcfc:	57                   	push   edi
c001fcfd:	56                   	push   esi
c001fcfe:	52                   	push   edx
c001fcff:	50                   	push   eax
c001fd00:	e8 95 fb ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd05:	83 c4 20             	add    esp,0x20
c001fd08:	e8 55 fd ff ff       	call   c001fa62 <Vm::fpuPop()>
c001fd0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd11:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd14:	e9 12 fe ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c001fd19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd1d:	8d 50 40             	lea    edx,[eax+0x40]
c001fd20:	80 fa 07             	cmp    dl,0x7
c001fd23:	77 29                	ja     c001fd4e <Vm::x87Handler(regs*)+0x29a>
c001fd25:	83 ec 0c             	sub    esp,0xc
c001fd28:	2d c0 00 00 00       	sub    eax,0xc0
c001fd2d:	50                   	push   eax
c001fd2e:	e8 44 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd3a:	89 c6                	mov    esi,eax
c001fd3c:	89 d7                	mov    edi,edx
c001fd3e:	e8 34 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd43:	57                   	push   edi
c001fd44:	56                   	push   esi
c001fd45:	52                   	push   edx
c001fd46:	50                   	push   eax
c001fd47:	e8 a1 fb ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd4c:	eb 2f                	jmp    c001fd7d <Vm::x87Handler(regs*)+0x2c9>
c001fd4e:	8d 50 38             	lea    edx,[eax+0x38]
c001fd51:	80 fa 07             	cmp    dl,0x7
c001fd54:	77 2f                	ja     c001fd85 <Vm::x87Handler(regs*)+0x2d1>
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	2d c8 00 00 00       	sub    eax,0xc8
c001fd5e:	50                   	push   eax
c001fd5f:	e8 13 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6b:	89 c6                	mov    esi,eax
c001fd6d:	89 d7                	mov    edi,edx
c001fd6f:	e8 03 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd74:	57                   	push   edi
c001fd75:	56                   	push   esi
c001fd76:	52                   	push   edx
c001fd77:	50                   	push   eax
c001fd78:	e8 a9 fb ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd7d:	83 c4 1c             	add    esp,0x1c
c001fd80:	e9 d8 fd ff ff       	jmp    c001fb5d <Vm::x87Handler(regs*)+0xa9>
c001fd85:	8d 50 30             	lea    edx,[eax+0x30]
c001fd88:	80 fa 07             	cmp    dl,0x7
c001fd8b:	77 0d                	ja     c001fd9a <Vm::x87Handler(regs*)+0x2e6>
c001fd8d:	83 ec 0c             	sub    esp,0xc
c001fd90:	2d d0 00 00 00       	sub    eax,0xd0
c001fd95:	e9 99 03 00 00       	jmp    c0020133 <Vm::x87Handler(regs*)+0x67f>
c001fd9a:	8d 50 28             	lea    edx,[eax+0x28]
c001fd9d:	80 fa 07             	cmp    dl,0x7
c001fda0:	77 0d                	ja     c001fdaf <Vm::x87Handler(regs*)+0x2fb>
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	2d d8 00 00 00       	sub    eax,0xd8
c001fdaa:	e9 c0 03 00 00       	jmp    c002016f <Vm::x87Handler(regs*)+0x6bb>
c001fdaf:	8d 50 20             	lea    edx,[eax+0x20]
c001fdb2:	80 fa 07             	cmp    dl,0x7
c001fdb5:	77 1b                	ja     c001fdd2 <Vm::x87Handler(regs*)+0x31e>
c001fdb7:	83 ec 0c             	sub    esp,0xc
c001fdba:	2d e0 00 00 00       	sub    eax,0xe0
c001fdbf:	50                   	push   eax
c001fdc0:	e8 b2 fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fdc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdcc:	89 c6                	mov    esi,eax
c001fdce:	89 d7                	mov    edi,edx
c001fdd0:	eb 22                	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x340>
c001fdd2:	8d 50 18             	lea    edx,[eax+0x18]
c001fdd5:	80 fa 07             	cmp    dl,0x7
c001fdd8:	77 2d                	ja     c001fe07 <Vm::x87Handler(regs*)+0x353>
c001fdda:	83 ec 0c             	sub    esp,0xc
c001fddd:	6a 00                	push   0x0
c001fddf:	e8 93 fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fde4:	89 c6                	mov    esi,eax
c001fde6:	89 d7                	mov    edi,edx
c001fde8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdec:	2d e8 00 00 00       	sub    eax,0xe8
c001fdf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdf4:	e8 7e fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fdf9:	57                   	push   edi
c001fdfa:	56                   	push   esi
c001fdfb:	52                   	push   edx
c001fdfc:	50                   	push   eax
c001fdfd:	e8 15 fb ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe02:	e9 76 ff ff ff       	jmp    c001fd7d <Vm::x87Handler(regs*)+0x2c9>
c001fe07:	8d 50 10             	lea    edx,[eax+0x10]
c001fe0a:	80 fa 07             	cmp    dl,0x7
c001fe0d:	77 1b                	ja     c001fe2a <Vm::x87Handler(regs*)+0x376>
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	2d f0 00 00 00       	sub    eax,0xf0
c001fe17:	50                   	push   eax
c001fe18:	e8 5a fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe24:	89 c6                	mov    esi,eax
c001fe26:	89 d7                	mov    edi,edx
c001fe28:	eb 22                	jmp    c001fe4c <Vm::x87Handler(regs*)+0x398>
c001fe2a:	3c f7                	cmp    al,0xf7
c001fe2c:	0f 86 d1 03 00 00    	jbe    c0020203 <Vm::x87Handler(regs*)+0x74f>
c001fe32:	83 ec 0c             	sub    esp,0xc
c001fe35:	6a 00                	push   0x0
c001fe37:	e8 3b fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe3c:	89 c6                	mov    esi,eax
c001fe3e:	89 d7                	mov    edi,edx
c001fe40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe44:	2d f8 00 00 00       	sub    eax,0xf8
c001fe49:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe4c:	e8 26 fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe51:	57                   	push   edi
c001fe52:	56                   	push   esi
c001fe53:	52                   	push   edx
c001fe54:	50                   	push   eax
c001fe55:	e8 eb fa ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe5a:	83 c4 1c             	add    esp,0x1c
c001fe5d:	52                   	push   edx
c001fe5e:	50                   	push   eax
c001fe5f:	6a 00                	push   0x0
c001fe61:	e9 51 02 00 00       	jmp    c00200b7 <Vm::x87Handler(regs*)+0x603>
c001fe66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6a:	8d 50 40             	lea    edx,[eax+0x40]
c001fe6d:	80 fa 07             	cmp    dl,0x7
c001fe70:	77 37                	ja     c001fea9 <Vm::x87Handler(regs*)+0x3f5>
c001fe72:	83 ec 0c             	sub    esp,0xc
c001fe75:	2d c0 00 00 00       	sub    eax,0xc0
c001fe7a:	50                   	push   eax
c001fe7b:	e8 f7 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe87:	89 c6                	mov    esi,eax
c001fe89:	89 d7                	mov    edi,edx
c001fe8b:	e8 e7 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe90:	57                   	push   edi
c001fe91:	56                   	push   esi
c001fe92:	52                   	push   edx
c001fe93:	50                   	push   eax
c001fe94:	e8 54 fa ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe99:	83 c4 1c             	add    esp,0x1c
c001fe9c:	52                   	push   edx
c001fe9d:	50                   	push   eax
c001fe9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea2:	2d c0 00 00 00       	sub    eax,0xc0
c001fea7:	eb 3d                	jmp    c001fee6 <Vm::x87Handler(regs*)+0x432>
c001fea9:	8d 50 38             	lea    edx,[eax+0x38]
c001feac:	80 fa 07             	cmp    dl,0x7
c001feaf:	77 3b                	ja     c001feec <Vm::x87Handler(regs*)+0x438>
c001feb1:	83 ec 0c             	sub    esp,0xc
c001feb4:	2d c8 00 00 00       	sub    eax,0xc8
c001feb9:	50                   	push   eax
c001feba:	e8 b8 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001febf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec6:	89 c6                	mov    esi,eax
c001fec8:	89 d7                	mov    edi,edx
c001feca:	e8 a8 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fecf:	57                   	push   edi
c001fed0:	56                   	push   esi
c001fed1:	52                   	push   edx
c001fed2:	50                   	push   eax
c001fed3:	e8 4e fa ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fed8:	83 c4 1c             	add    esp,0x1c
c001fedb:	52                   	push   edx
c001fedc:	50                   	push   eax
c001fedd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee1:	2d c8 00 00 00       	sub    eax,0xc8
c001fee6:	50                   	push   eax
c001fee7:	e9 75 fc ff ff       	jmp    c001fb61 <Vm::x87Handler(regs*)+0xad>
c001feec:	83 c0 18             	add    eax,0x18
c001feef:	3c 07                	cmp    al,0x7
c001fef1:	0f 87 3b 04 00 00    	ja     c0020332 <Vm::x87Handler(regs*)+0x87e>
c001fef7:	83 ec 0c             	sub    esp,0xc
c001fefa:	6a 00                	push   0x0
c001fefc:	e8 76 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff01:	89 c6                	mov    esi,eax
c001ff03:	89 d7                	mov    edi,edx
c001ff05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff09:	2d e8 00 00 00       	sub    eax,0xe8
c001ff0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff11:	e8 61 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff16:	57                   	push   edi
c001ff17:	56                   	push   esi
c001ff18:	52                   	push   edx
c001ff19:	50                   	push   eax
c001ff1a:	e8 f8 f9 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff1f:	83 c4 1c             	add    esp,0x1c
c001ff22:	52                   	push   edx
c001ff23:	50                   	push   eax
c001ff24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff28:	2d e8 00 00 00       	sub    eax,0xe8
c001ff2d:	eb b7                	jmp    c001fee6 <Vm::x87Handler(regs*)+0x432>
c001ff2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff33:	8d 50 40             	lea    edx,[eax+0x40]
c001ff36:	80 fa 07             	cmp    dl,0x7
c001ff39:	77 3a                	ja     c001ff75 <Vm::x87Handler(regs*)+0x4c1>
c001ff3b:	83 ec 0c             	sub    esp,0xc
c001ff3e:	2d c0 00 00 00       	sub    eax,0xc0
c001ff43:	50                   	push   eax
c001ff44:	e8 2e fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff50:	89 c6                	mov    esi,eax
c001ff52:	89 d7                	mov    edi,edx
c001ff54:	e8 1e fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff59:	57                   	push   edi
c001ff5a:	56                   	push   esi
c001ff5b:	52                   	push   edx
c001ff5c:	50                   	push   eax
c001ff5d:	e8 8b f9 ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff62:	83 c4 1c             	add    esp,0x1c
c001ff65:	52                   	push   edx
c001ff66:	50                   	push   eax
c001ff67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6b:	2d c0 00 00 00       	sub    eax,0xc0
c001ff70:	e9 9e 01 00 00       	jmp    c0020113 <Vm::x87Handler(regs*)+0x65f>
c001ff75:	8d 50 20             	lea    edx,[eax+0x20]
c001ff78:	80 fa 07             	cmp    dl,0x7
c001ff7b:	77 3a                	ja     c001ffb7 <Vm::x87Handler(regs*)+0x503>
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	2d e0 00 00 00       	sub    eax,0xe0
c001ff85:	50                   	push   eax
c001ff86:	e8 ec f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff92:	89 c6                	mov    esi,eax
c001ff94:	89 d7                	mov    edi,edx
c001ff96:	e8 dc f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff9b:	57                   	push   edi
c001ff9c:	56                   	push   esi
c001ff9d:	52                   	push   edx
c001ff9e:	50                   	push   eax
c001ff9f:	e8 73 f9 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffa4:	83 c4 1c             	add    esp,0x1c
c001ffa7:	52                   	push   edx
c001ffa8:	50                   	push   eax
c001ffa9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffad:	2d e0 00 00 00       	sub    eax,0xe0
c001ffb2:	e9 5c 01 00 00       	jmp    c0020113 <Vm::x87Handler(regs*)+0x65f>
c001ffb7:	8d 50 18             	lea    edx,[eax+0x18]
c001ffba:	80 fa 07             	cmp    dl,0x7
c001ffbd:	77 3b                	ja     c001fffa <Vm::x87Handler(regs*)+0x546>
c001ffbf:	83 ec 0c             	sub    esp,0xc
c001ffc2:	6a 00                	push   0x0
c001ffc4:	e8 ae f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ffc9:	89 c6                	mov    esi,eax
c001ffcb:	89 d7                	mov    edi,edx
c001ffcd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd1:	2d e8 00 00 00       	sub    eax,0xe8
c001ffd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffd9:	e8 99 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ffde:	57                   	push   edi
c001ffdf:	56                   	push   esi
c001ffe0:	52                   	push   edx
c001ffe1:	50                   	push   eax
c001ffe2:	e8 30 f9 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffe7:	83 c4 1c             	add    esp,0x1c
c001ffea:	52                   	push   edx
c001ffeb:	50                   	push   eax
c001ffec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff0:	2d e8 00 00 00       	sub    eax,0xe8
c001fff5:	e9 19 01 00 00       	jmp    c0020113 <Vm::x87Handler(regs*)+0x65f>
c001fffa:	8d 50 38             	lea    edx,[eax+0x38]
c001fffd:	80 fa 07             	cmp    dl,0x7
c0020000:	77 37                	ja     c0020039 <Vm::x87Handler(regs*)+0x585>
c0020002:	83 ec 0c             	sub    esp,0xc
c0020005:	2d c8 00 00 00       	sub    eax,0xc8
c002000a:	50                   	push   eax
c002000b:	e8 67 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020010:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020017:	89 c6                	mov    esi,eax
c0020019:	89 d7                	mov    edi,edx
c002001b:	e8 57 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020020:	57                   	push   edi
c0020021:	56                   	push   esi
c0020022:	52                   	push   edx
c0020023:	50                   	push   eax
c0020024:	e8 fd f8 ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020029:	83 c4 1c             	add    esp,0x1c
c002002c:	52                   	push   edx
c002002d:	50                   	push   eax
c002002e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020032:	2d c8 00 00 00       	sub    eax,0xc8
c0020037:	eb 7d                	jmp    c00200b6 <Vm::x87Handler(regs*)+0x602>
c0020039:	3c f7                	cmp    al,0xf7
c002003b:	76 38                	jbe    c0020075 <Vm::x87Handler(regs*)+0x5c1>
c002003d:	83 ec 0c             	sub    esp,0xc
c0020040:	6a 00                	push   0x0
c0020042:	e8 30 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020047:	89 c6                	mov    esi,eax
c0020049:	89 d7                	mov    edi,edx
c002004b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002004f:	2d f8 00 00 00       	sub    eax,0xf8
c0020054:	89 04 24             	mov    DWORD PTR [esp],eax
c0020057:	e8 1b f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002005c:	57                   	push   edi
c002005d:	56                   	push   esi
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	e8 e0 f8 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020065:	83 c4 1c             	add    esp,0x1c
c0020068:	52                   	push   edx
c0020069:	50                   	push   eax
c002006a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006e:	2d f8 00 00 00       	sub    eax,0xf8
c0020073:	eb 41                	jmp    c00200b6 <Vm::x87Handler(regs*)+0x602>
c0020075:	8d 50 10             	lea    edx,[eax+0x10]
c0020078:	80 fa 07             	cmp    dl,0x7
c002007b:	0f 87 5a 01 00 00    	ja     c00201db <Vm::x87Handler(regs*)+0x727>
c0020081:	83 ec 0c             	sub    esp,0xc
c0020084:	2d f0 00 00 00       	sub    eax,0xf0
c0020089:	50                   	push   eax
c002008a:	e8 e8 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002008f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020096:	89 c6                	mov    esi,eax
c0020098:	89 d7                	mov    edi,edx
c002009a:	e8 d8 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002009f:	57                   	push   edi
c00200a0:	56                   	push   esi
c00200a1:	52                   	push   edx
c00200a2:	50                   	push   eax
c00200a3:	e8 9d f8 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200a8:	83 c4 1c             	add    esp,0x1c
c00200ab:	52                   	push   edx
c00200ac:	50                   	push   eax
c00200ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b1:	2d f0 00 00 00       	sub    eax,0xf0
c00200b6:	50                   	push   eax
c00200b7:	e8 fe f8 ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c00200bc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200c0:	e8 9d f9 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00200c5:	e9 5e fa ff ff       	jmp    c001fb28 <Vm::x87Handler(regs*)+0x74>
c00200ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ce:	8d 50 30             	lea    edx,[eax+0x30]
c00200d1:	80 fa 07             	cmp    dl,0x7
c00200d4:	77 1d                	ja     c00200f3 <Vm::x87Handler(regs*)+0x63f>
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	6a 00                	push   0x0
c00200db:	e8 97 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00200e0:	83 c4 0c             	add    esp,0xc
c00200e3:	52                   	push   edx
c00200e4:	50                   	push   eax
c00200e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e9:	2d d0 00 00 00       	sub    eax,0xd0
c00200ee:	e9 f3 fd ff ff       	jmp    c001fee6 <Vm::x87Handler(regs*)+0x432>
c00200f3:	8d 50 28             	lea    edx,[eax+0x28]
c00200f6:	80 fa 07             	cmp    dl,0x7
c00200f9:	77 28                	ja     c0020123 <Vm::x87Handler(regs*)+0x66f>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	6a 00                	push   0x0
c0020100:	e8 72 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020105:	83 c4 0c             	add    esp,0xc
c0020108:	52                   	push   edx
c0020109:	50                   	push   eax
c002010a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002010e:	2d d8 00 00 00       	sub    eax,0xd8
c0020113:	50                   	push   eax
c0020114:	e8 a1 f8 ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c0020119:	e8 44 f9 ff ff       	call   c001fa62 <Vm::fpuPop()>
c002011e:	e9 01 fa ff ff       	jmp    c001fb24 <Vm::x87Handler(regs*)+0x70>
c0020123:	8d 50 20             	lea    edx,[eax+0x20]
c0020126:	80 fa 07             	cmp    dl,0x7
c0020129:	77 30                	ja     c002015b <Vm::x87Handler(regs*)+0x6a7>
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	2d e0 00 00 00       	sub    eax,0xe0
c0020133:	50                   	push   eax
c0020134:	e8 3e f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020139:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020140:	89 c6                	mov    esi,eax
c0020142:	89 d7                	mov    edi,edx
c0020144:	e8 2e f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020149:	57                   	push   edi
c002014a:	56                   	push   esi
c002014b:	52                   	push   edx
c002014c:	50                   	push   eax
c002014d:	e8 48 f7 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020152:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020156:	e9 54 02 00 00       	jmp    c00203af <Vm::x87Handler(regs*)+0x8fb>
c002015b:	8d 50 18             	lea    edx,[eax+0x18]
c002015e:	80 fa 07             	cmp    dl,0x7
c0020161:	0f 87 43 fb ff ff    	ja     c001fcaa <Vm::x87Handler(regs*)+0x1f6>
c0020167:	83 ec 0c             	sub    esp,0xc
c002016a:	2d e8 00 00 00       	sub    eax,0xe8
c002016f:	50                   	push   eax
c0020170:	e8 02 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020175:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017c:	89 c6                	mov    esi,eax
c002017e:	89 d7                	mov    edi,edx
c0020180:	e8 f2 f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020185:	57                   	push   edi
c0020186:	56                   	push   esi
c0020187:	52                   	push   edx
c0020188:	50                   	push   eax
c0020189:	e8 0c f7 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002018e:	83 c4 20             	add    esp,0x20
c0020191:	e8 cc f8 ff ff       	call   c001fa62 <Vm::fpuPop()>
c0020196:	eb 62                	jmp    c00201fa <Vm::x87Handler(regs*)+0x746>
c0020198:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002019c:	0f 85 0f 01 00 00    	jne    c00202b1 <Vm::x87Handler(regs*)+0x7fd>
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	6a 01                	push   0x1
c00201a7:	e8 cb f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00201ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b3:	89 c6                	mov    esi,eax
c00201b5:	89 d7                	mov    edi,edx
c00201b7:	e8 bb f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00201bc:	57                   	push   edi
c00201bd:	56                   	push   esi
c00201be:	52                   	push   edx
c00201bf:	50                   	push   eax
c00201c0:	e8 d5 f6 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c5:	83 c4 20             	add    esp,0x20
c00201c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201cc:	e8 91 f8 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00201d1:	e8 8c f8 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00201d6:	e9 50 f9 ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c00201db:	3c d9                	cmp    al,0xd9
c00201dd:	0f 85 b5 02 00 00    	jne    c0020498 <Vm::x87Handler(regs*)+0x9e4>
c00201e3:	eb bd                	jmp    c00201a2 <Vm::x87Handler(regs*)+0x6ee>
c00201e5:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201e9:	0f 85 ea 02 00 00    	jne    c00204d9 <Vm::x87Handler(regs*)+0xa25>
c00201ef:	0f b7 05 e0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031be0
c00201f6:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201fe:	e9 28 f9 ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c0020203:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020207:	84 d2                	test   dl,dl
c0020209:	75 0f                	jne    c002021a <Vm::x87Handler(regs*)+0x766>
c002020b:	83 ec 0c             	sub    esp,0xc
c002020e:	ff 36                	push   DWORD PTR [esi]
c0020210:	e8 b1 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020215:	e9 2c 01 00 00       	jmp    c0020346 <Vm::x87Handler(regs*)+0x892>
c002021a:	80 fa 01             	cmp    dl,0x1
c002021d:	75 0f                	jne    c002022e <Vm::x87Handler(regs*)+0x77a>
c002021f:	83 ec 0c             	sub    esp,0xc
c0020222:	ff 36                	push   DWORD PTR [esi]
c0020224:	e8 9d f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020229:	e9 81 02 00 00       	jmp    c00204af <Vm::x87Handler(regs*)+0x9fb>
c002022e:	80 fa 04             	cmp    dl,0x4
c0020231:	75 0f                	jne    c0020242 <Vm::x87Handler(regs*)+0x78e>
c0020233:	83 ec 0c             	sub    esp,0xc
c0020236:	ff 36                	push   DWORD PTR [esi]
c0020238:	e8 89 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c002023d:	e9 86 01 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0x914>
c0020242:	80 fa 05             	cmp    dl,0x5
c0020245:	75 1b                	jne    c0020262 <Vm::x87Handler(regs*)+0x7ae>
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	6a 00                	push   0x0
c002024c:	e8 26 f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020251:	89 c7                	mov    edi,eax
c0020253:	89 d5                	mov    ebp,edx
c0020255:	58                   	pop    eax
c0020256:	ff 36                	push   DWORD PTR [esi]
c0020258:	e8 69 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c002025d:	e9 a3 01 00 00       	jmp    c0020405 <Vm::x87Handler(regs*)+0x951>
c0020262:	80 fa 06             	cmp    dl,0x6
c0020265:	75 0f                	jne    c0020276 <Vm::x87Handler(regs*)+0x7c2>
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	ff 36                	push   DWORD PTR [esi]
c002026c:	e8 55 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020271:	e9 ae 01 00 00       	jmp    c0020424 <Vm::x87Handler(regs*)+0x970>
c0020276:	31 c0                	xor    eax,eax
c0020278:	80 fa 07             	cmp    dl,0x7
c002027b:	0f 85 94 02 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c0020281:	83 ec 0c             	sub    esp,0xc
c0020284:	6a 00                	push   0x0
c0020286:	e8 ec f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002028b:	89 c7                	mov    edi,eax
c002028d:	89 d5                	mov    ebp,edx
c002028f:	58                   	pop    eax
c0020290:	ff 36                	push   DWORD PTR [esi]
c0020292:	e8 2f f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020297:	e9 cb 01 00 00       	jmp    c0020467 <Vm::x87Handler(regs*)+0x9b3>
c002029c:	80 fa 03             	cmp    dl,0x3
c002029f:	0f 85 d3 01 00 00    	jne    c0020478 <Vm::x87Handler(regs*)+0x9c4>
c00202a5:	e8 b8 f7 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00202aa:	51                   	push   ecx
c00202ab:	51                   	push   ecx
c00202ac:	e9 de 01 00 00       	jmp    c002048f <Vm::x87Handler(regs*)+0x9db>
c00202b1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202b5:	80 fa 01             	cmp    dl,0x1
c00202b8:	75 09                	jne    c00202c3 <Vm::x87Handler(regs*)+0x80f>
c00202ba:	57                   	push   edi
c00202bb:	57                   	push   edi
c00202bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00202be:	e9 e3 01 00 00       	jmp    c00204a6 <Vm::x87Handler(regs*)+0x9f2>
c00202c3:	80 fa 04             	cmp    dl,0x4
c00202c6:	75 12                	jne    c00202da <Vm::x87Handler(regs*)+0x826>
c00202c8:	31 d2                	xor    edx,edx
c00202ca:	51                   	push   ecx
c00202cb:	51                   	push   ecx
c00202cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00202ce:	52                   	push   edx
c00202cf:	50                   	push   eax
c00202d0:	e8 d0 f4 ff ff       	call   c001f7a5 <Vm::fpuLongToFloat(long long)>
c00202d5:	e9 ee 00 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0x914>
c00202da:	31 c0                	xor    eax,eax
c00202dc:	80 fa 07             	cmp    dl,0x7
c00202df:	0f 85 30 02 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c00202e5:	83 ec 0c             	sub    esp,0xc
c00202e8:	6a 00                	push   0x0
c00202ea:	e8 88 f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00202ef:	89 c7                	mov    edi,eax
c00202f1:	89 d5                	mov    ebp,edx
c00202f3:	58                   	pop    eax
c00202f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f6:	5a                   	pop    edx
c00202f7:	31 d2                	xor    edx,edx
c00202f9:	52                   	push   edx
c00202fa:	50                   	push   eax
c00202fb:	e8 a5 f4 ff ff       	call   c001f7a5 <Vm::fpuLongToFloat(long long)>
c0020300:	e9 62 01 00 00       	jmp    c0020467 <Vm::x87Handler(regs*)+0x9b3>
c0020305:	84 d2                	test   dl,dl
c0020307:	75 0d                	jne    c0020316 <Vm::x87Handler(regs*)+0x862>
c0020309:	31 d2                	xor    edx,edx
c002030b:	55                   	push   ebp
c002030c:	55                   	push   ebp
c002030d:	8b 06                	mov    eax,DWORD PTR [esi]
c002030f:	52                   	push   edx
c0020310:	50                   	push   eax
c0020311:	e9 d3 01 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0xa35>
c0020316:	31 c0                	xor    eax,eax
c0020318:	80 fa 02             	cmp    dl,0x2
c002031b:	0f 85 f4 01 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	6a 00                	push   0x0
c0020326:	e8 4c f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002032b:	59                   	pop    ecx
c002032c:	5f                   	pop    edi
c002032d:	e9 6a f9 ff ff       	jmp    c001fc9c <Vm::x87Handler(regs*)+0x1e8>
c0020332:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020336:	84 d2                	test   dl,dl
c0020338:	75 2a                	jne    c0020364 <Vm::x87Handler(regs*)+0x8b0>
c002033a:	50                   	push   eax
c002033b:	50                   	push   eax
c002033c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002033f:	ff 36                	push   DWORD PTR [esi]
c0020341:	e8 c5 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020346:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002034d:	89 c6                	mov    esi,eax
c002034f:	89 d7                	mov    edi,edx
c0020351:	e8 21 f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020356:	57                   	push   edi
c0020357:	56                   	push   esi
c0020358:	52                   	push   edx
c0020359:	50                   	push   eax
c002035a:	e8 8e f5 ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002035f:	e9 64 01 00 00       	jmp    c00204c8 <Vm::x87Handler(regs*)+0xa14>
c0020364:	80 fa 01             	cmp    dl,0x1
c0020367:	75 11                	jne    c002037a <Vm::x87Handler(regs*)+0x8c6>
c0020369:	50                   	push   eax
c002036a:	50                   	push   eax
c002036b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002036e:	ff 36                	push   DWORD PTR [esi]
c0020370:	e8 96 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020375:	e9 35 01 00 00       	jmp    c00204af <Vm::x87Handler(regs*)+0x9fb>
c002037a:	80 fa 02             	cmp    dl,0x2
c002037d:	0f 85 54 f9 ff ff    	jne    c001fcd7 <Vm::x87Handler(regs*)+0x223>
c0020383:	55                   	push   ebp
c0020384:	55                   	push   ebp
c0020385:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020388:	ff 36                	push   DWORD PTR [esi]
c002038a:	e8 7c f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c002038f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020396:	89 c6                	mov    esi,eax
c0020398:	89 d7                	mov    edi,edx
c002039a:	e8 d8 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002039f:	57                   	push   edi
c00203a0:	56                   	push   esi
c00203a1:	52                   	push   edx
c00203a2:	50                   	push   eax
c00203a3:	e8 f2 f4 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203ac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203af:	83 c4 20             	add    esp,0x20
c00203b2:	e9 74 f7 ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c00203b7:	80 fa 04             	cmp    dl,0x4
c00203ba:	75 2a                	jne    c00203e6 <Vm::x87Handler(regs*)+0x932>
c00203bc:	51                   	push   ecx
c00203bd:	51                   	push   ecx
c00203be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c1:	ff 36                	push   DWORD PTR [esi]
c00203c3:	e8 43 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c00203c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203cf:	89 c6                	mov    esi,eax
c00203d1:	89 d7                	mov    edi,edx
c00203d3:	e8 9f f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00203d8:	57                   	push   edi
c00203d9:	56                   	push   esi
c00203da:	52                   	push   edx
c00203db:	50                   	push   eax
c00203dc:	e8 36 f5 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203e1:	e9 e2 00 00 00       	jmp    c00204c8 <Vm::x87Handler(regs*)+0xa14>
c00203e6:	80 fa 05             	cmp    dl,0x5
c00203e9:	75 28                	jne    c0020413 <Vm::x87Handler(regs*)+0x95f>
c00203eb:	83 ec 0c             	sub    esp,0xc
c00203ee:	6a 00                	push   0x0
c00203f0:	e8 82 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00203f5:	89 c7                	mov    edi,eax
c00203f7:	89 d5                	mov    ebp,edx
c00203f9:	58                   	pop    eax
c00203fa:	5a                   	pop    edx
c00203fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fe:	ff 36                	push   DWORD PTR [esi]
c0020400:	e8 06 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020405:	83 c4 10             	add    esp,0x10
c0020408:	55                   	push   ebp
c0020409:	57                   	push   edi
c002040a:	52                   	push   edx
c002040b:	50                   	push   eax
c002040c:	e8 06 f5 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020411:	eb 60                	jmp    c0020473 <Vm::x87Handler(regs*)+0x9bf>
c0020413:	80 fa 06             	cmp    dl,0x6
c0020416:	75 2a                	jne    c0020442 <Vm::x87Handler(regs*)+0x98e>
c0020418:	51                   	push   ecx
c0020419:	51                   	push   ecx
c002041a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002041d:	ff 36                	push   DWORD PTR [esi]
c002041f:	e8 e7 f2 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020424:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002042b:	89 c6                	mov    esi,eax
c002042d:	89 d7                	mov    edi,edx
c002042f:	e8 43 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020434:	57                   	push   edi
c0020435:	56                   	push   esi
c0020436:	52                   	push   edx
c0020437:	50                   	push   eax
c0020438:	e8 08 f5 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002043d:	e9 86 00 00 00       	jmp    c00204c8 <Vm::x87Handler(regs*)+0xa14>
c0020442:	31 c0                	xor    eax,eax
c0020444:	80 fa 07             	cmp    dl,0x7
c0020447:	0f 85 c8 00 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c002044d:	83 ec 0c             	sub    esp,0xc
c0020450:	6a 00                	push   0x0
c0020452:	e8 20 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020457:	89 c7                	mov    edi,eax
c0020459:	89 d5                	mov    ebp,edx
c002045b:	58                   	pop    eax
c002045c:	5a                   	pop    edx
c002045d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020460:	ff 36                	push   DWORD PTR [esi]
c0020462:	e8 a4 f2 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	55                   	push   ebp
c002046b:	57                   	push   edi
c002046c:	52                   	push   edx
c002046d:	50                   	push   eax
c002046e:	e8 d2 f4 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020473:	83 c4 0c             	add    esp,0xc
c0020476:	eb 53                	jmp    c00204cb <Vm::x87Handler(regs*)+0xa17>
c0020478:	31 c0                	xor    eax,eax
c002047a:	80 fa 02             	cmp    dl,0x2
c002047d:	0f 85 92 00 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c0020483:	83 ec 0c             	sub    esp,0xc
c0020486:	6a 00                	push   0x0
c0020488:	e8 ea f4 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002048d:	59                   	pop    ecx
c002048e:	5f                   	pop    edi
c002048f:	52                   	push   edx
c0020490:	50                   	push   eax
c0020491:	e8 27 f2 ff ff       	call   c001f6bd <Vm::fpuInternalTo64(unsigned long long)>
c0020496:	eb 70                	jmp    c0020508 <Vm::x87Handler(regs*)+0xa54>
c0020498:	31 c0                	xor    eax,eax
c002049a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002049f:	75 74                	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c00204a1:	50                   	push   eax
c00204a2:	50                   	push   eax
c00204a3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204a6:	31 d2                	xor    edx,edx
c00204a8:	52                   	push   edx
c00204a9:	50                   	push   eax
c00204aa:	e8 f6 f2 ff ff       	call   c001f7a5 <Vm::fpuLongToFloat(long long)>
c00204af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204b6:	89 c6                	mov    esi,eax
c00204b8:	89 d7                	mov    edi,edx
c00204ba:	e8 b8 f4 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00204bf:	57                   	push   edi
c00204c0:	56                   	push   esi
c00204c1:	52                   	push   edx
c00204c2:	50                   	push   eax
c00204c3:	e8 5e f4 ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204c8:	83 c4 1c             	add    esp,0x1c
c00204cb:	52                   	push   edx
c00204cc:	50                   	push   eax
c00204cd:	6a 00                	push   0x0
c00204cf:	e8 e6 f4 ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c00204d4:	e9 f2 f7 ff ff       	jmp    c001fccb <Vm::x87Handler(regs*)+0x217>
c00204d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204dd:	80 fa 05             	cmp    dl,0x5
c00204e0:	75 11                	jne    c00204f3 <Vm::x87Handler(regs*)+0xa3f>
c00204e2:	55                   	push   ebp
c00204e3:	55                   	push   ebp
c00204e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e7:	ff 36                	push   DWORD PTR [esi]
c00204e9:	e8 81 f2 ff ff       	call   c001f76f <Vm::fpuULongToFloat(unsigned long long)>
c00204ee:	e9 cf f7 ff ff       	jmp    c001fcc2 <Vm::x87Handler(regs*)+0x20e>
c00204f3:	31 c0                	xor    eax,eax
c00204f5:	80 fa 07             	cmp    dl,0x7
c00204f8:	75 1b                	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c00204fa:	e8 63 f5 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00204ff:	51                   	push   ecx
c0020500:	51                   	push   ecx
c0020501:	52                   	push   edx
c0020502:	50                   	push   eax
c0020503:	e8 0c f2 ff ff       	call   c001f714 <Vm::fpuFloatToLong(unsigned long long)>
c0020508:	83 c4 10             	add    esp,0x10
c002050b:	89 06                	mov    DWORD PTR [esi],eax
c002050d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020510:	e9 f8 f7 ff ff       	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c0020515:	83 c4 1c             	add    esp,0x1c
c0020518:	5b                   	pop    ebx
c0020519:	5e                   	pop    esi
c002051a:	5f                   	pop    edi
c002051b:	5d                   	pop    ebp
c002051c:	c3                   	ret    

c002051d <__static_initialization_and_destruction_0(int, int)>:
c002051d:	83 ec 0c             	sub    esp,0xc
c0020520:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020525:	75 1a                	jne    c0020541 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002052f:	75 10                	jne    c0020541 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020531:	83 ec 0c             	sub    esp,0xc
c0020534:	68 e0 1b 03 c0       	push   0xc0031be0
c0020539:	e8 12 88 00 00       	call   c0028d50 <Vm::_FPUState::_FPUState()>
c002053e:	83 c4 10             	add    esp,0x10
c0020541:	90                   	nop
c0020542:	83 c4 0c             	add    esp,0xc
c0020545:	c3                   	ret    

c0020546 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	83 ec 08             	sub    esp,0x8
c002054c:	68 ff ff 00 00       	push   0xffff
c0020551:	6a 01                	push   0x1
c0020553:	e8 c5 ff ff ff       	call   c002051d <__static_initialization_and_destruction_0(int, int)>
c0020558:	83 c4 10             	add    esp,0x10
c002055b:	83 c4 0c             	add    esp,0xc
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <FAT::getName()>:
c0020560:	b8 e8 c9 02 c0       	mov    eax,0xc002c9e8
c0020565:	c3                   	ret    

c0020566 <FAT::tell(void*, unsigned long long*)>:
c0020566:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002056b:	75 06                	jne    c0020573 <FAT::tell(void*, unsigned long long*)+0xd>
c002056d:	b8 04 00 00 00       	mov    eax,0x4
c0020572:	c3                   	ret    
c0020573:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020578:	75 06                	jne    c0020580 <FAT::tell(void*, unsigned long long*)+0x1a>
c002057a:	b8 04 00 00 00       	mov    eax,0x4
c002057f:	c3                   	ret    
c0020580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020584:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020587:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002058a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002058e:	89 01                	mov    DWORD PTR [ecx],eax
c0020590:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020593:	b8 00 00 00 00       	mov    eax,0x0
c0020598:	c3                   	ret    
c0020599:	90                   	nop

c002059a <FAT::stat(void*, unsigned long long*)>:
c002059a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002059f:	75 06                	jne    c00205a7 <FAT::stat(void*, unsigned long long*)+0xd>
c00205a1:	b8 04 00 00 00       	mov    eax,0x4
c00205a6:	c3                   	ret    
c00205a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ac:	75 06                	jne    c00205b4 <FAT::stat(void*, unsigned long long*)+0x1a>
c00205ae:	b8 04 00 00 00       	mov    eax,0x4
c00205b3:	c3                   	ret    
c00205b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205c2:	89 01                	mov    DWORD PTR [ecx],eax
c00205c4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205c7:	b8 00 00 00 00       	mov    eax,0x0
c00205cc:	c3                   	ret    
c00205cd:	90                   	nop

c00205ce <FAT::~FAT()>:
c00205ce:	83 ec 0c             	sub    esp,0xc
c00205d1:	ba 6c ca 02 c0       	mov    edx,0xc002ca6c
c00205d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205da:	89 10                	mov    DWORD PTR [eax],edx
c00205dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e0:	83 ec 0c             	sub    esp,0xc
c00205e3:	50                   	push   eax
c00205e4:	e8 99 2c ff ff       	call   c0013282 <Filesystem::~Filesystem()>
c00205e9:	83 c4 10             	add    esp,0x10
c00205ec:	90                   	nop
c00205ed:	83 c4 0c             	add    esp,0xc
c00205f0:	c3                   	ret    
c00205f1:	90                   	nop

c00205f2 <FAT::~FAT()>:
c00205f2:	83 ec 0c             	sub    esp,0xc
c00205f5:	83 ec 0c             	sub    esp,0xc
c00205f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205fc:	e8 cd ff ff ff       	call   c00205ce <FAT::~FAT()>
c0020601:	83 c4 10             	add    esp,0x10
c0020604:	83 ec 08             	sub    esp,0x8
c0020607:	6a 08                	push   0x8
c0020609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002060d:	e8 67 28 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	83 c4 0c             	add    esp,0xc
c0020618:	c3                   	ret    
c0020619:	90                   	nop

c002061a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002061a:	83 ec 1c             	sub    esp,0x1c
c002061d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020624:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002062d:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c0020634:	83 f8 ff             	cmp    eax,0xffffffff
c0020637:	75 34                	jne    c002066d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020639:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002063d:	88 c2                	mov    dl,al
c002063f:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020644:	01 d0                	add    eax,edx
c0020646:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002064a:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c0020650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020654:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c002065b:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020660:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020664:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c002066b:	eb 17                	jmp    c0020684 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002066d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020671:	88 c2                	mov    dl,al
c0020673:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020677:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c002067e:	01 d0                	add    eax,edx
c0020680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020684:	83 ec 04             	sub    esp,0x4
c0020687:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002068b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002068f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020693:	50                   	push   eax
c0020694:	e8 9f 66 fe ff       	call   c0006d38 <f_getlabel>
c0020699:	83 c4 10             	add    esp,0x10
c002069c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206a5:	75 07                	jne    c00206ae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206a7:	b8 00 00 00 00       	mov    eax,0x0
c00206ac:	eb 05                	jmp    c00206b3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206ae:	b8 01 00 00 00       	mov    eax,0x1
c00206b3:	83 c4 1c             	add    esp,0x1c
c00206b6:	c3                   	ret    
c00206b7:	90                   	nop

c00206b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206b8:	57                   	push   edi
c00206b9:	83 ec 58             	sub    esp,0x58
c00206bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206c8:	b9 0f 00 00 00       	mov    ecx,0xf
c00206cd:	b8 00 00 00 00       	mov    eax,0x0
c00206d2:	fc                   	cld    
c00206d3:	89 d7                	mov    edi,edx
c00206d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206db:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00206e2:	83 f8 ff             	cmp    eax,0xffffffff
c00206e5:	75 34                	jne    c002071b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206eb:	88 c2                	mov    dl,al
c00206ed:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c00206f2:	01 d0                	add    eax,edx
c00206f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206f8:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c00206fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020702:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020709:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c002070e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020712:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020719:	eb 17                	jmp    c0020732 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002071b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002071f:	88 c2                	mov    dl,al
c0020721:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020725:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c002072c:	01 d0                	add    eax,edx
c002072e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020732:	83 ec 08             	sub    esp,0x8
c0020735:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020739:	8d 44 24 18          	lea    eax,[esp+0x18]
c002073d:	50                   	push   eax
c002073e:	e8 31 02 fe ff       	call   c0000974 <strcat>
c0020743:	83 c4 10             	add    esp,0x10
c0020746:	83 ec 0c             	sub    esp,0xc
c0020749:	8d 44 24 18          	lea    eax,[esp+0x18]
c002074d:	50                   	push   eax
c002074e:	e8 d3 67 fe ff       	call   c0006f26 <f_setlabel>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002075a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002075f:	75 07                	jne    c0020768 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020761:	b8 00 00 00 00       	mov    eax,0x0
c0020766:	eb 05                	jmp    c002076d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020768:	b8 01 00 00 00       	mov    eax,0x1
c002076d:	83 c4 58             	add    esp,0x58
c0020770:	5f                   	pop    edi
c0020771:	c3                   	ret    

c0020772 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020772:	83 ec 2c             	sub    esp,0x2c
c0020775:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002077d:	83 ec 08             	sub    esp,0x8
c0020780:	68 0c ca 02 c0       	push   0xc002ca0c
c0020785:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020789:	e8 32 01 fe ff       	call   c00008c0 <strcmp>
c002078e:	83 c4 10             	add    esp,0x10
c0020791:	85 c0                	test   eax,eax
c0020793:	0f 94 c0             	sete   al
c0020796:	84 c0                	test   al,al
c0020798:	74 0d                	je     c00207a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002079a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207a2:	e9 a6 00 00 00       	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a7:	83 ec 08             	sub    esp,0x8
c00207aa:	68 fe c9 02 c0       	push   0xc002c9fe
c00207af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b3:	e8 08 01 fe ff       	call   c00008c0 <strcmp>
c00207b8:	83 c4 10             	add    esp,0x10
c00207bb:	85 c0                	test   eax,eax
c00207bd:	0f 94 c0             	sete   al
c00207c0:	84 c0                	test   al,al
c00207c2:	74 0a                	je     c00207ce <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207cc:	eb 7f                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ce:	83 ec 08             	sub    esp,0x8
c00207d1:	68 04 ca 02 c0       	push   0xc002ca04
c00207d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207da:	e8 e1 00 fe ff       	call   c00008c0 <strcmp>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	85 c0                	test   eax,eax
c00207e4:	0f 94 c0             	sete   al
c00207e7:	84 c0                	test   al,al
c00207e9:	74 0a                	je     c00207f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207eb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207f3:	eb 58                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f5:	83 ec 08             	sub    esp,0x8
c00207f8:	68 ac 94 02 c0       	push   0xc00294ac
c00207fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020801:	e8 ba 00 fe ff       	call   c00008c0 <strcmp>
c0020806:	83 c4 10             	add    esp,0x10
c0020809:	85 c0                	test   eax,eax
c002080b:	0f 94 c0             	sete   al
c002080e:	84 c0                	test   al,al
c0020810:	74 0a                	je     c002081c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020812:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002081a:	eb 31                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081c:	83 ec 08             	sub    esp,0x8
c002081f:	68 0a ca 02 c0       	push   0xc002ca0a
c0020824:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020828:	e8 93 00 fe ff       	call   c00008c0 <strcmp>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	85 c0                	test   eax,eax
c0020832:	0f 94 c0             	sete   al
c0020835:	84 c0                	test   al,al
c0020837:	74 0a                	je     c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020839:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020841:	eb 0a                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020843:	b8 08 00 00 00       	mov    eax,0x8
c0020848:	e9 04 01 00 00       	jmp    c0020951 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002084d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020854:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002085d:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c0020864:	83 f8 ff             	cmp    eax,0xffffffff
c0020867:	75 34                	jne    c002089d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020869:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002086d:	88 c2                	mov    dl,al
c002086f:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020874:	01 d0                	add    eax,edx
c0020876:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002087a:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c0020880:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020884:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c002088b:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020890:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020894:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c002089b:	eb 17                	jmp    c00208b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002089d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a1:	88 c2                	mov    dl,al
c00208a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208a7:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00208ae:	01 d0                	add    eax,edx
c00208b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208b8:	88 04 24             	mov    BYTE PTR [esp],al
c00208bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208d8:	83 ec 0c             	sub    esp,0xc
c00208db:	68 00 20 00 00       	push   0x2000
c00208e0:	e8 5b ef fe ff       	call   c000f840 <malloc>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208ec:	68 00 20 00 00       	push   0x2000
c00208f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208f9:	50                   	push   eax
c00208fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208fe:	50                   	push   eax
c00208ff:	e8 6d 6a fe ff       	call   c0007371 <f_mkfs>
c0020904:	83 c4 10             	add    esp,0x10
c0020907:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002090b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020910:	75 07                	jne    c0020919 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020912:	b8 00 00 00 00       	mov    eax,0x0
c0020917:	eb 38                	jmp    c0020951 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020919:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002091e:	75 17                	jne    c0020937 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020920:	83 ec 0c             	sub    esp,0xc
c0020923:	68 3c ca 02 c0       	push   0xc002ca3c
c0020928:	e8 2c 26 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c002092d:	83 c4 10             	add    esp,0x10
c0020930:	b8 09 00 00 00       	mov    eax,0x9
c0020935:	eb 1a                	jmp    c0020951 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002093b:	83 ec 08             	sub    esp,0x8
c002093e:	50                   	push   eax
c002093f:	68 10 ca 02 c0       	push   0xc002ca10
c0020944:	e8 10 26 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	b8 01 00 00 00       	mov    eax,0x1
c0020951:	83 c4 2c             	add    esp,0x2c
c0020954:	c3                   	ret    
c0020955:	90                   	nop

c0020956 <FAT::tryMount(LogicalDisk*, int)>:
c0020956:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002095c:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020961:	83 f8 14             	cmp    eax,0x14
c0020964:	75 17                	jne    c002097d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020966:	83 ec 0c             	sub    esp,0xc
c0020969:	68 22 ca 02 c0       	push   0xc002ca22
c002096e:	e8 88 9c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0020973:	83 c4 10             	add    esp,0x10
c0020976:	b0 00                	mov    al,0x0
c0020978:	e9 d7 01 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002097d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020984:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002098a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020990:	3d 00 02 00 00       	cmp    eax,0x200
c0020995:	74 07                	je     c002099e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020997:	b0 00                	mov    al,0x0
c0020999:	e9 b6 01 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002099e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209a6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209ad:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00209b4:	83 f8 ff             	cmp    eax,0xffffffff
c00209b7:	74 07                	je     c00209c0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209b9:	b0 01                	mov    al,0x1
c00209bb:	e9 94 01 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209c0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209ca:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209d2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209d9:	88 c2                	mov    dl,al
c00209db:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c00209e0:	01 d0                	add    eax,edx
c00209e2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209e9:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c00209ef:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209f6:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c00209fd:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020a02:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a09:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020a10:	83 ec 0c             	sub    esp,0xc
c0020a13:	68 54 02 00 00       	push   0x254
c0020a18:	e8 23 ee fe ff       	call   c000f840 <malloc>
c0020a1d:	83 c4 10             	add    esp,0x10
c0020a20:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a27:	83 ec 04             	sub    esp,0x4
c0020a2a:	6a 00                	push   0x0
c0020a2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a33:	50                   	push   eax
c0020a34:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a3b:	e8 ef 44 fe ff       	call   c0004f2f <f_mount>
c0020a40:	83 c4 10             	add    esp,0x10
c0020a43:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a4a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a52:	74 19                	je     c0020a6d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a54:	83 ec 0c             	sub    esp,0xc
c0020a57:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a5e:	e8 fd ed fe ff       	call   c000f860 <rfree>
c0020a63:	83 c4 10             	add    esp,0x10
c0020a66:	b0 00                	mov    al,0x0
c0020a68:	e9 e7 00 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a6d:	83 ec 04             	sub    esp,0x4
c0020a70:	68 00 01 00 00       	push   0x100
c0020a75:	6a 00                	push   0x0
c0020a77:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a7e:	50                   	push   eax
c0020a7f:	e8 f4 fc fd ff       	call   c0000778 <memset>
c0020a84:	83 c4 10             	add    esp,0x10
c0020a87:	83 ec 08             	sub    esp,0x8
c0020a8a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a91:	50                   	push   eax
c0020a92:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a99:	50                   	push   eax
c0020a9a:	e8 d5 fe fd ff       	call   c0000974 <strcat>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	83 ec 08             	sub    esp,0x8
c0020aa5:	68 30 ca 02 c0       	push   0xc002ca30
c0020aaa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ab1:	50                   	push   eax
c0020ab2:	e8 bd fe fd ff       	call   c0000974 <strcat>
c0020ab7:	83 c4 10             	add    esp,0x10
c0020aba:	83 ec 04             	sub    esp,0x4
c0020abd:	6a 01                	push   0x1
c0020abf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020ac6:	50                   	push   eax
c0020ac7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020acb:	50                   	push   eax
c0020acc:	e8 c0 44 fe ff       	call   c0004f91 <f_open>
c0020ad1:	83 c4 10             	add    esp,0x10
c0020ad4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020adb:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ae2:	85 c0                	test   eax,eax
c0020ae4:	74 0a                	je     c0020af0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ae6:	78 2d                	js     c0020b15 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ae8:	83 e8 04             	sub    eax,0x4
c0020aeb:	83 f8 01             	cmp    eax,0x1
c0020aee:	77 25                	ja     c0020b15 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020af0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020af8:	83 ec 0c             	sub    esp,0xc
c0020afb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aff:	50                   	push   eax
c0020b00:	e8 de 4f fe ff       	call   c0005ae3 <f_close>
c0020b05:	83 c4 10             	add    esp,0x10
c0020b08:	90                   	nop
c0020b09:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b11:	74 3a                	je     c0020b4d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b13:	eb 2d                	jmp    c0020b42 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b15:	83 ec 0c             	sub    esp,0xc
c0020b18:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b1f:	e8 3c ed fe ff       	call   c000f860 <rfree>
c0020b24:	83 c4 10             	add    esp,0x10
c0020b27:	83 ec 04             	sub    esp,0x4
c0020b2a:	6a 00                	push   0x0
c0020b2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b33:	50                   	push   eax
c0020b34:	6a 00                	push   0x0
c0020b36:	e8 f4 43 fe ff       	call   c0004f2f <f_mount>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	b0 00                	mov    al,0x0
c0020b40:	eb 12                	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b42:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020b47:	40                   	inc    eax
c0020b48:	a3 40 1c 03 c0       	mov    ds:0xc0031c40,eax
c0020b4d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b54:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b5a:	c3                   	ret    
c0020b5b:	90                   	nop

c0020b5c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b5c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b62:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b6a:	74 0a                	je     c0020b76 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b6c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b74:	75 0a                	jne    c0020b80 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b76:	b8 04 00 00 00       	mov    eax,0x4
c0020b7b:	e9 db 00 00 00       	jmp    c0020c5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b80:	83 ec 08             	sub    esp,0x8
c0020b83:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b8a:	50                   	push   eax
c0020b8b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b92:	e8 56 55 fe ff       	call   c00060ed <f_readdir>
c0020b97:	83 c4 10             	add    esp,0x10
c0020b9a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020ba1:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020ba7:	83 ec 0c             	sub    esp,0xc
c0020baa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020bb1:	83 c0 1a             	add    eax,0x1a
c0020bb4:	50                   	push   eax
c0020bb5:	e8 da fb fd ff       	call   c0000794 <strlen>
c0020bba:	83 c4 10             	add    esp,0x10
c0020bbd:	ba 00 00 00 00       	mov    edx,0x0
c0020bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bc6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bca:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bd1:	0f b6 c0             	movzx  eax,al
c0020bd4:	83 e0 10             	and    eax,0x10
c0020bd7:	74 07                	je     c0020be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bd9:	b8 02 00 00 00       	mov    eax,0x2
c0020bde:	eb 05                	jmp    c0020be5 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020be0:	b8 01 00 00 00       	mov    eax,0x1
c0020be5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020be9:	83 ec 08             	sub    esp,0x8
c0020bec:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bf3:	83 c0 1a             	add    eax,0x1a
c0020bf6:	50                   	push   eax
c0020bf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bfb:	83 c0 10             	add    eax,0x10
c0020bfe:	50                   	push   eax
c0020bff:	e8 30 fc fd ff       	call   c0000834 <strcpy>
c0020c04:	83 c4 10             	add    esp,0x10
c0020c07:	83 ec 04             	sub    esp,0x4
c0020c0a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c15:	50                   	push   eax
c0020c16:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c1d:	e8 22 fb fd ff       	call   c0000744 <memcpy>
c0020c22:	83 c4 10             	add    esp,0x10
c0020c25:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c32:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c39:	84 c0                	test   al,al
c0020c3b:	75 07                	jne    c0020c44 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c3d:	b8 07 00 00 00       	mov    eax,0x7
c0020c42:	eb 17                	jmp    c0020c5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c44:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c4b:	85 c0                	test   eax,eax
c0020c4d:	75 07                	jne    c0020c56 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c4f:	b8 00 00 00 00       	mov    eax,0x0
c0020c54:	eb 05                	jmp    c0020c5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c56:	b8 01 00 00 00       	mov    eax,0x1
c0020c5b:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c61:	c3                   	ret    

c0020c62 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c62:	83 ec 1c             	sub    esp,0x1c
c0020c65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c6a:	74 07                	je     c0020c73 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c6c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c71:	75 07                	jne    c0020c7a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c73:	b8 04 00 00 00       	mov    eax,0x4
c0020c78:	eb 3d                	jmp    c0020cb7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c7e:	50                   	push   eax
c0020c7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8b:	e8 3d 47 fe ff       	call   c00053cd <f_read>
c0020c90:	83 c4 10             	add    esp,0x10
c0020c93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c9b:	89 c2                	mov    edx,eax
c0020c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ca1:	89 10                	mov    DWORD PTR [eax],edx
c0020ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ca7:	85 c0                	test   eax,eax
c0020ca9:	75 07                	jne    c0020cb2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020cab:	b8 00 00 00 00       	mov    eax,0x0
c0020cb0:	eb 05                	jmp    c0020cb7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cb2:	b8 01 00 00 00       	mov    eax,0x1
c0020cb7:	83 c4 1c             	add    esp,0x1c
c0020cba:	c3                   	ret    
c0020cbb:	90                   	nop

c0020cbc <FAT::write(void*, unsigned long, void*, int*)>:
c0020cbc:	83 ec 1c             	sub    esp,0x1c
c0020cbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc4:	74 07                	je     c0020ccd <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cc6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ccb:	75 07                	jne    c0020cd4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ccd:	b8 04 00 00 00       	mov    eax,0x4
c0020cd2:	eb 3d                	jmp    c0020d11 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd8:	50                   	push   eax
c0020cd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ce1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce5:	e8 63 49 fe ff       	call   c000564d <f_write>
c0020cea:	83 c4 10             	add    esp,0x10
c0020ced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cf5:	89 c2                	mov    edx,eax
c0020cf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cfb:	89 10                	mov    DWORD PTR [eax],edx
c0020cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d01:	85 c0                	test   eax,eax
c0020d03:	75 07                	jne    c0020d0c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d05:	b8 00 00 00 00       	mov    eax,0x0
c0020d0a:	eb 05                	jmp    c0020d11 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d0c:	b8 01 00 00 00       	mov    eax,0x1
c0020d11:	83 c4 1c             	add    esp,0x1c
c0020d14:	c3                   	ret    
c0020d15:	90                   	nop

c0020d16 <FAT::close(void*)>:
c0020d16:	83 ec 1c             	sub    esp,0x1c
c0020d19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d1e:	75 07                	jne    c0020d27 <FAT::close(void*)+0x11>
c0020d20:	b8 04 00 00 00       	mov    eax,0x4
c0020d25:	eb 36                	jmp    c0020d5d <FAT::close(void*)+0x47>
c0020d27:	83 ec 0c             	sub    esp,0xc
c0020d2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d2e:	e8 b0 4d fe ff       	call   c0005ae3 <f_close>
c0020d33:	83 c4 10             	add    esp,0x10
c0020d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3a:	83 ec 0c             	sub    esp,0xc
c0020d3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d41:	e8 0a eb fe ff       	call   c000f850 <free>
c0020d46:	83 c4 10             	add    esp,0x10
c0020d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d4d:	85 c0                	test   eax,eax
c0020d4f:	75 07                	jne    c0020d58 <FAT::close(void*)+0x42>
c0020d51:	b8 00 00 00 00       	mov    eax,0x0
c0020d56:	eb 05                	jmp    c0020d5d <FAT::close(void*)+0x47>
c0020d58:	b8 01 00 00 00       	mov    eax,0x1
c0020d5d:	83 c4 1c             	add    esp,0x1c
c0020d60:	c3                   	ret    
c0020d61:	90                   	nop

c0020d62 <FAT::closeDir(void*)>:
c0020d62:	83 ec 1c             	sub    esp,0x1c
c0020d65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d6a:	75 07                	jne    c0020d73 <FAT::closeDir(void*)+0x11>
c0020d6c:	b8 04 00 00 00       	mov    eax,0x4
c0020d71:	eb 36                	jmp    c0020da9 <FAT::closeDir(void*)+0x47>
c0020d73:	83 ec 0c             	sub    esp,0xc
c0020d76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7a:	e8 4c 53 fe ff       	call   c00060cb <f_closedir>
c0020d7f:	83 c4 10             	add    esp,0x10
c0020d82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d86:	83 ec 0c             	sub    esp,0xc
c0020d89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d8d:	e8 be ea fe ff       	call   c000f850 <free>
c0020d92:	83 c4 10             	add    esp,0x10
c0020d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d99:	85 c0                	test   eax,eax
c0020d9b:	75 07                	jne    c0020da4 <FAT::closeDir(void*)+0x42>
c0020d9d:	b8 00 00 00 00       	mov    eax,0x0
c0020da2:	eb 05                	jmp    c0020da9 <FAT::closeDir(void*)+0x47>
c0020da4:	b8 01 00 00 00       	mov    eax,0x1
c0020da9:	83 c4 1c             	add    esp,0x1c
c0020dac:	c3                   	ret    
c0020dad:	90                   	nop

c0020dae <FAT::seek(void*, unsigned long long)>:
c0020dae:	83 ec 2c             	sub    esp,0x2c
c0020db1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020db9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020dbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dc6:	75 07                	jne    c0020dcf <FAT::seek(void*, unsigned long long)+0x21>
c0020dc8:	b8 04 00 00 00       	mov    eax,0x4
c0020dcd:	eb 2f                	jmp    c0020dfe <FAT::seek(void*, unsigned long long)+0x50>
c0020dcf:	83 ec 04             	sub    esp,0x4
c0020dd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dd6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dda:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dde:	e8 2f 4d fe ff       	call   c0005b12 <f_lseek>
c0020de3:	83 c4 10             	add    esp,0x10
c0020de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dee:	85 c0                	test   eax,eax
c0020df0:	75 07                	jne    c0020df9 <FAT::seek(void*, unsigned long long)+0x4b>
c0020df2:	b8 00 00 00 00       	mov    eax,0x0
c0020df7:	eb 05                	jmp    c0020dfe <FAT::seek(void*, unsigned long long)+0x50>
c0020df9:	b8 01 00 00 00       	mov    eax,0x1
c0020dfe:	83 c4 2c             	add    esp,0x2c
c0020e01:	c3                   	ret    

c0020e02 <fatWrapperReadDisk>:
c0020e02:	83 ec 1c             	sub    esp,0x1c
c0020e05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e09:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e21:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020e28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e2c:	83 ec 0c             	sub    esp,0xc
c0020e2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e33:	52                   	push   edx
c0020e34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e3c:	50                   	push   eax
c0020e3d:	e8 28 59 ff ff       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0020e42:	83 c4 20             	add    esp,0x20
c0020e45:	83 c4 1c             	add    esp,0x1c
c0020e48:	c3                   	ret    

c0020e49 <fatWrapperWriteDisk>:
c0020e49:	83 ec 1c             	sub    esp,0x1c
c0020e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e58:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e63:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e68:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020e6f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e73:	83 ec 0c             	sub    esp,0xc
c0020e76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e7a:	52                   	push   edx
c0020e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e83:	50                   	push   eax
c0020e84:	e8 4d 59 ff ff       	call   c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e89:	83 c4 20             	add    esp,0x20
c0020e8c:	83 c4 1c             	add    esp,0x1c
c0020e8f:	c3                   	ret    

c0020e90 <fatWrapperIoctl>:
c0020e90:	53                   	push   ebx
c0020e91:	83 ec 28             	sub    esp,0x28
c0020e94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e9c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ea0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ea4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ea9:	75 31                	jne    c0020edc <fatWrapperIoctl+0x4c>
c0020eab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020eb3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eb8:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020ebf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ec5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ecb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ecf:	66 89 02             	mov    WORD PTR [edx],ax
c0020ed2:	b8 00 00 00 00       	mov    eax,0x0
c0020ed7:	e9 b2 00 00 00       	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020edc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ee1:	75 6a                	jne    c0020f4d <fatWrapperIoctl+0xbd>
c0020ee3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eeb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ef0:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020ef7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020efd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f03:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f09:	89 c8                	mov    eax,ecx
c0020f0b:	89 da                	mov    edx,ebx
c0020f0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f11:	c1 e0 0a             	shl    eax,0xa
c0020f14:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f19:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0020f20:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f26:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f2c:	89 cb                	mov    ebx,ecx
c0020f2e:	c1 fb 1f             	sar    ebx,0x1f
c0020f31:	53                   	push   ebx
c0020f32:	51                   	push   ecx
c0020f33:	52                   	push   edx
c0020f34:	50                   	push   eax
c0020f35:	e8 c2 5a 00 00       	call   c00269fc <__udivdi3>
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f41:	89 01                	mov    DWORD PTR [ecx],eax
c0020f43:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f46:	b8 00 00 00 00       	mov    eax,0x0
c0020f4b:	eb 41                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f4d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f52:	75 07                	jne    c0020f5b <fatWrapperIoctl+0xcb>
c0020f54:	b8 00 00 00 00       	mov    eax,0x0
c0020f59:	eb 33                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f5b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f60:	75 19                	jne    c0020f7b <fatWrapperIoctl+0xeb>
c0020f62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f6e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f74:	b8 00 00 00 00       	mov    eax,0x0
c0020f79:	eb 13                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f7b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f80:	75 07                	jne    c0020f89 <fatWrapperIoctl+0xf9>
c0020f82:	b8 00 00 00 00       	mov    eax,0x0
c0020f87:	eb 05                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f89:	b8 04 00 00 00       	mov    eax,0x4
c0020f8e:	83 c4 28             	add    esp,0x28
c0020f91:	5b                   	pop    ebx
c0020f92:	c3                   	ret    
c0020f93:	90                   	nop

c0020f94 <FAT::FAT()>:
c0020f94:	83 ec 1c             	sub    esp,0x1c
c0020f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f9b:	83 ec 0c             	sub    esp,0xc
c0020f9e:	50                   	push   eax
c0020f9f:	e8 ba 22 ff ff       	call   c001325e <Filesystem::Filesystem()>
c0020fa4:	83 c4 10             	add    esp,0x10
c0020fa7:	ba 6c ca 02 c0       	mov    edx,0xc002ca6c
c0020fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fb0:	89 10                	mov    DWORD PTR [eax],edx
c0020fb2:	c7 05 40 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c40,0x0
c0020fbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fc4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fc9:	7f 15                	jg     c0020fe0 <FAT::FAT()+0x4c>
c0020fcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fcf:	c7 04 85 60 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3a0],0xffffffff
c0020fda:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fde:	eb e4                	jmp    c0020fc4 <FAT::FAT()+0x30>
c0020fe0:	90                   	nop
c0020fe1:	83 c4 1c             	add    esp,0x1c
c0020fe4:	c3                   	ret    
c0020fe5:	90                   	nop

c0020fe6 <FAT::fixFilepath(char*)>:
c0020fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fea:	8a 00                	mov    al,BYTE PTR [eax]
c0020fec:	3c 40                	cmp    al,0x40
c0020fee:	7e 2c                	jle    c002101c <FAT::fixFilepath(char*)+0x36>
c0020ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff4:	8a 00                	mov    al,BYTE PTR [eax]
c0020ff6:	83 e8 41             	sub    eax,0x41
c0020ff9:	88 c2                	mov    dl,al
c0020ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fff:	88 10                	mov    BYTE PTR [eax],dl
c0021001:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021005:	8a 00                	mov    al,BYTE PTR [eax]
c0021007:	0f be c0             	movsx  eax,al
c002100a:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c0021011:	83 c0 30             	add    eax,0x30
c0021014:	88 c2                	mov    dl,al
c0021016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002101a:	88 10                	mov    BYTE PTR [eax],dl
c002101c:	90                   	nop
c002101d:	c3                   	ret    

c002101e <FAT::open(char const*, void**, FileOpenMode)>:
c002101e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021024:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002102c:	74 0a                	je     c0021038 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002102e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021036:	75 0a                	jne    c0021042 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021038:	b8 04 00 00 00       	mov    eax,0x4
c002103d:	e9 fd 00 00 00       	jmp    c002113f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021042:	83 ec 08             	sub    esp,0x8
c0021045:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002104c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021050:	50                   	push   eax
c0021051:	e8 de f7 fd ff       	call   c0000834 <strcpy>
c0021056:	83 c4 10             	add    esp,0x10
c0021059:	83 ec 08             	sub    esp,0x8
c002105c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021060:	50                   	push   eax
c0021061:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021068:	e8 79 ff ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c002106d:	83 c4 10             	add    esp,0x10
c0021070:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021078:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107f:	83 e0 01             	and    eax,0x1
c0021082:	74 08                	je     c002108c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021084:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002108c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021093:	83 e0 04             	and    eax,0x4
c0021096:	74 10                	je     c00210a8 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021098:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210a0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210af:	83 e0 02             	and    eax,0x2
c00210b2:	74 08                	je     c00210bc <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210c3:	83 e0 08             	and    eax,0x8
c00210c6:	74 08                	je     c00210d0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210c8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210d7:	83 e0 10             	and    eax,0x10
c00210da:	74 08                	je     c00210e4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210dc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210e4:	83 ec 0c             	sub    esp,0xc
c00210e7:	68 50 02 00 00       	push   0x250
c00210ec:	e8 4f e7 fe ff       	call   c000f840 <malloc>
c00210f1:	83 c4 10             	add    esp,0x10
c00210f4:	89 c2                	mov    edx,eax
c00210f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210fd:	89 10                	mov    DWORD PTR [eax],edx
c00210ff:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021107:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002110e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021110:	83 ec 04             	sub    esp,0x4
c0021113:	52                   	push   edx
c0021114:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021118:	52                   	push   edx
c0021119:	50                   	push   eax
c002111a:	e8 72 3e fe ff       	call   c0004f91 <f_open>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021129:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021131:	74 07                	je     c002113a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021133:	b8 01 00 00 00       	mov    eax,0x1
c0021138:	eb 05                	jmp    c002113f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002113a:	b8 00 00 00 00       	mov    eax,0x0
c002113f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021145:	c3                   	ret    

c0021146 <FAT::openDir(char const*, void**)>:
c0021146:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002114c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021154:	74 0a                	je     c0021160 <FAT::openDir(char const*, void**)+0x1a>
c0021156:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002115e:	75 07                	jne    c0021167 <FAT::openDir(char const*, void**)+0x21>
c0021160:	b8 04 00 00 00       	mov    eax,0x4
c0021165:	eb 7d                	jmp    c00211e4 <FAT::openDir(char const*, void**)+0x9e>
c0021167:	83 ec 08             	sub    esp,0x8
c002116a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021171:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021175:	50                   	push   eax
c0021176:	e8 b9 f6 fd ff       	call   c0000834 <strcpy>
c002117b:	83 c4 10             	add    esp,0x10
c002117e:	83 ec 08             	sub    esp,0x8
c0021181:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021185:	50                   	push   eax
c0021186:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002118d:	e8 54 fe ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021192:	83 c4 10             	add    esp,0x10
c0021195:	83 ec 0c             	sub    esp,0xc
c0021198:	6a 4c                	push   0x4c
c002119a:	e8 a1 e6 fe ff       	call   c000f840 <malloc>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	89 c2                	mov    edx,eax
c00211a4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211ab:	89 10                	mov    DWORD PTR [eax],edx
c00211ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b6:	83 ec 08             	sub    esp,0x8
c00211b9:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211bd:	52                   	push   edx
c00211be:	50                   	push   eax
c00211bf:	e8 05 4e fe ff       	call   c0005fc9 <f_opendir>
c00211c4:	83 c4 10             	add    esp,0x10
c00211c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211ce:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211d6:	74 07                	je     c00211df <FAT::openDir(char const*, void**)+0x99>
c00211d8:	b8 01 00 00 00       	mov    eax,0x1
c00211dd:	eb 05                	jmp    c00211e4 <FAT::openDir(char const*, void**)+0x9e>
c00211df:	b8 00 00 00 00       	mov    eax,0x0
c00211e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211ea:	c3                   	ret    
c00211eb:	90                   	nop

c00211ec <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211f2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211fa:	75 0a                	jne    c0021206 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211fc:	b8 04 00 00 00       	mov    eax,0x4
c0021201:	e9 c9 00 00 00       	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021206:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002120e:	75 0a                	jne    c002121a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021210:	b8 04 00 00 00       	mov    eax,0x4
c0021215:	e9 b5 00 00 00       	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002121a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021222:	75 0a                	jne    c002122e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021224:	b8 04 00 00 00       	mov    eax,0x4
c0021229:	e9 a1 00 00 00       	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002122e:	83 ec 08             	sub    esp,0x8
c0021231:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021238:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002123f:	50                   	push   eax
c0021240:	e8 ef f5 fd ff       	call   c0000834 <strcpy>
c0021245:	83 c4 10             	add    esp,0x10
c0021248:	83 ec 08             	sub    esp,0x8
c002124b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021252:	50                   	push   eax
c0021253:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002125a:	e8 87 fd ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c002125f:	83 c4 10             	add    esp,0x10
c0021262:	83 ec 08             	sub    esp,0x8
c0021265:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021269:	50                   	push   eax
c002126a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021271:	50                   	push   eax
c0021272:	e8 11 4f fe ff       	call   c0006188 <f_stat>
c0021277:	83 c4 10             	add    esp,0x10
c002127a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021281:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021288:	85 c0                	test   eax,eax
c002128a:	74 07                	je     c0021293 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002128c:	83 f8 04             	cmp    eax,0x4
c002128f:	74 32                	je     c00212c3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021291:	eb 37                	jmp    c00212ca <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021293:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021297:	0f b6 c0             	movzx  eax,al
c002129a:	83 e0 10             	and    eax,0x10
c002129d:	0f 95 c2             	setne  dl
c00212a0:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212a7:	88 10                	mov    BYTE PTR [eax],dl
c00212a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212b0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212b7:	89 01                	mov    DWORD PTR [ecx],eax
c00212b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212bc:	b8 00 00 00 00       	mov    eax,0x0
c00212c1:	eb 0c                	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c3:	b8 02 00 00 00       	mov    eax,0x2
c00212c8:	eb 05                	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ca:	b8 01 00 00 00       	mov    eax,0x1
c00212cf:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212d5:	c3                   	ret    

c00212d6 <FAT::unlink(char const*)>:
c00212d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212dc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212e4:	75 07                	jne    c00212ed <FAT::unlink(char const*)+0x17>
c00212e6:	b8 04 00 00 00       	mov    eax,0x4
c00212eb:	eb 5c                	jmp    c0021349 <FAT::unlink(char const*)+0x73>
c00212ed:	83 ec 08             	sub    esp,0x8
c00212f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212fb:	50                   	push   eax
c00212fc:	e8 33 f5 fd ff       	call   c0000834 <strcpy>
c0021301:	83 c4 10             	add    esp,0x10
c0021304:	83 ec 08             	sub    esp,0x8
c0021307:	8d 44 24 14          	lea    eax,[esp+0x14]
c002130b:	50                   	push   eax
c002130c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021313:	e8 ce fc ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	83 ec 0c             	sub    esp,0xc
c002131e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021322:	50                   	push   eax
c0021323:	e8 b2 51 fe ff       	call   c00064da <f_unlink>
c0021328:	83 c4 10             	add    esp,0x10
c002132b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021332:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021339:	85 c0                	test   eax,eax
c002133b:	75 07                	jne    c0021344 <FAT::unlink(char const*)+0x6e>
c002133d:	b8 00 00 00 00       	mov    eax,0x0
c0021342:	eb 05                	jmp    c0021349 <FAT::unlink(char const*)+0x73>
c0021344:	b8 01 00 00 00       	mov    eax,0x1
c0021349:	81 c4 1c 01 00 00    	add    esp,0x11c
c002134f:	c3                   	ret    

c0021350 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021350:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021356:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002135d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021364:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021368:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002136c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021374:	75 0a                	jne    c0021380 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021376:	b8 04 00 00 00       	mov    eax,0x4
c002137b:	e9 1c 01 00 00       	jmp    c002149c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021380:	83 ec 08             	sub    esp,0x8
c0021383:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002138a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002138e:	50                   	push   eax
c002138f:	e8 a0 f4 fd ff       	call   c0000834 <strcpy>
c0021394:	83 c4 10             	add    esp,0x10
c0021397:	83 ec 08             	sub    esp,0x8
c002139a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002139e:	50                   	push   eax
c002139f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213a6:	e8 3b fc ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c00213ab:	83 c4 10             	add    esp,0x10
c00213ae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213b6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213c3:	83 e0 01             	and    eax,0x1
c00213c6:	74 08                	je     c00213d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213c8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d5:	83 e0 02             	and    eax,0x2
c00213d8:	74 08                	je     c00213e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213da:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e7:	83 e0 04             	and    eax,0x4
c00213ea:	74 08                	je     c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213ec:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213f9:	83 e0 08             	and    eax,0x8
c00213fc:	74 08                	je     c0021406 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213fe:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021406:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002140b:	83 e0 01             	and    eax,0x1
c002140e:	74 08                	je     c0021418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021410:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021418:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002141d:	83 e0 02             	and    eax,0x2
c0021420:	74 08                	je     c002142a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021422:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002142a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002142f:	83 e0 04             	and    eax,0x4
c0021432:	74 08                	je     c002143c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021434:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002143c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021441:	83 e0 08             	and    eax,0x8
c0021444:	74 08                	je     c002144e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021446:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002144e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021455:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002145c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021464:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002146c:	83 ec 04             	sub    esp,0x4
c002146f:	52                   	push   edx
c0021470:	50                   	push   eax
c0021471:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021475:	50                   	push   eax
c0021476:	e8 01 57 fe ff       	call   c0006b7c <f_chmod>
c002147b:	83 c4 10             	add    esp,0x10
c002147e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021485:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002148c:	85 c0                	test   eax,eax
c002148e:	75 07                	jne    c0021497 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021490:	b8 00 00 00 00       	mov    eax,0x0
c0021495:	eb 05                	jmp    c002149c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021497:	b8 01 00 00 00       	mov    eax,0x1
c002149c:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214a2:	c3                   	ret    
c00214a3:	90                   	nop

c00214a4 <FAT::rename(char const*, char const*)>:
c00214a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214aa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214b2:	74 0a                	je     c00214be <FAT::rename(char const*, char const*)+0x1a>
c00214b4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214bc:	75 0a                	jne    c00214c8 <FAT::rename(char const*, char const*)+0x24>
c00214be:	b8 04 00 00 00       	mov    eax,0x4
c00214c3:	e9 98 00 00 00       	jmp    c0021560 <FAT::rename(char const*, char const*)+0xbc>
c00214c8:	83 ec 08             	sub    esp,0x8
c00214cb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214d9:	50                   	push   eax
c00214da:	e8 55 f3 fd ff       	call   c0000834 <strcpy>
c00214df:	83 c4 10             	add    esp,0x10
c00214e2:	83 ec 08             	sub    esp,0x8
c00214e5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214ec:	50                   	push   eax
c00214ed:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214f4:	e8 ed fa ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	83 ec 08             	sub    esp,0x8
c00214ff:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021506:	8d 44 24 18          	lea    eax,[esp+0x18]
c002150a:	50                   	push   eax
c002150b:	e8 24 f3 fd ff       	call   c0000834 <strcpy>
c0021510:	83 c4 10             	add    esp,0x10
c0021513:	83 ec 08             	sub    esp,0x8
c0021516:	8d 44 24 14          	lea    eax,[esp+0x14]
c002151a:	50                   	push   eax
c002151b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021522:	e8 bf fa ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021527:	83 c4 10             	add    esp,0x10
c002152a:	83 ec 08             	sub    esp,0x8
c002152d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021531:	50                   	push   eax
c0021532:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021539:	50                   	push   eax
c002153a:	e8 4a 53 fe ff       	call   c0006889 <f_rename>
c002153f:	83 c4 10             	add    esp,0x10
c0021542:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021549:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021550:	85 c0                	test   eax,eax
c0021552:	75 07                	jne    c002155b <FAT::rename(char const*, char const*)+0xb7>
c0021554:	b8 00 00 00 00       	mov    eax,0x0
c0021559:	eb 05                	jmp    c0021560 <FAT::rename(char const*, char const*)+0xbc>
c002155b:	b8 01 00 00 00       	mov    eax,0x1
c0021560:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021566:	c3                   	ret    
c0021567:	90                   	nop

c0021568 <FAT::mkdir(char const*)>:
c0021568:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002156e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021576:	75 07                	jne    c002157f <FAT::mkdir(char const*)+0x17>
c0021578:	b8 04 00 00 00       	mov    eax,0x4
c002157d:	eb 5c                	jmp    c00215db <FAT::mkdir(char const*)+0x73>
c002157f:	83 ec 08             	sub    esp,0x8
c0021582:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021589:	8d 44 24 18          	lea    eax,[esp+0x18]
c002158d:	50                   	push   eax
c002158e:	e8 a1 f2 fd ff       	call   c0000834 <strcpy>
c0021593:	83 c4 10             	add    esp,0x10
c0021596:	83 ec 08             	sub    esp,0x8
c0021599:	8d 44 24 14          	lea    eax,[esp+0x14]
c002159d:	50                   	push   eax
c002159e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215a5:	e8 3c fa ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c00215aa:	83 c4 10             	add    esp,0x10
c00215ad:	83 ec 0c             	sub    esp,0xc
c00215b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215b4:	50                   	push   eax
c00215b5:	e8 a3 50 fe ff       	call   c000665d <f_mkdir>
c00215ba:	83 c4 10             	add    esp,0x10
c00215bd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215c4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215cb:	85 c0                	test   eax,eax
c00215cd:	75 07                	jne    c00215d6 <FAT::mkdir(char const*)+0x6e>
c00215cf:	b8 00 00 00 00       	mov    eax,0x0
c00215d4:	eb 05                	jmp    c00215db <FAT::mkdir(char const*)+0x73>
c00215d6:	b8 01 00 00 00       	mov    eax,0x1
c00215db:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215e1:	c3                   	ret    

c00215e2 <FAT::exists(char const*)>:
c00215e2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215e8:	83 ec 08             	sub    esp,0x8
c00215eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215f6:	50                   	push   eax
c00215f7:	e8 38 f2 fd ff       	call   c0000834 <strcpy>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	83 ec 08             	sub    esp,0x8
c0021602:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021606:	50                   	push   eax
c0021607:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002160e:	e8 d3 f9 ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021613:	83 c4 10             	add    esp,0x10
c0021616:	83 ec 08             	sub    esp,0x8
c0021619:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021620:	50                   	push   eax
c0021621:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021625:	50                   	push   eax
c0021626:	e8 5d 4b fe ff       	call   c0006188 <f_stat>
c002162b:	83 c4 10             	add    esp,0x10
c002162e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021635:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002163c:	85 c0                	test   eax,eax
c002163e:	75 04                	jne    c0021644 <FAT::exists(char const*)+0x62>
c0021640:	b0 01                	mov    al,0x1
c0021642:	eb 02                	jmp    c0021646 <FAT::exists(char const*)+0x64>
c0021644:	b0 00                	mov    al,0x0
c0021646:	81 c4 2c 02 00 00    	add    esp,0x22c
c002164c:	c3                   	ret    
c002164d:	90                   	nop

c002164e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002164e:	b8 08 00 00 00       	mov    eax,0x8
c0021653:	c3                   	ret    

c0021654 <ISO9660::seek(void*, unsigned long long)>:
c0021654:	53                   	push   ebx
c0021655:	b8 04 00 00 00       	mov    eax,0x4
c002165a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002165e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021662:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021666:	85 d2                	test   edx,edx
c0021668:	74 17                	je     c0021681 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002166a:	89 c8                	mov    eax,ecx
c002166c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002166f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021672:	b8 01 00 00 00       	mov    eax,0x1
c0021677:	73 08                	jae    c0021681 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021679:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002167c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002167f:	31 c0                	xor    eax,eax
c0021681:	5b                   	pop    ebx
c0021682:	c3                   	ret    
c0021683:	90                   	nop

c0021684 <ISO9660::tell(void*, unsigned long long*)>:
c0021684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002168c:	85 d2                	test   edx,edx
c002168e:	74 12                	je     c00216a2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021690:	85 c0                	test   eax,eax
c0021692:	74 0e                	je     c00216a2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021694:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021697:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002169a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002169d:	89 10                	mov    DWORD PTR [eax],edx
c002169f:	31 c0                	xor    eax,eax
c00216a1:	c3                   	ret    
c00216a2:	b8 04 00 00 00       	mov    eax,0x4
c00216a7:	c3                   	ret    

c00216a8 <ISO9660::getName()>:
c00216a8:	b8 c8 ca 02 c0       	mov    eax,0xc002cac8
c00216ad:	c3                   	ret    

c00216ae <ISO9660::stat(void*, unsigned long long*)>:
c00216ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216b6:	85 d2                	test   edx,edx
c00216b8:	74 12                	je     c00216cc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216ba:	85 c0                	test   eax,eax
c00216bc:	74 0e                	je     c00216cc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216be:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216c1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216c4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216c7:	89 10                	mov    DWORD PTR [eax],edx
c00216c9:	31 c0                	xor    eax,eax
c00216cb:	c3                   	ret    
c00216cc:	b8 04 00 00 00       	mov    eax,0x4
c00216d1:	c3                   	ret    

c00216d2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216d2:	b8 01 00 00 00       	mov    eax,0x1
c00216d7:	c3                   	ret    

c00216d8 <ISO9660::unlink(char const*)>:
c00216d8:	b8 01 00 00 00       	mov    eax,0x1
c00216dd:	c3                   	ret    

c00216de <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216de:	b8 01 00 00 00       	mov    eax,0x1
c00216e3:	c3                   	ret    

c00216e4 <ISO9660::rename(char const*, char const*)>:
c00216e4:	b8 01 00 00 00       	mov    eax,0x1
c00216e9:	c3                   	ret    

c00216ea <ISO9660::mkdir(char const*)>:
c00216ea:	b8 01 00 00 00       	mov    eax,0x1
c00216ef:	c3                   	ret    

c00216f0 <ISO9660::close(void*)>:
c00216f0:	83 ec 0c             	sub    esp,0xc
c00216f3:	b8 04 00 00 00       	mov    eax,0x4
c00216f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216fc:	85 d2                	test   edx,edx
c00216fe:	74 0e                	je     c002170e <ISO9660::close(void*)+0x1e>
c0021700:	83 ec 0c             	sub    esp,0xc
c0021703:	52                   	push   edx
c0021704:	e8 47 e1 fe ff       	call   c000f850 <free>
c0021709:	83 c4 10             	add    esp,0x10
c002170c:	31 c0                	xor    eax,eax
c002170e:	83 c4 0c             	add    esp,0xc
c0021711:	c3                   	ret    

c0021712 <ISO9660::closeDir(void*)>:
c0021712:	83 ec 0c             	sub    esp,0xc
c0021715:	b8 04 00 00 00       	mov    eax,0x4
c002171a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002171e:	85 d2                	test   edx,edx
c0021720:	74 0e                	je     c0021730 <ISO9660::closeDir(void*)+0x1e>
c0021722:	83 ec 0c             	sub    esp,0xc
c0021725:	52                   	push   edx
c0021726:	e8 25 e1 fe ff       	call   c000f850 <free>
c002172b:	83 c4 10             	add    esp,0x10
c002172e:	31 c0                	xor    eax,eax
c0021730:	83 c4 0c             	add    esp,0xc
c0021733:	c3                   	ret    

c0021734 <ISO9660::~ISO9660()>:
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	ba 2c cb 02 c0       	mov    edx,0xc002cb2c
c002173c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021740:	89 10                	mov    DWORD PTR [eax],edx
c0021742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	50                   	push   eax
c002174a:	e8 33 1b ff ff       	call   c0013282 <Filesystem::~Filesystem()>
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	90                   	nop
c0021753:	83 c4 0c             	add    esp,0xc
c0021756:	c3                   	ret    
c0021757:	90                   	nop

c0021758 <ISO9660::~ISO9660()>:
c0021758:	83 ec 0c             	sub    esp,0xc
c002175b:	83 ec 0c             	sub    esp,0xc
c002175e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021762:	e8 cd ff ff ff       	call   c0021734 <ISO9660::~ISO9660()>
c0021767:	83 c4 10             	add    esp,0x10
c002176a:	83 ec 08             	sub    esp,0x8
c002176d:	6a 08                	push   0x8
c002176f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021773:	e8 01 17 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0021778:	83 c4 10             	add    esp,0x10
c002177b:	83 c4 0c             	add    esp,0xc
c002177e:	c3                   	ret    

c002177f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002177f:	55                   	push   ebp
c0021780:	31 c9                	xor    ecx,ecx
c0021782:	57                   	push   edi
c0021783:	56                   	push   esi
c0021784:	53                   	push   ebx
c0021785:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021789:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002178d:	89 eb                	mov    ebx,ebp
c002178f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021793:	39 ce                	cmp    esi,ecx
c0021795:	7e 17                	jle    c00217ae <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021797:	31 d2                	xor    edx,edx
c0021799:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002179d:	7d 13                	jge    c00217b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002179f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217a3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217a6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217a9:	75 0d                	jne    c00217b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217ab:	42                   	inc    edx
c00217ac:	eb eb                	jmp    c0021799 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217ae:	31 c0                	xor    eax,eax
c00217b0:	eb 0a                	jmp    c00217bc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217b6:	eb 04                	jmp    c00217bc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217b8:	41                   	inc    ecx
c00217b9:	43                   	inc    ebx
c00217ba:	eb d7                	jmp    c0021793 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217bc:	5b                   	pop    ebx
c00217bd:	5e                   	pop    esi
c00217be:	5f                   	pop    edi
c00217bf:	5d                   	pop    ebp
c00217c0:	c3                   	ret    

c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217c1:	56                   	push   esi
c00217c2:	53                   	push   ebx
c00217c3:	52                   	push   edx
c00217c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217d0:	39 0d 40 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d40,ecx
c00217d6:	75 08                	jne    c00217e0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217d8:	38 05 94 db 02 c0    	cmp    BYTE PTR ds:0xc002db94,al
c00217de:	74 2b                	je     c002180b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217e0:	83 ec 0c             	sub    esp,0xc
c00217e3:	a2 94 db 02 c0       	mov    ds:0xc002db94,al
c00217e8:	68 60 1d 03 c0       	push   0xc0031d60
c00217ed:	0f be c0             	movsx  eax,al
c00217f0:	6a 01                	push   0x1
c00217f2:	89 0d 40 1d 03 c0    	mov    DWORD PTR ds:0xc0031d40,ecx
c00217f8:	31 db                	xor    ebx,ebx
c00217fa:	53                   	push   ebx
c00217fb:	51                   	push   ecx
c00217fc:	ff 34 85 1c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14e4]
c0021803:	e8 62 4f ff ff       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0021808:	83 c4 20             	add    esp,0x20
c002180b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021813:	c7 44 24 14 60 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d60
c002181b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002181f:	58                   	pop    eax
c0021820:	5b                   	pop    ebx
c0021821:	5e                   	pop    esi
c0021822:	e9 1d ef fd ff       	jmp    c0000744 <memcpy>
c0021827:	90                   	nop

c0021828 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021828:	81 ec 10 08 00 00    	sub    esp,0x810
c002182e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021835:	83 c0 41             	add    eax,0x41
c0021838:	0f be c0             	movsx  eax,al
c002183b:	50                   	push   eax
c002183c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021840:	50                   	push   eax
c0021841:	6a 10                	push   0x10
c0021843:	e8 79 ff ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021848:	83 c4 10             	add    esp,0x10
c002184b:	31 c0                	xor    eax,eax
c002184d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021852:	75 1d                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021854:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021859:	75 16                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002185b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021860:	75 0f                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021862:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021867:	75 08                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021869:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002186e:	0f 94 c0             	sete   al
c0021871:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021877:	c3                   	ret    

c0021878 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021878:	55                   	push   ebp
c0021879:	57                   	push   edi
c002187a:	56                   	push   esi
c002187b:	53                   	push   ebx
c002187c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021882:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021889:	85 ed                	test   ebp,ebp
c002188b:	0f 84 d6 01 00 00    	je     c0021a67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021891:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021899:	0f 84 c8 01 00 00    	je     c0021a67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002189f:	b8 01 00 00 00       	mov    eax,0x1
c00218a4:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218a8:	0f 85 be 01 00 00    	jne    c0021a6c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218ae:	31 d2                	xor    edx,edx
c00218b0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218b7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218ba:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218c1:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218cb:	01 f0                	add    eax,esi
c00218cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218d0:	11 fa                	adc    edx,edi
c00218d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218d6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218de:	19 d1                	sbb    ecx,edx
c00218e0:	72 0a                	jb     c00218ec <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218ea:	eb 13                	jmp    c00218ff <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218f4:	29 f0                	sub    eax,esi
c00218f6:	19 fa                	sbb    edx,edi
c00218f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021902:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021905:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021909:	51                   	push   ecx
c002190a:	c1 e0 0b             	shl    eax,0xb
c002190d:	01 c6                	add    esi,eax
c002190f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021913:	11 d7                	adc    edi,edx
c0021915:	50                   	push   eax
c0021916:	89 fa                	mov    edx,edi
c0021918:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002191c:	89 f0                	mov    eax,esi
c002191e:	53                   	push   ebx
c002191f:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021923:	50                   	push   eax
c0021924:	e8 98 fe ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021929:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002192d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021930:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021934:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002193a:	83 c4 10             	add    esp,0x10
c002193d:	b8 00 08 00 00       	mov    eax,0x800
c0021942:	29 d0                	sub    eax,edx
c0021944:	39 c1                	cmp    ecx,eax
c0021946:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002194a:	83 d9 00             	sbb    ecx,0x0
c002194d:	7d 1c                	jge    c002196b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002194f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021954:	75 12                	jne    c0021968 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021956:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002195d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021963:	e9 fb 00 00 00       	jmp    c0021a63 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002196b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002196e:	31 d2                	xor    edx,edx
c0021970:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021974:	39 c2                	cmp    edx,eax
c0021976:	7d 14                	jge    c002198c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021978:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002197f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021983:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021986:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021989:	42                   	inc    edx
c002198a:	eb e8                	jmp    c0021974 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002198c:	89 c3                	mov    ebx,eax
c002198e:	85 c0                	test   eax,eax
c0021990:	79 02                	jns    c0021994 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021992:	31 db                	xor    ebx,ebx
c0021994:	99                   	cdq    
c0021995:	01 c3                	add    ebx,eax
c0021997:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002199e:	01 c6                	add    esi,eax
c00219a0:	11 d7                	adc    edi,edx
c00219a2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219a6:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219aa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219ad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219b1:	29 c6                	sub    esi,eax
c00219b3:	19 d7                	sbb    edi,edx
c00219b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00219b8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219bc:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219c1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219c4:	b8 00 00 00 00       	mov    eax,0x0
c00219c9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219cd:	7d 3e                	jge    c0021a0d <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219cf:	52                   	push   edx
c00219d0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d4:	50                   	push   eax
c00219d5:	53                   	push   ebx
c00219d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219de:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219e2:	50                   	push   eax
c00219e3:	e8 d9 fd ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219f0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219f5:	81 c3 00 08 00 00    	add    ebx,0x800
c00219fb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a03:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a08:	83 c4 10             	add    esp,0x10
c0021a0b:	eb af                	jmp    c00219bc <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a11:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a14:	74 32                	je     c0021a48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a16:	50                   	push   eax
c0021a17:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a1b:	50                   	push   eax
c0021a1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a20:	50                   	push   eax
c0021a21:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a29:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a2d:	56                   	push   esi
c0021a2e:	e8 8e fd ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a33:	83 c4 0c             	add    esp,0xc
c0021a36:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a3a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a3e:	50                   	push   eax
c0021a3f:	53                   	push   ebx
c0021a40:	e8 ff ec fd ff       	call   c0000744 <memcpy>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a4f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a57:	89 38                	mov    DWORD PTR [eax],edi
c0021a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a5d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a63:	31 c0                	xor    eax,eax
c0021a65:	eb 05                	jmp    c0021a6c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a67:	b8 04 00 00 00       	mov    eax,0x4
c0021a6c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a72:	5b                   	pop    ebx
c0021a73:	5e                   	pop    esi
c0021a74:	5f                   	pop    edi
c0021a75:	5d                   	pop    ebp
c0021a76:	c3                   	ret    
c0021a77:	90                   	nop

c0021a78 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a78:	55                   	push   ebp
c0021a79:	57                   	push   edi
c0021a7a:	56                   	push   esi
c0021a7b:	53                   	push   ebx
c0021a7c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a82:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a89:	85 f6                	test   esi,esi
c0021a8b:	0f 84 64 02 00 00    	je     c0021cf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a91:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a99:	0f 84 56 02 00 00    	je     c0021cf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a9f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021aa2:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021aa5:	75 0a                	jne    c0021ab1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021aa7:	b8 07 00 00 00       	mov    eax,0x7
c0021aac:	e9 49 02 00 00       	jmp    c0021cfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ab1:	50                   	push   eax
c0021ab2:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ab6:	50                   	push   eax
c0021ab7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021abe:	53                   	push   ebx
c0021abf:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ac1:	c1 e0 0b             	shl    eax,0xb
c0021ac4:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021ac7:	c1 e8 0b             	shr    eax,0xb
c0021aca:	50                   	push   eax
c0021acb:	e8 f1 fc ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ad0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ad3:	83 c4 10             	add    esp,0x10
c0021ad6:	89 c1                	mov    ecx,eax
c0021ad8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021adb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ae1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ae4:	84 db                	test   bl,bl
c0021ae6:	0f 85 90 00 00 00    	jne    c0021b7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aec:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021af2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021af8:	29 c7                	sub    edi,eax
c0021afa:	89 fb                	mov    ebx,edi
c0021afc:	c1 fb 1f             	sar    ebx,0x1f
c0021aff:	01 f8                	add    eax,edi
c0021b01:	11 da                	adc    edx,ebx
c0021b03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b0b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b0e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b11:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b14:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b17:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b1e:	89 d8                	mov    eax,ebx
c0021b20:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b23:	ba 00 00 00 00       	mov    edx,0x0
c0021b28:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b2c:	b8 00 00 00 00       	mov    eax,0x0
c0021b31:	73 0b                	jae    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b3a:	29 f8                	sub    eax,edi
c0021b3c:	19 da                	sbb    edx,ebx
c0021b3e:	89 d3                	mov    ebx,edx
c0021b40:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b43:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b46:	09 c3                	or     ebx,eax
c0021b48:	0f 84 59 ff ff ff    	je     c0021aa7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b4e:	55                   	push   ebp
c0021b4f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b53:	50                   	push   eax
c0021b54:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b5b:	53                   	push   ebx
c0021b5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b5e:	c1 e0 0b             	shl    eax,0xb
c0021b61:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b65:	c1 e8 0b             	shr    eax,0xb
c0021b68:	50                   	push   eax
c0021b69:	e8 53 fc ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b6e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b71:	83 c4 10             	add    esp,0x10
c0021b74:	25 ff 07 00 00       	and    eax,0x7ff
c0021b79:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b7c:	57                   	push   edi
c0021b7d:	6a 28                	push   0x28
c0021b7f:	6a 00                	push   0x0
c0021b81:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b85:	50                   	push   eax
c0021b86:	e8 ed eb fd ff       	call   c0000778 <memset>
c0021b8b:	31 d2                	xor    edx,edx
c0021b8d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b90:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b96:	89 f8                	mov    eax,edi
c0021b98:	83 c0 21             	add    eax,0x21
c0021b9b:	83 d2 00             	adc    edx,0x0
c0021b9e:	89 c7                	mov    edi,eax
c0021ba0:	89 d5                	mov    ebp,edx
c0021ba2:	83 c4 10             	add    esp,0x10
c0021ba5:	31 c9                	xor    ecx,ecx
c0021ba7:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021bae:	83 f9 28             	cmp    ecx,0x28
c0021bb1:	88 04 24             	mov    BYTE PTR [esp],al
c0021bb4:	0f 94 c2             	sete   dl
c0021bb7:	88 d0                	mov    al,dl
c0021bb9:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bbe:	39 fa                	cmp    edx,edi
c0021bc0:	ba 00 00 00 00       	mov    edx,0x0
c0021bc5:	19 ea                	sbb    edx,ebp
c0021bc7:	0f 92 c2             	setb   dl
c0021bca:	09 c2                	or     edx,eax
c0021bcc:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bd0:	0f 94 c0             	sete   al
c0021bd3:	08 d0                	or     al,dl
c0021bd5:	75 16                	jne    c0021bed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bd7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bdb:	74 10                	je     c0021bed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bdd:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021be0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021be4:	41                   	inc    ecx
c0021be5:	83 c7 01             	add    edi,0x1
c0021be8:	83 d5 00             	adc    ebp,0x0
c0021beb:	eb ba                	jmp    c0021ba7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bed:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bf4:	83 ec 0c             	sub    esp,0xc
c0021bf7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bfb:	57                   	push   edi
c0021bfc:	e8 93 eb fd ff       	call   c0000794 <strlen>
c0021c01:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c09:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c0d:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c14:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c17:	5a                   	pop    edx
c0021c18:	25 ff 07 00 00       	and    eax,0x7ff
c0021c1d:	01 c8                	add    eax,ecx
c0021c1f:	59                   	pop    ecx
c0021c20:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c26:	83 e0 02             	and    eax,0x2
c0021c29:	3c 01                	cmp    al,0x1
c0021c2b:	19 c0                	sbb    eax,eax
c0021c2d:	83 c0 02             	add    eax,0x2
c0021c30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c34:	57                   	push   edi
c0021c35:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c39:	50                   	push   eax
c0021c3a:	e8 f5 eb fd ff       	call   c0000834 <strcpy>
c0021c3f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	84 c0                	test   al,al
c0021c48:	75 21                	jne    c0021c6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c4a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c52:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c5a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c62:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c69:	eb 28                	jmp    c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c6b:	fe c8                	dec    al
c0021c6d:	75 24                	jne    c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c6f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c77:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c7f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c87:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c8e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c93:	0f b6 fb             	movzx  edi,bl
c0021c96:	31 db                	xor    ebx,ebx
c0021c98:	50                   	push   eax
c0021c99:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021ca0:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021ca4:	50                   	push   eax
c0021ca5:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021cac:	e8 93 ea fd ff       	call   c0000744 <memcpy>
c0021cb1:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021cb8:	89 f9                	mov    ecx,edi
c0021cba:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cc0:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cc3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cc6:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cc9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	39 c7                	cmp    edi,eax
c0021cd1:	89 df                	mov    edi,ebx
c0021cd3:	19 d7                	sbb    edi,edx
c0021cd5:	72 10                	jb     c0021ce7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cd7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cde:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021ce5:	eb 0a                	jmp    c0021cf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021ce7:	29 c8                	sub    eax,ecx
c0021ce9:	19 da                	sbb    edx,ebx
c0021ceb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cee:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cf1:	31 c0                	xor    eax,eax
c0021cf3:	eb 05                	jmp    c0021cfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cf5:	b8 04 00 00 00       	mov    eax,0x4
c0021cfa:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d00:	5b                   	pop    ebx
c0021d01:	5e                   	pop    esi
c0021d02:	5f                   	pop    edi
c0021d03:	5d                   	pop    ebp
c0021d04:	c3                   	ret    

c0021d05 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d05:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d0b:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d13:	50                   	push   eax
c0021d14:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d18:	50                   	push   eax
c0021d19:	6a 10                	push   0x10
c0021d1b:	e8 a1 fa ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d20:	83 c4 0c             	add    esp,0xc
c0021d23:	6a 22                	push   0x22
c0021d25:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d2c:	50                   	push   eax
c0021d2d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d31:	50                   	push   eax
c0021d32:	e8 0d ea fd ff       	call   c0000744 <memcpy>
c0021d37:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d42:	89 10                	mov    DWORD PTR [eax],edx
c0021d44:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d4f:	89 10                	mov    DWORD PTR [eax],edx
c0021d51:	b0 01                	mov    al,0x1
c0021d53:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d59:	c3                   	ret    

c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d5a:	55                   	push   ebp
c0021d5b:	57                   	push   edi
c0021d5c:	56                   	push   esi
c0021d5d:	53                   	push   ebx
c0021d5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d64:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d6b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d76:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d7a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d82:	75 03                	jne    c0021d87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d84:	83 c3 02             	add    ebx,0x2
c0021d87:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d8a:	75 03                	jne    c0021d8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d8c:	43                   	inc    ebx
c0021d8d:	eb f8                	jmp    c0021d87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d8f:	51                   	push   ecx
c0021d90:	68 00 01 00 00       	push   0x100
c0021d95:	6a 00                	push   0x0
c0021d97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d9b:	50                   	push   eax
c0021d9c:	e8 d7 e9 fd ff       	call   c0000778 <memset>
c0021da1:	83 c4 10             	add    esp,0x10
c0021da4:	31 d2                	xor    edx,edx
c0021da6:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021da9:	84 c0                	test   al,al
c0021dab:	74 21                	je     c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021dad:	3c 2f                	cmp    al,0x2f
c0021daf:	75 0b                	jne    c0021dbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021db1:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021db5:	bd 01 00 00 00       	mov    ebp,0x1
c0021dba:	eb 14                	jmp    c0021dd0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021dbc:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021dbf:	80 f9 19             	cmp    cl,0x19
c0021dc2:	77 03                	ja     c0021dc7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dc4:	83 e8 20             	sub    eax,0x20
c0021dc7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021dcb:	42                   	inc    edx
c0021dcc:	eb d8                	jmp    c0021da6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021dce:	31 ed                	xor    ebp,ebp
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dda:	e8 61 da fe ff       	call   c000f840 <malloc>
c0021ddf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021de6:	89 c6                	mov    esi,eax
c0021de8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dee:	c1 ef 0b             	shr    edi,0xb
c0021df1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021df8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dfc:	83 c4 10             	add    esp,0x10
c0021dff:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e08:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e0f:	74 28                	je     c0021e39 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e11:	52                   	push   edx
c0021e12:	57                   	push   edi
c0021e13:	50                   	push   eax
c0021e14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e18:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e1f:	e8 9d f9 ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e28:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e2f:	05 00 08 00 00       	add    eax,0x800
c0021e34:	83 c4 10             	add    esp,0x10
c0021e37:	eb cb                	jmp    c0021e04 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e39:	83 ec 0c             	sub    esp,0xc
c0021e3c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e40:	57                   	push   edi
c0021e41:	e8 4e e9 fd ff       	call   c0000794 <strlen>
c0021e46:	50                   	push   eax
c0021e47:	57                   	push   edi
c0021e48:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e4f:	56                   	push   esi
c0021e50:	e8 2a f9 ff ff       	call   c002177f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e55:	83 c4 20             	add    esp,0x20
c0021e58:	85 c0                	test   eax,eax
c0021e5a:	75 13                	jne    c0021e6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e5c:	83 ec 0c             	sub    esp,0xc
c0021e5f:	56                   	push   esi
c0021e60:	e8 eb d9 fe ff       	call   c000f850 <free>
c0021e65:	83 c4 10             	add    esp,0x10
c0021e68:	31 c0                	xor    eax,eax
c0021e6a:	e9 b3 00 00 00       	jmp    c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e6f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e73:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e77:	c1 e7 08             	shl    edi,0x8
c0021e7a:	c1 e2 10             	shl    edx,0x10
c0021e7d:	09 d7                	or     edi,edx
c0021e7f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e83:	09 d7                	or     edi,edx
c0021e85:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e89:	c1 e2 18             	shl    edx,0x18
c0021e8c:	09 d7                	or     edi,edx
c0021e8e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e92:	89 d1                	mov    ecx,edx
c0021e94:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e98:	c1 e1 08             	shl    ecx,0x8
c0021e9b:	c1 e2 10             	shl    edx,0x10
c0021e9e:	09 ca                	or     edx,ecx
c0021ea0:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ea4:	09 ca                	or     edx,ecx
c0021ea6:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021eaa:	c1 e1 18             	shl    ecx,0x18
c0021ead:	09 ca                	or     edx,ecx
c0021eaf:	89 e9                	mov    ecx,ebp
c0021eb1:	84 c9                	test   cl,cl
c0021eb3:	74 3c                	je     c0021ef1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021eb5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021eb9:	83 ec 0c             	sub    esp,0xc
c0021ebc:	56                   	push   esi
c0021ebd:	e8 8e d9 fe ff       	call   c000f850 <free>
c0021ec2:	83 c4 0c             	add    esp,0xc
c0021ec5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ecc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ed1:	50                   	push   eax
c0021ed2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ed9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ee0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ee4:	52                   	push   edx
c0021ee5:	57                   	push   edi
c0021ee6:	53                   	push   ebx
c0021ee7:	e8 6e fe ff ff       	call   c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021eec:	83 c4 20             	add    esp,0x20
c0021eef:	eb 31                	jmp    c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ef1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ef4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021efb:	d0 e8                	shr    al,1
c0021efd:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eff:	83 e0 01             	and    eax,0x1
c0021f02:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f09:	83 ec 0c             	sub    esp,0xc
c0021f0c:	89 13                	mov    DWORD PTR [ebx],edx
c0021f0e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f15:	89 03                	mov    DWORD PTR [ebx],eax
c0021f17:	56                   	push   esi
c0021f18:	e8 33 d9 fe ff       	call   c000f850 <free>
c0021f1d:	83 c4 10             	add    esp,0x10
c0021f20:	b0 01                	mov    al,0x1
c0021f22:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f28:	5b                   	pop    ebx
c0021f29:	5e                   	pop    esi
c0021f2a:	5f                   	pop    edi
c0021f2b:	5d                   	pop    ebp
c0021f2c:	c3                   	ret    

c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f2d:	55                   	push   ebp
c0021f2e:	57                   	push   edi
c0021f2f:	56                   	push   esi
c0021f30:	53                   	push   ebx
c0021f31:	83 ec 20             	sub    esp,0x20
c0021f34:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f38:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f3c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f48:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f50:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f55:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f5b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f61:	57                   	push   edi
c0021f62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f66:	50                   	push   eax
c0021f67:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f6b:	50                   	push   eax
c0021f6c:	e8 94 fd ff ff       	call   c0021d05 <readRoot(unsigned int*, unsigned int*, char)>
c0021f71:	5a                   	pop    edx
c0021f72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f76:	e8 19 e8 fd ff       	call   c0000794 <strlen>
c0021f7b:	83 c4 10             	add    esp,0x10
c0021f7e:	83 f8 03             	cmp    eax,0x3
c0021f81:	77 17                	ja     c0021f9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f87:	89 03                	mov    DWORD PTR [ebx],eax
c0021f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f8d:	89 06                	mov    DWORD PTR [esi],eax
c0021f8f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f96:	b0 01                	mov    al,0x1
c0021f98:	eb 19                	jmp    c0021fb3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f9a:	50                   	push   eax
c0021f9b:	55                   	push   ebp
c0021f9c:	57                   	push   edi
c0021f9d:	56                   	push   esi
c0021f9e:	53                   	push   ebx
c0021f9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fa3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fa7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fab:	e8 aa fd ff ff       	call   c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fb0:	83 c4 20             	add    esp,0x20
c0021fb3:	83 c4 1c             	add    esp,0x1c
c0021fb6:	5b                   	pop    ebx
c0021fb7:	5e                   	pop    esi
c0021fb8:	5f                   	pop    edi
c0021fb9:	5d                   	pop    ebp
c0021fba:	c3                   	ret    
c0021fbb:	90                   	nop

c0021fbc <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fbc:	57                   	push   edi
c0021fbd:	56                   	push   esi
c0021fbe:	53                   	push   ebx
c0021fbf:	83 ec 10             	sub    esp,0x10
c0021fc2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fc6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fca:	85 ff                	test   edi,edi
c0021fcc:	0f 84 9d 00 00 00    	je     c002206f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fd2:	85 f6                	test   esi,esi
c0021fd4:	0f 84 95 00 00 00    	je     c002206f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fda:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fdf:	74 17                	je     c0021ff8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fe1:	83 ec 0c             	sub    esp,0xc
c0021fe4:	68 e3 ca 02 c0       	push   0xc002cae3
c0021fe9:	e8 6b 0f ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0021fee:	83 c4 10             	add    esp,0x10
c0021ff1:	b8 03 00 00 00       	mov    eax,0x3
c0021ff6:	eb 7c                	jmp    c0022074 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ff8:	83 ec 0c             	sub    esp,0xc
c0021ffb:	6a 1c                	push   0x1c
c0021ffd:	e8 3e d8 fe ff       	call   c000f840 <malloc>
c0022002:	89 07                	mov    DWORD PTR [edi],eax
c0022004:	89 c3                	mov    ebx,eax
c0022006:	58                   	pop    eax
c0022007:	8d 44 24 18          	lea    eax,[esp+0x18]
c002200b:	50                   	push   eax
c002200c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002200f:	50                   	push   eax
c0022010:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022014:	50                   	push   eax
c0022015:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022019:	50                   	push   eax
c002201a:	56                   	push   esi
c002201b:	e8 0d ff ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022020:	83 c4 20             	add    esp,0x20
c0022023:	84 c0                	test   al,al
c0022025:	74 07                	je     c002202e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022027:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002202c:	74 0b                	je     c0022039 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002202e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022032:	b8 01 00 00 00       	mov    eax,0x1
c0022037:	eb 3b                	jmp    c0022074 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002203d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022041:	89 03                	mov    DWORD PTR [ebx],eax
c0022043:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002204a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002204e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022055:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002205c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002205f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022066:	8a 06                	mov    al,BYTE PTR [esi]
c0022068:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002206b:	31 c0                	xor    eax,eax
c002206d:	eb 05                	jmp    c0022074 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002206f:	b8 04 00 00 00       	mov    eax,0x4
c0022074:	83 c4 10             	add    esp,0x10
c0022077:	5b                   	pop    ebx
c0022078:	5e                   	pop    esi
c0022079:	5f                   	pop    edi
c002207a:	c3                   	ret    
c002207b:	90                   	nop

c002207c <ISO9660::exists(char const*)>:
c002207c:	83 ec 28             	sub    esp,0x28
c002207f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022083:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022087:	52                   	push   edx
c0022088:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002208b:	52                   	push   edx
c002208c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022090:	52                   	push   edx
c0022091:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022095:	52                   	push   edx
c0022096:	50                   	push   eax
c0022097:	e8 91 fe ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002209c:	83 c4 3c             	add    esp,0x3c
c002209f:	c3                   	ret    

c00220a0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220a0:	56                   	push   esi
c00220a1:	53                   	push   ebx
c00220a2:	83 ec 14             	sub    esp,0x14
c00220a5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220ad:	85 db                	test   ebx,ebx
c00220af:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220b3:	0f 94 c2             	sete   dl
c00220b6:	85 f6                	test   esi,esi
c00220b8:	0f 94 c0             	sete   al
c00220bb:	08 c2                	or     dl,al
c00220bd:	75 68                	jne    c0022127 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220bf:	85 c9                	test   ecx,ecx
c00220c1:	74 64                	je     c0022127 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220c3:	83 ec 0c             	sub    esp,0xc
c00220c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220da:	50                   	push   eax
c00220db:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220de:	50                   	push   eax
c00220df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e3:	50                   	push   eax
c00220e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e8:	50                   	push   eax
c00220e9:	51                   	push   ecx
c00220ea:	e8 3e fe ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220ef:	83 c4 20             	add    esp,0x20
c00220f2:	ba 01 00 00 00       	mov    edx,0x1
c00220f7:	84 c0                	test   al,al
c00220f9:	74 31                	je     c002212c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022106:	89 03                	mov    DWORD PTR [ebx],eax
c0022108:	ba 00 00 00 00       	mov    edx,0x0
c002210d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022111:	85 c0                	test   eax,eax
c0022113:	0f 95 06             	setne  BYTE PTR [esi]
c0022116:	74 14                	je     c002212c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022118:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002211e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022125:	eb 05                	jmp    c002212c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022127:	ba 04 00 00 00       	mov    edx,0x4
c002212c:	83 c4 14             	add    esp,0x14
c002212f:	89 d0                	mov    eax,edx
c0022131:	5b                   	pop    ebx
c0022132:	5e                   	pop    esi
c0022133:	c3                   	ret    

c0022134 <ISO9660::openDir(char const*, void**)>:
c0022134:	57                   	push   edi
c0022135:	56                   	push   esi
c0022136:	53                   	push   ebx
c0022137:	83 ec 10             	sub    esp,0x10
c002213a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002213e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022142:	85 ff                	test   edi,edi
c0022144:	0f 84 95 00 00 00    	je     c00221df <ISO9660::openDir(char const*, void**)+0xab>
c002214a:	85 f6                	test   esi,esi
c002214c:	0f 84 8d 00 00 00    	je     c00221df <ISO9660::openDir(char const*, void**)+0xab>
c0022152:	83 ec 0c             	sub    esp,0xc
c0022155:	6a 1c                	push   0x1c
c0022157:	e8 e4 d6 fe ff       	call   c000f840 <malloc>
c002215c:	89 07                	mov    DWORD PTR [edi],eax
c002215e:	89 c3                	mov    ebx,eax
c0022160:	59                   	pop    ecx
c0022161:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022165:	50                   	push   eax
c0022166:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022169:	50                   	push   eax
c002216a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002216e:	50                   	push   eax
c002216f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022173:	50                   	push   eax
c0022174:	56                   	push   esi
c0022175:	e8 b3 fd ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002217a:	83 c4 20             	add    esp,0x20
c002217d:	84 c0                	test   al,al
c002217f:	74 07                	je     c0022188 <ISO9660::openDir(char const*, void**)+0x54>
c0022181:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022186:	75 21                	jne    c00221a9 <ISO9660::openDir(char const*, void**)+0x75>
c0022188:	0f b6 c0             	movzx  eax,al
c002218b:	52                   	push   edx
c002218c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022190:	50                   	push   eax
c0022191:	68 09 cb 02 c0       	push   0xc002cb09
c0022196:	e8 be 0d ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c002219b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002219f:	83 c4 10             	add    esp,0x10
c00221a2:	b8 01 00 00 00       	mov    eax,0x1
c00221a7:	eb 3b                	jmp    c00221e4 <ISO9660::openDir(char const*, void**)+0xb0>
c00221a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221b1:	89 03                	mov    DWORD PTR [ebx],eax
c00221b3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221cf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221d6:	8a 06                	mov    al,BYTE PTR [esi]
c00221d8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221db:	31 c0                	xor    eax,eax
c00221dd:	eb 05                	jmp    c00221e4 <ISO9660::openDir(char const*, void**)+0xb0>
c00221df:	b8 04 00 00 00       	mov    eax,0x4
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	5b                   	pop    ebx
c00221e8:	5e                   	pop    esi
c00221e9:	5f                   	pop    edi
c00221ea:	c3                   	ret    
c00221eb:	90                   	nop

c00221ec <ISO9660::ISO9660()>:
c00221ec:	83 ec 0c             	sub    esp,0xc
c00221ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f3:	83 ec 0c             	sub    esp,0xc
c00221f6:	50                   	push   eax
c00221f7:	e8 62 10 ff ff       	call   c001325e <Filesystem::Filesystem()>
c00221fc:	83 c4 10             	add    esp,0x10
c00221ff:	ba 2c cb 02 c0       	mov    edx,0xc002cb2c
c0022204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022208:	89 10                	mov    DWORD PTR [eax],edx
c002220a:	90                   	nop
c002220b:	83 c4 0c             	add    esp,0xc
c002220e:	c3                   	ret    
c002220f:	90                   	nop

c0022210 <SoundChannel::~SoundChannel()>:
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022217:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002221a:	83 ec 0c             	sub    esp,0xc
c002221d:	50                   	push   eax
c002221e:	e8 2d d6 fe ff       	call   c000f850 <free>
c0022223:	83 c4 10             	add    esp,0x10
c0022226:	90                   	nop
c0022227:	83 c4 0c             	add    esp,0xc
c002222a:	c3                   	ret    
c002222b:	90                   	nop

c002222c <SoundChannel::setSpeed(float)>:
c002222c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022234:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022237:	c3                   	ret    

c0022238 <SoundChannel::getSpeed()>:
c0022238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002223f:	c3                   	ret    

c0022240 <SoundChannel::setVolume(int)>:
c0022240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022244:	83 f8 64             	cmp    eax,0x64
c0022247:	7e 05                	jle    c002224e <SoundChannel::setVolume(int)+0xe>
c0022249:	b8 64 00 00 00       	mov    eax,0x64
c002224e:	85 c0                	test   eax,eax
c0022250:	79 02                	jns    c0022254 <SoundChannel::setVolume(int)+0x14>
c0022252:	31 c0                	xor    eax,eax
c0022254:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022258:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002225b:	c3                   	ret    

c002225c <SoundChannel::getVolume()>:
c002225c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022260:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022263:	c3                   	ret    

c0022264 <SoundChannel::pause()>:
c0022264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022268:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002226c:	c3                   	ret    
c002226d:	90                   	nop

c002226e <SoundChannel::SoundChannel(int, int, int, int)>:
c002226e:	83 ec 1c             	sub    esp,0x1c
c0022271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022275:	e8 ea ff ff ff       	call   c0022264 <SoundChannel::pause()>
c002227a:	83 c4 04             	add    esp,0x4
c002227d:	6a 50                	push   0x50
c002227f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022283:	e8 b8 ff ff ff       	call   c0022240 <SoundChannel::setVolume(int)>
c0022288:	83 c4 08             	add    esp,0x8
c002228b:	a1 a4 cb 02 c0       	mov    eax,ds:0xc002cba4
c0022290:	50                   	push   eax
c0022291:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022295:	e8 92 ff ff ff       	call   c002222c <SoundChannel::setSpeed(float)>
c002229a:	83 c4 08             	add    esp,0x8
c002229d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222a5:	89 10                	mov    DWORD PTR [eax],edx
c00222a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222bd:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222c2:	75 23                	jne    c00222e7 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00222ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222d1:	0f af c2             	imul   eax,edx
c00222d4:	85 c0                	test   eax,eax
c00222d6:	79 03                	jns    c00222db <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222d8:	83 c0 03             	add    eax,0x3
c00222db:	c1 f8 02             	sar    eax,0x2
c00222de:	05 a0 0f 00 00       	add    eax,0xfa0
c00222e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222ef:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022301:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002230c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002230f:	c1 e0 02             	shl    eax,0x2
c0022312:	83 ec 0c             	sub    esp,0xc
c0022315:	50                   	push   eax
c0022316:	e8 25 d5 fe ff       	call   c000f840 <malloc>
c002231b:	83 c4 10             	add    esp,0x10
c002231e:	89 c2                	mov    edx,eax
c0022320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022324:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022327:	83 ec 04             	sub    esp,0x4
c002232a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002232e:	50                   	push   eax
c002232f:	6a 01                	push   0x1
c0022331:	6a 04                	push   0x4
c0022333:	e8 67 68 fe ff       	call   c0008b9f <src_new>
c0022338:	83 c4 10             	add    esp,0x10
c002233b:	89 c2                	mov    edx,eax
c002233d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022341:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022348:	85 c0                	test   eax,eax
c002234a:	74 10                	je     c002235c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	68 88 cb 02 c0       	push   0xc002cb88
c0022354:	e8 a2 82 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0022359:	83 c4 10             	add    esp,0x10
c002235c:	a0 60 29 03 c0       	mov    al,ds:0xc0032960
c0022361:	83 f0 01             	xor    eax,0x1
c0022364:	84 c0                	test   al,al
c0022366:	74 57                	je     c00223bf <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022368:	a1 a8 cb 02 c0       	mov    eax,ds:0xc002cba8
c002236d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022371:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022379:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022381:	7f 35                	jg     c00223b8 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022383:	83 ec 0c             	sub    esp,0xc
c0022386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002238a:	e8 98 4f 00 00       	call   c0027327 <__floatsisf>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	8b 15 a8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cba8
c0022398:	83 ec 08             	sub    esp,0x8
c002239b:	52                   	push   edx
c002239c:	50                   	push   eax
c002239d:	e8 97 4b 00 00       	call   c0026f39 <__mulsf3>
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	89 c2                	mov    edx,eax
c00223a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223ab:	89 14 85 60 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdaa0],edx
c00223b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223b6:	eb c1                	jmp    c0022379 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223b8:	c6 05 60 29 03 c0 01 	mov    BYTE PTR ds:0xc0032960,0x1
c00223bf:	90                   	nop
c00223c0:	83 c4 1c             	add    esp,0x1c
c00223c3:	c3                   	ret    

c00223c4 <SoundChannel::play()>:
c00223c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223cc:	c3                   	ret    
c00223cd:	90                   	nop

c00223ce <SoundChannel::paused()>:
c00223ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223d5:	c3                   	ret    

c00223d6 <SoundChannel::getSampleRate()>:
c00223d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223da:	8b 00                	mov    eax,DWORD PTR [eax]
c00223dc:	c3                   	ret    
c00223dd:	90                   	nop

c00223de <SoundChannel::getBits()>:
c00223de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223e5:	c3                   	ret    

c00223e6 <SoundChannel::getBufferUsed()>:
c00223e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223ed:	c3                   	ret    

c00223ee <SoundChannel::getBufferSize()>:
c00223ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223f5:	c3                   	ret    

c00223f6 <SoundChannel::unbuffer(float*, int, int)>:
c00223f6:	56                   	push   esi
c00223f7:	53                   	push   ebx
c00223f8:	83 ec 40             	sub    esp,0x40
c00223fb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022406:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022409:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002240d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022411:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022415:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002241d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022421:	e8 01 4f 00 00       	call   c0027327 <__floatsisf>
c0022426:	5a                   	pop    edx
c0022427:	89 c6                	mov    esi,eax
c0022429:	ff 33                	push   DWORD PTR [ebx]
c002242b:	e8 f7 4e 00 00       	call   c0027327 <__floatsisf>
c0022430:	59                   	pop    ecx
c0022431:	5a                   	pop    edx
c0022432:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022435:	50                   	push   eax
c0022436:	e8 fe 4a 00 00       	call   c0026f39 <__mulsf3>
c002243b:	59                   	pop    ecx
c002243c:	5a                   	pop    edx
c002243d:	50                   	push   eax
c002243e:	56                   	push   esi
c002243f:	e8 b8 4c 00 00       	call   c00270fc <__divsf3>
c0022444:	89 04 24             	mov    DWORD PTR [esp],eax
c0022447:	e8 ab 61 00 00       	call   c00285f7 <__extendsfdf2>
c002244c:	59                   	pop    ecx
c002244d:	5e                   	pop    esi
c002244e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022452:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022456:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002245e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022462:	50                   	push   eax
c0022463:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022466:	e8 29 63 fe ff       	call   c0008794 <src_process>
c002246b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002246f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022472:	83 c4 0c             	add    esp,0xc
c0022475:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022478:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002247b:	29 d0                	sub    eax,edx
c002247d:	c1 e0 02             	shl    eax,0x2
c0022480:	50                   	push   eax
c0022481:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022484:	50                   	push   eax
c0022485:	51                   	push   ecx
c0022486:	e8 f1 e1 fd ff       	call   c000067c <memmove>
c002248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002248f:	83 c4 44             	add    esp,0x44
c0022492:	5b                   	pop    ebx
c0022493:	5e                   	pop    esi
c0022494:	c3                   	ret    
c0022495:	90                   	nop

c0022496 <SoundChannel::buffer8(unsigned char*, int)>:
c0022496:	55                   	push   ebp
c0022497:	57                   	push   edi
c0022498:	56                   	push   esi
c0022499:	53                   	push   ebx
c002249a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002249e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224a2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224a9:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224ac:	74 7a                	je     c0022528 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224ae:	85 ff                	test   edi,edi
c00224b0:	7e 76                	jle    c0022528 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224b2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224b6:	8d 70 01             	lea    esi,[eax+0x1]
c00224b9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224bc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224bf:	8b 1c 9d 60 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdaa0]
c00224c6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224c9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224cc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224cf:	74 5e                	je     c002252f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224d1:	83 ff 01             	cmp    edi,0x1
c00224d4:	74 4b                	je     c0022521 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224d6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224da:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224dd:	8d 70 01             	lea    esi,[eax+0x1]
c00224e0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224e3:	8b 1c 9d 60 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdaa0]
c00224ea:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224ed:	b8 02 00 00 00       	mov    eax,0x2
c00224f2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224f5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224f8:	75 23                	jne    c002251d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224fa:	eb 27                	jmp    c0022523 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224fc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022501:	8d 71 01             	lea    esi,[ecx+0x1]
c0022504:	40                   	inc    eax
c0022505:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022508:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002250b:	8b 1c 9d 60 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdaa0]
c0022512:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022515:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022518:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002251b:	74 06                	je     c0022523 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002251d:	39 c7                	cmp    edi,eax
c002251f:	75 db                	jne    c00224fc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022521:	89 f8                	mov    eax,edi
c0022523:	5b                   	pop    ebx
c0022524:	5e                   	pop    esi
c0022525:	5f                   	pop    edi
c0022526:	5d                   	pop    ebp
c0022527:	c3                   	ret    
c0022528:	5b                   	pop    ebx
c0022529:	31 c0                	xor    eax,eax
c002252b:	5e                   	pop    esi
c002252c:	5f                   	pop    edi
c002252d:	5d                   	pop    ebp
c002252e:	c3                   	ret    
c002252f:	b8 01 00 00 00       	mov    eax,0x1
c0022534:	eb ed                	jmp    c0022523 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022536 <SoundDevice::SoundDevice(char const*)>:
c0022536:	83 ec 1c             	sub    esp,0x1c
c0022539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253d:	83 ec 08             	sub    esp,0x8
c0022540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022544:	50                   	push   eax
c0022545:	e8 26 20 ff ff       	call   c0014570 <Device::Device(char const*)>
c002254a:	83 c4 10             	add    esp,0x10
c002254d:	ba b4 cb 02 c0       	mov    edx,0xc002cbb4
c0022552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022556:	89 10                	mov    DWORD PTR [eax],edx
c0022558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022574:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002257c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022581:	7f 19                	jg     c002259c <SoundDevice::SoundDevice(char const*)+0x66>
c0022583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022587:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002258b:	83 c2 54             	add    edx,0x54
c002258e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022596:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002259a:	eb e0                	jmp    c002257c <SoundDevice::SoundDevice(char const*)+0x46>
c002259c:	90                   	nop
c002259d:	83 c4 1c             	add    esp,0x1c
c00225a0:	c3                   	ret    
c00225a1:	90                   	nop

c00225a2 <SoundDevice::~SoundDevice()>:
c00225a2:	53                   	push   ebx
c00225a3:	83 ec 18             	sub    esp,0x18
c00225a6:	ba b4 cb 02 c0       	mov    edx,0xc002cbb4
c00225ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225af:	89 10                	mov    DWORD PTR [eax],edx
c00225b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225b9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225be:	7f 46                	jg     c0022606 <SoundDevice::~SoundDevice()+0x64>
c00225c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225c8:	83 c2 54             	add    edx,0x54
c00225cb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225cf:	85 c0                	test   eax,eax
c00225d1:	74 2d                	je     c0022600 <SoundDevice::~SoundDevice()+0x5e>
c00225d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225db:	83 c2 54             	add    edx,0x54
c00225de:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225e2:	85 db                	test   ebx,ebx
c00225e4:	74 1a                	je     c0022600 <SoundDevice::~SoundDevice()+0x5e>
c00225e6:	83 ec 0c             	sub    esp,0xc
c00225e9:	53                   	push   ebx
c00225ea:	e8 21 fc ff ff       	call   c0022210 <SoundChannel::~SoundChannel()>
c00225ef:	83 c4 10             	add    esp,0x10
c00225f2:	83 ec 08             	sub    esp,0x8
c00225f5:	6a 2c                	push   0x2c
c00225f7:	53                   	push   ebx
c00225f8:	e8 7c 08 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00225fd:	83 c4 10             	add    esp,0x10
c0022600:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022604:	eb b3                	jmp    c00225b9 <SoundDevice::~SoundDevice()+0x17>
c0022606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002260a:	83 ec 0c             	sub    esp,0xc
c002260d:	50                   	push   eax
c002260e:	e8 3f 1c ff ff       	call   c0014252 <Device::~Device()>
c0022613:	83 c4 10             	add    esp,0x10
c0022616:	90                   	nop
c0022617:	83 c4 18             	add    esp,0x18
c002261a:	5b                   	pop    ebx
c002261b:	c3                   	ret    

c002261c <SoundDevice::~SoundDevice()>:
c002261c:	83 ec 0c             	sub    esp,0xc
c002261f:	83 ec 0c             	sub    esp,0xc
c0022622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022626:	e8 77 ff ff ff       	call   c00225a2 <SoundDevice::~SoundDevice()>
c002262b:	83 c4 10             	add    esp,0x10
c002262e:	83 ec 08             	sub    esp,0x8
c0022631:	68 e4 01 00 00       	push   0x1e4
c0022636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263a:	e8 3a 08 ff ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c002263f:	83 c4 10             	add    esp,0x10
c0022642:	83 c4 0c             	add    esp,0xc
c0022645:	c3                   	ret    

c0022646 <SoundDevice::getFreeChannelNum()>:
c0022646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002264a:	31 c0                	xor    eax,eax
c002264c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022654:	74 09                	je     c002265f <SoundDevice::getFreeChannelNum()+0x19>
c0022656:	40                   	inc    eax
c0022657:	83 f8 20             	cmp    eax,0x20
c002265a:	75 f0                	jne    c002264c <SoundDevice::getFreeChannelNum()+0x6>
c002265c:	83 c8 ff             	or     eax,0xffffffff
c002265f:	c3                   	ret    

c0022660 <SoundDevice::addChannel(SoundChannel*)>:
c0022660:	56                   	push   esi
c0022661:	53                   	push   ebx
c0022662:	51                   	push   ecx
c0022663:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022667:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002266b:	53                   	push   ebx
c002266c:	e8 d5 ff ff ff       	call   c0022646 <SoundDevice::getFreeChannelNum()>
c0022671:	5a                   	pop    edx
c0022672:	83 f8 ff             	cmp    eax,0xffffffff
c0022675:	74 51                	je     c00226c8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022677:	85 f6                	test   esi,esi
c0022679:	74 4d                	je     c00226c8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002267b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022682:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022689:	75 30                	jne    c00226bb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002268b:	83 ec 0c             	sub    esp,0xc
c002268e:	56                   	push   esi
c002268f:	e8 42 fd ff ff       	call   c00223d6 <SoundChannel::getSampleRate()>
c0022694:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002269a:	89 34 24             	mov    DWORD PTR [esp],esi
c002269d:	e8 3c fd ff ff       	call   c00223de <SoundChannel::getBits()>
c00226a2:	83 c4 0c             	add    esp,0xc
c00226a5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226ad:	50                   	push   eax
c00226ae:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226b4:	53                   	push   ebx
c00226b5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226b8:	83 c4 10             	add    esp,0x10
c00226bb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226c1:	b8 01 00 00 00       	mov    eax,0x1
c00226c6:	eb 03                	jmp    c00226cb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226c8:	83 c8 ff             	or     eax,0xffffffff
c00226cb:	5a                   	pop    edx
c00226cc:	5b                   	pop    ebx
c00226cd:	5e                   	pop    esi
c00226ce:	c3                   	ret    
c00226cf:	90                   	nop

c00226d0 <SoundDevice::removeChannel(int)>:
c00226d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226d8:	83 fa 1f             	cmp    edx,0x1f
c00226db:	77 23                	ja     c0022700 <SoundDevice::removeChannel(int)+0x30>
c00226dd:	8d 14 90             	lea    edx,[eax+edx*4]
c00226e0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226e7:	74 17                	je     c0022700 <SoundDevice::removeChannel(int)+0x30>
c00226e9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226f3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226f9:	75 05                	jne    c0022700 <SoundDevice::removeChannel(int)+0x30>
c00226fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00226fd:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022700:	c3                   	ret    
c0022701:	90                   	nop

c0022702 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022702:	57                   	push   edi
c0022703:	56                   	push   esi
c0022704:	53                   	push   ebx
c0022705:	31 db                	xor    ebx,ebx
c0022707:	83 ec 10             	sub    esp,0x10
c002270a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002270e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022712:	0f 8d cb 00 00 00    	jge    c00227e3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022718:	83 ec 0c             	sub    esp,0xc
c002271b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002271f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022722:	e8 d0 5e 00 00       	call   c00285f7 <__extendsfdf2>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002272e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022732:	68 00 00 f0 3f       	push   0x3ff00000
c0022737:	6a 00                	push   0x0
c0022739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022741:	e8 3d 4e 00 00       	call   c0027583 <__adddf3>
c0022746:	83 c4 10             	add    esp,0x10
c0022749:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002274d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022751:	68 00 00 e0 3f       	push   0x3fe00000
c0022756:	6a 00                	push   0x0
c0022758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002275c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022760:	e8 9b 54 00 00       	call   c0027c00 <__muldf3>
c0022765:	83 c4 10             	add    esp,0x10
c0022768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002276c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022770:	68 00 00 60 40       	push   0x40600000
c0022775:	6a 00                	push   0x0
c0022777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277f:	e8 7c 54 00 00       	call   c0027c00 <__muldf3>
c0022784:	59                   	pop    ecx
c0022785:	5f                   	pop    edi
c0022786:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002278a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002278e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022796:	e8 38 5d 00 00       	call   c00284d3 <__truncdfsf2>
c002279b:	5a                   	pop    edx
c002279c:	89 c7                	mov    edi,eax
c002279e:	59                   	pop    ecx
c002279f:	68 00 00 fe 42       	push   0x42fe0000
c00227a4:	50                   	push   eax
c00227a5:	e8 d3 4d 00 00       	call   c002757d <__gesf2>
c00227aa:	83 c4 10             	add    esp,0x10
c00227ad:	85 c0                	test   eax,eax
c00227af:	78 06                	js     c00227b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227b1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227b5:	eb 26                	jmp    c00227dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227b7:	50                   	push   eax
c00227b8:	50                   	push   eax
c00227b9:	6a 00                	push   0x0
c00227bb:	57                   	push   edi
c00227bc:	e8 c0 4d 00 00       	call   c0027581 <__lesf2>
c00227c1:	83 c4 10             	add    esp,0x10
c00227c4:	85 c0                	test   eax,eax
c00227c6:	7f 06                	jg     c00227ce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227c8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227cc:	eb 0f                	jmp    c00227dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227ce:	83 ec 0c             	sub    esp,0xc
c00227d1:	57                   	push   edi
c00227d2:	e8 b5 5e 00 00       	call   c002868c <lrintf>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227dd:	43                   	inc    ebx
c00227de:	e9 2b ff ff ff       	jmp    c002270e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227e3:	83 c4 10             	add    esp,0x10
c00227e6:	5b                   	pop    ebx
c00227e7:	5e                   	pop    esi
c00227e8:	5f                   	pop    edi
c00227e9:	c3                   	ret    

c00227ea <SoundDevice::getAudio(int, float*, float*)>:
c00227ea:	55                   	push   ebp
c00227eb:	57                   	push   edi
c00227ec:	56                   	push   esi
c00227ed:	53                   	push   ebx
c00227ee:	31 db                	xor    ebx,ebx
c00227f0:	83 ec 20             	sub    esp,0x20
c00227f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227fb:	c1 e0 02             	shl    eax,0x2
c00227fe:	50                   	push   eax
c00227ff:	6a 00                	push   0x0
c0022801:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022805:	e8 6e df fd ff       	call   c0000778 <memset>
c002280a:	83 c4 10             	add    esp,0x10
c002280d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022811:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022818:	85 c0                	test   eax,eax
c002281a:	0f 84 d7 00 00 00    	je     c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022820:	83 ec 0c             	sub    esp,0xc
c0022823:	50                   	push   eax
c0022824:	e8 a5 fb ff ff       	call   c00223ce <SoundChannel::paused()>
c0022829:	83 c4 10             	add    esp,0x10
c002282c:	84 c0                	test   al,al
c002282e:	0f 85 c3 00 00 00    	jne    c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022834:	83 ec 0c             	sub    esp,0xc
c0022837:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002283e:	e8 19 fa ff ff       	call   c002225c <SoundChannel::getVolume()>
c0022843:	83 c4 10             	add    esp,0x10
c0022846:	85 c0                	test   eax,eax
c0022848:	0f 84 a9 00 00 00    	je     c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022858:	e8 ff f9 ff ff       	call   c002225c <SoundChannel::getVolume()>
c002285d:	83 ec 0c             	sub    esp,0xc
c0022860:	50                   	push   eax
c0022861:	e8 c1 4a 00 00       	call   c0027327 <__floatsisf>
c0022866:	59                   	pop    ecx
c0022867:	5d                   	pop    ebp
c0022868:	31 ed                	xor    ebp,ebp
c002286a:	68 00 00 c8 42       	push   0x42c80000
c002286f:	50                   	push   eax
c0022870:	e8 87 48 00 00       	call   c00270fc <__divsf3>
c0022875:	83 c4 10             	add    esp,0x10
c0022878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002287c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022880:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022886:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002288a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022891:	e8 60 fb ff ff       	call   c00223f6 <SoundChannel::unbuffer(float*, int, int)>
c0022896:	83 c4 20             	add    esp,0x20
c0022899:	89 c1                	mov    ecx,eax
c002289b:	39 cd                	cmp    ebp,ecx
c002289d:	7d 52                	jge    c00228f1 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002289f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228a3:	50                   	push   eax
c00228a4:	50                   	push   eax
c00228a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228a9:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228b0:	e8 84 46 00 00       	call   c0026f39 <__mulsf3>
c00228b5:	5a                   	pop    edx
c00228b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ba:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228c0:	e8 62 4a 00 00       	call   c0027327 <__floatsisf>
c00228c5:	59                   	pop    ecx
c00228c6:	5a                   	pop    edx
c00228c7:	50                   	push   eax
c00228c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228cc:	e8 2b 48 00 00       	call   c00270fc <__divsf3>
c00228d1:	59                   	pop    ecx
c00228d2:	5a                   	pop    edx
c00228d3:	50                   	push   eax
c00228d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228d8:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228db:	e8 36 43 00 00       	call   c0026c16 <__addsf3>
c00228e0:	83 c4 10             	add    esp,0x10
c00228e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228eb:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228ee:	45                   	inc    ebp
c00228ef:	eb aa                	jmp    c002289b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228f1:	39 cf                	cmp    edi,ecx
c00228f3:	7e 02                	jle    c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228f5:	89 cf                	mov    edi,ecx
c00228f7:	43                   	inc    ebx
c00228f8:	83 fb 20             	cmp    ebx,0x20
c00228fb:	0f 85 10 ff ff ff    	jne    c0022811 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022901:	83 c4 1c             	add    esp,0x1c
c0022904:	89 f8                	mov    eax,edi
c0022906:	5b                   	pop    ebx
c0022907:	5e                   	pop    esi
c0022908:	5f                   	pop    edi
c0022909:	5d                   	pop    ebp
c002290a:	c3                   	ret    
c002290b:	90                   	nop

c002290c <PCI::open(int, int, void*)>:
c002290c:	83 ec 18             	sub    esp,0x18
c002290f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022913:	8b 10                	mov    edx,DWORD PTR [eax]
c0022915:	50                   	push   eax
c0022916:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022919:	31 c0                	xor    eax,eax
c002291b:	83 c4 1c             	add    esp,0x1c
c002291e:	c3                   	ret    
c002291f:	90                   	nop

c0022920 <PCI::close(int, int, void*)>:
c0022920:	31 c0                	xor    eax,eax
c0022922:	c3                   	ret    
c0022923:	90                   	nop

c0022924 <PCI::PCI()>:
c0022924:	83 ec 0c             	sub    esp,0xc
c0022927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292b:	83 ec 08             	sub    esp,0x8
c002292e:	68 e4 cb 02 c0       	push   0xc002cbe4
c0022933:	50                   	push   eax
c0022934:	e8 bb 12 ff ff       	call   c0013bf4 <Bus::Bus(char const*)>
c0022939:	83 c4 10             	add    esp,0x10
c002293c:	ba 50 cc 02 c0       	mov    edx,0xc002cc50
c0022941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022945:	89 10                	mov    DWORD PTR [eax],edx
c0022947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022951:	0f b6 d0             	movzx  edx,al
c0022954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022958:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002295f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022963:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022969:	0f b6 d0             	movzx  edx,al
c002296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022970:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022979:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002297f:	8d 50 01             	lea    edx,[eax+0x1]
c0022982:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022986:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002298c:	0f b6 d0             	movzx  edx,al
c002298f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022993:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022997:	83 c9 c0             	or     ecx,0xffffffc0
c002299a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002299e:	90                   	nop
c002299f:	83 c4 0c             	add    esp,0xc
c00229a2:	c3                   	ret    
c00229a3:	90                   	nop

c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229ad:	89 ca                	mov    edx,ecx
c00229af:	c1 e0 10             	shl    eax,0x10
c00229b2:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229b8:	09 d0                	or     eax,edx
c00229ba:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229bf:	c1 e2 08             	shl    edx,0x8
c00229c2:	09 d0                	or     eax,edx
c00229c4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229c9:	c1 e2 0b             	shl    edx,0xb
c00229cc:	09 d0                	or     eax,edx
c00229ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229d3:	0d 00 00 00 80       	or     eax,0x80000000
c00229d8:	ef                   	out    dx,eax
c00229d9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229de:	ed                   	in     eax,dx
c00229df:	83 e1 02             	and    ecx,0x2
c00229e2:	0f b6 c9             	movzx  ecx,cl
c00229e5:	c1 e1 03             	shl    ecx,0x3
c00229e8:	d3 e8                	shr    eax,cl
c00229ea:	c3                   	ret    
c00229eb:	90                   	nop

c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229ec:	6a 00                	push   0x0
c00229ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f3:	50                   	push   eax
c00229f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f9:	50                   	push   eax
c00229fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ff:	50                   	push   eax
c0022a00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a04:	e8 9b ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a09:	83 c4 14             	add    esp,0x14
c0022a0c:	c3                   	ret    
c0022a0d:	90                   	nop

c0022a0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a0e:	6a 0e                	push   0xe
c0022a10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a15:	50                   	push   eax
c0022a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1b:	50                   	push   eax
c0022a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a21:	50                   	push   eax
c0022a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a26:	e8 79 ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2b:	83 c4 14             	add    esp,0x14
c0022a2e:	0f b6 c0             	movzx  eax,al
c0022a31:	c3                   	ret    

c0022a32 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a32:	55                   	push   ebp
c0022a33:	57                   	push   edi
c0022a34:	56                   	push   esi
c0022a35:	53                   	push   ebx
c0022a36:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a3b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a40:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a45:	6a 0a                	push   0xa
c0022a47:	56                   	push   esi
c0022a48:	55                   	push   ebp
c0022a49:	57                   	push   edi
c0022a4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a4e:	e8 51 ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a53:	6a 0a                	push   0xa
c0022a55:	89 c3                	mov    ebx,eax
c0022a57:	56                   	push   esi
c0022a58:	0f b6 db             	movzx  ebx,bl
c0022a5b:	55                   	push   ebp
c0022a5c:	57                   	push   edi
c0022a5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a61:	e8 3e ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a66:	83 c4 28             	add    esp,0x28
c0022a69:	25 00 ff 00 00       	and    eax,0xff00
c0022a6e:	09 d8                	or     eax,ebx
c0022a70:	5b                   	pop    ebx
c0022a71:	5e                   	pop    esi
c0022a72:	5f                   	pop    edi
c0022a73:	5d                   	pop    ebp
c0022a74:	c3                   	ret    
c0022a75:	90                   	nop

c0022a76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a76:	6a 08                	push   0x8
c0022a78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7d:	50                   	push   eax
c0022a7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a83:	50                   	push   eax
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8e:	e8 11 ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a93:	83 c4 14             	add    esp,0x14
c0022a96:	0f b6 c4             	movzx  eax,ah
c0022a99:	c3                   	ret    

c0022a9a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a9a:	6a 08                	push   0x8
c0022a9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa1:	50                   	push   eax
c0022aa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa7:	50                   	push   eax
c0022aa8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aad:	50                   	push   eax
c0022aae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab2:	e8 ed fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab7:	83 c4 14             	add    esp,0x14
c0022aba:	c3                   	ret    
c0022abb:	90                   	nop

c0022abc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022abc:	6a 3c                	push   0x3c
c0022abe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac3:	50                   	push   eax
c0022ac4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac9:	50                   	push   eax
c0022aca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acf:	50                   	push   eax
c0022ad0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad4:	e8 cb fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad9:	83 c4 14             	add    esp,0x14
c0022adc:	c3                   	ret    
c0022add:	90                   	nop

c0022ade <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ade:	6a 18                	push   0x18
c0022ae0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae5:	50                   	push   eax
c0022ae6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aeb:	50                   	push   eax
c0022aec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af1:	50                   	push   eax
c0022af2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022af6:	e8 a9 fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022afb:	83 c4 14             	add    esp,0x14
c0022afe:	0f b6 c4             	movzx  eax,ah
c0022b01:	c3                   	ret    

c0022b02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b02:	55                   	push   ebp
c0022b03:	57                   	push   edi
c0022b04:	56                   	push   esi
c0022b05:	53                   	push   ebx
c0022b06:	50                   	push   eax
c0022b07:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b0b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b10:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b15:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b1a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b21:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b24:	83 c3 10             	add    ebx,0x10
c0022b27:	0f b6 c0             	movzx  eax,al
c0022b2a:	0f b6 db             	movzx  ebx,bl
c0022b2d:	50                   	push   eax
c0022b2e:	51                   	push   ecx
c0022b2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b33:	57                   	push   edi
c0022b34:	55                   	push   ebp
c0022b35:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b39:	e8 66 fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b3e:	53                   	push   ebx
c0022b3f:	89 c6                	mov    esi,eax
c0022b41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b45:	c1 e6 10             	shl    esi,0x10
c0022b48:	51                   	push   ecx
c0022b49:	57                   	push   edi
c0022b4a:	55                   	push   ebp
c0022b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b4f:	e8 50 fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b54:	83 c4 2c             	add    esp,0x2c
c0022b57:	0f b7 c0             	movzx  eax,ax
c0022b5a:	5b                   	pop    ebx
c0022b5b:	09 f0                	or     eax,esi
c0022b5d:	5e                   	pop    esi
c0022b5e:	5f                   	pop    edi
c0022b5f:	5d                   	pop    ebp
c0022b60:	c3                   	ret    
c0022b61:	90                   	nop

c0022b62 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b62:	53                   	push   ebx
c0022b63:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b68:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b71:	c1 e1 10             	shl    ecx,0x10
c0022b74:	25 fc 00 00 00       	and    eax,0xfc
c0022b79:	09 c1                	or     ecx,eax
c0022b7b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b80:	c1 e0 08             	shl    eax,0x8
c0022b83:	09 c1                	or     ecx,eax
c0022b85:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b8a:	c1 e0 0b             	shl    eax,0xb
c0022b8d:	09 c1                	or     ecx,eax
c0022b8f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b95:	89 c8                	mov    eax,ecx
c0022b97:	ef                   	out    dx,eax
c0022b98:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b9d:	ed                   	in     eax,dx
c0022b9e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ba3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022ba8:	74 0a                	je     c0022bb4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022baa:	0f b7 d8             	movzx  ebx,ax
c0022bad:	89 d0                	mov    eax,edx
c0022baf:	c1 e0 10             	shl    eax,0x10
c0022bb2:	eb 05                	jmp    c0022bb9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bb4:	66 31 c0             	xor    ax,ax
c0022bb7:	89 d3                	mov    ebx,edx
c0022bb9:	09 c3                	or     ebx,eax
c0022bbb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bc0:	89 c8                	mov    eax,ecx
c0022bc2:	ef                   	out    dx,eax
c0022bc3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bc8:	89 d8                	mov    eax,ebx
c0022bca:	ef                   	out    dx,eax
c0022bcb:	5b                   	pop    ebx
c0022bcc:	c3                   	ret    
c0022bcd:	90                   	nop

c0022bce <PCI::checkBus(unsigned char)>:
c0022bce:	56                   	push   esi
c0022bcf:	53                   	push   ebx
c0022bd0:	31 db                	xor    ebx,ebx
c0022bd2:	51                   	push   ecx
c0022bd3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bd8:	52                   	push   edx
c0022bd9:	53                   	push   ebx
c0022bda:	43                   	inc    ebx
c0022bdb:	56                   	push   esi
c0022bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022be0:	e8 2b 03 00 00       	call   c0022f10 <PCI::checkDevice(unsigned char, unsigned char)>
c0022be5:	83 c4 10             	add    esp,0x10
c0022be8:	83 fb 20             	cmp    ebx,0x20
c0022beb:	75 eb                	jne    c0022bd8 <PCI::checkBus(unsigned char)+0xa>
c0022bed:	58                   	pop    eax
c0022bee:	5b                   	pop    ebx
c0022bef:	5e                   	pop    esi
c0022bf0:	c3                   	ret    
c0022bf1:	90                   	nop

c0022bf2 <PCI::foundDevice(PCIDeviceInfo)>:
c0022bf2:	55                   	push   ebp
c0022bf3:	57                   	push   edi
c0022bf4:	56                   	push   esi
c0022bf5:	53                   	push   ebx
c0022bf6:	83 ec 1c             	sub    esp,0x1c
c0022bf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bfd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c03:	0f 84 52 01 00 00    	je     c0022d5b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c09:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c0d:	66 81 f9 06 04       	cmp    cx,0x406
c0022c12:	75 2c                	jne    c0022c40 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c14:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c19:	50                   	push   eax
c0022c1a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c1f:	50                   	push   eax
c0022c20:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c25:	50                   	push   eax
c0022c26:	56                   	push   esi
c0022c27:	e8 b2 fe ff ff       	call   c0022ade <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c2c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c30:	0f b6 c0             	movzx  eax,al
c0022c33:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c37:	83 c4 2c             	add    esp,0x2c
c0022c3a:	5b                   	pop    ebx
c0022c3b:	5e                   	pop    esi
c0022c3c:	5f                   	pop    edi
c0022c3d:	5d                   	pop    ebp
c0022c3e:	eb 8e                	jmp    c0022bce <PCI::checkBus(unsigned char)>
c0022c40:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c44:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c52:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c56:	88 d3                	mov    bl,dl
c0022c58:	85 c0                	test   eax,eax
c0022c5a:	74 33                	je     c0022c8f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c5f:	85 d2                	test   edx,edx
c0022c61:	74 28                	je     c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c63:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c69:	31 ef                	xor    edi,ebp
c0022c6b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c71:	75 18                	jne    c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c77:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c7d:	75 0c                	jne    c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c7f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c85:	0f 84 d0 00 00 00    	je     c0022d5b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c8d:	eb c9                	jmp    c0022c58 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c8f:	66 81 f9 01 06       	cmp    cx,0x601
c0022c94:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c98:	75 19                	jne    c0022cb3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c9a:	83 ec 0c             	sub    esp,0xc
c0022c9d:	68 64 01 00 00       	push   0x164
c0022ca2:	e8 99 cb fe ff       	call   c000f840 <malloc>
c0022ca7:	89 c5                	mov    ebp,eax
c0022ca9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cac:	e8 95 0f 00 00       	call   c0023c46 <SATABus::SATABus()>
c0022cb1:	eb 1e                	jmp    c0022cd1 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022cb3:	66 81 f9 01 01       	cmp    cx,0x101
c0022cb8:	75 60                	jne    c0022d1a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cba:	83 ec 0c             	sub    esp,0xc
c0022cbd:	68 70 02 00 00       	push   0x270
c0022cc2:	e8 79 cb fe ff       	call   c000f840 <malloc>
c0022cc7:	89 c5                	mov    ebp,eax
c0022cc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ccc:	e8 03 03 00 00       	call   c0022fd4 <IDE::IDE()>
c0022cd1:	58                   	pop    eax
c0022cd2:	5a                   	pop    edx
c0022cd3:	55                   	push   ebp
c0022cd4:	56                   	push   esi
c0022cd5:	e8 a6 16 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0022cda:	83 ec 1c             	sub    esp,0x1c
c0022cdd:	b9 09 00 00 00       	mov    ecx,0x9
c0022ce2:	fc                   	cld    
c0022ce3:	89 e7                	mov    edi,esp
c0022ce5:	89 de                	mov    esi,ebx
c0022ce7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ce9:	55                   	push   ebp
c0022cea:	e8 9b 15 ff ff       	call   c001428a <Device::preOpenPCI(PCIDeviceInfo)>
c0022cef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cf2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cf6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cfe:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d06:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d11:	83 c4 4c             	add    esp,0x4c
c0022d14:	5b                   	pop    ebx
c0022d15:	5e                   	pop    esi
c0022d16:	5f                   	pop    edi
c0022d17:	5d                   	pop    ebp
c0022d18:	ff e0                	jmp    eax
c0022d1a:	83 ec 0c             	sub    esp,0xc
c0022d1d:	68 58 01 00 00       	push   0x158
c0022d22:	e8 19 cb fe ff       	call   c000f840 <malloc>
c0022d27:	89 c5                	mov    ebp,eax
c0022d29:	58                   	pop    eax
c0022d2a:	5a                   	pop    edx
c0022d2b:	68 ec cb 02 c0       	push   0xc002cbec
c0022d30:	55                   	push   ebp
c0022d31:	e8 40 19 ff ff       	call   c0014676 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d36:	59                   	pop    ecx
c0022d37:	5f                   	pop    edi
c0022d38:	55                   	push   ebp
c0022d39:	56                   	push   esi
c0022d3a:	e8 41 16 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0022d3f:	b9 09 00 00 00       	mov    ecx,0x9
c0022d44:	fc                   	cld    
c0022d45:	89 df                	mov    edi,ebx
c0022d47:	89 de                	mov    esi,ebx
c0022d49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d4b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d4f:	83 c4 2c             	add    esp,0x2c
c0022d52:	5b                   	pop    ebx
c0022d53:	5e                   	pop    esi
c0022d54:	5f                   	pop    edi
c0022d55:	5d                   	pop    ebp
c0022d56:	e9 2f 15 ff ff       	jmp    c001428a <Device::preOpenPCI(PCIDeviceInfo)>
c0022d5b:	83 c4 1c             	add    esp,0x1c
c0022d5e:	5b                   	pop    ebx
c0022d5f:	5e                   	pop    esi
c0022d60:	5f                   	pop    edi
c0022d61:	5d                   	pop    ebp
c0022d62:	c3                   	ret    
c0022d63:	90                   	nop

c0022d64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d64:	55                   	push   ebp
c0022d65:	57                   	push   edi
c0022d66:	56                   	push   esi
c0022d67:	53                   	push   ebx
c0022d68:	83 ec 5c             	sub    esp,0x5c
c0022d6b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d73:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d77:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d80:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d84:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d8d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d92:	6a 0c                	push   0xc
c0022d94:	55                   	push   ebp
c0022d95:	53                   	push   ebx
c0022d96:	57                   	push   edi
c0022d97:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d9e:	e8 01 fc ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022da3:	55                   	push   ebp
c0022da4:	53                   	push   ebx
c0022da5:	57                   	push   edi
c0022da6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dad:	e8 80 fc ff ff       	call   c0022a32 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022db2:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022db7:	83 c4 24             	add    esp,0x24
c0022dba:	55                   	push   ebp
c0022dbb:	53                   	push   ebx
c0022dbc:	57                   	push   edi
c0022dbd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dc1:	e8 f6 fc ff ff       	call   c0022abc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dc6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022dca:	6a 3c                	push   0x3c
c0022dcc:	55                   	push   ebp
c0022dcd:	53                   	push   ebx
c0022dce:	57                   	push   edi
c0022dcf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dd6:	e8 c9 fb ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ddb:	0f b6 c4             	movzx  eax,ah
c0022dde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022de2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022de6:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dea:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0022def:	83 c4 24             	add    esp,0x24
c0022df2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022df8:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dff:	74 6c                	je     c0022e6d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e01:	31 f6                	xor    esi,esi
c0022e03:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0022e09:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e0f:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e15:	7e 56                	jle    c0022e6d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e17:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e1a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e21:	39 cb                	cmp    ebx,ecx
c0022e23:	75 45                	jne    c0022e6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e25:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e2c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e30:	75 38                	jne    c0022e6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e32:	83 ec 0c             	sub    esp,0xc
c0022e35:	68 06 cc 02 c0       	push   0xc002cc06
c0022e3a:	e8 1a 01 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0022e3f:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0022e45:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e4b:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e53:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e57:	52                   	push   edx
c0022e58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e5c:	53                   	push   ebx
c0022e5d:	68 2b cc 02 c0       	push   0xc002cc2b
c0022e62:	e8 f2 00 ff ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0022e67:	83 c4 20             	add    esp,0x20
c0022e6a:	46                   	inc    esi
c0022e6b:	eb 96                	jmp    c0022e03 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e6d:	31 d2                	xor    edx,edx
c0022e6f:	83 ec 0c             	sub    esp,0xc
c0022e72:	55                   	push   ebp
c0022e73:	53                   	push   ebx
c0022e74:	57                   	push   edi
c0022e75:	52                   	push   edx
c0022e76:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e7a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e81:	e8 7c fc ff ff       	call   c0022b02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e86:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e8a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e8e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e92:	42                   	inc    edx
c0022e93:	83 c4 20             	add    esp,0x20
c0022e96:	83 fa 06             	cmp    edx,0x6
c0022e99:	75 d4                	jne    c0022e6f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e9b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e9f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ea3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ea7:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022eab:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022eaf:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022eb3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022eb8:	86 e0                	xchg   al,ah
c0022eba:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ebf:	55                   	push   ebp
c0022ec0:	53                   	push   ebx
c0022ec1:	57                   	push   edi
c0022ec2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ec6:	e8 ab fb ff ff       	call   c0022a76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ecb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ecf:	55                   	push   ebp
c0022ed0:	53                   	push   ebx
c0022ed1:	57                   	push   edi
c0022ed2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ed9:	e8 0e fb ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ede:	83 ec 0c             	sub    esp,0xc
c0022ee1:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ee6:	b9 09 00 00 00       	mov    ecx,0x9
c0022eeb:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022eef:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ef3:	fc                   	cld    
c0022ef4:	89 e7                	mov    edi,esp
c0022ef6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ef8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eff:	e8 ee fc ff ff       	call   c0022bf2 <PCI::foundDevice(PCIDeviceInfo)>
c0022f04:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f0a:	5b                   	pop    ebx
c0022f0b:	5e                   	pop    esi
c0022f0c:	5f                   	pop    edi
c0022f0d:	5d                   	pop    ebp
c0022f0e:	c3                   	ret    
c0022f0f:	90                   	nop

c0022f10 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f10:	55                   	push   ebp
c0022f11:	57                   	push   edi
c0022f12:	56                   	push   esi
c0022f13:	53                   	push   ebx
c0022f14:	83 ec 0c             	sub    esp,0xc
c0022f17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f1b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f20:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f25:	6a 00                	push   0x0
c0022f27:	56                   	push   esi
c0022f28:	57                   	push   edi
c0022f29:	55                   	push   ebp
c0022f2a:	e8 bd fa ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f2f:	6a 00                	push   0x0
c0022f31:	56                   	push   esi
c0022f32:	57                   	push   edi
c0022f33:	55                   	push   ebp
c0022f34:	e8 2b fe ff ff       	call   c0022d64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f39:	83 c4 20             	add    esp,0x20
c0022f3c:	6a 00                	push   0x0
c0022f3e:	56                   	push   esi
c0022f3f:	57                   	push   edi
c0022f40:	55                   	push   ebp
c0022f41:	e8 c8 fa ff ff       	call   c0022a0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f46:	83 c4 10             	add    esp,0x10
c0022f49:	84 c0                	test   al,al
c0022f4b:	79 27                	jns    c0022f74 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f4d:	bb 01 00 00 00       	mov    ebx,0x1
c0022f52:	53                   	push   ebx
c0022f53:	56                   	push   esi
c0022f54:	57                   	push   edi
c0022f55:	55                   	push   ebp
c0022f56:	e8 91 fa ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	66 40                	inc    ax
c0022f60:	74 0c                	je     c0022f6e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f62:	53                   	push   ebx
c0022f63:	56                   	push   esi
c0022f64:	57                   	push   edi
c0022f65:	55                   	push   ebp
c0022f66:	e8 f9 fd ff ff       	call   c0022d64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	43                   	inc    ebx
c0022f6f:	83 fb 08             	cmp    ebx,0x8
c0022f72:	75 de                	jne    c0022f52 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f74:	83 c4 0c             	add    esp,0xc
c0022f77:	5b                   	pop    ebx
c0022f78:	5e                   	pop    esi
c0022f79:	5f                   	pop    edi
c0022f7a:	5d                   	pop    ebp
c0022f7b:	c3                   	ret    

c0022f7c <PCI::detect()>:
c0022f7c:	56                   	push   esi
c0022f7d:	53                   	push   ebx
c0022f7e:	53                   	push   ebx
c0022f7f:	31 db                	xor    ebx,ebx
c0022f81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f85:	6a 00                	push   0x0
c0022f87:	6a 00                	push   0x0
c0022f89:	6a 00                	push   0x0
c0022f8b:	56                   	push   esi
c0022f8c:	e8 7d fa ff ff       	call   c0022a0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f91:	83 c4 10             	add    esp,0x10
c0022f94:	a8 80                	test   al,0x80
c0022f96:	75 21                	jne    c0022fb9 <PCI::detect()+0x3d>
c0022f98:	51                   	push   ecx
c0022f99:	51                   	push   ecx
c0022f9a:	6a 00                	push   0x0
c0022f9c:	56                   	push   esi
c0022f9d:	e8 2c fc ff ff       	call   c0022bce <PCI::checkBus(unsigned char)>
c0022fa2:	83 c4 10             	add    esp,0x10
c0022fa5:	eb 24                	jmp    c0022fcb <PCI::detect()+0x4f>
c0022fa7:	52                   	push   edx
c0022fa8:	52                   	push   edx
c0022fa9:	53                   	push   ebx
c0022faa:	43                   	inc    ebx
c0022fab:	56                   	push   esi
c0022fac:	e8 1d fc ff ff       	call   c0022bce <PCI::checkBus(unsigned char)>
c0022fb1:	83 c4 10             	add    esp,0x10
c0022fb4:	83 fb 08             	cmp    ebx,0x8
c0022fb7:	74 12                	je     c0022fcb <PCI::detect()+0x4f>
c0022fb9:	53                   	push   ebx
c0022fba:	6a 00                	push   0x0
c0022fbc:	6a 00                	push   0x0
c0022fbe:	56                   	push   esi
c0022fbf:	e8 28 fa ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fc4:	83 c4 10             	add    esp,0x10
c0022fc7:	66 40                	inc    ax
c0022fc9:	74 dc                	je     c0022fa7 <PCI::detect()+0x2b>
c0022fcb:	58                   	pop    eax
c0022fcc:	5b                   	pop    ebx
c0022fcd:	5e                   	pop    esi
c0022fce:	c3                   	ret    
c0022fcf:	90                   	nop

c0022fd0 <IDE::close(int, int, void*)>:
c0022fd0:	83 c8 ff             	or     eax,0xffffffff
c0022fd3:	c3                   	ret    

c0022fd4 <IDE::IDE()>:
c0022fd4:	83 ec 0c             	sub    esp,0xc
c0022fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdb:	83 ec 08             	sub    esp,0x8
c0022fde:	68 74 cc 02 c0       	push   0xc002cc74
c0022fe3:	50                   	push   eax
c0022fe4:	e8 23 17 ff ff       	call   c001470c <HardDiskController::HardDiskController(char const*)>
c0022fe9:	83 c4 10             	add    esp,0x10
c0022fec:	ba b4 ce 02 c0       	mov    edx,0xc002ceb4
c0022ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff5:	89 10                	mov    DWORD PTR [eax],edx
c0022ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023002:	90                   	nop
c0023003:	83 c4 0c             	add    esp,0xc
c0023006:	c3                   	ret    
c0023007:	90                   	nop

c0023008 <IDE::prepareInterrupt(unsigned char)>:
c0023008:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002300d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023011:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023019:	c3                   	ret    

c002301a <selectDrive(unsigned char, unsigned char)>:
c002301a:	c3                   	ret    
c002301b:	90                   	nop

c002301c <IDE::getBase(unsigned char)>:
c002301c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023025:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002302d:	c3                   	ret    

c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002302e:	55                   	push   ebp
c002302f:	57                   	push   edi
c0023030:	56                   	push   esi
c0023031:	53                   	push   ebx
c0023032:	83 ec 1c             	sub    esp,0x1c
c0023035:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023039:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002303d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023040:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023044:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023048:	80 f9 03             	cmp    cl,0x3
c002304b:	77 51                	ja     c002309e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002304d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023051:	0f b6 f2             	movzx  esi,dl
c0023054:	0f b6 db             	movzx  ebx,bl
c0023057:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002305a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002305e:	83 ca 80             	or     edx,0xffffff80
c0023061:	0f b6 d2             	movzx  edx,dl
c0023064:	52                   	push   edx
c0023065:	6a 0c                	push   0xc
c0023067:	56                   	push   esi
c0023068:	57                   	push   edi
c0023069:	e8 c0 ff ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002306e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023077:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002307b:	ee                   	out    dx,al
c002307c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023081:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023085:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023089:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002308d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023095:	83 c4 2c             	add    esp,0x2c
c0023098:	5b                   	pop    ebx
c0023099:	5e                   	pop    esi
c002309a:	5f                   	pop    edi
c002309b:	5d                   	pop    ebp
c002309c:	eb 90                	jmp    c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002309e:	80 fb 07             	cmp    bl,0x7
c00230a1:	77 12                	ja     c00230b5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230a3:	0f b6 d2             	movzx  edx,dl
c00230a6:	0f b6 db             	movzx  ebx,bl
c00230a9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230b1:	89 da                	mov    edx,ebx
c00230b3:	eb 2f                	jmp    c00230e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230b5:	80 fb 0d             	cmp    bl,0xd
c00230b8:	77 13                	ja     c00230cd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230ba:	0f b6 d2             	movzx  edx,dl
c00230bd:	0f b6 db             	movzx  ebx,bl
c00230c0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230c7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230cb:	eb 17                	jmp    c00230e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230cd:	80 fb 15             	cmp    bl,0x15
c00230d0:	77 13                	ja     c00230e5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230d2:	0f b6 d2             	movzx  edx,dl
c00230d5:	0f b6 db             	movzx  ebx,bl
c00230d8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230e0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230e4:	ee                   	out    dx,al
c00230e5:	83 c4 1c             	add    esp,0x1c
c00230e8:	5b                   	pop    ebx
c00230e9:	5e                   	pop    esi
c00230ea:	5f                   	pop    edi
c00230eb:	5d                   	pop    ebp
c00230ec:	c3                   	ret    
c00230ed:	90                   	nop

c00230ee <IDE::read(unsigned char, unsigned char)>:
c00230ee:	55                   	push   ebp
c00230ef:	57                   	push   edi
c00230f0:	56                   	push   esi
c00230f1:	53                   	push   ebx
c00230f2:	83 ec 1c             	sub    esp,0x1c
c00230f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230fd:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023100:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023104:	3c 03                	cmp    al,0x3
c0023106:	77 43                	ja     c002314b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023108:	0f b6 f2             	movzx  esi,dl
c002310b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002310e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023112:	83 c8 80             	or     eax,0xffffff80
c0023115:	0f b6 c0             	movzx  eax,al
c0023118:	50                   	push   eax
c0023119:	6a 0c                	push   0xc
c002311b:	56                   	push   esi
c002311c:	57                   	push   edi
c002311d:	e8 0c ff ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023122:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023127:	0f b6 c3             	movzx  eax,bl
c002312a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002312e:	ec                   	in     al,dx
c002312f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023133:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023138:	52                   	push   edx
c0023139:	6a 0c                	push   0xc
c002313b:	56                   	push   esi
c002313c:	57                   	push   edi
c002313d:	e8 ec fe ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023142:	83 c4 20             	add    esp,0x20
c0023145:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023149:	eb 49                	jmp    c0023194 <IDE::read(unsigned char, unsigned char)+0xa6>
c002314b:	80 fb 07             	cmp    bl,0x7
c002314e:	77 12                	ja     c0023162 <IDE::read(unsigned char, unsigned char)+0x74>
c0023150:	0f b6 d2             	movzx  edx,dl
c0023153:	0f b6 c3             	movzx  eax,bl
c0023156:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002315e:	89 c2                	mov    edx,eax
c0023160:	eb 31                	jmp    c0023193 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023162:	80 fb 0d             	cmp    bl,0xd
c0023165:	77 13                	ja     c002317a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023167:	0f b6 d2             	movzx  edx,dl
c002316a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023171:	0f b6 d3             	movzx  edx,bl
c0023174:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023178:	eb 19                	jmp    c0023193 <IDE::read(unsigned char, unsigned char)+0xa5>
c002317a:	31 c0                	xor    eax,eax
c002317c:	80 fb 15             	cmp    bl,0x15
c002317f:	77 13                	ja     c0023194 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023181:	0f b6 d2             	movzx  edx,dl
c0023184:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002318c:	0f b6 d3             	movzx  edx,bl
c002318f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023193:	ec                   	in     al,dx
c0023194:	83 c4 1c             	add    esp,0x1c
c0023197:	5b                   	pop    ebx
c0023198:	5e                   	pop    esi
c0023199:	5f                   	pop    edi
c002319a:	5d                   	pop    ebp
c002319b:	c3                   	ret    

c002319c <IDE::waitInterrupt(unsigned char)>:
c002319c:	55                   	push   ebp
c002319d:	57                   	push   edi
c002319e:	56                   	push   esi
c002319f:	53                   	push   ebx
c00231a0:	31 db                	xor    ebx,ebx
c00231a2:	83 ec 0c             	sub    esp,0xc
c00231a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231a9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231ae:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231b6:	89 e8                	mov    eax,ebp
c00231b8:	84 c0                	test   al,al
c00231ba:	75 34                	jne    c00231f0 <IDE::waitInterrupt(unsigned char)+0x54>
c00231bc:	52                   	push   edx
c00231bd:	6a 0c                	push   0xc
c00231bf:	56                   	push   esi
c00231c0:	57                   	push   edi
c00231c1:	e8 28 ff ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00231c6:	83 c4 10             	add    esp,0x10
c00231c9:	a8 01                	test   al,0x1
c00231cb:	75 2b                	jne    c00231f8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231cd:	f6 c3 04             	test   bl,0x4
c00231d0:	75 16                	jne    c00231e8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231d2:	83 fb 32             	cmp    ebx,0x32
c00231d5:	7e 11                	jle    c00231e8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231d7:	50                   	push   eax
c00231d8:	50                   	push   eax
c00231d9:	6a 00                	push   0x0
c00231db:	68 80 96 98 00       	push   0x989680
c00231e0:	e8 8b b1 ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c00231e5:	83 c4 10             	add    esp,0x10
c00231e8:	83 fb 3c             	cmp    ebx,0x3c
c00231eb:	74 0b                	je     c00231f8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231ed:	43                   	inc    ebx
c00231ee:	eb be                	jmp    c00231ae <IDE::waitInterrupt(unsigned char)+0x12>
c00231f0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231f8:	83 c4 0c             	add    esp,0xc
c00231fb:	89 e8                	mov    eax,ebp
c00231fd:	5b                   	pop    ebx
c00231fe:	5e                   	pop    esi
c00231ff:	5f                   	pop    edi
c0023200:	5d                   	pop    ebp
c0023201:	c3                   	ret    

c0023202 <ideChannel0IRQHandler(regs*, void*)>:
c0023202:	83 ec 10             	sub    esp,0x10
c0023205:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023209:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023210:	6a 07                	push   0x7
c0023212:	6a 00                	push   0x0
c0023214:	50                   	push   eax
c0023215:	e8 d4 fe ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002321a:	83 c4 1c             	add    esp,0x1c
c002321d:	c3                   	ret    

c002321e <ideChannel1IRQHandler(regs*, void*)>:
c002321e:	83 ec 10             	sub    esp,0x10
c0023221:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023225:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002322c:	6a 07                	push   0x7
c002322e:	6a 01                	push   0x1
c0023230:	50                   	push   eax
c0023231:	e8 b8 fe ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023236:	83 c4 1c             	add    esp,0x1c
c0023239:	c3                   	ret    

c002323a <IDE::enableIRQs(unsigned char, bool)>:
c002323a:	57                   	push   edi
c002323b:	56                   	push   esi
c002323c:	be 04 00 00 00       	mov    esi,0x4
c0023241:	53                   	push   ebx
c0023242:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002324b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023250:	0f 94 c0             	sete   al
c0023253:	d1 e0                	shl    eax,1
c0023255:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002325c:	0f b6 c0             	movzx  eax,al
c002325f:	50                   	push   eax
c0023260:	6a 0c                	push   0xc
c0023262:	57                   	push   edi
c0023263:	53                   	push   ebx
c0023264:	e8 c5 fd ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023269:	83 c4 10             	add    esp,0x10
c002326c:	50                   	push   eax
c002326d:	6a 0c                	push   0xc
c002326f:	57                   	push   edi
c0023270:	53                   	push   ebx
c0023271:	e8 78 fe ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023276:	83 c4 10             	add    esp,0x10
c0023279:	4e                   	dec    esi
c002327a:	75 f0                	jne    c002326c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002327c:	5b                   	pop    ebx
c002327d:	5e                   	pop    esi
c002327e:	5f                   	pop    edi
c002327f:	c3                   	ret    

c0023280 <IDE::open(int, int, void*)>:
c0023280:	55                   	push   ebp
c0023281:	57                   	push   edi
c0023282:	56                   	push   esi
c0023283:	53                   	push   ebx
c0023284:	83 ec 1c             	sub    esp,0x1c
c0023287:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002328b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023294:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002329d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232a4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232ab:	0f 85 b0 02 00 00    	jne    c0023561 <IDE::open(int, int, void*)+0x2e1>
c00232b1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232b7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232bb:	83 e0 7f             	and    eax,0x7f
c00232be:	3c 05                	cmp    al,0x5
c00232c0:	74 04                	je     c00232c6 <IDE::open(int, int, void*)+0x46>
c00232c2:	3c 0f                	cmp    al,0xf
c00232c4:	75 32                	jne    c00232f8 <IDE::open(int, int, void*)+0x78>
c00232c6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232cc:	83 e0 fc             	and    eax,0xfffffffc
c00232cf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232d6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232dc:	83 e0 fc             	and    eax,0xfffffffc
c00232df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232e6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232ec:	83 e0 fc             	and    eax,0xfffffffc
c00232ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232f6:	eb 14                	jmp    c002330c <IDE::open(int, int, void*)+0x8c>
c00232f8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023302:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002330c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023313:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002331a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002331e:	89 c6                	mov    esi,eax
c0023320:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023325:	c1 e6 10             	shl    esi,0x10
c0023328:	89 e8                	mov    eax,ebp
c002332a:	89 fa                	mov    edx,edi
c002332c:	c1 e0 0b             	shl    eax,0xb
c002332f:	09 f0                	or     eax,esi
c0023331:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023338:	c1 e6 08             	shl    esi,0x8
c002333b:	09 c6                	or     esi,eax
c002333d:	89 f0                	mov    eax,esi
c002333f:	0d 08 00 00 80       	or     eax,0x80000008
c0023344:	ef                   	out    dx,eax
c0023345:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002334a:	89 ca                	mov    edx,ecx
c002334c:	ed                   	in     eax,dx
c002334d:	c1 e8 10             	shr    eax,0x10
c0023350:	3d ff ff 00 00       	cmp    eax,0xffff
c0023355:	0f 84 f5 00 00 00    	je     c0023450 <IDE::open(int, int, void*)+0x1d0>
c002335b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023361:	89 fa                	mov    edx,edi
c0023363:	89 f0                	mov    eax,esi
c0023365:	ef                   	out    dx,eax
c0023366:	b0 fe                	mov    al,0xfe
c0023368:	89 ca                	mov    edx,ecx
c002336a:	ee                   	out    dx,al
c002336b:	89 f0                	mov    eax,esi
c002336d:	89 fa                	mov    edx,edi
c002336f:	ef                   	out    dx,eax
c0023370:	89 ca                	mov    edx,ecx
c0023372:	ed                   	in     eax,dx
c0023373:	3c fe                	cmp    al,0xfe
c0023375:	0f 85 a9 00 00 00    	jne    c0023424 <IDE::open(int, int, void*)+0x1a4>
c002337b:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0023381:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023388:	74 33                	je     c00233bd <IDE::open(int, int, void*)+0x13d>
c002338a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023390:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023394:	40                   	inc    eax
c0023395:	83 ec 0c             	sub    esp,0xc
c0023398:	0f b6 c0             	movzx  eax,al
c002339b:	50                   	push   eax
c002339c:	55                   	push   ebp
c002339d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233a1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233a7:	51                   	push   ecx
c00233a8:	e8 a7 4e ff ff       	call   c0018254 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233ad:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233b2:	83 c4 1c             	add    esp,0x1c
c00233b5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233bb:	eb 0a                	jmp    c00233c7 <IDE::open(int, int, void*)+0x147>
c00233bd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233c7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233ce:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233d5:	c1 e1 10             	shl    ecx,0x10
c00233d8:	c1 e0 08             	shl    eax,0x8
c00233db:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233e0:	09 c1                	or     ecx,eax
c00233e2:	89 fa                	mov    edx,edi
c00233e4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233eb:	c1 e0 0b             	shl    eax,0xb
c00233ee:	09 c1                	or     ecx,eax
c00233f0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233f6:	89 c8                	mov    eax,ecx
c00233f8:	ef                   	out    dx,eax
c00233f9:	be fc 0c 00 00       	mov    esi,0xcfc
c00233fe:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023404:	89 f2                	mov    edx,esi
c0023406:	ee                   	out    dx,al
c0023407:	89 c8                	mov    eax,ecx
c0023409:	89 fa                	mov    edx,edi
c002340b:	ef                   	out    dx,eax
c002340c:	89 f2                	mov    edx,esi
c002340e:	ed                   	in     eax,dx
c002340f:	0f b6 c0             	movzx  eax,al
c0023412:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023418:	74 46                	je     c0023460 <IDE::open(int, int, void*)+0x1e0>
c002341a:	83 ec 0c             	sub    esp,0xc
c002341d:	68 8c cc 02 c0       	push   0xc002cc8c
c0023422:	eb 34                	jmp    c0023458 <IDE::open(int, int, void*)+0x1d8>
c0023424:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002342d:	75 17                	jne    c0023446 <IDE::open(int, int, void*)+0x1c6>
c002342f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023434:	74 07                	je     c002343d <IDE::open(int, int, void*)+0x1bd>
c0023436:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002343b:	75 09                	jne    c0023446 <IDE::open(int, int, void*)+0x1c6>
c002343d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023444:	eb 1a                	jmp    c0023460 <IDE::open(int, int, void*)+0x1e0>
c0023446:	83 ec 0c             	sub    esp,0xc
c0023449:	68 94 cc 02 c0       	push   0xc002cc94
c002344e:	eb 08                	jmp    c0023458 <IDE::open(int, int, void*)+0x1d8>
c0023450:	83 ec 0c             	sub    esp,0xc
c0023453:	68 c5 cc 02 c0       	push   0xc002ccc5
c0023458:	e8 9e 71 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c002345d:	83 c4 10             	add    esp,0x10
c0023460:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023467:	79 1a                	jns    c0023483 <IDE::open(int, int, void*)+0x203>
c0023469:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002346f:	83 e0 fc             	and    eax,0xfffffffc
c0023472:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023479:	83 c0 08             	add    eax,0x8
c002347c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023483:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023489:	89 c2                	mov    edx,eax
c002348b:	83 e2 0f             	and    edx,0xf
c002348e:	66 83 fa 08          	cmp    dx,0x8
c0023492:	75 0a                	jne    c002349e <IDE::open(int, int, void*)+0x21e>
c0023494:	83 e8 02             	sub    eax,0x2
c0023497:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002349e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234a4:	89 c2                	mov    edx,eax
c00234a6:	83 e2 0f             	and    edx,0xf
c00234a9:	66 83 fa 08          	cmp    dx,0x8
c00234ad:	75 0a                	jne    c00234b9 <IDE::open(int, int, void*)+0x239>
c00234af:	83 e8 02             	sub    eax,0x2
c00234b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234c0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234c7:	89 d0                	mov    eax,edx
c00234c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234d0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234d4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234d7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234dc:	0f b6 c9             	movzx  ecx,cl
c00234df:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234e6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234e9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234ed:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234f1:	8d 50 02             	lea    edx,[eax+0x2]
c00234f4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234f9:	0f b6 d2             	movzx  edx,dl
c00234fc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023502:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023505:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023509:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002350d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023510:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023515:	0f b6 c9             	movzx  ecx,cl
c0023518:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002351e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023521:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023525:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023529:	8d 50 04             	lea    edx,[eax+0x4]
c002352c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023532:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023537:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002353e:	66 85 f6             	test   si,si
c0023541:	74 3e                	je     c0023581 <IDE::open(int, int, void*)+0x301>
c0023543:	0f b6 d2             	movzx  edx,dl
c0023546:	83 c0 05             	add    eax,0x5
c0023549:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002354c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023550:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023554:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002355a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002355f:	eb 20                	jmp    c0023581 <IDE::open(int, int, void*)+0x301>
c0023561:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002356b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023575:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002357c:	e9 02 ff ff ff       	jmp    c0023483 <IDE::open(int, int, void*)+0x203>
c0023581:	52                   	push   edx
c0023582:	52                   	push   edx
c0023583:	6a 00                	push   0x0
c0023585:	53                   	push   ebx
c0023586:	e8 7d fa ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c002358b:	59                   	pop    ecx
c002358c:	5e                   	pop    esi
c002358d:	6a 01                	push   0x1
c002358f:	53                   	push   ebx
c0023590:	e8 73 fa ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c0023595:	83 c4 0c             	add    esp,0xc
c0023598:	6a 00                	push   0x0
c002359a:	6a 00                	push   0x0
c002359c:	53                   	push   ebx
c002359d:	e8 98 fc ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00235a2:	83 c4 0c             	add    esp,0xc
c00235a5:	6a 00                	push   0x0
c00235a7:	6a 01                	push   0x1
c00235a9:	53                   	push   ebx
c00235aa:	e8 8b fc ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00235af:	83 c4 10             	add    esp,0x10
c00235b2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235b9:	74 40                	je     c00235fb <IDE::open(int, int, void*)+0x37b>
c00235bb:	83 ec 0c             	sub    esp,0xc
c00235be:	68 ef cc 02 c0       	push   0xc002ccef
c00235c3:	e8 91 f9 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00235c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235cb:	6a 01                	push   0x1
c00235cd:	68 02 32 02 c0       	push   0xc0023202
c00235d2:	6a 0e                	push   0xe
c00235d4:	53                   	push   ebx
c00235d5:	e8 2a 0d ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235da:	83 c4 14             	add    esp,0x14
c00235dd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235e3:	53                   	push   ebx
c00235e4:	6a 01                	push   0x1
c00235e6:	68 1e 32 02 c0       	push   0xc002321e
c00235eb:	6a 0f                	push   0xf
c00235ed:	53                   	push   ebx
c00235ee:	e8 11 0d ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235f3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235f9:	eb 4a                	jmp    c0023645 <IDE::open(int, int, void*)+0x3c5>
c00235fb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023605:	50                   	push   eax
c0023606:	6a 0f                	push   0xf
c0023608:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002360e:	68 0b cd 02 c0       	push   0xc002cd0b
c0023613:	e8 41 f9 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023618:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002361b:	6a 00                	push   0x0
c002361d:	68 02 32 02 c0       	push   0xc0023202
c0023622:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023628:	53                   	push   ebx
c0023629:	e8 d6 0c ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002362e:	83 c4 14             	add    esp,0x14
c0023631:	53                   	push   ebx
c0023632:	6a 00                	push   0x0
c0023634:	68 1e 32 02 c0       	push   0xc002321e
c0023639:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002363f:	53                   	push   ebx
c0023640:	e8 bf 0c ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023645:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023647:	83 c4 20             	add    esp,0x20
c002364a:	83 ec 0c             	sub    esp,0xc
c002364d:	53                   	push   ebx
c002364e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023651:	83 c4 0c             	add    esp,0xc
c0023654:	6a 07                	push   0x7
c0023656:	6a 00                	push   0x0
c0023658:	53                   	push   ebx
c0023659:	e8 90 fa ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002365e:	83 c4 0c             	add    esp,0xc
c0023661:	6a 07                	push   0x7
c0023663:	6a 01                	push   0x1
c0023665:	53                   	push   ebx
c0023666:	e8 83 fa ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002366b:	83 c4 0c             	add    esp,0xc
c002366e:	6a 01                	push   0x1
c0023670:	6a 00                	push   0x0
c0023672:	53                   	push   ebx
c0023673:	e8 c2 fb ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c0023678:	83 c4 0c             	add    esp,0xc
c002367b:	6a 01                	push   0x1
c002367d:	6a 01                	push   0x1
c002367f:	53                   	push   ebx
c0023680:	e8 b5 fb ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c0023685:	83 c4 2c             	add    esp,0x2c
c0023688:	31 c0                	xor    eax,eax
c002368a:	5b                   	pop    ebx
c002368b:	5e                   	pop    esi
c002368c:	5f                   	pop    edi
c002368d:	5d                   	pop    ebp
c002368e:	c3                   	ret    
c002368f:	90                   	nop

c0023690 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023690:	55                   	push   ebp
c0023691:	57                   	push   edi
c0023692:	56                   	push   esi
c0023693:	53                   	push   ebx
c0023694:	83 ec 1c             	sub    esp,0x1c
c0023697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002369b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002369f:	8d 50 f8             	lea    edx,[eax-0x8]
c00236a2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236a6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236aa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236ae:	80 fa 03             	cmp    dl,0x3
c00236b1:	77 5d                	ja     c0023710 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236bb:	0f b6 db             	movzx  ebx,bl
c00236be:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236c1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236c5:	83 ca 80             	or     edx,0xffffff80
c00236c8:	0f b6 d2             	movzx  edx,dl
c00236cb:	52                   	push   edx
c00236cc:	6a 0c                	push   0xc
c00236ce:	53                   	push   ebx
c00236cf:	56                   	push   esi
c00236d0:	e8 59 f9 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236e2:	0f b6 c0             	movzx  eax,al
c00236e5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236eb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236f0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236fc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023704:	83 c4 2c             	add    esp,0x2c
c0023707:	5b                   	pop    ebx
c0023708:	5e                   	pop    esi
c0023709:	5f                   	pop    edi
c002370a:	5d                   	pop    ebp
c002370b:	e9 1e f9 ff ff       	jmp    c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023710:	3c 07                	cmp    al,0x7
c0023712:	77 10                	ja     c0023724 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023714:	0f b6 db             	movzx  ebx,bl
c0023717:	0f b6 d0             	movzx  edx,al
c002371a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023722:	eb 2d                	jmp    c0023751 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023724:	3c 0d                	cmp    al,0xd
c0023726:	77 13                	ja     c002373b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023728:	0f b6 db             	movzx  ebx,bl
c002372b:	0f b6 c0             	movzx  eax,al
c002372e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023735:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023739:	eb 16                	jmp    c0023751 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002373b:	3c 15                	cmp    al,0x15
c002373d:	77 14                	ja     c0023753 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002373f:	0f b6 db             	movzx  ebx,bl
c0023742:	0f b6 c0             	movzx  eax,al
c0023745:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002374d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023751:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023753:	83 c4 1c             	add    esp,0x1c
c0023756:	5b                   	pop    ebx
c0023757:	5e                   	pop    esi
c0023758:	5f                   	pop    edi
c0023759:	5d                   	pop    ebp
c002375a:	c3                   	ret    
c002375b:	90                   	nop

c002375c <IDE::detect()>:
c002375c:	55                   	push   ebp
c002375d:	57                   	push   edi
c002375e:	56                   	push   esi
c002375f:	53                   	push   ebx
c0023760:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023766:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002376d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023774:	0f 85 be 02 00 00    	jne    c0023a38 <IDE::detect()+0x2dc>
c002377a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023781:	31 f6                	xor    esi,esi
c0023783:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002378b:	31 ed                	xor    ebp,ebp
c002378d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023791:	c1 e0 06             	shl    eax,0x6
c0023794:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002379c:	89 e8                	mov    eax,ebp
c002379e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237a2:	c1 e0 04             	shl    eax,0x4
c00237a5:	83 c8 a0             	or     eax,0xffffffa0
c00237a8:	0f b6 c0             	movzx  eax,al
c00237ab:	50                   	push   eax
c00237ac:	6a 06                	push   0x6
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	e8 79 f8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b5:	83 c4 0c             	add    esp,0xc
c00237b8:	6a 0c                	push   0xc
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	e8 2d f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237c1:	83 c4 0c             	add    esp,0xc
c00237c4:	6a 0c                	push   0xc
c00237c6:	56                   	push   esi
c00237c7:	53                   	push   ebx
c00237c8:	e8 21 f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237cd:	83 c4 0c             	add    esp,0xc
c00237d0:	6a 0c                	push   0xc
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	e8 15 f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237d9:	83 c4 0c             	add    esp,0xc
c00237dc:	6a 0c                	push   0xc
c00237de:	56                   	push   esi
c00237df:	53                   	push   ebx
c00237e0:	e8 09 f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237e5:	68 ec 00 00 00       	push   0xec
c00237ea:	6a 07                	push   0x7
c00237ec:	56                   	push   esi
c00237ed:	53                   	push   ebx
c00237ee:	e8 3b f8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237f3:	83 c4 1c             	add    esp,0x1c
c00237f6:	6a 0c                	push   0xc
c00237f8:	56                   	push   esi
c00237f9:	53                   	push   ebx
c00237fa:	e8 ef f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237ff:	83 c4 0c             	add    esp,0xc
c0023802:	6a 0c                	push   0xc
c0023804:	56                   	push   esi
c0023805:	53                   	push   ebx
c0023806:	e8 e3 f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002380b:	83 c4 0c             	add    esp,0xc
c002380e:	6a 0c                	push   0xc
c0023810:	56                   	push   esi
c0023811:	53                   	push   ebx
c0023812:	e8 d7 f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023817:	83 c4 0c             	add    esp,0xc
c002381a:	6a 0c                	push   0xc
c002381c:	56                   	push   esi
c002381d:	53                   	push   ebx
c002381e:	e8 cb f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023823:	83 c4 0c             	add    esp,0xc
c0023826:	6a 0c                	push   0xc
c0023828:	56                   	push   esi
c0023829:	53                   	push   ebx
c002382a:	e8 bf f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002382f:	83 c4 10             	add    esp,0x10
c0023832:	84 c0                	test   al,al
c0023834:	0f 84 8b 01 00 00    	je     c00239c5 <IDE::detect()+0x269>
c002383a:	31 ff                	xor    edi,edi
c002383c:	50                   	push   eax
c002383d:	6a 0c                	push   0xc
c002383f:	56                   	push   esi
c0023840:	53                   	push   ebx
c0023841:	e8 a8 f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023846:	83 c4 10             	add    esp,0x10
c0023849:	a8 01                	test   al,0x1
c002384b:	0f 85 8e 01 00 00    	jne    c00239df <IDE::detect()+0x283>
c0023851:	84 c0                	test   al,al
c0023853:	78 04                	js     c0023859 <IDE::detect()+0xfd>
c0023855:	a8 08                	test   al,0x8
c0023857:	75 27                	jne    c0023880 <IDE::detect()+0x124>
c0023859:	47                   	inc    edi
c002385a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023860:	7e da                	jle    c002383c <IDE::detect()+0xe0>
c0023862:	50                   	push   eax
c0023863:	50                   	push   eax
c0023864:	6a 00                	push   0x0
c0023866:	68 40 4b 4c 00       	push   0x4c4b40
c002386b:	e8 00 ab ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c0023870:	83 c4 10             	add    esp,0x10
c0023873:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023879:	75 c1                	jne    c002383c <IDE::detect()+0xe0>
c002387b:	e9 5f 01 00 00       	jmp    c00239df <IDE::detect()+0x283>
c0023880:	31 c9                	xor    ecx,ecx
c0023882:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023886:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002388a:	83 ec 0c             	sub    esp,0xc
c002388d:	68 80 00 00 00       	push   0x80
c0023892:	57                   	push   edi
c0023893:	6a 00                	push   0x0
c0023895:	56                   	push   esi
c0023896:	53                   	push   ebx
c0023897:	e8 f4 fd ff ff       	call   c0023690 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002389c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238a5:	89 d1                	mov    ecx,edx
c00238a7:	c1 e0 06             	shl    eax,0x6
c00238aa:	01 d8                	add    eax,ebx
c00238ac:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238b3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238ba:	89 f2                	mov    edx,esi
c00238bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023901:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023905:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023909:	83 c4 20             	add    esp,0x20
c002390c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002390f:	83 c0 02             	add    eax,0x2
c0023912:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023918:	83 c7 02             	add    edi,0x2
c002391b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002391e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023924:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023928:	75 e2                	jne    c002390c <IDE::detect()+0x1b0>
c002392a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002392e:	c1 e0 06             	shl    eax,0x6
c0023931:	01 d8                	add    eax,ebx
c0023933:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023939:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023940:	66 c1 ea 09          	shr    dx,0x9
c0023944:	83 e2 01             	and    edx,0x1
c0023947:	84 c9                	test   cl,cl
c0023949:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002394f:	75 2f                	jne    c0023980 <IDE::detect()+0x224>
c0023951:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023957:	85 c0                	test   eax,eax
c0023959:	74 66                	je     c00239c1 <IDE::detect()+0x265>
c002395b:	50                   	push   eax
c002395c:	55                   	push   ebp
c002395d:	56                   	push   esi
c002395e:	68 27 cd 02 c0       	push   0xc002cd27
c0023963:	e8 f1 f5 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023968:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002396f:	e8 cc be fe ff       	call   c000f840 <malloc>
c0023974:	89 c7                	mov    edi,eax
c0023976:	89 04 24             	mov    DWORD PTR [esp],eax
c0023979:	e8 78 06 00 00       	call   c0023ff6 <ATA::ATA()>
c002397e:	eb 28                	jmp    c00239a8 <IDE::detect()+0x24c>
c0023980:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023986:	55                   	push   ebp
c0023987:	56                   	push   esi
c0023988:	68 56 cd 02 c0       	push   0xc002cd56
c002398d:	e8 c7 f5 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023992:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023999:	e8 a2 be fe ff       	call   c000f840 <malloc>
c002399e:	89 c7                	mov    edi,eax
c00239a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00239a3:	e8 8e 0c 00 00       	call   c0024636 <ATAPI::ATAPI()>
c00239a8:	5a                   	pop    edx
c00239a9:	59                   	pop    ecx
c00239aa:	57                   	push   edi
c00239ab:	53                   	push   ebx
c00239ac:	e8 cf 09 ff ff       	call   c0014380 <Device::addChild(Device*)>
c00239b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00239b3:	53                   	push   ebx
c00239b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239b8:	6a 00                	push   0x0
c00239ba:	57                   	push   edi
c00239bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239be:	83 c4 20             	add    esp,0x20
c00239c1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239c5:	4d                   	dec    ebp
c00239c6:	74 0a                	je     c00239d2 <IDE::detect()+0x276>
c00239c8:	bd 01 00 00 00       	mov    ebp,0x1
c00239cd:	e9 bb fd ff ff       	jmp    c002378d <IDE::detect()+0x31>
c00239d2:	4e                   	dec    esi
c00239d3:	74 63                	je     c0023a38 <IDE::detect()+0x2dc>
c00239d5:	be 01 00 00 00       	mov    esi,0x1
c00239da:	e9 ac fd ff ff       	jmp    c002378b <IDE::detect()+0x2f>
c00239df:	50                   	push   eax
c00239e0:	6a 04                	push   0x4
c00239e2:	56                   	push   esi
c00239e3:	53                   	push   ebx
c00239e4:	e8 05 f7 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00239e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239ed:	83 c4 0c             	add    esp,0xc
c00239f0:	6a 05                	push   0x5
c00239f2:	56                   	push   esi
c00239f3:	53                   	push   ebx
c00239f4:	e8 f5 f6 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00239f9:	83 c4 10             	add    esp,0x10
c00239fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a00:	80 fa 14             	cmp    dl,0x14
c0023a03:	75 04                	jne    c0023a09 <IDE::detect()+0x2ad>
c0023a05:	3c eb                	cmp    al,0xeb
c0023a07:	eb 07                	jmp    c0023a10 <IDE::detect()+0x2b4>
c0023a09:	3c 96                	cmp    al,0x96
c0023a0b:	75 b8                	jne    c00239c5 <IDE::detect()+0x269>
c0023a0d:	80 fa 69             	cmp    dl,0x69
c0023a10:	75 b3                	jne    c00239c5 <IDE::detect()+0x269>
c0023a12:	68 a1 00 00 00       	push   0xa1
c0023a17:	6a 07                	push   0x7
c0023a19:	56                   	push   esi
c0023a1a:	53                   	push   ebx
c0023a1b:	e8 0e f6 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a20:	5f                   	pop    edi
c0023a21:	58                   	pop    eax
c0023a22:	6a 00                	push   0x0
c0023a24:	68 40 42 0f 00       	push   0xf4240
c0023a29:	e8 42 a9 ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c0023a2e:	83 c4 10             	add    esp,0x10
c0023a31:	b1 01                	mov    cl,0x1
c0023a33:	e9 4a fe ff ff       	jmp    c0023882 <IDE::detect()+0x126>
c0023a38:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a3e:	5b                   	pop    ebx
c0023a3f:	5e                   	pop    esi
c0023a40:	5f                   	pop    edi
c0023a41:	5d                   	pop    ebp
c0023a42:	c3                   	ret    
c0023a43:	90                   	nop

c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a44:	55                   	push   ebp
c0023a45:	57                   	push   edi
c0023a46:	56                   	push   esi
c0023a47:	53                   	push   ebx
c0023a48:	83 ec 1c             	sub    esp,0x1c
c0023a4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a57:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a5b:	88 c3                	mov    bl,al
c0023a5d:	84 c0                	test   al,al
c0023a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a63:	0f 84 67 01 00 00    	je     c0023bd0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a69:	83 ec 0c             	sub    esp,0xc
c0023a6c:	68 87 cd 02 c0       	push   0xc002cd87
c0023a71:	e8 e3 f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023a76:	83 c4 10             	add    esp,0x10
c0023a79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a7d:	3c 01                	cmp    al,0x1
c0023a7f:	75 17                	jne    c0023a98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a81:	83 ec 0c             	sub    esp,0xc
c0023a84:	b3 13                	mov    bl,0x13
c0023a86:	68 93 cd 02 c0       	push   0xc002cd93
c0023a8b:	e8 c9 f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023a90:	83 c4 10             	add    esp,0x10
c0023a93:	e9 25 01 00 00       	jmp    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a98:	3c 02                	cmp    al,0x2
c0023a9a:	0f 85 ef 00 00 00    	jne    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023aa0:	d1 e6                	shl    esi,1
c0023aa2:	09 ee                	or     esi,ebp
c0023aa4:	52                   	push   edx
c0023aa5:	89 f0                	mov    eax,esi
c0023aa7:	6a 01                	push   0x1
c0023aa9:	0f b6 f0             	movzx  esi,al
c0023aac:	c1 e6 06             	shl    esi,0x6
c0023aaf:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023ab7:	50                   	push   eax
c0023ab8:	57                   	push   edi
c0023ab9:	e8 30 f6 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023abe:	83 c4 10             	add    esp,0x10
c0023ac1:	89 c6                	mov    esi,eax
c0023ac3:	a8 01                	test   al,0x1
c0023ac5:	74 12                	je     c0023ad9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023ac7:	83 ec 0c             	sub    esp,0xc
c0023aca:	b3 07                	mov    bl,0x7
c0023acc:	68 a8 cd 02 c0       	push   0xc002cda8
c0023ad1:	e8 83 f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023ad6:	83 c4 10             	add    esp,0x10
c0023ad9:	f7 c6 02 00 00 00    	test   esi,0x2
c0023adf:	74 12                	je     c0023af3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023ae1:	83 ec 0c             	sub    esp,0xc
c0023ae4:	b3 03                	mov    bl,0x3
c0023ae6:	68 c6 cd 02 c0       	push   0xc002cdc6
c0023aeb:	e8 69 f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023af0:	83 c4 10             	add    esp,0x10
c0023af3:	f7 c6 04 00 00 00    	test   esi,0x4
c0023af9:	74 12                	je     c0023b0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023afb:	83 ec 0c             	sub    esp,0xc
c0023afe:	b3 14                	mov    bl,0x14
c0023b00:	68 e6 cd 02 c0       	push   0xc002cde6
c0023b05:	e8 4f f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b13:	74 12                	je     c0023b27 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b15:	83 ec 0c             	sub    esp,0xc
c0023b18:	b3 03                	mov    bl,0x3
c0023b1a:	68 c6 cd 02 c0       	push   0xc002cdc6
c0023b1f:	e8 35 f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023b24:	83 c4 10             	add    esp,0x10
c0023b27:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b2d:	74 12                	je     c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	b3 15                	mov    bl,0x15
c0023b34:	68 fe cd 02 c0       	push   0xc002cdfe
c0023b39:	e8 1b f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023b3e:	83 c4 10             	add    esp,0x10
c0023b41:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b47:	74 12                	je     c0023b5b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	b3 03                	mov    bl,0x3
c0023b4e:	68 c6 cd 02 c0       	push   0xc002cdc6
c0023b53:	e8 01 f4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023b58:	83 c4 10             	add    esp,0x10
c0023b5b:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b61:	74 12                	je     c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b63:	83 ec 0c             	sub    esp,0xc
c0023b66:	b3 16                	mov    bl,0x16
c0023b68:	68 18 ce 02 c0       	push   0xc002ce18
c0023b6d:	e8 e7 f3 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	89 f0                	mov    eax,esi
c0023b77:	84 c0                	test   al,al
c0023b79:	79 42                	jns    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b7b:	83 ec 0c             	sub    esp,0xc
c0023b7e:	b3 0d                	mov    bl,0xd
c0023b80:	68 39 ce 02 c0       	push   0xc002ce39
c0023b85:	e8 cf f3 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023b8a:	83 c4 10             	add    esp,0x10
c0023b8d:	eb 2e                	jmp    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b8f:	3c 03                	cmp    al,0x3
c0023b91:	75 14                	jne    c0023ba7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b93:	83 ec 0c             	sub    esp,0xc
c0023b96:	b3 17                	mov    bl,0x17
c0023b98:	68 4d ce 02 c0       	push   0xc002ce4d
c0023b9d:	e8 b7 f3 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	eb 16                	jmp    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ba7:	3c 04                	cmp    al,0x4
c0023ba9:	75 12                	jne    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bab:	83 ec 0c             	sub    esp,0xc
c0023bae:	b3 08                	mov    bl,0x8
c0023bb0:	68 63 ce 02 c0       	push   0xc002ce63
c0023bb5:	e8 9f f3 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023bba:	83 c4 10             	add    esp,0x10
c0023bbd:	50                   	push   eax
c0023bbe:	50                   	push   eax
c0023bbf:	0f b6 c3             	movzx  eax,bl
c0023bc2:	50                   	push   eax
c0023bc3:	68 7b ce 02 c0       	push   0xc002ce7b
c0023bc8:	e8 8c f3 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023bcd:	83 c4 10             	add    esp,0x10
c0023bd0:	83 c4 1c             	add    esp,0x1c
c0023bd3:	88 d8                	mov    al,bl
c0023bd5:	5b                   	pop    ebx
c0023bd6:	5e                   	pop    esi
c0023bd7:	5f                   	pop    edi
c0023bd8:	5d                   	pop    ebp
c0023bd9:	c3                   	ret    

c0023bda <IDE::polling(unsigned char, unsigned int)>:
c0023bda:	57                   	push   edi
c0023bdb:	56                   	push   esi
c0023bdc:	53                   	push   ebx
c0023bdd:	bb 04 00 00 00       	mov    ebx,0x4
c0023be2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023be6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023beb:	52                   	push   edx
c0023bec:	6a 0c                	push   0xc
c0023bee:	56                   	push   esi
c0023bef:	57                   	push   edi
c0023bf0:	e8 f9 f4 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023bf5:	83 c4 10             	add    esp,0x10
c0023bf8:	4b                   	dec    ebx
c0023bf9:	75 f0                	jne    c0023beb <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bfb:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c00:	50                   	push   eax
c0023c01:	6a 0c                	push   0xc
c0023c03:	56                   	push   esi
c0023c04:	57                   	push   edi
c0023c05:	e8 e4 f4 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023c0a:	83 c4 10             	add    esp,0x10
c0023c0d:	a8 01                	test   al,0x1
c0023c0f:	74 12                	je     c0023c23 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c11:	83 ec 0c             	sub    esp,0xc
c0023c14:	68 95 ce 02 c0       	push   0xc002ce95
c0023c19:	e8 3b f3 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023c1e:	83 c4 10             	add    esp,0x10
c0023c21:	eb 17                	jmp    c0023c3a <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c23:	a8 20                	test   al,0x20
c0023c25:	75 0f                	jne    c0023c36 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c27:	4b                   	dec    ebx
c0023c28:	74 10                	je     c0023c3a <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c2a:	84 c0                	test   al,al
c0023c2c:	78 d2                	js     c0023c00 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c2e:	a8 08                	test   al,0x8
c0023c30:	74 ce                	je     c0023c00 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c32:	31 c0                	xor    eax,eax
c0023c34:	eb 06                	jmp    c0023c3c <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c36:	b0 01                	mov    al,0x1
c0023c38:	eb 02                	jmp    c0023c3c <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c3a:	b0 02                	mov    al,0x2
c0023c3c:	5b                   	pop    ebx
c0023c3d:	5e                   	pop    esi
c0023c3e:	5f                   	pop    edi
c0023c3f:	c3                   	ret    

c0023c40 <SATABus::close(int, int, void*)>:
c0023c40:	31 c0                	xor    eax,eax
c0023c42:	c3                   	ret    
c0023c43:	90                   	nop

c0023c44 <SATABus::detect()>:
c0023c44:	c3                   	ret    
c0023c45:	90                   	nop

c0023c46 <SATABus::SATABus()>:
c0023c46:	83 ec 0c             	sub    esp,0xc
c0023c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4d:	83 ec 08             	sub    esp,0x8
c0023c50:	68 d8 ce 02 c0       	push   0xc002ced8
c0023c55:	50                   	push   eax
c0023c56:	e8 b1 0a ff ff       	call   c001470c <HardDiskController::HardDiskController(char const*)>
c0023c5b:	83 c4 10             	add    esp,0x10
c0023c5e:	ba 94 cf 02 c0       	mov    edx,0xc002cf94
c0023c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c67:	89 10                	mov    DWORD PTR [eax],edx
c0023c69:	83 ec 0c             	sub    esp,0xc
c0023c6c:	6a 50                	push   0x50
c0023c6e:	e8 9e c3 fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c0023c73:	83 c4 10             	add    esp,0x10
c0023c76:	89 c2                	mov    edx,eax
c0023c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c82:	83 ec 0c             	sub    esp,0xc
c0023c85:	6a 50                	push   0x50
c0023c87:	e8 ff de fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0023c8c:	83 c4 10             	add    esp,0x10
c0023c8f:	89 c2                	mov    edx,eax
c0023c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c95:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c9b:	e8 86 e1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0023ca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ca4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023caa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	6a 03                	push   0x3
c0023cb9:	6a 50                	push   0x50
c0023cbb:	51                   	push   ecx
c0023cbc:	52                   	push   edx
c0023cbd:	50                   	push   eax
c0023cbe:	e8 93 e9 fe ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cc3:	83 c4 20             	add    esp,0x20
c0023cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cca:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cda:	83 ec 04             	sub    esp,0x4
c0023cdd:	52                   	push   edx
c0023cde:	50                   	push   eax
c0023cdf:	68 fc ce 02 c0       	push   0xc002cefc
c0023ce4:	e8 70 f2 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023ce9:	83 c4 10             	add    esp,0x10
c0023cec:	90                   	nop
c0023ced:	83 c4 0c             	add    esp,0xc
c0023cf0:	c3                   	ret    
c0023cf1:	90                   	nop

c0023cf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cf2:	83 ec 0c             	sub    esp,0xc
c0023cf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cf9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cfc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cff:	09 c2                	or     edx,eax
c0023d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d0d:	31 c0                	xor    eax,eax
c0023d0f:	c1 e9 08             	shr    ecx,0x8
c0023d12:	83 e1 0f             	and    ecx,0xf
c0023d15:	39 c8                	cmp    eax,ecx
c0023d17:	74 0a                	je     c0023d23 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d19:	f6 c2 01             	test   dl,0x1
c0023d1c:	74 18                	je     c0023d36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d1e:	d1 ea                	shr    edx,1
c0023d20:	40                   	inc    eax
c0023d21:	eb f2                	jmp    c0023d15 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d23:	83 ec 0c             	sub    esp,0xc
c0023d26:	68 20 cf 02 c0       	push   0xc002cf20
c0023d2b:	e8 cb 68 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0023d30:	83 c4 10             	add    esp,0x10
c0023d33:	83 c8 ff             	or     eax,0xffffffff
c0023d36:	83 c4 0c             	add    esp,0xc
c0023d39:	c3                   	ret    

c0023d3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d3e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d41:	89 c2                	mov    edx,eax
c0023d43:	c1 ea 08             	shr    edx,0x8
c0023d46:	83 e2 0f             	and    edx,0xf
c0023d49:	fe ca                	dec    dl
c0023d4b:	75 31                	jne    c0023d7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d4d:	83 e0 0f             	and    eax,0xf
c0023d50:	3c 03                	cmp    al,0x3
c0023d52:	75 2a                	jne    c0023d7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d54:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d57:	b8 02 00 00 00       	mov    eax,0x2
c0023d5c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d62:	74 1c                	je     c0023d80 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d64:	b8 04 00 00 00       	mov    eax,0x4
c0023d69:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d6f:	74 0f                	je     c0023d80 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d71:	31 c0                	xor    eax,eax
c0023d73:	83 fa 03             	cmp    edx,0x3
c0023d76:	0f 94 c0             	sete   al
c0023d79:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d7d:	c3                   	ret    
c0023d7e:	31 c0                	xor    eax,eax
c0023d80:	c3                   	ret    
c0023d81:	90                   	nop

c0023d82 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d89:	0f ba e2 0f          	bt     edx,0xf
c0023d8d:	72 f7                	jb     c0023d86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d92:	83 ca 10             	or     edx,0x10
c0023d95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9b:	83 ca 01             	or     edx,0x1
c0023d9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023da1:	c3                   	ret    

c0023da2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023da2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023da6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023da9:	83 e2 fe             	and    edx,0xfffffffe
c0023dac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023daf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023db2:	83 e2 ef             	and    edx,0xffffffef
c0023db5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023db8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dbb:	0f ba e2 0e          	bt     edx,0xe
c0023dbf:	72 f7                	jb     c0023db8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dc1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc4:	0f ba e2 0f          	bt     edx,0xf
c0023dc8:	72 ee                	jb     c0023db8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dca:	c3                   	ret    
c0023dcb:	90                   	nop

c0023dcc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023dcc:	55                   	push   ebp
c0023dcd:	57                   	push   edi
c0023dce:	56                   	push   esi
c0023dcf:	53                   	push   ebx
c0023dd0:	83 ec 1c             	sub    esp,0x1c
c0023dd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023dd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ddb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023ddf:	53                   	push   ebx
c0023de0:	89 fd                	mov    ebp,edi
c0023de2:	56                   	push   esi
c0023de3:	c1 e5 0a             	shl    ebp,0xa
c0023de6:	e8 b7 ff ff ff       	call   c0023da2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023deb:	83 ec 0c             	sub    esp,0xc
c0023dee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023df4:	01 e8                	add    eax,ebp
c0023df6:	89 03                	mov    DWORD PTR [ebx],eax
c0023df8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dfa:	68 00 04 00 00       	push   0x400
c0023dff:	6a 00                	push   0x0
c0023e01:	50                   	push   eax
c0023e02:	e8 71 c9 fd ff       	call   c0000778 <memset>
c0023e07:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e0d:	89 fa                	mov    edx,edi
c0023e0f:	01 e8                	add    eax,ebp
c0023e11:	c1 e7 0d             	shl    edi,0xd
c0023e14:	89 03                	mov    DWORD PTR [ebx],eax
c0023e16:	c1 e2 08             	shl    edx,0x8
c0023e19:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e20:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e2a:	89 d0                	mov    eax,edx
c0023e2c:	83 c4 1c             	add    esp,0x1c
c0023e2f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e35:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e3b:	68 00 01 00 00       	push   0x100
c0023e40:	6a 00                	push   0x0
c0023e42:	50                   	push   eax
c0023e43:	e8 30 c9 fd ff       	call   c0000778 <memset>
c0023e48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e4c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e52:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e5f:	83 c4 10             	add    esp,0x10
c0023e62:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e69:	31 ff                	xor    edi,edi
c0023e6b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e71:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e7b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e81:	83 c5 20             	add    ebp,0x20
c0023e84:	01 f8                	add    eax,edi
c0023e86:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e89:	52                   	push   edx
c0023e8a:	68 00 01 00 00       	push   0x100
c0023e8f:	6a 00                	push   0x0
c0023e91:	50                   	push   eax
c0023e92:	e8 e1 c8 fd ff       	call   c0000778 <memset>
c0023e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e9b:	83 c4 10             	add    esp,0x10
c0023e9e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ea4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023eab:	01 f8                	add    eax,edi
c0023ead:	81 c7 00 01 00 00    	add    edi,0x100
c0023eb3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eb6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ebc:	75 b3                	jne    c0023e71 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ebe:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ec2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ec6:	83 c4 1c             	add    esp,0x1c
c0023ec9:	5b                   	pop    ebx
c0023eca:	5e                   	pop    esi
c0023ecb:	5f                   	pop    edi
c0023ecc:	5d                   	pop    ebp
c0023ecd:	e9 b0 fe ff ff       	jmp    c0023d82 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ed2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ed2:	55                   	push   ebp
c0023ed3:	57                   	push   edi
c0023ed4:	56                   	push   esi
c0023ed5:	53                   	push   ebx
c0023ed6:	31 db                	xor    ebx,ebx
c0023ed8:	83 ec 0c             	sub    esp,0xc
c0023edb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023edf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ee3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ee6:	f7 c7 01 00 00 00    	test   edi,0x1
c0023eec:	0f 84 aa 00 00 00    	je     c0023f9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ef2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ef6:	89 d8                	mov    eax,ebx
c0023ef8:	c1 e0 07             	shl    eax,0x7
c0023efb:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f02:	55                   	push   ebp
c0023f03:	56                   	push   esi
c0023f04:	e8 31 fe ff ff       	call   c0023d3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f09:	5a                   	pop    edx
c0023f0a:	83 f8 01             	cmp    eax,0x1
c0023f0d:	59                   	pop    ecx
c0023f0e:	75 30                	jne    c0023f40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f10:	50                   	push   eax
c0023f11:	50                   	push   eax
c0023f12:	53                   	push   ebx
c0023f13:	68 45 cf 02 c0       	push   0xc002cf45
c0023f18:	e8 3c f0 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023f1d:	83 c4 0c             	add    esp,0xc
c0023f20:	53                   	push   ebx
c0023f21:	55                   	push   ebp
c0023f22:	56                   	push   esi
c0023f23:	e8 a4 fe ff ff       	call   c0023dcc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f28:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f2f:	e8 0c b9 fe ff       	call   c000f840 <malloc>
c0023f34:	89 c5                	mov    ebp,eax
c0023f36:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f39:	e8 60 0d 00 00       	call   c0024c9e <SATA::SATA()>
c0023f3e:	eb 33                	jmp    c0023f73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f40:	83 f8 04             	cmp    eax,0x4
c0023f43:	75 47                	jne    c0023f8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f45:	50                   	push   eax
c0023f46:	50                   	push   eax
c0023f47:	53                   	push   ebx
c0023f48:	68 5c cf 02 c0       	push   0xc002cf5c
c0023f4d:	e8 07 f0 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023f52:	83 c4 0c             	add    esp,0xc
c0023f55:	53                   	push   ebx
c0023f56:	55                   	push   ebp
c0023f57:	56                   	push   esi
c0023f58:	e8 6f fe ff ff       	call   c0023dcc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f5d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f64:	e8 d7 b8 fe ff       	call   c000f840 <malloc>
c0023f69:	89 c5                	mov    ebp,eax
c0023f6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f6e:	e8 d7 10 00 00       	call   c002504a <SATAPI::SATAPI()>
c0023f73:	5a                   	pop    edx
c0023f74:	59                   	pop    ecx
c0023f75:	55                   	push   ebp
c0023f76:	56                   	push   esi
c0023f77:	e8 04 04 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0023f7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f7f:	56                   	push   esi
c0023f80:	6a 00                	push   0x0
c0023f82:	53                   	push   ebx
c0023f83:	55                   	push   ebp
c0023f84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f87:	83 c4 20             	add    esp,0x20
c0023f8a:	eb 10                	jmp    c0023f9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f8c:	50                   	push   eax
c0023f8d:	50                   	push   eax
c0023f8e:	53                   	push   ebx
c0023f8f:	68 75 cf 02 c0       	push   0xc002cf75
c0023f94:	e8 c0 ef fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0023f99:	83 c4 10             	add    esp,0x10
c0023f9c:	d1 ef                	shr    edi,1
c0023f9e:	43                   	inc    ebx
c0023f9f:	83 fb 20             	cmp    ebx,0x20
c0023fa2:	0f 85 3e ff ff ff    	jne    c0023ee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fa8:	83 c4 0c             	add    esp,0xc
c0023fab:	5b                   	pop    ebx
c0023fac:	5e                   	pop    esi
c0023fad:	5f                   	pop    edi
c0023fae:	5d                   	pop    ebp
c0023faf:	c3                   	ret    

c0023fb0 <SATABus::open(int, int, void*)>:
c0023fb0:	83 ec 14             	sub    esp,0x14
c0023fb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fb7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fbd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023fc3:	52                   	push   edx
c0023fc4:	50                   	push   eax
c0023fc5:	e8 08 ff ff ff       	call   c0023ed2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fca:	31 c0                	xor    eax,eax
c0023fcc:	83 c4 1c             	add    esp,0x1c
c0023fcf:	c3                   	ret    

c0023fd0 <ATA::close(int, int, void*)>:
c0023fd0:	83 ec 0c             	sub    esp,0xc
c0023fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fdd:	85 c0                	test   eax,eax
c0023fdf:	74 0c                	je     c0023fed <ATA::close(int, int, void*)+0x1d>
c0023fe1:	83 ec 0c             	sub    esp,0xc
c0023fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fe6:	50                   	push   eax
c0023fe7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	31 c0                	xor    eax,eax
c0023fef:	83 c4 0c             	add    esp,0xc
c0023ff2:	c3                   	ret    
c0023ff3:	90                   	nop

c0023ff4 <ATA::powerSaving(PowerSavingLevel)>:
c0023ff4:	c3                   	ret    
c0023ff5:	90                   	nop

c0023ff6 <ATA::ATA()>:
c0023ff6:	83 ec 0c             	sub    esp,0xc
c0023ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ffd:	83 ec 04             	sub    esp,0x4
c0024000:	68 00 02 00 00       	push   0x200
c0024005:	68 5d d0 02 c0       	push   0xc002d05d
c002400a:	50                   	push   eax
c002400b:	e8 94 07 ff ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024010:	83 c4 10             	add    esp,0x10
c0024013:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0024018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002401c:	89 10                	mov    DWORD PTR [eax],edx
c002401e:	90                   	nop
c002401f:	83 c4 0c             	add    esp,0xc
c0024022:	c3                   	ret    
c0024023:	90                   	nop

c0024024 <ATA::flush(bool)>:
c0024024:	53                   	push   ebx
c0024025:	83 ec 08             	sub    esp,0x8
c0024028:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002402d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024031:	19 c0                	sbb    eax,eax
c0024033:	83 e0 fd             	and    eax,0xfffffffd
c0024036:	05 ea 00 00 00       	add    eax,0xea
c002403b:	50                   	push   eax
c002403c:	6a 07                	push   0x7
c002403e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024045:	50                   	push   eax
c0024046:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002404c:	e8 dd ef ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024051:	83 c4 0c             	add    esp,0xc
c0024054:	6a 00                	push   0x0
c0024056:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002405d:	50                   	push   eax
c002405e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024064:	e8 71 fb ff ff       	call   c0023bda <IDE::polling(unsigned char, unsigned int)>
c0024069:	83 c4 18             	add    esp,0x18
c002406c:	5b                   	pop    ebx
c002406d:	c3                   	ret    

c002406e <ATA::readyForCommand()>:
c002406e:	56                   	push   esi
c002406f:	53                   	push   ebx
c0024070:	31 db                	xor    ebx,ebx
c0024072:	50                   	push   eax
c0024073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024077:	50                   	push   eax
c0024078:	6a 0c                	push   0xc
c002407a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024081:	50                   	push   eax
c0024082:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024088:	e8 61 f0 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002408d:	83 c4 10             	add    esp,0x10
c0024090:	a8 88                	test   al,0x88
c0024092:	74 23                	je     c00240b7 <ATA::readyForCommand()+0x49>
c0024094:	43                   	inc    ebx
c0024095:	83 fb 63             	cmp    ebx,0x63
c0024098:	7e dd                	jle    c0024077 <ATA::readyForCommand()+0x9>
c002409a:	51                   	push   ecx
c002409b:	51                   	push   ecx
c002409c:	6a 00                	push   0x0
c002409e:	68 40 42 0f 00       	push   0xf4240
c00240a3:	e8 c8 a2 ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c00240a8:	83 c4 10             	add    esp,0x10
c00240ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240b1:	75 c4                	jne    c0024077 <ATA::readyForCommand()+0x9>
c00240b3:	31 c0                	xor    eax,eax
c00240b5:	eb 02                	jmp    c00240b9 <ATA::readyForCommand()+0x4b>
c00240b7:	b0 01                	mov    al,0x1
c00240b9:	5a                   	pop    edx
c00240ba:	5b                   	pop    ebx
c00240bb:	5e                   	pop    esi
c00240bc:	c3                   	ret    
c00240bd:	90                   	nop

c00240be <ATA::access(unsigned long long, int, void*, bool)>:
c00240be:	55                   	push   ebp
c00240bf:	57                   	push   edi
c00240c0:	56                   	push   esi
c00240c1:	53                   	push   ebx
c00240c2:	83 ec 2c             	sub    esp,0x2c
c00240c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240cd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240d9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240f5:	c1 e0 06             	shl    eax,0x6
c00240f8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024100:	74 5d                	je     c002415f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024102:	89 fa                	mov    edx,edi
c0024104:	89 f0                	mov    eax,esi
c0024106:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002410a:	c1 ea 1c             	shr    edx,0x1c
c002410d:	89 d1                	mov    ecx,edx
c002410f:	09 c1                	or     ecx,eax
c0024111:	74 25                	je     c0024138 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024113:	31 ed                	xor    ebp,ebp
c0024115:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002411c:	89 fa                	mov    edx,edi
c002411e:	89 f0                	mov    eax,esi
c0024120:	0f ad d0             	shrd   eax,edx,cl
c0024123:	d3 ea                	shr    edx,cl
c0024125:	f6 c1 20             	test   cl,0x20
c0024128:	74 02                	je     c002412c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002412a:	89 d0                	mov    eax,edx
c002412c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024130:	45                   	inc    ebp
c0024131:	83 fd 06             	cmp    ebp,0x6
c0024134:	75 df                	jne    c0024115 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024136:	eb 76                	jmp    c00241ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024138:	89 f0                	mov    eax,esi
c002413a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002413f:	89 fa                	mov    edx,edi
c0024141:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024148:	0f ac d0 10          	shrd   eax,edx,0x10
c002414c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024151:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024155:	c1 ee 18             	shr    esi,0x18
c0024158:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002415d:	eb 56                	jmp    c00241b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002415f:	6a 00                	push   0x0
c0024161:	6a 3f                	push   0x3f
c0024163:	57                   	push   edi
c0024164:	56                   	push   esi
c0024165:	e8 92 29 00 00       	call   c0026afc <__umoddi3>
c002416a:	83 c4 10             	add    esp,0x10
c002416d:	40                   	inc    eax
c002416e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024172:	6a 00                	push   0x0
c0024174:	68 f0 03 00 00       	push   0x3f0
c0024179:	57                   	push   edi
c002417a:	56                   	push   esi
c002417b:	e8 7c 28 00 00       	call   c00269fc <__udivdi3>
c0024180:	83 c4 10             	add    esp,0x10
c0024183:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024188:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002418f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024194:	6a 00                	push   0x0
c0024196:	6a 3f                	push   0x3f
c0024198:	57                   	push   edi
c0024199:	56                   	push   esi
c002419a:	e8 5d 28 00 00       	call   c00269fc <__udivdi3>
c002419f:	83 c4 10             	add    esp,0x10
c00241a2:	89 c6                	mov    esi,eax
c00241a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241a9:	83 e6 0f             	and    esi,0xf
c00241ac:	eb 07                	jmp    c00241b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241ae:	31 f6                	xor    esi,esi
c00241b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241b5:	bf 01 00 00 00       	mov    edi,0x1
c00241ba:	50                   	push   eax
c00241bb:	6a 00                	push   0x0
c00241bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c4:	50                   	push   eax
c00241c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241c9:	e8 6c f0 ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00241ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241d1:	e8 98 fe ff ff       	call   c002406e <ATA::readyForCommand()>
c00241d6:	83 c4 10             	add    esp,0x10
c00241d9:	84 c0                	test   al,al
c00241db:	0f 84 5a 02 00 00    	je     c002443b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241ed:	c1 e0 04             	shl    eax,0x4
c00241f0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241f7:	09 c6                	or     esi,eax
c00241f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241fe:	75 05                	jne    c0024205 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024200:	83 ce a0             	or     esi,0xffffffa0
c0024203:	eb 03                	jmp    c0024208 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024205:	83 ce e0             	or     esi,0xffffffe0
c0024208:	89 f0                	mov    eax,esi
c002420a:	0f b6 f0             	movzx  esi,al
c002420d:	56                   	push   esi
c002420e:	6a 06                	push   0x6
c0024210:	51                   	push   ecx
c0024211:	52                   	push   edx
c0024212:	e8 17 ee ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024217:	83 c4 10             	add    esp,0x10
c002421a:	6a 00                	push   0x0
c002421c:	6a 01                	push   0x1
c002421e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024225:	50                   	push   eax
c0024226:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422c:	e8 fd ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024231:	83 c4 10             	add    esp,0x10
c0024234:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024239:	75 6e                	jne    c00242a9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002423b:	6a 00                	push   0x0
c002423d:	6a 08                	push   0x8
c002423f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024246:	50                   	push   eax
c0024247:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424d:	e8 dc ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024252:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024257:	50                   	push   eax
c0024258:	6a 09                	push   0x9
c002425a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024261:	50                   	push   eax
c0024262:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024268:	e8 c1 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002426d:	83 c4 20             	add    esp,0x20
c0024270:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024275:	50                   	push   eax
c0024276:	6a 0a                	push   0xa
c0024278:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427f:	50                   	push   eax
c0024280:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024286:	e8 a3 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024290:	50                   	push   eax
c0024291:	6a 0b                	push   0xb
c0024293:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429a:	50                   	push   eax
c002429b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a1:	e8 88 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a6:	83 c4 20             	add    esp,0x20
c00242a9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242ae:	50                   	push   eax
c00242af:	6a 02                	push   0x2
c00242b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b8:	50                   	push   eax
c00242b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242bf:	e8 6a ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242c9:	50                   	push   eax
c00242ca:	6a 03                	push   0x3
c00242cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d3:	50                   	push   eax
c00242d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242da:	e8 4f ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242df:	83 c4 20             	add    esp,0x20
c00242e2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242e7:	50                   	push   eax
c00242e8:	6a 04                	push   0x4
c00242ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f1:	50                   	push   eax
c00242f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f8:	e8 31 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024302:	50                   	push   eax
c0024303:	6a 05                	push   0x5
c0024305:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430c:	50                   	push   eax
c002430d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024313:	e8 16 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024318:	83 c4 20             	add    esp,0x20
c002431b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024320:	0f 94 c0             	sete   al
c0024323:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024328:	74 09                	je     c0024333 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002432a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024331:	eb 07                	jmp    c002433a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024333:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002433a:	0f b6 c0             	movzx  eax,al
c002433d:	50                   	push   eax
c002433e:	6a 07                	push   0x7
c0024340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024347:	50                   	push   eax
c0024348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434e:	e8 db ec ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024353:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024357:	83 c4 10             	add    esp,0x10
c002435a:	85 f6                	test   esi,esi
c002435c:	0f 84 ba 00 00 00    	je     c002441c <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024362:	50                   	push   eax
c0024363:	6a 01                	push   0x1
c0024365:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002436c:	50                   	push   eax
c002436d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024373:	e8 62 f8 ff ff       	call   c0023bda <IDE::polling(unsigned char, unsigned int)>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024381:	84 c0                	test   al,al
c0024383:	74 2c                	je     c00243b1 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024385:	0f b6 f8             	movzx  edi,al
c0024388:	0f b6 d2             	movzx  edx,dl
c002438b:	57                   	push   edi
c002438c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024393:	50                   	push   eax
c0024394:	52                   	push   edx
c0024395:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002439b:	e8 a4 f6 ff ff       	call   c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243a0:	c7 04 24 b8 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfb8
c00243a7:	e8 ad eb fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00243ac:	e9 87 00 00 00       	jmp    c0024438 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243b6:	74 33                	je     c00243eb <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243b8:	31 ed                	xor    ebp,ebp
c00243ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243be:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243c2:	50                   	push   eax
c00243c3:	50                   	push   eax
c00243c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243cb:	50                   	push   eax
c00243cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d2:	e8 45 ec ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00243d7:	89 c2                	mov    edx,eax
c00243d9:	89 f8                	mov    eax,edi
c00243db:	66 ef                	out    dx,ax
c00243dd:	45                   	inc    ebp
c00243de:	83 c4 10             	add    esp,0x10
c00243e1:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243e7:	75 d1                	jne    c00243ba <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243e9:	eb 23                	jmp    c002440e <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243eb:	0f b6 d2             	movzx  edx,dl
c00243ee:	51                   	push   ecx
c00243ef:	51                   	push   ecx
c00243f0:	52                   	push   edx
c00243f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243f7:	e8 20 ec ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00243fc:	b9 00 01 00 00       	mov    ecx,0x100
c0024401:	89 c2                	mov    edx,eax
c0024403:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024407:	fc                   	cld    
c0024408:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002440b:	83 c4 10             	add    esp,0x10
c002440e:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024416:	4e                   	dec    esi
c0024417:	e9 3e ff ff ff       	jmp    c002435a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002441c:	31 ff                	xor    edi,edi
c002441e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024423:	74 16                	je     c002443b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024425:	50                   	push   eax
c0024426:	50                   	push   eax
c0024427:	31 c0                	xor    eax,eax
c0024429:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002442e:	0f 94 c0             	sete   al
c0024431:	50                   	push   eax
c0024432:	53                   	push   ebx
c0024433:	e8 ec fb ff ff       	call   c0024024 <ATA::flush(bool)>
c0024438:	83 c4 10             	add    esp,0x10
c002443b:	83 c4 2c             	add    esp,0x2c
c002443e:	89 f8                	mov    eax,edi
c0024440:	5b                   	pop    ebx
c0024441:	5e                   	pop    esi
c0024442:	5f                   	pop    edi
c0024443:	5d                   	pop    ebp
c0024444:	c3                   	ret    
c0024445:	90                   	nop

c0024446 <ATA::read(unsigned long long, int, void*)>:
c0024446:	57                   	push   edi
c0024447:	b8 04 00 00 00       	mov    eax,0x4
c002444c:	56                   	push   esi
c002444d:	53                   	push   ebx
c002444e:	83 ec 10             	sub    esp,0x10
c0024451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024455:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024459:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002445c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024460:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024464:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002446a:	77 3b                	ja     c00244a7 <ATA::read(unsigned long long, int, void*)+0x61>
c002446c:	b8 06 00 00 00       	mov    eax,0x6
c0024471:	85 d2                	test   edx,edx
c0024473:	74 32                	je     c00244a7 <ATA::read(unsigned long long, int, void*)+0x61>
c0024475:	50                   	push   eax
c0024476:	50                   	push   eax
c0024477:	6a 00                	push   0x0
c0024479:	52                   	push   edx
c002447a:	53                   	push   ebx
c002447b:	57                   	push   edi
c002447c:	56                   	push   esi
c002447d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024481:	e8 38 fc ff ff       	call   c00240be <ATA::access(unsigned long long, int, void*, bool)>
c0024486:	83 c4 20             	add    esp,0x20
c0024489:	85 c0                	test   eax,eax
c002448b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002448f:	75 11                	jne    c00244a2 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024491:	01 1d 68 29 03 c0    	add    DWORD PTR ds:0xc0032968,ebx
c0024497:	e8 44 c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c002449c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244a0:	eb 05                	jmp    c00244a7 <ATA::read(unsigned long long, int, void*)+0x61>
c00244a2:	b8 01 00 00 00       	mov    eax,0x1
c00244a7:	83 c4 10             	add    esp,0x10
c00244aa:	5b                   	pop    ebx
c00244ab:	5e                   	pop    esi
c00244ac:	5f                   	pop    edi
c00244ad:	c3                   	ret    

c00244ae <ATA::write(unsigned long long, int, void*)>:
c00244ae:	57                   	push   edi
c00244af:	b8 04 00 00 00       	mov    eax,0x4
c00244b4:	56                   	push   esi
c00244b5:	53                   	push   ebx
c00244b6:	83 ec 10             	sub    esp,0x10
c00244b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244bd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244c1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244cc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244d2:	77 3b                	ja     c002450f <ATA::write(unsigned long long, int, void*)+0x61>
c00244d4:	b8 06 00 00 00       	mov    eax,0x6
c00244d9:	85 d2                	test   edx,edx
c00244db:	74 32                	je     c002450f <ATA::write(unsigned long long, int, void*)+0x61>
c00244dd:	50                   	push   eax
c00244de:	50                   	push   eax
c00244df:	6a 01                	push   0x1
c00244e1:	52                   	push   edx
c00244e2:	53                   	push   ebx
c00244e3:	57                   	push   edi
c00244e4:	56                   	push   esi
c00244e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244e9:	e8 d0 fb ff ff       	call   c00240be <ATA::access(unsigned long long, int, void*, bool)>
c00244ee:	83 c4 20             	add    esp,0x20
c00244f1:	85 c0                	test   eax,eax
c00244f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244f7:	75 11                	jne    c002450a <ATA::write(unsigned long long, int, void*)+0x5c>
c00244f9:	01 1d 64 29 03 c0    	add    DWORD PTR ds:0xc0032964,ebx
c00244ff:	e8 dc c4 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024508:	eb 05                	jmp    c002450f <ATA::write(unsigned long long, int, void*)+0x61>
c002450a:	b8 01 00 00 00       	mov    eax,0x1
c002450f:	83 c4 10             	add    esp,0x10
c0024512:	5b                   	pop    ebx
c0024513:	5e                   	pop    esi
c0024514:	5f                   	pop    edi
c0024515:	c3                   	ret    

c0024516 <ATA::detectCHS()>:
c0024516:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002451a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024520:	c1 e0 06             	shl    eax,0x6
c0024523:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024529:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024533:	c7 44 24 04 c3 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cfc3
c002453b:	e9 bb 60 ff ff       	jmp    c001a5fb <Krnl::panic(char const*)>

c0024540 <ATA::open(int, int, void*)>:
c0024540:	53                   	push   ebx
c0024541:	83 ec 08             	sub    esp,0x8
c0024544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024548:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002454c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024550:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024556:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002455c:	c1 e0 06             	shl    eax,0x6
c002455f:	01 d0                	add    eax,edx
c0024561:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024568:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002456e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024575:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002457f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024585:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002458c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024593:	75 0c                	jne    c00245a1 <ATA::open(int, int, void*)+0x61>
c0024595:	83 ec 0c             	sub    esp,0xc
c0024598:	53                   	push   ebx
c0024599:	e8 78 ff ff ff       	call   c0024516 <ATA::detectCHS()>
c002459e:	83 c4 10             	add    esp,0x10
c00245a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245a7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245ad:	c1 e0 06             	shl    eax,0x6
c00245b0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245c1:	d1 e8                	shr    eax,1
c00245c3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245c9:	6a 04                	push   0x4
c00245cb:	6a 0c                	push   0xc
c00245cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d4:	50                   	push   eax
c00245d5:	52                   	push   edx
c00245d6:	e8 53 ea ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245db:	90                   	nop
c00245dc:	90                   	nop
c00245dd:	6a 00                	push   0x0
c00245df:	6a 0c                	push   0xc
c00245e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245e8:	50                   	push   eax
c00245e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245ef:	e8 3a ea ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245f4:	83 c4 14             	add    esp,0x14
c00245f7:	53                   	push   ebx
c00245f8:	e8 0f 02 ff ff       	call   c001480c <PhysicalDisk::startCache()>
c00245fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024600:	e8 7d 23 ff ff       	call   c0016982 <createPartitionsForDisk(PhysicalDisk*)>
c0024605:	31 c0                	xor    eax,eax
c0024607:	83 c4 18             	add    esp,0x18
c002460a:	5b                   	pop    ebx
c002460b:	c3                   	ret    

c002460c <ATAPI::write(unsigned long long, int, void*)>:
c002460c:	b8 03 00 00 00       	mov    eax,0x3
c0024611:	c3                   	ret    

c0024612 <ATAPI::close(int, int, void*)>:
c0024612:	83 ec 0c             	sub    esp,0xc
c0024615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024619:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002461f:	85 c0                	test   eax,eax
c0024621:	74 0c                	je     c002462f <ATAPI::close(int, int, void*)+0x1d>
c0024623:	83 ec 0c             	sub    esp,0xc
c0024626:	8b 10                	mov    edx,DWORD PTR [eax]
c0024628:	50                   	push   eax
c0024629:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002462c:	83 c4 10             	add    esp,0x10
c002462f:	31 c0                	xor    eax,eax
c0024631:	83 c4 0c             	add    esp,0xc
c0024634:	c3                   	ret    
c0024635:	90                   	nop

c0024636 <ATAPI::ATAPI()>:
c0024636:	83 ec 0c             	sub    esp,0xc
c0024639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002463d:	83 ec 04             	sub    esp,0x4
c0024640:	68 00 08 00 00       	push   0x800
c0024645:	68 fd d0 02 c0       	push   0xc002d0fd
c002464a:	50                   	push   eax
c002464b:	e8 54 01 ff ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024650:	83 c4 10             	add    esp,0x10
c0024653:	ba 18 d0 02 c0       	mov    edx,0xc002d018
c0024658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002465c:	89 10                	mov    DWORD PTR [eax],edx
c002465e:	90                   	nop
c002465f:	83 c4 0c             	add    esp,0xc
c0024662:	c3                   	ret    
c0024663:	90                   	nop

c0024664 <ATAPI::readyForCommand()>:
c0024664:	56                   	push   esi
c0024665:	53                   	push   ebx
c0024666:	31 db                	xor    ebx,ebx
c0024668:	50                   	push   eax
c0024669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002466d:	50                   	push   eax
c002466e:	6a 0c                	push   0xc
c0024670:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024677:	50                   	push   eax
c0024678:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002467e:	e8 6b ea ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0024683:	83 c4 10             	add    esp,0x10
c0024686:	a8 88                	test   al,0x88
c0024688:	74 23                	je     c00246ad <ATAPI::readyForCommand()+0x49>
c002468a:	43                   	inc    ebx
c002468b:	83 fb 63             	cmp    ebx,0x63
c002468e:	7e dd                	jle    c002466d <ATAPI::readyForCommand()+0x9>
c0024690:	51                   	push   ecx
c0024691:	51                   	push   ecx
c0024692:	6a 00                	push   0x0
c0024694:	68 40 42 0f 00       	push   0xf4240
c0024699:	e8 d2 9c ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c002469e:	83 c4 10             	add    esp,0x10
c00246a1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246a7:	75 c4                	jne    c002466d <ATAPI::readyForCommand()+0x9>
c00246a9:	31 c0                	xor    eax,eax
c00246ab:	eb 02                	jmp    c00246af <ATAPI::readyForCommand()+0x4b>
c00246ad:	b0 01                	mov    al,0x1
c00246af:	5a                   	pop    edx
c00246b0:	5b                   	pop    ebx
c00246b1:	5e                   	pop    esi
c00246b2:	c3                   	ret    
c00246b3:	90                   	nop

c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246b4:	55                   	push   ebp
c00246b5:	57                   	push   edi
c00246b6:	56                   	push   esi
c00246b7:	53                   	push   ebx
c00246b8:	83 ec 20             	sub    esp,0x20
c00246bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246bf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246cf:	6a 01                	push   0x1
c00246d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d8:	50                   	push   eax
c00246d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246df:	e8 56 eb ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00246e4:	5e                   	pop    esi
c00246e5:	58                   	pop    eax
c00246e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ed:	50                   	push   eax
c00246ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f4:	e8 0f e9 ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c00246f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246fc:	e8 63 ff ff ff       	call   c0024664 <ATAPI::readyForCommand()>
c0024701:	83 c4 10             	add    esp,0x10
c0024704:	84 c0                	test   al,al
c0024706:	75 0a                	jne    c0024712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024708:	bb 01 00 00 00       	mov    ebx,0x1
c002470d:	e9 57 02 00 00       	jmp    c0024969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024712:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024718:	c1 e0 04             	shl    eax,0x4
c002471b:	0f b6 c0             	movzx  eax,al
c002471e:	50                   	push   eax
c002471f:	6a 06                	push   0x6
c0024721:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024728:	50                   	push   eax
c0024729:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472f:	e8 fa e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024734:	6a 00                	push   0x0
c0024736:	6a 01                	push   0x1
c0024738:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473f:	50                   	push   eax
c0024740:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024746:	e8 e3 e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002474b:	83 c4 20             	add    esp,0x20
c002474e:	0f b6 c3             	movzx  eax,bl
c0024751:	0f b6 df             	movzx  ebx,bh
c0024754:	50                   	push   eax
c0024755:	6a 04                	push   0x4
c0024757:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475e:	50                   	push   eax
c002475f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024765:	e8 c4 e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476a:	53                   	push   ebx
c002476b:	6a 05                	push   0x5
c002476d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024774:	50                   	push   eax
c0024775:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477b:	e8 ae e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024780:	83 c4 20             	add    esp,0x20
c0024783:	68 a0 00 00 00       	push   0xa0
c0024788:	6a 07                	push   0x7
c002478a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024791:	50                   	push   eax
c0024792:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024798:	e8 91 e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002479d:	83 c4 0c             	add    esp,0xc
c00247a0:	6a 01                	push   0x1
c00247a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a9:	50                   	push   eax
c00247aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b0:	e8 25 f4 ff ff       	call   c0023bda <IDE::polling(unsigned char, unsigned int)>
c00247b5:	83 c4 10             	add    esp,0x10
c00247b8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247be:	84 c0                	test   al,al
c00247c0:	74 23                	je     c00247e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247c2:	0f b6 d8             	movzx  ebx,al
c00247c5:	0f b6 d2             	movzx  edx,dl
c00247c8:	53                   	push   ebx
c00247c9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247d0:	50                   	push   eax
c00247d1:	52                   	push   edx
c00247d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d8:	e8 67 f2 ff ff       	call   c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247dd:	83 c4 10             	add    esp,0x10
c00247e0:	e9 84 01 00 00       	jmp    c0024969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247e5:	0f b6 d2             	movzx  edx,dl
c00247e8:	53                   	push   ebx
c00247e9:	53                   	push   ebx
c00247ea:	52                   	push   edx
c00247eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f1:	e8 26 e8 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00247f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247fa:	b9 06 00 00 00       	mov    ecx,0x6
c00247ff:	89 c2                	mov    edx,eax
c0024801:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024804:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024808:	83 c4 10             	add    esp,0x10
c002480b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024811:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024818:	85 db                	test   ebx,ebx
c002481a:	0f 84 ec 00 00 00    	je     c002490c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024820:	51                   	push   ecx
c0024821:	51                   	push   ecx
c0024822:	52                   	push   edx
c0024823:	50                   	push   eax
c0024824:	e8 73 e9 ff ff       	call   c002319c <IDE::waitInterrupt(unsigned char)>
c0024829:	83 c4 10             	add    esp,0x10
c002482c:	84 c0                	test   al,al
c002482e:	0f 84 d4 fe ff ff    	je     c0024708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024834:	56                   	push   esi
c0024835:	56                   	push   esi
c0024836:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002483d:	50                   	push   eax
c002483e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024844:	e8 bf e7 ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c0024849:	83 c4 0c             	add    esp,0xc
c002484c:	6a 04                	push   0x4
c002484e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024855:	50                   	push   eax
c0024856:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002485c:	e8 8d e8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0024861:	83 c4 0c             	add    esp,0xc
c0024864:	89 c6                	mov    esi,eax
c0024866:	6a 05                	push   0x5
c0024868:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002486f:	50                   	push   eax
c0024870:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024876:	e8 73 e8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002487b:	89 f1                	mov    ecx,esi
c002487d:	0f b6 c0             	movzx  eax,al
c0024880:	0f b6 f1             	movzx  esi,cl
c0024883:	c1 e0 08             	shl    eax,0x8
c0024886:	09 c6                	or     esi,eax
c0024888:	d1 fe                	sar    esi,1
c002488a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002488e:	83 c4 10             	add    esp,0x10
c0024891:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024896:	74 41                	je     c00248d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024898:	31 c9                	xor    ecx,ecx
c002489a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248a7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248ab:	75 0a                	jne    c00248b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248ad:	01 c9                	add    ecx,ecx
c00248af:	01 cd                	add    ebp,ecx
c00248b1:	4b                   	dec    ebx
c00248b2:	e9 54 ff ff ff       	jmp    c002480b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248b7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248c0:	51                   	push   ecx
c00248c1:	51                   	push   ecx
c00248c2:	52                   	push   edx
c00248c3:	50                   	push   eax
c00248c4:	e8 53 e7 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00248c9:	89 c2                	mov    edx,eax
c00248cb:	89 f0                	mov    eax,esi
c00248cd:	66 ef                	out    dx,ax
c00248cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248d3:	83 c4 10             	add    esp,0x10
c00248d6:	41                   	inc    ecx
c00248d7:	eb c1                	jmp    c002489a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248d9:	31 f6                	xor    esi,esi
c00248db:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248e1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248e8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248ec:	75 06                	jne    c00248f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248ee:	01 f6                	add    esi,esi
c00248f0:	01 f5                	add    ebp,esi
c00248f2:	eb bd                	jmp    c00248b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248f4:	51                   	push   ecx
c00248f5:	51                   	push   ecx
c00248f6:	52                   	push   edx
c00248f7:	50                   	push   eax
c00248f8:	e8 1f e7 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00248fd:	89 c2                	mov    edx,eax
c00248ff:	66 ed                	in     ax,dx
c0024901:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024906:	83 c4 10             	add    esp,0x10
c0024909:	46                   	inc    esi
c002490a:	eb cf                	jmp    c00248db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002490c:	51                   	push   ecx
c002490d:	51                   	push   ecx
c002490e:	52                   	push   edx
c002490f:	50                   	push   eax
c0024910:	e8 87 e8 ff ff       	call   c002319c <IDE::waitInterrupt(unsigned char)>
c0024915:	83 c4 10             	add    esp,0x10
c0024918:	84 c0                	test   al,al
c002491a:	0f 84 e8 fd ff ff    	je     c0024708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024920:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024925:	52                   	push   edx
c0024926:	52                   	push   edx
c0024927:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002492e:	50                   	push   eax
c002492f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024935:	e8 ce e6 ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c002493a:	83 c4 10             	add    esp,0x10
c002493d:	50                   	push   eax
c002493e:	50                   	push   eax
c002493f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024946:	50                   	push   eax
c0024947:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002494d:	e8 ca e6 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c0024952:	8d 50 07             	lea    edx,[eax+0x7]
c0024955:	ec                   	in     al,dx
c0024956:	83 c4 10             	add    esp,0x10
c0024959:	a8 88                	test   al,0x88
c002495b:	74 0a                	je     c0024967 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002495d:	4b                   	dec    ebx
c002495e:	75 dd                	jne    c002493d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024960:	bb 02 00 00 00       	mov    ebx,0x2
c0024965:	eb 02                	jmp    c0024969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024967:	31 db                	xor    ebx,ebx
c0024969:	83 c4 1c             	add    esp,0x1c
c002496c:	89 d8                	mov    eax,ebx
c002496e:	5b                   	pop    ebx
c002496f:	5e                   	pop    esi
c0024970:	5f                   	pop    edi
c0024971:	5d                   	pop    ebp
c0024972:	c3                   	ret    
c0024973:	90                   	nop

c0024974 <ATAPI::diskRemoved()>:
c0024974:	83 ec 18             	sub    esp,0x18
c0024977:	68 09 d1 02 c0       	push   0xc002d109
c002497c:	e8 d8 e5 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0024981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024985:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002498c:	83 c4 1c             	add    esp,0x1c
c002498f:	c3                   	ret    

c0024990 <ATAPI::eject()>:
c0024990:	57                   	push   edi
c0024991:	b9 03 00 00 00       	mov    ecx,0x3
c0024996:	53                   	push   ebx
c0024997:	83 ec 14             	sub    esp,0x14
c002499a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002499e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249a2:	fc                   	cld    
c00249a3:	31 c0                	xor    eax,eax
c00249a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249a7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249ac:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249b1:	50                   	push   eax
c00249b2:	50                   	push   eax
c00249b3:	6a 00                	push   0x0
c00249b5:	6a 00                	push   0x0
c00249b7:	6a 00                	push   0x0
c00249b9:	6a 02                	push   0x2
c00249bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249bf:	50                   	push   eax
c00249c0:	53                   	push   ebx
c00249c1:	e8 ee fc ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249c6:	83 c4 14             	add    esp,0x14
c00249c9:	53                   	push   ebx
c00249ca:	e8 a5 ff ff ff       	call   c0024974 <ATAPI::diskRemoved()>
c00249cf:	83 c4 24             	add    esp,0x24
c00249d2:	31 c0                	xor    eax,eax
c00249d4:	5b                   	pop    ebx
c00249d5:	5f                   	pop    edi
c00249d6:	c3                   	ret    
c00249d7:	90                   	nop

c00249d8 <ATAPI::diskInserted()>:
c00249d8:	53                   	push   ebx
c00249d9:	83 ec 14             	sub    esp,0x14
c00249dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249e0:	68 20 d1 02 c0       	push   0xc002d120
c00249e5:	e8 6f e5 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00249ea:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249f4:	e8 13 fe fe ff       	call   c001480c <PhysicalDisk::startCache()>
c00249f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249fd:	83 c4 18             	add    esp,0x18
c0024a00:	5b                   	pop    ebx
c0024a01:	e9 7c 1f ff ff       	jmp    c0016982 <createPartitionsForDisk(PhysicalDisk*)>

c0024a06 <ATAPI::detectMedia()>:
c0024a06:	56                   	push   esi
c0024a07:	53                   	push   ebx
c0024a08:	83 ec 28             	sub    esp,0x28
c0024a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a0f:	6a 0c                	push   0xc
c0024a11:	6a 00                	push   0x0
c0024a13:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a17:	56                   	push   esi
c0024a18:	e8 5b bd fd ff       	call   c0000778 <memset>
c0024a1d:	58                   	pop    eax
c0024a1e:	5a                   	pop    edx
c0024a1f:	6a 00                	push   0x0
c0024a21:	6a 00                	push   0x0
c0024a23:	6a 00                	push   0x0
c0024a25:	6a 00                	push   0x0
c0024a27:	56                   	push   esi
c0024a28:	53                   	push   ebx
c0024a29:	e8 86 fc ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a2e:	83 c4 1c             	add    esp,0x1c
c0024a31:	6a 0c                	push   0xc
c0024a33:	6a 00                	push   0x0
c0024a35:	56                   	push   esi
c0024a36:	e8 3d bd fd ff       	call   c0000778 <memset>
c0024a3b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a40:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a45:	59                   	pop    ecx
c0024a46:	58                   	pop    eax
c0024a47:	6a 01                	push   0x1
c0024a49:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a4d:	50                   	push   eax
c0024a4e:	6a 00                	push   0x0
c0024a50:	6a 12                	push   0x12
c0024a52:	56                   	push   esi
c0024a53:	53                   	push   ebx
c0024a54:	e8 5b fc ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a59:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a5d:	83 c4 20             	add    esp,0x20
c0024a60:	83 e0 7f             	and    eax,0x7f
c0024a63:	3c 70                	cmp    al,0x70
c0024a65:	74 15                	je     c0024a7c <ATAPI::detectMedia()+0x76>
c0024a67:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a6e:	75 0c                	jne    c0024a7c <ATAPI::detectMedia()+0x76>
c0024a70:	83 ec 0c             	sub    esp,0xc
c0024a73:	53                   	push   ebx
c0024a74:	e8 5f ff ff ff       	call   c00249d8 <ATAPI::diskInserted()>
c0024a79:	83 c4 10             	add    esp,0x10
c0024a7c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a80:	83 e0 0f             	and    eax,0xf
c0024a83:	3c 02                	cmp    al,0x2
c0024a85:	75 1b                	jne    c0024aa2 <ATAPI::detectMedia()+0x9c>
c0024a87:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a8c:	75 2d                	jne    c0024abb <ATAPI::detectMedia()+0xb5>
c0024a8e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a95:	74 24                	je     c0024abb <ATAPI::detectMedia()+0xb5>
c0024a97:	83 ec 0c             	sub    esp,0xc
c0024a9a:	53                   	push   ebx
c0024a9b:	e8 d4 fe ff ff       	call   c0024974 <ATAPI::diskRemoved()>
c0024aa0:	eb 16                	jmp    c0024ab8 <ATAPI::detectMedia()+0xb2>
c0024aa2:	84 c0                	test   al,al
c0024aa4:	75 15                	jne    c0024abb <ATAPI::detectMedia()+0xb5>
c0024aa6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aad:	75 0c                	jne    c0024abb <ATAPI::detectMedia()+0xb5>
c0024aaf:	83 ec 0c             	sub    esp,0xc
c0024ab2:	53                   	push   ebx
c0024ab3:	e8 20 ff ff ff       	call   c00249d8 <ATAPI::diskInserted()>
c0024ab8:	83 c4 10             	add    esp,0x10
c0024abb:	83 c4 24             	add    esp,0x24
c0024abe:	5b                   	pop    ebx
c0024abf:	5e                   	pop    esi
c0024ac0:	c3                   	ret    
c0024ac1:	90                   	nop

c0024ac2 <ATAPI::open(int, int, void*)>:
c0024ac2:	53                   	push   ebx
c0024ac3:	83 ec 08             	sub    esp,0x8
c0024ac6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ace:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ad2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ad8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ade:	c1 e0 06             	shl    eax,0x6
c0024ae1:	01 d0                	add    eax,edx
c0024ae3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aea:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024af0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024af7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b01:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b07:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b0e:	6a 04                	push   0x4
c0024b10:	6a 0c                	push   0xc
c0024b12:	51                   	push   ecx
c0024b13:	52                   	push   edx
c0024b14:	e8 15 e5 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b19:	90                   	nop
c0024b1a:	90                   	nop
c0024b1b:	6a 00                	push   0x0
c0024b1d:	6a 0c                	push   0xc
c0024b1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b26:	50                   	push   eax
c0024b27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b2d:	e8 fc e4 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b32:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b39:	83 c4 14             	add    esp,0x14
c0024b3c:	53                   	push   ebx
c0024b3d:	e8 c4 fe ff ff       	call   c0024a06 <ATAPI::detectMedia()>
c0024b42:	31 c0                	xor    eax,eax
c0024b44:	83 c4 18             	add    esp,0x18
c0024b47:	5b                   	pop    ebx
c0024b48:	c3                   	ret    
c0024b49:	90                   	nop

c0024b4a <ATAPI::read(unsigned long long, int, void*)>:
c0024b4a:	55                   	push   ebp
c0024b4b:	57                   	push   edi
c0024b4c:	56                   	push   esi
c0024b4d:	53                   	push   ebx
c0024b4e:	83 ec 1c             	sub    esp,0x1c
c0024b51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b5d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b64:	74 41                	je     c0024ba7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b6a:	b9 03 00 00 00       	mov    ecx,0x3
c0024b6f:	fc                   	cld    
c0024b70:	31 c0                	xor    eax,eax
c0024b72:	86 fb                	xchg   bl,bh
c0024b74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b76:	c1 c3 10             	rol    ebx,0x10
c0024b79:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b7e:	89 e8                	mov    eax,ebp
c0024b80:	86 fb                	xchg   bl,bh
c0024b82:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b86:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b8a:	50                   	push   eax
c0024b8b:	50                   	push   eax
c0024b8c:	55                   	push   ebp
c0024b8d:	c1 e5 0b             	shl    ebp,0xb
c0024b90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b94:	6a 00                	push   0x0
c0024b96:	55                   	push   ebp
c0024b97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b9b:	50                   	push   eax
c0024b9c:	56                   	push   esi
c0024b9d:	e8 12 fb ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ba2:	83 c4 20             	add    esp,0x20
c0024ba5:	eb 1a                	jmp    c0024bc1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024ba7:	83 ec 0c             	sub    esp,0xc
c0024baa:	56                   	push   esi
c0024bab:	e8 56 fe ff ff       	call   c0024a06 <ATAPI::detectMedia()>
c0024bb0:	83 c4 10             	add    esp,0x10
c0024bb3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bba:	75 aa                	jne    c0024b66 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bbc:	b8 02 00 00 00       	mov    eax,0x2
c0024bc1:	83 c4 1c             	add    esp,0x1c
c0024bc4:	5b                   	pop    ebx
c0024bc5:	5e                   	pop    esi
c0024bc6:	5f                   	pop    edi
c0024bc7:	5d                   	pop    ebp
c0024bc8:	c3                   	ret    
c0024bc9:	90                   	nop

c0024bca <SATA::close(int, int, void*)>:
c0024bca:	83 ec 0c             	sub    esp,0xc
c0024bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bd7:	85 c0                	test   eax,eax
c0024bd9:	74 0c                	je     c0024be7 <SATA::close(int, int, void*)+0x1d>
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	8b 10                	mov    edx,DWORD PTR [eax]
c0024be0:	50                   	push   eax
c0024be1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024be4:	83 c4 10             	add    esp,0x10
c0024be7:	31 c0                	xor    eax,eax
c0024be9:	83 c4 0c             	add    esp,0xc
c0024bec:	c3                   	ret    
c0024bed:	90                   	nop

c0024bee <SATA::powerSaving(PowerSavingLevel)>:
c0024bee:	c3                   	ret    
c0024bef:	90                   	nop

c0024bf0 <SATA::open(int, int, void*)>:
c0024bf0:	56                   	push   esi
c0024bf1:	53                   	push   ebx
c0024bf2:	50                   	push   eax
c0024bf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bfb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c05:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c0b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c19:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c29:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c30:	e8 ad b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c35:	89 c6                	mov    esi,eax
c0024c37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c3d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c43:	e8 9a b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c48:	39 c6                	cmp    esi,eax
c0024c4a:	74 10                	je     c0024c5c <SATA::open(int, int, void*)+0x6c>
c0024c4c:	83 ec 0c             	sub    esp,0xc
c0024c4f:	68 48 d0 02 c0       	push   0xc002d048
c0024c54:	e8 a2 59 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024c59:	83 c4 10             	add    esp,0x10
c0024c5c:	83 ec 0c             	sub    esp,0xc
c0024c5f:	6a 02                	push   0x2
c0024c61:	e8 25 cf fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0024c66:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c6c:	e8 b5 d1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0024c71:	6a 03                	push   0x3
c0024c73:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c79:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c7f:	50                   	push   eax
c0024c80:	e8 dd d6 fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c85:	83 c4 14             	add    esp,0x14
c0024c88:	53                   	push   ebx
c0024c89:	e8 7e fb fe ff       	call   c001480c <PhysicalDisk::startCache()>
c0024c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c91:	e8 ec 1c ff ff       	call   c0016982 <createPartitionsForDisk(PhysicalDisk*)>
c0024c96:	83 c4 14             	add    esp,0x14
c0024c99:	31 c0                	xor    eax,eax
c0024c9b:	5b                   	pop    ebx
c0024c9c:	5e                   	pop    esi
c0024c9d:	c3                   	ret    

c0024c9e <SATA::SATA()>:
c0024c9e:	83 ec 0c             	sub    esp,0xc
c0024ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca5:	83 ec 04             	sub    esp,0x4
c0024ca8:	68 00 02 00 00       	push   0x200
c0024cad:	68 5c d0 02 c0       	push   0xc002d05c
c0024cb2:	50                   	push   eax
c0024cb3:	e8 ec fa fe ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cb8:	83 c4 10             	add    esp,0x10
c0024cbb:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c0024cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc4:	89 10                	mov    DWORD PTR [eax],edx
c0024cc6:	90                   	nop
c0024cc7:	83 c4 0c             	add    esp,0xc
c0024cca:	c3                   	ret    
c0024ccb:	90                   	nop

c0024ccc <SATA::access(unsigned long long, int, void*, bool)>:
c0024ccc:	55                   	push   ebp
c0024ccd:	57                   	push   edi
c0024cce:	56                   	push   esi
c0024ccf:	53                   	push   ebx
c0024cd0:	83 ec 2c             	sub    esp,0x2c
c0024cd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cd7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cdf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024ce3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ce7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cf0:	7e 10                	jle    c0024d02 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cf2:	83 ec 0c             	sub    esp,0xc
c0024cf5:	68 6c d0 02 c0       	push   0xc002d06c
c0024cfa:	e8 fc 58 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024cff:	83 c4 10             	add    esp,0x10
c0024d02:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d08:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d18:	89 f0                	mov    eax,esi
c0024d1a:	c1 e0 07             	shl    eax,0x7
c0024d1d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d21:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d2b:	53                   	push   ebx
c0024d2c:	8d 46 02             	lea    eax,[esi+0x2]
c0024d2f:	53                   	push   ebx
c0024d30:	c1 e0 07             	shl    eax,0x7
c0024d33:	bb 01 00 00 00       	mov    ebx,0x1
c0024d38:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d3c:	50                   	push   eax
c0024d3d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d43:	e8 aa ef ff ff       	call   c0023cf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d54:	0f 84 ce 01 00 00    	je     c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d5e:	c1 e0 09             	shl    eax,0x9
c0024d61:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d6a:	74 17                	je     c0024d83 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d6c:	51                   	push   ecx
c0024d6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d71:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d75:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d7b:	e8 c4 b9 fd ff       	call   c0000744 <memcpy>
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d89:	8d 46 02             	lea    eax,[esi+0x2]
c0024d8c:	c1 e0 07             	shl    eax,0x7
c0024d8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d95:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d9b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024da1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024da5:	c1 e1 05             	shl    ecx,0x5
c0024da8:	01 c8                	add    eax,ecx
c0024daa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024dae:	8a 18                	mov    bl,BYTE PTR [eax]
c0024db0:	83 e1 01             	and    ecx,0x1
c0024db3:	83 e3 bf             	and    ebx,0xffffffbf
c0024db6:	c1 e1 06             	shl    ecx,0x6
c0024db9:	09 d9                	or     ecx,ebx
c0024dbb:	88 08                	mov    BYTE PTR [eax],cl
c0024dbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024dbf:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dc5:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024dcb:	89 08                	mov    DWORD PTR [eax],ecx
c0024dcd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dd3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024dd9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ddf:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024de2:	52                   	push   edx
c0024de3:	68 90 00 00 00       	push   0x90
c0024de8:	6a 00                	push   0x0
c0024dea:	53                   	push   ebx
c0024deb:	e8 88 b9 fd ff       	call   c0000778 <memset>
c0024df0:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024df6:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dfa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e00:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e08:	83 c4 10             	add    esp,0x10
c0024e0b:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e0e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e14:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e1a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e1f:	09 c8                	or     eax,ecx
c0024e21:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e27:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e2a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e31:	66 25 00 7f          	and    ax,0x7f00
c0024e35:	66 0d 27 80          	or     ax,0x8027
c0024e39:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e3e:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e41:	19 c0                	sbb    eax,eax
c0024e43:	83 e0 f0             	and    eax,0xfffffff0
c0024e46:	83 c0 35             	add    eax,0x35
c0024e49:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e4c:	89 f8                	mov    eax,edi
c0024e4e:	c1 e8 10             	shr    eax,0x10
c0024e51:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e54:	89 f8                	mov    eax,edi
c0024e56:	c1 e8 18             	shr    eax,0x18
c0024e59:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e5c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e60:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e67:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e6e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e72:	89 f3                	mov    ebx,esi
c0024e74:	31 c0                	xor    eax,eax
c0024e76:	c1 e3 07             	shl    ebx,0x7
c0024e79:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e7d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e83:	80 e1 88             	and    cl,0x88
c0024e86:	74 0a                	je     c0024e92 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e8d:	74 0a                	je     c0024e99 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e8f:	40                   	inc    eax
c0024e90:	eb eb                	jmp    c0024e7d <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e92:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e97:	75 0a                	jne    c0024ea3 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e99:	83 ec 0c             	sub    esp,0xc
c0024e9c:	68 a5 d0 02 c0       	push   0xc002d0a5
c0024ea1:	eb 56                	jmp    c0024ef9 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ea3:	b8 01 00 00 00       	mov    eax,0x1
c0024ea8:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024eac:	c1 e6 07             	shl    esi,0x7
c0024eaf:	d3 e0                	shl    eax,cl
c0024eb1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024eb5:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ebb:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ec1:	85 c8                	test   eax,ecx
c0024ec3:	74 20                	je     c0024ee5 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ec5:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ecb:	0f ba e1 1e          	bt     ecx,0x1e
c0024ecf:	73 ea                	jae    c0024ebb <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ed1:	83 ec 0c             	sub    esp,0xc
c0024ed4:	31 db                	xor    ebx,ebx
c0024ed6:	68 b3 d0 02 c0       	push   0xc002d0b3
c0024edb:	e8 1b 57 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024ee0:	83 c4 10             	add    esp,0x10
c0024ee3:	eb 43                	jmp    c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ee5:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024eeb:	0f ba e0 1e          	bt     eax,0x1e
c0024eef:	73 17                	jae    c0024f08 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ef1:	83 ec 0c             	sub    esp,0xc
c0024ef4:	68 b3 d0 02 c0       	push   0xc002d0b3
c0024ef9:	e8 fd 56 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024efe:	bb 01 00 00 00       	mov    ebx,0x1
c0024f03:	83 c4 10             	add    esp,0x10
c0024f06:	eb 20                	jmp    c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f08:	31 db                	xor    ebx,ebx
c0024f0a:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f0f:	75 17                	jne    c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f11:	50                   	push   eax
c0024f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f16:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f20:	e8 1f b8 fd ff       	call   c0000744 <memcpy>
c0024f25:	83 c4 10             	add    esp,0x10
c0024f28:	83 c4 2c             	add    esp,0x2c
c0024f2b:	89 d8                	mov    eax,ebx
c0024f2d:	5b                   	pop    ebx
c0024f2e:	5e                   	pop    esi
c0024f2f:	5f                   	pop    edi
c0024f30:	5d                   	pop    ebp
c0024f31:	c3                   	ret    

c0024f32 <SATA::read(unsigned long long, int, void*)>:
c0024f32:	57                   	push   edi
c0024f33:	b8 04 00 00 00       	mov    eax,0x4
c0024f38:	56                   	push   esi
c0024f39:	53                   	push   ebx
c0024f3a:	83 ec 10             	sub    esp,0x10
c0024f3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f41:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f45:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f48:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f50:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f56:	77 3b                	ja     c0024f93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f58:	b8 06 00 00 00       	mov    eax,0x6
c0024f5d:	85 d2                	test   edx,edx
c0024f5f:	74 32                	je     c0024f93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f61:	50                   	push   eax
c0024f62:	50                   	push   eax
c0024f63:	6a 00                	push   0x0
c0024f65:	52                   	push   edx
c0024f66:	53                   	push   ebx
c0024f67:	57                   	push   edi
c0024f68:	56                   	push   esi
c0024f69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f6d:	e8 5a fd ff ff       	call   c0024ccc <SATA::access(unsigned long long, int, void*, bool)>
c0024f72:	83 c4 20             	add    esp,0x20
c0024f75:	85 c0                	test   eax,eax
c0024f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f7b:	75 11                	jne    c0024f8e <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f7d:	01 1d 68 29 03 c0    	add    DWORD PTR ds:0xc0032968,ebx
c0024f83:	e8 58 ba fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f8c:	eb 05                	jmp    c0024f93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f8e:	b8 01 00 00 00       	mov    eax,0x1
c0024f93:	83 c4 10             	add    esp,0x10
c0024f96:	5b                   	pop    ebx
c0024f97:	5e                   	pop    esi
c0024f98:	5f                   	pop    edi
c0024f99:	c3                   	ret    

c0024f9a <SATA::write(unsigned long long, int, void*)>:
c0024f9a:	55                   	push   ebp
c0024f9b:	b8 04 00 00 00       	mov    eax,0x4
c0024fa0:	57                   	push   edi
c0024fa1:	56                   	push   esi
c0024fa2:	53                   	push   ebx
c0024fa3:	83 ec 1c             	sub    esp,0x1c
c0024fa6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024faa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fae:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fb5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fb9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fbf:	77 56                	ja     c0025017 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fc1:	b8 06 00 00 00       	mov    eax,0x6
c0024fc6:	85 ff                	test   edi,edi
c0024fc8:	74 4d                	je     c0025017 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fca:	89 ee                	mov    esi,ebp
c0024fcc:	c1 e6 09             	shl    esi,0x9
c0024fcf:	01 fe                	add    esi,edi
c0024fd1:	89 c8                	mov    eax,ecx
c0024fd3:	89 da                	mov    edx,ebx
c0024fd5:	83 c0 01             	add    eax,0x1
c0024fd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fdc:	83 d2 00             	adc    edx,0x0
c0024fdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fe3:	50                   	push   eax
c0024fe4:	50                   	push   eax
c0024fe5:	6a 01                	push   0x1
c0024fe7:	57                   	push   edi
c0024fe8:	81 c7 00 02 00 00    	add    edi,0x200
c0024fee:	6a 01                	push   0x1
c0024ff0:	53                   	push   ebx
c0024ff1:	51                   	push   ecx
c0024ff2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ff6:	e8 d1 fc ff ff       	call   c0024ccc <SATA::access(unsigned long long, int, void*, bool)>
c0024ffb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025003:	83 c4 20             	add    esp,0x20
c0025006:	39 f7                	cmp    edi,esi
c0025008:	75 c7                	jne    c0024fd1 <SATA::write(unsigned long long, int, void*)+0x37>
c002500a:	01 2d 64 29 03 c0    	add    DWORD PTR ds:0xc0032964,ebp
c0025010:	e8 cb b9 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0025015:	31 c0                	xor    eax,eax
c0025017:	83 c4 1c             	add    esp,0x1c
c002501a:	5b                   	pop    ebx
c002501b:	5e                   	pop    esi
c002501c:	5f                   	pop    edi
c002501d:	5d                   	pop    ebp
c002501e:	c3                   	ret    
c002501f:	90                   	nop

c0025020 <SATAPI::write(unsigned long long, int, void*)>:
c0025020:	b8 03 00 00 00       	mov    eax,0x3
c0025025:	c3                   	ret    

c0025026 <SATAPI::close(int, int, void*)>:
c0025026:	83 ec 0c             	sub    esp,0xc
c0025029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025033:	85 c0                	test   eax,eax
c0025035:	74 0c                	je     c0025043 <SATAPI::close(int, int, void*)+0x1d>
c0025037:	83 ec 0c             	sub    esp,0xc
c002503a:	8b 10                	mov    edx,DWORD PTR [eax]
c002503c:	50                   	push   eax
c002503d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025040:	83 c4 10             	add    esp,0x10
c0025043:	31 c0                	xor    eax,eax
c0025045:	83 c4 0c             	add    esp,0xc
c0025048:	c3                   	ret    
c0025049:	90                   	nop

c002504a <SATAPI::SATAPI()>:
c002504a:	83 ec 0c             	sub    esp,0xc
c002504d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025051:	83 ec 04             	sub    esp,0x4
c0025054:	68 00 08 00 00       	push   0x800
c0025059:	68 fc d0 02 c0       	push   0xc002d0fc
c002505e:	50                   	push   eax
c002505f:	e8 40 f7 fe ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025064:	83 c4 10             	add    esp,0x10
c0025067:	ba a8 d1 02 c0       	mov    edx,0xc002d1a8
c002506c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025070:	89 10                	mov    DWORD PTR [eax],edx
c0025072:	90                   	nop
c0025073:	83 c4 0c             	add    esp,0xc
c0025076:	c3                   	ret    
c0025077:	90                   	nop

c0025078 <SATAPI::diskRemoved()>:
c0025078:	83 ec 18             	sub    esp,0x18
c002507b:	68 08 d1 02 c0       	push   0xc002d108
c0025080:	e8 d4 de fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0025085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025089:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025090:	83 c4 1c             	add    esp,0x1c
c0025093:	c3                   	ret    

c0025094 <SATAPI::diskInserted()>:
c0025094:	53                   	push   ebx
c0025095:	83 ec 14             	sub    esp,0x14
c0025098:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002509c:	68 1f d1 02 c0       	push   0xc002d11f
c00250a1:	e8 b3 de fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c00250a6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250b0:	e8 57 f7 fe ff       	call   c001480c <PhysicalDisk::startCache()>
c00250b5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250b9:	83 c4 18             	add    esp,0x18
c00250bc:	5b                   	pop    ebx
c00250bd:	e9 c0 18 ff ff       	jmp    c0016982 <createPartitionsForDisk(PhysicalDisk*)>

c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250c2:	55                   	push   ebp
c00250c3:	57                   	push   edi
c00250c4:	56                   	push   esi
c00250c5:	53                   	push   ebx
c00250c6:	83 ec 24             	sub    esp,0x24
c00250c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250d1:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250df:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250e5:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250ee:	c1 e3 07             	shl    ebx,0x7
c00250f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250f5:	89 f8                	mov    eax,edi
c00250f7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250fb:	c1 e0 07             	shl    eax,0x7
c00250fe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025102:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025106:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025110:	53                   	push   ebx
c0025111:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025117:	e8 d6 eb ff ff       	call   c0023cf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002511c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025120:	83 c4 10             	add    esp,0x10
c0025123:	b8 01 00 00 00       	mov    eax,0x1
c0025128:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002512d:	0f 84 8a 01 00 00    	je     c00252bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025133:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025139:	8b 03                	mov    eax,DWORD PTR [ebx]
c002513b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025141:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025147:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002514b:	c1 e1 05             	shl    ecx,0x5
c002514e:	01 c8                	add    eax,ecx
c0025150:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025152:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025158:	81 c9 25 00 01 00    	or     ecx,0x10025
c002515e:	89 08                	mov    DWORD PTR [eax],ecx
c0025160:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025166:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002516c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025172:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025175:	52                   	push   edx
c0025176:	68 90 00 00 00       	push   0x90
c002517b:	6a 00                	push   0x0
c002517d:	53                   	push   ebx
c002517e:	e8 f5 b5 fd ff       	call   c0000778 <memset>
c0025183:	83 c4 0c             	add    esp,0xc
c0025186:	8d 43 40             	lea    eax,[ebx+0x40]
c0025189:	6a 0c                	push   0xc
c002518b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002518f:	50                   	push   eax
c0025190:	e8 af b5 fd ff       	call   c0000744 <memcpy>
c0025195:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002519b:	89 ea                	mov    edx,ebp
c002519d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251a3:	c1 ea 18             	shr    edx,0x18
c00251a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251aa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251ad:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251b0:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251b4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251ba:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251c0:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251c5:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251c9:	09 c8                	or     eax,ecx
c00251cb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251cf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251d5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251d8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251df:	66 25 00 7f          	and    ax,0x7f00
c00251e3:	66 0d 27 80          	or     ax,0x8027
c00251e7:	66 89 03             	mov    WORD PTR [ebx],ax
c00251ea:	89 e8                	mov    eax,ebp
c00251ec:	c1 e8 10             	shr    eax,0x10
c00251ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251f2:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251f6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251fd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025200:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025204:	83 c4 10             	add    esp,0x10
c0025207:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002520b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002520f:	31 c0                	xor    eax,eax
c0025211:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025217:	80 e1 88             	and    cl,0x88
c002521a:	74 0a                	je     c0025226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002521c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025221:	74 0a                	je     c002522d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025223:	40                   	inc    eax
c0025224:	eb eb                	jmp    c0025211 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025226:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002522b:	75 0f                	jne    c002523c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c002522d:	83 ec 0c             	sub    esp,0xc
c0025230:	68 a5 d0 02 c0       	push   0xc002d0a5
c0025235:	e8 c1 53 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c002523a:	eb 3a                	jmp    c0025276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c002523c:	b8 01 00 00 00       	mov    eax,0x1
c0025241:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025245:	c1 e7 07             	shl    edi,0x7
c0025248:	d3 e0                	shl    eax,cl
c002524a:	03 3c 24             	add    edi,DWORD PTR [esp]
c002524d:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025253:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025259:	85 d0                	test   eax,edx
c002525b:	74 23                	je     c0025280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002525d:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025263:	0f ba e2 1e          	bt     edx,0x1e
c0025267:	73 ea                	jae    c0025253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025269:	83 ec 0c             	sub    esp,0xc
c002526c:	68 37 d1 02 c0       	push   0xc002d137
c0025271:	e8 e3 dc fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0025276:	83 c4 10             	add    esp,0x10
c0025279:	b8 01 00 00 00       	mov    eax,0x1
c002527e:	eb 3d                	jmp    c00252bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025280:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025286:	0f ba e0 1e          	bt     eax,0x1e
c002528a:	73 0a                	jae    c0025296 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002528c:	83 ec 0c             	sub    esp,0xc
c002528f:	68 4a d1 02 c0       	push   0xc002d14a
c0025294:	eb db                	jmp    c0025271 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025296:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002529b:	74 1e                	je     c00252bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002529d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252a2:	74 17                	je     c00252bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252a4:	50                   	push   eax
c00252a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252a9:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252af:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252b3:	e8 8c b4 fd ff       	call   c0000744 <memcpy>
c00252b8:	83 c4 10             	add    esp,0x10
c00252bb:	31 c0                	xor    eax,eax
c00252bd:	83 c4 1c             	add    esp,0x1c
c00252c0:	5b                   	pop    ebx
c00252c1:	5e                   	pop    esi
c00252c2:	5f                   	pop    edi
c00252c3:	5d                   	pop    ebp
c00252c4:	c3                   	ret    
c00252c5:	90                   	nop

c00252c6 <SATAPI::eject()>:
c00252c6:	57                   	push   edi
c00252c7:	b9 03 00 00 00       	mov    ecx,0x3
c00252cc:	53                   	push   ebx
c00252cd:	83 ec 14             	sub    esp,0x14
c00252d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252d8:	fc                   	cld    
c00252d9:	31 c0                	xor    eax,eax
c00252db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252e7:	50                   	push   eax
c00252e8:	6a 00                	push   0x0
c00252ea:	6a 00                	push   0x0
c00252ec:	6a 00                	push   0x0
c00252ee:	6a 00                	push   0x0
c00252f0:	6a 02                	push   0x2
c00252f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252f6:	50                   	push   eax
c00252f7:	53                   	push   ebx
c00252f8:	e8 c5 fd ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252fd:	83 c4 14             	add    esp,0x14
c0025300:	53                   	push   ebx
c0025301:	e8 72 fd ff ff       	call   c0025078 <SATAPI::diskRemoved()>
c0025306:	83 c4 24             	add    esp,0x24
c0025309:	31 c0                	xor    eax,eax
c002530b:	5b                   	pop    ebx
c002530c:	5f                   	pop    edi
c002530d:	c3                   	ret    

c002530e <SATAPI::detectMedia()>:
c002530e:	56                   	push   esi
c002530f:	53                   	push   ebx
c0025310:	83 ec 28             	sub    esp,0x28
c0025313:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025317:	6a 0c                	push   0xc
c0025319:	6a 00                	push   0x0
c002531b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002531f:	56                   	push   esi
c0025320:	e8 53 b4 fd ff       	call   c0000778 <memset>
c0025325:	83 c4 0c             	add    esp,0xc
c0025328:	6a 00                	push   0x0
c002532a:	6a 00                	push   0x0
c002532c:	6a 00                	push   0x0
c002532e:	6a 00                	push   0x0
c0025330:	6a 00                	push   0x0
c0025332:	56                   	push   esi
c0025333:	53                   	push   ebx
c0025334:	e8 89 fd ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025339:	83 c4 1c             	add    esp,0x1c
c002533c:	6a 0c                	push   0xc
c002533e:	6a 00                	push   0x0
c0025340:	56                   	push   esi
c0025341:	e8 32 b4 fd ff       	call   c0000778 <memset>
c0025346:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002534b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025350:	83 c4 0c             	add    esp,0xc
c0025353:	6a 01                	push   0x1
c0025355:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025359:	50                   	push   eax
c002535a:	6a 00                	push   0x0
c002535c:	6a 00                	push   0x0
c002535e:	6a 12                	push   0x12
c0025360:	56                   	push   esi
c0025361:	53                   	push   ebx
c0025362:	e8 5b fd ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025367:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002536b:	83 c4 20             	add    esp,0x20
c002536e:	83 e0 7f             	and    eax,0x7f
c0025371:	3c 70                	cmp    al,0x70
c0025373:	74 15                	je     c002538a <SATAPI::detectMedia()+0x7c>
c0025375:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002537c:	75 0c                	jne    c002538a <SATAPI::detectMedia()+0x7c>
c002537e:	83 ec 0c             	sub    esp,0xc
c0025381:	53                   	push   ebx
c0025382:	e8 0d fd ff ff       	call   c0025094 <SATAPI::diskInserted()>
c0025387:	83 c4 10             	add    esp,0x10
c002538a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002538e:	83 e0 0f             	and    eax,0xf
c0025391:	3c 02                	cmp    al,0x2
c0025393:	75 1b                	jne    c00253b0 <SATAPI::detectMedia()+0xa2>
c0025395:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002539a:	75 2d                	jne    c00253c9 <SATAPI::detectMedia()+0xbb>
c002539c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253a3:	74 24                	je     c00253c9 <SATAPI::detectMedia()+0xbb>
c00253a5:	83 ec 0c             	sub    esp,0xc
c00253a8:	53                   	push   ebx
c00253a9:	e8 ca fc ff ff       	call   c0025078 <SATAPI::diskRemoved()>
c00253ae:	eb 16                	jmp    c00253c6 <SATAPI::detectMedia()+0xb8>
c00253b0:	84 c0                	test   al,al
c00253b2:	75 15                	jne    c00253c9 <SATAPI::detectMedia()+0xbb>
c00253b4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253bb:	75 0c                	jne    c00253c9 <SATAPI::detectMedia()+0xbb>
c00253bd:	83 ec 0c             	sub    esp,0xc
c00253c0:	53                   	push   ebx
c00253c1:	e8 ce fc ff ff       	call   c0025094 <SATAPI::diskInserted()>
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	83 c4 24             	add    esp,0x24
c00253cc:	5b                   	pop    ebx
c00253cd:	5e                   	pop    esi
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop

c00253d0 <SATAPI::open(int, int, void*)>:
c00253d0:	56                   	push   esi
c00253d1:	53                   	push   ebx
c00253d2:	50                   	push   eax
c00253d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025403:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025409:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025410:	e8 cd aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025415:	89 c6                	mov    esi,eax
c0025417:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002541d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025423:	e8 ba aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025428:	39 c6                	cmp    esi,eax
c002542a:	74 10                	je     c002543c <SATAPI::open(int, int, void*)+0x6c>
c002542c:	83 ec 0c             	sub    esp,0xc
c002542f:	68 5f d1 02 c0       	push   0xc002d15f
c0025434:	e8 c2 51 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025439:	83 c4 10             	add    esp,0x10
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	6a 02                	push   0x2
c0025441:	e8 45 c7 fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0025446:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002544c:	e8 d5 c9 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0025451:	6a 03                	push   0x3
c0025453:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025459:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002545f:	50                   	push   eax
c0025460:	e8 fd ce fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025465:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002546c:	83 c4 14             	add    esp,0x14
c002546f:	53                   	push   ebx
c0025470:	e8 99 fe ff ff       	call   c002530e <SATAPI::detectMedia()>
c0025475:	83 c4 14             	add    esp,0x14
c0025478:	31 c0                	xor    eax,eax
c002547a:	5b                   	pop    ebx
c002547b:	5e                   	pop    esi
c002547c:	c3                   	ret    
c002547d:	90                   	nop

c002547e <SATAPI::read(unsigned long long, int, void*)>:
c002547e:	55                   	push   ebp
c002547f:	57                   	push   edi
c0025480:	56                   	push   esi
c0025481:	53                   	push   ebx
c0025482:	83 ec 1c             	sub    esp,0x1c
c0025485:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025489:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002548d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025491:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025498:	74 19                	je     c00254b3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002549a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002549f:	7e 2e                	jle    c00254cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 75 d1 02 c0       	push   0xc002d175
c00254a9:	e8 4d 51 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	eb 1c                	jmp    c00254cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254b3:	83 ec 0c             	sub    esp,0xc
c00254b6:	55                   	push   ebp
c00254b7:	e8 52 fe ff ff       	call   c002530e <SATAPI::detectMedia()>
c00254bc:	83 c4 10             	add    esp,0x10
c00254bf:	b8 02 00 00 00       	mov    eax,0x2
c00254c4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254cb:	75 cd                	jne    c002549a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254cd:	eb 49                	jmp    c0025518 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254d3:	b9 03 00 00 00       	mov    ecx,0x3
c00254d8:	fc                   	cld    
c00254d9:	31 c0                	xor    eax,eax
c00254db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254dd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254e2:	89 d8                	mov    eax,ebx
c00254e4:	86 e0                	xchg   al,ah
c00254e6:	c1 c0 10             	rol    eax,0x10
c00254e9:	86 e0                	xchg   al,ah
c00254eb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254ef:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254f7:	50                   	push   eax
c00254f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025500:	56                   	push   esi
c0025501:	53                   	push   ebx
c0025502:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025506:	c1 e0 0b             	shl    eax,0xb
c0025509:	50                   	push   eax
c002550a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002550e:	50                   	push   eax
c002550f:	55                   	push   ebp
c0025510:	e8 ad fb ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025515:	83 c4 20             	add    esp,0x20
c0025518:	83 c4 1c             	add    esp,0x1c
c002551b:	5b                   	pop    ebx
c002551c:	5e                   	pop    esi
c002551d:	5f                   	pop    edi
c002551e:	5d                   	pop    ebp
c002551f:	c3                   	ret    

c0025520 <AVX::open(int, int, void*)>:
c0025520:	83 ec 0c             	sub    esp,0xc
c0025523:	e8 40 11 00 00       	call   c0026668 <avxInit>
c0025528:	b8 00 00 00 00       	mov    eax,0x0
c002552d:	83 c4 0c             	add    esp,0xc
c0025530:	c3                   	ret    
c0025531:	90                   	nop

c0025532 <AVX::close(int, int, void*)>:
c0025532:	83 ec 0c             	sub    esp,0xc
c0025535:	e8 2f 11 00 00       	call   c0026669 <avxClose>
c002553a:	b8 00 00 00 00       	mov    eax,0x0
c002553f:	83 c4 0c             	add    esp,0xc
c0025542:	c3                   	ret    
c0025543:	90                   	nop

c0025544 <AVX::available()>:
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	e8 14 11 00 00       	call   c0026660 <avxDetect>
c002554c:	85 c0                	test   eax,eax
c002554e:	0f 95 c0             	setne  al
c0025551:	83 c4 0c             	add    esp,0xc
c0025554:	c3                   	ret    
c0025555:	90                   	nop

c0025556 <AVX::save(void*)>:
c0025556:	83 ec 0c             	sub    esp,0xc
c0025559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002555d:	83 ec 0c             	sub    esp,0xc
c0025560:	50                   	push   eax
c0025561:	e8 00 11 00 00       	call   c0026666 <avxSave>
c0025566:	83 c4 10             	add    esp,0x10
c0025569:	90                   	nop
c002556a:	83 c4 0c             	add    esp,0xc
c002556d:	c3                   	ret    

c002556e <AVX::load(void*)>:
c002556e:	83 ec 0c             	sub    esp,0xc
c0025571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025575:	83 ec 0c             	sub    esp,0xc
c0025578:	50                   	push   eax
c0025579:	e8 e9 10 00 00       	call   c0026667 <avxLoad>
c002557e:	83 c4 10             	add    esp,0x10
c0025581:	90                   	nop
c0025582:	83 c4 0c             	add    esp,0xc
c0025585:	c3                   	ret    

c0025586 <AVX::AVX()>:
c0025586:	83 ec 0c             	sub    esp,0xc
c0025589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558d:	83 ec 08             	sub    esp,0x8
c0025590:	68 d8 d1 02 c0       	push   0xc002d1d8
c0025595:	50                   	push   eax
c0025596:	e8 e7 f2 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c002559b:	83 c4 10             	add    esp,0x10
c002559e:	ba e8 d1 02 c0       	mov    edx,0xc002d1e8
c00255a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a7:	89 10                	mov    DWORD PTR [eax],edx
c00255a9:	90                   	nop
c00255aa:	83 c4 0c             	add    esp,0xc
c00255ad:	c3                   	ret    

c00255ae <MMX::available()>:
c00255ae:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00255b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255b9:	83 e0 20             	and    eax,0x20
c00255bc:	84 c0                	test   al,al
c00255be:	0f 95 c0             	setne  al
c00255c1:	c3                   	ret    

c00255c2 <MMX::open(int, int, void*)>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	e8 22 11 00 00       	call   c00266ec <x87Init>
c00255ca:	b8 00 00 00 00       	mov    eax,0x0
c00255cf:	83 c4 0c             	add    esp,0xc
c00255d2:	c3                   	ret    
c00255d3:	90                   	nop

c00255d4 <MMX::close(int, int, void*)>:
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	e8 2a 11 00 00       	call   c0026706 <x87Close>
c00255dc:	b8 00 00 00 00       	mov    eax,0x0
c00255e1:	83 c4 0c             	add    esp,0xc
c00255e4:	c3                   	ret    
c00255e5:	90                   	nop

c00255e6 <MMX::save(void*)>:
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ed:	83 ec 0c             	sub    esp,0xc
c00255f0:	50                   	push   eax
c00255f1:	e8 eb 10 00 00       	call   c00266e1 <x87Save>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	90                   	nop
c00255fa:	83 c4 0c             	add    esp,0xc
c00255fd:	c3                   	ret    

c00255fe <MMX::load(void*)>:
c00255fe:	83 ec 0c             	sub    esp,0xc
c0025601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025605:	83 ec 0c             	sub    esp,0xc
c0025608:	50                   	push   eax
c0025609:	e8 d9 10 00 00       	call   c00266e7 <x87Load>
c002560e:	83 c4 10             	add    esp,0x10
c0025611:	90                   	nop
c0025612:	83 c4 0c             	add    esp,0xc
c0025615:	c3                   	ret    

c0025616 <MMX::MMX()>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561d:	83 ec 08             	sub    esp,0x8
c0025620:	68 18 d2 02 c0       	push   0xc002d218
c0025625:	50                   	push   eax
c0025626:	e8 57 f2 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c002562b:	83 c4 10             	add    esp,0x10
c002562e:	ba 28 d2 02 c0       	mov    edx,0xc002d228
c0025633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025637:	89 10                	mov    DWORD PTR [eax],edx
c0025639:	90                   	nop
c002563a:	83 c4 0c             	add    esp,0xc
c002563d:	c3                   	ret    

c002563e <SSE::open(int, int, void*)>:
c002563e:	83 ec 0c             	sub    esp,0xc
c0025641:	e8 5e 10 00 00       	call   c00266a4 <sseInit>
c0025646:	b8 00 00 00 00       	mov    eax,0x0
c002564b:	83 c4 0c             	add    esp,0xc
c002564e:	c3                   	ret    
c002564f:	90                   	nop

c0025650 <SSE::close(int, int, void*)>:
c0025650:	83 ec 0c             	sub    esp,0xc
c0025653:	e8 5c 10 00 00       	call   c00266b4 <sseClose>
c0025658:	b8 00 00 00 00       	mov    eax,0x0
c002565d:	83 c4 0c             	add    esp,0xc
c0025660:	c3                   	ret    
c0025661:	90                   	nop

c0025662 <SSE::available()>:
c0025662:	83 ec 1c             	sub    esp,0x1c
c0025665:	e8 16 10 00 00       	call   c0026680 <absolutelyNoChanceInHell>
c002566a:	85 c0                	test   eax,eax
c002566c:	0f 95 c0             	setne  al
c002566f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025673:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025677:	83 c4 1c             	add    esp,0x1c
c002567a:	c3                   	ret    
c002567b:	90                   	nop

c002567c <SSE::save(void*)>:
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025683:	83 ec 0c             	sub    esp,0xc
c0025686:	50                   	push   eax
c0025687:	e8 0c 10 00 00       	call   c0026698 <sseSave>
c002568c:	83 c4 10             	add    esp,0x10
c002568f:	90                   	nop
c0025690:	83 c4 0c             	add    esp,0xc
c0025693:	c3                   	ret    

c0025694 <SSE::load(void*)>:
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002569b:	83 ec 0c             	sub    esp,0xc
c002569e:	50                   	push   eax
c002569f:	e8 fa 0f 00 00       	call   c002669e <sseLoad>
c00256a4:	83 c4 10             	add    esp,0x10
c00256a7:	90                   	nop
c00256a8:	83 c4 0c             	add    esp,0xc
c00256ab:	c3                   	ret    

c00256ac <SSE::SSE()>:
c00256ac:	83 ec 0c             	sub    esp,0xc
c00256af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b3:	83 ec 08             	sub    esp,0x8
c00256b6:	68 58 d2 02 c0       	push   0xc002d258
c00256bb:	50                   	push   eax
c00256bc:	e8 c1 f1 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c00256c1:	83 c4 10             	add    esp,0x10
c00256c4:	ba 68 d2 02 c0       	mov    edx,0xc002d268
c00256c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256cd:	89 10                	mov    DWORD PTR [eax],edx
c00256cf:	90                   	nop
c00256d0:	83 c4 0c             	add    esp,0xc
c00256d3:	c3                   	ret    

c00256d4 <x87::open(int, int, void*)>:
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	e8 10 10 00 00       	call   c00266ec <x87Init>
c00256dc:	b8 00 00 00 00       	mov    eax,0x0
c00256e1:	83 c4 0c             	add    esp,0xc
c00256e4:	c3                   	ret    
c00256e5:	90                   	nop

c00256e6 <x87::close(int, int, void*)>:
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	e8 18 10 00 00       	call   c0026706 <x87Close>
c00256ee:	b8 00 00 00 00       	mov    eax,0x0
c00256f3:	83 c4 0c             	add    esp,0xc
c00256f6:	c3                   	ret    
c00256f7:	90                   	nop

c00256f8 <x87::available()>:
c00256f8:	83 ec 0c             	sub    esp,0xc
c00256fb:	e8 c6 0f 00 00       	call   c00266c6 <x87Detect>
c0025700:	85 c0                	test   eax,eax
c0025702:	0f 95 c0             	setne  al
c0025705:	83 c4 0c             	add    esp,0xc
c0025708:	c3                   	ret    
c0025709:	90                   	nop

c002570a <x87::save(void*)>:
c002570a:	83 ec 0c             	sub    esp,0xc
c002570d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025711:	83 ec 0c             	sub    esp,0xc
c0025714:	50                   	push   eax
c0025715:	e8 c7 0f 00 00       	call   c00266e1 <x87Save>
c002571a:	83 c4 10             	add    esp,0x10
c002571d:	90                   	nop
c002571e:	83 c4 0c             	add    esp,0xc
c0025721:	c3                   	ret    

c0025722 <x87::load(void*)>:
c0025722:	83 ec 0c             	sub    esp,0xc
c0025725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025729:	83 ec 0c             	sub    esp,0xc
c002572c:	50                   	push   eax
c002572d:	e8 b5 0f 00 00       	call   c00266e7 <x87Load>
c0025732:	83 c4 10             	add    esp,0x10
c0025735:	90                   	nop
c0025736:	83 c4 0c             	add    esp,0xc
c0025739:	c3                   	ret    

c002573a <x87::x87()>:
c002573a:	83 ec 0c             	sub    esp,0xc
c002573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025741:	83 ec 08             	sub    esp,0x8
c0025744:	68 98 d2 02 c0       	push   0xc002d298
c0025749:	50                   	push   eax
c002574a:	e8 33 f1 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c002574f:	83 c4 10             	add    esp,0x10
c0025752:	ba a8 d2 02 c0       	mov    edx,0xc002d2a8
c0025757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002575b:	89 10                	mov    DWORD PTR [eax],edx
c002575d:	90                   	nop
c002575e:	83 c4 0c             	add    esp,0xc
c0025761:	c3                   	ret    

c0025762 <APIC::disable()>:
c0025762:	90                   	nop
c0025763:	c3                   	ret    

c0025764 <APIC::close(int, int, void*)>:
c0025764:	55                   	push   ebp
c0025765:	89 e5                	mov    ebp,esp
c0025767:	83 ec 08             	sub    esp,0x8
c002576a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576d:	8b 00                	mov    eax,DWORD PTR [eax]
c002576f:	83 c0 3c             	add    eax,0x3c
c0025772:	8b 00                	mov    eax,DWORD PTR [eax]
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577a:	ff d0                	call   eax
c002577c:	83 c4 10             	add    esp,0x10
c002577f:	b8 00 00 00 00       	mov    eax,0x0
c0025784:	c9                   	leave  
c0025785:	c3                   	ret    

c0025786 <IOAPIC::close(int, int, void*)>:
c0025786:	b8 00 00 00 00       	mov    eax,0x0
c002578b:	c3                   	ret    

c002578c <APIC::io_wait()>:
c002578c:	eb 00                	jmp    c002578e <APIC::io_wait()+0x2>
c002578e:	eb 00                	jmp    c0025790 <APIC::io_wait()+0x4>
c0025790:	90                   	nop
c0025791:	c3                   	ret    

c0025792 <APIC::getBase()>:
c0025792:	55                   	push   ebp
c0025793:	89 e5                	mov    ebp,esp
c0025795:	83 ec 18             	sub    esp,0x18
c0025798:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c002579d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257a3:	83 e0 08             	and    eax,0x8
c00257a6:	84 c0                	test   al,al
c00257a8:	75 07                	jne    c00257b1 <APIC::getBase()+0x1f>
c00257aa:	b8 00 00 00 00       	mov    eax,0x0
c00257af:	eb 21                	jmp    c00257d2 <APIC::getBase()+0x40>
c00257b1:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00257b6:	83 ec 08             	sub    esp,0x8
c00257b9:	6a 1b                	push   0x1b
c00257bb:	50                   	push   eax
c00257bc:	e8 27 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257c1:	83 c4 10             	add    esp,0x10
c00257c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257d2:	c9                   	leave  
c00257d3:	c3                   	ret    

c00257d4 <APIC::eoi(unsigned char)>:
c00257d4:	55                   	push   ebp
c00257d5:	89 e5                	mov    ebp,esp
c00257d7:	83 ec 28             	sub    esp,0x28
c00257da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257e0:	83 ec 0c             	sub    esp,0xc
c00257e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e6:	e8 a7 ff ff ff       	call   c0025792 <APIC::getBase()>
c00257eb:	83 c4 10             	add    esp,0x10
c00257ee:	05 b0 00 00 00       	add    eax,0xb0
c00257f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257f9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257ff:	90                   	nop
c0025800:	c9                   	leave  
c0025801:	c3                   	ret    

c0025802 <APIC::open(int, int, void*)>:
c0025802:	55                   	push   ebp
c0025803:	89 e5                	mov    ebp,esp
c0025805:	57                   	push   edi
c0025806:	56                   	push   esi
c0025807:	53                   	push   ebx
c0025808:	83 ec 2c             	sub    esp,0x2c
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025811:	e8 7c ff ff ff       	call   c0025792 <APIC::getBase()>
c0025816:	83 c4 10             	add    esp,0x10
c0025819:	89 c2                	mov    edx,eax
c002581b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002581e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025824:	0f b6 f8             	movzx  edi,al
c0025827:	89 d0                	mov    eax,edx
c0025829:	ba 00 00 00 00       	mov    edx,0x0
c002582e:	89 c1                	mov    ecx,eax
c0025830:	80 e5 ff             	and    ch,0xff
c0025833:	89 cb                	mov    ebx,ecx
c0025835:	0f b6 f2             	movzx  esi,dl
c0025838:	89 d8                	mov    eax,ebx
c002583a:	89 f2                	mov    edx,esi
c002583c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025842:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025846:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002584a:	83 e0 00             	and    eax,0x0
c002584d:	09 d0                	or     eax,edx
c002584f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025856:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002585c:	8d 50 01             	lea    edx,[eax+0x1]
c002585f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025862:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025868:	0f b6 d0             	movzx  edx,al
c002586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586e:	83 c2 08             	add    edx,0x8
c0025871:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025875:	0f b6 c9             	movzx  ecx,cl
c0025878:	81 c9 00 00 01 00    	or     ecx,0x10000
c002587e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025882:	83 ec 0c             	sub    esp,0xc
c0025885:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025888:	e8 05 ff ff ff       	call   c0025792 <APIC::getBase()>
c002588d:	83 c4 10             	add    esp,0x10
c0025890:	05 f0 00 00 00       	add    eax,0xf0
c0025895:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025898:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002589b:	8b 00                	mov    eax,DWORD PTR [eax]
c002589d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258a0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258a7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258b1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258b4:	89 10                	mov    DWORD PTR [eax],edx
c00258b6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258bd:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00258c2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258c5:	7d 7c                	jge    c0025943 <APIC::open(int, int, void*)+0x141>
c00258c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258ca:	8b 04 85 00 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf100]
c00258d1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258d7:	8b 04 85 00 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf100]
c00258de:	c1 e8 08             	shr    eax,0x8
c00258e1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258e8:	8b 04 85 00 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf100]
c00258ef:	c1 e8 18             	shr    eax,0x18
c00258f2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258f5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258f9:	75 40                	jne    c002593b <APIC::open(int, int, void*)+0x139>
c00258fb:	83 ec 0c             	sub    esp,0xc
c00258fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025901:	e8 8c fe ff ff       	call   c0025792 <APIC::getBase()>
c0025906:	83 c4 10             	add    esp,0x10
c0025909:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002590d:	75 07                	jne    c0025916 <APIC::open(int, int, void*)+0x114>
c002590f:	ba 60 03 00 00       	mov    edx,0x360
c0025914:	eb 05                	jmp    c002591b <APIC::open(int, int, void*)+0x119>
c0025916:	ba 50 03 00 00       	mov    edx,0x350
c002591b:	01 d0                	add    eax,edx
c002591d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025920:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025923:	8b 00                	mov    eax,DWORD PTR [eax]
c0025925:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025928:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002592f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025933:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025936:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025939:	89 10                	mov    DWORD PTR [eax],edx
c002593b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002593e:	e9 7a ff ff ff       	jmp    c00258bd <APIC::open(int, int, void*)+0xbb>
c0025943:	b8 00 00 00 00       	mov    eax,0x0
c0025948:	8d 65 f4             	lea    esp,[ebp-0xc]
c002594b:	5b                   	pop    ebx
c002594c:	5e                   	pop    esi
c002594d:	5f                   	pop    edi
c002594e:	5d                   	pop    ebp
c002594f:	c3                   	ret    

c0025950 <IOAPIC::IOAPIC()>:
c0025950:	83 ec 0c             	sub    esp,0xc
c0025953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025957:	83 ec 08             	sub    esp,0x8
c002595a:	68 d8 d2 02 c0       	push   0xc002d2d8
c002595f:	50                   	push   eax
c0025960:	e8 0b ec fe ff       	call   c0014570 <Device::Device(char const*)>
c0025965:	83 c4 10             	add    esp,0x10
c0025968:	ba 00 d4 02 c0       	mov    edx,0xc002d400
c002596d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025971:	89 10                	mov    DWORD PTR [eax],edx
c0025973:	90                   	nop
c0025974:	83 c4 0c             	add    esp,0xc
c0025977:	c3                   	ret    

c0025978 <APIC::APIC()>:
c0025978:	53                   	push   ebx
c0025979:	83 ec 18             	sub    esp,0x18
c002597c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025980:	83 ec 08             	sub    esp,0x8
c0025983:	68 e0 d2 02 c0       	push   0xc002d2e0
c0025988:	50                   	push   eax
c0025989:	e8 4e f3 fe ff       	call   c0014cdc <InterruptController::InterruptController(char const*)>
c002598e:	83 c4 10             	add    esp,0x10
c0025991:	ba b8 d3 02 c0       	mov    edx,0xc002d3b8
c0025996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002599a:	89 10                	mov    DWORD PTR [eax],edx
c002599c:	a0 c0 29 03 c0       	mov    al,ds:0xc00329c0
c00259a1:	83 f0 01             	xor    eax,0x1
c00259a4:	84 c0                	test   al,al
c00259a6:	0f 84 a1 00 00 00    	je     c0025a4d <APIC::APIC()+0xd5>
c00259ac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259b1:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c00259b6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259ba:	0f 83 86 00 00 00    	jae    c0025a46 <APIC::APIC()+0xce>
c00259c0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259c8:	83 ec 0c             	sub    esp,0xc
c00259cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259cf:	e8 6c 9e fe ff       	call   c000f840 <malloc>
c00259d4:	83 c4 10             	add    esp,0x10
c00259d7:	89 c3                	mov    ebx,eax
c00259d9:	83 ec 0c             	sub    esp,0xc
c00259dc:	53                   	push   ebx
c00259dd:	e8 6e ff ff ff       	call   c0025950 <IOAPIC::IOAPIC()>
c00259e2:	83 c4 10             	add    esp,0x10
c00259e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259e9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259f2:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c00259f9:	a1 80 29 03 c0       	mov    eax,ds:0xc0032980
c00259fe:	40                   	inc    eax
c00259ff:	a3 80 29 03 c0       	mov    ds:0xc0032980,eax
c0025a04:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0025a09:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a0f:	83 ec 08             	sub    esp,0x8
c0025a12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a16:	50                   	push   eax
c0025a17:	e8 64 e9 fe ff       	call   c0014380 <Device::addChild(Device*)>
c0025a1c:	83 c4 10             	add    esp,0x10
c0025a1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a25:	83 c0 08             	add    eax,0x8
c0025a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a2a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a2f:	6a 00                	push   0x0
c0025a31:	6a 00                	push   0x0
c0025a33:	52                   	push   edx
c0025a34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a38:	ff d0                	call   eax
c0025a3a:	83 c4 10             	add    esp,0x10
c0025a3d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a41:	e9 6b ff ff ff       	jmp    c00259b1 <APIC::APIC()+0x39>
c0025a46:	c6 05 c0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329c0,0x1
c0025a4d:	90                   	nop
c0025a4e:	83 c4 18             	add    esp,0x18
c0025a51:	5b                   	pop    ebx
c0025a52:	c3                   	ret    
c0025a53:	90                   	nop

c0025a54 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a54:	55                   	push   ebp
c0025a55:	89 e5                	mov    ebp,esp
c0025a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a60:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a63:	72 1d                	jb     c0025a82 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a68:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a71:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a77:	01 d0                	add    eax,edx
c0025a79:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a7c:	73 04                	jae    c0025a82 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a7e:	b0 01                	mov    al,0x1
c0025a80:	eb 02                	jmp    c0025a84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a82:	b0 00                	mov    al,0x0
c0025a84:	5d                   	pop    ebp
c0025a85:	c3                   	ret    

c0025a86 <IOAPIC::read(int)>:
c0025a86:	55                   	push   ebp
c0025a87:	89 e5                	mov    ebp,esp
c0025a89:	83 ec 10             	sub    esp,0x10
c0025a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a95:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a9b:	0f b6 d0             	movzx  edx,al
c0025a9e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa1:	89 10                	mov    DWORD PTR [eax],edx
c0025aa3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa6:	83 c0 10             	add    eax,0x10
c0025aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aab:	c9                   	leave  
c0025aac:	c3                   	ret    
c0025aad:	90                   	nop

c0025aae <IOAPIC::open(int, int, void*)>:
c0025aae:	55                   	push   ebp
c0025aaf:	89 e5                	mov    ebp,esp
c0025ab1:	57                   	push   edi
c0025ab2:	56                   	push   esi
c0025ab3:	53                   	push   ebx
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	83 ec 0c             	sub    esp,0xc
c0025aba:	68 0b d3 02 c0       	push   0xc002d30b
c0025abf:	e8 95 d4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0025ac4:	83 c4 10             	add    esp,0x10
c0025ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025acd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025adc:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c0025ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025af5:	8b 14 85 60 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefa0]
c0025afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b11:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b17:	0f b6 f8             	movzx  edi,al
c0025b1a:	89 d0                	mov    eax,edx
c0025b1c:	ba 00 00 00 00       	mov    edx,0x0
c0025b21:	89 c1                	mov    ecx,eax
c0025b23:	80 e5 ff             	and    ch,0xff
c0025b26:	89 cb                	mov    ebx,ecx
c0025b28:	0f b6 f2             	movzx  esi,dl
c0025b2b:	89 d8                	mov    eax,ebx
c0025b2d:	89 f2                	mov    edx,esi
c0025b2f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b32:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b35:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b39:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b3d:	83 e0 00             	and    eax,0x0
c0025b40:	09 d0                	or     eax,edx
c0025b42:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b49:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b4f:	8d 50 01             	lea    edx,[eax+0x1]
c0025b52:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b55:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b5b:	0f b6 d0             	movzx  edx,al
c0025b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b61:	83 c2 08             	add    edx,0x8
c0025b64:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b68:	0f b6 c9             	movzx  ecx,cl
c0025b6b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b71:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b75:	83 ec 08             	sub    esp,0x8
c0025b78:	6a 01                	push   0x1
c0025b7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b7d:	e8 04 ff ff ff       	call   c0025a86 <IOAPIC::read(int)>
c0025b82:	83 c4 10             	add    esp,0x10
c0025b85:	c1 f8 10             	sar    eax,0x10
c0025b88:	0f b6 c0             	movzx  eax,al
c0025b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0025b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b91:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b97:	b8 00 00 00 00       	mov    eax,0x0
c0025b9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b9f:	5b                   	pop    ebx
c0025ba0:	5e                   	pop    esi
c0025ba1:	5f                   	pop    edi
c0025ba2:	5d                   	pop    ebp
c0025ba3:	c3                   	ret    

c0025ba4 <IOAPIC::write(int, int)>:
c0025ba4:	55                   	push   ebp
c0025ba5:	89 e5                	mov    ebp,esp
c0025ba7:	83 ec 10             	sub    esp,0x10
c0025baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bb3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb9:	0f b6 d0             	movzx  edx,al
c0025bbc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bbf:	89 10                	mov    DWORD PTR [eax],edx
c0025bc1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bc4:	8d 50 10             	lea    edx,[eax+0x10]
c0025bc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bca:	89 02                	mov    DWORD PTR [edx],eax
c0025bcc:	90                   	nop
c0025bcd:	c9                   	leave  
c0025bce:	c3                   	ret    
c0025bcf:	90                   	nop

c0025bd0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bd0:	55                   	push   ebp
c0025bd1:	89 e5                	mov    ebp,esp
c0025bd3:	53                   	push   ebx
c0025bd4:	83 ec 2c             	sub    esp,0x2c
c0025bd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bda:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bdd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025be0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025be3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025be6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025be9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bf2:	88 d8                	mov    al,bl
c0025bf4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bf7:	88 c8                	mov    al,cl
c0025bf9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bfc:	88 d0                	mov    al,dl
c0025bfe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c05:	83 c0 08             	add    eax,0x8
c0025c08:	01 c0                	add    eax,eax
c0025c0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c0d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c11:	83 c0 08             	add    eax,0x8
c0025c14:	01 c0                	add    eax,eax
c0025c16:	40                   	inc    eax
c0025c17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c1d:	50                   	push   eax
c0025c1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c21:	e8 60 fe ff ff       	call   c0025a86 <IOAPIC::read(int)>
c0025c26:	83 c4 08             	add    esp,0x8
c0025c29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c2c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c33:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c36:	c1 e0 18             	shl    eax,0x18
c0025c39:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c3c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c42:	52                   	push   edx
c0025c43:	50                   	push   eax
c0025c44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c47:	e8 58 ff ff ff       	call   c0025ba4 <IOAPIC::write(int, int)>
c0025c4c:	83 c4 0c             	add    esp,0xc
c0025c4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c52:	50                   	push   eax
c0025c53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c56:	e8 2b fe ff ff       	call   c0025a86 <IOAPIC::read(int)>
c0025c5b:	83 c4 08             	add    esp,0x8
c0025c5e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c61:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c68:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c6f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c76:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c7a:	74 09                	je     c0025c85 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c7c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c83:	eb 07                	jmp    c0025c8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c85:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c8c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c90:	74 09                	je     c0025c9b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c92:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c99:	eb 07                	jmp    c0025ca2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c9b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ca2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025ca9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025cad:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025cb0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025cb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cb6:	52                   	push   edx
c0025cb7:	50                   	push   eax
c0025cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbb:	e8 e4 fe ff ff       	call   c0025ba4 <IOAPIC::write(int, int)>
c0025cc0:	83 c4 0c             	add    esp,0xc
c0025cc3:	90                   	nop
c0025cc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025cc7:	c9                   	leave  
c0025cc8:	c3                   	ret    
c0025cc9:	90                   	nop

c0025cca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cca:	55                   	push   ebp
c0025ccb:	89 e5                	mov    ebp,esp
c0025ccd:	57                   	push   edi
c0025cce:	56                   	push   esi
c0025ccf:	53                   	push   ebx
c0025cd0:	83 ec 2c             	sub    esp,0x2c
c0025cd3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cd6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cd9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cdd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025ce1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ce5:	74 5a                	je     c0025d41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ceb:	7f 44                	jg     c0025d31 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ced:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf0:	05 60 d8 02 c0       	add    eax,0xc002d860
c0025cf5:	8a 00                	mov    al,BYTE PTR [eax]
c0025cf7:	0f b6 c0             	movzx  eax,al
c0025cfa:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d00:	66 8b 84 00 80 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf080]
c0025d08:	0f b7 c0             	movzx  eax,ax
c0025d0b:	83 e0 02             	and    eax,0x2
c0025d0e:	85 c0                	test   eax,eax
c0025d10:	74 04                	je     c0025d16 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d12:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d19:	66 8b 84 00 80 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf080]
c0025d21:	0f b7 c0             	movzx  eax,ax
c0025d24:	83 e0 08             	and    eax,0x8
c0025d27:	85 c0                	test   eax,eax
c0025d29:	74 16                	je     c0025d41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d2b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d2f:	eb 10                	jmp    c0025d41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d31:	83 ec 0c             	sub    esp,0xc
c0025d34:	68 1c d3 02 c0       	push   0xc002d31c
c0025d39:	e8 bd 48 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025d3e:	83 c4 10             	add    esp,0x10
c0025d41:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d45:	a1 80 29 03 c0       	mov    eax,ds:0xc0032980
c0025d4a:	83 ec 08             	sub    esp,0x8
c0025d4d:	50                   	push   eax
c0025d4e:	68 54 d3 02 c0       	push   0xc002d354
c0025d53:	e8 01 d2 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0025d58:	83 c4 10             	add    esp,0x10
c0025d5b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d62:	a1 80 29 03 c0       	mov    eax,ds:0xc0032980
c0025d67:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d6a:	7d 67                	jge    c0025dd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d6c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d6f:	8b 04 85 a0 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd660]
c0025d76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d79:	83 ec 08             	sub    esp,0x8
c0025d7c:	52                   	push   edx
c0025d7d:	50                   	push   eax
c0025d7e:	e8 d1 fc ff ff       	call   c0025a54 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d83:	83 c4 10             	add    esp,0x10
c0025d86:	84 c0                	test   al,al
c0025d88:	74 44                	je     c0025dce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d8a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d8d:	8b 1c 85 a0 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd660]
c0025d94:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d98:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d9b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025da2:	83 c0 20             	add    eax,0x20
c0025da5:	0f b6 f0             	movzx  esi,al
c0025da8:	b8 00 00 00 00       	mov    eax,0x0
c0025dad:	99                   	cdq    
c0025dae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025db1:	0f b6 c9             	movzx  ecx,cl
c0025db4:	83 ec 04             	sub    esp,0x4
c0025db7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025dba:	57                   	push   edi
c0025dbb:	56                   	push   esi
c0025dbc:	52                   	push   edx
c0025dbd:	50                   	push   eax
c0025dbe:	51                   	push   ecx
c0025dbf:	53                   	push   ebx
c0025dc0:	e8 0b fe ff ff       	call   c0025bd0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dc5:	83 c4 20             	add    esp,0x20
c0025dc8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025dcc:	eb 05                	jmp    c0025dd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dce:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025dd1:	eb 8f                	jmp    c0025d62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dd3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dd6:	83 f0 01             	xor    eax,0x1
c0025dd9:	84 c0                	test   al,al
c0025ddb:	74 10                	je     c0025ded <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ddd:	83 ec 0c             	sub    esp,0xc
c0025de0:	68 6b d3 02 c0       	push   0xc002d36b
c0025de5:	e8 11 48 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025dea:	83 c4 10             	add    esp,0x10
c0025ded:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025df1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025df8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025dfc:	7f 65                	jg     c0025e63 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e04:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e0b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e0e:	01 ca                	add    edx,ecx
c0025e10:	83 c2 54             	add    edx,0x54
c0025e13:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e17:	85 c0                	test   eax,eax
c0025e19:	75 43                	jne    c0025e5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e2b:	01 ca                	add    edx,ecx
c0025e2d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e30:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e33:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e3d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e44:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e47:	01 ca                	add    edx,ecx
c0025e49:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e4f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e52:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e59:	83 e8 20             	sub    eax,0x20
c0025e5c:	eb 1a                	jmp    c0025e78 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e5e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e61:	eb 95                	jmp    c0025df8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e63:	83 ec 0c             	sub    esp,0xc
c0025e66:	68 78 d3 02 c0       	push   0xc002d378
c0025e6b:	e8 8b 47 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025e70:	83 c4 10             	add    esp,0x10
c0025e73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e78:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e7b:	5b                   	pop    ebx
c0025e7c:	5e                   	pop    esi
c0025e7d:	5f                   	pop    edi
c0025e7e:	5d                   	pop    ebp
c0025e7f:	c3                   	ret    

c0025e80 <PIC::disable()>:
c0025e80:	55                   	push   ebp
c0025e81:	89 e5                	mov    ebp,esp
c0025e83:	83 ec 10             	sub    esp,0x10
c0025e86:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e8c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e93:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e97:	ee                   	out    dx,al
c0025e98:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e9e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ea2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ea5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ea9:	ee                   	out    dx,al
c0025eaa:	90                   	nop
c0025eab:	c9                   	leave  
c0025eac:	c3                   	ret    
c0025ead:	90                   	nop

c0025eae <PIC::close(int, int, void*)>:
c0025eae:	55                   	push   ebp
c0025eaf:	89 e5                	mov    ebp,esp
c0025eb1:	83 ec 08             	sub    esp,0x8
c0025eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eb9:	83 c0 3c             	add    eax,0x3c
c0025ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ebe:	83 ec 0c             	sub    esp,0xc
c0025ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec4:	ff d0                	call   eax
c0025ec6:	83 c4 10             	add    esp,0x10
c0025ec9:	b8 00 00 00 00       	mov    eax,0x0
c0025ece:	c9                   	leave  
c0025ecf:	c3                   	ret    

c0025ed0 <PIC::PIC()>:
c0025ed0:	83 ec 0c             	sub    esp,0xc
c0025ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed7:	83 ec 08             	sub    esp,0x8
c0025eda:	68 24 d4 02 c0       	push   0xc002d424
c0025edf:	50                   	push   eax
c0025ee0:	e8 f7 ed fe ff       	call   c0014cdc <InterruptController::InterruptController(char const*)>
c0025ee5:	83 c4 10             	add    esp,0x10
c0025ee8:	ba 50 d4 02 c0       	mov    edx,0xc002d450
c0025eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef1:	89 10                	mov    DWORD PTR [eax],edx
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025efd:	0f b6 d0             	movzx  edx,al
c0025f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f04:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f15:	0f b6 d0             	movzx  edx,al
c0025f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025f2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f32:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f38:	0f b6 d0             	movzx  edx,al
c0025f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f43:	83 e1 3f             	and    ecx,0x3f
c0025f46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f54:	0f b6 d0             	movzx  edx,al
c0025f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f6c:	0f b6 d0             	movzx  edx,al
c0025f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f82:	8d 50 01             	lea    edx,[eax+0x1]
c0025f85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f89:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f8f:	0f b6 d0             	movzx  edx,al
c0025f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f96:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f9a:	83 e1 3f             	and    ecx,0x3f
c0025f9d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fa1:	90                   	nop
c0025fa2:	83 c4 0c             	add    esp,0xc
c0025fa5:	c3                   	ret    

c0025fa6 <PIC::ioWait()>:
c0025fa6:	eb 00                	jmp    c0025fa8 <PIC::ioWait()+0x2>
c0025fa8:	eb 00                	jmp    c0025faa <PIC::ioWait()+0x4>
c0025faa:	90                   	nop
c0025fab:	c3                   	ret    

c0025fac <PIC::getIRQReg(int)>:
c0025fac:	55                   	push   ebp
c0025fad:	89 e5                	mov    ebp,esp
c0025faf:	83 ec 10             	sub    esp,0x10
c0025fb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb5:	0f b6 c0             	movzx  eax,al
c0025fb8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fbe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fc1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fc4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fc8:	ee                   	out    dx,al
c0025fc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fcc:	0f b6 c0             	movzx  eax,al
c0025fcf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fd5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fd8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fdb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fdf:	ee                   	out    dx,al
c0025fe0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fe6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fea:	89 c2                	mov    edx,eax
c0025fec:	ec                   	in     al,dx
c0025fed:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ff0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ff3:	0f b6 c0             	movzx  eax,al
c0025ff6:	c1 e0 08             	shl    eax,0x8
c0025ff9:	89 c1                	mov    ecx,eax
c0025ffb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026001:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026005:	89 c2                	mov    edx,eax
c0026007:	ec                   	in     al,dx
c0026008:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002600b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002600e:	0f b6 c0             	movzx  eax,al
c0026011:	09 c8                	or     eax,ecx
c0026013:	c9                   	leave  
c0026014:	c3                   	ret    
c0026015:	90                   	nop

c0026016 <PIC::eoi(unsigned char)>:
c0026016:	55                   	push   ebp
c0026017:	89 e5                	mov    ebp,esp
c0026019:	83 ec 14             	sub    esp,0x14
c002601c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002601f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026022:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026026:	75 1e                	jne    c0026046 <PIC::eoi(unsigned char)+0x30>
c0026028:	6a 0b                	push   0xb
c002602a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602d:	e8 7a ff ff ff       	call   c0025fac <PIC::getIRQReg(int)>
c0026032:	83 c4 08             	add    esp,0x8
c0026035:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026039:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002603d:	25 80 00 00 00       	and    eax,0x80
c0026042:	85 c0                	test   eax,eax
c0026044:	74 5f                	je     c00260a5 <PIC::eoi(unsigned char)+0x8f>
c0026046:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002604a:	75 2d                	jne    c0026079 <PIC::eoi(unsigned char)+0x63>
c002604c:	6a 0b                	push   0xb
c002604e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026051:	e8 56 ff ff ff       	call   c0025fac <PIC::getIRQReg(int)>
c0026056:	83 c4 08             	add    esp,0x8
c0026059:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002605d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026060:	66 85 c0             	test   ax,ax
c0026063:	78 14                	js     c0026079 <PIC::eoi(unsigned char)+0x63>
c0026065:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002606b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002606f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026072:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026076:	ee                   	out    dx,al
c0026077:	eb 2d                	jmp    c00260a6 <PIC::eoi(unsigned char)+0x90>
c0026079:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002607d:	76 12                	jbe    c0026091 <PIC::eoi(unsigned char)+0x7b>
c002607f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026085:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026089:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002608c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026090:	ee                   	out    dx,al
c0026091:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026097:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002609b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002609e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260a2:	ee                   	out    dx,al
c00260a3:	eb 01                	jmp    c00260a6 <PIC::eoi(unsigned char)+0x90>
c00260a5:	90                   	nop
c00260a6:	c9                   	leave  
c00260a7:	c3                   	ret    

c00260a8 <PIC::remap()>:
c00260a8:	55                   	push   ebp
c00260a9:	89 e5                	mov    ebp,esp
c00260ab:	83 ec 48             	sub    esp,0x48
c00260ae:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260b5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260bc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260c2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260c5:	89 c2                	mov    edx,eax
c00260c7:	ec                   	in     al,dx
c00260c8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260cb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260ce:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260d1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260d7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260da:	89 c2                	mov    edx,eax
c00260dc:	ec                   	in     al,dx
c00260dd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260e0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260e3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260e6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260ec:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260f0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260f3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260f6:	ee                   	out    dx,al
c00260f7:	83 ec 0c             	sub    esp,0xc
c00260fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fd:	e8 a4 fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026102:	83 c4 10             	add    esp,0x10
c0026105:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002610b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002610f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026112:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026115:	ee                   	out    dx,al
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611c:	e8 85 fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026121:	83 c4 10             	add    esp,0x10
c0026124:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026127:	0f b6 c0             	movzx  eax,al
c002612a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026130:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026133:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026136:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026139:	ee                   	out    dx,al
c002613a:	83 ec 0c             	sub    esp,0xc
c002613d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026140:	e8 61 fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026145:	83 c4 10             	add    esp,0x10
c0026148:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002614b:	0f b6 c0             	movzx  eax,al
c002614e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026154:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026157:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002615a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002615d:	ee                   	out    dx,al
c002615e:	83 ec 0c             	sub    esp,0xc
c0026161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026164:	e8 3d fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026169:	83 c4 10             	add    esp,0x10
c002616c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026172:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026176:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026179:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002617c:	ee                   	out    dx,al
c002617d:	83 ec 0c             	sub    esp,0xc
c0026180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026183:	e8 1e fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026188:	83 c4 10             	add    esp,0x10
c002618b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026191:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026195:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026198:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002619b:	ee                   	out    dx,al
c002619c:	83 ec 0c             	sub    esp,0xc
c002619f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a2:	e8 ff fd ff ff       	call   c0025fa6 <PIC::ioWait()>
c00261a7:	83 c4 10             	add    esp,0x10
c00261aa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261b0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261b4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261ba:	ee                   	out    dx,al
c00261bb:	83 ec 0c             	sub    esp,0xc
c00261be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c1:	e8 e0 fd ff ff       	call   c0025fa6 <PIC::ioWait()>
c00261c6:	83 c4 10             	add    esp,0x10
c00261c9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261cf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261d3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261d6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261d9:	ee                   	out    dx,al
c00261da:	83 ec 0c             	sub    esp,0xc
c00261dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e0:	e8 c1 fd ff ff       	call   c0025fa6 <PIC::ioWait()>
c00261e5:	83 c4 10             	add    esp,0x10
c00261e8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261ec:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261f2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261f5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261f8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261fb:	ee                   	out    dx,al
c00261fc:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026200:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026206:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026209:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002620c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002620f:	ee                   	out    dx,al
c0026210:	90                   	nop
c0026211:	c9                   	leave  
c0026212:	c3                   	ret    
c0026213:	90                   	nop

c0026214 <PIC::open(int, int, void*)>:
c0026214:	55                   	push   ebp
c0026215:	89 e5                	mov    ebp,esp
c0026217:	83 ec 18             	sub    esp,0x18
c002621a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026220:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026224:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026227:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002622b:	ee                   	out    dx,al
c002622c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026232:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026236:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026239:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002623d:	ee                   	out    dx,al
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026244:	e8 5f fe ff ff       	call   c00260a8 <PIC::remap()>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	b8 00 00 00 00       	mov    eax,0x0
c0026251:	c9                   	leave  
c0026252:	c3                   	ret    
c0026253:	90                   	nop

c0026254 <APICTimer::close(int, int, void*)>:
c0026254:	b8 00 00 00 00       	mov    eax,0x0
c0026259:	c3                   	ret    

c002625a <apicTimerHandler(regs*, void*)>:
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026261:	8b 00                	mov    eax,DWORD PTR [eax]
c0026263:	99                   	cdq    
c0026264:	52                   	push   edx
c0026265:	50                   	push   eax
c0026266:	6a 00                	push   0x0
c0026268:	68 00 ca 9a 3b       	push   0x3b9aca00
c002626d:	e8 8a 07 00 00       	call   c00269fc <__udivdi3>
c0026272:	83 c4 10             	add    esp,0x10
c0026275:	83 ec 08             	sub    esp,0x8
c0026278:	52                   	push   edx
c0026279:	50                   	push   eax
c002627a:	e8 a8 0a ff ff       	call   c0016d27 <timerHandler(unsigned long long)>
c002627f:	83 c4 10             	add    esp,0x10
c0026282:	90                   	nop
c0026283:	83 c4 0c             	add    esp,0xc
c0026286:	c3                   	ret    
c0026287:	90                   	nop

c0026288 <APICTimer::write(int)>:
c0026288:	53                   	push   ebx
c0026289:	83 ec 28             	sub    esp,0x28
c002628c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026290:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026294:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002629a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c002629f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262a5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262ab:	83 ec 0c             	sub    esp,0xc
c00262ae:	50                   	push   eax
c00262af:	e8 de f4 ff ff       	call   c0025792 <APIC::getBase()>
c00262b4:	83 c4 10             	add    esp,0x10
c00262b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262bb:	a1 90 ec 02 c0       	mov    eax,ds:0xc002ec90
c00262c0:	8b 15 94 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec94
c00262c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d2:	05 e0 03 00 00       	add    eax,0x3e0
c00262d7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e1:	05 80 03 00 00       	add    eax,0x380
c00262e6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262ec:	fb                   	sti    
c00262ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262f5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262fa:	83 d2 00             	adc    edx,0x0
c00262fd:	89 c1                	mov    ecx,eax
c00262ff:	89 d3                	mov    ebx,edx
c0026301:	a1 90 ec 02 c0       	mov    eax,ds:0xc002ec90
c0026306:	8b 15 94 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec94
c002630c:	39 c8                	cmp    eax,ecx
c002630e:	89 d0                	mov    eax,edx
c0026310:	19 d8                	sbb    eax,ebx
c0026312:	73 02                	jae    c0026316 <APICTimer::write(int)+0x8e>
c0026314:	eb d7                	jmp    c00262ed <APICTimer::write(int)+0x65>
c0026316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631a:	05 20 03 00 00       	add    eax,0x320
c002631f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026325:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026329:	05 90 03 00 00       	add    eax,0x390
c002632e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026330:	f7 d0                	not    eax
c0026332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026336:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002633a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002633e:	ba 00 00 00 00       	mov    edx,0x0
c0026343:	f7 f3                	div    ebx
c0026345:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002634d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026353:	0d 00 00 02 00       	or     eax,0x20000
c0026358:	89 c2                	mov    edx,eax
c002635a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002635e:	05 20 03 00 00       	add    eax,0x320
c0026363:	89 10                	mov    DWORD PTR [eax],edx
c0026365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026369:	05 e0 03 00 00       	add    eax,0x3e0
c002636e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026378:	05 80 03 00 00       	add    eax,0x380
c002637d:	89 c2                	mov    edx,eax
c002637f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026383:	89 02                	mov    DWORD PTR [edx],eax
c0026385:	90                   	nop
c0026386:	83 c4 28             	add    esp,0x28
c0026389:	5b                   	pop    ebx
c002638a:	c3                   	ret    
c002638b:	90                   	nop

c002638c <APICTimer::open(int, int, void*)>:
c002638c:	57                   	push   edi
c002638d:	56                   	push   esi
c002638e:	53                   	push   ebx
c002638f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026393:	8b 00                	mov    eax,DWORD PTR [eax]
c0026395:	83 c0 24             	add    eax,0x24
c0026398:	8b 00                	mov    eax,DWORD PTR [eax]
c002639a:	83 ec 08             	sub    esp,0x8
c002639d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a5:	ff d0                	call   eax
c00263a7:	83 c4 10             	add    esp,0x10
c00263aa:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00263af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263b5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263bb:	83 ec 0c             	sub    esp,0xc
c00263be:	50                   	push   eax
c00263bf:	e8 ce f3 ff ff       	call   c0025792 <APIC::getBase()>
c00263c4:	83 c4 10             	add    esp,0x10
c00263c7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263d7:	0f b6 f8             	movzx  edi,al
c00263da:	89 d0                	mov    eax,edx
c00263dc:	ba 00 00 00 00       	mov    edx,0x0
c00263e1:	89 c1                	mov    ecx,eax
c00263e3:	80 e5 ff             	and    ch,0xff
c00263e6:	89 cb                	mov    ebx,ecx
c00263e8:	0f b6 f2             	movzx  esi,dl
c00263eb:	89 d8                	mov    eax,ebx
c00263ed:	89 f2                	mov    edx,esi
c00263ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263f3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263f6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263fa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263fe:	83 e0 00             	and    eax,0x0
c0026401:	09 d0                	or     eax,edx
c0026403:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026411:	8d 50 01             	lea    edx,[eax+0x1]
c0026414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026418:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002641e:	0f b6 d0             	movzx  edx,al
c0026421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026425:	83 c2 08             	add    edx,0x8
c0026428:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002642c:	0f b6 c9             	movzx  ecx,cl
c002642f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026435:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026441:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002644f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026455:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026459:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002645f:	83 ec 0c             	sub    esp,0xc
c0026462:	51                   	push   ecx
c0026463:	6a 01                	push   0x1
c0026465:	68 5a 62 02 c0       	push   0xc002625a
c002646a:	52                   	push   edx
c002646b:	50                   	push   eax
c002646c:	e8 93 de fe ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026471:	83 c4 20             	add    esp,0x20
c0026474:	89 c2                	mov    edx,eax
c0026476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026480:	b8 00 00 00 00       	mov    eax,0x0
c0026485:	5b                   	pop    ebx
c0026486:	5e                   	pop    esi
c0026487:	5f                   	pop    edi
c0026488:	c3                   	ret    
c0026489:	90                   	nop

c002648a <APICTimer::APICTimer()>:
c002648a:	83 ec 0c             	sub    esp,0xc
c002648d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026491:	83 ec 08             	sub    esp,0x8
c0026494:	68 90 d4 02 c0       	push   0xc002d490
c0026499:	50                   	push   eax
c002649a:	e8 f9 07 ff ff       	call   c0016c98 <Timer::Timer(char const*)>
c002649f:	83 c4 10             	add    esp,0x10
c00264a2:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c00264a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ab:	89 10                	mov    DWORD PTR [eax],edx
c00264ad:	90                   	nop
c00264ae:	83 c4 0c             	add    esp,0xc
c00264b1:	c3                   	ret    

c00264b2 <PIT::write(int)>:
c00264b2:	83 ec 10             	sub    esp,0x10
c00264b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264c7:	a3 c4 29 03 c0       	mov    ds:0xc00329c4,eax
c00264cc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264d1:	99                   	cdq    
c00264d2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264da:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264e1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264e6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264ea:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264ef:	ee                   	out    dx,al
c00264f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264f4:	0f b6 c0             	movzx  eax,al
c00264f7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264fe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026502:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026506:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002650b:	ee                   	out    dx,al
c002650c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026510:	c1 f8 08             	sar    eax,0x8
c0026513:	0f b6 c0             	movzx  eax,al
c0026516:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002651d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026521:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026525:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002652a:	ee                   	out    dx,al
c002652b:	90                   	nop
c002652c:	83 c4 10             	add    esp,0x10
c002652f:	c3                   	ret    

c0026530 <pitHandler(regs*, void*)>:
c0026530:	83 ec 0c             	sub    esp,0xc
c0026533:	a1 c4 29 03 c0       	mov    eax,ds:0xc00329c4
c0026538:	99                   	cdq    
c0026539:	52                   	push   edx
c002653a:	50                   	push   eax
c002653b:	6a 00                	push   0x0
c002653d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026542:	e8 b5 04 00 00       	call   c00269fc <__udivdi3>
c0026547:	83 c4 10             	add    esp,0x10
c002654a:	83 ec 08             	sub    esp,0x8
c002654d:	52                   	push   edx
c002654e:	50                   	push   eax
c002654f:	e8 d3 07 ff ff       	call   c0016d27 <timerHandler(unsigned long long)>
c0026554:	83 c4 10             	add    esp,0x10
c0026557:	90                   	nop
c0026558:	83 c4 0c             	add    esp,0xc
c002655b:	c3                   	ret    

c002655c <PIT::open(int, int, void*)>:
c002655c:	83 ec 0c             	sub    esp,0xc
c002655f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026563:	8b 00                	mov    eax,DWORD PTR [eax]
c0026565:	83 c0 24             	add    eax,0x24
c0026568:	8b 00                	mov    eax,DWORD PTR [eax]
c002656a:	83 ec 08             	sub    esp,0x8
c002656d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026575:	ff d0                	call   eax
c0026577:	83 c4 10             	add    esp,0x10
c002657a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657e:	83 ec 0c             	sub    esp,0xc
c0026581:	6a 00                	push   0x0
c0026583:	6a 01                	push   0x1
c0026585:	68 30 65 02 c0       	push   0xc0026530
c002658a:	6a 00                	push   0x0
c002658c:	50                   	push   eax
c002658d:	e8 72 dd fe ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026592:	83 c4 20             	add    esp,0x20
c0026595:	89 c2                	mov    edx,eax
c0026597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265a1:	b8 00 00 00 00       	mov    eax,0x0
c00265a6:	83 c4 0c             	add    esp,0xc
c00265a9:	c3                   	ret    

c00265aa <PIT::close(int, int, void*)>:
c00265aa:	83 ec 0c             	sub    esp,0xc
c00265ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bf:	6a 01                	push   0x1
c00265c1:	68 30 65 02 c0       	push   0xc0026530
c00265c6:	6a 00                	push   0x0
c00265c8:	50                   	push   eax
c00265c9:	e8 74 dd fe ff       	call   c0014342 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265ce:	83 c4 10             	add    esp,0x10
c00265d1:	b8 00 00 00 00       	mov    eax,0x0
c00265d6:	83 c4 0c             	add    esp,0xc
c00265d9:	c3                   	ret    

c00265da <PIT::PIT()>:
c00265da:	83 ec 0c             	sub    esp,0xc
c00265dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e1:	83 ec 08             	sub    esp,0x8
c00265e4:	68 cc d4 02 c0       	push   0xc002d4cc
c00265e9:	50                   	push   eax
c00265ea:	e8 a9 06 ff ff       	call   c0016c98 <Timer::Timer(char const*)>
c00265ef:	83 c4 10             	add    esp,0x10
c00265f2:	ba f4 d4 02 c0       	mov    edx,0xc002d4f4
c00265f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265fb:	89 10                	mov    DWORD PTR [eax],edx
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026607:	0f b6 d0             	movzx  edx,al
c002660a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026619:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002661f:	0f b6 d0             	movzx  edx,al
c0026622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026626:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002662b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026635:	8d 50 01             	lea    edx,[eax+0x1]
c0026638:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002663c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026642:	0f b6 d0             	movzx  edx,al
c0026645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026649:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002664d:	83 e1 3f             	and    ecx,0x3f
c0026650:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026654:	90                   	nop
c0026655:	83 c4 0c             	add    esp,0xc
c0026658:	c3                   	ret    
c0026659:	66 90                	xchg   ax,ax
c002665b:	66 90                	xchg   ax,ax
c002665d:	66 90                	xchg   ax,ax
c002665f:	90                   	nop

c0026660 <avxDetect>:
c0026660:	b8 00 00 00 00       	mov    eax,0x0
c0026665:	c3                   	ret    

c0026666 <avxSave>:
c0026666:	c3                   	ret    

c0026667 <avxLoad>:
c0026667:	c3                   	ret    

c0026668 <avxInit>:
c0026668:	c3                   	ret    

c0026669 <avxClose>:
c0026669:	c3                   	ret    

c002666a <wouldSheSayYes>:
c002666a:	c3                   	ret    
c002666b:	49                   	dec    ecx
c002666c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026670:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026674:	75 20                	jne    c0026696 <sseDetect.noSSE+0x1>
c0026676:	4e                   	dec    esi
c0026677:	79 61                	jns    c00266da <x87Detect+0x14>
c0026679:	68 2e 2e 2e 00       	push   0x2e2e2e
c002667e:	66 90                	xchg   ax,ax

c0026680 <absolutelyNoChanceInHell>:
c0026680:	b8 01 00 00 00       	mov    eax,0x1
c0026685:	0f a2                	cpuid  
c0026687:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002668d:	74 06                	je     c0026695 <sseDetect.noSSE>
c002668f:	b8 01 00 00 00       	mov    eax,0x1
c0026694:	c3                   	ret    

c0026695 <sseDetect.noSSE>:
c0026695:	31 c0                	xor    eax,eax
c0026697:	c3                   	ret    

c0026698 <sseSave>:
c0026698:	0f ae 44 24 08       	fxsave [esp+0x8]
c002669d:	c3                   	ret    

c002669e <sseLoad>:
c002669e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266a3:	c3                   	ret    

c00266a4 <sseInit>:
c00266a4:	e8 43 00 00 00       	call   c00266ec <x87Init>
c00266a9:	0f 20 e0             	mov    eax,cr4
c00266ac:	66 0d 00 06          	or     ax,0x600
c00266b0:	0f 22 e0             	mov    cr4,eax
c00266b3:	c3                   	ret    

c00266b4 <sseClose>:
c00266b4:	c3                   	ret    
c00266b5:	66 90                	xchg   ax,ax
c00266b7:	66 90                	xchg   ax,ax
c00266b9:	66 90                	xchg   ax,ax
c00266bb:	66 90                	xchg   ax,ax
c00266bd:	66 90                	xchg   ax,ax
c00266bf:	90                   	nop

c00266c0 <value_37F>:
c00266c0:	7f 03                	jg     c00266c5 <value_37A+0x1>

c00266c2 <value_37E>:
c00266c2:	7e 03                	jle    c00266c7 <x87Detect+0x1>

c00266c4 <value_37A>:
c00266c4:	7a 03                	jp     c00266c9 <x87Detect+0x3>

c00266c6 <x87Detect>:
c00266c6:	b8 01 00 00 00       	mov    eax,0x1
c00266cb:	0f a2                	cpuid  
c00266cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00266d3:	74 06                	je     c00266db <x87Detect.nox87>
c00266d5:	b8 01 00 00 00       	mov    eax,0x1
c00266da:	c3                   	ret    

c00266db <x87Detect.nox87>:
c00266db:	b8 00 00 00 00       	mov    eax,0x0
c00266e0:	c3                   	ret    

c00266e1 <x87Save>:
c00266e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266e6:	c3                   	ret    

c00266e7 <x87Load>:
c00266e7:	dd 64 24 08          	frstor [esp+0x8]
c00266eb:	c3                   	ret    

c00266ec <x87Init>:
c00266ec:	9b db e3             	finit  
c00266ef:	0f 20 c0             	mov    eax,cr0
c00266f2:	66 25 fb ff          	and    ax,0xfffb
c00266f6:	66 0d 22 00          	or     ax,0x22
c00266fa:	0f 22 c0             	mov    cr0,eax
c00266fd:	0f 06                	clts   
c00266ff:	d9 2d c4 66 02 c0    	fldcw  WORD PTR ds:0xc00266c4
c0026705:	c3                   	ret    

c0026706 <x87Close>:
c0026706:	c3                   	ret    
c0026707:	90                   	nop

c0026708 <__do_global_ctors_aux>:
c0026708:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c002670d:	83 f8 ff             	cmp    eax,0xffffffff
c0026710:	74 1a                	je     c002672c <__do_global_ctors_aux+0x24>
c0026712:	55                   	push   ebp
c0026713:	89 e5                	mov    ebp,esp
c0026715:	53                   	push   ebx
c0026716:	52                   	push   edx
c0026717:	bb 4c 92 02 c0       	mov    ebx,0xc002924c
c002671c:	ff d0                	call   eax
c002671e:	83 eb 04             	sub    ebx,0x4
c0026721:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026723:	83 f8 ff             	cmp    eax,0xffffffff
c0026726:	75 f4                	jne    c002671c <__do_global_ctors_aux+0x14>
c0026728:	58                   	pop    eax
c0026729:	5b                   	pop    ebx
c002672a:	5d                   	pop    ebp
c002672b:	c3                   	ret    
c002672c:	c3                   	ret    
c002672d:	66 90                	xchg   ax,ax
c002672f:	90                   	nop

c0026730 <__divdi3>:
c0026730:	55                   	push   ebp
c0026731:	57                   	push   edi
c0026732:	56                   	push   esi
c0026733:	53                   	push   ebx
c0026734:	83 ec 1c             	sub    esp,0x1c
c0026737:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002673b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002673f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026742:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002674a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002674e:	85 db                	test   ebx,ebx
c0026750:	0f 88 8e 00 00 00    	js     c00267e4 <__divdi3+0xb4>
c0026756:	89 dd                	mov    ebp,ebx
c0026758:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026760:	89 d3                	mov    ebx,edx
c0026762:	85 d2                	test   edx,edx
c0026764:	79 0d                	jns    c0026773 <__divdi3+0x43>
c0026766:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002676a:	f7 d8                	neg    eax
c002676c:	83 d2 00             	adc    edx,0x0
c002676f:	f7 da                	neg    edx
c0026771:	89 d3                	mov    ebx,edx
c0026773:	89 c7                	mov    edi,eax
c0026775:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026778:	85 db                	test   ebx,ebx
c002677a:	75 48                	jne    c00267c4 <__divdi3+0x94>
c002677c:	39 ef                	cmp    edi,ebp
c002677e:	76 24                	jbe    c00267a4 <__divdi3+0x74>
c0026780:	89 ea                	mov    edx,ebp
c0026782:	f7 f7                	div    edi
c0026784:	89 c1                	mov    ecx,eax
c0026786:	31 f6                	xor    esi,esi
c0026788:	89 c8                	mov    eax,ecx
c002678a:	89 f2                	mov    edx,esi
c002678c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026790:	85 c9                	test   ecx,ecx
c0026792:	74 07                	je     c002679b <__divdi3+0x6b>
c0026794:	f7 d8                	neg    eax
c0026796:	83 d2 00             	adc    edx,0x0
c0026799:	f7 da                	neg    edx
c002679b:	83 c4 1c             	add    esp,0x1c
c002679e:	5b                   	pop    ebx
c002679f:	5e                   	pop    esi
c00267a0:	5f                   	pop    edi
c00267a1:	5d                   	pop    ebp
c00267a2:	c3                   	ret    
c00267a3:	90                   	nop
c00267a4:	85 ff                	test   edi,edi
c00267a6:	75 0b                	jne    c00267b3 <__divdi3+0x83>
c00267a8:	b8 01 00 00 00       	mov    eax,0x1
c00267ad:	31 d2                	xor    edx,edx
c00267af:	f7 f3                	div    ebx
c00267b1:	89 c7                	mov    edi,eax
c00267b3:	31 d2                	xor    edx,edx
c00267b5:	89 e8                	mov    eax,ebp
c00267b7:	f7 f7                	div    edi
c00267b9:	89 c6                	mov    esi,eax
c00267bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267be:	f7 f7                	div    edi
c00267c0:	89 c1                	mov    ecx,eax
c00267c2:	eb c4                	jmp    c0026788 <__divdi3+0x58>
c00267c4:	39 eb                	cmp    ebx,ebp
c00267c6:	77 3c                	ja     c0026804 <__divdi3+0xd4>
c00267c8:	0f bd f3             	bsr    esi,ebx
c00267cb:	83 f6 1f             	xor    esi,0x1f
c00267ce:	75 40                	jne    c0026810 <__divdi3+0xe0>
c00267d0:	39 eb                	cmp    ebx,ebp
c00267d2:	72 09                	jb     c00267dd <__divdi3+0xad>
c00267d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267d7:	0f 87 97 00 00 00    	ja     c0026874 <__divdi3+0x144>
c00267dd:	b9 01 00 00 00       	mov    ecx,0x1
c00267e2:	eb a4                	jmp    c0026788 <__divdi3+0x58>
c00267e4:	f7 d9                	neg    ecx
c00267e6:	83 d3 00             	adc    ebx,0x0
c00267e9:	f7 db                	neg    ebx
c00267eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267f2:	89 dd                	mov    ebp,ebx
c00267f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267fc:	e9 5f ff ff ff       	jmp    c0026760 <__divdi3+0x30>
c0026801:	8d 76 00             	lea    esi,[esi+0x0]
c0026804:	31 f6                	xor    esi,esi
c0026806:	31 c9                	xor    ecx,ecx
c0026808:	e9 7b ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c002680d:	8d 76 00             	lea    esi,[esi+0x0]
c0026810:	b8 20 00 00 00       	mov    eax,0x20
c0026815:	29 f0                	sub    eax,esi
c0026817:	89 f1                	mov    ecx,esi
c0026819:	d3 e3                	shl    ebx,cl
c002681b:	89 fa                	mov    edx,edi
c002681d:	88 c1                	mov    cl,al
c002681f:	d3 ea                	shr    edx,cl
c0026821:	09 da                	or     edx,ebx
c0026823:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026827:	89 f1                	mov    ecx,esi
c0026829:	d3 e7                	shl    edi,cl
c002682b:	89 eb                	mov    ebx,ebp
c002682d:	88 c1                	mov    cl,al
c002682f:	d3 eb                	shr    ebx,cl
c0026831:	89 f1                	mov    ecx,esi
c0026833:	d3 e5                	shl    ebp,cl
c0026835:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026838:	88 c1                	mov    cl,al
c002683a:	d3 ea                	shr    edx,cl
c002683c:	09 d5                	or     ebp,edx
c002683e:	89 e8                	mov    eax,ebp
c0026840:	89 da                	mov    edx,ebx
c0026842:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026846:	89 d3                	mov    ebx,edx
c0026848:	89 c5                	mov    ebp,eax
c002684a:	f7 e7                	mul    edi
c002684c:	39 d3                	cmp    ebx,edx
c002684e:	72 18                	jb     c0026868 <__divdi3+0x138>
c0026850:	74 0a                	je     c002685c <__divdi3+0x12c>
c0026852:	89 e9                	mov    ecx,ebp
c0026854:	31 f6                	xor    esi,esi
c0026856:	e9 2d ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c002685b:	90                   	nop
c002685c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002685f:	89 f1                	mov    ecx,esi
c0026861:	d3 e7                	shl    edi,cl
c0026863:	39 c7                	cmp    edi,eax
c0026865:	73 eb                	jae    c0026852 <__divdi3+0x122>
c0026867:	90                   	nop
c0026868:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002686b:	31 f6                	xor    esi,esi
c002686d:	e9 16 ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c0026872:	66 90                	xchg   ax,ax
c0026874:	31 c9                	xor    ecx,ecx
c0026876:	e9 0d ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c002687b:	90                   	nop

c002687c <__moddi3>:
c002687c:	55                   	push   ebp
c002687d:	57                   	push   edi
c002687e:	56                   	push   esi
c002687f:	53                   	push   ebx
c0026880:	83 ec 2c             	sub    esp,0x2c
c0026883:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026887:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002688b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002688f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026893:	85 db                	test   ebx,ebx
c0026895:	0f 88 85 00 00 00    	js     c0026920 <__moddi3+0xa4>
c002689b:	89 de                	mov    esi,ebx
c002689d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268a5:	89 d7                	mov    edi,edx
c00268a7:	85 d2                	test   edx,edx
c00268a9:	79 09                	jns    c00268b4 <__moddi3+0x38>
c00268ab:	f7 d8                	neg    eax
c00268ad:	83 d2 00             	adc    edx,0x0
c00268b0:	f7 da                	neg    edx
c00268b2:	89 d7                	mov    edi,edx
c00268b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268b8:	89 cd                	mov    ebp,ecx
c00268ba:	85 ff                	test   edi,edi
c00268bc:	75 52                	jne    c0026910 <__moddi3+0x94>
c00268be:	89 c3                	mov    ebx,eax
c00268c0:	39 f0                	cmp    eax,esi
c00268c2:	76 24                	jbe    c00268e8 <__moddi3+0x6c>
c00268c4:	89 c8                	mov    eax,ecx
c00268c6:	89 f2                	mov    edx,esi
c00268c8:	f7 f3                	div    ebx
c00268ca:	89 d6                	mov    esi,edx
c00268cc:	89 f0                	mov    eax,esi
c00268ce:	31 d2                	xor    edx,edx
c00268d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268d4:	85 c9                	test   ecx,ecx
c00268d6:	74 07                	je     c00268df <__moddi3+0x63>
c00268d8:	f7 d8                	neg    eax
c00268da:	83 d2 00             	adc    edx,0x0
c00268dd:	f7 da                	neg    edx
c00268df:	83 c4 2c             	add    esp,0x2c
c00268e2:	5b                   	pop    ebx
c00268e3:	5e                   	pop    esi
c00268e4:	5f                   	pop    edi
c00268e5:	5d                   	pop    ebp
c00268e6:	c3                   	ret    
c00268e7:	90                   	nop
c00268e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268ec:	85 db                	test   ebx,ebx
c00268ee:	75 0d                	jne    c00268fd <__moddi3+0x81>
c00268f0:	b8 01 00 00 00       	mov    eax,0x1
c00268f5:	31 d2                	xor    edx,edx
c00268f7:	f7 f7                	div    edi
c00268f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268fd:	89 f0                	mov    eax,esi
c00268ff:	31 d2                	xor    edx,edx
c0026901:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026905:	f7 f7                	div    edi
c0026907:	89 e8                	mov    eax,ebp
c0026909:	f7 f7                	div    edi
c002690b:	89 d6                	mov    esi,edx
c002690d:	eb bd                	jmp    c00268cc <__moddi3+0x50>
c002690f:	90                   	nop
c0026910:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026914:	39 f7                	cmp    edi,esi
c0026916:	76 20                	jbe    c0026938 <__moddi3+0xbc>
c0026918:	89 c8                	mov    eax,ecx
c002691a:	89 f2                	mov    edx,esi
c002691c:	eb b2                	jmp    c00268d0 <__moddi3+0x54>
c002691e:	66 90                	xchg   ax,ax
c0026920:	f7 d9                	neg    ecx
c0026922:	83 d3 00             	adc    ebx,0x0
c0026925:	f7 db                	neg    ebx
c0026927:	89 de                	mov    esi,ebx
c0026929:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026931:	e9 6f ff ff ff       	jmp    c00268a5 <__moddi3+0x29>
c0026936:	66 90                	xchg   ax,ax
c0026938:	0f bd c7             	bsr    eax,edi
c002693b:	83 f0 1f             	xor    eax,0x1f
c002693e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026942:	75 24                	jne    c0026968 <__moddi3+0xec>
c0026944:	39 f7                	cmp    edi,esi
c0026946:	72 06                	jb     c002694e <__moddi3+0xd2>
c0026948:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002694c:	77 0c                	ja     c002695a <__moddi3+0xde>
c002694e:	89 e9                	mov    ecx,ebp
c0026950:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026954:	19 fe                	sbb    esi,edi
c0026956:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002695a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002695e:	89 f2                	mov    edx,esi
c0026960:	e9 6b ff ff ff       	jmp    c00268d0 <__moddi3+0x54>
c0026965:	8d 76 00             	lea    esi,[esi+0x0]
c0026968:	b8 20 00 00 00       	mov    eax,0x20
c002696d:	89 c2                	mov    edx,eax
c002696f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026973:	29 da                	sub    edx,ebx
c0026975:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026979:	88 d9                	mov    cl,bl
c002697b:	d3 e7                	shl    edi,cl
c002697d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026981:	88 d1                	mov    cl,dl
c0026983:	d3 e8                	shr    eax,cl
c0026985:	09 c7                	or     edi,eax
c0026987:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002698b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002698f:	89 d8                	mov    eax,ebx
c0026991:	88 d9                	mov    cl,bl
c0026993:	d3 e7                	shl    edi,cl
c0026995:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026999:	89 f3                	mov    ebx,esi
c002699b:	88 d1                	mov    cl,dl
c002699d:	d3 eb                	shr    ebx,cl
c002699f:	89 c7                	mov    edi,eax
c00269a1:	88 c1                	mov    cl,al
c00269a3:	d3 e6                	shl    esi,cl
c00269a5:	89 e8                	mov    eax,ebp
c00269a7:	88 d1                	mov    cl,dl
c00269a9:	d3 e8                	shr    eax,cl
c00269ab:	09 f0                	or     eax,esi
c00269ad:	89 f9                	mov    ecx,edi
c00269af:	d3 e5                	shl    ebp,cl
c00269b1:	89 da                	mov    edx,ebx
c00269b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269b7:	89 d3                	mov    ebx,edx
c00269b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269bd:	89 c6                	mov    esi,eax
c00269bf:	89 d1                	mov    ecx,edx
c00269c1:	39 d3                	cmp    ebx,edx
c00269c3:	72 27                	jb     c00269ec <__moddi3+0x170>
c00269c5:	74 21                	je     c00269e8 <__moddi3+0x16c>
c00269c7:	29 f5                	sub    ebp,esi
c00269c9:	19 cb                	sbb    ebx,ecx
c00269cb:	89 de                	mov    esi,ebx
c00269cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269d1:	d3 e6                	shl    esi,cl
c00269d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269d7:	89 f9                	mov    ecx,edi
c00269d9:	d3 ed                	shr    ebp,cl
c00269db:	09 ee                	or     esi,ebp
c00269dd:	89 f0                	mov    eax,esi
c00269df:	d3 eb                	shr    ebx,cl
c00269e1:	89 da                	mov    edx,ebx
c00269e3:	e9 e8 fe ff ff       	jmp    c00268d0 <__moddi3+0x54>
c00269e8:	39 c5                	cmp    ebp,eax
c00269ea:	73 db                	jae    c00269c7 <__moddi3+0x14b>
c00269ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269f4:	89 d1                	mov    ecx,edx
c00269f6:	89 c6                	mov    esi,eax
c00269f8:	eb cd                	jmp    c00269c7 <__moddi3+0x14b>
c00269fa:	66 90                	xchg   ax,ax

c00269fc <__udivdi3>:
c00269fc:	55                   	push   ebp
c00269fd:	57                   	push   edi
c00269fe:	56                   	push   esi
c00269ff:	53                   	push   ebx
c0026a00:	83 ec 1c             	sub    esp,0x1c
c0026a03:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a13:	85 d2                	test   edx,edx
c0026a15:	75 41                	jne    c0026a58 <__udivdi3+0x5c>
c0026a17:	39 f7                	cmp    edi,esi
c0026a19:	76 15                	jbe    c0026a30 <__udivdi3+0x34>
c0026a1b:	89 e8                	mov    eax,ebp
c0026a1d:	89 f2                	mov    edx,esi
c0026a1f:	f7 f7                	div    edi
c0026a21:	31 db                	xor    ebx,ebx
c0026a23:	89 da                	mov    edx,ebx
c0026a25:	83 c4 1c             	add    esp,0x1c
c0026a28:	5b                   	pop    ebx
c0026a29:	5e                   	pop    esi
c0026a2a:	5f                   	pop    edi
c0026a2b:	5d                   	pop    ebp
c0026a2c:	c3                   	ret    
c0026a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a30:	89 f9                	mov    ecx,edi
c0026a32:	85 ff                	test   edi,edi
c0026a34:	75 0b                	jne    c0026a41 <__udivdi3+0x45>
c0026a36:	b8 01 00 00 00       	mov    eax,0x1
c0026a3b:	31 d2                	xor    edx,edx
c0026a3d:	f7 f7                	div    edi
c0026a3f:	89 c1                	mov    ecx,eax
c0026a41:	31 d2                	xor    edx,edx
c0026a43:	89 f0                	mov    eax,esi
c0026a45:	f7 f1                	div    ecx
c0026a47:	89 c3                	mov    ebx,eax
c0026a49:	89 e8                	mov    eax,ebp
c0026a4b:	f7 f1                	div    ecx
c0026a4d:	89 da                	mov    edx,ebx
c0026a4f:	83 c4 1c             	add    esp,0x1c
c0026a52:	5b                   	pop    ebx
c0026a53:	5e                   	pop    esi
c0026a54:	5f                   	pop    edi
c0026a55:	5d                   	pop    ebp
c0026a56:	c3                   	ret    
c0026a57:	90                   	nop
c0026a58:	39 f2                	cmp    edx,esi
c0026a5a:	77 1c                	ja     c0026a78 <__udivdi3+0x7c>
c0026a5c:	0f bd da             	bsr    ebx,edx
c0026a5f:	83 f3 1f             	xor    ebx,0x1f
c0026a62:	75 24                	jne    c0026a88 <__udivdi3+0x8c>
c0026a64:	39 f2                	cmp    edx,esi
c0026a66:	72 08                	jb     c0026a70 <__udivdi3+0x74>
c0026a68:	39 ef                	cmp    edi,ebp
c0026a6a:	0f 87 84 00 00 00    	ja     c0026af4 <__udivdi3+0xf8>
c0026a70:	b8 01 00 00 00       	mov    eax,0x1
c0026a75:	eb ac                	jmp    c0026a23 <__udivdi3+0x27>
c0026a77:	90                   	nop
c0026a78:	31 db                	xor    ebx,ebx
c0026a7a:	31 c0                	xor    eax,eax
c0026a7c:	89 da                	mov    edx,ebx
c0026a7e:	83 c4 1c             	add    esp,0x1c
c0026a81:	5b                   	pop    ebx
c0026a82:	5e                   	pop    esi
c0026a83:	5f                   	pop    edi
c0026a84:	5d                   	pop    ebp
c0026a85:	c3                   	ret    
c0026a86:	66 90                	xchg   ax,ax
c0026a88:	b8 20 00 00 00       	mov    eax,0x20
c0026a8d:	29 d8                	sub    eax,ebx
c0026a8f:	88 d9                	mov    cl,bl
c0026a91:	d3 e2                	shl    edx,cl
c0026a93:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a97:	89 fa                	mov    edx,edi
c0026a99:	88 c1                	mov    cl,al
c0026a9b:	d3 ea                	shr    edx,cl
c0026a9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026aa1:	09 d1                	or     ecx,edx
c0026aa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026aa7:	88 d9                	mov    cl,bl
c0026aa9:	d3 e7                	shl    edi,cl
c0026aab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aaf:	89 f7                	mov    edi,esi
c0026ab1:	88 c1                	mov    cl,al
c0026ab3:	d3 ef                	shr    edi,cl
c0026ab5:	88 d9                	mov    cl,bl
c0026ab7:	d3 e6                	shl    esi,cl
c0026ab9:	89 ea                	mov    edx,ebp
c0026abb:	88 c1                	mov    cl,al
c0026abd:	d3 ea                	shr    edx,cl
c0026abf:	09 d6                	or     esi,edx
c0026ac1:	89 f0                	mov    eax,esi
c0026ac3:	89 fa                	mov    edx,edi
c0026ac5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ac9:	89 d7                	mov    edi,edx
c0026acb:	89 c6                	mov    esi,eax
c0026acd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ad1:	39 d7                	cmp    edi,edx
c0026ad3:	72 13                	jb     c0026ae8 <__udivdi3+0xec>
c0026ad5:	74 09                	je     c0026ae0 <__udivdi3+0xe4>
c0026ad7:	89 f0                	mov    eax,esi
c0026ad9:	31 db                	xor    ebx,ebx
c0026adb:	e9 43 ff ff ff       	jmp    c0026a23 <__udivdi3+0x27>
c0026ae0:	88 d9                	mov    cl,bl
c0026ae2:	d3 e5                	shl    ebp,cl
c0026ae4:	39 c5                	cmp    ebp,eax
c0026ae6:	73 ef                	jae    c0026ad7 <__udivdi3+0xdb>
c0026ae8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026aeb:	31 db                	xor    ebx,ebx
c0026aed:	e9 31 ff ff ff       	jmp    c0026a23 <__udivdi3+0x27>
c0026af2:	66 90                	xchg   ax,ax
c0026af4:	31 c0                	xor    eax,eax
c0026af6:	e9 28 ff ff ff       	jmp    c0026a23 <__udivdi3+0x27>
c0026afb:	90                   	nop

c0026afc <__umoddi3>:
c0026afc:	55                   	push   ebp
c0026afd:	57                   	push   edi
c0026afe:	56                   	push   esi
c0026aff:	53                   	push   ebx
c0026b00:	83 ec 1c             	sub    esp,0x1c
c0026b03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b13:	89 da                	mov    edx,ebx
c0026b15:	85 c0                	test   eax,eax
c0026b17:	75 37                	jne    c0026b50 <__umoddi3+0x54>
c0026b19:	39 df                	cmp    edi,ebx
c0026b1b:	76 13                	jbe    c0026b30 <__umoddi3+0x34>
c0026b1d:	89 f0                	mov    eax,esi
c0026b1f:	f7 f7                	div    edi
c0026b21:	89 d0                	mov    eax,edx
c0026b23:	31 d2                	xor    edx,edx
c0026b25:	83 c4 1c             	add    esp,0x1c
c0026b28:	5b                   	pop    ebx
c0026b29:	5e                   	pop    esi
c0026b2a:	5f                   	pop    edi
c0026b2b:	5d                   	pop    ebp
c0026b2c:	c3                   	ret    
c0026b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b30:	89 fd                	mov    ebp,edi
c0026b32:	85 ff                	test   edi,edi
c0026b34:	75 0b                	jne    c0026b41 <__umoddi3+0x45>
c0026b36:	b8 01 00 00 00       	mov    eax,0x1
c0026b3b:	31 d2                	xor    edx,edx
c0026b3d:	f7 f7                	div    edi
c0026b3f:	89 c5                	mov    ebp,eax
c0026b41:	89 d8                	mov    eax,ebx
c0026b43:	31 d2                	xor    edx,edx
c0026b45:	f7 f5                	div    ebp
c0026b47:	89 f0                	mov    eax,esi
c0026b49:	f7 f5                	div    ebp
c0026b4b:	89 d0                	mov    eax,edx
c0026b4d:	eb d4                	jmp    c0026b23 <__umoddi3+0x27>
c0026b4f:	90                   	nop
c0026b50:	89 f1                	mov    ecx,esi
c0026b52:	39 d8                	cmp    eax,ebx
c0026b54:	76 0a                	jbe    c0026b60 <__umoddi3+0x64>
c0026b56:	89 f0                	mov    eax,esi
c0026b58:	83 c4 1c             	add    esp,0x1c
c0026b5b:	5b                   	pop    ebx
c0026b5c:	5e                   	pop    esi
c0026b5d:	5f                   	pop    edi
c0026b5e:	5d                   	pop    ebp
c0026b5f:	c3                   	ret    
c0026b60:	0f bd e8             	bsr    ebp,eax
c0026b63:	83 f5 1f             	xor    ebp,0x1f
c0026b66:	75 1c                	jne    c0026b84 <__umoddi3+0x88>
c0026b68:	39 d8                	cmp    eax,ebx
c0026b6a:	72 04                	jb     c0026b70 <__umoddi3+0x74>
c0026b6c:	39 f7                	cmp    edi,esi
c0026b6e:	77 08                	ja     c0026b78 <__umoddi3+0x7c>
c0026b70:	89 da                	mov    edx,ebx
c0026b72:	29 fe                	sub    esi,edi
c0026b74:	19 c2                	sbb    edx,eax
c0026b76:	89 f1                	mov    ecx,esi
c0026b78:	89 c8                	mov    eax,ecx
c0026b7a:	83 c4 1c             	add    esp,0x1c
c0026b7d:	5b                   	pop    ebx
c0026b7e:	5e                   	pop    esi
c0026b7f:	5f                   	pop    edi
c0026b80:	5d                   	pop    ebp
c0026b81:	c3                   	ret    
c0026b82:	66 90                	xchg   ax,ax
c0026b84:	ba 20 00 00 00       	mov    edx,0x20
c0026b89:	29 ea                	sub    edx,ebp
c0026b8b:	89 e9                	mov    ecx,ebp
c0026b8d:	d3 e0                	shl    eax,cl
c0026b8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b93:	89 f8                	mov    eax,edi
c0026b95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b99:	88 d1                	mov    cl,dl
c0026b9b:	d3 e8                	shr    eax,cl
c0026b9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ba1:	09 c1                	or     ecx,eax
c0026ba3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ba7:	89 e9                	mov    ecx,ebp
c0026ba9:	d3 e7                	shl    edi,cl
c0026bab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026baf:	89 d8                	mov    eax,ebx
c0026bb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026bb5:	88 d1                	mov    cl,dl
c0026bb7:	d3 e8                	shr    eax,cl
c0026bb9:	89 c7                	mov    edi,eax
c0026bbb:	89 e9                	mov    ecx,ebp
c0026bbd:	d3 e3                	shl    ebx,cl
c0026bbf:	89 f0                	mov    eax,esi
c0026bc1:	88 d1                	mov    cl,dl
c0026bc3:	d3 e8                	shr    eax,cl
c0026bc5:	09 d8                	or     eax,ebx
c0026bc7:	89 e9                	mov    ecx,ebp
c0026bc9:	d3 e6                	shl    esi,cl
c0026bcb:	89 f3                	mov    ebx,esi
c0026bcd:	89 fa                	mov    edx,edi
c0026bcf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bd3:	89 d1                	mov    ecx,edx
c0026bd5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bd9:	89 c6                	mov    esi,eax
c0026bdb:	89 d7                	mov    edi,edx
c0026bdd:	39 d1                	cmp    ecx,edx
c0026bdf:	72 27                	jb     c0026c08 <__umoddi3+0x10c>
c0026be1:	74 21                	je     c0026c04 <__umoddi3+0x108>
c0026be3:	89 ca                	mov    edx,ecx
c0026be5:	29 f3                	sub    ebx,esi
c0026be7:	19 fa                	sbb    edx,edi
c0026be9:	89 d0                	mov    eax,edx
c0026beb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bef:	d3 e0                	shl    eax,cl
c0026bf1:	89 e9                	mov    ecx,ebp
c0026bf3:	d3 eb                	shr    ebx,cl
c0026bf5:	09 d8                	or     eax,ebx
c0026bf7:	d3 ea                	shr    edx,cl
c0026bf9:	83 c4 1c             	add    esp,0x1c
c0026bfc:	5b                   	pop    ebx
c0026bfd:	5e                   	pop    esi
c0026bfe:	5f                   	pop    edi
c0026bff:	5d                   	pop    ebp
c0026c00:	c3                   	ret    
c0026c01:	8d 76 00             	lea    esi,[esi+0x0]
c0026c04:	39 c3                	cmp    ebx,eax
c0026c06:	73 db                	jae    c0026be3 <__umoddi3+0xe7>
c0026c08:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c0c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c10:	89 d7                	mov    edi,edx
c0026c12:	89 c6                	mov    esi,eax
c0026c14:	eb cd                	jmp    c0026be3 <__umoddi3+0xe7>

c0026c16 <__addsf3>:
c0026c16:	55                   	push   ebp
c0026c17:	89 e5                	mov    ebp,esp
c0026c19:	57                   	push   edi
c0026c1a:	56                   	push   esi
c0026c1b:	53                   	push   ebx
c0026c1c:	83 ec 08             	sub    esp,0x8
c0026c1f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c22:	89 fa                	mov    edx,edi
c0026c24:	89 f8                	mov    eax,edi
c0026c26:	c1 f8 17             	sar    eax,0x17
c0026c29:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c2c:	c1 e2 08             	shl    edx,0x8
c0026c2f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c35:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c38:	89 de                	mov    esi,ebx
c0026c3a:	c1 fe 17             	sar    esi,0x17
c0026c3d:	c1 e3 08             	shl    ebx,0x8
c0026c40:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c46:	31 f0                	xor    eax,esi
c0026c48:	0f 88 3b 01 00 00    	js     c0026d89 <__addsf3+0x173>
c0026c4e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c51:	29 f1                	sub    ecx,esi
c0026c53:	85 c9                	test   ecx,ecx
c0026c55:	7e 54                	jle    c0026cab <__addsf3+0x95>
c0026c57:	89 f0                	mov    eax,esi
c0026c59:	84 c0                	test   al,al
c0026c5b:	75 10                	jne    c0026c6d <__addsf3+0x57>
c0026c5d:	85 db                	test   ebx,ebx
c0026c5f:	0f 84 aa 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026c65:	49                   	dec    ecx
c0026c66:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c69:	74 38                	je     c0026ca3 <__addsf3+0x8d>
c0026c6b:	eb 13                	jmp    c0026c80 <__addsf3+0x6a>
c0026c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c70:	f7 d0                	not    eax
c0026c72:	84 c0                	test   al,al
c0026c74:	0f 84 95 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026c7a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c80:	83 f9 1f             	cmp    ecx,0x1f
c0026c83:	0f 8f 86 02 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026c89:	89 de                	mov    esi,ebx
c0026c8b:	d3 ee                	shr    esi,cl
c0026c8d:	b8 20 00 00 00       	mov    eax,0x20
c0026c92:	29 c8                	sub    eax,ecx
c0026c94:	89 c1                	mov    ecx,eax
c0026c96:	d3 e3                	shl    ebx,cl
c0026c98:	31 c0                	xor    eax,eax
c0026c9a:	85 db                	test   ebx,ebx
c0026c9c:	0f 95 c0             	setne  al
c0026c9f:	09 f0                	or     eax,esi
c0026ca1:	01 d0                	add    eax,edx
c0026ca3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ca6:	e9 b6 00 00 00       	jmp    c0026d61 <__addsf3+0x14b>
c0026cab:	74 5c                	je     c0026d09 <__addsf3+0xf3>
c0026cad:	89 f1                	mov    ecx,esi
c0026caf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026cb2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cb5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cb9:	75 14                	jne    c0026ccf <__addsf3+0xb9>
c0026cbb:	85 d2                	test   edx,edx
c0026cbd:	0f 84 4c 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026cc3:	49                   	dec    ecx
c0026cc4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cc7:	0f 84 94 00 00 00    	je     c0026d61 <__addsf3+0x14b>
c0026ccd:	eb 12                	jmp    c0026ce1 <__addsf3+0xcb>
c0026ccf:	89 f0                	mov    eax,esi
c0026cd1:	f7 d0                	not    eax
c0026cd3:	84 c0                	test   al,al
c0026cd5:	0f 84 34 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026cdb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ce1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce4:	83 f9 1f             	cmp    ecx,0x1f
c0026ce7:	0f 8f 22 02 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026ced:	89 d7                	mov    edi,edx
c0026cef:	d3 ef                	shr    edi,cl
c0026cf1:	b8 20 00 00 00       	mov    eax,0x20
c0026cf6:	29 c8                	sub    eax,ecx
c0026cf8:	89 c1                	mov    ecx,eax
c0026cfa:	d3 e2                	shl    edx,cl
c0026cfc:	31 c0                	xor    eax,eax
c0026cfe:	85 d2                	test   edx,edx
c0026d00:	0f 95 c0             	setne  al
c0026d03:	09 f8                	or     eax,edi
c0026d05:	01 d8                	add    eax,ebx
c0026d07:	eb 58                	jmp    c0026d61 <__addsf3+0x14b>
c0026d09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d0c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d0f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d15:	75 32                	jne    c0026d49 <__addsf3+0x133>
c0026d17:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d1b:	75 1f                	jne    c0026d3c <__addsf3+0x126>
c0026d1d:	85 d2                	test   edx,edx
c0026d1f:	0f 84 e0 01 00 00    	je     c0026f05 <__addsf3+0x2ef>
c0026d25:	85 db                	test   ebx,ebx
c0026d27:	0f 84 e2 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026d2d:	89 d0                	mov    eax,edx
c0026d2f:	01 d8                	add    eax,ebx
c0026d31:	0f 89 a9 01 00 00    	jns    c0026ee0 <__addsf3+0x2ca>
c0026d37:	e9 9d 01 00 00       	jmp    c0026ed9 <__addsf3+0x2c3>
c0026d3c:	85 d2                	test   edx,edx
c0026d3e:	0f 85 cb 01 00 00    	jne    c0026f0f <__addsf3+0x2f9>
c0026d44:	e9 bc 01 00 00       	jmp    c0026f05 <__addsf3+0x2ef>
c0026d49:	31 c0                	xor    eax,eax
c0026d4b:	89 f1                	mov    ecx,esi
c0026d4d:	f7 d1                	not    ecx
c0026d4f:	84 c9                	test   cl,cl
c0026d51:	0f 84 90 01 00 00    	je     c0026ee7 <__addsf3+0x2d1>
c0026d57:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d5a:	d1 e8                	shr    eax,1
c0026d5c:	e9 86 01 00 00       	jmp    c0026ee7 <__addsf3+0x2d1>
c0026d61:	85 c0                	test   eax,eax
c0026d63:	0f 89 7e 01 00 00    	jns    c0026ee7 <__addsf3+0x2d1>
c0026d69:	46                   	inc    esi
c0026d6a:	89 f2                	mov    edx,esi
c0026d6c:	f7 d2                	not    edx
c0026d6e:	84 d2                	test   dl,dl
c0026d70:	0f 84 6f 01 00 00    	je     c0026ee5 <__addsf3+0x2cf>
c0026d76:	89 c2                	mov    edx,eax
c0026d78:	83 e2 01             	and    edx,0x1
c0026d7b:	d1 e8                	shr    eax,1
c0026d7d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d82:	09 d0                	or     eax,edx
c0026d84:	e9 5e 01 00 00       	jmp    c0026ee7 <__addsf3+0x2d1>
c0026d89:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d90:	89 f0                	mov    eax,esi
c0026d92:	0f b6 c0             	movzx  eax,al
c0026d95:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d98:	29 c1                	sub    ecx,eax
c0026d9a:	85 c9                	test   ecx,ecx
c0026d9c:	7e 55                	jle    c0026df3 <__addsf3+0x1dd>
c0026d9e:	85 c0                	test   eax,eax
c0026da0:	75 11                	jne    c0026db3 <__addsf3+0x19d>
c0026da2:	85 db                	test   ebx,ebx
c0026da4:	0f 84 65 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026daa:	49                   	dec    ecx
c0026dab:	75 19                	jne    c0026dc6 <__addsf3+0x1b0>
c0026dad:	89 d0                	mov    eax,edx
c0026daf:	29 d8                	sub    eax,ebx
c0026db1:	eb 38                	jmp    c0026deb <__addsf3+0x1d5>
c0026db3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026db6:	f7 d0                	not    eax
c0026db8:	84 c0                	test   al,al
c0026dba:	0f 84 4f 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026dc0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dc6:	83 f9 1f             	cmp    ecx,0x1f
c0026dc9:	0f 8f 40 01 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026dcf:	89 de                	mov    esi,ebx
c0026dd1:	d3 ee                	shr    esi,cl
c0026dd3:	b8 20 00 00 00       	mov    eax,0x20
c0026dd8:	29 c8                	sub    eax,ecx
c0026dda:	89 c1                	mov    ecx,eax
c0026ddc:	d3 e3                	shl    ebx,cl
c0026dde:	31 c0                	xor    eax,eax
c0026de0:	85 db                	test   ebx,ebx
c0026de2:	0f 95 c0             	setne  al
c0026de5:	09 f0                	or     eax,esi
c0026de7:	29 c2                	sub    edx,eax
c0026de9:	89 d0                	mov    eax,edx
c0026deb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dee:	e9 af 00 00 00       	jmp    c0026ea2 <__addsf3+0x28c>
c0026df3:	74 5c                	je     c0026e51 <__addsf3+0x23b>
c0026df5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026df8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dfb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dff:	75 14                	jne    c0026e15 <__addsf3+0x1ff>
c0026e01:	85 d2                	test   edx,edx
c0026e03:	0f 84 06 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026e09:	48                   	dec    eax
c0026e0a:	75 1b                	jne    c0026e27 <__addsf3+0x211>
c0026e0c:	89 d8                	mov    eax,ebx
c0026e0e:	29 d0                	sub    eax,edx
c0026e10:	e9 8d 00 00 00       	jmp    c0026ea2 <__addsf3+0x28c>
c0026e15:	89 f1                	mov    ecx,esi
c0026e17:	f7 d1                	not    ecx
c0026e19:	84 c9                	test   cl,cl
c0026e1b:	0f 84 ee 00 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026e21:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2a:	83 f8 1f             	cmp    eax,0x1f
c0026e2d:	0f 8f dc 00 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026e33:	89 d7                	mov    edi,edx
c0026e35:	88 c1                	mov    cl,al
c0026e37:	d3 ef                	shr    edi,cl
c0026e39:	b9 20 00 00 00       	mov    ecx,0x20
c0026e3e:	29 c1                	sub    ecx,eax
c0026e40:	d3 e2                	shl    edx,cl
c0026e42:	31 c0                	xor    eax,eax
c0026e44:	85 d2                	test   edx,edx
c0026e46:	0f 95 c0             	setne  al
c0026e49:	09 f8                	or     eax,edi
c0026e4b:	29 c3                	sub    ebx,eax
c0026e4d:	89 d8                	mov    eax,ebx
c0026e4f:	eb 51                	jmp    c0026ea2 <__addsf3+0x28c>
c0026e51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e54:	40                   	inc    eax
c0026e55:	a8 fe                	test   al,0xfe
c0026e57:	75 3d                	jne    c0026e96 <__addsf3+0x280>
c0026e59:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e5d:	0f 85 a7 00 00 00    	jne    c0026f0a <__addsf3+0x2f4>
c0026e63:	85 d2                	test   edx,edx
c0026e65:	75 12                	jne    c0026e79 <__addsf3+0x263>
c0026e67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e6a:	85 db                	test   ebx,ebx
c0026e6c:	0f 85 9d 00 00 00    	jne    c0026f0f <__addsf3+0x2f9>
c0026e72:	31 ff                	xor    edi,edi
c0026e74:	e9 96 00 00 00       	jmp    c0026f0f <__addsf3+0x2f9>
c0026e79:	85 db                	test   ebx,ebx
c0026e7b:	0f 84 8e 00 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026e81:	89 d0                	mov    eax,edx
c0026e83:	29 d8                	sub    eax,ebx
c0026e85:	79 06                	jns    c0026e8d <__addsf3+0x277>
c0026e87:	89 d8                	mov    eax,ebx
c0026e89:	29 d0                	sub    eax,edx
c0026e8b:	eb 5a                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026e8d:	bf 00 00 00 00       	mov    edi,0x0
c0026e92:	74 7b                	je     c0026f0f <__addsf3+0x2f9>
c0026e94:	eb 4a                	jmp    c0026ee0 <__addsf3+0x2ca>
c0026e96:	89 d0                	mov    eax,edx
c0026e98:	29 d8                	sub    eax,ebx
c0026e9a:	79 12                	jns    c0026eae <__addsf3+0x298>
c0026e9c:	89 d8                	mov    eax,ebx
c0026e9e:	29 d0                	sub    eax,edx
c0026ea0:	eb 09                	jmp    c0026eab <__addsf3+0x295>
c0026ea2:	85 c0                	test   eax,eax
c0026ea4:	79 41                	jns    c0026ee7 <__addsf3+0x2d1>
c0026ea6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eab:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026eae:	31 f6                	xor    esi,esi
c0026eb0:	85 c0                	test   eax,eax
c0026eb2:	74 33                	je     c0026ee7 <__addsf3+0x2d1>
c0026eb4:	0f bd c8             	bsr    ecx,eax
c0026eb7:	83 f1 1f             	xor    ecx,0x1f
c0026eba:	d3 e0                	shl    eax,cl
c0026ebc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ec0:	39 ca                	cmp    edx,ecx
c0026ec2:	7f 10                	jg     c0026ed4 <__addsf3+0x2be>
c0026ec4:	29 d1                	sub    ecx,edx
c0026ec6:	41                   	inc    ecx
c0026ec7:	d3 e8                	shr    eax,cl
c0026ec9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ecc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ed2:	eb 13                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026ed4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ed7:	29 ce                	sub    esi,ecx
c0026ed9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ede:	eb 07                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026ee0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ee3:	eb 02                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026ee5:	31 c0                	xor    eax,eax
c0026ee7:	89 c2                	mov    edx,eax
c0026ee9:	c1 ea 08             	shr    edx,0x8
c0026eec:	a8 7f                	test   al,0x7f
c0026eee:	0f 95 c1             	setne  cl
c0026ef1:	09 d1                	or     ecx,edx
c0026ef3:	83 e1 01             	and    ecx,0x1
c0026ef6:	c1 e8 07             	shr    eax,0x7
c0026ef9:	21 c8                	and    eax,ecx
c0026efb:	c1 e6 17             	shl    esi,0x17
c0026efe:	09 d6                	or     esi,edx
c0026f00:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f03:	eb 0a                	jmp    c0026f0f <__addsf3+0x2f9>
c0026f05:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f08:	eb 05                	jmp    c0026f0f <__addsf3+0x2f9>
c0026f0a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f0f:	89 f8                	mov    eax,edi
c0026f11:	5a                   	pop    edx
c0026f12:	59                   	pop    ecx
c0026f13:	5b                   	pop    ebx
c0026f14:	5e                   	pop    esi
c0026f15:	5f                   	pop    edi
c0026f16:	5d                   	pop    ebp
c0026f17:	c3                   	ret    

c0026f18 <__subsf3>:
c0026f18:	55                   	push   ebp
c0026f19:	89 e5                	mov    ebp,esp
c0026f1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f1e:	05 00 00 00 80       	add    eax,0x80000000
c0026f23:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f26:	5d                   	pop    ebp
c0026f27:	e9 ea fc ff ff       	jmp    c0026c16 <__addsf3>

c0026f2c <__negsf2>:
c0026f2c:	55                   	push   ebp
c0026f2d:	89 e5                	mov    ebp,esp
c0026f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f32:	05 00 00 00 80       	add    eax,0x80000000
c0026f37:	5d                   	pop    ebp
c0026f38:	c3                   	ret    

c0026f39 <__mulsf3>:
c0026f39:	55                   	push   ebp
c0026f3a:	89 e5                	mov    ebp,esp
c0026f3c:	57                   	push   edi
c0026f3d:	56                   	push   esi
c0026f3e:	53                   	push   ebx
c0026f3f:	83 ec 1c             	sub    esp,0x1c
c0026f42:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f45:	89 f0                	mov    eax,esi
c0026f47:	89 f1                	mov    ecx,esi
c0026f49:	c1 f9 17             	sar    ecx,0x17
c0026f4c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f4f:	c1 e0 08             	shl    eax,0x8
c0026f52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f57:	89 c1                	mov    ecx,eax
c0026f59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f5c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f5f:	89 c7                	mov    edi,eax
c0026f61:	c1 ff 17             	sar    edi,0x17
c0026f64:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f68:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f6b:	89 f8                	mov    eax,edi
c0026f6d:	0f b6 c0             	movzx  eax,al
c0026f70:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f73:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f7a:	42                   	inc    edx
c0026f7b:	80 e2 fe             	and    dl,0xfe
c0026f7e:	75 7b                	jne    c0026ffb <__mulsf3+0xc2>
c0026f80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f84:	74 54                	je     c0026fda <__mulsf3+0xa1>
c0026f86:	85 c9                	test   ecx,ecx
c0026f88:	0f 85 64 01 00 00    	jne    c00270f2 <__mulsf3+0x1b9>
c0026f8e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f91:	80 e2 fe             	and    dl,0xfe
c0026f94:	75 1f                	jne    c0026fb5 <__mulsf3+0x7c>
c0026f96:	85 c0                	test   eax,eax
c0026f98:	b8 00 00 00 00       	mov    eax,0x0
c0026f9d:	74 29                	je     c0026fc8 <__mulsf3+0x8f>
c0026f9f:	53                   	push   ebx
c0026fa0:	53                   	push   ebx
c0026fa1:	50                   	push   eax
c0026fa2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fa5:	e8 96 05 00 00       	call   c0027540 <__nesf2>
c0026faa:	83 c4 10             	add    esp,0x10
c0026fad:	85 c0                	test   eax,eax
c0026faf:	0f 85 3a 01 00 00    	jne    c00270ef <__mulsf3+0x1b6>
c0026fb5:	85 ff                	test   edi,edi
c0026fb7:	0f 89 35 01 00 00    	jns    c00270f2 <__mulsf3+0x1b9>
c0026fbd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fc3:	e9 2a 01 00 00       	jmp    c00270f2 <__mulsf3+0x1b9>
c0026fc8:	51                   	push   ecx
c0026fc9:	51                   	push   ecx
c0026fca:	50                   	push   eax
c0026fcb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fce:	e8 6d 05 00 00       	call   c0027540 <__nesf2>
c0026fd3:	83 c4 10             	add    esp,0x10
c0026fd6:	85 c0                	test   eax,eax
c0026fd8:	eb 15                	jmp    c0026fef <__mulsf3+0xb6>
c0026fda:	85 c9                	test   ecx,ecx
c0026fdc:	74 0b                	je     c0026fe9 <__mulsf3+0xb0>
c0026fde:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fe1:	01 c9                	add    ecx,ecx
c0026fe3:	78 16                	js     c0026ffb <__mulsf3+0xc2>
c0026fe5:	89 d3                	mov    ebx,edx
c0026fe7:	eb f5                	jmp    c0026fde <__mulsf3+0xa5>
c0026fe9:	89 f8                	mov    eax,edi
c0026feb:	f7 d0                	not    eax
c0026fed:	84 c0                	test   al,al
c0026fef:	75 c4                	jne    c0026fb5 <__mulsf3+0x7c>
c0026ff1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ff6:	e9 f7 00 00 00       	jmp    c00270f2 <__mulsf3+0x1b9>
c0026ffb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ffe:	c1 e6 08             	shl    esi,0x8
c0027001:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027007:	8d 57 01             	lea    edx,[edi+0x1]
c002700a:	80 e2 fe             	and    dl,0xfe
c002700d:	75 63                	jne    c0027072 <__mulsf3+0x139>
c002700f:	85 c0                	test   eax,eax
c0027011:	74 2f                	je     c0027042 <__mulsf3+0x109>
c0027013:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027017:	0f 89 d2 00 00 00    	jns    c00270ef <__mulsf3+0x1b6>
c002701d:	52                   	push   edx
c002701e:	52                   	push   edx
c002701f:	6a 00                	push   0x0
c0027021:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027024:	e8 dc 04 00 00       	call   c0027505 <__eqsf2>
c0027029:	83 c4 10             	add    esp,0x10
c002702c:	85 c0                	test   eax,eax
c002702e:	0f 85 bb 00 00 00    	jne    c00270ef <__mulsf3+0x1b6>
c0027034:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027037:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002703d:	e9 b0 00 00 00       	jmp    c00270f2 <__mulsf3+0x1b9>
c0027042:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027045:	50                   	push   eax
c0027046:	50                   	push   eax
c0027047:	6a 00                	push   0x0
c0027049:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002704c:	e8 b4 04 00 00       	call   c0027505 <__eqsf2>
c0027051:	83 c4 10             	add    esp,0x10
c0027054:	85 c0                	test   eax,eax
c0027056:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027059:	75 0c                	jne    c0027067 <__mulsf3+0x12e>
c002705b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002705f:	0f 89 8a 00 00 00    	jns    c00270ef <__mulsf3+0x1b6>
c0027065:	eb cd                	jmp    c0027034 <__mulsf3+0xfb>
c0027067:	8d 43 ff             	lea    eax,[ebx-0x1]
c002706a:	01 f6                	add    esi,esi
c002706c:	78 04                	js     c0027072 <__mulsf3+0x139>
c002706e:	89 c3                	mov    ebx,eax
c0027070:	eb f5                	jmp    c0027067 <__mulsf3+0x12e>
c0027072:	89 c8                	mov    eax,ecx
c0027074:	0d 00 00 00 80       	or     eax,0x80000000
c0027079:	81 ce 00 00 00 80    	or     esi,0x80000000
c002707f:	f7 e6                	mul    esi
c0027081:	85 c0                	test   eax,eax
c0027083:	0f 95 c0             	setne  al
c0027086:	0f b6 c0             	movzx  eax,al
c0027089:	09 c2                	or     edx,eax
c002708b:	78 03                	js     c0027090 <__mulsf3+0x157>
c002708d:	01 d2                	add    edx,edx
c002708f:	4b                   	dec    ebx
c0027090:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027096:	7f 22                	jg     c00270ba <__mulsf3+0x181>
c0027098:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002709e:	85 db                	test   ebx,ebx
c00270a0:	7f 23                	jg     c00270c5 <__mulsf3+0x18c>
c00270a2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270a5:	7c 1a                	jl     c00270c1 <__mulsf3+0x188>
c00270a7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270ad:	b9 01 00 00 00       	mov    ecx,0x1
c00270b2:	29 d9                	sub    ecx,ebx
c00270b4:	d3 ea                	shr    edx,cl
c00270b6:	31 db                	xor    ebx,ebx
c00270b8:	eb 0b                	jmp    c00270c5 <__mulsf3+0x18c>
c00270ba:	bb ff 00 00 00       	mov    ebx,0xff
c00270bf:	eb 02                	jmp    c00270c3 <__mulsf3+0x18a>
c00270c1:	31 db                	xor    ebx,ebx
c00270c3:	31 d2                	xor    edx,edx
c00270c5:	89 d0                	mov    eax,edx
c00270c7:	c1 e8 08             	shr    eax,0x8
c00270ca:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270cd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270d3:	09 fb                	or     ebx,edi
c00270d5:	c1 e3 17             	shl    ebx,0x17
c00270d8:	09 c3                	or     ebx,eax
c00270da:	f6 c2 7f             	test   dl,0x7f
c00270dd:	0f 95 c1             	setne  cl
c00270e0:	09 c8                	or     eax,ecx
c00270e2:	83 e0 01             	and    eax,0x1
c00270e5:	c1 ea 07             	shr    edx,0x7
c00270e8:	21 c2                	and    edx,eax
c00270ea:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270ed:	eb 03                	jmp    c00270f2 <__mulsf3+0x1b9>
c00270ef:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270f2:	89 f0                	mov    eax,esi
c00270f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270f7:	5b                   	pop    ebx
c00270f8:	5e                   	pop    esi
c00270f9:	5f                   	pop    edi
c00270fa:	5d                   	pop    ebp
c00270fb:	c3                   	ret    

c00270fc <__divsf3>:
c00270fc:	55                   	push   ebp
c00270fd:	89 e5                	mov    ebp,esp
c00270ff:	57                   	push   edi
c0027100:	56                   	push   esi
c0027101:	53                   	push   ebx
c0027102:	83 ec 1c             	sub    esp,0x1c
c0027105:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027108:	89 d8                	mov    eax,ebx
c002710a:	89 d9                	mov    ecx,ebx
c002710c:	c1 f9 17             	sar    ecx,0x17
c002710f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027112:	c1 e0 08             	shl    eax,0x8
c0027115:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002711a:	89 c1                	mov    ecx,eax
c002711c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002711f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027122:	89 c7                	mov    edi,eax
c0027124:	c1 ff 17             	sar    edi,0x17
c0027127:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002712b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002712e:	89 f8                	mov    eax,edi
c0027130:	0f b6 c0             	movzx  eax,al
c0027133:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027136:	29 c6                	sub    esi,eax
c0027138:	83 c6 7f             	add    esi,0x7f
c002713b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002713e:	42                   	inc    edx
c002713f:	80 e2 fe             	and    dl,0xfe
c0027142:	0f 85 9c 00 00 00    	jne    c00271e4 <__divsf3+0xe8>
c0027148:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002714c:	74 33                	je     c0027181 <__divsf3+0x85>
c002714e:	85 c9                	test   ecx,ecx
c0027150:	0f 85 c7 01 00 00    	jne    c002731d <__divsf3+0x221>
c0027156:	8d 57 01             	lea    edx,[edi+0x1]
c0027159:	80 e2 fe             	and    dl,0xfe
c002715c:	75 2f                	jne    c002718d <__divsf3+0x91>
c002715e:	85 c0                	test   eax,eax
c0027160:	74 2b                	je     c002718d <__divsf3+0x91>
c0027162:	51                   	push   ecx
c0027163:	51                   	push   ecx
c0027164:	6a 00                	push   0x0
c0027166:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027169:	e8 d2 03 00 00       	call   c0027540 <__nesf2>
c002716e:	83 c4 10             	add    esp,0x10
c0027171:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027174:	85 c0                	test   eax,eax
c0027176:	0f 85 a1 01 00 00    	jne    c002731d <__divsf3+0x221>
c002717c:	e9 92 01 00 00       	jmp    c0027313 <__divsf3+0x217>
c0027181:	85 c9                	test   ecx,ecx
c0027183:	75 1b                	jne    c00271a0 <__divsf3+0xa4>
c0027185:	8d 57 01             	lea    edx,[edi+0x1]
c0027188:	80 e2 fe             	and    dl,0xfe
c002718b:	74 1e                	je     c00271ab <__divsf3+0xaf>
c002718d:	85 ff                	test   edi,edi
c002718f:	0f 89 88 01 00 00    	jns    c002731d <__divsf3+0x221>
c0027195:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002719b:	e9 7d 01 00 00       	jmp    c002731d <__divsf3+0x221>
c00271a0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271a3:	01 c9                	add    ecx,ecx
c00271a5:	78 3d                	js     c00271e4 <__divsf3+0xe8>
c00271a7:	89 d6                	mov    esi,edx
c00271a9:	eb f5                	jmp    c00271a0 <__divsf3+0xa4>
c00271ab:	85 c0                	test   eax,eax
c00271ad:	b8 00 00 00 00       	mov    eax,0x0
c00271b2:	74 18                	je     c00271cc <__divsf3+0xd0>
c00271b4:	52                   	push   edx
c00271b5:	52                   	push   edx
c00271b6:	50                   	push   eax
c00271b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271ba:	e8 81 03 00 00       	call   c0027540 <__nesf2>
c00271bf:	83 c4 10             	add    esp,0x10
c00271c2:	85 c0                	test   eax,eax
c00271c4:	0f 85 50 01 00 00    	jne    c002731a <__divsf3+0x21e>
c00271ca:	eb c1                	jmp    c002718d <__divsf3+0x91>
c00271cc:	56                   	push   esi
c00271cd:	56                   	push   esi
c00271ce:	50                   	push   eax
c00271cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271d2:	e8 69 03 00 00       	call   c0027540 <__nesf2>
c00271d7:	83 c4 10             	add    esp,0x10
c00271da:	85 c0                	test   eax,eax
c00271dc:	0f 84 31 01 00 00    	je     c0027313 <__divsf3+0x217>
c00271e2:	eb a9                	jmp    c002718d <__divsf3+0x91>
c00271e4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271e7:	c1 e3 08             	shl    ebx,0x8
c00271ea:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271f0:	8d 57 01             	lea    edx,[edi+0x1]
c00271f3:	80 e2 fe             	and    dl,0xfe
c00271f6:	75 71                	jne    c0027269 <__divsf3+0x16d>
c00271f8:	85 c0                	test   eax,eax
c00271fa:	ba 00 00 00 00       	mov    edx,0x0
c00271ff:	74 2f                	je     c0027230 <__divsf3+0x134>
c0027201:	51                   	push   ecx
c0027202:	51                   	push   ecx
c0027203:	52                   	push   edx
c0027204:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027207:	e8 f9 02 00 00       	call   c0027505 <__eqsf2>
c002720c:	83 c4 10             	add    esp,0x10
c002720f:	85 c0                	test   eax,eax
c0027211:	0f 85 03 01 00 00    	jne    c002731a <__divsf3+0x21e>
c0027217:	31 d2                	xor    edx,edx
c0027219:	89 d3                	mov    ebx,edx
c002721b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002721e:	31 f8                	xor    eax,edi
c0027220:	0f 89 f7 00 00 00    	jns    c002731d <__divsf3+0x221>
c0027226:	bb 00 00 00 80       	mov    ebx,0x80000000
c002722b:	e9 ed 00 00 00       	jmp    c002731d <__divsf3+0x221>
c0027230:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027233:	50                   	push   eax
c0027234:	50                   	push   eax
c0027235:	52                   	push   edx
c0027236:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027239:	e8 c7 02 00 00       	call   c0027505 <__eqsf2>
c002723e:	83 c4 10             	add    esp,0x10
c0027241:	85 c0                	test   eax,eax
c0027243:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027246:	75 16                	jne    c002725e <__divsf3+0x162>
c0027248:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002724b:	31 fb                	xor    ebx,edi
c002724d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027253:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027259:	e9 bf 00 00 00       	jmp    c002731d <__divsf3+0x221>
c002725e:	8d 46 01             	lea    eax,[esi+0x1]
c0027261:	01 db                	add    ebx,ebx
c0027263:	78 04                	js     c0027269 <__divsf3+0x16d>
c0027265:	89 c6                	mov    esi,eax
c0027267:	eb f5                	jmp    c002725e <__divsf3+0x162>
c0027269:	89 c8                	mov    eax,ecx
c002726b:	0d 00 00 00 80       	or     eax,0x80000000
c0027270:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027276:	31 d2                	xor    edx,edx
c0027278:	39 d8                	cmp    eax,ebx
c002727a:	72 07                	jb     c0027283 <__divsf3+0x187>
c002727c:	29 d8                	sub    eax,ebx
c002727e:	ba 01 00 00 00       	mov    edx,0x1
c0027283:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002728a:	01 d2                	add    edx,edx
c002728c:	89 c1                	mov    ecx,eax
c002728e:	01 c0                	add    eax,eax
c0027290:	85 c9                	test   ecx,ecx
c0027292:	78 04                	js     c0027298 <__divsf3+0x19c>
c0027294:	39 c3                	cmp    ebx,eax
c0027296:	77 05                	ja     c002729d <__divsf3+0x1a1>
c0027298:	29 d8                	sub    eax,ebx
c002729a:	83 ca 01             	or     edx,0x1
c002729d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272a0:	75 e8                	jne    c002728a <__divsf3+0x18e>
c00272a2:	85 c0                	test   eax,eax
c00272a4:	0f 95 c0             	setne  al
c00272a7:	0f b6 c0             	movzx  eax,al
c00272aa:	c1 e2 06             	shl    edx,0x6
c00272ad:	09 c2                	or     edx,eax
c00272af:	78 03                	js     c00272b4 <__divsf3+0x1b8>
c00272b1:	01 d2                	add    edx,edx
c00272b3:	4e                   	dec    esi
c00272b4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272ba:	7f 22                	jg     c00272de <__divsf3+0x1e2>
c00272bc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272c2:	85 f6                	test   esi,esi
c00272c4:	7f 23                	jg     c00272e9 <__divsf3+0x1ed>
c00272c6:	83 fe e9             	cmp    esi,0xffffffe9
c00272c9:	7c 1a                	jl     c00272e5 <__divsf3+0x1e9>
c00272cb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272d1:	b9 01 00 00 00       	mov    ecx,0x1
c00272d6:	29 f1                	sub    ecx,esi
c00272d8:	d3 ea                	shr    edx,cl
c00272da:	31 f6                	xor    esi,esi
c00272dc:	eb 0b                	jmp    c00272e9 <__divsf3+0x1ed>
c00272de:	be ff 00 00 00       	mov    esi,0xff
c00272e3:	eb 02                	jmp    c00272e7 <__divsf3+0x1eb>
c00272e5:	31 f6                	xor    esi,esi
c00272e7:	31 d2                	xor    edx,edx
c00272e9:	89 d0                	mov    eax,edx
c00272eb:	c1 e8 08             	shr    eax,0x8
c00272ee:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272f1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272f7:	09 fe                	or     esi,edi
c00272f9:	c1 e6 17             	shl    esi,0x17
c00272fc:	09 c6                	or     esi,eax
c00272fe:	f6 c2 7f             	test   dl,0x7f
c0027301:	0f 95 c1             	setne  cl
c0027304:	09 c8                	or     eax,ecx
c0027306:	83 e0 01             	and    eax,0x1
c0027309:	c1 ea 07             	shr    edx,0x7
c002730c:	21 c2                	and    edx,eax
c002730e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027311:	eb 0a                	jmp    c002731d <__divsf3+0x221>
c0027313:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027318:	eb 03                	jmp    c002731d <__divsf3+0x221>
c002731a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002731d:	89 d8                	mov    eax,ebx
c002731f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027322:	5b                   	pop    ebx
c0027323:	5e                   	pop    esi
c0027324:	5f                   	pop    edi
c0027325:	5d                   	pop    ebp
c0027326:	c3                   	ret    

c0027327 <__floatsisf>:
c0027327:	55                   	push   ebp
c0027328:	89 e5                	mov    ebp,esp
c002732a:	53                   	push   ebx
c002732b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002732e:	85 d2                	test   edx,edx
c0027330:	7e 2b                	jle    c002735d <__floatsisf+0x36>
c0027332:	0f bd ca             	bsr    ecx,edx
c0027335:	83 f1 1f             	xor    ecx,0x1f
c0027338:	d3 e2                	shl    edx,cl
c002733a:	89 d0                	mov    eax,edx
c002733c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027341:	89 c3                	mov    ebx,eax
c0027343:	c1 eb 08             	shr    ebx,0x8
c0027346:	80 e2 7f             	and    dl,0x7f
c0027349:	0f 95 c2             	setne  dl
c002734c:	09 da                	or     edx,ebx
c002734e:	83 e2 01             	and    edx,0x1
c0027351:	c1 e8 07             	shr    eax,0x7
c0027354:	21 c2                	and    edx,eax
c0027356:	b8 9e 00 00 00       	mov    eax,0x9e
c002735b:	eb 32                	jmp    c002738f <__floatsisf+0x68>
c002735d:	b8 00 00 00 00       	mov    eax,0x0
c0027362:	74 34                	je     c0027398 <__floatsisf+0x71>
c0027364:	f7 da                	neg    edx
c0027366:	0f bd ca             	bsr    ecx,edx
c0027369:	83 f1 1f             	xor    ecx,0x1f
c002736c:	d3 e2                	shl    edx,cl
c002736e:	89 d0                	mov    eax,edx
c0027370:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027375:	89 c3                	mov    ebx,eax
c0027377:	c1 eb 08             	shr    ebx,0x8
c002737a:	80 e2 7f             	and    dl,0x7f
c002737d:	0f 95 c2             	setne  dl
c0027380:	09 da                	or     edx,ebx
c0027382:	83 e2 01             	and    edx,0x1
c0027385:	c1 e8 07             	shr    eax,0x7
c0027388:	21 c2                	and    edx,eax
c002738a:	b8 9e 01 00 00       	mov    eax,0x19e
c002738f:	29 c8                	sub    eax,ecx
c0027391:	c1 e0 17             	shl    eax,0x17
c0027394:	09 d8                	or     eax,ebx
c0027396:	01 d0                	add    eax,edx
c0027398:	5b                   	pop    ebx
c0027399:	5d                   	pop    ebp
c002739a:	c3                   	ret    

c002739b <__floatunsisf>:
c002739b:	55                   	push   ebp
c002739c:	89 e5                	mov    ebp,esp
c002739e:	53                   	push   ebx
c002739f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a2:	31 c0                	xor    eax,eax
c00273a4:	85 d2                	test   edx,edx
c00273a6:	74 32                	je     c00273da <__floatunsisf+0x3f>
c00273a8:	0f bd ca             	bsr    ecx,edx
c00273ab:	83 f1 1f             	xor    ecx,0x1f
c00273ae:	d3 e2                	shl    edx,cl
c00273b0:	89 d0                	mov    eax,edx
c00273b2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273b7:	89 c3                	mov    ebx,eax
c00273b9:	c1 eb 08             	shr    ebx,0x8
c00273bc:	80 e2 7f             	and    dl,0x7f
c00273bf:	0f 95 c2             	setne  dl
c00273c2:	09 da                	or     edx,ebx
c00273c4:	83 e2 01             	and    edx,0x1
c00273c7:	c1 e8 07             	shr    eax,0x7
c00273ca:	21 c2                	and    edx,eax
c00273cc:	b8 9e 00 00 00       	mov    eax,0x9e
c00273d1:	29 c8                	sub    eax,ecx
c00273d3:	c1 e0 17             	shl    eax,0x17
c00273d6:	09 d8                	or     eax,ebx
c00273d8:	01 d0                	add    eax,edx
c00273da:	5b                   	pop    ebx
c00273db:	5d                   	pop    ebp
c00273dc:	c3                   	ret    

c00273dd <__fixsfsi>:
c00273dd:	55                   	push   ebp
c00273de:	89 e5                	mov    ebp,esp
c00273e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273e3:	89 d1                	mov    ecx,edx
c00273e5:	c1 e1 08             	shl    ecx,0x8
c00273e8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ee:	c1 fa 17             	sar    edx,0x17
c00273f1:	78 1c                	js     c002740f <__fixsfsi+0x32>
c00273f3:	83 ea 7f             	sub    edx,0x7f
c00273f6:	31 c0                	xor    eax,eax
c00273f8:	83 fa 1e             	cmp    edx,0x1e
c00273fb:	77 40                	ja     c002743d <__fixsfsi+0x60>
c00273fd:	89 c8                	mov    eax,ecx
c00273ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027404:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027409:	29 d1                	sub    ecx,edx
c002740b:	d3 e8                	shr    eax,cl
c002740d:	eb 2e                	jmp    c002743d <__fixsfsi+0x60>
c002740f:	31 c0                	xor    eax,eax
c0027411:	81 c2 81 00 00 00    	add    edx,0x81
c0027417:	78 24                	js     c002743d <__fixsfsi+0x60>
c0027419:	83 fa 1e             	cmp    edx,0x1e
c002741c:	7e 09                	jle    c0027427 <__fixsfsi+0x4a>
c002741e:	83 fa 1f             	cmp    edx,0x1f
c0027421:	75 18                	jne    c002743b <__fixsfsi+0x5e>
c0027423:	85 c9                	test   ecx,ecx
c0027425:	75 14                	jne    c002743b <__fixsfsi+0x5e>
c0027427:	89 c8                	mov    eax,ecx
c0027429:	0d 00 00 00 80       	or     eax,0x80000000
c002742e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027433:	29 d1                	sub    ecx,edx
c0027435:	d3 e8                	shr    eax,cl
c0027437:	f7 d8                	neg    eax
c0027439:	eb 02                	jmp    c002743d <__fixsfsi+0x60>
c002743b:	31 c0                	xor    eax,eax
c002743d:	5d                   	pop    ebp
c002743e:	c3                   	ret    

c002743f <__fixunssfsi>:
c002743f:	55                   	push   ebp
c0027440:	89 e5                	mov    ebp,esp
c0027442:	53                   	push   ebx
c0027443:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027446:	89 d3                	mov    ebx,edx
c0027448:	c1 fb 17             	sar    ebx,0x17
c002744b:	83 eb 7f             	sub    ebx,0x7f
c002744e:	31 c0                	xor    eax,eax
c0027450:	83 fb 1f             	cmp    ebx,0x1f
c0027453:	77 18                	ja     c002746d <__fixunssfsi+0x2e>
c0027455:	89 d0                	mov    eax,edx
c0027457:	c1 e0 08             	shl    eax,0x8
c002745a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002745f:	0d 00 00 00 80       	or     eax,0x80000000
c0027464:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027469:	29 d9                	sub    ecx,ebx
c002746b:	d3 e8                	shr    eax,cl
c002746d:	5b                   	pop    ebx
c002746e:	5d                   	pop    ebp
c002746f:	c3                   	ret    

c0027470 <__cmpsf2>:
c0027470:	55                   	push   ebp
c0027471:	89 e5                	mov    ebp,esp
c0027473:	57                   	push   edi
c0027474:	56                   	push   esi
c0027475:	53                   	push   ebx
c0027476:	83 ec 24             	sub    esp,0x24
c0027479:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002747c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002747f:	e8 4f 10 00 00       	call   c00284d3 <__truncdfsf2>
c0027484:	5a                   	pop    edx
c0027485:	59                   	pop    ecx
c0027486:	89 c3                	mov    ebx,eax
c0027488:	c1 e8 17             	shr    eax,0x17
c002748b:	0f b6 f0             	movzx  esi,al
c002748e:	89 d8                	mov    eax,ebx
c0027490:	c1 e8 1f             	shr    eax,0x1f
c0027493:	31 c6                	xor    esi,eax
c0027495:	c1 e3 08             	shl    ebx,0x8
c0027498:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002749b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002749e:	e8 30 10 00 00       	call   c00284d3 <__truncdfsf2>
c00274a3:	83 c4 10             	add    esp,0x10
c00274a6:	89 c1                	mov    ecx,eax
c00274a8:	c1 e9 17             	shr    ecx,0x17
c00274ab:	0f b6 c9             	movzx  ecx,cl
c00274ae:	89 c7                	mov    edi,eax
c00274b0:	c1 ef 1f             	shr    edi,0x1f
c00274b3:	89 ca                	mov    edx,ecx
c00274b5:	31 fa                	xor    edx,edi
c00274b7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274ba:	c1 e0 08             	shl    eax,0x8
c00274bd:	89 c2                	mov    edx,eax
c00274bf:	89 d8                	mov    eax,ebx
c00274c1:	09 d0                	or     eax,edx
c00274c3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274c8:	09 f0                	or     eax,esi
c00274ca:	75 08                	jne    c00274d4 <__cmpsf2+0x64>
c00274cc:	31 c0                	xor    eax,eax
c00274ce:	39 f9                	cmp    ecx,edi
c00274d0:	75 0c                	jne    c00274de <__cmpsf2+0x6e>
c00274d2:	eb 29                	jmp    c00274fd <__cmpsf2+0x8d>
c00274d4:	b8 01 00 00 00       	mov    eax,0x1
c00274d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274dc:	7f 1f                	jg     c00274fd <__cmpsf2+0x8d>
c00274de:	83 c8 ff             	or     eax,0xffffffff
c00274e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274e4:	7c 17                	jl     c00274fd <__cmpsf2+0x8d>
c00274e6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274ec:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274f2:	b8 01 00 00 00       	mov    eax,0x1
c00274f7:	39 d3                	cmp    ebx,edx
c00274f9:	77 02                	ja     c00274fd <__cmpsf2+0x8d>
c00274fb:	19 c0                	sbb    eax,eax
c00274fd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027500:	5b                   	pop    ebx
c0027501:	5e                   	pop    esi
c0027502:	5f                   	pop    edi
c0027503:	5d                   	pop    ebp
c0027504:	c3                   	ret    

c0027505 <__eqsf2>:
c0027505:	55                   	push   ebp
c0027506:	89 e5                	mov    ebp,esp
c0027508:	83 ec 24             	sub    esp,0x24
c002750b:	6a 01                	push   0x1
c002750d:	83 ec 0c             	sub    esp,0xc
c0027510:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027513:	e8 df 10 00 00       	call   c00285f7 <__extendsfdf2>
c0027518:	83 c4 10             	add    esp,0x10
c002751b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027521:	52                   	push   edx
c0027522:	50                   	push   eax
c0027523:	50                   	push   eax
c0027524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027527:	e8 cb 10 00 00       	call   c00285f7 <__extendsfdf2>
c002752c:	59                   	pop    ecx
c002752d:	59                   	pop    ecx
c002752e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027531:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027534:	52                   	push   edx
c0027535:	50                   	push   eax
c0027536:	e8 35 ff ff ff       	call   c0027470 <__cmpsf2>
c002753b:	83 c4 20             	add    esp,0x20
c002753e:	c9                   	leave  
c002753f:	c3                   	ret    

c0027540 <__nesf2>:
c0027540:	eb c3                	jmp    c0027505 <__eqsf2>

c0027542 <__gtsf2>:
c0027542:	55                   	push   ebp
c0027543:	89 e5                	mov    ebp,esp
c0027545:	83 ec 24             	sub    esp,0x24
c0027548:	6a ff                	push   0xffffffff
c002754a:	83 ec 0c             	sub    esp,0xc
c002754d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027550:	e8 a2 10 00 00       	call   c00285f7 <__extendsfdf2>
c0027555:	83 c4 10             	add    esp,0x10
c0027558:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002755b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002755e:	52                   	push   edx
c002755f:	50                   	push   eax
c0027560:	50                   	push   eax
c0027561:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027564:	e8 8e 10 00 00       	call   c00285f7 <__extendsfdf2>
c0027569:	59                   	pop    ecx
c002756a:	59                   	pop    ecx
c002756b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002756e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027571:	52                   	push   edx
c0027572:	50                   	push   eax
c0027573:	e8 f8 fe ff ff       	call   c0027470 <__cmpsf2>
c0027578:	83 c4 20             	add    esp,0x20
c002757b:	c9                   	leave  
c002757c:	c3                   	ret    

c002757d <__gesf2>:
c002757d:	eb c3                	jmp    c0027542 <__gtsf2>

c002757f <__ltsf2>:
c002757f:	eb 84                	jmp    c0027505 <__eqsf2>

c0027581 <__lesf2>:
c0027581:	eb 82                	jmp    c0027505 <__eqsf2>

c0027583 <__adddf3>:
c0027583:	55                   	push   ebp
c0027584:	89 e5                	mov    ebp,esp
c0027586:	57                   	push   edi
c0027587:	56                   	push   esi
c0027588:	53                   	push   ebx
c0027589:	83 ec 24             	sub    esp,0x24
c002758c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002758f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027592:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027595:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027598:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002759b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002759e:	89 c8                	mov    eax,ecx
c00275a0:	89 ce                	mov    esi,ecx
c00275a2:	c1 fe 14             	sar    esi,0x14
c00275a5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275a8:	89 fb                	mov    ebx,edi
c00275aa:	89 fa                	mov    edx,edi
c00275ac:	c1 e2 0b             	shl    edx,0xb
c00275af:	c1 e0 0b             	shl    eax,0xb
c00275b2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275b7:	c1 eb 15             	shr    ebx,0x15
c00275ba:	09 d8                	or     eax,ebx
c00275bc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275bf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275c2:	c1 fe 14             	sar    esi,0x14
c00275c5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275c8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275cb:	89 f3                	mov    ebx,esi
c00275cd:	c1 e3 0b             	shl    ebx,0xb
c00275d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275d3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275d6:	c1 e3 0b             	shl    ebx,0xb
c00275d9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275df:	c1 ee 15             	shr    esi,0x15
c00275e2:	09 f3                	or     ebx,esi
c00275e4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275e7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ea:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275ed:	0f 88 5f 02 00 00    	js     c0027852 <__adddf3+0x2cf>
c00275f3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275f6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275f9:	85 db                	test   ebx,ebx
c00275fb:	0f 8e c7 00 00 00    	jle    c00276c8 <__adddf3+0x145>
c0027601:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027608:	75 1a                	jne    c0027624 <__adddf3+0xa1>
c002760a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002760d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027610:	0f 84 b2 05 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027616:	4b                   	dec    ebx
c0027617:	75 23                	jne    c002763c <__adddf3+0xb9>
c0027619:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002761c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002761f:	e9 99 00 00 00       	jmp    c00276bd <__adddf3+0x13a>
c0027624:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027627:	f7 d6                	not    esi
c0027629:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002762f:	0f 84 93 05 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027635:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002763c:	83 fb 1f             	cmp    ebx,0x1f
c002763f:	7e 42                	jle    c0027683 <__adddf3+0x100>
c0027641:	83 fb 3f             	cmp    ebx,0x3f
c0027644:	0f 8f 7e 05 00 00    	jg     c0027bc8 <__adddf3+0x645>
c002764a:	83 e3 1f             	and    ebx,0x1f
c002764d:	89 d9                	mov    ecx,ebx
c002764f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027652:	d3 ef                	shr    edi,cl
c0027654:	31 db                	xor    ebx,ebx
c0027656:	85 c9                	test   ecx,ecx
c0027658:	74 15                	je     c002766f <__adddf3+0xec>
c002765a:	be 20 00 00 00       	mov    esi,0x20
c002765f:	29 ce                	sub    esi,ecx
c0027661:	89 f1                	mov    ecx,esi
c0027663:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027666:	d3 e6                	shl    esi,cl
c0027668:	31 db                	xor    ebx,ebx
c002766a:	85 f6                	test   esi,esi
c002766c:	0f 95 c3             	setne  bl
c002766f:	31 c9                	xor    ecx,ecx
c0027671:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027675:	0f 95 c1             	setne  cl
c0027678:	09 cf                	or     edi,ecx
c002767a:	09 fb                	or     ebx,edi
c002767c:	01 da                	add    edx,ebx
c002767e:	83 d0 00             	adc    eax,0x0
c0027681:	eb 3a                	jmp    c00276bd <__adddf3+0x13a>
c0027683:	bf 20 00 00 00       	mov    edi,0x20
c0027688:	29 df                	sub    edi,ebx
c002768a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002768d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027690:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027693:	d3 e6                	shl    esi,cl
c0027695:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027698:	88 d9                	mov    cl,bl
c002769a:	d3 ef                	shr    edi,cl
c002769c:	09 fe                	or     esi,edi
c002769e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276a1:	88 d9                	mov    cl,bl
c00276a3:	d3 ef                	shr    edi,cl
c00276a5:	89 fb                	mov    ebx,edi
c00276a7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276aa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276ad:	d3 e7                	shl    edi,cl
c00276af:	85 ff                	test   edi,edi
c00276b1:	0f 95 c1             	setne  cl
c00276b4:	0f b6 c9             	movzx  ecx,cl
c00276b7:	09 ce                	or     esi,ecx
c00276b9:	01 f2                	add    edx,esi
c00276bb:	11 d8                	adc    eax,ebx
c00276bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276c3:	e9 52 01 00 00       	jmp    c002781a <__adddf3+0x297>
c00276c8:	0f 84 d5 00 00 00    	je     c00277a3 <__adddf3+0x220>
c00276ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276d1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276d4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276d7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276da:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276e1:	75 20                	jne    c0027703 <__adddf3+0x180>
c00276e3:	89 d6                	mov    esi,edx
c00276e5:	09 c6                	or     esi,eax
c00276e7:	0f 84 db 04 00 00    	je     c0027bc8 <__adddf3+0x645>
c00276ed:	4b                   	dec    ebx
c00276ee:	75 29                	jne    c0027719 <__adddf3+0x196>
c00276f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276f6:	01 d1                	add    ecx,edx
c00276f8:	11 c6                	adc    esi,eax
c00276fa:	89 f0                	mov    eax,esi
c00276fc:	89 ca                	mov    edx,ecx
c00276fe:	e9 17 01 00 00       	jmp    c002781a <__adddf3+0x297>
c0027703:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027706:	f7 d6                	not    esi
c0027708:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002770e:	0f 84 b4 04 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027714:	0d 00 00 00 80       	or     eax,0x80000000
c0027719:	83 fb 1f             	cmp    ebx,0x1f
c002771c:	7e 48                	jle    c0027766 <__adddf3+0x1e3>
c002771e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027721:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027724:	83 fb 3f             	cmp    ebx,0x3f
c0027727:	0f 8f 9b 04 00 00    	jg     c0027bc8 <__adddf3+0x645>
c002772d:	83 e3 1f             	and    ebx,0x1f
c0027730:	89 d9                	mov    ecx,ebx
c0027732:	89 c7                	mov    edi,eax
c0027734:	d3 ef                	shr    edi,cl
c0027736:	31 db                	xor    ebx,ebx
c0027738:	85 c9                	test   ecx,ecx
c002773a:	74 12                	je     c002774e <__adddf3+0x1cb>
c002773c:	be 20 00 00 00       	mov    esi,0x20
c0027741:	29 ce                	sub    esi,ecx
c0027743:	89 f1                	mov    ecx,esi
c0027745:	d3 e0                	shl    eax,cl
c0027747:	31 db                	xor    ebx,ebx
c0027749:	85 c0                	test   eax,eax
c002774b:	0f 95 c3             	setne  bl
c002774e:	31 c0                	xor    eax,eax
c0027750:	85 d2                	test   edx,edx
c0027752:	0f 95 c0             	setne  al
c0027755:	09 c7                	or     edi,eax
c0027757:	09 fb                	or     ebx,edi
c0027759:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002775c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002775f:	01 da                	add    edx,ebx
c0027761:	83 d6 00             	adc    esi,0x0
c0027764:	eb 39                	jmp    c002779f <__adddf3+0x21c>
c0027766:	be 20 00 00 00       	mov    esi,0x20
c002776b:	29 de                	sub    esi,ebx
c002776d:	89 c7                	mov    edi,eax
c002776f:	89 f1                	mov    ecx,esi
c0027771:	d3 e7                	shl    edi,cl
c0027773:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027776:	89 d7                	mov    edi,edx
c0027778:	88 d9                	mov    cl,bl
c002777a:	d3 ef                	shr    edi,cl
c002777c:	89 f9                	mov    ecx,edi
c002777e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027781:	09 cf                	or     edi,ecx
c0027783:	88 d9                	mov    cl,bl
c0027785:	d3 e8                	shr    eax,cl
c0027787:	89 f1                	mov    ecx,esi
c0027789:	d3 e2                	shl    edx,cl
c002778b:	85 d2                	test   edx,edx
c002778d:	0f 95 c2             	setne  dl
c0027790:	0f b6 d2             	movzx  edx,dl
c0027793:	09 d7                	or     edi,edx
c0027795:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027798:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002779b:	01 fa                	add    edx,edi
c002779d:	11 c6                	adc    esi,eax
c002779f:	89 f0                	mov    eax,esi
c00277a1:	eb 77                	jmp    c002781a <__adddf3+0x297>
c00277a3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277a6:	46                   	inc    esi
c00277a7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277aa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277b0:	75 41                	jne    c00277f3 <__adddf3+0x270>
c00277b2:	89 d3                	mov    ebx,edx
c00277b4:	09 c3                	or     ebx,eax
c00277b6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277bd:	75 27                	jne    c00277e6 <__adddf3+0x263>
c00277bf:	85 db                	test   ebx,ebx
c00277c1:	0f 84 fb 03 00 00    	je     c0027bc2 <__adddf3+0x63f>
c00277c7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277ca:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277cd:	0f 84 f5 03 00 00    	je     c0027bc8 <__adddf3+0x645>
c00277d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277d9:	85 c0                	test   eax,eax
c00277db:	0f 89 91 03 00 00    	jns    c0027b72 <__adddf3+0x5ef>
c00277e1:	e9 85 03 00 00       	jmp    c0027b6b <__adddf3+0x5e8>
c00277e6:	85 db                	test   ebx,ebx
c00277e8:	0f 85 da 03 00 00    	jne    c0027bc8 <__adddf3+0x645>
c00277ee:	e9 cf 03 00 00       	jmp    c0027bc2 <__adddf3+0x63f>
c00277f3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277f6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277fc:	f7 d1                	not    ecx
c00277fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027804:	0f 84 70 03 00 00    	je     c0027b7a <__adddf3+0x5f7>
c002780a:	d1 ea                	shr    edx,1
c002780c:	89 c1                	mov    ecx,eax
c002780e:	c1 e1 1f             	shl    ecx,0x1f
c0027811:	09 ca                	or     edx,ecx
c0027813:	d1 e8                	shr    eax,1
c0027815:	e9 6f 03 00 00       	jmp    c0027b89 <__adddf3+0x606>
c002781a:	85 c0                	test   eax,eax
c002781c:	0f 89 67 03 00 00    	jns    c0027b89 <__adddf3+0x606>
c0027822:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027825:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027828:	f7 d1                	not    ecx
c002782a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027830:	0f 84 44 03 00 00    	je     c0027b7a <__adddf3+0x5f7>
c0027836:	89 d1                	mov    ecx,edx
c0027838:	d1 e9                	shr    ecx,1
c002783a:	83 e2 01             	and    edx,0x1
c002783d:	09 ca                	or     edx,ecx
c002783f:	89 c1                	mov    ecx,eax
c0027841:	c1 e1 1f             	shl    ecx,0x1f
c0027844:	09 ca                	or     edx,ecx
c0027846:	d1 e8                	shr    eax,1
c0027848:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002784d:	e9 37 03 00 00       	jmp    c0027b89 <__adddf3+0x606>
c0027852:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027855:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002785b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002785e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027861:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027867:	29 de                	sub    esi,ebx
c0027869:	85 f6                	test   esi,esi
c002786b:	0f 8e bd 00 00 00    	jle    c002792e <__adddf3+0x3ab>
c0027871:	85 db                	test   ebx,ebx
c0027873:	75 17                	jne    c002788c <__adddf3+0x309>
c0027875:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027878:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002787b:	0f 84 47 03 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027881:	4e                   	dec    esi
c0027882:	75 20                	jne    c00278a4 <__adddf3+0x321>
c0027884:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027887:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002788a:	eb 5b                	jmp    c00278e7 <__adddf3+0x364>
c002788c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002788f:	f7 d3                	not    ebx
c0027891:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027897:	0f 84 2b 03 00 00    	je     c0027bc8 <__adddf3+0x645>
c002789d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278a4:	83 fe 1f             	cmp    esi,0x1f
c00278a7:	7e 49                	jle    c00278f2 <__adddf3+0x36f>
c00278a9:	83 fe 3f             	cmp    esi,0x3f
c00278ac:	0f 8f 16 03 00 00    	jg     c0027bc8 <__adddf3+0x645>
c00278b2:	83 e6 1f             	and    esi,0x1f
c00278b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278b8:	89 f1                	mov    ecx,esi
c00278ba:	d3 ef                	shr    edi,cl
c00278bc:	31 db                	xor    ebx,ebx
c00278be:	85 f6                	test   esi,esi
c00278c0:	74 13                	je     c00278d5 <__adddf3+0x352>
c00278c2:	b9 20 00 00 00       	mov    ecx,0x20
c00278c7:	29 f1                	sub    ecx,esi
c00278c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278cc:	d3 e6                	shl    esi,cl
c00278ce:	31 db                	xor    ebx,ebx
c00278d0:	85 f6                	test   esi,esi
c00278d2:	0f 95 c3             	setne  bl
c00278d5:	31 c9                	xor    ecx,ecx
c00278d7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278db:	0f 95 c1             	setne  cl
c00278de:	09 cf                	or     edi,ecx
c00278e0:	09 fb                	or     ebx,edi
c00278e2:	29 da                	sub    edx,ebx
c00278e4:	83 d8 00             	sbb    eax,0x0
c00278e7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ed:	e9 aa 01 00 00       	jmp    c0027a9c <__adddf3+0x519>
c00278f2:	bf 20 00 00 00       	mov    edi,0x20
c00278f7:	29 f7                	sub    edi,esi
c00278f9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278fc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278ff:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027902:	d3 e3                	shl    ebx,cl
c0027904:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027907:	89 f1                	mov    ecx,esi
c0027909:	d3 ef                	shr    edi,cl
c002790b:	09 fb                	or     ebx,edi
c002790d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027910:	89 f1                	mov    ecx,esi
c0027912:	d3 ef                	shr    edi,cl
c0027914:	89 fe                	mov    esi,edi
c0027916:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027919:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002791c:	d3 e7                	shl    edi,cl
c002791e:	85 ff                	test   edi,edi
c0027920:	0f 95 c1             	setne  cl
c0027923:	0f b6 c9             	movzx  ecx,cl
c0027926:	09 cb                	or     ebx,ecx
c0027928:	29 da                	sub    edx,ebx
c002792a:	19 f0                	sbb    eax,esi
c002792c:	eb b9                	jmp    c00278e7 <__adddf3+0x364>
c002792e:	0f 84 cd 00 00 00    	je     c0027a01 <__adddf3+0x47e>
c0027934:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027937:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002793a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002793d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027941:	75 1b                	jne    c002795e <__adddf3+0x3db>
c0027943:	89 d6                	mov    esi,edx
c0027945:	09 c6                	or     esi,eax
c0027947:	0f 84 7b 02 00 00    	je     c0027bc8 <__adddf3+0x645>
c002794d:	4b                   	dec    ebx
c002794e:	75 24                	jne    c0027974 <__adddf3+0x3f1>
c0027950:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027953:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027956:	29 d1                	sub    ecx,edx
c0027958:	19 c6                	sbb    esi,eax
c002795a:	89 ca                	mov    edx,ecx
c002795c:	eb 61                	jmp    c00279bf <__adddf3+0x43c>
c002795e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027961:	f7 d6                	not    esi
c0027963:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027969:	0f 84 59 02 00 00    	je     c0027bc8 <__adddf3+0x645>
c002796f:	0d 00 00 00 80       	or     eax,0x80000000
c0027974:	83 fb 1f             	cmp    ebx,0x1f
c0027977:	7e 4d                	jle    c00279c6 <__adddf3+0x443>
c0027979:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002797c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002797f:	83 fb 3f             	cmp    ebx,0x3f
c0027982:	0f 8f 40 02 00 00    	jg     c0027bc8 <__adddf3+0x645>
c0027988:	83 e3 1f             	and    ebx,0x1f
c002798b:	89 d9                	mov    ecx,ebx
c002798d:	89 c7                	mov    edi,eax
c002798f:	d3 ef                	shr    edi,cl
c0027991:	31 db                	xor    ebx,ebx
c0027993:	85 c9                	test   ecx,ecx
c0027995:	74 12                	je     c00279a9 <__adddf3+0x426>
c0027997:	be 20 00 00 00       	mov    esi,0x20
c002799c:	29 ce                	sub    esi,ecx
c002799e:	89 f1                	mov    ecx,esi
c00279a0:	d3 e0                	shl    eax,cl
c00279a2:	31 db                	xor    ebx,ebx
c00279a4:	85 c0                	test   eax,eax
c00279a6:	0f 95 c3             	setne  bl
c00279a9:	31 c0                	xor    eax,eax
c00279ab:	85 d2                	test   edx,edx
c00279ad:	0f 95 c0             	setne  al
c00279b0:	09 c7                	or     edi,eax
c00279b2:	09 fb                	or     ebx,edi
c00279b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ba:	29 da                	sub    edx,ebx
c00279bc:	83 de 00             	sbb    esi,0x0
c00279bf:	89 f0                	mov    eax,esi
c00279c1:	e9 d6 00 00 00       	jmp    c0027a9c <__adddf3+0x519>
c00279c6:	be 20 00 00 00       	mov    esi,0x20
c00279cb:	29 de                	sub    esi,ebx
c00279cd:	89 c7                	mov    edi,eax
c00279cf:	89 f1                	mov    ecx,esi
c00279d1:	d3 e7                	shl    edi,cl
c00279d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279d6:	89 d7                	mov    edi,edx
c00279d8:	88 d9                	mov    cl,bl
c00279da:	d3 ef                	shr    edi,cl
c00279dc:	89 f9                	mov    ecx,edi
c00279de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e1:	09 cf                	or     edi,ecx
c00279e3:	88 d9                	mov    cl,bl
c00279e5:	d3 e8                	shr    eax,cl
c00279e7:	89 f1                	mov    ecx,esi
c00279e9:	d3 e2                	shl    edx,cl
c00279eb:	85 d2                	test   edx,edx
c00279ed:	0f 95 c2             	setne  dl
c00279f0:	0f b6 d2             	movzx  edx,dl
c00279f3:	09 d7                	or     edi,edx
c00279f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279fb:	29 fa                	sub    edx,edi
c00279fd:	19 c6                	sbb    esi,eax
c00279ff:	eb be                	jmp    c00279bf <__adddf3+0x43c>
c0027a01:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a04:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a07:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a0d:	75 6a                	jne    c0027a79 <__adddf3+0x4f6>
c0027a0f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a13:	75 58                	jne    c0027a6d <__adddf3+0x4ea>
c0027a15:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a18:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a1b:	89 d6                	mov    esi,edx
c0027a1d:	09 c6                	or     esi,eax
c0027a1f:	75 17                	jne    c0027a38 <__adddf3+0x4b5>
c0027a21:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a24:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a27:	85 db                	test   ebx,ebx
c0027a29:	0f 85 99 01 00 00    	jne    c0027bc8 <__adddf3+0x645>
c0027a2f:	31 ff                	xor    edi,edi
c0027a31:	31 c9                	xor    ecx,ecx
c0027a33:	e9 90 01 00 00       	jmp    c0027bc8 <__adddf3+0x645>
c0027a38:	85 db                	test   ebx,ebx
c0027a3a:	0f 84 88 01 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027a40:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a43:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a46:	85 c0                	test   eax,eax
c0027a48:	79 10                	jns    c0027a5a <__adddf3+0x4d7>
c0027a4a:	31 c9                	xor    ecx,ecx
c0027a4c:	f7 da                	neg    edx
c0027a4e:	0f 95 c1             	setne  cl
c0027a51:	01 c8                	add    eax,ecx
c0027a53:	f7 d8                	neg    eax
c0027a55:	e9 2f 01 00 00       	jmp    c0027b89 <__adddf3+0x606>
c0027a5a:	31 ff                	xor    edi,edi
c0027a5c:	31 c9                	xor    ecx,ecx
c0027a5e:	89 c3                	mov    ebx,eax
c0027a60:	09 d3                	or     ebx,edx
c0027a62:	0f 84 60 01 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027a68:	e9 05 01 00 00       	jmp    c0027b72 <__adddf3+0x5ef>
c0027a6d:	31 ff                	xor    edi,edi
c0027a6f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a74:	e9 4f 01 00 00       	jmp    c0027bc8 <__adddf3+0x645>
c0027a79:	89 c1                	mov    ecx,eax
c0027a7b:	89 d0                	mov    eax,edx
c0027a7d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a80:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a83:	89 ca                	mov    edx,ecx
c0027a85:	85 c9                	test   ecx,ecx
c0027a87:	79 2c                	jns    c0027ab5 <__adddf3+0x532>
c0027a89:	31 c9                	xor    ecx,ecx
c0027a8b:	f7 d8                	neg    eax
c0027a8d:	0f 95 c1             	setne  cl
c0027a90:	01 ca                	add    edx,ecx
c0027a92:	f7 da                	neg    edx
c0027a94:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a97:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a9a:	eb 19                	jmp    c0027ab5 <__adddf3+0x532>
c0027a9c:	85 c0                	test   eax,eax
c0027a9e:	0f 89 e5 00 00 00    	jns    c0027b89 <__adddf3+0x606>
c0027aa4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027aa9:	89 c1                	mov    ecx,eax
c0027aab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027aae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ab1:	89 d0                	mov    eax,edx
c0027ab3:	89 ca                	mov    edx,ecx
c0027ab5:	85 d2                	test   edx,edx
c0027ab7:	74 59                	je     c0027b12 <__adddf3+0x58f>
c0027ab9:	0f bd da             	bsr    ebx,edx
c0027abc:	83 f3 1f             	xor    ebx,0x1f
c0027abf:	88 d9                	mov    cl,bl
c0027ac1:	d3 e2                	shl    edx,cl
c0027ac3:	bf 20 00 00 00       	mov    edi,0x20
c0027ac8:	89 f9                	mov    ecx,edi
c0027aca:	29 d9                	sub    ecx,ebx
c0027acc:	89 c6                	mov    esi,eax
c0027ace:	d3 ee                	shr    esi,cl
c0027ad0:	09 d6                	or     esi,edx
c0027ad2:	88 d9                	mov    cl,bl
c0027ad4:	d3 e0                	shl    eax,cl
c0027ad6:	89 c2                	mov    edx,eax
c0027ad8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027adb:	25 ff 07 00 00       	and    eax,0x7ff
c0027ae0:	39 d8                	cmp    eax,ebx
c0027ae2:	7f 22                	jg     c0027b06 <__adddf3+0x583>
c0027ae4:	29 c3                	sub    ebx,eax
c0027ae6:	43                   	inc    ebx
c0027ae7:	88 d9                	mov    cl,bl
c0027ae9:	d3 ea                	shr    edx,cl
c0027aeb:	29 df                	sub    edi,ebx
c0027aed:	89 f9                	mov    ecx,edi
c0027aef:	89 f0                	mov    eax,esi
c0027af1:	d3 e0                	shl    eax,cl
c0027af3:	09 c2                	or     edx,eax
c0027af5:	89 f0                	mov    eax,esi
c0027af7:	88 d9                	mov    cl,bl
c0027af9:	d3 e8                	shr    eax,cl
c0027afb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027afe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b04:	eb 6f                	jmp    c0027b75 <__adddf3+0x5f2>
c0027b06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b09:	29 d8                	sub    eax,ebx
c0027b0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b0e:	89 f0                	mov    eax,esi
c0027b10:	eb 59                	jmp    c0027b6b <__adddf3+0x5e8>
c0027b12:	85 c0                	test   eax,eax
c0027b14:	74 6a                	je     c0027b80 <__adddf3+0x5fd>
c0027b16:	0f bd c8             	bsr    ecx,eax
c0027b19:	83 f1 1f             	xor    ecx,0x1f
c0027b1c:	d3 e0                	shl    eax,cl
c0027b1e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b21:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b27:	83 c1 20             	add    ecx,0x20
c0027b2a:	39 cb                	cmp    ebx,ecx
c0027b2c:	7f 35                	jg     c0027b63 <__adddf3+0x5e0>
c0027b2e:	29 d9                	sub    ecx,ebx
c0027b30:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b33:	83 fe 1f             	cmp    esi,0x1f
c0027b36:	7e 09                	jle    c0027b41 <__adddf3+0x5be>
c0027b38:	83 e9 1f             	sub    ecx,0x1f
c0027b3b:	d3 e8                	shr    eax,cl
c0027b3d:	89 c3                	mov    ebx,eax
c0027b3f:	eb 11                	jmp    c0027b52 <__adddf3+0x5cf>
c0027b41:	b9 20 00 00 00       	mov    ecx,0x20
c0027b46:	29 f1                	sub    ecx,esi
c0027b48:	89 c3                	mov    ebx,eax
c0027b4a:	d3 e3                	shl    ebx,cl
c0027b4c:	89 f1                	mov    ecx,esi
c0027b4e:	d3 e8                	shr    eax,cl
c0027b50:	89 c2                	mov    edx,eax
c0027b52:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b55:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b5d:	89 d0                	mov    eax,edx
c0027b5f:	89 da                	mov    edx,ebx
c0027b61:	eb 26                	jmp    c0027b89 <__adddf3+0x606>
c0027b63:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b66:	29 cf                	sub    edi,ecx
c0027b68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b6b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b70:	eb 17                	jmp    c0027b89 <__adddf3+0x606>
c0027b72:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b75:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b78:	eb 0f                	jmp    c0027b89 <__adddf3+0x606>
c0027b7a:	31 d2                	xor    edx,edx
c0027b7c:	31 c0                	xor    eax,eax
c0027b7e:	eb 09                	jmp    c0027b89 <__adddf3+0x606>
c0027b80:	89 c2                	mov    edx,eax
c0027b82:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b89:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b8c:	c1 e1 14             	shl    ecx,0x14
c0027b8f:	89 c3                	mov    ebx,eax
c0027b91:	c1 eb 0b             	shr    ebx,0xb
c0027b94:	09 d9                	or     ecx,ebx
c0027b96:	89 d3                	mov    ebx,edx
c0027b98:	c1 eb 0b             	shr    ebx,0xb
c0027b9b:	c1 e0 15             	shl    eax,0x15
c0027b9e:	09 d8                	or     eax,ebx
c0027ba0:	89 c7                	mov    edi,eax
c0027ba2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027ba8:	0f 95 c0             	setne  al
c0027bab:	89 c6                	mov    esi,eax
c0027bad:	09 f3                	or     ebx,esi
c0027baf:	83 e3 01             	and    ebx,0x1
c0027bb2:	c1 ea 0a             	shr    edx,0xa
c0027bb5:	21 da                	and    edx,ebx
c0027bb7:	89 f8                	mov    eax,edi
c0027bb9:	01 d0                	add    eax,edx
c0027bbb:	83 d1 00             	adc    ecx,0x0
c0027bbe:	89 c7                	mov    edi,eax
c0027bc0:	eb 06                	jmp    c0027bc8 <__adddf3+0x645>
c0027bc2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bc5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bc8:	89 f8                	mov    eax,edi
c0027bca:	89 ca                	mov    edx,ecx
c0027bcc:	83 c4 24             	add    esp,0x24
c0027bcf:	5b                   	pop    ebx
c0027bd0:	5e                   	pop    esi
c0027bd1:	5f                   	pop    edi
c0027bd2:	5d                   	pop    ebp
c0027bd3:	c3                   	ret    

c0027bd4 <__subdf3>:
c0027bd4:	55                   	push   ebp
c0027bd5:	89 e5                	mov    ebp,esp
c0027bd7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bda:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bdd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027be3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027be6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027be9:	5d                   	pop    ebp
c0027bea:	e9 94 f9 ff ff       	jmp    c0027583 <__adddf3>

c0027bef <__negdf2>:
c0027bef:	55                   	push   ebp
c0027bf0:	89 e5                	mov    ebp,esp
c0027bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bf5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bf8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bfe:	5d                   	pop    ebp
c0027bff:	c3                   	ret    

c0027c00 <__muldf3>:
c0027c00:	55                   	push   ebp
c0027c01:	89 e5                	mov    ebp,esp
c0027c03:	57                   	push   edi
c0027c04:	56                   	push   esi
c0027c05:	53                   	push   ebx
c0027c06:	83 ec 24             	sub    esp,0x24
c0027c09:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c0f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c18:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c1b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c1e:	89 c8                	mov    eax,ecx
c0027c20:	c1 f8 14             	sar    eax,0x14
c0027c23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c26:	89 f8                	mov    eax,edi
c0027c28:	89 fb                	mov    ebx,edi
c0027c2a:	c1 e3 0b             	shl    ebx,0xb
c0027c2d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c30:	c1 e1 0b             	shl    ecx,0xb
c0027c33:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c39:	c1 e8 15             	shr    eax,0x15
c0027c3c:	09 c1                	or     ecx,eax
c0027c3e:	89 d6                	mov    esi,edx
c0027c40:	89 d0                	mov    eax,edx
c0027c42:	c1 f8 14             	sar    eax,0x14
c0027c45:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c48:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c4b:	89 c3                	mov    ebx,eax
c0027c4d:	c1 e3 0b             	shl    ebx,0xb
c0027c50:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c53:	c1 e6 0b             	shl    esi,0xb
c0027c56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c5c:	c1 e8 15             	shr    eax,0x15
c0027c5f:	09 c6                	or     esi,eax
c0027c61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c64:	25 ff 07 00 00       	and    eax,0x7ff
c0027c69:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c6f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c74:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c77:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c7a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c7d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c84:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c87:	40                   	inc    eax
c0027c88:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c8d:	0f 85 8d 00 00 00    	jne    c0027d20 <__muldf3+0x120>
c0027c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c96:	09 c8                	or     eax,ecx
c0027c98:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c9c:	74 44                	je     c0027ce2 <__muldf3+0xe2>
c0027c9e:	85 c0                	test   eax,eax
c0027ca0:	0f 85 31 02 00 00    	jne    c0027ed7 <__muldf3+0x2d7>
c0027ca6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ca9:	40                   	inc    eax
c0027caa:	a9 fe 07 00 00       	test   eax,0x7fe
c0027caf:	75 13                	jne    c0027cc4 <__muldf3+0xc4>
c0027cb1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cb4:	09 f1                	or     ecx,esi
c0027cb6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cba:	74 22                	je     c0027cde <__muldf3+0xde>
c0027cbc:	85 c9                	test   ecx,ecx
c0027cbe:	0f 85 0d 02 00 00    	jne    c0027ed1 <__muldf3+0x2d1>
c0027cc4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cc8:	0f 89 09 02 00 00    	jns    c0027ed7 <__muldf3+0x2d7>
c0027cce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cd1:	05 00 00 00 80       	add    eax,0x80000000
c0027cd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd9:	e9 f9 01 00 00       	jmp    c0027ed7 <__muldf3+0x2d7>
c0027cde:	85 c9                	test   ecx,ecx
c0027ce0:	eb 2e                	jmp    c0027d10 <__muldf3+0x110>
c0027ce2:	85 c0                	test   eax,eax
c0027ce4:	74 20                	je     c0027d06 <__muldf3+0x106>
c0027ce6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ce9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cef:	c1 ef 1f             	shr    edi,0x1f
c0027cf2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cf5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cf8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cfb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cfe:	09 f9                	or     ecx,edi
c0027d00:	78 1e                	js     c0027d20 <__muldf3+0x120>
c0027d02:	89 c3                	mov    ebx,eax
c0027d04:	eb e0                	jmp    c0027ce6 <__muldf3+0xe6>
c0027d06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d09:	f7 d0                	not    eax
c0027d0b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d10:	75 b2                	jne    c0027cc4 <__muldf3+0xc4>
c0027d12:	31 ff                	xor    edi,edi
c0027d14:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d1b:	e9 b7 01 00 00       	jmp    c0027ed7 <__muldf3+0x2d7>
c0027d20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d23:	40                   	inc    eax
c0027d24:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d29:	75 57                	jne    c0027d82 <__muldf3+0x182>
c0027d2b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d2e:	09 f0                	or     eax,esi
c0027d30:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d34:	74 23                	je     c0027d59 <__muldf3+0x159>
c0027d36:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d3a:	0f 89 91 01 00 00    	jns    c0027ed1 <__muldf3+0x2d1>
c0027d40:	85 c0                	test   eax,eax
c0027d42:	0f 85 89 01 00 00    	jne    c0027ed1 <__muldf3+0x2d1>
c0027d48:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d4b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d54:	e9 7e 01 00 00       	jmp    c0027ed7 <__muldf3+0x2d7>
c0027d59:	85 c0                	test   eax,eax
c0027d5b:	75 0c                	jne    c0027d69 <__muldf3+0x169>
c0027d5d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d61:	0f 89 6a 01 00 00    	jns    c0027ed1 <__muldf3+0x2d1>
c0027d67:	eb df                	jmp    c0027d48 <__muldf3+0x148>
c0027d69:	01 f6                	add    esi,esi
c0027d6b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d6e:	c1 ea 1f             	shr    edx,0x1f
c0027d71:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d74:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d7a:	09 d6                	or     esi,edx
c0027d7c:	78 04                	js     c0027d82 <__muldf3+0x182>
c0027d7e:	89 c3                	mov    ebx,eax
c0027d80:	eb e7                	jmp    c0027d69 <__muldf3+0x169>
c0027d82:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d88:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d8e:	89 c8                	mov    eax,ecx
c0027d90:	f7 e6                	mul    esi
c0027d92:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d95:	89 c7                	mov    edi,eax
c0027d97:	89 c8                	mov    eax,ecx
c0027d99:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d9c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d9f:	89 c1                	mov    ecx,eax
c0027da1:	89 f0                	mov    eax,esi
c0027da3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027da6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027da9:	89 c6                	mov    esi,eax
c0027dab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dae:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027db1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027db4:	31 c0                	xor    eax,eax
c0027db6:	01 f1                	add    ecx,esi
c0027db8:	0f 92 c0             	setb   al
c0027dbb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dbe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027dc1:	83 d6 00             	adc    esi,0x0
c0027dc4:	01 c7                	add    edi,eax
c0027dc6:	83 d6 00             	adc    esi,0x0
c0027dc9:	01 ca                	add    edx,ecx
c0027dcb:	0f 92 c1             	setb   cl
c0027dce:	0f b6 c9             	movzx  ecx,cl
c0027dd1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027dd4:	83 d6 00             	adc    esi,0x0
c0027dd7:	01 cf                	add    edi,ecx
c0027dd9:	83 d6 00             	adc    esi,0x0
c0027ddc:	31 c9                	xor    ecx,ecx
c0027dde:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027de1:	0f 95 c1             	setne  cl
c0027de4:	09 cf                	or     edi,ecx
c0027de6:	85 f6                	test   esi,esi
c0027de8:	78 0c                	js     c0027df6 <__muldf3+0x1f6>
c0027dea:	01 f6                	add    esi,esi
c0027dec:	89 f8                	mov    eax,edi
c0027dee:	c1 e8 1f             	shr    eax,0x1f
c0027df1:	09 c6                	or     esi,eax
c0027df3:	01 ff                	add    edi,edi
c0027df5:	4b                   	dec    ebx
c0027df6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dfc:	0f 8f 85 00 00 00    	jg     c0027e87 <__muldf3+0x287>
c0027e02:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e08:	85 db                	test   ebx,ebx
c0027e0a:	0f 8f 84 00 00 00    	jg     c0027e94 <__muldf3+0x294>
c0027e10:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e13:	7c 79                	jl     c0027e8e <__muldf3+0x28e>
c0027e15:	ba 01 00 00 00       	mov    edx,0x1
c0027e1a:	29 da                	sub    edx,ebx
c0027e1c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e22:	83 fa 1f             	cmp    edx,0x1f
c0027e25:	7e 30                	jle    c0027e57 <__muldf3+0x257>
c0027e27:	83 fa 20             	cmp    edx,0x20
c0027e2a:	75 0b                	jne    c0027e37 <__muldf3+0x237>
c0027e2c:	31 c0                	xor    eax,eax
c0027e2e:	85 ff                	test   edi,edi
c0027e30:	0f 95 c0             	setne  al
c0027e33:	89 c7                	mov    edi,eax
c0027e35:	eb 1a                	jmp    c0027e51 <__muldf3+0x251>
c0027e37:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e3a:	89 f0                	mov    eax,esi
c0027e3c:	d3 e0                	shl    eax,cl
c0027e3e:	09 f8                	or     eax,edi
c0027e40:	0f 95 c0             	setne  al
c0027e43:	0f b6 c0             	movzx  eax,al
c0027e46:	89 c7                	mov    edi,eax
c0027e48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e4d:	29 d9                	sub    ecx,ebx
c0027e4f:	d3 ee                	shr    esi,cl
c0027e51:	09 f7                	or     edi,esi
c0027e53:	31 db                	xor    ebx,ebx
c0027e55:	eb 3b                	jmp    c0027e92 <__muldf3+0x292>
c0027e57:	83 c3 1f             	add    ebx,0x1f
c0027e5a:	89 f0                	mov    eax,esi
c0027e5c:	88 d9                	mov    cl,bl
c0027e5e:	d3 e0                	shl    eax,cl
c0027e60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e63:	89 f8                	mov    eax,edi
c0027e65:	88 d1                	mov    cl,dl
c0027e67:	d3 e8                	shr    eax,cl
c0027e69:	89 c1                	mov    ecx,eax
c0027e6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e6e:	09 c8                	or     eax,ecx
c0027e70:	88 d9                	mov    cl,bl
c0027e72:	d3 e7                	shl    edi,cl
c0027e74:	31 db                	xor    ebx,ebx
c0027e76:	85 ff                	test   edi,edi
c0027e78:	0f 95 c3             	setne  bl
c0027e7b:	89 df                	mov    edi,ebx
c0027e7d:	09 c7                	or     edi,eax
c0027e7f:	88 d1                	mov    cl,dl
c0027e81:	d3 ee                	shr    esi,cl
c0027e83:	31 db                	xor    ebx,ebx
c0027e85:	eb 0d                	jmp    c0027e94 <__muldf3+0x294>
c0027e87:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e8c:	eb 02                	jmp    c0027e90 <__muldf3+0x290>
c0027e8e:	31 db                	xor    ebx,ebx
c0027e90:	31 ff                	xor    edi,edi
c0027e92:	31 f6                	xor    esi,esi
c0027e94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e97:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e9a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e9f:	09 c3                	or     ebx,eax
c0027ea1:	c1 e3 14             	shl    ebx,0x14
c0027ea4:	89 f0                	mov    eax,esi
c0027ea6:	c1 e8 0b             	shr    eax,0xb
c0027ea9:	09 c3                	or     ebx,eax
c0027eab:	89 f8                	mov    eax,edi
c0027ead:	c1 e8 0b             	shr    eax,0xb
c0027eb0:	c1 e6 15             	shl    esi,0x15
c0027eb3:	09 c6                	or     esi,eax
c0027eb5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ebb:	0f 95 c1             	setne  cl
c0027ebe:	09 c8                	or     eax,ecx
c0027ec0:	83 e0 01             	and    eax,0x1
c0027ec3:	c1 ef 0a             	shr    edi,0xa
c0027ec6:	21 c7                	and    edi,eax
c0027ec8:	01 f7                	add    edi,esi
c0027eca:	83 d3 00             	adc    ebx,0x0
c0027ecd:	89 da                	mov    edx,ebx
c0027ecf:	eb 03                	jmp    c0027ed4 <__muldf3+0x2d4>
c0027ed1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ed4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ed7:	89 f8                	mov    eax,edi
c0027ed9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027edc:	83 c4 24             	add    esp,0x24
c0027edf:	5b                   	pop    ebx
c0027ee0:	5e                   	pop    esi
c0027ee1:	5f                   	pop    edi
c0027ee2:	5d                   	pop    ebp
c0027ee3:	c3                   	ret    

c0027ee4 <__divdf3>:
c0027ee4:	55                   	push   ebp
c0027ee5:	89 e5                	mov    ebp,esp
c0027ee7:	57                   	push   edi
c0027ee8:	56                   	push   esi
c0027ee9:	53                   	push   ebx
c0027eea:	83 ec 2c             	sub    esp,0x2c
c0027eed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ef0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ef3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ef6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ef9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027efc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027eff:	89 ce                	mov    esi,ecx
c0027f01:	89 c8                	mov    eax,ecx
c0027f03:	c1 f8 14             	sar    eax,0x14
c0027f06:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f09:	89 f8                	mov    eax,edi
c0027f0b:	89 fb                	mov    ebx,edi
c0027f0d:	c1 e3 0b             	shl    ebx,0xb
c0027f10:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f13:	c1 e6 0b             	shl    esi,0xb
c0027f16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f1c:	c1 e8 15             	shr    eax,0x15
c0027f1f:	09 c6                	or     esi,eax
c0027f21:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f24:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f27:	89 c2                	mov    edx,eax
c0027f29:	c1 fa 14             	sar    edx,0x14
c0027f2c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f2f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f32:	89 de                	mov    esi,ebx
c0027f34:	c1 e6 0b             	shl    esi,0xb
c0027f37:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f3a:	c1 e0 0b             	shl    eax,0xb
c0027f3d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f42:	c1 eb 15             	shr    ebx,0x15
c0027f45:	09 d8                	or     eax,ebx
c0027f47:	89 c2                	mov    edx,eax
c0027f49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f4c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f51:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f54:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f57:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f5d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f60:	29 d8                	sub    eax,ebx
c0027f62:	05 ff 03 00 00       	add    eax,0x3ff
c0027f67:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f6a:	46                   	inc    esi
c0027f6b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f71:	0f 85 a5 00 00 00    	jne    c002801c <__divdf3+0x138>
c0027f77:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f7a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f7d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f81:	74 2a                	je     c0027fad <__divdf3+0xc9>
c0027f83:	85 f6                	test   esi,esi
c0027f85:	0f 85 cc 02 00 00    	jne    c0028257 <__divdf3+0x373>
c0027f8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f8e:	40                   	inc    eax
c0027f8f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f94:	75 26                	jne    c0027fbc <__divdf3+0xd8>
c0027f96:	85 db                	test   ebx,ebx
c0027f98:	74 22                	je     c0027fbc <__divdf3+0xd8>
c0027f9a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f9d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fa0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fa3:	09 d0                	or     eax,edx
c0027fa5:	0f 85 ac 02 00 00    	jne    c0028257 <__divdf3+0x373>
c0027fab:	eb 63                	jmp    c0028010 <__divdf3+0x12c>
c0027fad:	85 f6                	test   esi,esi
c0027faf:	75 22                	jne    c0027fd3 <__divdf3+0xef>
c0027fb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fb4:	40                   	inc    eax
c0027fb5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fba:	74 36                	je     c0027ff2 <__divdf3+0x10e>
c0027fbc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fc0:	0f 89 91 02 00 00    	jns    c0028257 <__divdf3+0x373>
c0027fc6:	89 f8                	mov    eax,edi
c0027fc8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fce:	e9 80 02 00 00       	jmp    c0028253 <__divdf3+0x36f>
c0027fd3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fd6:	01 f6                	add    esi,esi
c0027fd8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fdb:	c1 ef 1f             	shr    edi,0x1f
c0027fde:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fe1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fe4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fe7:	09 f7                	or     edi,esi
c0027fe9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fec:	78 2e                	js     c002801c <__divdf3+0x138>
c0027fee:	89 c8                	mov    eax,ecx
c0027ff0:	eb e1                	jmp    c0027fd3 <__divdf3+0xef>
c0027ff2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ff5:	09 d0                	or     eax,edx
c0027ff7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ffb:	74 0f                	je     c002800c <__divdf3+0x128>
c0027ffd:	85 c0                	test   eax,eax
c0027fff:	74 bb                	je     c0027fbc <__divdf3+0xd8>
c0028001:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028004:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028007:	e9 4b 02 00 00       	jmp    c0028257 <__divdf3+0x373>
c002800c:	85 c0                	test   eax,eax
c002800e:	75 ac                	jne    c0027fbc <__divdf3+0xd8>
c0028010:	31 ff                	xor    edi,edi
c0028012:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028017:	e9 3b 02 00 00       	jmp    c0028257 <__divdf3+0x373>
c002801c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002801f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028022:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028028:	75 6b                	jne    c0028095 <__divdf3+0x1b1>
c002802a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002802d:	09 d6                	or     esi,edx
c002802f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028033:	74 28                	je     c002805d <__divdf3+0x179>
c0028035:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028038:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002803b:	85 f6                	test   esi,esi
c002803d:	0f 85 14 02 00 00    	jne    c0028257 <__divdf3+0x373>
c0028043:	31 ff                	xor    edi,edi
c0028045:	31 c9                	xor    ecx,ecx
c0028047:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002804a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002804d:	0f 89 04 02 00 00    	jns    c0028257 <__divdf3+0x373>
c0028053:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028058:	e9 fa 01 00 00       	jmp    c0028257 <__divdf3+0x373>
c002805d:	85 f6                	test   esi,esi
c002805f:	75 1b                	jne    c002807c <__divdf3+0x198>
c0028061:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028064:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028067:	25 00 00 00 80       	and    eax,0x80000000
c002806c:	31 c9                	xor    ecx,ecx
c002806e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028073:	89 cf                	mov    edi,ecx
c0028075:	89 c1                	mov    ecx,eax
c0028077:	e9 db 01 00 00       	jmp    c0028257 <__divdf3+0x373>
c002807c:	01 d2                	add    edx,edx
c002807e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028081:	c1 eb 1f             	shr    ebx,0x1f
c0028084:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028087:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002808a:	8d 48 01             	lea    ecx,[eax+0x1]
c002808d:	09 da                	or     edx,ebx
c002808f:	78 04                	js     c0028095 <__divdf3+0x1b1>
c0028091:	89 c8                	mov    eax,ecx
c0028093:	eb e7                	jmp    c002807c <__divdf3+0x198>
c0028095:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028098:	81 ce 00 00 00 80    	or     esi,0x80000000
c002809e:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280a4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280a7:	39 d6                	cmp    esi,edx
c00280a9:	77 0d                	ja     c00280b8 <__divdf3+0x1d4>
c00280ab:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280ae:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280b1:	72 1b                	jb     c00280ce <__divdf3+0x1ea>
c00280b3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280b6:	75 16                	jne    c00280ce <__divdf3+0x1ea>
c00280b8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280be:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280c1:	83 de 00             	sbb    esi,0x0
c00280c4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280c7:	ba 01 00 00 00       	mov    edx,0x1
c00280cc:	eb 02                	jmp    c00280d0 <__divdf3+0x1ec>
c00280ce:	31 d2                	xor    edx,edx
c00280d0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280d7:	31 ff                	xor    edi,edi
c00280d9:	01 ff                	add    edi,edi
c00280db:	89 d1                	mov    ecx,edx
c00280dd:	c1 e9 1f             	shr    ecx,0x1f
c00280e0:	09 cf                	or     edi,ecx
c00280e2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280e5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280e8:	89 da                	mov    edx,ebx
c00280ea:	89 f3                	mov    ebx,esi
c00280ec:	8d 34 36             	lea    esi,[esi+esi*1]
c00280ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280f2:	c1 e9 1f             	shr    ecx,0x1f
c00280f5:	09 ce                	or     esi,ecx
c00280f7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280fa:	01 c9                	add    ecx,ecx
c00280fc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280ff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028102:	85 db                	test   ebx,ebx
c0028104:	78 29                	js     c002812f <__divdf3+0x24b>
c0028106:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028109:	72 07                	jb     c0028112 <__divdf3+0x22e>
c002810b:	75 3c                	jne    c0028149 <__divdf3+0x265>
c002810d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028110:	77 37                	ja     c0028149 <__divdf3+0x265>
c0028112:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028115:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028118:	31 d2                	xor    edx,edx
c002811a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002811d:	0f 97 c2             	seta   dl
c0028120:	29 d6                	sub    esi,edx
c0028122:	89 d9                	mov    ecx,ebx
c0028124:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028127:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002812a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002812d:	eb 17                	jmp    c0028146 <__divdf3+0x262>
c002812f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028132:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028135:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028138:	0f 97 c1             	seta   cl
c002813b:	0f b6 c9             	movzx  ecx,cl
c002813e:	29 ce                	sub    esi,ecx
c0028140:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028143:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028146:	83 ca 01             	or     edx,0x1
c0028149:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002814c:	75 8b                	jne    c00280d9 <__divdf3+0x1f5>
c002814e:	c1 e7 09             	shl    edi,0x9
c0028151:	89 d1                	mov    ecx,edx
c0028153:	c1 e9 17             	shr    ecx,0x17
c0028156:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028159:	09 f3                	or     ebx,esi
c002815b:	0f 95 c3             	setne  bl
c002815e:	0f b6 db             	movzx  ebx,bl
c0028161:	c1 e2 09             	shl    edx,0x9
c0028164:	09 d3                	or     ebx,edx
c0028166:	89 ca                	mov    edx,ecx
c0028168:	09 fa                	or     edx,edi
c002816a:	78 0c                	js     c0028178 <__divdf3+0x294>
c002816c:	01 d2                	add    edx,edx
c002816e:	89 d9                	mov    ecx,ebx
c0028170:	c1 e9 1f             	shr    ecx,0x1f
c0028173:	09 ca                	or     edx,ecx
c0028175:	01 db                	add    ebx,ebx
c0028177:	48                   	dec    eax
c0028178:	3d fe 07 00 00       	cmp    eax,0x7fe
c002817d:	0f 8f 83 00 00 00    	jg     c0028206 <__divdf3+0x322>
c0028183:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028189:	85 c0                	test   eax,eax
c002818b:	0f 8f 82 00 00 00    	jg     c0028213 <__divdf3+0x32f>
c0028191:	83 f8 cc             	cmp    eax,0xffffffcc
c0028194:	7c 77                	jl     c002820d <__divdf3+0x329>
c0028196:	be 01 00 00 00       	mov    esi,0x1
c002819b:	29 c6                	sub    esi,eax
c002819d:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281a3:	83 fe 1f             	cmp    esi,0x1f
c00281a6:	7e 2f                	jle    c00281d7 <__divdf3+0x2f3>
c00281a8:	83 fe 20             	cmp    esi,0x20
c00281ab:	75 0a                	jne    c00281b7 <__divdf3+0x2d3>
c00281ad:	85 db                	test   ebx,ebx
c00281af:	0f 95 c3             	setne  bl
c00281b2:	0f b6 db             	movzx  ebx,bl
c00281b5:	eb 1a                	jmp    c00281d1 <__divdf3+0x2ed>
c00281b7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281ba:	89 d7                	mov    edi,edx
c00281bc:	d3 e7                	shl    edi,cl
c00281be:	89 f9                	mov    ecx,edi
c00281c0:	09 d9                	or     ecx,ebx
c00281c2:	0f 95 c3             	setne  bl
c00281c5:	0f b6 db             	movzx  ebx,bl
c00281c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281cd:	29 c1                	sub    ecx,eax
c00281cf:	d3 ea                	shr    edx,cl
c00281d1:	09 d3                	or     ebx,edx
c00281d3:	31 c0                	xor    eax,eax
c00281d5:	eb 3a                	jmp    c0028211 <__divdf3+0x32d>
c00281d7:	83 c0 1f             	add    eax,0x1f
c00281da:	89 d7                	mov    edi,edx
c00281dc:	88 c1                	mov    cl,al
c00281de:	d3 e7                	shl    edi,cl
c00281e0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281e3:	89 df                	mov    edi,ebx
c00281e5:	89 f1                	mov    ecx,esi
c00281e7:	d3 ef                	shr    edi,cl
c00281e9:	89 f9                	mov    ecx,edi
c00281eb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ee:	09 cf                	or     edi,ecx
c00281f0:	88 c1                	mov    cl,al
c00281f2:	d3 e3                	shl    ebx,cl
c00281f4:	85 db                	test   ebx,ebx
c00281f6:	0f 95 c3             	setne  bl
c00281f9:	0f b6 db             	movzx  ebx,bl
c00281fc:	09 fb                	or     ebx,edi
c00281fe:	89 f1                	mov    ecx,esi
c0028200:	d3 ea                	shr    edx,cl
c0028202:	31 c0                	xor    eax,eax
c0028204:	eb 0d                	jmp    c0028213 <__divdf3+0x32f>
c0028206:	b8 ff 07 00 00       	mov    eax,0x7ff
c002820b:	eb 02                	jmp    c002820f <__divdf3+0x32b>
c002820d:	31 c0                	xor    eax,eax
c002820f:	31 db                	xor    ebx,ebx
c0028211:	31 d2                	xor    edx,edx
c0028213:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028216:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028219:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002821f:	09 c8                	or     eax,ecx
c0028221:	c1 e0 14             	shl    eax,0x14
c0028224:	89 d1                	mov    ecx,edx
c0028226:	c1 e9 0b             	shr    ecx,0xb
c0028229:	09 c8                	or     eax,ecx
c002822b:	89 c6                	mov    esi,eax
c002822d:	89 d9                	mov    ecx,ebx
c002822f:	c1 e9 0b             	shr    ecx,0xb
c0028232:	c1 e2 15             	shl    edx,0x15
c0028235:	09 ca                	or     edx,ecx
c0028237:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002823d:	0f 95 c0             	setne  al
c0028240:	09 c1                	or     ecx,eax
c0028242:	83 e1 01             	and    ecx,0x1
c0028245:	c1 eb 0a             	shr    ebx,0xa
c0028248:	21 cb                	and    ebx,ecx
c002824a:	01 d3                	add    ebx,edx
c002824c:	89 d8                	mov    eax,ebx
c002824e:	83 d6 00             	adc    esi,0x0
c0028251:	89 f2                	mov    edx,esi
c0028253:	89 c7                	mov    edi,eax
c0028255:	89 d1                	mov    ecx,edx
c0028257:	89 f8                	mov    eax,edi
c0028259:	89 ca                	mov    edx,ecx
c002825b:	83 c4 2c             	add    esp,0x2c
c002825e:	5b                   	pop    ebx
c002825f:	5e                   	pop    esi
c0028260:	5f                   	pop    edi
c0028261:	5d                   	pop    ebp
c0028262:	c3                   	ret    

c0028263 <__floatsidf>:
c0028263:	55                   	push   ebp
c0028264:	89 e5                	mov    ebp,esp
c0028266:	56                   	push   esi
c0028267:	53                   	push   ebx
c0028268:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002826b:	85 db                	test   ebx,ebx
c002826d:	7e 15                	jle    c0028284 <__floatsidf+0x21>
c002826f:	0f bd cb             	bsr    ecx,ebx
c0028272:	83 f1 1f             	xor    ecx,0x1f
c0028275:	d3 e3                	shl    ebx,cl
c0028277:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002827d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028282:	eb 21                	jmp    c00282a5 <__floatsidf+0x42>
c0028284:	b8 00 00 00 00       	mov    eax,0x0
c0028289:	ba 00 00 00 00       	mov    edx,0x0
c002828e:	74 2a                	je     c00282ba <__floatsidf+0x57>
c0028290:	f7 db                	neg    ebx
c0028292:	0f bd cb             	bsr    ecx,ebx
c0028295:	83 f1 1f             	xor    ecx,0x1f
c0028298:	d3 e3                	shl    ebx,cl
c002829a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282a0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282a5:	29 c8                	sub    eax,ecx
c00282a7:	c1 e0 14             	shl    eax,0x14
c00282aa:	89 c1                	mov    ecx,eax
c00282ac:	89 de                	mov    esi,ebx
c00282ae:	c1 ee 0b             	shr    esi,0xb
c00282b1:	09 f1                	or     ecx,esi
c00282b3:	89 ca                	mov    edx,ecx
c00282b5:	c1 e3 15             	shl    ebx,0x15
c00282b8:	89 d8                	mov    eax,ebx
c00282ba:	5b                   	pop    ebx
c00282bb:	5e                   	pop    esi
c00282bc:	5d                   	pop    ebp
c00282bd:	c3                   	ret    

c00282be <__floatunsidf>:
c00282be:	55                   	push   ebp
c00282bf:	89 e5                	mov    ebp,esp
c00282c1:	56                   	push   esi
c00282c2:	53                   	push   ebx
c00282c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282c6:	85 db                	test   ebx,ebx
c00282c8:	74 2a                	je     c00282f4 <__floatunsidf+0x36>
c00282ca:	0f bd cb             	bsr    ecx,ebx
c00282cd:	83 f1 1f             	xor    ecx,0x1f
c00282d0:	d3 e3                	shl    ebx,cl
c00282d2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282d8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282dd:	29 c8                	sub    eax,ecx
c00282df:	c1 e0 14             	shl    eax,0x14
c00282e2:	89 c1                	mov    ecx,eax
c00282e4:	89 de                	mov    esi,ebx
c00282e6:	c1 ee 0b             	shr    esi,0xb
c00282e9:	09 f1                	or     ecx,esi
c00282eb:	89 ca                	mov    edx,ecx
c00282ed:	c1 e3 15             	shl    ebx,0x15
c00282f0:	89 d8                	mov    eax,ebx
c00282f2:	eb 04                	jmp    c00282f8 <__floatunsidf+0x3a>
c00282f4:	31 c0                	xor    eax,eax
c00282f6:	31 d2                	xor    edx,edx
c00282f8:	5b                   	pop    ebx
c00282f9:	5e                   	pop    esi
c00282fa:	5d                   	pop    ebp
c00282fb:	c3                   	ret    

c00282fc <__fixdfsi>:
c00282fc:	55                   	push   ebp
c00282fd:	89 e5                	mov    ebp,esp
c00282ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028302:	89 d1                	mov    ecx,edx
c0028304:	c1 e1 0b             	shl    ecx,0xb
c0028307:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002830d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028310:	c1 e8 15             	shr    eax,0x15
c0028313:	09 c1                	or     ecx,eax
c0028315:	c1 fa 14             	sar    edx,0x14
c0028318:	78 1f                	js     c0028339 <__fixdfsi+0x3d>
c002831a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028320:	31 c0                	xor    eax,eax
c0028322:	83 fa 1e             	cmp    edx,0x1e
c0028325:	77 40                	ja     c0028367 <__fixdfsi+0x6b>
c0028327:	89 c8                	mov    eax,ecx
c0028329:	0d 00 00 00 80       	or     eax,0x80000000
c002832e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028333:	29 d1                	sub    ecx,edx
c0028335:	d3 e8                	shr    eax,cl
c0028337:	eb 2e                	jmp    c0028367 <__fixdfsi+0x6b>
c0028339:	31 c0                	xor    eax,eax
c002833b:	81 c2 01 04 00 00    	add    edx,0x401
c0028341:	78 24                	js     c0028367 <__fixdfsi+0x6b>
c0028343:	83 fa 1e             	cmp    edx,0x1e
c0028346:	7e 09                	jle    c0028351 <__fixdfsi+0x55>
c0028348:	83 fa 1f             	cmp    edx,0x1f
c002834b:	75 18                	jne    c0028365 <__fixdfsi+0x69>
c002834d:	85 c9                	test   ecx,ecx
c002834f:	75 14                	jne    c0028365 <__fixdfsi+0x69>
c0028351:	89 c8                	mov    eax,ecx
c0028353:	0d 00 00 00 80       	or     eax,0x80000000
c0028358:	b9 1f 00 00 00       	mov    ecx,0x1f
c002835d:	29 d1                	sub    ecx,edx
c002835f:	d3 e8                	shr    eax,cl
c0028361:	f7 d8                	neg    eax
c0028363:	eb 02                	jmp    c0028367 <__fixdfsi+0x6b>
c0028365:	31 c0                	xor    eax,eax
c0028367:	5d                   	pop    ebp
c0028368:	c3                   	ret    

c0028369 <__fixunsdfsi>:
c0028369:	55                   	push   ebp
c002836a:	89 e5                	mov    ebp,esp
c002836c:	53                   	push   ebx
c002836d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028373:	89 d3                	mov    ebx,edx
c0028375:	c1 fb 14             	sar    ebx,0x14
c0028378:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002837e:	31 c0                	xor    eax,eax
c0028380:	83 fb 1f             	cmp    ebx,0x1f
c0028383:	77 1d                	ja     c00283a2 <__fixunsdfsi+0x39>
c0028385:	89 d0                	mov    eax,edx
c0028387:	c1 e0 0b             	shl    eax,0xb
c002838a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002838f:	c1 e9 15             	shr    ecx,0x15
c0028392:	09 c8                	or     eax,ecx
c0028394:	0d 00 00 00 80       	or     eax,0x80000000
c0028399:	b9 1f 00 00 00       	mov    ecx,0x1f
c002839e:	29 d9                	sub    ecx,ebx
c00283a0:	d3 e8                	shr    eax,cl
c00283a2:	5b                   	pop    ebx
c00283a3:	5d                   	pop    ebp
c00283a4:	c3                   	ret    

c00283a5 <__cmpdf2>:
c00283a5:	55                   	push   ebp
c00283a6:	89 e5                	mov    ebp,esp
c00283a8:	57                   	push   edi
c00283a9:	56                   	push   esi
c00283aa:	53                   	push   ebx
c00283ab:	83 ec 0c             	sub    esp,0xc
c00283ae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283b1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283b4:	89 ca                	mov    edx,ecx
c00283b6:	c1 ea 14             	shr    edx,0x14
c00283b9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283bf:	89 cb                	mov    ebx,ecx
c00283c1:	c1 fb 1f             	sar    ebx,0x1f
c00283c4:	31 da                	xor    edx,ebx
c00283c6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283c9:	89 df                	mov    edi,ebx
c00283cb:	c1 e7 0b             	shl    edi,0xb
c00283ce:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283d1:	c1 e1 0b             	shl    ecx,0xb
c00283d4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283da:	c1 eb 15             	shr    ebx,0x15
c00283dd:	09 d9                	or     ecx,ebx
c00283df:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283e5:	89 ce                	mov    esi,ecx
c00283e7:	c1 ee 14             	shr    esi,0x14
c00283ea:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283f0:	89 cb                	mov    ebx,ecx
c00283f2:	c1 fb 1f             	sar    ebx,0x1f
c00283f5:	31 de                	xor    esi,ebx
c00283f7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283fa:	89 df                	mov    edi,ebx
c00283fc:	c1 e7 0b             	shl    edi,0xb
c00283ff:	c1 e1 0b             	shl    ecx,0xb
c0028402:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028408:	c1 eb 15             	shr    ebx,0x15
c002840b:	09 d9                	or     ecx,ebx
c002840d:	89 d3                	mov    ebx,edx
c002840f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028415:	43                   	inc    ebx
c0028416:	83 fb 01             	cmp    ebx,0x1
c0028419:	77 08                	ja     c0028423 <__cmpdf2+0x7e>
c002841b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002841e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028421:	75 68                	jne    c002848b <__cmpdf2+0xe6>
c0028423:	89 f3                	mov    ebx,esi
c0028425:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002842b:	43                   	inc    ebx
c002842c:	83 fb 01             	cmp    ebx,0x1
c002842f:	77 06                	ja     c0028437 <__cmpdf2+0x92>
c0028431:	89 fb                	mov    ebx,edi
c0028433:	09 cb                	or     ebx,ecx
c0028435:	75 54                	jne    c002848b <__cmpdf2+0xe6>
c0028437:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002843a:	09 f8                	or     eax,edi
c002843c:	09 c8                	or     eax,ecx
c002843e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028441:	75 12                	jne    c0028455 <__cmpdf2+0xb0>
c0028443:	8d 42 01             	lea    eax,[edx+0x1]
c0028446:	83 f8 01             	cmp    eax,0x1
c0028449:	77 0a                	ja     c0028455 <__cmpdf2+0xb0>
c002844b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002844e:	31 c0                	xor    eax,eax
c0028450:	83 fb 01             	cmp    ebx,0x1
c0028453:	76 36                	jbe    c002848b <__cmpdf2+0xe6>
c0028455:	b8 01 00 00 00       	mov    eax,0x1
c002845a:	39 f2                	cmp    edx,esi
c002845c:	7f 2d                	jg     c002848b <__cmpdf2+0xe6>
c002845e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028463:	7c 26                	jl     c002848b <__cmpdf2+0xe6>
c0028465:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028468:	77 07                	ja     c0028471 <__cmpdf2+0xcc>
c002846a:	72 16                	jb     c0028482 <__cmpdf2+0xdd>
c002846c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002846f:	76 0a                	jbe    c002847b <__cmpdf2+0xd6>
c0028471:	89 d0                	mov    eax,edx
c0028473:	c1 f8 1f             	sar    eax,0x1f
c0028476:	83 c8 01             	or     eax,0x1
c0028479:	eb 10                	jmp    c002848b <__cmpdf2+0xe6>
c002847b:	b8 00 00 00 00       	mov    eax,0x0
c0028480:	73 09                	jae    c002848b <__cmpdf2+0xe6>
c0028482:	89 d0                	mov    eax,edx
c0028484:	c1 f8 1f             	sar    eax,0x1f
c0028487:	83 e0 02             	and    eax,0x2
c002848a:	48                   	dec    eax
c002848b:	83 c4 0c             	add    esp,0xc
c002848e:	5b                   	pop    ebx
c002848f:	5e                   	pop    esi
c0028490:	5f                   	pop    edi
c0028491:	5d                   	pop    ebp
c0028492:	c3                   	ret    

c0028493 <__eqdf2>:
c0028493:	55                   	push   ebp
c0028494:	89 e5                	mov    ebp,esp
c0028496:	50                   	push   eax
c0028497:	6a 01                	push   0x1
c0028499:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002849c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002849f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284a5:	e8 fb fe ff ff       	call   c00283a5 <__cmpdf2>
c00284aa:	83 c4 18             	add    esp,0x18
c00284ad:	c9                   	leave  
c00284ae:	c3                   	ret    

c00284af <__nedf2>:
c00284af:	eb e2                	jmp    c0028493 <__eqdf2>

c00284b1 <__gtdf2>:
c00284b1:	55                   	push   ebp
c00284b2:	89 e5                	mov    ebp,esp
c00284b4:	50                   	push   eax
c00284b5:	6a ff                	push   0xffffffff
c00284b7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284c3:	e8 dd fe ff ff       	call   c00283a5 <__cmpdf2>
c00284c8:	83 c4 18             	add    esp,0x18
c00284cb:	c9                   	leave  
c00284cc:	c3                   	ret    

c00284cd <__gedf2>:
c00284cd:	eb e2                	jmp    c00284b1 <__gtdf2>

c00284cf <__ltdf2>:
c00284cf:	eb c2                	jmp    c0028493 <__eqdf2>

c00284d1 <__ledf2>:
c00284d1:	eb c0                	jmp    c0028493 <__eqdf2>

c00284d3 <__truncdfsf2>:
c00284d3:	55                   	push   ebp
c00284d4:	89 e5                	mov    ebp,esp
c00284d6:	57                   	push   edi
c00284d7:	56                   	push   esi
c00284d8:	53                   	push   ebx
c00284d9:	83 ec 0c             	sub    esp,0xc
c00284dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284df:	89 d1                	mov    ecx,edx
c00284e1:	c1 f9 14             	sar    ecx,0x14
c00284e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284e7:	89 df                	mov    edi,ebx
c00284e9:	c1 e7 0b             	shl    edi,0xb
c00284ec:	89 d0                	mov    eax,edx
c00284ee:	c1 e0 0b             	shl    eax,0xb
c00284f1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284f6:	c1 eb 15             	shr    ebx,0x15
c00284f9:	09 d8                	or     eax,ebx
c00284fb:	89 cb                	mov    ebx,ecx
c00284fd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028503:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028509:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002850f:	0f 86 9e 00 00 00    	jbe    c00285b3 <__truncdfsf2+0xe0>
c0028515:	85 db                	test   ebx,ebx
c0028517:	75 0a                	jne    c0028523 <__truncdfsf2+0x50>
c0028519:	c1 fa 17             	sar    edx,0x17
c002851c:	30 d2                	xor    dl,dl
c002851e:	e9 84 00 00 00       	jmp    c00285a7 <__truncdfsf2+0xd4>
c0028523:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028529:	83 fe 83             	cmp    esi,0xffffff83
c002852c:	7d 4b                	jge    c0028579 <__truncdfsf2+0xa6>
c002852e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028533:	29 f1                	sub    ecx,esi
c0028535:	83 f9 1f             	cmp    ecx,0x1f
c0028538:	7f 6b                	jg     c00285a5 <__truncdfsf2+0xd2>
c002853a:	0d 00 00 00 80       	or     eax,0x80000000
c002853f:	89 c3                	mov    ebx,eax
c0028541:	d3 eb                	shr    ebx,cl
c0028543:	be 01 00 00 00       	mov    esi,0x1
c0028548:	d3 e6                	shl    esi,cl
c002854a:	4e                   	dec    esi
c002854b:	21 f0                	and    eax,esi
c002854d:	09 f8                	or     eax,edi
c002854f:	0f 95 c0             	setne  al
c0028552:	0f b6 c0             	movzx  eax,al
c0028555:	09 c3                	or     ebx,eax
c0028557:	89 d9                	mov    ecx,ebx
c0028559:	c1 e9 08             	shr    ecx,0x8
c002855c:	f6 c3 7f             	test   bl,0x7f
c002855f:	0f 95 c0             	setne  al
c0028562:	09 c8                	or     eax,ecx
c0028564:	83 e0 01             	and    eax,0x1
c0028567:	c1 eb 07             	shr    ebx,0x7
c002856a:	21 c3                	and    ebx,eax
c002856c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028572:	09 d1                	or     ecx,edx
c0028574:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028577:	eb 76                	jmp    c00285ef <__truncdfsf2+0x11c>
c0028579:	83 c6 80             	add    esi,0xffffff80
c002857c:	7e 1d                	jle    c002859b <__truncdfsf2+0xc8>
c002857e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028584:	75 0b                	jne    c0028591 <__truncdfsf2+0xbe>
c0028586:	09 f8                	or     eax,edi
c0028588:	74 09                	je     c0028593 <__truncdfsf2+0xc0>
c002858a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002858f:	eb 02                	jmp    c0028593 <__truncdfsf2+0xc0>
c0028591:	31 c0                	xor    eax,eax
c0028593:	c1 fa 17             	sar    edx,0x17
c0028596:	80 ca ff             	or     dl,0xff
c0028599:	eb 0e                	jmp    c00285a9 <__truncdfsf2+0xd6>
c002859b:	c1 fa 1f             	sar    edx,0x1f
c002859e:	c1 e2 08             	shl    edx,0x8
c00285a1:	09 ca                	or     edx,ecx
c00285a3:	eb 04                	jmp    c00285a9 <__truncdfsf2+0xd6>
c00285a5:	31 d2                	xor    edx,edx
c00285a7:	31 c0                	xor    eax,eax
c00285a9:	c1 e2 17             	shl    edx,0x17
c00285ac:	c1 e8 08             	shr    eax,0x8
c00285af:	09 d0                	or     eax,edx
c00285b1:	eb 3c                	jmp    c00285ef <__truncdfsf2+0x11c>
c00285b3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285b9:	89 ca                	mov    edx,ecx
c00285bb:	c1 fa 0b             	sar    edx,0xb
c00285be:	c1 e2 08             	shl    edx,0x8
c00285c1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285c4:	31 db                	xor    ebx,ebx
c00285c6:	85 ff                	test   edi,edi
c00285c8:	0f 95 c3             	setne  bl
c00285cb:	09 d8                	or     eax,ebx
c00285cd:	89 c3                	mov    ebx,eax
c00285cf:	c1 eb 08             	shr    ebx,0x8
c00285d2:	a8 7f                	test   al,0x7f
c00285d4:	0f 95 c2             	setne  dl
c00285d7:	89 d6                	mov    esi,edx
c00285d9:	09 de                	or     esi,ebx
c00285db:	83 e6 01             	and    esi,0x1
c00285de:	c1 e8 07             	shr    eax,0x7
c00285e1:	21 f0                	and    eax,esi
c00285e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285e6:	09 ca                	or     edx,ecx
c00285e8:	c1 e2 17             	shl    edx,0x17
c00285eb:	09 da                	or     edx,ebx
c00285ed:	01 d0                	add    eax,edx
c00285ef:	83 c4 0c             	add    esp,0xc
c00285f2:	5b                   	pop    ebx
c00285f3:	5e                   	pop    esi
c00285f4:	5f                   	pop    edi
c00285f5:	5d                   	pop    ebp
c00285f6:	c3                   	ret    

c00285f7 <__extendsfdf2>:
c00285f7:	55                   	push   ebp
c00285f8:	89 e5                	mov    ebp,esp
c00285fa:	57                   	push   edi
c00285fb:	56                   	push   esi
c00285fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285ff:	89 d1                	mov    ecx,edx
c0028601:	c1 f9 17             	sar    ecx,0x17
c0028604:	c1 e2 08             	shl    edx,0x8
c0028607:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002860d:	89 c8                	mov    eax,ecx
c002860f:	80 e4 f8             	and    ah,0xf8
c0028612:	8d 71 01             	lea    esi,[ecx+0x1]
c0028615:	81 e6 fe 00 00 00    	and    esi,0xfe
c002861b:	75 27                	jne    c0028644 <__extendsfdf2+0x4d>
c002861d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028623:	75 18                	jne    c002863d <__extendsfdf2+0x46>
c0028625:	85 d2                	test   edx,edx
c0028627:	74 20                	je     c0028649 <__extendsfdf2+0x52>
c0028629:	41                   	inc    ecx
c002862a:	01 d2                	add    edx,edx
c002862c:	79 fb                	jns    c0028629 <__extendsfdf2+0x32>
c002862e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028634:	29 c8                	sub    eax,ecx
c0028636:	05 81 03 00 00       	add    eax,0x381
c002863b:	eb 0c                	jmp    c0028649 <__extendsfdf2+0x52>
c002863d:	05 00 07 00 00       	add    eax,0x700
c0028642:	eb 05                	jmp    c0028649 <__extendsfdf2+0x52>
c0028644:	05 80 03 00 00       	add    eax,0x380
c0028649:	c1 e0 14             	shl    eax,0x14
c002864c:	89 c1                	mov    ecx,eax
c002864e:	89 d0                	mov    eax,edx
c0028650:	c1 e8 0b             	shr    eax,0xb
c0028653:	09 c1                	or     ecx,eax
c0028655:	c1 e2 15             	shl    edx,0x15
c0028658:	89 d0                	mov    eax,edx
c002865a:	89 ca                	mov    edx,ecx
c002865c:	5e                   	pop    esi
c002865d:	5f                   	pop    edi
c002865e:	5d                   	pop    ebp
c002865f:	c3                   	ret    

c0028660 <fabs>:
c0028660:	83 ec 0c             	sub    esp,0xc
c0028663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028667:	89 04 24             	mov    DWORD PTR [esp],eax
c002866a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002866e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028673:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028677:	dd 04 24             	fld    QWORD PTR [esp]
c002867a:	83 c4 0c             	add    esp,0xc
c002867d:	c3                   	ret    
c002867e:	66 90                	xchg   ax,ax

c0028680 <lrint>:
c0028680:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028684:	83 ec 04             	sub    esp,0x4
c0028687:	db 1c 24             	fistp  DWORD PTR [esp]
c002868a:	58                   	pop    eax
c002868b:	c3                   	ret    

c002868c <lrintf>:
c002868c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028690:	83 ec 04             	sub    esp,0x4
c0028693:	db 1c 24             	fistp  DWORD PTR [esp]
c0028696:	58                   	pop    eax
c0028697:	c3                   	ret    

Disassembly of section .init:

c0028698 <_init>:
c0028698:	55                   	push   ebp
c0028699:	89 e5                	mov    ebp,esp
c002869b:	e8 78 7a fd ff       	call   c0000118 <frame_dummy>
c00286a0:	e8 63 e0 ff ff       	call   c0026708 <__do_global_ctors_aux>
c00286a5:	5d                   	pop    ebp
c00286a6:	c3                   	ret    

Disassembly of section .fini:

c00286a7 <_fini>:
c00286a7:	55                   	push   ebp
c00286a8:	89 e5                	mov    ebp,esp
c00286aa:	e8 f9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286af:	5d                   	pop    ebp
c00286b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286b2 <Computer::~Computer()>:
c00286b2:	83 ec 0c             	sub    esp,0xc
c00286b5:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c00286ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286be:	89 10                	mov    DWORD PTR [eax],edx
c00286c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c4:	83 ec 0c             	sub    esp,0xc
c00286c7:	50                   	push   eax
c00286c8:	e8 85 bb fe ff       	call   c0014252 <Device::~Device()>
c00286cd:	83 c4 10             	add    esp,0x10
c00286d0:	90                   	nop
c00286d1:	83 c4 0c             	add    esp,0xc
c00286d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286d6 <Computer::~Computer()>:
c00286d6:	83 ec 0c             	sub    esp,0xc
c00286d9:	83 ec 0c             	sub    esp,0xc
c00286dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286e0:	e8 cd ff ff ff       	call   c00286b2 <Computer::~Computer()>
c00286e5:	83 c4 10             	add    esp,0x10
c00286e8:	83 ec 08             	sub    esp,0x8
c00286eb:	68 ec 01 00 00       	push   0x1ec
c00286f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286f4:	e8 80 a7 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00286f9:	83 c4 10             	add    esp,0x10
c00286fc:	83 c4 0c             	add    esp,0xc
c00286ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028700 <idleCommon()>:
c0028700:	83 ec 0c             	sub    esp,0xc
c0028703:	e8 18 57 ff ff       	call   c001de20 <lockScheduler()>
c0028708:	e8 4f 5a ff ff       	call   c001e15c <schedule()>
c002870d:	83 c4 0c             	add    esp,0xc
c0028710:	e9 0d 57 ff ff       	jmp    c001de22 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028716 <LinkedList<UnixFile>::~LinkedList()>:
c0028716:	90                   	nop
c0028717:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028718 <LinkedList<UnixFile>::LinkedList()>:
c0028718:	83 ec 0c             	sub    esp,0xc
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028749:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028754:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002875b:	83 ec 0c             	sub    esp,0xc
c002875e:	68 ba a4 02 c0       	push   0xc002a4ba
c0028763:	e8 f1 a7 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0028768:	83 c4 10             	add    esp,0x10
c002876b:	90                   	nop
c002876c:	83 c4 0c             	add    esp,0xc
c002876f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028770 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028778:	75 10                	jne    c002878a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002877a:	83 ec 0c             	sub    esp,0xc
c002877d:	68 d4 a4 02 c0       	push   0xc002a4d4
c0028782:	e8 74 1e ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	85 c0                	test   eax,eax
c0028792:	74 34                	je     c00287c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879b:	85 c0                	test   eax,eax
c002879d:	74 29                	je     c00287c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002879f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287c6:	eb 65                	jmp    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ce:	85 c0                	test   eax,eax
c00287d0:	75 4b                	jne    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d9:	85 c0                	test   eax,eax
c00287db:	75 40                	jne    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e5:	89 10                	mov    DWORD PTR [eax],edx
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028807:	85 c0                	test   eax,eax
c0028809:	74 22                	je     c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002880b:	83 ec 0c             	sub    esp,0xc
c002880e:	68 f6 a4 02 c0       	push   0xc002a4f6
c0028813:	e8 e3 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028818:	83 c4 10             	add    esp,0x10
c002881b:	eb 10                	jmp    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002881d:	83 ec 0c             	sub    esp,0xc
c0028820:	68 00 a5 02 c0       	push   0xc002a500
c0028825:	e8 d1 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c002882a:	83 c4 10             	add    esp,0x10
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028834:	8d 50 01             	lea    edx,[eax+0x1]
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883e:	90                   	nop
c002883f:	83 c4 0c             	add    esp,0xc
c0028842:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028844 <LinkedList<UnixFile>::getFirstElement()>:
c0028844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028848:	8b 00                	mov    eax,DWORD PTR [eax]
c002884a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002884c <LinkedList<UnixFile>::removeFirst()>:
c002884c:	83 ec 0c             	sub    esp,0xc
c002884f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028853:	8b 00                	mov    eax,DWORD PTR [eax]
c0028855:	85 c0                	test   eax,eax
c0028857:	75 12                	jne    c002886b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028859:	83 ec 0c             	sub    esp,0xc
c002885c:	68 0c a5 02 c0       	push   0xc002a50c
c0028861:	e8 95 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028866:	83 c4 10             	add    esp,0x10
c0028869:	eb 7e                	jmp    c00288e9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028875:	85 c0                	test   eax,eax
c0028877:	74 10                	je     c0028889 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028879:	83 ec 0c             	sub    esp,0xc
c002887c:	68 57 a5 02 c0       	push   0xc002a557
c0028881:	e8 75 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028886:	83 c4 10             	add    esp,0x10
c0028889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888d:	8b 00                	mov    eax,DWORD PTR [eax]
c002888f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028892:	85 c0                	test   eax,eax
c0028894:	75 33                	jne    c00288c9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b2:	83 f8 01             	cmp    eax,0x1
c00288b5:	74 21                	je     c00288d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288b7:	83 ec 0c             	sub    esp,0xc
c00288ba:	68 30 a5 02 c0       	push   0xc002a530
c00288bf:	e8 37 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00288c4:	83 c4 10             	add    esp,0x10
c00288c7:	eb 0f                	jmp    c00288d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288cf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	89 10                	mov    DWORD PTR [eax],edx
c00288d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288df:	8d 50 ff             	lea    edx,[eax-0x1]
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288e9:	83 c4 0c             	add    esp,0xc
c00288ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ee <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288f6 <DriverlessDevice::~DriverlessDevice()>:
c00288f6:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c00288fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ff:	89 10                	mov    DWORD PTR [eax],edx
c0028901:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028905:	50                   	push   eax
c0028906:	e8 47 b9 fe ff       	call   c0014252 <Device::~Device()>
c002890b:	83 c4 04             	add    esp,0x4
c002890e:	90                   	nop
c002890f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028910 <DriverlessDevice::~DriverlessDevice()>:
c0028910:	83 ec 0c             	sub    esp,0xc
c0028913:	83 ec 0c             	sub    esp,0xc
c0028916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002891a:	e8 d7 ff ff ff       	call   c00288f6 <DriverlessDevice::~DriverlessDevice()>
c002891f:	83 c4 10             	add    esp,0x10
c0028922:	83 ec 08             	sub    esp,0x8
c0028925:	68 58 01 00 00       	push   0x158
c002892a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002892e:	e8 46 a5 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028933:	83 c4 10             	add    esp,0x10
c0028936:	83 c4 0c             	add    esp,0xc
c0028939:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002893a <LinkedList<Device>::addElement(Device*)>:
c002893a:	83 ec 0c             	sub    esp,0xc
c002893d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028942:	75 10                	jne    c0028954 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028944:	83 ec 0c             	sub    esp,0xc
c0028947:	68 d4 a4 02 c0       	push   0xc002a4d4
c002894c:	e8 aa 1c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028951:	83 c4 10             	add    esp,0x10
c0028954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028958:	8b 00                	mov    eax,DWORD PTR [eax]
c002895a:	85 c0                	test   eax,eax
c002895c:	74 3a                	je     c0028998 <LinkedList<Device>::addElement(Device*)+0x5e>
c002895e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028962:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028965:	85 c0                	test   eax,eax
c0028967:	74 2f                	je     c0028998 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028970:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028974:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028982:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028989:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002898c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028996:	eb 68                	jmp    c0028a00 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899c:	8b 00                	mov    eax,DWORD PTR [eax]
c002899e:	85 c0                	test   eax,eax
c00289a0:	75 4e                	jne    c00289f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a9:	85 c0                	test   eax,eax
c00289ab:	75 43                	jne    c00289f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289b5:	89 10                	mov    DWORD PTR [eax],edx
c00289b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289da:	85 c0                	test   eax,eax
c00289dc:	74 22                	je     c0028a00 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289de:	83 ec 0c             	sub    esp,0xc
c00289e1:	68 f6 a4 02 c0       	push   0xc002a4f6
c00289e6:	e8 10 1c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00289eb:	83 c4 10             	add    esp,0x10
c00289ee:	eb 10                	jmp    c0028a00 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	68 00 a5 02 c0       	push   0xc002a500
c00289f8:	e8 fe 1b ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00289fd:	83 c4 10             	add    esp,0x10
c0028a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a07:	8d 50 01             	lea    edx,[eax+0x1]
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a11:	90                   	nop
c0028a12:	83 c4 0c             	add    esp,0xc
c0028a15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a16 <LinkedList<Device>::LinkedList()>:
c0028a16:	83 ec 0c             	sub    esp,0xc
c0028a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a52:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a59:	83 ec 0c             	sub    esp,0xc
c0028a5c:	68 ba a4 02 c0       	push   0xc002a4ba
c0028a61:	e8 f3 a4 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0028a66:	83 c4 10             	add    esp,0x10
c0028a69:	90                   	nop
c0028a6a:	83 c4 0c             	add    esp,0xc
c0028a6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7c:	85 c0                	test   eax,eax
c0028a7e:	75 0e                	jne    c0028a8e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a87:	85 c0                	test   eax,eax
c0028a89:	75 03                	jne    c0028a8e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a8b:	b0 01                	mov    al,0x1
c0028a8d:	c3                   	ret    
c0028a8e:	b0 00                	mov    al,0x0
c0028a90:	90                   	nop
c0028a91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a92:	83 ec 0c             	sub    esp,0xc
c0028a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9b:	85 c0                	test   eax,eax
c0028a9d:	75 15                	jne    c0028ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a9f:	83 ec 0c             	sub    esp,0xc
c0028aa2:	68 0c a5 02 c0       	push   0xc002a50c
c0028aa7:	e8 4f 1b ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028aac:	83 c4 10             	add    esp,0x10
c0028aaf:	e9 88 00 00 00       	jmp    c0028b3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028abb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028abe:	85 c0                	test   eax,eax
c0028ac0:	0f 95 c0             	setne  al
c0028ac3:	84 c0                	test   al,al
c0028ac5:	74 10                	je     c0028ad7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ac7:	83 ec 0c             	sub    esp,0xc
c0028aca:	68 57 a5 02 c0       	push   0xc002a557
c0028acf:	e8 27 1b ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028ad4:	83 c4 10             	add    esp,0x10
c0028ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028add:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ae0:	85 c0                	test   eax,eax
c0028ae2:	0f 94 c0             	sete   al
c0028ae5:	84 c0                	test   al,al
c0028ae7:	74 33                	je     c0028b1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b05:	83 f8 01             	cmp    eax,0x1
c0028b08:	74 21                	je     c0028b2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	68 30 a5 02 c0       	push   0xc002a530
c0028b12:	e8 e4 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	eb 0f                	jmp    c0028b2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b22:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b29:	89 10                	mov    DWORD PTR [eax],edx
c0028b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b32:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b3c:	83 c4 0c             	add    esp,0xc
c0028b3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b40:	83 ec 0c             	sub    esp,0xc
c0028b43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b48:	75 10                	jne    c0028b5a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b4a:	83 ec 0c             	sub    esp,0xc
c0028b4d:	68 d4 a4 02 c0       	push   0xc002a4d4
c0028b52:	e8 a4 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028b57:	83 c4 10             	add    esp,0x10
c0028b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b60:	85 c0                	test   eax,eax
c0028b62:	74 34                	je     c0028b98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b6b:	85 c0                	test   eax,eax
c0028b6d:	74 29                	je     c0028b98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b8f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b96:	eb 65                	jmp    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b9e:	85 c0                	test   eax,eax
c0028ba0:	75 4b                	jne    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba9:	85 c0                	test   eax,eax
c0028bab:	75 40                	jne    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bb5:	89 10                	mov    DWORD PTR [eax],edx
c0028bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bc9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd7:	85 c0                	test   eax,eax
c0028bd9:	74 22                	je     c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bdb:	83 ec 0c             	sub    esp,0xc
c0028bde:	68 f6 a4 02 c0       	push   0xc002a4f6
c0028be3:	e8 13 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028be8:	83 c4 10             	add    esp,0x10
c0028beb:	eb 10                	jmp    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bed:	83 ec 0c             	sub    esp,0xc
c0028bf0:	68 00 a5 02 c0       	push   0xc002a500
c0028bf5:	e8 01 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028bfa:	83 c4 10             	add    esp,0x10
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c04:	8d 50 01             	lea    edx,[eax+0x1]
c0028c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c0e:	90                   	nop
c0028c0f:	83 c4 0c             	add    esp,0xc
c0028c12:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c14 <ACPI::~ACPI()>:
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0028c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c20:	89 10                	mov    DWORD PTR [eax],edx
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	83 ec 0c             	sub    esp,0xc
c0028c29:	50                   	push   eax
c0028c2a:	e8 23 b6 fe ff       	call   c0014252 <Device::~Device()>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	90                   	nop
c0028c33:	83 c4 0c             	add    esp,0xc
c0028c36:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c38 <ACPI::~ACPI()>:
c0028c38:	83 ec 0c             	sub    esp,0xc
c0028c3b:	83 ec 0c             	sub    esp,0xc
c0028c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c42:	e8 cd ff ff ff       	call   c0028c14 <ACPI::~ACPI()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	83 ec 08             	sub    esp,0x8
c0028c4d:	68 68 12 00 00       	push   0x1268
c0028c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c56:	e8 1e a2 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028c5b:	83 c4 10             	add    esp,0x10
c0028c5e:	83 c4 0c             	add    esp,0xc
c0028c61:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c62 <CPU::~CPU()>:
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	ba 5c bb 02 c0       	mov    edx,0xc002bb5c
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	89 10                	mov    DWORD PTR [eax],edx
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	83 ec 0c             	sub    esp,0xc
c0028c77:	50                   	push   eax
c0028c78:	e8 d5 b5 fe ff       	call   c0014252 <Device::~Device()>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	90                   	nop
c0028c81:	83 c4 0c             	add    esp,0xc
c0028c84:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c86 <CPU::~CPU()>:
c0028c86:	83 ec 0c             	sub    esp,0xc
c0028c89:	83 ec 0c             	sub    esp,0xc
c0028c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c90:	e8 cd ff ff ff       	call   c0028c62 <CPU::~CPU()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	83 ec 08             	sub    esp,0x8
c0028c9b:	68 98 11 00 00       	push   0x1198
c0028ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca4:	e8 d0 a1 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028ca9:	83 c4 10             	add    esp,0x10
c0028cac:	83 c4 0c             	add    esp,0xc
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028cb0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028cb0:	90                   	nop
c0028cb1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028cb2 <ThreadControlBlock::ThreadControlBlock()>:
c0028cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ccc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cea:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cee:	90                   	nop
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d33:	83 ec 0c             	sub    esp,0xc
c0028d36:	68 ba a4 02 c0       	push   0xc002a4ba
c0028d3b:	e8 19 a2 fe ff       	call   c0012f59 <Dbg::kprintf(char const*, ...)>
c0028d40:	83 c4 10             	add    esp,0x10
c0028d43:	90                   	nop
c0028d44:	83 c4 0c             	add    esp,0xc
c0028d47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d48 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d50 <Vm::_FPUState::_FPUState()>:
c0028d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d54:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d5b:	90                   	nop
c0028d5c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d5e <PCI::~PCI()>:
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	ba 50 cc 02 c0       	mov    edx,0xc002cc50
c0028d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6a:	89 10                	mov    DWORD PTR [eax],edx
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	83 ec 0c             	sub    esp,0xc
c0028d73:	50                   	push   eax
c0028d74:	e8 b1 ae fe ff       	call   c0013c2a <Bus::~Bus()>
c0028d79:	83 c4 10             	add    esp,0x10
c0028d7c:	90                   	nop
c0028d7d:	83 c4 0c             	add    esp,0xc
c0028d80:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d82 <PCI::~PCI()>:
c0028d82:	83 ec 0c             	sub    esp,0xc
c0028d85:	83 ec 0c             	sub    esp,0xc
c0028d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8c:	e8 cd ff ff ff       	call   c0028d5e <PCI::~PCI()>
c0028d91:	83 c4 10             	add    esp,0x10
c0028d94:	83 ec 08             	sub    esp,0x8
c0028d97:	68 58 01 00 00       	push   0x158
c0028d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da0:	e8 d4 a0 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	83 c4 0c             	add    esp,0xc
c0028dab:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028dac <IDE::~IDE()>:
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	ba b4 ce 02 c0       	mov    edx,0xc002ceb4
c0028db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db8:	89 10                	mov    DWORD PTR [eax],edx
c0028dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbe:	83 ec 0c             	sub    esp,0xc
c0028dc1:	50                   	push   eax
c0028dc2:	e8 7b b9 fe ff       	call   c0014742 <HardDiskController::~HardDiskController()>
c0028dc7:	83 c4 10             	add    esp,0x10
c0028dca:	90                   	nop
c0028dcb:	83 c4 0c             	add    esp,0xc
c0028dce:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dd0 <IDE::~IDE()>:
c0028dd0:	83 ec 0c             	sub    esp,0xc
c0028dd3:	83 ec 0c             	sub    esp,0xc
c0028dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dda:	e8 cd ff ff ff       	call   c0028dac <IDE::~IDE()>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	83 ec 08             	sub    esp,0x8
c0028de5:	68 70 02 00 00       	push   0x270
c0028dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dee:	e8 86 a0 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	83 c4 0c             	add    esp,0xc
c0028df9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dfa <SATABus::~SATABus()>:
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	ba 94 cf 02 c0       	mov    edx,0xc002cf94
c0028e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e06:	89 10                	mov    DWORD PTR [eax],edx
c0028e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0c:	83 ec 0c             	sub    esp,0xc
c0028e0f:	50                   	push   eax
c0028e10:	e8 2d b9 fe ff       	call   c0014742 <HardDiskController::~HardDiskController()>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	90                   	nop
c0028e19:	83 c4 0c             	add    esp,0xc
c0028e1c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e1e <SATABus::~SATABus()>:
c0028e1e:	83 ec 0c             	sub    esp,0xc
c0028e21:	83 ec 0c             	sub    esp,0xc
c0028e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e28:	e8 cd ff ff ff       	call   c0028dfa <SATABus::~SATABus()>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	83 ec 08             	sub    esp,0x8
c0028e33:	68 64 01 00 00       	push   0x164
c0028e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3c:	e8 38 a0 fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028e41:	83 c4 10             	add    esp,0x10
c0028e44:	83 c4 0c             	add    esp,0xc
c0028e47:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e48 <ATA::~ATA()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0028e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e54:	89 10                	mov    DWORD PTR [eax],edx
c0028e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5a:	83 ec 0c             	sub    esp,0xc
c0028e5d:	50                   	push   eax
c0028e5e:	e8 d1 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	90                   	nop
c0028e67:	83 c4 0c             	add    esp,0xc
c0028e6a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e6c <ATA::~ATA()>:
c0028e6c:	83 ec 0c             	sub    esp,0xc
c0028e6f:	83 ec 0c             	sub    esp,0xc
c0028e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e76:	e8 cd ff ff ff       	call   c0028e48 <ATA::~ATA()>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	83 ec 08             	sub    esp,0x8
c0028e81:	68 7c 01 00 00       	push   0x17c
c0028e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8a:	e8 ea 9f fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	83 c4 0c             	add    esp,0xc
c0028e95:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e96 <ATAPI::~ATAPI()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	ba 18 d0 02 c0       	mov    edx,0xc002d018
c0028e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea2:	89 10                	mov    DWORD PTR [eax],edx
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	83 ec 0c             	sub    esp,0xc
c0028eab:	50                   	push   eax
c0028eac:	e8 83 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	90                   	nop
c0028eb5:	83 c4 0c             	add    esp,0xc
c0028eb8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eba <ATAPI::~ATAPI()>:
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	83 ec 0c             	sub    esp,0xc
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 cd ff ff ff       	call   c0028e96 <ATAPI::~ATAPI()>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 ec 08             	sub    esp,0x8
c0028ecf:	68 80 01 00 00       	push   0x180
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 9c 9f fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 c4 0c             	add    esp,0xc
c0028ee3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ee4 <SATA::~SATA()>:
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	89 10                	mov    DWORD PTR [eax],edx
c0028ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	50                   	push   eax
c0028efa:	e8 35 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028eff:	83 c4 10             	add    esp,0x10
c0028f02:	90                   	nop
c0028f03:	83 c4 0c             	add    esp,0xc
c0028f06:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f08 <SATA::~SATA()>:
c0028f08:	83 ec 0c             	sub    esp,0xc
c0028f0b:	83 ec 0c             	sub    esp,0xc
c0028f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f12:	e8 cd ff ff ff       	call   c0028ee4 <SATA::~SATA()>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	83 ec 08             	sub    esp,0x8
c0028f1d:	68 7c 01 00 00       	push   0x17c
c0028f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f26:	e8 4e 9f fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028f2b:	83 c4 10             	add    esp,0x10
c0028f2e:	83 c4 0c             	add    esp,0xc
c0028f31:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f32 <SATAPI::~SATAPI()>:
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	ba a8 d1 02 c0       	mov    edx,0xc002d1a8
c0028f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3e:	89 10                	mov    DWORD PTR [eax],edx
c0028f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f44:	83 ec 0c             	sub    esp,0xc
c0028f47:	50                   	push   eax
c0028f48:	e8 e7 b8 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	90                   	nop
c0028f51:	83 c4 0c             	add    esp,0xc
c0028f54:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f56 <SATAPI::~SATAPI()>:
c0028f56:	83 ec 0c             	sub    esp,0xc
c0028f59:	83 ec 0c             	sub    esp,0xc
c0028f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f60:	e8 cd ff ff ff       	call   c0028f32 <SATAPI::~SATAPI()>
c0028f65:	83 c4 10             	add    esp,0x10
c0028f68:	83 ec 08             	sub    esp,0x8
c0028f6b:	68 80 01 00 00       	push   0x180
c0028f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f74:	e8 00 9f fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028f79:	83 c4 10             	add    esp,0x10
c0028f7c:	83 c4 0c             	add    esp,0xc
c0028f7f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f80 <AVX::~AVX()>:
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	ba e8 d1 02 c0       	mov    edx,0xc002d1e8
c0028f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8c:	89 10                	mov    DWORD PTR [eax],edx
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	50                   	push   eax
c0028f96:	e8 1d b9 fe ff       	call   c00148b8 <FPU::~FPU()>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	90                   	nop
c0028f9f:	83 c4 0c             	add    esp,0xc
c0028fa2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fa4 <AVX::~AVX()>:
c0028fa4:	83 ec 0c             	sub    esp,0xc
c0028fa7:	83 ec 0c             	sub    esp,0xc
c0028faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fae:	e8 cd ff ff ff       	call   c0028f80 <AVX::~AVX()>
c0028fb3:	83 c4 10             	add    esp,0x10
c0028fb6:	83 ec 08             	sub    esp,0x8
c0028fb9:	68 58 01 00 00       	push   0x158
c0028fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc2:	e8 b2 9e fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0028fc7:	83 c4 10             	add    esp,0x10
c0028fca:	83 c4 0c             	add    esp,0xc
c0028fcd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fce <MMX::~MMX()>:
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	ba 28 d2 02 c0       	mov    edx,0xc002d228
c0028fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fda:	89 10                	mov    DWORD PTR [eax],edx
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	50                   	push   eax
c0028fe4:	e8 cf b8 fe ff       	call   c00148b8 <FPU::~FPU()>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	90                   	nop
c0028fed:	83 c4 0c             	add    esp,0xc
c0028ff0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028ff2 <MMX::~MMX()>:
c0028ff2:	83 ec 0c             	sub    esp,0xc
c0028ff5:	83 ec 0c             	sub    esp,0xc
c0028ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffc:	e8 cd ff ff ff       	call   c0028fce <MMX::~MMX()>
c0029001:	83 c4 10             	add    esp,0x10
c0029004:	83 ec 08             	sub    esp,0x8
c0029007:	68 58 01 00 00       	push   0x158
c002900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029010:	e8 64 9e fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0029015:	83 c4 10             	add    esp,0x10
c0029018:	83 c4 0c             	add    esp,0xc
c002901b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002901c <SSE::~SSE()>:
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	ba 68 d2 02 c0       	mov    edx,0xc002d268
c0029024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029028:	89 10                	mov    DWORD PTR [eax],edx
c002902a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902e:	83 ec 0c             	sub    esp,0xc
c0029031:	50                   	push   eax
c0029032:	e8 81 b8 fe ff       	call   c00148b8 <FPU::~FPU()>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	90                   	nop
c002903b:	83 c4 0c             	add    esp,0xc
c002903e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029040 <SSE::~SSE()>:
c0029040:	83 ec 0c             	sub    esp,0xc
c0029043:	83 ec 0c             	sub    esp,0xc
c0029046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904a:	e8 cd ff ff ff       	call   c002901c <SSE::~SSE()>
c002904f:	83 c4 10             	add    esp,0x10
c0029052:	83 ec 08             	sub    esp,0x8
c0029055:	68 58 01 00 00       	push   0x158
c002905a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905e:	e8 16 9e fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0029063:	83 c4 10             	add    esp,0x10
c0029066:	83 c4 0c             	add    esp,0xc
c0029069:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002906a <x87::~x87()>:
c002906a:	83 ec 0c             	sub    esp,0xc
c002906d:	ba a8 d2 02 c0       	mov    edx,0xc002d2a8
c0029072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029076:	89 10                	mov    DWORD PTR [eax],edx
c0029078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907c:	83 ec 0c             	sub    esp,0xc
c002907f:	50                   	push   eax
c0029080:	e8 33 b8 fe ff       	call   c00148b8 <FPU::~FPU()>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	90                   	nop
c0029089:	83 c4 0c             	add    esp,0xc
c002908c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002908e <x87::~x87()>:
c002908e:	83 ec 0c             	sub    esp,0xc
c0029091:	83 ec 0c             	sub    esp,0xc
c0029094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029098:	e8 cd ff ff ff       	call   c002906a <x87::~x87()>
c002909d:	83 c4 10             	add    esp,0x10
c00290a0:	83 ec 08             	sub    esp,0x8
c00290a3:	68 58 01 00 00       	push   0x158
c00290a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ac:	e8 c8 9d fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00290b1:	83 c4 10             	add    esp,0x10
c00290b4:	83 c4 0c             	add    esp,0xc
c00290b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290b8 <IOAPIC::~IOAPIC()>:
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	ba 00 d4 02 c0       	mov    edx,0xc002d400
c00290c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c4:	89 10                	mov    DWORD PTR [eax],edx
c00290c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ca:	83 ec 0c             	sub    esp,0xc
c00290cd:	50                   	push   eax
c00290ce:	e8 7f b1 fe ff       	call   c0014252 <Device::~Device()>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	90                   	nop
c00290d7:	83 c4 0c             	add    esp,0xc
c00290da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290dc <IOAPIC::~IOAPIC()>:
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	83 ec 0c             	sub    esp,0xc
c00290e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e6:	e8 cd ff ff ff       	call   c00290b8 <IOAPIC::~IOAPIC()>
c00290eb:	83 c4 10             	add    esp,0x10
c00290ee:	83 ec 08             	sub    esp,0x8
c00290f1:	68 68 01 00 00       	push   0x168
c00290f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fa:	e8 7a 9d fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00290ff:	83 c4 10             	add    esp,0x10
c0029102:	83 c4 0c             	add    esp,0xc
c0029105:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029106 <APIC::~APIC()>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	ba b8 d3 02 c0       	mov    edx,0xc002d3b8
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	89 10                	mov    DWORD PTR [eax],edx
c0029114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029118:	83 ec 0c             	sub    esp,0xc
c002911b:	50                   	push   eax
c002911c:	e8 61 bc fe ff       	call   c0014d82 <InterruptController::~InterruptController()>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	90                   	nop
c0029125:	83 c4 0c             	add    esp,0xc
c0029128:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002912a <APIC::~APIC()>:
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	83 ec 0c             	sub    esp,0xc
c0029130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029134:	e8 cd ff ff ff       	call   c0029106 <APIC::~APIC()>
c0029139:	83 c4 10             	add    esp,0x10
c002913c:	83 ec 08             	sub    esp,0x8
c002913f:	68 58 21 00 00       	push   0x2158
c0029144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029148:	e8 2c 9d fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	83 c4 0c             	add    esp,0xc
c0029153:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029154 <PIC::~PIC()>:
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	ba 50 d4 02 c0       	mov    edx,0xc002d450
c002915c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029160:	89 10                	mov    DWORD PTR [eax],edx
c0029162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	50                   	push   eax
c002916a:	e8 13 bc fe ff       	call   c0014d82 <InterruptController::~InterruptController()>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	90                   	nop
c0029173:	83 c4 0c             	add    esp,0xc
c0029176:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029178 <PIC::~PIC()>:
c0029178:	83 ec 0c             	sub    esp,0xc
c002917b:	83 ec 0c             	sub    esp,0xc
c002917e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029182:	e8 cd ff ff ff       	call   c0029154 <PIC::~PIC()>
c0029187:	83 c4 10             	add    esp,0x10
c002918a:	83 ec 08             	sub    esp,0x8
c002918d:	68 58 21 00 00       	push   0x2158
c0029192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029196:	e8 de 9c fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c002919b:	83 c4 10             	add    esp,0x10
c002919e:	83 c4 0c             	add    esp,0xc
c00291a1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291a2 <APICTimer::~APICTimer()>:
c00291a2:	83 ec 0c             	sub    esp,0xc
c00291a5:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c00291aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ae:	89 10                	mov    DWORD PTR [eax],edx
c00291b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b4:	83 ec 0c             	sub    esp,0xc
c00291b7:	50                   	push   eax
c00291b8:	e8 11 db fe ff       	call   c0016cce <Timer::~Timer()>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	90                   	nop
c00291c1:	83 c4 0c             	add    esp,0xc
c00291c4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291c6 <APICTimer::~APICTimer()>:
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	83 ec 0c             	sub    esp,0xc
c00291cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d0:	e8 cd ff ff ff       	call   c00291a2 <APICTimer::~APICTimer()>
c00291d5:	83 c4 10             	add    esp,0x10
c00291d8:	83 ec 08             	sub    esp,0x8
c00291db:	68 60 01 00 00       	push   0x160
c00291e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e4:	e8 90 9c fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c00291e9:	83 c4 10             	add    esp,0x10
c00291ec:	83 c4 0c             	add    esp,0xc
c00291ef:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291f0 <PIT::~PIT()>:
c00291f0:	83 ec 0c             	sub    esp,0xc
c00291f3:	ba f4 d4 02 c0       	mov    edx,0xc002d4f4
c00291f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fc:	89 10                	mov    DWORD PTR [eax],edx
c00291fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029202:	83 ec 0c             	sub    esp,0xc
c0029205:	50                   	push   eax
c0029206:	e8 c3 da fe ff       	call   c0016cce <Timer::~Timer()>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	90                   	nop
c002920f:	83 c4 0c             	add    esp,0xc
c0029212:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029214 <PIT::~PIT()>:
c0029214:	83 ec 0c             	sub    esp,0xc
c0029217:	83 ec 0c             	sub    esp,0xc
c002921a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002921e:	e8 cd ff ff ff       	call   c00291f0 <PIT::~PIT()>
c0029223:	83 c4 10             	add    esp,0x10
c0029226:	83 ec 08             	sub    esp,0x8
c0029229:	68 5c 01 00 00       	push   0x15c
c002922e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029232:	e8 42 9c fe ff       	call   c0012e79 <operator delete(void*, unsigned long)>
c0029237:	83 c4 10             	add    esp,0x10
c002923a:	83 c4 0c             	add    esp,0xc
c002923d:	c3                   	ret    
